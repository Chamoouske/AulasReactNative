{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _common = require(\"./common\");\n\nvar _versionRanges = _interopRequireDefault(require(\"../versionRanges\"));\n\nvar _checkInstallation = require(\"../checkInstallation\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar _default = {\n  label: 'Android NDK',\n  description: 'Required for building React Native from the source',\n  getDiagnostics: function getDiagnostics(_ref) {\n    var SDKs, androidSdk, version;\n    return _regeneratorRuntime.async(function getDiagnostics$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            SDKs = _ref.SDKs;\n            androidSdk = SDKs['Android SDK'];\n            version = androidSdk === 'Not Found' ? androidSdk : androidSdk['Android NDK'];\n            return _context.abrupt(\"return\", {\n              needsToBeFixed: (0, _checkInstallation.doesSoftwareNeedToBeFixed)({\n                version: version,\n                versionRange: _versionRanges.default.ANDROID_NDK\n              }),\n              version: version,\n              versionRange: _versionRanges.default.ANDROID_NDK\n            });\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  runAutomaticFix: function runAutomaticFix(_ref2) {\n    var loader, environmentInfo, androidSdk, isNDKInstalled;\n    return _regeneratorRuntime.async(function runAutomaticFix$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            loader = _ref2.loader, environmentInfo = _ref2.environmentInfo;\n            androidSdk = environmentInfo.SDKs['Android SDK'];\n            isNDKInstalled = androidSdk !== 'Not Found' && androidSdk['Android NDK'] !== 'Not Found';\n            loader.fail();\n\n            if (!isNDKInstalled) {\n              _context2.next = 6;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", (0, _common.logManualInstallation)({\n              message: \"Read more about how to update Android NDK at \" + _chalk().default.dim('https://developer.android.com/ndk/downloads')\n            }));\n\n          case 6:\n            return _context2.abrupt(\"return\", (0, _common.logManualInstallation)({\n              healthcheck: 'Android NDK',\n              url: 'https://developer.android.com/ndk/downloads'\n            }));\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};\nexports.default = _default;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli/build/commands/doctor/healthchecks/androidNDK.js"],"names":["Object","defineProperty","exports","value","default","_chalk","data","_interopRequireDefault","require","_common","_versionRanges","_checkInstallation","obj","__esModule","_default","label","description","getDiagnostics","SDKs","androidSdk","version","needsToBeFixed","doesSoftwareNeedToBeFixed","versionRange","ANDROID_NDK","runAutomaticFix","loader","environmentInfo","isNDKInstalled","fail","logManualInstallation","message","dim","healthcheck","url"],"mappings":"AAAA;;;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,SAASC,MAAT,GAAkB;AAChB,MAAMC,IAAI,GAAGC,sBAAsB,CAACC,OAAO,CAAC,OAAD,CAAR,CAAnC;;AAEAH,EAAAA,MAAM,GAAG,kBAAY;AACnB,WAAOC,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,IAAIG,OAAO,GAAGD,OAAO,YAArB;;AAEA,IAAIE,cAAc,GAAGH,sBAAsB,CAACC,OAAO,oBAAR,CAA3C;;AAEA,IAAIG,kBAAkB,GAAGH,OAAO,wBAAhC;;AAEA,SAASD,sBAAT,CAAgCK,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAER,IAAAA,OAAO,EAAEQ;AAAX,GAArC;AAAwD;;AAE/F,IAAIE,QAAQ,GAAG;AACbC,EAAAA,KAAK,EAAE,aADM;AAEbC,EAAAA,WAAW,EAAE,oDAFA;AAGbC,EAAAA,cAAc,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AACdC,YAAAA,IADc,QACdA,IADc;AAGRC,YAAAA,UAHQ,GAGKD,IAAI,CAAC,aAAD,CAHT;AAIRE,YAAAA,OAJQ,GAIED,UAAU,KAAK,WAAf,GAA6BA,UAA7B,GAA0CA,UAAU,CAAC,aAAD,CAJtD;AAAA,6CAKP;AACLE,cAAAA,cAAc,EAAE,CAAC,GAAGV,kBAAkB,CAACW,yBAAvB,EAAkD;AAChEF,gBAAAA,OAAO,EAAPA,OADgE;AAEhEG,gBAAAA,YAAY,EAAEb,cAAc,CAACN,OAAf,CAAuBoB;AAF2B,eAAlD,CADX;AAKLJ,cAAAA,OAAO,EAAPA,OALK;AAMLG,cAAAA,YAAY,EAAEb,cAAc,CAACN,OAAf,CAAuBoB;AANhC,aALO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAHH;AAiBbC,EAAAA,eAAe,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AACfC,YAAAA,MADe,SACfA,MADe,EAEfC,eAFe,SAEfA,eAFe;AAITR,YAAAA,UAJS,GAIIQ,eAAe,CAACT,IAAhB,CAAqB,aAArB,CAJJ;AAKTU,YAAAA,cALS,GAKQT,UAAU,KAAK,WAAf,IAA8BA,UAAU,CAAC,aAAD,CAAV,KAA8B,WALpE;AAMfO,YAAAA,MAAM,CAACG,IAAP;;AANe,iBAQXD,cARW;AAAA;AAAA;AAAA;;AAAA,8CASN,CAAC,GAAGnB,OAAO,CAACqB,qBAAZ,EAAmC;AACxCC,cAAAA,OAAO,oDAAkD1B,MAAM,GAAGD,OAAT,CAAiB4B,GAAjB,CAAqB,6CAArB;AADjB,aAAnC,CATM;;AAAA;AAAA,8CAcR,CAAC,GAAGvB,OAAO,CAACqB,qBAAZ,EAAmC;AACxCG,cAAAA,WAAW,EAAE,aAD2B;AAExCC,cAAAA,GAAG,EAAE;AAFmC,aAAnC,CAdQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjBJ,CAAf;AAqCAhC,OAAO,CAACE,OAAR,GAAkBU,QAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require(\"chalk\"));\n\n  _chalk = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _common = require(\"./common\");\n\nvar _versionRanges = _interopRequireDefault(require(\"../versionRanges\"));\n\nvar _checkInstallation = require(\"../checkInstallation\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _default = {\n  label: 'Android NDK',\n  description: 'Required for building React Native from the source',\n  getDiagnostics: async ({\n    SDKs\n  }) => {\n    const androidSdk = SDKs['Android SDK'];\n    const version = androidSdk === 'Not Found' ? androidSdk : androidSdk['Android NDK'];\n    return {\n      needsToBeFixed: (0, _checkInstallation.doesSoftwareNeedToBeFixed)({\n        version,\n        versionRange: _versionRanges.default.ANDROID_NDK\n      }),\n      version,\n      versionRange: _versionRanges.default.ANDROID_NDK\n    };\n  },\n  runAutomaticFix: async ({\n    loader,\n    environmentInfo\n  }) => {\n    const androidSdk = environmentInfo.SDKs['Android SDK'];\n    const isNDKInstalled = androidSdk !== 'Not Found' && androidSdk['Android NDK'] !== 'Not Found';\n    loader.fail();\n\n    if (isNDKInstalled) {\n      return (0, _common.logManualInstallation)({\n        message: `Read more about how to update Android NDK at ${_chalk().default.dim('https://developer.android.com/ndk/downloads')}`\n      });\n    }\n\n    return (0, _common.logManualInstallation)({\n      healthcheck: 'Android NDK',\n      url: 'https://developer.android.com/ndk/downloads'\n    });\n  }\n};\nexports.default = _default;\n\n//# sourceMappingURL=androidNDK.js.map"]},"metadata":{},"sourceType":"script"}