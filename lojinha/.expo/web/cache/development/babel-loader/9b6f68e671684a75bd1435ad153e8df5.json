{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nvar _jsxFileName = \"/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/IntegrationTests/AsyncStorageTest.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar React = require('react');\n\nvar ReactNative = require(\"react-native-web/dist/index\");\n\nvar AsyncStorage = ReactNative.AsyncStorage,\n    Text = ReactNative.Text,\n    View = ReactNative.View,\n    StyleSheet = ReactNative.StyleSheet;\nvar TestModule = ReactNative.NativeModules.TestModule;\n\nvar deepDiffer = require('react-native/Libraries/Utilities/differ/deepDiffer');\n\nvar DEBUG = false;\nvar KEY_1 = 'key_1';\nvar VAL_1 = 'val_1';\nvar KEY_2 = 'key_2';\nvar VAL_2 = 'val_2';\nvar KEY_MERGE = 'key_merge';\nvar VAL_MERGE_1 = {\n  foo: 1,\n  bar: {\n    hoo: 1,\n    boo: 1\n  },\n  moo: {\n    a: 3\n  }\n};\nvar VAL_MERGE_2 = {\n  bar: {\n    hoo: 2\n  },\n  baz: 2,\n  moo: {\n    a: 3\n  }\n};\nvar VAL_MERGE_EXPECT = {\n  foo: 1,\n  bar: {\n    hoo: 2,\n    boo: 1\n  },\n  baz: 2,\n  moo: {\n    a: 3\n  }\n};\n\nvar done = function done(result) {};\n\nvar updateMessage = function updateMessage(message) {};\n\nfunction runTestCase(description, fn) {\n  updateMessage(description);\n  fn();\n}\n\nfunction expectTrue(condition, message) {\n  if (!condition) {\n    throw new Error(message);\n  }\n}\n\nfunction expectEqual(lhs, rhs, testname) {\n  expectTrue(!deepDiffer(lhs, rhs), 'Error in test ' + testname + ': expected\\n' + JSON.stringify(rhs) + '\\ngot\\n' + JSON.stringify(lhs));\n}\n\nfunction expectAsyncNoError(place, err) {\n  if (err instanceof Error) {\n    err = err.message;\n  }\n\n  expectTrue(err === null, 'Unexpected error in ' + place + ': ' + JSON.stringify(err));\n}\n\nfunction testSetAndGet() {\n  AsyncStorage.setItem(KEY_1, VAL_1, function (err1) {\n    expectAsyncNoError('testSetAndGet/setItem', err1);\n    AsyncStorage.getItem(KEY_1, function (err2, result) {\n      expectAsyncNoError('testSetAndGet/getItem', err2);\n      expectEqual(result, VAL_1, 'testSetAndGet setItem');\n      updateMessage('get(key_1) correctly returned ' + result);\n      runTestCase('should get null for missing key', testMissingGet);\n    });\n  });\n}\n\nfunction testMissingGet() {\n  AsyncStorage.getItem(KEY_2, function (err, result) {\n    expectAsyncNoError('testMissingGet/setItem', err);\n    expectEqual(result, null, 'testMissingGet');\n    updateMessage('missing get(key_2) correctly returned ' + result);\n    runTestCase('check set twice results in a single key', testSetTwice);\n  });\n}\n\nfunction testSetTwice() {\n  AsyncStorage.setItem(KEY_1, VAL_1, function () {\n    AsyncStorage.setItem(KEY_1, VAL_1, function () {\n      AsyncStorage.getItem(KEY_1, function (err, result) {\n        expectAsyncNoError('testSetTwice/setItem', err);\n        expectEqual(result, VAL_1, 'testSetTwice');\n        updateMessage('setTwice worked as expected');\n        runTestCase('test removeItem', testRemoveItem);\n      });\n    });\n  });\n}\n\nfunction testRemoveItem() {\n  AsyncStorage.setItem(KEY_1, VAL_1, function () {\n    AsyncStorage.setItem(KEY_2, VAL_2, function () {\n      AsyncStorage.getAllKeys(function (err, result) {\n        expectAsyncNoError('testRemoveItem/getAllKeys', err);\n        expectTrue(result.indexOf(KEY_1) >= 0 && result.indexOf(KEY_2) >= 0, 'Missing KEY_1 or KEY_2 in ' + '(' + result + ')');\n        updateMessage('testRemoveItem - add two items');\n        AsyncStorage.removeItem(KEY_1, function (err2) {\n          expectAsyncNoError('testRemoveItem/removeItem', err2);\n          updateMessage('delete successful ');\n          AsyncStorage.getItem(KEY_1, function (err3, result2) {\n            expectAsyncNoError('testRemoveItem/getItem', err3);\n            expectEqual(result2, null, 'testRemoveItem: key_1 present after delete');\n            updateMessage('key properly removed ');\n            AsyncStorage.getAllKeys(function (err4, result3) {\n              expectAsyncNoError('testRemoveItem/getAllKeys', err4);\n              expectTrue(result3.indexOf(KEY_1) === -1, 'Unexpected: KEY_1 present in ' + result3);\n              updateMessage('proper length returned.');\n              runTestCase('should merge values', testMerge);\n            });\n          });\n        });\n      });\n    });\n  });\n}\n\nfunction testMerge() {\n  AsyncStorage.setItem(KEY_MERGE, JSON.stringify(VAL_MERGE_1), function (err1) {\n    expectAsyncNoError('testMerge/setItem', err1);\n    AsyncStorage.mergeItem(KEY_MERGE, JSON.stringify(VAL_MERGE_2), function (err2) {\n      expectAsyncNoError('testMerge/mergeItem', err2);\n      AsyncStorage.getItem(KEY_MERGE, function (err3, result) {\n        expectAsyncNoError('testMerge/setItem', err3);\n        expectEqual(JSON.parse(result), VAL_MERGE_EXPECT, 'testMerge');\n        updateMessage('objects deeply merged\\nDone!');\n        runTestCase('multi set and get', testOptimizedMultiGet);\n      });\n    });\n  });\n}\n\nfunction testOptimizedMultiGet() {\n  var batch = [[KEY_1, VAL_1], [KEY_2, VAL_2]];\n  var keys = batch.map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        value = _ref2[1];\n\n    return key;\n  });\n  AsyncStorage.multiSet(batch, function (err1) {\n    [1, 2].forEach(function (i) {\n      expectAsyncNoError(i + \" testOptimizedMultiGet/multiSet\", err1);\n      AsyncStorage.multiGet(keys, function (err2, result) {\n        expectAsyncNoError(i + \" testOptimizedMultiGet/multiGet\", err2);\n        expectEqual(result, batch, i + \" testOptimizedMultiGet multiGet\");\n        updateMessage('multiGet([key_1, key_2]) correctly returned ' + JSON.stringify(result));\n        done();\n      });\n    });\n  });\n}\n\nvar AsyncStorageTest = function (_React$Component) {\n  _inherits(AsyncStorageTest, _React$Component);\n\n  var _super = _createSuper(AsyncStorageTest);\n\n  function AsyncStorageTest() {\n    var _this;\n\n    _classCallCheck(this, AsyncStorageTest);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      messages: 'Initializing...',\n      done: false\n    };\n    return _this;\n  }\n\n  _createClass(AsyncStorageTest, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      done = function done() {\n        return _this2.setState({\n          done: true\n        }, function () {\n          TestModule.markTestCompleted();\n        });\n      };\n\n      updateMessage = function updateMessage(msg) {\n        _this2.setState({\n          messages: _this2.state.messages.concat('\\n' + msg)\n        });\n\n        DEBUG && console.log(msg);\n      };\n\n      AsyncStorage.clear(testSetAndGet);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 7\n        }\n      }, React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 9\n        }\n      }, this.constructor.displayName + ': ', this.state.done ? 'Done' : 'Testing...', '\\n\\n' + this.state.messages));\n    }\n  }]);\n\n  return AsyncStorageTest;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    padding: 40\n  }\n});\nAsyncStorageTest.displayName = 'AsyncStorageTest';\nmodule.exports = AsyncStorageTest;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/IntegrationTests/AsyncStorageTest.js"],"names":["React","require","AsyncStorage","ReactNative","Text","View","StyleSheet","TestModule","NativeModules","deepDiffer","DEBUG","KEY_1","VAL_1","KEY_2","VAL_2","KEY_MERGE","VAL_MERGE_1","foo","bar","hoo","boo","moo","a","VAL_MERGE_2","baz","VAL_MERGE_EXPECT","done","result","updateMessage","message","runTestCase","description","fn","expectTrue","condition","Error","expectEqual","lhs","rhs","testname","JSON","stringify","expectAsyncNoError","place","err","testSetAndGet","setItem","err1","getItem","err2","testMissingGet","testSetTwice","testRemoveItem","getAllKeys","indexOf","removeItem","err3","result2","err4","result3","testMerge","mergeItem","parse","testOptimizedMultiGet","batch","keys","map","key","value","multiSet","forEach","i","multiGet","AsyncStorageTest","state","messages","setState","markTestCompleted","msg","concat","console","log","clear","styles","container","constructor","displayName","Component","create","backgroundColor","padding","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst React = require('react');\nconst ReactNative = require('react-native');\nconst {AsyncStorage, Text, View, StyleSheet} = ReactNative;\nconst {TestModule} = ReactNative.NativeModules;\n\nconst deepDiffer = require('react-native/Libraries/Utilities/differ/deepDiffer');\n\nconst DEBUG = false;\n\nconst KEY_1 = 'key_1';\nconst VAL_1 = 'val_1';\nconst KEY_2 = 'key_2';\nconst VAL_2 = 'val_2';\nconst KEY_MERGE = 'key_merge';\nconst VAL_MERGE_1 = {foo: 1, bar: {hoo: 1, boo: 1}, moo: {a: 3}};\nconst VAL_MERGE_2 = {bar: {hoo: 2}, baz: 2, moo: {a: 3}};\nconst VAL_MERGE_EXPECT = {foo: 1, bar: {hoo: 2, boo: 1}, baz: 2, moo: {a: 3}};\n\n// setup in componentDidMount\nlet done = (result: ?boolean) => {};\nlet updateMessage = (message: string) => {};\n\nfunction runTestCase(description: string, fn) {\n  updateMessage(description);\n  fn();\n}\n\nfunction expectTrue(condition: boolean, message: string) {\n  if (!condition) {\n    throw new Error(message);\n  }\n}\n\nfunction expectEqual(lhs, rhs, testname: string) {\n  expectTrue(\n    !deepDiffer(lhs, rhs),\n    'Error in test ' +\n      testname +\n      ': expected\\n' +\n      JSON.stringify(rhs) +\n      '\\ngot\\n' +\n      JSON.stringify(lhs),\n  );\n}\n\nfunction expectAsyncNoError(place, err) {\n  if (err instanceof Error) {\n    err = err.message;\n  }\n  expectTrue(\n    err === null,\n    'Unexpected error in ' + place + ': ' + JSON.stringify(err),\n  );\n}\n\nfunction testSetAndGet() {\n  AsyncStorage.setItem(KEY_1, VAL_1, err1 => {\n    expectAsyncNoError('testSetAndGet/setItem', err1);\n    AsyncStorage.getItem(KEY_1, (err2, result) => {\n      expectAsyncNoError('testSetAndGet/getItem', err2);\n      expectEqual(result, VAL_1, 'testSetAndGet setItem');\n      updateMessage('get(key_1) correctly returned ' + result);\n      runTestCase('should get null for missing key', testMissingGet);\n    });\n  });\n}\n\nfunction testMissingGet() {\n  AsyncStorage.getItem(KEY_2, (err, result) => {\n    expectAsyncNoError('testMissingGet/setItem', err);\n    expectEqual(result, null, 'testMissingGet');\n    updateMessage('missing get(key_2) correctly returned ' + result);\n    runTestCase('check set twice results in a single key', testSetTwice);\n  });\n}\n\nfunction testSetTwice() {\n  AsyncStorage.setItem(KEY_1, VAL_1, () => {\n    AsyncStorage.setItem(KEY_1, VAL_1, () => {\n      AsyncStorage.getItem(KEY_1, (err, result) => {\n        expectAsyncNoError('testSetTwice/setItem', err);\n        expectEqual(result, VAL_1, 'testSetTwice');\n        updateMessage('setTwice worked as expected');\n        runTestCase('test removeItem', testRemoveItem);\n      });\n    });\n  });\n}\n\nfunction testRemoveItem() {\n  AsyncStorage.setItem(KEY_1, VAL_1, () => {\n    AsyncStorage.setItem(KEY_2, VAL_2, () => {\n      AsyncStorage.getAllKeys((err, result) => {\n        expectAsyncNoError('testRemoveItem/getAllKeys', err);\n        expectTrue(\n          result.indexOf(KEY_1) >= 0 && result.indexOf(KEY_2) >= 0,\n          'Missing KEY_1 or KEY_2 in ' + '(' + result + ')',\n        );\n        updateMessage('testRemoveItem - add two items');\n        AsyncStorage.removeItem(KEY_1, err2 => {\n          expectAsyncNoError('testRemoveItem/removeItem', err2);\n          updateMessage('delete successful ');\n          AsyncStorage.getItem(KEY_1, (err3, result2) => {\n            expectAsyncNoError('testRemoveItem/getItem', err3);\n            expectEqual(\n              result2,\n              null,\n              'testRemoveItem: key_1 present after delete',\n            );\n            updateMessage('key properly removed ');\n            AsyncStorage.getAllKeys((err4, result3) => {\n              expectAsyncNoError('testRemoveItem/getAllKeys', err4);\n              expectTrue(\n                result3.indexOf(KEY_1) === -1,\n                'Unexpected: KEY_1 present in ' + result3,\n              );\n              updateMessage('proper length returned.');\n              runTestCase('should merge values', testMerge);\n            });\n          });\n        });\n      });\n    });\n  });\n}\n\nfunction testMerge() {\n  AsyncStorage.setItem(KEY_MERGE, JSON.stringify(VAL_MERGE_1), err1 => {\n    expectAsyncNoError('testMerge/setItem', err1);\n    AsyncStorage.mergeItem(KEY_MERGE, JSON.stringify(VAL_MERGE_2), err2 => {\n      expectAsyncNoError('testMerge/mergeItem', err2);\n      AsyncStorage.getItem(KEY_MERGE, (err3, result) => {\n        expectAsyncNoError('testMerge/setItem', err3);\n        expectEqual(JSON.parse(result), VAL_MERGE_EXPECT, 'testMerge');\n        updateMessage('objects deeply merged\\nDone!');\n        runTestCase('multi set and get', testOptimizedMultiGet);\n      });\n    });\n  });\n}\n\nfunction testOptimizedMultiGet() {\n  let batch = [[KEY_1, VAL_1], [KEY_2, VAL_2]];\n  let keys = batch.map(([key, value]) => key);\n  AsyncStorage.multiSet(batch, err1 => {\n    // yes, twice on purpose\n    [1, 2].forEach(i => {\n      expectAsyncNoError(`${i} testOptimizedMultiGet/multiSet`, err1);\n      AsyncStorage.multiGet(keys, (err2, result) => {\n        expectAsyncNoError(`${i} testOptimizedMultiGet/multiGet`, err2);\n        expectEqual(result, batch, `${i} testOptimizedMultiGet multiGet`);\n        updateMessage(\n          'multiGet([key_1, key_2]) correctly returned ' +\n            JSON.stringify(result),\n        );\n        done();\n      });\n    });\n  });\n}\n\nclass AsyncStorageTest extends React.Component<{...}, $FlowFixMeState> {\n  state: any | {|done: boolean, messages: string|} = {\n    messages: 'Initializing...',\n    done: false,\n  };\n\n  componentDidMount() {\n    done = () =>\n      this.setState({done: true}, () => {\n        TestModule.markTestCompleted();\n      });\n    updateMessage = msg => {\n      this.setState({messages: this.state.messages.concat('\\n' + msg)});\n      DEBUG && console.log(msg);\n    };\n    AsyncStorage.clear(testSetAndGet);\n  }\n\n  render(): React.Node {\n    return (\n      <View style={styles.container}>\n        <Text>\n          {/* $FlowFixMe(>=0.54.0 site=react_native_fb,react_native_oss) This\n           * comment suppresses an error found when Flow v0.54 was deployed.\n           * To see the error delete this comment and run Flow. */\n          this.constructor.displayName + ': '}\n          {this.state.done ? 'Done' : 'Testing...'}\n          {'\\n\\n' + this.state.messages}\n        </Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    padding: 40,\n  },\n});\n\nAsyncStorageTest.displayName = 'AsyncStorageTest';\n\nmodule.exports = AsyncStorageTest;\n"]},"metadata":{},"sourceType":"script"}