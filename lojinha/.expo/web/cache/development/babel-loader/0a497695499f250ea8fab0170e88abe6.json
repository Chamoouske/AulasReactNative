{"ast":null,"code":"'use strict';\n\nvar _require = require(\"../../Utilities/Platform\"),\n    OS = _require.OS;\n\nvar processColor = require(\"../processColor\");\n\nvar PlatformColorIOS = require(\"../PlatformColorValueTypes.ios\").PlatformColor;\n\nvar DynamicColorIOS = require(\"../PlatformColorValueTypesIOS.ios\").DynamicColorIOS;\n\nvar PlatformColorAndroid = require(\"../PlatformColorValueTypes.android\").PlatformColor;\n\nvar platformSpecific = OS === 'android' ? function (unsigned) {\n  return unsigned | 0;\n} : function (x) {\n  return x;\n};\ndescribe('processColor', function () {\n  describe('predefined color names', function () {\n    it('should convert red', function () {\n      var colorFromString = processColor('red');\n      var expectedInt = 0xffff0000;\n      expect(colorFromString).toEqual(platformSpecific(expectedInt));\n    });\n    it('should convert white', function () {\n      var colorFromString = processColor('white');\n      var expectedInt = 0xffffffff;\n      expect(colorFromString).toEqual(platformSpecific(expectedInt));\n    });\n    it('should convert black', function () {\n      var colorFromString = processColor('black');\n      var expectedInt = 0xff000000;\n      expect(colorFromString).toEqual(platformSpecific(expectedInt));\n    });\n    it('should convert transparent', function () {\n      var colorFromString = processColor('transparent');\n      var expectedInt = 0x00000000;\n      expect(colorFromString).toEqual(platformSpecific(expectedInt));\n    });\n  });\n  describe('RGB strings', function () {\n    it('should convert rgb(x, y, z)', function () {\n      var colorFromString = processColor('rgb(10, 20, 30)');\n      var expectedInt = 0xff0a141e;\n      expect(colorFromString).toEqual(platformSpecific(expectedInt));\n    });\n  });\n  describe('RGBA strings', function () {\n    it('should convert rgba(x, y, z, a)', function () {\n      var colorFromString = processColor('rgba(10, 20, 30, 0.4)');\n      var expectedInt = 0x660a141e;\n      expect(colorFromString).toEqual(platformSpecific(expectedInt));\n    });\n  });\n  describe('HSL strings', function () {\n    it('should convert hsl(x, y%, z%)', function () {\n      var colorFromString = processColor('hsl(318, 69%, 55%)');\n      var expectedInt = 0xffdb3dac;\n      expect(colorFromString).toEqual(platformSpecific(expectedInt));\n    });\n  });\n  describe('HSLA strings', function () {\n    it('should convert hsla(x, y%, z%, a)', function () {\n      var colorFromString = processColor('hsla(318, 69%, 55%, 0.25)');\n      var expectedInt = 0x40db3dac;\n      expect(colorFromString).toEqual(platformSpecific(expectedInt));\n    });\n  });\n  describe('hex strings', function () {\n    it('should convert #xxxxxx', function () {\n      var colorFromString = processColor('#1e83c9');\n      var expectedInt = 0xff1e83c9;\n      expect(colorFromString).toEqual(platformSpecific(expectedInt));\n    });\n  });\n  describe('iOS', function () {\n    if (OS === 'ios') {\n      it('should process iOS PlatformColor colors', function () {\n        var color = PlatformColorIOS('systemRedColor');\n        var processedColor = processColor(color);\n        var expectedColor = {\n          semantic: ['systemRedColor']\n        };\n        expect(processedColor).toEqual(expectedColor);\n      });\n      it('should process iOS Dynamic colors', function () {\n        var color = DynamicColorIOS({\n          light: 'black',\n          dark: 'white'\n        });\n        var processedColor = processColor(color);\n        var expectedColor = {\n          dynamic: {\n            light: 0xff000000,\n            dark: 0xffffffff\n          }\n        };\n        expect(processedColor).toEqual(expectedColor);\n      });\n    }\n  });\n  describe('Android', function () {\n    if (OS === 'android') {\n      it('should process Android PlatformColor colors', function () {\n        var color = PlatformColorAndroid('?attr/colorPrimary');\n        var processedColor = processColor(color);\n        var expectedColor = {\n          resource_paths: ['?attr/colorPrimary']\n        };\n        expect(processedColor).toEqual(expectedColor);\n      });\n    }\n  });\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/StyleSheet/__tests__/processColor-test.js"],"names":["require","OS","processColor","PlatformColorIOS","PlatformColor","DynamicColorIOS","PlatformColorAndroid","platformSpecific","unsigned","x","describe","it","colorFromString","expectedInt","expect","toEqual","color","processedColor","expectedColor","semantic","light","dark","dynamic","resource_paths"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @emails oncall+react_native\n */\n\n'use strict';\n\nconst {OS} = require('../../Utilities/Platform');\nconst processColor = require('../processColor');\n\nconst PlatformColorIOS = require('../PlatformColorValueTypes.ios')\n  .PlatformColor;\nconst DynamicColorIOS = require('../PlatformColorValueTypesIOS.ios')\n  .DynamicColorIOS;\nconst PlatformColorAndroid = require('../PlatformColorValueTypes.android')\n  .PlatformColor;\n\nconst platformSpecific =\n  OS === 'android'\n    ? unsigned => unsigned | 0 //eslint-disable-line no-bitwise\n    : x => x;\n\ndescribe('processColor', () => {\n  describe('predefined color names', () => {\n    it('should convert red', () => {\n      const colorFromString = processColor('red');\n      const expectedInt = 0xffff0000;\n      expect(colorFromString).toEqual(platformSpecific(expectedInt));\n    });\n\n    it('should convert white', () => {\n      const colorFromString = processColor('white');\n      const expectedInt = 0xffffffff;\n      expect(colorFromString).toEqual(platformSpecific(expectedInt));\n    });\n\n    it('should convert black', () => {\n      const colorFromString = processColor('black');\n      const expectedInt = 0xff000000;\n      expect(colorFromString).toEqual(platformSpecific(expectedInt));\n    });\n\n    it('should convert transparent', () => {\n      const colorFromString = processColor('transparent');\n      const expectedInt = 0x00000000;\n      expect(colorFromString).toEqual(platformSpecific(expectedInt));\n    });\n  });\n\n  describe('RGB strings', () => {\n    it('should convert rgb(x, y, z)', () => {\n      const colorFromString = processColor('rgb(10, 20, 30)');\n      const expectedInt = 0xff0a141e;\n      expect(colorFromString).toEqual(platformSpecific(expectedInt));\n    });\n  });\n\n  describe('RGBA strings', () => {\n    it('should convert rgba(x, y, z, a)', () => {\n      const colorFromString = processColor('rgba(10, 20, 30, 0.4)');\n      const expectedInt = 0x660a141e;\n      expect(colorFromString).toEqual(platformSpecific(expectedInt));\n    });\n  });\n\n  describe('HSL strings', () => {\n    it('should convert hsl(x, y%, z%)', () => {\n      const colorFromString = processColor('hsl(318, 69%, 55%)');\n      const expectedInt = 0xffdb3dac;\n      expect(colorFromString).toEqual(platformSpecific(expectedInt));\n    });\n  });\n\n  describe('HSLA strings', () => {\n    it('should convert hsla(x, y%, z%, a)', () => {\n      const colorFromString = processColor('hsla(318, 69%, 55%, 0.25)');\n      const expectedInt = 0x40db3dac;\n      expect(colorFromString).toEqual(platformSpecific(expectedInt));\n    });\n  });\n\n  describe('hex strings', () => {\n    it('should convert #xxxxxx', () => {\n      const colorFromString = processColor('#1e83c9');\n      const expectedInt = 0xff1e83c9;\n      expect(colorFromString).toEqual(platformSpecific(expectedInt));\n    });\n  });\n\n  describe('iOS', () => {\n    if (OS === 'ios') {\n      it('should process iOS PlatformColor colors', () => {\n        const color = PlatformColorIOS('systemRedColor');\n        const processedColor = processColor(color);\n        const expectedColor = {semantic: ['systemRedColor']};\n        expect(processedColor).toEqual(expectedColor);\n      });\n\n      it('should process iOS Dynamic colors', () => {\n        const color = DynamicColorIOS({light: 'black', dark: 'white'});\n        const processedColor = processColor(color);\n        const expectedColor = {dynamic: {light: 0xff000000, dark: 0xffffffff}};\n        expect(processedColor).toEqual(expectedColor);\n      });\n    }\n  });\n\n  describe('Android', () => {\n    if (OS === 'android') {\n      it('should process Android PlatformColor colors', () => {\n        const color = PlatformColorAndroid('?attr/colorPrimary');\n        const processedColor = processColor(color);\n        const expectedColor = {resource_paths: ['?attr/colorPrimary']};\n        expect(processedColor).toEqual(expectedColor);\n      });\n    }\n  });\n});\n"]},"metadata":{},"sourceType":"script"}