{"ast":null,"code":"'use strict';\n\nvar _jsxFileName = \"/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Utilities/ReactNativeTestTools.js\";\n\nvar React = require('react');\n\nvar ReactTestRenderer = require('react-test-renderer');\n\nvar ShallowRenderer = require('react-test-renderer/shallow');\n\nvar shallowRenderer = new ShallowRenderer();\n\nvar Switch = require(\"react-native-web/dist/exports/Switch\").default;\n\nvar Text = require(\"react-native-web/dist/exports/Text\").default;\n\nvar TextInput = require(\"react-native-web/dist/exports/TextInput\").default;\n\nvar View = require(\"react-native-web/dist/exports/View\").default;\n\nvar VirtualizedList = require(\"react-native-web/dist/exports/VirtualizedList\").default;\n\nfunction byClickable() {\n  return withMessage(function (node) {\n    var _node$props, _node$props$onStartSh, _node$instance, _node$instance$state;\n\n    return node.type === Text && node.props && typeof node.props.onPress === 'function' || node.type === Switch && node.props && node.props.disabled !== true || node.type === View && (node == null ? void 0 : (_node$props = node.props) == null ? void 0 : (_node$props$onStartSh = _node$props.onStartShouldSetResponder) == null ? void 0 : _node$props$onStartSh.testOnly_pressabilityConfig) || ((_node$instance = node.instance) == null ? void 0 : (_node$instance$state = _node$instance.state) == null ? void 0 : _node$instance$state.pressability) != null || node.instance && typeof node.instance.touchableHandlePress === 'function';\n  }, 'is clickable');\n}\n\nfunction byTestID(testID) {\n  return withMessage(function (node) {\n    return node.props && node.props.testID === testID;\n  }, \"testID prop equals \" + testID);\n}\n\nfunction byTextMatching(regex) {\n  return withMessage(function (node) {\n    return node.props && regex.exec(node.props.children);\n  }, \"text content matches \" + regex.toString());\n}\n\nfunction enter(instance, text) {\n  var input = instance.findByType(TextInput);\n  input.props.onChange && input.props.onChange({\n    nativeEvent: {\n      text: text\n    }\n  });\n  input.props.onChangeText && input.props.onChangeText(text);\n}\n\nfunction maximumDepthError(tree, maxDepthLimit) {\n  var maxDepth = maximumDepthOfJSON(tree.toJSON());\n\n  if (maxDepth > maxDepthLimit) {\n    return \"maximumDepth of \" + maxDepth + \" exceeded limit of \" + maxDepthLimit + \" - this is a proxy \" + 'metric to protect against stack overflow errors:\\n\\n' + 'https://fburl.com/rn-view-stack-overflow.\\n\\n' + 'To fix, you need to remove native layers from your hierarchy, such as unnecessary View ' + 'wrappers.';\n  } else {\n    return null;\n  }\n}\n\nfunction expectNoConsoleWarn() {\n  jest.spyOn(console, 'warn').mockImplementation(function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    expect(args).toBeFalsy();\n  });\n}\n\nfunction expectNoConsoleError() {\n  var hasNotFailed = true;\n  jest.spyOn(console, 'error').mockImplementation(function () {\n    if (hasNotFailed) {\n      hasNotFailed = false;\n\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      expect(args).toBeFalsy();\n    }\n  });\n}\n\nfunction expectRendersMatchingSnapshot(name, ComponentProvider, unmockComponent) {\n  var instance;\n  jest.resetAllMocks();\n  instance = ReactTestRenderer.create(React.createElement(ComponentProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 39\n    }\n  }));\n  expect(instance).toMatchSnapshot('should deep render when mocked (please verify output manually)');\n  jest.resetAllMocks();\n  unmockComponent();\n  instance = shallowRenderer.render(React.createElement(ComponentProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 37\n    }\n  }));\n  expect(instance).toMatchSnapshot(\"should shallow render as <\" + name + \" /> when not mocked\");\n  jest.resetAllMocks();\n  instance = shallowRenderer.render(React.createElement(ComponentProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 37\n    }\n  }));\n  expect(instance).toMatchSnapshot(\"should shallow render as <\" + name + \" /> when mocked\");\n  jest.resetAllMocks();\n  unmockComponent();\n  instance = ReactTestRenderer.create(React.createElement(ComponentProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 39\n    }\n  }));\n  expect(instance).toMatchSnapshot('should deep render when not mocked (please verify output manually)');\n}\n\nfunction maximumDepthOfJSON(node) {\n  if (node == null) {\n    return 0;\n  } else if (typeof node === 'string' || node.children == null) {\n    return 1;\n  } else {\n    var maxDepth = 0;\n    node.children.forEach(function (child) {\n      maxDepth = Math.max(maximumDepthOfJSON(child) + 1, maxDepth);\n    });\n    return maxDepth;\n  }\n}\n\nfunction renderAndEnforceStrictMode(element) {\n  expectNoConsoleError();\n  return renderWithStrictMode(element);\n}\n\nfunction renderWithStrictMode(element) {\n  var WorkAroundBugWithStrictModeInTestRenderer = function WorkAroundBugWithStrictModeInTestRenderer(prps) {\n    return prps.children;\n  };\n\n  var StrictMode = React.StrictMode;\n  return ReactTestRenderer.create(React.createElement(WorkAroundBugWithStrictModeInTestRenderer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 5\n    }\n  }, React.createElement(StrictMode, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }\n  }, element)));\n}\n\nfunction tap(instance) {\n  var _touchable$props2, _touchable$props2$onS;\n\n  var touchable = instance.find(byClickable());\n\n  if (touchable.type === Text && touchable.props && touchable.props.onPress) {\n    touchable.props.onPress();\n  } else if (touchable.type === Switch && touchable.props) {\n    var value = !touchable.props.value;\n    var _touchable$props = touchable.props,\n        onChange = _touchable$props.onChange,\n        onValueChange = _touchable$props.onValueChange;\n    onChange && onChange({\n      nativeEvent: {\n        value: value\n      }\n    });\n    onValueChange && onValueChange(value);\n  } else if (touchable != null && (_touchable$props2 = touchable.props) != null && (_touchable$props2$onS = _touchable$props2.onStartShouldSetResponder) != null && _touchable$props2$onS.testOnly_pressabilityConfig) {\n    var _touchable$props$onSt = touchable.props.onStartShouldSetResponder.testOnly_pressabilityConfig(),\n        onPress = _touchable$props$onSt.onPress,\n        disabled = _touchable$props$onSt.disabled;\n\n    if (!disabled) {\n      onPress({\n        nativeEvent: {}\n      });\n    }\n  } else {\n    if (!touchable.props || !touchable.props.disabled) {\n      touchable.props.onPress({\n        nativeEvent: {}\n      });\n    }\n  }\n}\n\nfunction scrollToBottom(instance) {\n  var list = instance.findByType(VirtualizedList);\n  list.props && list.props.onEndReached();\n}\n\nfunction withMessage(fn, message) {\n  fn.toString = function () {\n    return message;\n  };\n\n  return fn;\n}\n\nexport { byClickable };\nexport { byTestID };\nexport { byTextMatching };\nexport { enter };\nexport { expectNoConsoleWarn };\nexport { expectNoConsoleError };\nexport { expectRendersMatchingSnapshot };\nexport { maximumDepthError };\nexport { maximumDepthOfJSON };\nexport { renderAndEnforceStrictMode };\nexport { renderWithStrictMode };\nexport { scrollToBottom };\nexport { tap };\nexport { withMessage };","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Utilities/ReactNativeTestTools.js"],"names":["React","require","ReactTestRenderer","ShallowRenderer","shallowRenderer","byClickable","withMessage","node","type","Text","props","onPress","Switch","disabled","View","onStartShouldSetResponder","testOnly_pressabilityConfig","instance","state","pressability","touchableHandlePress","byTestID","testID","byTextMatching","regex","exec","children","toString","enter","text","input","findByType","TextInput","onChange","nativeEvent","onChangeText","maximumDepthError","tree","maxDepthLimit","maxDepth","maximumDepthOfJSON","toJSON","expectNoConsoleWarn","jest","spyOn","console","mockImplementation","args","expect","toBeFalsy","expectNoConsoleError","hasNotFailed","expectRendersMatchingSnapshot","name","ComponentProvider","unmockComponent","resetAllMocks","create","toMatchSnapshot","render","forEach","child","Math","max","renderAndEnforceStrictMode","element","renderWithStrictMode","WorkAroundBugWithStrictModeInTestRenderer","prps","StrictMode","tap","touchable","find","value","onValueChange","scrollToBottom","list","VirtualizedList","onEndReached","fn","message"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n/* eslint-env jest */\n\n'use strict';\n\nconst React = require('react');\n\nconst ReactTestRenderer = require('react-test-renderer');\nconst ShallowRenderer = require('react-test-renderer/shallow');\n/* $FlowFixMe(>=0.122.0 site=react_native_fb) This comment suppresses an error\n * found when Flow v0.122.0 was deployed. To see the error, delete this comment\n * and run Flow. */\nconst shallowRenderer = new ShallowRenderer();\n\nimport type {ReactTestRenderer as ReactTestRendererType} from 'react-test-renderer';\n\nexport type ReactTestInstance = $PropertyType<ReactTestRendererType, 'root'>;\n\nexport type Predicate = (node: ReactTestInstance) => boolean;\n\ntype $ReturnType<Fn> = $Call<<Ret, A>((...A) => Ret) => Ret, Fn>;\n/* $FlowFixMe(>=0.122.0 site=react_native_fb) This comment suppresses an error\n * found when Flow v0.122.0 was deployed. To see the error, delete this comment\n * and run Flow. */\nexport type ReactTestRendererJSON = $ReturnType<ReactTestRenderer.create.toJSON>;\n\nconst {\n  Switch,\n  Text,\n  TextInput,\n  View,\n  VirtualizedList,\n} = require('react-native');\n\nfunction byClickable(): Predicate {\n  return withMessage(\n    node =>\n      // note: <Text /> lazy-mounts press handlers after the first press,\n      //       so this is a workaround for targeting text nodes.\n      (node.type === Text &&\n        node.props &&\n        typeof node.props.onPress === 'function') ||\n      // note: Special casing <Switch /> since it doesn't use touchable\n      (node.type === Switch && node.props && node.props.disabled !== true) ||\n      (node.type === View &&\n        node?.props?.onStartShouldSetResponder?.testOnly_pressabilityConfig) ||\n      // HACK: Find components that use `Pressability`.\n      node.instance?.state?.pressability != null ||\n      // TODO: Remove this after deleting `Touchable`.\n      /* $FlowFixMe(>=0.122.0 site=react_native_fb) This comment suppresses an\n       * error found when Flow v0.122.0 was deployed. To see the error, delete\n       * this comment and run Flow. */\n      (node.instance &&\n        /* $FlowFixMe(>=0.122.0 site=react_native_fb) This comment suppresses\n         * an error found when Flow v0.122.0 was deployed. To see the error,\n         * delete this comment and run Flow. */\n        typeof node.instance.touchableHandlePress === 'function'),\n    'is clickable',\n  );\n}\n\nfunction byTestID(testID: string): Predicate {\n  return withMessage(\n    node => node.props && node.props.testID === testID,\n    `testID prop equals ${testID}`,\n  );\n}\n\nfunction byTextMatching(regex: RegExp): Predicate {\n  return withMessage(\n    /* $FlowFixMe(>=0.122.0 site=react_native_fb) This comment suppresses an\n     * error found when Flow v0.122.0 was deployed. To see the error, delete\n     * this comment and run Flow. */\n    node => node.props && regex.exec(node.props.children),\n    `text content matches ${regex.toString()}`,\n  );\n}\n\nfunction enter(instance: ReactTestInstance, text: string) {\n  const input = instance.findByType(TextInput);\n  input.props.onChange && input.props.onChange({nativeEvent: {text}});\n  input.props.onChangeText && input.props.onChangeText(text);\n}\n\n// Returns null if there is no error, otherwise returns an error message string.\nfunction maximumDepthError(\n  tree: ReactTestRendererType,\n  maxDepthLimit: number,\n): ?string {\n  const maxDepth = maximumDepthOfJSON(tree.toJSON());\n  if (maxDepth > maxDepthLimit) {\n    return (\n      `maximumDepth of ${maxDepth} exceeded limit of ${maxDepthLimit} - this is a proxy ` +\n      'metric to protect against stack overflow errors:\\n\\n' +\n      'https://fburl.com/rn-view-stack-overflow.\\n\\n' +\n      'To fix, you need to remove native layers from your hierarchy, such as unnecessary View ' +\n      'wrappers.'\n    );\n  } else {\n    return null;\n  }\n}\n\nfunction expectNoConsoleWarn() {\n  (jest: $FlowFixMe).spyOn(console, 'warn').mockImplementation((...args) => {\n    expect(args).toBeFalsy();\n  });\n}\n\nfunction expectNoConsoleError() {\n  let hasNotFailed = true;\n  (jest: $FlowFixMe).spyOn(console, 'error').mockImplementation((...args) => {\n    if (hasNotFailed) {\n      hasNotFailed = false; // set false to prevent infinite recursion\n      expect(args).toBeFalsy();\n    }\n  });\n}\n\nfunction expectRendersMatchingSnapshot(\n  name: string,\n  ComponentProvider: () => React.Element<any>,\n  unmockComponent: () => mixed,\n) {\n  let instance;\n\n  jest.resetAllMocks();\n\n  instance = ReactTestRenderer.create(<ComponentProvider />);\n  expect(instance).toMatchSnapshot(\n    'should deep render when mocked (please verify output manually)',\n  );\n\n  jest.resetAllMocks();\n  unmockComponent();\n\n  instance = shallowRenderer.render(<ComponentProvider />);\n  expect(instance).toMatchSnapshot(\n    `should shallow render as <${name} /> when not mocked`,\n  );\n\n  jest.resetAllMocks();\n\n  instance = shallowRenderer.render(<ComponentProvider />);\n  expect(instance).toMatchSnapshot(\n    `should shallow render as <${name} /> when mocked`,\n  );\n\n  jest.resetAllMocks();\n  unmockComponent();\n\n  instance = ReactTestRenderer.create(<ComponentProvider />);\n  expect(instance).toMatchSnapshot(\n    'should deep render when not mocked (please verify output manually)',\n  );\n}\n\n// Takes a node from toJSON()\nfunction maximumDepthOfJSON(node: ?ReactTestRendererJSON): number {\n  if (node == null) {\n    return 0;\n  } else if (typeof node === 'string' || node.children == null) {\n    return 1;\n  } else {\n    let maxDepth = 0;\n    node.children.forEach(child => {\n      maxDepth = Math.max(maximumDepthOfJSON(child) + 1, maxDepth);\n    });\n    return maxDepth;\n  }\n}\n\nfunction renderAndEnforceStrictMode(element: React.Node): any {\n  expectNoConsoleError();\n  return renderWithStrictMode(element);\n}\n\nfunction renderWithStrictMode(element: React.Node): ReactTestRendererType {\n  const WorkAroundBugWithStrictModeInTestRenderer = prps => prps.children;\n  const StrictMode = (React: $FlowFixMe).StrictMode;\n  return ReactTestRenderer.create(\n    <WorkAroundBugWithStrictModeInTestRenderer>\n      <StrictMode>{element}</StrictMode>\n    </WorkAroundBugWithStrictModeInTestRenderer>,\n  );\n}\n\nfunction tap(instance: ReactTestInstance) {\n  const touchable = instance.find(byClickable());\n  if (touchable.type === Text && touchable.props && touchable.props.onPress) {\n    touchable.props.onPress();\n  } else if (touchable.type === Switch && touchable.props) {\n    const value = !touchable.props.value;\n    const {onChange, onValueChange} = touchable.props;\n    onChange && onChange({nativeEvent: {value}});\n    onValueChange && onValueChange(value);\n  } else if (\n    touchable?.props?.onStartShouldSetResponder?.testOnly_pressabilityConfig\n  ) {\n    const {\n      onPress,\n      disabled,\n    } = touchable.props.onStartShouldSetResponder.testOnly_pressabilityConfig();\n    if (!disabled) {\n      onPress({nativeEvent: {}});\n    }\n  } else {\n    // Only tap when props.disabled isn't set (or there aren't any props)\n    if (!touchable.props || !touchable.props.disabled) {\n      touchable.props.onPress({nativeEvent: {}});\n    }\n  }\n}\n\nfunction scrollToBottom(instance: ReactTestInstance) {\n  const list = instance.findByType(VirtualizedList);\n  list.props && list.props.onEndReached();\n}\n\n// To make error messages a little bit better, we attach a custom toString\n// implementation to a predicate\nfunction withMessage(fn: Predicate, message: string): Predicate {\n  (fn: any).toString = () => message;\n  return fn;\n}\n\nexport {byClickable};\nexport {byTestID};\nexport {byTextMatching};\nexport {enter};\nexport {expectNoConsoleWarn};\nexport {expectNoConsoleError};\nexport {expectRendersMatchingSnapshot};\nexport {maximumDepthError};\nexport {maximumDepthOfJSON};\nexport {renderAndEnforceStrictMode};\nexport {renderWithStrictMode};\nexport {scrollToBottom};\nexport {tap};\nexport {withMessage};\n"]},"metadata":{},"sourceType":"module"}