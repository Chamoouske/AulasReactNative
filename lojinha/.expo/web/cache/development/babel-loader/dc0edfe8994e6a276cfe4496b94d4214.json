{"ast":null,"code":"\"use strict\";\n\nvar _extends = require(\"@babel/runtime/helpers/extends\");\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar fs_extra_1 = __importDefault(require(\"fs-extra\"));\n\nvar path_1 = __importDefault(require(\"path\"));\n\nvar slash_1 = __importDefault(require(\"slash\"));\n\nvar ios_plugins_1 = require(\"../plugins/ios-plugins\");\n\nvar Paths = __importStar(require(\"./Paths\"));\n\nvar Xcodeproj_1 = require(\"./utils/Xcodeproj\");\n\nexports.withAccessesContactNotes = ios_plugins_1.createEntitlementsPlugin(setAccessesContactNotes, 'withAccessesContactNotes');\nexports.withAssociatedDomains = ios_plugins_1.createEntitlementsPlugin(setAssociatedDomains, 'withAssociatedDomains');\n\nfunction getConfigEntitlements(config) {\n  var _a, _b;\n\n  return (_b = (_a = config.ios) === null || _a === void 0 ? void 0 : _a.entitlements) !== null && _b !== void 0 ? _b : {};\n}\n\nexports.getConfigEntitlements = getConfigEntitlements;\n\nfunction setCustomEntitlementsEntries(config, entitlements) {\n  var entries = getConfigEntitlements(config);\n  return _extends(_extends({}, entitlements), entries);\n}\n\nexports.setCustomEntitlementsEntries = setCustomEntitlementsEntries;\n\nfunction setAccessesContactNotes(config, _a) {\n  var _b;\n\n  var _ = _a['com.apple.developer.contacts.notes'],\n      entitlementsPlist = __rest(_a, ['com.apple.developer.contacts.notes']);\n\n  if ((_b = config.ios) === null || _b === void 0 ? void 0 : _b.accessesContactNotes) {\n    return _extends(_extends({}, entitlementsPlist), {\n      'com.apple.developer.contacts.notes': config.ios.accessesContactNotes\n    });\n  }\n\n  return entitlementsPlist;\n}\n\nexports.setAccessesContactNotes = setAccessesContactNotes;\n\nfunction setAssociatedDomains(config, _a) {\n  var _b;\n\n  var _ = _a['com.apple.developer.associated-domains'],\n      entitlementsPlist = __rest(_a, ['com.apple.developer.associated-domains']);\n\n  if ((_b = config.ios) === null || _b === void 0 ? void 0 : _b.associatedDomains) {\n    return _extends(_extends({}, entitlementsPlist), {\n      'com.apple.developer.associated-domains': config.ios.associatedDomains\n    });\n  }\n\n  return entitlementsPlist;\n}\n\nexports.setAssociatedDomains = setAssociatedDomains;\n\nfunction getEntitlementsPath(projectRoot) {\n  var paths = Paths.getAllEntitlementsPaths(projectRoot);\n  var targetPath = null;\n  var project = Xcodeproj_1.getPbxproj(projectRoot);\n  var projectName = Xcodeproj_1.getProjectName(projectRoot);\n  var productName = Xcodeproj_1.getProductName(project);\n  var entitlementsRelativePath = slash_1.default(path_1.default.join(projectName, productName + \".entitlements\"));\n  var entitlementsPath = slash_1.default(path_1.default.normalize(path_1.default.join(projectRoot, 'ios', entitlementsRelativePath)));\n  var pathsToDelete = [];\n\n  while (paths.length) {\n    var last = slash_1.default(path_1.default.normalize(paths.pop()));\n\n    if (last !== entitlementsPath) {\n      pathsToDelete.push(last);\n    } else {\n      targetPath = last;\n    }\n  }\n\n  if (!targetPath) {\n    targetPath = entitlementsPath;\n    var template = ENTITLEMENTS_TEMPLATE;\n\n    if (pathsToDelete.length) {\n      var _last = pathsToDelete[pathsToDelete.length - 1];\n      template = fs_extra_1.default.readFileSync(_last, 'utf8');\n    }\n\n    fs_extra_1.default.ensureDirSync(path_1.default.dirname(entitlementsPath));\n    fs_extra_1.default.writeFileSync(entitlementsPath, template);\n    Object.entries(project.pbxXCBuildConfigurationSection()).filter(Xcodeproj_1.isNotComment).filter(Xcodeproj_1.isBuildConfig).filter(Xcodeproj_1.isNotTestHost).forEach(function (_ref) {\n      var buildSettings = _ref[1].buildSettings;\n      buildSettings.CODE_SIGN_ENTITLEMENTS = entitlementsRelativePath;\n    });\n    fs_extra_1.default.writeFileSync(project.filepath, project.writeSync());\n  }\n\n  deleteEntitlementsFiles(pathsToDelete);\n  return entitlementsPath;\n}\n\nexports.getEntitlementsPath = getEntitlementsPath;\n\nfunction deleteEntitlementsFiles(entitlementsPaths) {\n  for (var _iterator = _createForOfIteratorHelperLoose(entitlementsPaths), _step; !(_step = _iterator()).done;) {\n    var path = _step.value;\n    fs_extra_1.default.removeSync(path);\n  }\n}\n\nvar ENTITLEMENTS_TEMPLATE = \"\\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<!DOCTYPE plist PUBLIC \\\"-//Apple//DTD PLIST 1.0//EN\\\" \\\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\\\">\\n<plist version=\\\"1.0\\\">\\n<dict>\\n<key>aps-environment</key>\\n<string>development</string>\\n</dict>\\n</plist>\\n\";","map":{"version":3,"sources":["../../src/ios/Entitlements.ts"],"names":[],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport slash from 'slash';\n\nimport { createEntitlementsPlugin } from '../plugins/ios-plugins';\nimport { InfoPlist } from './IosConfig.types';\nimport * as Paths from './Paths';\nimport {\n  getPbxproj,\n  getProductName,\n  getProjectName,\n  isBuildConfig,\n  isNotComment,\n  isNotTestHost,\n} from './utils/Xcodeproj';\n\ntype Plist = Record<string, any>;\n\nexport const withAccessesContactNotes = createEntitlementsPlugin(\n  setAccessesContactNotes,\n  'withAccessesContactNotes'\n);\n\nexport const withAssociatedDomains = createEntitlementsPlugin(\n  setAssociatedDomains,\n  'withAssociatedDomains'\n);\n\n// TODO: should it be possible to turn off these entitlements by setting false in app.json and running apply\n\nexport function getConfigEntitlements(config: ExpoConfig) {\n  return config.ios?.entitlements ?? {};\n}\n\nexport function setCustomEntitlementsEntries(config: ExpoConfig, entitlements: InfoPlist) {\n  const entries = getConfigEntitlements(config);\n\n  return {\n    ...entitlements,\n    ...entries,\n  };\n}\n\nexport function setAccessesContactNotes(\n  config: ExpoConfig,\n  { 'com.apple.developer.contacts.notes': _, ...entitlementsPlist }: Plist\n): Plist {\n  if (config.ios?.accessesContactNotes) {\n    return {\n      ...entitlementsPlist,\n      'com.apple.developer.contacts.notes': config.ios.accessesContactNotes,\n    };\n  }\n\n  return entitlementsPlist;\n}\n\nexport function setAssociatedDomains(\n  config: ExpoConfig,\n  { 'com.apple.developer.associated-domains': _, ...entitlementsPlist }: Plist\n): Plist {\n  if (config.ios?.associatedDomains) {\n    return {\n      ...entitlementsPlist,\n      'com.apple.developer.associated-domains': config.ios.associatedDomains,\n    };\n  }\n\n  return entitlementsPlist;\n}\n\nexport function getEntitlementsPath(projectRoot: string): string {\n  const paths = Paths.getAllEntitlementsPaths(projectRoot);\n  let targetPath: string | null = null;\n\n  /**\n   * Add file to pbxproj under CODE_SIGN_ENTITLEMENTS\n   */\n  const project = getPbxproj(projectRoot);\n  const projectName = getProjectName(projectRoot);\n  const productName = getProductName(project);\n\n  // Use posix formatted path, even on Windows\n  const entitlementsRelativePath = slash(path.join(projectName, `${productName}.entitlements`));\n  const entitlementsPath = slash(\n    path.normalize(path.join(projectRoot, 'ios', entitlementsRelativePath))\n  );\n\n  const pathsToDelete: string[] = [];\n\n  while (paths.length) {\n    const last = slash(path.normalize(paths.pop()!));\n    if (last !== entitlementsPath) {\n      pathsToDelete.push(last);\n    } else {\n      targetPath = last;\n    }\n  }\n\n  // Create a new entitlements file\n  if (!targetPath) {\n    targetPath = entitlementsPath;\n\n    // Use the default template\n    let template = ENTITLEMENTS_TEMPLATE;\n\n    // If an old entitlements file exists, copy it's contents into the new file.\n    if (pathsToDelete.length) {\n      // Get the last entitlements file and use it as the template\n      const last = pathsToDelete[pathsToDelete.length - 1]!;\n      template = fs.readFileSync(last, 'utf8');\n    }\n\n    fs.ensureDirSync(path.dirname(entitlementsPath));\n    fs.writeFileSync(entitlementsPath, template);\n\n    Object.entries(project.pbxXCBuildConfigurationSection())\n      .filter(isNotComment)\n      .filter(isBuildConfig)\n      .filter(isNotTestHost)\n      .forEach(({ 1: { buildSettings } }: any) => {\n        buildSettings.CODE_SIGN_ENTITLEMENTS = entitlementsRelativePath;\n      });\n    fs.writeFileSync(project.filepath, project.writeSync());\n  }\n\n  // Clean up others\n  deleteEntitlementsFiles(pathsToDelete);\n\n  return entitlementsPath;\n}\n\nfunction deleteEntitlementsFiles(entitlementsPaths: string[]) {\n  for (const path of entitlementsPaths) {\n    fs.removeSync(path);\n  }\n}\n\nconst ENTITLEMENTS_TEMPLATE = `\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n<key>aps-environment</key>\n<string>development</string>\n</dict>\n</plist>\n`;\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}