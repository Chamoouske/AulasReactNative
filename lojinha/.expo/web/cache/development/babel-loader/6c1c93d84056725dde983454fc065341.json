{"ast":null,"code":"\"use strict\";\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar android_plugins_1 = require(\"../plugins/android-plugins\");\n\nvar WarningAggregator = __importStar(require(\"../utils/warnings\"));\n\nexports.withVersion = function (config) {\n  return android_plugins_1.withAppBuildGradle(config, function (config) {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = setVersionCode(config, config.modResults.contents);\n      config.modResults.contents = setVersionName(config, config.modResults.contents);\n    } else {\n      WarningAggregator.addWarningAndroid('android-version', \"Cannot automatically configure app build.gradle if it's not groovy\");\n    }\n\n    return config;\n  });\n};\n\nfunction getVersionName(config) {\n  var _a;\n\n  return (_a = config.version) !== null && _a !== void 0 ? _a : null;\n}\n\nexports.getVersionName = getVersionName;\n\nfunction setVersionName(config, buildGradle) {\n  var versionName = getVersionName(config);\n\n  if (versionName === null) {\n    return buildGradle;\n  }\n\n  var pattern = new RegExp(\"versionName \\\".*\\\"\");\n  return buildGradle.replace(pattern, \"versionName \\\"\" + versionName + \"\\\"\");\n}\n\nexports.setVersionName = setVersionName;\n\nfunction getVersionCode(config) {\n  var _a, _b;\n\n  return (_b = (_a = config.android) === null || _a === void 0 ? void 0 : _a.versionCode) !== null && _b !== void 0 ? _b : null;\n}\n\nexports.getVersionCode = getVersionCode;\n\nfunction setVersionCode(config, buildGradle) {\n  var versionCode = getVersionCode(config);\n\n  if (versionCode === null) {\n    return buildGradle;\n  }\n\n  var pattern = new RegExp(\"versionCode.*\");\n  return buildGradle.replace(pattern, \"versionCode \" + versionCode);\n}\n\nexports.setVersionCode = setVersionCode;","map":{"version":3,"sources":["../../src/android/Version.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAGA,IAAA,iBAAA,GAAA,OAAA,8BAAA;;AACA,IAAA,iBAAA,GAAA,YAAA,CAAA,OAAA,qBAAA,CAAA;;AAEa,OAAA,CAAA,WAAA,GAA4B,UAAA,MAAM,EAAG;AAChD,SAAO,iBAAA,CAAA,kBAAA,CAAmB,MAAnB,EAA2B,UAAA,MAAM,EAAG;AACzC,QAAI,MAAM,CAAC,UAAP,CAAkB,QAAlB,KAA+B,QAAnC,EAA6C;AAC3C,MAAA,MAAM,CAAC,UAAP,CAAkB,QAAlB,GAA6B,cAAc,CAAC,MAAD,EAAS,MAAM,CAAC,UAAP,CAAkB,QAA3B,CAA3C;AACA,MAAA,MAAM,CAAC,UAAP,CAAkB,QAAlB,GAA6B,cAAc,CAAC,MAAD,EAAS,MAAM,CAAC,UAAP,CAAkB,QAA3B,CAA3C;AACD,KAHD,MAGO;AACL,MAAA,iBAAiB,CAAC,iBAAlB,CACE,iBADF;AAID;;AACD,WAAO,MAAP;AACD,GAXM,CAAP;AAYD,CAbY;;AAeb,SAAgB,cAAhB,CAA+B,MAA/B,EAAkE;;;AAChE,SAAA,CAAA,EAAA,GAAO,MAAM,CAAC,OAAd,MAAqB,IAArB,IAAqB,EAAA,KAAA,KAAA,CAArB,GAAqB,EAArB,GAAyB,IAAzB;AACD;;AAFD,OAAA,CAAA,cAAA,GAAA,cAAA;;AAIA,SAAgB,cAAhB,CAA+B,MAA/B,EAAoE,WAApE,EAAuF;AACrF,MAAM,WAAW,GAAG,cAAc,CAAC,MAAD,CAAlC;;AACA,MAAI,WAAW,KAAK,IAApB,EAA0B;AACxB,WAAO,WAAP;AACD;;AAED,MAAM,OAAO,GAAG,IAAI,MAAJ,sBAAhB;AACA,SAAO,WAAW,CAAC,OAAZ,CAAoB,OAApB,qBAA6C,WAA7C,QAAP;AACD;;AARD,OAAA,CAAA,cAAA,GAAA,cAAA;;AAUA,SAAgB,cAAhB,CAA+B,MAA/B,EAAkE;;;AAChE,SAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAO,MAAM,CAAC,OAAd,MAAqB,IAArB,IAAqB,EAAA,KAAA,KAAA,CAArB,GAAqB,KAAA,CAArB,GAAqB,EAAA,CAAE,WAAvB,MAAkC,IAAlC,IAAkC,EAAA,KAAA,KAAA,CAAlC,GAAkC,EAAlC,GAAsC,IAAtC;AACD;;AAFD,OAAA,CAAA,cAAA,GAAA,cAAA;;AAIA,SAAgB,cAAhB,CAA+B,MAA/B,EAAoE,WAApE,EAAuF;AACrF,MAAM,WAAW,GAAG,cAAc,CAAC,MAAD,CAAlC;;AACA,MAAI,WAAW,KAAK,IAApB,EAA0B;AACxB,WAAO,WAAP;AACD;;AAED,MAAM,OAAO,GAAG,IAAI,MAAJ,iBAAhB;AACA,SAAO,WAAW,CAAC,OAAZ,CAAoB,OAApB,mBAA4C,WAA5C,CAAP;AACD;;AARD,OAAA,CAAA,cAAA,GAAA,cAAA","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withAppBuildGradle } from '../plugins/android-plugins';\nimport * as WarningAggregator from '../utils/warnings';\n\nexport const withVersion: ConfigPlugin = config => {\n  return withAppBuildGradle(config, config => {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = setVersionCode(config, config.modResults.contents);\n      config.modResults.contents = setVersionName(config, config.modResults.contents);\n    } else {\n      WarningAggregator.addWarningAndroid(\n        'android-version',\n        `Cannot automatically configure app build.gradle if it's not groovy`\n      );\n    }\n    return config;\n  });\n};\n\nexport function getVersionName(config: Pick<ExpoConfig, 'version'>) {\n  return config.version ?? null;\n}\n\nexport function setVersionName(config: Pick<ExpoConfig, 'version'>, buildGradle: string) {\n  const versionName = getVersionName(config);\n  if (versionName === null) {\n    return buildGradle;\n  }\n\n  const pattern = new RegExp(`versionName \".*\"`);\n  return buildGradle.replace(pattern, `versionName \"${versionName}\"`);\n}\n\nexport function getVersionCode(config: Pick<ExpoConfig, 'android'>) {\n  return config.android?.versionCode ?? null;\n}\n\nexport function setVersionCode(config: Pick<ExpoConfig, 'android'>, buildGradle: string) {\n  const versionCode = getVersionCode(config);\n  if (versionCode === null) {\n    return buildGradle;\n  }\n\n  const pattern = new RegExp(`versionCode.*`);\n  return buildGradle.replace(pattern, `versionCode ${versionCode}`);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}