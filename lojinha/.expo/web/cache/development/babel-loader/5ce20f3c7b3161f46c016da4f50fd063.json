{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\n\nvar AppLoadingPlaceholder = function (_React$Component) {\n  _inherits(AppLoadingPlaceholder, _React$Component);\n\n  var _super = _createSuper(AppLoadingPlaceholder);\n\n  function AppLoadingPlaceholder() {\n    _classCallCheck(this, AppLoadingPlaceholder);\n\n    return _super.apply(this, arguments);\n  }\n\n  return AppLoadingPlaceholder;\n}(React.Component);\n\nexport { AppLoadingPlaceholder as default };\nexport {};","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/expo/build/launch/AppLoadingPlaceholder.d.ts"],"names":["React","AppLoadingPlaceholder","Component"],"mappings":";;;;;;;;;AAYA,OAAOA,KAAP,MAAkB,OAAlB;;IAiCqBC,qB;;;;;;;;;;;;EAA8BD,KAAK,CAACE,S;;SAApCD,qB;AAOrB","sourcesContent":["/**\n * NOTE(brentvatne):\n * AppLoadingPlaceholder exists to smooth the upgrade experience to SDK 40. The\n * placeholder behaves mostly as expected with the existing API, however it\n * will no longer leverage any native APIs to keep the splash screen visible.\n * This makes it so a user who upgrades and runs their app can see their app\n * running and get the warning about the AppLoading module being removed\n * top, without an extraneous red screen that would appear from attempting to\n * render an undefined AppLoading component.\n *\n * Remove this in SDK 42.\n */\nimport React from 'react';\ndeclare type Props = {\n    /**\n     * Optional, you can do this process manually if you prefer.\n     * This is mainly for backwards compatibility and it is not recommended.\n     *\n     * When provided, requires providing `onError` prop as well.\n     * @deprecated\n     */\n    startAsync: () => Promise<void>;\n    /**\n     * If `startAsync` throws an error, it is caught and passed into the provided function.\n     * @deprecated\n     */\n    onError: (error: Error) => void;\n    /**\n     * Called when `startAsync` resolves or rejects.\n     * This should be used to set state and unmount the `AppLoading` component.\n     * @deprecated\n     */\n    onFinish: () => void;\n    /**\n     * Whether to hide the native splash screen as soon as you unmount the `AppLoading` component.\n     * Auto-hiding is enabled by default.\n     */\n    autoHideSplash?: boolean;\n} | {\n    /**\n     * Whether to hide the native splash screen as soon as you unmount the `AppLoading` component.\n     * Auto-hiding is enabled by default.\n     */\n    autoHideSplash?: boolean;\n};\nexport default class AppLoadingPlaceholder extends React.Component<Props> {\n    _isMounted: boolean;\n    componentDidMount(): void;\n    componentWillUnmount(): void;\n    private startLoadingAppResourcesAsync;\n    render(): null;\n}\nexport {};\n"]},"metadata":{},"sourceType":"module"}