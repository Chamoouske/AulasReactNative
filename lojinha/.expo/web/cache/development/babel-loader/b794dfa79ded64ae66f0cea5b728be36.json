{"ast":null,"code":"'use strict';\n\ndescribe('mapWithSeparator', function () {\n  var mapWithSeparator = require(\"../mapWithSeparator\");\n\n  it('mapWithSeparator returns expected results', function () {\n    var array = [1, 2, 3];\n    var result = mapWithSeparator(array, function (value) {\n      return value * 2;\n    }, function () {\n      return 0;\n    });\n    expect(result).toEqual([2, 0, 4, 0, 6]);\n  });\n  it('mapWithSeparator indices are correct', function () {\n    var array = [1, 2, 3];\n    var result = mapWithSeparator(array, function (value, index) {\n      return index;\n    }, function (index) {\n      return index;\n    });\n    expect(result).toEqual([0, 0, 1, 1, 2]);\n  });\n  it('mapWithSeparator passes correct array and indices', function () {\n    var array = [3, 2, 1];\n    var result = mapWithSeparator(array, function (value, index, arr) {\n      return arr[index];\n    }, function (index) {\n      return index;\n    });\n    expect(result).toEqual([3, 0, 2, 1, 1]);\n  });\n  it('mapWithSeparator returns empty array when empty array is given as input', function () {\n    var array = [];\n    var result = mapWithSeparator(array, function (value) {\n      return value * 2;\n    }, function () {\n      return 0;\n    });\n    expect(result).toEqual([]);\n  });\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Utilities/__tests__/mapWithSeparator-test.js"],"names":["describe","mapWithSeparator","require","it","array","result","value","expect","toEqual","index","arr"],"mappings":"AAUA;;AAEAA,QAAQ,CAAC,kBAAD,EAAqB,YAAM;AACjC,MAAMC,gBAAgB,GAAGC,OAAO,uBAAhC;;AAEAC,EAAAA,EAAE,CAAC,2CAAD,EAA8C,YAAM;AACpD,QAAMC,KAAK,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAd;AACA,QAAMC,MAAM,GAAGJ,gBAAgB,CAC7BG,KAD6B,EAE7B,UAASE,KAAT,EAAgB;AACd,aAAOA,KAAK,GAAG,CAAf;AACD,KAJ4B,EAK7B,YAAW;AACT,aAAO,CAAP;AACD,KAP4B,CAA/B;AASAC,IAAAA,MAAM,CAACF,MAAD,CAAN,CAAeG,OAAf,CAAuB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAvB;AACD,GAZC,CAAF;AAcAL,EAAAA,EAAE,CAAC,sCAAD,EAAyC,YAAM;AAC/C,QAAMC,KAAK,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAd;AACA,QAAMC,MAAM,GAAGJ,gBAAgB,CAC7BG,KAD6B,EAE7B,UAASE,KAAT,EAAgBG,KAAhB,EAAuB;AACrB,aAAOA,KAAP;AACD,KAJ4B,EAK7B,UAASA,KAAT,EAAgB;AACd,aAAOA,KAAP;AACD,KAP4B,CAA/B;AASAF,IAAAA,MAAM,CAACF,MAAD,CAAN,CAAeG,OAAf,CAAuB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAvB;AACD,GAZC,CAAF;AAcAL,EAAAA,EAAE,CAAC,mDAAD,EAAsD,YAAM;AAC5D,QAAMC,KAAK,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAd;AACA,QAAMC,MAAM,GAAGJ,gBAAgB,CAC7BG,KAD6B,EAE7B,UAASE,KAAT,EAAgBG,KAAhB,EAAuBC,GAAvB,EAA4B;AAC1B,aAAOA,GAAG,CAACD,KAAD,CAAV;AACD,KAJ4B,EAK7B,UAASA,KAAT,EAAgB;AACd,aAAOA,KAAP;AACD,KAP4B,CAA/B;AASAF,IAAAA,MAAM,CAACF,MAAD,CAAN,CAAeG,OAAf,CAAuB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAvB;AACD,GAZC,CAAF;AAcAL,EAAAA,EAAE,CAAC,yEAAD,EAA4E,YAAM;AAClF,QAAMC,KAAK,GAAG,EAAd;AACA,QAAMC,MAAM,GAAGJ,gBAAgB,CAC7BG,KAD6B,EAE7B,UAASE,KAAT,EAAgB;AACd,aAAOA,KAAK,GAAG,CAAf;AACD,KAJ4B,EAK7B,YAAW;AACT,aAAO,CAAP;AACD,KAP4B,CAA/B;AASAC,IAAAA,MAAM,CAACF,MAAD,CAAN,CAAeG,OAAf,CAAuB,EAAvB;AACD,GAZC,CAAF;AAaD,CA1DO,CAAR","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @emails oncall+react_native\n */\n\n'use strict';\n\ndescribe('mapWithSeparator', () => {\n  const mapWithSeparator = require('../mapWithSeparator');\n\n  it('mapWithSeparator returns expected results', () => {\n    const array = [1, 2, 3];\n    const result = mapWithSeparator(\n      array,\n      function(value) {\n        return value * 2;\n      },\n      function() {\n        return 0;\n      },\n    );\n    expect(result).toEqual([2, 0, 4, 0, 6]);\n  });\n\n  it('mapWithSeparator indices are correct', () => {\n    const array = [1, 2, 3];\n    const result = mapWithSeparator(\n      array,\n      function(value, index) {\n        return index;\n      },\n      function(index) {\n        return index;\n      },\n    );\n    expect(result).toEqual([0, 0, 1, 1, 2]);\n  });\n\n  it('mapWithSeparator passes correct array and indices', () => {\n    const array = [3, 2, 1];\n    const result = mapWithSeparator(\n      array,\n      function(value, index, arr) {\n        return arr[index];\n      },\n      function(index) {\n        return index;\n      },\n    );\n    expect(result).toEqual([3, 0, 2, 1, 1]);\n  });\n\n  it('mapWithSeparator returns empty array when empty array is given as input', () => {\n    const array = [];\n    const result = mapWithSeparator(\n      array,\n      function(value) {\n        return value * 2;\n      },\n      function() {\n        return 0;\n      },\n    );\n    expect(result).toEqual([]);\n  });\n});\n"]},"metadata":{},"sourceType":"script"}