{"ast":null,"code":"import { forwardRef, useCallback, useMemo, useRef } from 'react';\nimport createElement from \"../createElement\";\nimport css from \"../StyleSheet/css\";\nimport pick from \"../../modules/pick\";\nimport useElementLayout from \"../../hooks/useElementLayout\";\nimport useLayoutEffect from \"../../hooks/useLayoutEffect\";\nimport useMergeRefs from \"../../modules/useMergeRefs\";\nimport usePlatformMethods from \"../../hooks/usePlatformMethods\";\nimport useResponderEvents from \"../../hooks/useResponderEvents\";\nimport StyleSheet from \"../StyleSheet\";\nimport TextInputState from \"../../modules/TextInputState\";\n\nvar isSelectionStale = function isSelectionStale(node, selection) {\n  var selectionEnd = node.selectionEnd,\n      selectionStart = node.selectionStart;\n  var start = selection.start,\n      end = selection.end;\n  return start !== selectionStart || end !== selectionEnd;\n};\n\nvar setSelection = function setSelection(node, selection) {\n  if (isSelectionStale(node, selection)) {\n    var start = selection.start,\n        end = selection.end;\n\n    try {\n      node.setSelectionRange(start, end || start);\n    } catch (e) {}\n  }\n};\n\nvar forwardPropsList = {\n  accessibilityLabel: true,\n  accessibilityLiveRegion: true,\n  accessibilityRole: true,\n  accessibilityState: true,\n  accessibilityValue: true,\n  accessible: true,\n  autoCapitalize: true,\n  autoComplete: true,\n  autoCorrect: true,\n  autoFocus: true,\n  children: true,\n  classList: true,\n  defaultValue: true,\n  dir: true,\n  disabled: true,\n  importantForAccessibility: true,\n  maxLength: true,\n  nativeID: true,\n  onBlur: true,\n  onChange: true,\n  onClick: true,\n  onClickCapture: true,\n  onContextMenu: true,\n  onFocus: true,\n  onScroll: true,\n  onTouchCancel: true,\n  onTouchCancelCapture: true,\n  onTouchEnd: true,\n  onTouchEndCapture: true,\n  onTouchMove: true,\n  onTouchMoveCapture: true,\n  onTouchStart: true,\n  onTouchStartCapture: true,\n  placeholder: true,\n  pointerEvents: true,\n  readOnly: true,\n  ref: true,\n  rows: true,\n  spellCheck: true,\n  style: true,\n  value: true,\n  testID: true,\n  type: true,\n  dataSet: true,\n  onMouseDown: true,\n  onMouseEnter: true,\n  onMouseLeave: true,\n  onMouseMove: true,\n  onMouseOver: true,\n  onMouseOut: true,\n  onMouseUp: true\n};\n\nvar pickProps = function pickProps(props) {\n  return pick(props, forwardPropsList);\n};\n\nfunction isEventComposing(nativeEvent) {\n  return nativeEvent.isComposing || nativeEvent.keyCode === 229;\n}\n\nvar TextInput = forwardRef(function (props, forwardedRef) {\n  var _props$autoCapitalize = props.autoCapitalize,\n      autoCapitalize = _props$autoCapitalize === void 0 ? 'sentences' : _props$autoCapitalize,\n      autoComplete = props.autoComplete,\n      autoCompleteType = props.autoCompleteType,\n      _props$autoCorrect = props.autoCorrect,\n      autoCorrect = _props$autoCorrect === void 0 ? true : _props$autoCorrect,\n      blurOnSubmit = props.blurOnSubmit,\n      clearTextOnFocus = props.clearTextOnFocus,\n      dir = props.dir,\n      _props$editable = props.editable,\n      editable = _props$editable === void 0 ? true : _props$editable,\n      _props$keyboardType = props.keyboardType,\n      keyboardType = _props$keyboardType === void 0 ? 'default' : _props$keyboardType,\n      _props$multiline = props.multiline,\n      multiline = _props$multiline === void 0 ? false : _props$multiline,\n      _props$numberOfLines = props.numberOfLines,\n      numberOfLines = _props$numberOfLines === void 0 ? 1 : _props$numberOfLines,\n      onBlur = props.onBlur,\n      onChange = props.onChange,\n      onChangeText = props.onChangeText,\n      onContentSizeChange = props.onContentSizeChange,\n      onFocus = props.onFocus,\n      onKeyPress = props.onKeyPress,\n      onLayout = props.onLayout,\n      onMoveShouldSetResponder = props.onMoveShouldSetResponder,\n      onMoveShouldSetResponderCapture = props.onMoveShouldSetResponderCapture,\n      onResponderEnd = props.onResponderEnd,\n      onResponderGrant = props.onResponderGrant,\n      onResponderMove = props.onResponderMove,\n      onResponderReject = props.onResponderReject,\n      onResponderRelease = props.onResponderRelease,\n      onResponderStart = props.onResponderStart,\n      onResponderTerminate = props.onResponderTerminate,\n      onResponderTerminationRequest = props.onResponderTerminationRequest,\n      onScrollShouldSetResponder = props.onScrollShouldSetResponder,\n      onScrollShouldSetResponderCapture = props.onScrollShouldSetResponderCapture,\n      onSelectionChange = props.onSelectionChange,\n      onSelectionChangeShouldSetResponder = props.onSelectionChangeShouldSetResponder,\n      onSelectionChangeShouldSetResponderCapture = props.onSelectionChangeShouldSetResponderCapture,\n      onStartShouldSetResponder = props.onStartShouldSetResponder,\n      onStartShouldSetResponderCapture = props.onStartShouldSetResponderCapture,\n      onSubmitEditing = props.onSubmitEditing,\n      placeholderTextColor = props.placeholderTextColor,\n      returnKeyType = props.returnKeyType,\n      _props$secureTextEntr = props.secureTextEntry,\n      secureTextEntry = _props$secureTextEntr === void 0 ? false : _props$secureTextEntr,\n      selection = props.selection,\n      selectTextOnFocus = props.selectTextOnFocus,\n      spellCheck = props.spellCheck;\n  var type;\n  var inputMode;\n\n  switch (keyboardType) {\n    case 'email-address':\n      type = 'email';\n      break;\n\n    case 'number-pad':\n    case 'numeric':\n      inputMode = 'numeric';\n      break;\n\n    case 'decimal-pad':\n      inputMode = 'decimal';\n      break;\n\n    case 'phone-pad':\n      type = 'tel';\n      break;\n\n    case 'search':\n    case 'web-search':\n      type = 'search';\n      break;\n\n    case 'url':\n      type = 'url';\n      break;\n\n    default:\n      type = 'text';\n  }\n\n  if (secureTextEntry) {\n    type = 'password';\n  }\n\n  var dimensions = useRef({\n    height: null,\n    width: null\n  });\n  var hostRef = useRef(null);\n  var handleContentSizeChange = useCallback(function () {\n    var node = hostRef.current;\n\n    if (multiline && onContentSizeChange && node != null) {\n      var newHeight = node.scrollHeight;\n      var newWidth = node.scrollWidth;\n\n      if (newHeight !== dimensions.current.height || newWidth !== dimensions.current.width) {\n        dimensions.current.height = newHeight;\n        dimensions.current.width = newWidth;\n        onContentSizeChange({\n          nativeEvent: {\n            contentSize: {\n              height: dimensions.current.height,\n              width: dimensions.current.width\n            }\n          }\n        });\n      }\n    }\n  }, [hostRef, multiline, onContentSizeChange]);\n  var imperativeRef = useMemo(function () {\n    return function (hostNode) {\n      if (hostNode != null) {\n        hostNode.clear = function () {\n          if (hostNode != null) {\n            hostNode.value = '';\n          }\n        };\n\n        hostNode.isFocused = function () {\n          return hostNode != null && TextInputState.currentlyFocusedField() === hostNode;\n        };\n\n        handleContentSizeChange();\n      }\n    };\n  }, [handleContentSizeChange]);\n\n  function handleBlur(e) {\n    TextInputState._currentlyFocusedNode = null;\n\n    if (onBlur) {\n      e.nativeEvent.text = e.target.value;\n      onBlur(e);\n    }\n  }\n\n  function handleChange(e) {\n    var text = e.target.value;\n    e.nativeEvent.text = text;\n    handleContentSizeChange();\n\n    if (onChange) {\n      onChange(e);\n    }\n\n    if (onChangeText) {\n      onChangeText(text);\n    }\n  }\n\n  function handleFocus(e) {\n    var node = hostRef.current;\n\n    if (node != null) {\n      TextInputState._currentlyFocusedNode = node;\n\n      if (onFocus) {\n        e.nativeEvent.text = e.target.value;\n        onFocus(e);\n      }\n\n      if (clearTextOnFocus) {\n        node.value = '';\n      }\n\n      if (selectTextOnFocus) {\n        node.select();\n      }\n    }\n  }\n\n  function handleKeyDown(e) {\n    e.stopPropagation();\n    var blurOnSubmitDefault = !multiline;\n    var shouldBlurOnSubmit = blurOnSubmit == null ? blurOnSubmitDefault : blurOnSubmit;\n    var nativeEvent = e.nativeEvent;\n    var isComposing = isEventComposing(nativeEvent);\n\n    if (onKeyPress) {\n      onKeyPress(e);\n    }\n\n    if (e.key === 'Enter' && !e.shiftKey && !isComposing && !e.isDefaultPrevented()) {\n      if ((blurOnSubmit || !multiline) && onSubmitEditing) {\n        e.preventDefault();\n        nativeEvent.text = e.target.value;\n        onSubmitEditing(e);\n      }\n\n      if (shouldBlurOnSubmit && hostRef.current != null) {\n        hostRef.current.blur();\n      }\n    }\n  }\n\n  function handleSelectionChange(e) {\n    if (onSelectionChange) {\n      try {\n        var node = e.target;\n        var selectionStart = node.selectionStart,\n            selectionEnd = node.selectionEnd;\n        e.nativeEvent.selection = {\n          start: selectionStart,\n          end: selectionEnd\n        };\n        e.nativeEvent.text = e.target.value;\n        onSelectionChange(e);\n      } catch (e) {}\n    }\n  }\n\n  useLayoutEffect(function () {\n    var node = hostRef.current;\n\n    if (node != null && selection != null) {\n      setSelection(node, selection);\n    }\n\n    if (document.activeElement === node) {\n      TextInputState._currentlyFocusedNode = node;\n    }\n  }, [hostRef, selection]);\n  var component = multiline ? 'textarea' : 'input';\n  var classList = [classes.textinput];\n  var style = StyleSheet.compose(props.style, placeholderTextColor && {\n    placeholderTextColor: placeholderTextColor\n  });\n  useElementLayout(hostRef, onLayout);\n  useResponderEvents(hostRef, {\n    onMoveShouldSetResponder: onMoveShouldSetResponder,\n    onMoveShouldSetResponderCapture: onMoveShouldSetResponderCapture,\n    onResponderEnd: onResponderEnd,\n    onResponderGrant: onResponderGrant,\n    onResponderMove: onResponderMove,\n    onResponderReject: onResponderReject,\n    onResponderRelease: onResponderRelease,\n    onResponderStart: onResponderStart,\n    onResponderTerminate: onResponderTerminate,\n    onResponderTerminationRequest: onResponderTerminationRequest,\n    onScrollShouldSetResponder: onScrollShouldSetResponder,\n    onScrollShouldSetResponderCapture: onScrollShouldSetResponderCapture,\n    onSelectionChangeShouldSetResponder: onSelectionChangeShouldSetResponder,\n    onSelectionChangeShouldSetResponderCapture: onSelectionChangeShouldSetResponderCapture,\n    onStartShouldSetResponder: onStartShouldSetResponder,\n    onStartShouldSetResponderCapture: onStartShouldSetResponderCapture\n  });\n  var supportedProps = pickProps(props);\n  supportedProps.autoCapitalize = autoCapitalize;\n  supportedProps.autoComplete = autoComplete || autoCompleteType || 'on';\n  supportedProps.autoCorrect = autoCorrect ? 'on' : 'off';\n  supportedProps.classList = classList;\n  supportedProps.dir = dir !== undefined ? dir : 'auto';\n  supportedProps.enterkeyhint = returnKeyType;\n  supportedProps.onBlur = handleBlur;\n  supportedProps.onChange = handleChange;\n  supportedProps.onFocus = handleFocus;\n  supportedProps.onKeyDown = handleKeyDown;\n  supportedProps.onSelect = handleSelectionChange;\n  supportedProps.readOnly = !editable;\n  supportedProps.rows = multiline ? numberOfLines : undefined;\n  supportedProps.spellCheck = spellCheck != null ? spellCheck : autoCorrect;\n  supportedProps.style = style;\n  supportedProps.type = multiline ? undefined : type;\n  supportedProps.inputMode = inputMode;\n  var platformMethodsRef = usePlatformMethods(supportedProps);\n  var setRef = useMergeRefs(hostRef, platformMethodsRef, imperativeRef, forwardedRef);\n  supportedProps.ref = setRef;\n  return createElement(component, supportedProps);\n});\nTextInput.displayName = 'TextInput';\nTextInput.State = TextInputState;\nvar classes = css.create({\n  textinput: {\n    MozAppearance: 'textfield',\n    WebkitAppearance: 'none',\n    backgroundColor: 'transparent',\n    border: '0 solid black',\n    borderRadius: 0,\n    boxSizing: 'border-box',\n    font: '14px System',\n    margin: 0,\n    padding: 0,\n    resize: 'none'\n  }\n});\nexport default TextInput;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native-web/src/exports/TextInput/index.js"],"names":["forwardRef","useCallback","useMemo","useRef","createElement","css","pick","useElementLayout","useLayoutEffect","useMergeRefs","usePlatformMethods","useResponderEvents","StyleSheet","TextInputState","isSelectionStale","node","selection","selectionEnd","selectionStart","start","end","setSelection","setSelectionRange","e","forwardPropsList","accessibilityLabel","accessibilityLiveRegion","accessibilityRole","accessibilityState","accessibilityValue","accessible","autoCapitalize","autoComplete","autoCorrect","autoFocus","children","classList","defaultValue","dir","disabled","importantForAccessibility","maxLength","nativeID","onBlur","onChange","onClick","onClickCapture","onContextMenu","onFocus","onScroll","onTouchCancel","onTouchCancelCapture","onTouchEnd","onTouchEndCapture","onTouchMove","onTouchMoveCapture","onTouchStart","onTouchStartCapture","placeholder","pointerEvents","readOnly","ref","rows","spellCheck","style","value","testID","type","dataSet","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOver","onMouseOut","onMouseUp","pickProps","props","isEventComposing","nativeEvent","isComposing","keyCode","TextInput","forwardedRef","autoCompleteType","blurOnSubmit","clearTextOnFocus","editable","keyboardType","multiline","numberOfLines","onChangeText","onContentSizeChange","onKeyPress","onLayout","onMoveShouldSetResponder","onMoveShouldSetResponderCapture","onResponderEnd","onResponderGrant","onResponderMove","onResponderReject","onResponderRelease","onResponderStart","onResponderTerminate","onResponderTerminationRequest","onScrollShouldSetResponder","onScrollShouldSetResponderCapture","onSelectionChange","onSelectionChangeShouldSetResponder","onSelectionChangeShouldSetResponderCapture","onStartShouldSetResponder","onStartShouldSetResponderCapture","onSubmitEditing","placeholderTextColor","returnKeyType","secureTextEntry","selectTextOnFocus","inputMode","dimensions","height","width","hostRef","handleContentSizeChange","current","newHeight","scrollHeight","newWidth","scrollWidth","contentSize","imperativeRef","hostNode","clear","isFocused","currentlyFocusedField","handleBlur","_currentlyFocusedNode","text","target","handleChange","handleFocus","select","handleKeyDown","stopPropagation","blurOnSubmitDefault","shouldBlurOnSubmit","key","shiftKey","isDefaultPrevented","preventDefault","blur","handleSelectionChange","document","activeElement","component","classes","textinput","compose","supportedProps","undefined","enterkeyhint","onKeyDown","onSelect","platformMethodsRef","setRef","displayName","State","create","MozAppearance","WebkitAppearance","backgroundColor","border","borderRadius","boxSizing","font","margin","padding","resize"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type { TextInputProps } from './types';\n\nimport { forwardRef, useCallback, useMemo, useRef } from 'react';\nimport createElement from '../createElement';\nimport css from '../StyleSheet/css';\nimport pick from '../../modules/pick';\nimport useElementLayout from '../../hooks/useElementLayout';\nimport useLayoutEffect from '../../hooks/useLayoutEffect';\nimport useMergeRefs from '../../modules/useMergeRefs';\nimport usePlatformMethods from '../../hooks/usePlatformMethods';\nimport useResponderEvents from '../../hooks/useResponderEvents';\nimport StyleSheet from '../StyleSheet';\nimport TextInputState from '../../modules/TextInputState';\n\n/**\n * Determines whether a 'selection' prop differs from a node's existing\n * selection state.\n */\nconst isSelectionStale = (node, selection) => {\n  const { selectionEnd, selectionStart } = node;\n  const { start, end } = selection;\n  return start !== selectionStart || end !== selectionEnd;\n};\n\n/**\n * Certain input types do no support 'selectSelectionRange' and will throw an\n * error.\n */\nconst setSelection = (node, selection) => {\n  if (isSelectionStale(node, selection)) {\n    const { start, end } = selection;\n    try {\n      node.setSelectionRange(start, end || start);\n    } catch (e) {}\n  }\n};\n\nconst forwardPropsList = {\n  accessibilityLabel: true,\n  accessibilityLiveRegion: true,\n  accessibilityRole: true,\n  accessibilityState: true,\n  accessibilityValue: true,\n  accessible: true,\n  autoCapitalize: true,\n  autoComplete: true,\n  autoCorrect: true,\n  autoFocus: true,\n  children: true,\n  classList: true,\n  defaultValue: true,\n  dir: true,\n  disabled: true,\n  importantForAccessibility: true,\n  maxLength: true,\n  nativeID: true,\n  onBlur: true,\n  onChange: true,\n  onClick: true,\n  onClickCapture: true,\n  onContextMenu: true,\n  onFocus: true,\n  onScroll: true,\n  onTouchCancel: true,\n  onTouchCancelCapture: true,\n  onTouchEnd: true,\n  onTouchEndCapture: true,\n  onTouchMove: true,\n  onTouchMoveCapture: true,\n  onTouchStart: true,\n  onTouchStartCapture: true,\n  placeholder: true,\n  pointerEvents: true,\n  readOnly: true,\n  ref: true,\n  rows: true,\n  spellCheck: true,\n  style: true,\n  value: true,\n  testID: true,\n  type: true,\n  // unstable\n  dataSet: true,\n  onMouseDown: true,\n  onMouseEnter: true,\n  onMouseLeave: true,\n  onMouseMove: true,\n  onMouseOver: true,\n  onMouseOut: true,\n  onMouseUp: true\n};\n\nconst pickProps = props => pick(props, forwardPropsList);\n\n// If an Input Method Editor is processing key input, the 'keyCode' is 229.\n// https://www.w3.org/TR/uievents/#determine-keydown-keyup-keyCode\nfunction isEventComposing(nativeEvent) {\n  return nativeEvent.isComposing || nativeEvent.keyCode === 229;\n}\n\nconst TextInput = forwardRef<TextInputProps, *>((props, forwardedRef) => {\n  const {\n    autoCapitalize = 'sentences',\n    autoComplete,\n    autoCompleteType,\n    autoCorrect = true,\n    blurOnSubmit,\n    clearTextOnFocus,\n    dir,\n    editable = true,\n    keyboardType = 'default',\n    multiline = false,\n    numberOfLines = 1,\n    onBlur,\n    onChange,\n    onChangeText,\n    onContentSizeChange,\n    onFocus,\n    onKeyPress,\n    onLayout,\n    onMoveShouldSetResponder,\n    onMoveShouldSetResponderCapture,\n    onResponderEnd,\n    onResponderGrant,\n    onResponderMove,\n    onResponderReject,\n    onResponderRelease,\n    onResponderStart,\n    onResponderTerminate,\n    onResponderTerminationRequest,\n    onScrollShouldSetResponder,\n    onScrollShouldSetResponderCapture,\n    onSelectionChange,\n    onSelectionChangeShouldSetResponder,\n    onSelectionChangeShouldSetResponderCapture,\n    onStartShouldSetResponder,\n    onStartShouldSetResponderCapture,\n    onSubmitEditing,\n    placeholderTextColor,\n    returnKeyType,\n    secureTextEntry = false,\n    selection,\n    selectTextOnFocus,\n    spellCheck\n  } = props;\n\n  let type;\n  let inputMode;\n\n  switch (keyboardType) {\n    case 'email-address':\n      type = 'email';\n      break;\n    case 'number-pad':\n    case 'numeric':\n      inputMode = 'numeric';\n      break;\n    case 'decimal-pad':\n      inputMode = 'decimal';\n      break;\n    case 'phone-pad':\n      type = 'tel';\n      break;\n    case 'search':\n    case 'web-search':\n      type = 'search';\n      break;\n    case 'url':\n      type = 'url';\n      break;\n    default:\n      type = 'text';\n  }\n\n  if (secureTextEntry) {\n    type = 'password';\n  }\n\n  const dimensions = useRef({ height: null, width: null });\n  const hostRef = useRef(null);\n\n  const handleContentSizeChange = useCallback(() => {\n    const node = hostRef.current;\n    if (multiline && onContentSizeChange && node != null) {\n      const newHeight = node.scrollHeight;\n      const newWidth = node.scrollWidth;\n      if (newHeight !== dimensions.current.height || newWidth !== dimensions.current.width) {\n        dimensions.current.height = newHeight;\n        dimensions.current.width = newWidth;\n        onContentSizeChange({\n          nativeEvent: {\n            contentSize: {\n              height: dimensions.current.height,\n              width: dimensions.current.width\n            }\n          }\n        });\n      }\n    }\n  }, [hostRef, multiline, onContentSizeChange]);\n\n  const imperativeRef = useMemo(\n    () => hostNode => {\n      // TextInput needs to add more methods to the hostNode in addition to those\n      // added by `usePlatformMethods`. This is temporarily until an API like\n      // `TextInput.clear(hostRef)` is added to React Native.\n      if (hostNode != null) {\n        hostNode.clear = function() {\n          if (hostNode != null) {\n            hostNode.value = '';\n          }\n        };\n        hostNode.isFocused = function() {\n          return hostNode != null && TextInputState.currentlyFocusedField() === hostNode;\n        };\n        handleContentSizeChange();\n      }\n    },\n    [handleContentSizeChange]\n  );\n\n  function handleBlur(e) {\n    TextInputState._currentlyFocusedNode = null;\n    if (onBlur) {\n      e.nativeEvent.text = e.target.value;\n      onBlur(e);\n    }\n  }\n\n  function handleChange(e) {\n    const text = e.target.value;\n    e.nativeEvent.text = text;\n    handleContentSizeChange();\n    if (onChange) {\n      onChange(e);\n    }\n    if (onChangeText) {\n      onChangeText(text);\n    }\n  }\n\n  function handleFocus(e) {\n    const node = hostRef.current;\n    if (node != null) {\n      TextInputState._currentlyFocusedNode = node;\n      if (onFocus) {\n        e.nativeEvent.text = e.target.value;\n        onFocus(e);\n      }\n      if (clearTextOnFocus) {\n        node.value = '';\n      }\n      if (selectTextOnFocus) {\n        node.select();\n      }\n    }\n  }\n\n  function handleKeyDown(e) {\n    // Prevent key events bubbling (see #612)\n    e.stopPropagation();\n\n    const blurOnSubmitDefault = !multiline;\n    const shouldBlurOnSubmit = blurOnSubmit == null ? blurOnSubmitDefault : blurOnSubmit;\n\n    const nativeEvent = e.nativeEvent;\n    const isComposing = isEventComposing(nativeEvent);\n\n    if (onKeyPress) {\n      onKeyPress(e);\n    }\n\n    if (\n      e.key === 'Enter' &&\n      !e.shiftKey &&\n      // Do not call submit if composition is occuring.\n      !isComposing &&\n      !e.isDefaultPrevented()\n    ) {\n      if ((blurOnSubmit || !multiline) && onSubmitEditing) {\n        // prevent \"Enter\" from inserting a newline or submitting a form\n        e.preventDefault();\n        nativeEvent.text = e.target.value;\n        onSubmitEditing(e);\n      }\n      if (shouldBlurOnSubmit && hostRef.current != null) {\n        hostRef.current.blur();\n      }\n    }\n  }\n\n  function handleSelectionChange(e) {\n    if (onSelectionChange) {\n      try {\n        const node = e.target;\n        const { selectionStart, selectionEnd } = node;\n        e.nativeEvent.selection = {\n          start: selectionStart,\n          end: selectionEnd\n        };\n        e.nativeEvent.text = e.target.value;\n        onSelectionChange(e);\n      } catch (e) {}\n    }\n  }\n\n  useLayoutEffect(() => {\n    const node = hostRef.current;\n    if (node != null && selection != null) {\n      setSelection(node, selection);\n    }\n    if (document.activeElement === node) {\n      TextInputState._currentlyFocusedNode = node;\n    }\n  }, [hostRef, selection]);\n\n  const component = multiline ? 'textarea' : 'input';\n  const classList = [classes.textinput];\n  const style = StyleSheet.compose(\n    props.style,\n    placeholderTextColor && { placeholderTextColor }\n  );\n\n  useElementLayout(hostRef, onLayout);\n  useResponderEvents(hostRef, {\n    onMoveShouldSetResponder,\n    onMoveShouldSetResponderCapture,\n    onResponderEnd,\n    onResponderGrant,\n    onResponderMove,\n    onResponderReject,\n    onResponderRelease,\n    onResponderStart,\n    onResponderTerminate,\n    onResponderTerminationRequest,\n    onScrollShouldSetResponder,\n    onScrollShouldSetResponderCapture,\n    onSelectionChangeShouldSetResponder,\n    onSelectionChangeShouldSetResponderCapture,\n    onStartShouldSetResponder,\n    onStartShouldSetResponderCapture\n  });\n\n  const supportedProps = pickProps(props);\n  supportedProps.autoCapitalize = autoCapitalize;\n  supportedProps.autoComplete = autoComplete || autoCompleteType || 'on';\n  supportedProps.autoCorrect = autoCorrect ? 'on' : 'off';\n  supportedProps.classList = classList;\n  // 'auto' by default allows browsers to infer writing direction\n  supportedProps.dir = dir !== undefined ? dir : 'auto';\n  supportedProps.enterkeyhint = returnKeyType;\n  supportedProps.onBlur = handleBlur;\n  supportedProps.onChange = handleChange;\n  supportedProps.onFocus = handleFocus;\n  supportedProps.onKeyDown = handleKeyDown;\n  supportedProps.onSelect = handleSelectionChange;\n  supportedProps.readOnly = !editable;\n  supportedProps.rows = multiline ? numberOfLines : undefined;\n  supportedProps.spellCheck = spellCheck != null ? spellCheck : autoCorrect;\n  supportedProps.style = style;\n  supportedProps.type = multiline ? undefined : type;\n  supportedProps.inputMode = inputMode;\n\n  const platformMethodsRef = usePlatformMethods(supportedProps);\n\n  const setRef = useMergeRefs(hostRef, platformMethodsRef, imperativeRef, forwardedRef);\n\n  supportedProps.ref = setRef;\n\n  return createElement(component, supportedProps);\n});\n\nTextInput.displayName = 'TextInput';\n// $FlowFixMe\nTextInput.State = TextInputState;\n\nconst classes = css.create({\n  textinput: {\n    MozAppearance: 'textfield',\n    WebkitAppearance: 'none',\n    backgroundColor: 'transparent',\n    border: '0 solid black',\n    borderRadius: 0,\n    boxSizing: 'border-box',\n    font: '14px System',\n    margin: 0,\n    padding: 0,\n    resize: 'none'\n  }\n});\n\nexport default TextInput;\n"]},"metadata":{},"sourceType":"module"}