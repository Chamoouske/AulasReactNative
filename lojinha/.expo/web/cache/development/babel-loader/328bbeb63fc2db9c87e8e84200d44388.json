{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar fs_extra_1 = __importDefault(require(\"fs-extra\"));\n\nvar path_1 = __importDefault(require(\"path\"));\n\nvar Contents_json_1 = require(\"./Contents.json\");\n\nvar PNG_FILENAME = 'splashscreen.png';\nvar DARK_PNG_FILENAME = 'dark_splashscreen.png';\nvar IMAGESET_PATH = 'Images.xcassets/SplashScreen.imageset';\nvar CONTENTS_PATH = IMAGESET_PATH + \"/Contents.json\";\nvar PNG_PATH = IMAGESET_PATH + \"/\" + PNG_FILENAME;\nvar DARK_PNG_PATH = IMAGESET_PATH + \"/\" + DARK_PNG_FILENAME;\n\nfunction createContentsJsonFile(iosProjectPath, imageSetPath, imagePath, darkModeImagePath) {\n  return _regeneratorRuntime.async(function createContentsJsonFile$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (imagePath) {\n            _context.next = 2;\n            break;\n          }\n\n          return _context.abrupt(\"return\");\n\n        case 2:\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(fs_extra_1.default.mkdirp(imageSetPath));\n\n        case 4:\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(Contents_json_1.writeContentsJsonFile(path_1.default.resolve(iosProjectPath, CONTENTS_PATH), PNG_FILENAME, darkModeImagePath && DARK_PNG_FILENAME));\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction copyImageFiles(iosProjectPath, imagePath, darkModeImagePath) {\n  return _regeneratorRuntime.async(function copyImageFiles$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!imagePath) {\n            _context2.next = 3;\n            break;\n          }\n\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(fs_extra_1.default.copyFile(imagePath, path_1.default.resolve(iosProjectPath, PNG_PATH)));\n\n        case 3:\n          if (!darkModeImagePath) {\n            _context2.next = 6;\n            break;\n          }\n\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(fs_extra_1.default.copyFile(darkModeImagePath, path_1.default.resolve(iosProjectPath, DARK_PNG_PATH)));\n\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction configureImageAssets(iosProjectPath) {\n  var config,\n      _a,\n      imagePath,\n      darkModeImagePath,\n      imageSetPath,\n      _args3 = arguments;\n\n  return _regeneratorRuntime.async(function configureImageAssets$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          config = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};\n          imagePath = config.image;\n          darkModeImagePath = (_a = config.darkMode) === null || _a === void 0 ? void 0 : _a.image;\n          imageSetPath = path_1.default.resolve(iosProjectPath, IMAGESET_PATH);\n          _context3.next = 6;\n          return _regeneratorRuntime.awrap(fs_extra_1.default.pathExists(imageSetPath));\n\n        case 6:\n          if (!_context3.sent) {\n            _context3.next = 9;\n            break;\n          }\n\n          _context3.next = 9;\n          return _regeneratorRuntime.awrap(fs_extra_1.default.remove(imageSetPath));\n\n        case 9:\n          _context3.next = 11;\n          return _regeneratorRuntime.awrap(createContentsJsonFile(iosProjectPath, imageSetPath, imagePath, darkModeImagePath));\n\n        case 11:\n          _context3.next = 13;\n          return _regeneratorRuntime.awrap(copyImageFiles(iosProjectPath, imagePath, darkModeImagePath));\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.default = configureImageAssets;","map":{"version":3,"sources":["../../src/ios/ImageAsset.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,IAAA,UAAA,GAAA,eAAA,CAAA,OAAA,CAAA,UAAA,CAAA,CAAA;;AACA,IAAA,MAAA,GAAA,eAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;AAEA,IAAA,eAAA,GAAA,OAAA,mBAAA;;AAEA,IAAM,YAAY,GAAG,kBAArB;AACA,IAAM,iBAAiB,GAAG,uBAA1B;AAEA,IAAM,aAAa,GAAG,uCAAtB;AACA,IAAM,aAAa,GAAM,aAAN,mBAAnB;AACA,IAAM,QAAQ,GAAM,aAAN,SAAuB,YAArC;AACA,IAAM,aAAa,GAAM,aAAN,SAAuB,iBAA1C;;AAEA,SAAe,sBAAf,CACE,cADF,EAEE,YAFF,EAGE,SAHF,EAIE,iBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,cAMO,SANP;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,2CAUQ,UAAA,CAAA,OAAA,CAAG,MAAH,CAAU,YAAV,CAVR;;AAAA;AAAA;AAAA,2CAWQ,eAAA,CAAA,qBAAA,CACJ,MAAA,CAAA,OAAA,CAAK,OAAL,CAAa,cAAb,EAA6B,aAA7B,CADI,EAEJ,YAFI,EAGJ,iBAAiB,IAAI,iBAHjB,CAXR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBA,SAAe,cAAf,CACE,cADF,EAEE,SAFF,EAGE,iBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,eAKM,SALN;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAMU,UAAA,CAAA,OAAA,CAAG,QAAH,CAAY,SAAZ,EAAuB,MAAA,CAAA,OAAA,CAAK,OAAL,CAAa,cAAb,EAA6B,QAA7B,CAAvB,CANV;;AAAA;AAAA,eAQM,iBARN;AAAA;AAAA;AAAA;;AAAA;AAAA,2CASU,UAAA,CAAA,OAAA,CAAG,QAAH,CAAY,iBAAZ,EAA+B,MAAA,CAAA,OAAA,CAAK,OAAL,CAAa,cAAb,EAA6B,aAA7B,CAA/B,CATV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBe,SAAe,oBAAf,CACb,cADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEb,UAAA,MAFa,8DAOT,EAPS;AASP,UAAA,SATO,GASK,MAAM,CAAC,KATZ;AAUP,UAAA,iBAVO,GAUU,CAAA,EAAA,GAAG,MAAM,CAAC,QAAV,MAAkB,IAAlB,IAAkB,EAAA,KAAA,KAAA,CAAlB,GAAkB,KAAA,CAAlB,GAAkB,EAAA,CAAE,KAV9B;AAYP,UAAA,YAZO,GAYQ,MAAA,CAAA,OAAA,CAAK,OAAL,CAAa,cAAb,EAA6B,aAA7B,CAZR;AAAA;AAAA,2CAeH,UAAA,CAAA,OAAA,CAAG,UAAH,CAAc,YAAd,CAfG;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAgBL,UAAA,CAAA,OAAA,CAAG,MAAH,CAAU,YAAV,CAhBK;;AAAA;AAAA;AAAA,2CAmBP,sBAAsB,CAAC,cAAD,EAAiB,YAAjB,EAA+B,SAA/B,EAA0C,iBAA1C,CAnBf;;AAAA;AAAA;AAAA,2CAoBP,cAAc,CAAC,cAAD,EAAiB,SAAjB,EAA4B,iBAA5B,CApBP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAf,OAAA,CAAA,OAAA,GAAA,oBAAA","sourcesContent":["import fs from 'fs-extra';\nimport path from 'path';\n\nimport { writeContentsJsonFile } from './Contents.json';\n\nconst PNG_FILENAME = 'splashscreen.png';\nconst DARK_PNG_FILENAME = 'dark_splashscreen.png';\n\nconst IMAGESET_PATH = 'Images.xcassets/SplashScreen.imageset';\nconst CONTENTS_PATH = `${IMAGESET_PATH}/Contents.json`;\nconst PNG_PATH = `${IMAGESET_PATH}/${PNG_FILENAME}`;\nconst DARK_PNG_PATH = `${IMAGESET_PATH}/${DARK_PNG_FILENAME}`;\n\nasync function createContentsJsonFile(\n  iosProjectPath: string,\n  imageSetPath: string,\n  imagePath?: string,\n  darkModeImagePath?: string\n) {\n  if (!imagePath) {\n    return;\n  }\n\n  await fs.mkdirp(imageSetPath);\n  await writeContentsJsonFile(\n    path.resolve(iosProjectPath, CONTENTS_PATH),\n    PNG_FILENAME,\n    darkModeImagePath && DARK_PNG_FILENAME\n  );\n}\n\nasync function copyImageFiles(\n  iosProjectPath: string,\n  imagePath?: string,\n  darkModeImagePath?: string\n) {\n  if (imagePath) {\n    await fs.copyFile(imagePath, path.resolve(iosProjectPath, PNG_PATH));\n  }\n  if (darkModeImagePath) {\n    await fs.copyFile(darkModeImagePath, path.resolve(iosProjectPath, DARK_PNG_PATH));\n  }\n}\n\n/**\n * Creates imageset containing image for Splash/Launch Screen.\n */\nexport default async function configureImageAssets(\n  iosProjectPath: string,\n  config: {\n    image?: string;\n    darkMode?: {\n      image?: string;\n    };\n  } = {}\n) {\n  const imagePath = config.image;\n  const darkModeImagePath = config.darkMode?.image;\n\n  const imageSetPath = path.resolve(iosProjectPath, IMAGESET_PATH);\n\n  // ensure old SplashScreen imageSet is removed\n  if (await fs.pathExists(imageSetPath)) {\n    await fs.remove(imageSetPath);\n  }\n\n  await createContentsJsonFile(iosProjectPath, imageSetPath, imagePath, darkModeImagePath);\n  await copyImageFiles(iosProjectPath, imagePath, darkModeImagePath);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}