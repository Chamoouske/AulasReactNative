{"ast":null,"code":"'use strict';\n\ndescribe('groupByEveryN', function () {\n  var groupByEveryN = require(\"../groupByEveryN\");\n\n  it('should group by with different n', function () {\n    expect(groupByEveryN([1, 2, 3, 4, 5, 6, 7, 8, 9], 1)).toEqual([[1], [2], [3], [4], [5], [6], [7], [8], [9]]);\n    expect(groupByEveryN([1, 2, 3, 4, 5, 6, 7, 8, 9], 2)).toEqual([[1, 2], [3, 4], [5, 6], [7, 8], [9, null]]);\n    expect(groupByEveryN([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)).toEqual([[1, 2, 3], [4, 5, 6], [7, 8, 9]]);\n    expect(groupByEveryN([1, 2, 3, 4, 5, 6, 7, 8, 9], 4)).toEqual([[1, 2, 3, 4], [5, 6, 7, 8], [9, null, null, null]]);\n  });\n  it('should fill with null', function () {\n    expect(groupByEveryN([], 4)).toEqual([]);\n    expect(groupByEveryN([1], 4)).toEqual([[1, null, null, null]]);\n    expect(groupByEveryN([1, 2], 4)).toEqual([[1, 2, null, null]]);\n    expect(groupByEveryN([1, 2, 3], 4)).toEqual([[1, 2, 3, null]]);\n    expect(groupByEveryN([1, 2, 3, 4], 4)).toEqual([[1, 2, 3, 4]]);\n  });\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Utilities/__tests__/groupByEveryN-test.js"],"names":["describe","groupByEveryN","require","it","expect","toEqual"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @emails oncall+react_native\n */\n\n'use strict';\n\ndescribe('groupByEveryN', () => {\n  const groupByEveryN = require('../groupByEveryN');\n\n  it('should group by with different n', () => {\n    expect(groupByEveryN([1, 2, 3, 4, 5, 6, 7, 8, 9], 1)).toEqual([\n      [1],\n      [2],\n      [3],\n      [4],\n      [5],\n      [6],\n      [7],\n      [8],\n      [9],\n    ]);\n    expect(groupByEveryN([1, 2, 3, 4, 5, 6, 7, 8, 9], 2)).toEqual([\n      [1, 2],\n      [3, 4],\n      [5, 6],\n      [7, 8],\n      [9, null],\n    ]);\n    expect(groupByEveryN([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)).toEqual([\n      [1, 2, 3],\n      [4, 5, 6],\n      [7, 8, 9],\n    ]);\n    expect(groupByEveryN([1, 2, 3, 4, 5, 6, 7, 8, 9], 4)).toEqual([\n      [1, 2, 3, 4],\n      [5, 6, 7, 8],\n      [9, null, null, null],\n    ]);\n  });\n\n  it('should fill with null', () => {\n    expect(groupByEveryN([], 4)).toEqual([]);\n    expect(groupByEveryN([1], 4)).toEqual([[1, null, null, null]]);\n    expect(groupByEveryN([1, 2], 4)).toEqual([[1, 2, null, null]]);\n    expect(groupByEveryN([1, 2, 3], 4)).toEqual([[1, 2, 3, null]]);\n    expect(groupByEveryN([1, 2, 3, 4], 4)).toEqual([[1, 2, 3, 4]]);\n  });\n});\n"]},"metadata":{},"sourceType":"script"}