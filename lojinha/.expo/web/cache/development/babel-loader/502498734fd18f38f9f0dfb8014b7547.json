{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _ws() {\n  var data = require(\"ws\");\n\n  _ws = function _ws() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _prettyFormat() {\n  var data = _interopRequireDefault(require(\"pretty-format\"));\n\n  _prettyFormat = function _prettyFormat() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar PROTOCOL_VERSION = 2;\n\nfunction parseMessage(data) {\n  try {\n    var message = JSON.parse(data);\n\n    if (message.version === PROTOCOL_VERSION) {\n      return message;\n    }\n\n    _cliTools().logger.error('Received message had wrong protocol version: ' + message.version);\n  } catch (_unused) {\n    _cliTools().logger.error('Failed to parse the message as JSON:\\n' + data);\n  }\n\n  return undefined;\n}\n\nfunction serializeMessage(message) {\n  var toSerialize = message;\n\n  if (message && message.error && message.error instanceof Error) {\n    toSerialize = _objectSpread(_objectSpread({}, message), {}, {\n      error: (0, _prettyFormat().default)(message.error, {\n        escapeString: true,\n        highlight: true,\n        maxDepth: 3,\n        min: true\n      })\n    });\n  } else if (message && message.type === 'client_log') {\n    toSerialize = _objectSpread(_objectSpread({}, message), {}, {\n      data: message.data.map(function (item) {\n        return typeof item === 'string' ? item : (0, _prettyFormat().default)(item, {\n          escapeString: true,\n          highlight: true,\n          maxDepth: 3,\n          min: true,\n          plugins: [_prettyFormat().default.plugins.ReactElement]\n        });\n      })\n    });\n  }\n\n  try {\n    return JSON.stringify(toSerialize);\n  } catch (e) {\n    _cliTools().logger.error('Failed to serialize: ' + e);\n\n    return null;\n  }\n}\n\nfunction attachToServer(server, path, messageSocket) {\n  var wss = new (_ws().Server)({\n    server: server,\n    path: path,\n    verifyClient: function verifyClient(_ref) {\n      var origin = _ref.origin;\n      return origin.startsWith('http://localhost:') || origin.startsWith('file:');\n    }\n  });\n  var clients = new Map();\n  var nextClientId = 0;\n\n  function broadCastEvent(message) {\n    if (!clients.size) {\n      return;\n    }\n\n    var serialized = serializeMessage(message);\n\n    if (!serialized) {\n      return;\n    }\n\n    for (var _iterator = _createForOfIteratorHelperLoose(clients.values()), _step; !(_step = _iterator()).done;) {\n      var ws = _step.value;\n\n      try {\n        ws.send(serialized);\n      } catch (e) {\n        _cliTools().logger.error(\"Failed to send broadcast to client due to:\\n \" + e.toString());\n      }\n    }\n  }\n\n  wss.on('connection', function (clientWs) {\n    var clientId = \"client#\" + nextClientId++;\n    clients.set(clientId, clientWs);\n\n    clientWs.onclose = clientWs.onerror = function () {\n      clients.delete(clientId);\n    };\n\n    clientWs.onmessage = function (event) {\n      var message = parseMessage(event.data.toString());\n\n      if (message == null) {\n        return;\n      }\n\n      if (message.type === 'command') {\n        try {\n          messageSocket.broadcast(message.command, message.params);\n        } catch (e) {\n          _cliTools().logger.error('Failed to forward message to clients: ', e);\n        }\n      } else {\n        _cliTools().logger.error('Unknown message type: ', message.type);\n      }\n    };\n  });\n  return {\n    reportEvent: function reportEvent(event) {\n      broadCastEvent(event);\n    }\n  };\n}\n\nvar _default = {\n  attachToServer: attachToServer\n};\nexports.default = _default;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli-server-api/build/websocket/eventsSocketServer.js"],"names":["Object","defineProperty","exports","value","default","_ws","data","require","_cliTools","_prettyFormat","_interopRequireDefault","obj","__esModule","PROTOCOL_VERSION","parseMessage","message","JSON","parse","version","logger","error","_unused","undefined","serializeMessage","toSerialize","Error","escapeString","highlight","maxDepth","min","type","map","item","plugins","ReactElement","stringify","e","attachToServer","server","path","messageSocket","wss","Server","verifyClient","origin","startsWith","clients","Map","nextClientId","broadCastEvent","size","serialized","values","ws","send","toString","on","clientWs","clientId","set","onclose","onerror","delete","onmessage","event","broadcast","command","params","reportEvent","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _ws() {\n  const data = require(\"ws\");\n\n  _ws = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _prettyFormat() {\n  const data = _interopRequireDefault(require(\"pretty-format\"));\n\n  _prettyFormat = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * This number is used to version the communication protocol between\n * Dev tooling like Flipper and Metro, so that in the future we can recognize\n * messages coming from old clients, so that it will be simpler to implement\n * backward compatibility.\n *\n * We start at 2 as the protocol is currently the same as used internally at FB,\n * which happens to be at version 2 as well.\n */\nconst PROTOCOL_VERSION = 2;\n\nfunction parseMessage(data) {\n  try {\n    const message = JSON.parse(data);\n\n    if (message.version === PROTOCOL_VERSION) {\n      return message;\n    }\n\n    _cliTools().logger.error('Received message had wrong protocol version: ' + message.version);\n  } catch (_unused) {\n    _cliTools().logger.error('Failed to parse the message as JSON:\\n' + data);\n  }\n\n  return undefined;\n}\n/**\n * Two types of messages will arrive in this function,\n * 1) messages generated by Metro itself (through the reporter abstraction)\n *    those are yet to be serialized, and can contain any kind of data structure\n * 2) a specific event generated by Metro is `client_log`, which describes\n *    console.* calls in the app.\n *    The arguments send to the console are pretty printed so that they can be\n *    displayed in a nicer way in dev tools\n *\n * @param message\n */\n\n\nfunction serializeMessage(message) {\n  // We do want to send Metro report messages, but their contents is not guaranteed to be serializable.\n  // For some known types we will pretty print otherwise not serializable parts first:\n  let toSerialize = message;\n\n  if (message && message.error && message.error instanceof Error) {\n    toSerialize = { ...message,\n      error: (0, _prettyFormat().default)(message.error, {\n        escapeString: true,\n        highlight: true,\n        maxDepth: 3,\n        min: true\n      })\n    };\n  } else if (message && message.type === 'client_log') {\n    toSerialize = { ...message,\n      data: message.data.map(item => typeof item === 'string' ? item : (0, _prettyFormat().default)(item, {\n        escapeString: true,\n        highlight: true,\n        maxDepth: 3,\n        min: true,\n        plugins: [_prettyFormat().default.plugins.ReactElement]\n      }))\n    };\n  }\n\n  try {\n    return JSON.stringify(toSerialize);\n  } catch (e) {\n    _cliTools().logger.error('Failed to serialize: ' + e);\n\n    return null;\n  }\n}\n\n/**\n * Starts the eventsSocket at the given path\n *\n * @param server\n * @param path typically: 'events/'\n * @param messageSocket: webSocket to which all connected RN apps are listening\n */\nfunction attachToServer(server, path, messageSocket) {\n  const wss = new (_ws().Server)({\n    server: server,\n    path: path,\n\n    verifyClient({\n      origin\n    }) {\n      // This exposes the full JS logs and enables issuing commands like reload\n      // so let's make sure only locally running stuff can connect to it\n      return origin.startsWith('http://localhost:') || origin.startsWith('file:');\n    }\n\n  });\n  const clients = new Map();\n  let nextClientId = 0;\n  /**\n   * broadCastEvent is called by reportEvent (below), which is called by the\n   * default reporter of this server, to make sure that all Metro events are\n   * broadcasted to all connected clients\n   * (that is, all devtools such as Flipper, _not_: connected apps)\n   *\n   * @param message\n   */\n\n  function broadCastEvent(message) {\n    if (!clients.size) {\n      return;\n    }\n\n    const serialized = serializeMessage(message);\n\n    if (!serialized) {\n      return;\n    }\n\n    for (const ws of clients.values()) {\n      try {\n        ws.send(serialized);\n      } catch (e) {\n        _cliTools().logger.error(`Failed to send broadcast to client due to:\\n ${e.toString()}`);\n      }\n    }\n  }\n\n  wss.on('connection', function (clientWs) {\n    const clientId = `client#${nextClientId++}`;\n    clients.set(clientId, clientWs);\n\n    clientWs.onclose = clientWs.onerror = () => {\n      clients.delete(clientId);\n    };\n\n    clientWs.onmessage = event => {\n      const message = parseMessage(event.data.toString());\n\n      if (message == null) {\n        return;\n      }\n\n      if (message.type === 'command') {\n        try {\n          /**\n           * messageSocket.broadcast (not to be confused with our own broadcast above)\n           * forwards a command to all connected React Native applications.\n           */\n          messageSocket.broadcast(message.command, message.params);\n        } catch (e) {\n          _cliTools().logger.error('Failed to forward message to clients: ', e);\n        }\n      } else {\n        _cliTools().logger.error('Unknown message type: ', message.type);\n      }\n    };\n  });\n  return {\n    reportEvent: event => {\n      broadCastEvent(event);\n    }\n  };\n}\n\nvar _default = {\n  attachToServer\n};\nexports.default = _default;\n\n//# sourceMappingURL=eventsSocketServer.js.map"]},"metadata":{},"sourceType":"script"}