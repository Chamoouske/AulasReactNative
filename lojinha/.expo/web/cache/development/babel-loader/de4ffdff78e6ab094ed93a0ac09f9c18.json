{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nvar _jsxFileName = \"/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/IntegrationTests/RCTRootViewIntegrationTestApp.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar React = require('react');\n\nvar ReactNative = require(\"react-native-web/dist/index\");\n\nvar AppRegistry = ReactNative.AppRegistry,\n    ScrollView = ReactNative.ScrollView,\n    StyleSheet = ReactNative.StyleSheet,\n    Text = ReactNative.Text,\n    TouchableOpacity = ReactNative.TouchableOpacity,\n    View = ReactNative.View;\nvar TESTS = [require(\"./PropertiesUpdateTest\"), require(\"./ReactContentSizeUpdateTest\"), require(\"./SizeFlexibilityUpdateTest\")];\nTESTS.forEach(function (test) {\n  return AppRegistry.registerComponent(test.displayName, function () {\n    return test;\n  });\n});\n\nvar RCTRootViewIntegrationTestApp = function (_React$Component) {\n  _inherits(RCTRootViewIntegrationTestApp, _React$Component);\n\n  var _super = _createSuper(RCTRootViewIntegrationTestApp);\n\n  function RCTRootViewIntegrationTestApp() {\n    var _this;\n\n    _classCallCheck(this, RCTRootViewIntegrationTestApp);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      test: null\n    };\n    return _this;\n  }\n\n  _createClass(RCTRootViewIntegrationTestApp, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      if (this.state.test) {\n        return React.createElement(ScrollView, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 9\n          }\n        }, React.createElement(this.state.test, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 11\n          }\n        }));\n      }\n\n      return React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 7\n        }\n      }, React.createElement(Text, {\n        style: styles.row,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 9\n        }\n      }, \"Click on a test to run it in this shell for easier debugging and development. Run all tests in the testing environment with cmd+U in Xcode.\"), React.createElement(View, {\n        style: styles.separator,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 9\n        }\n      }), React.createElement(ScrollView, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 9\n        }\n      }, TESTS.map(function (test) {\n        return [React.createElement(TouchableOpacity, {\n          onPress: function onPress() {\n            return _this2.setState({\n              test: test\n            });\n          },\n          style: styles.row,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }\n        }, React.createElement(Text, {\n          style: styles.testName,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }\n        }, test.displayName)), React.createElement(View, {\n          style: styles.separator,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }\n        })];\n      })));\n    }\n  }]);\n\n  return RCTRootViewIntegrationTestApp;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    marginTop: 40,\n    margin: 15\n  },\n  row: {\n    padding: 10\n  },\n  testName: {\n    fontWeight: '500'\n  },\n  separator: {\n    height: 1,\n    backgroundColor: '#bbbbbb'\n  }\n});\nAppRegistry.registerComponent('RCTRootViewIntegrationTestApp', function () {\n  return RCTRootViewIntegrationTestApp;\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/IntegrationTests/RCTRootViewIntegrationTestApp.js"],"names":["React","require","AppRegistry","ReactNative","ScrollView","StyleSheet","Text","TouchableOpacity","View","TESTS","forEach","test","registerComponent","displayName","RCTRootViewIntegrationTestApp","state","styles","container","row","separator","map","setState","testName","Component","create","backgroundColor","marginTop","margin","padding","fontWeight","height"],"mappings":"AASA;;;;;;;;;;;;;;;;;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;;;IAIEC,W,GAMEC,W,CANFD,W;IACAE,U,GAKED,W,CALFC,U;IACAC,U,GAIEF,W,CAJFE,U;IACAC,I,GAGEH,W,CAHFG,I;IACAC,gB,GAEEJ,W,CAFFI,gB;IACAC,I,GACEL,W,CADFK,I;AAIF,IAAMC,KAAK,GAAG,CACZR,OAAO,0BADK,EAEZA,OAAO,gCAFK,EAGZA,OAAO,+BAHK,CAAd;AAMAQ,KAAK,CAACC,OAAN,CAAc,UAAAC,IAAI;AAAA,SAChBT,WAAW,CAACU,iBAAZ,CAA8BD,IAAI,CAACE,WAAnC,EAAgD;AAAA,WAAMF,IAAN;AAAA,GAAhD,CADgB;AAAA,CAAlB;;IAIMG,6B;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNJ,MAAAA,IAAI,EAAE;AADA,K;;;;;;WAIR,kBAAS;AAAA;;AACP,UAAI,KAAKI,KAAL,CAAWJ,IAAf,EAAqB;AACnB,eACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,yBAAM,KAAN,CAAY,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CADF;AAKD;;AACD,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEK,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAED,MAAM,CAACE,GAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uJADF,EAME,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEF,MAAM,CAACG,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANF,EAOE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGV,KAAK,CAACW,GAAN,CAAU,UAAAT,IAAI;AAAA,eAAI,CACjB,oBAAC,gBAAD;AACE,UAAA,OAAO,EAAE;AAAA,mBAAM,MAAI,CAACU,QAAL,CAAc;AAACV,cAAAA,IAAI,EAAJA;AAAD,aAAd,CAAN;AAAA,WADX;AAEE,UAAA,KAAK,EAAEK,MAAM,CAACE,GAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAGE,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAEF,MAAM,CAACM,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA+BX,IAAI,CAACE,WAApC,CAHF,CADiB,EAMjB,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAEG,MAAM,CAACG,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UANiB,CAAJ;AAAA,OAAd,CADH,CAPF,CADF;AAoBD;;;;EAjCyCnB,KAAK,CAACuB,S;;AAoClD,IAAMP,MAAM,GAAGX,UAAU,CAACmB,MAAX,CAAkB;AAC/BP,EAAAA,SAAS,EAAE;AACTQ,IAAAA,eAAe,EAAE,OADR;AAETC,IAAAA,SAAS,EAAE,EAFF;AAGTC,IAAAA,MAAM,EAAE;AAHC,GADoB;AAM/BT,EAAAA,GAAG,EAAE;AACHU,IAAAA,OAAO,EAAE;AADN,GAN0B;AAS/BN,EAAAA,QAAQ,EAAE;AACRO,IAAAA,UAAU,EAAE;AADJ,GATqB;AAY/BV,EAAAA,SAAS,EAAE;AACTW,IAAAA,MAAM,EAAE,CADC;AAETL,IAAAA,eAAe,EAAE;AAFR;AAZoB,CAAlB,CAAf;AAkBAvB,WAAW,CAACU,iBAAZ,CACE,+BADF,EAEE;AAAA,SAAME,6BAAN;AAAA,CAFF","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\n'use strict';\n\nconst React = require('react');\nconst ReactNative = require('react-native');\n\nconst {\n  AppRegistry,\n  ScrollView,\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  View,\n} = ReactNative;\n\n/* Keep this list in sync with RCTRootViewIntegrationTests.m */\nconst TESTS = [\n  require('./PropertiesUpdateTest'),\n  require('./ReactContentSizeUpdateTest'),\n  require('./SizeFlexibilityUpdateTest'),\n];\n\nTESTS.forEach(test =>\n  AppRegistry.registerComponent(test.displayName, () => test),\n);\n\nclass RCTRootViewIntegrationTestApp extends React.Component {\n  state = {\n    test: null,\n  };\n\n  render() {\n    if (this.state.test) {\n      return (\n        <ScrollView>\n          <this.state.test />\n        </ScrollView>\n      );\n    }\n    return (\n      <View style={styles.container}>\n        <Text style={styles.row}>\n          Click on a test to run it in this shell for easier debugging and\n          development. Run all tests in the testing environment with cmd+U in\n          Xcode.\n        </Text>\n        <View style={styles.separator} />\n        <ScrollView>\n          {TESTS.map(test => [\n            <TouchableOpacity\n              onPress={() => this.setState({test})}\n              style={styles.row}>\n              <Text style={styles.testName}>{test.displayName}</Text>\n            </TouchableOpacity>,\n            <View style={styles.separator} />,\n          ])}\n        </ScrollView>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    marginTop: 40,\n    margin: 15,\n  },\n  row: {\n    padding: 10,\n  },\n  testName: {\n    fontWeight: '500',\n  },\n  separator: {\n    height: 1,\n    backgroundColor: '#bbbbbb',\n  },\n});\n\nAppRegistry.registerComponent(\n  'RCTRootViewIntegrationTestApp',\n  () => RCTRootViewIntegrationTestApp,\n);\n"]},"metadata":{},"sourceType":"script"}