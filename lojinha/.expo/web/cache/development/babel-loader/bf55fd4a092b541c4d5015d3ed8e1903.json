{"ast":null,"code":"import { ExpoConfig } from '@expo/config-types';\nexport { ExpoConfig };","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@expo/config/build/Config.types.d.ts"],"names":["ExpoConfig"],"mappings":"AACA,SAASA,UAAT,QAA2B,oBAA3B;AACA,SAASA,UAAT","sourcesContent":["import { ModConfig } from '@expo/config-plugins';\nimport { ExpoConfig } from '@expo/config-types';\nexport { ExpoConfig };\nexport declare type PackageJSONConfig = Record<string, any>;\nexport interface ProjectConfig {\n    /**\n     * Fully evaluated Expo config with default values injected.\n     */\n    exp: ExpoConfig;\n    /**\n     * Dynamic config for processing native files during the generation process.\n     */\n    mods?: ModConfig | null;\n    /**\n     * Project package.json object with default values injected.\n     */\n    pkg: PackageJSONConfig;\n    /**\n     * Unaltered static config (app.config.json, app.json, or custom json config).\n     * For legacy, an empty object will be returned even if no static config exists.\n     */\n    rootConfig: AppJSONConfig;\n    /**\n     * Path to the static json config file if it exists.\n     * If a project has an app.config.js and an app.json then app.json will be returned.\n     * If a project has an app.config.json and an app.json then app.config.json will be returned.\n     * Returns null if no static config file exists.\n     */\n    staticConfigPath: string | null;\n    /**\n     * Path to an app.config.js or app.config.ts.\n     * Returns null if no dynamic config file exists.\n     */\n    dynamicConfigPath: string | null;\n    /**\n     * Returns the type of the value exported from the dynamic config.\n     * This can be used to determine if the dynamic config is potentially extending a static config when (v === 'function').\n     * Returns null if no dynamic config file exists.\n     */\n    dynamicConfigObjectType: string | null;\n}\nexport declare type AppJSONConfig = {\n    expo: ExpoConfig;\n    [key: string]: any;\n};\nexport declare type BareAppConfig = {\n    name: string;\n    [key: string]: any;\n};\nexport declare type HookArguments = {\n    config: any;\n    url: any;\n    exp: ExpoConfig;\n    iosBundle: string;\n    iosSourceMap: string | null;\n    iosManifest: any;\n    androidBundle: string;\n    androidSourceMap: string | null;\n    androidManifest: any;\n    projectRoot: string;\n    log: (msg: any) => void;\n};\nexport declare type ExpoAppManifest = ExpoConfig & {\n    sdkVersion: string;\n    bundledAssets?: string[];\n    isKernel?: boolean;\n    xde?: boolean;\n    kernel?: {\n        androidManifestPath?: string;\n        iosManifestPath?: string;\n    };\n    assetUrlOverride?: string;\n    publishedTime?: string;\n    commitTime?: string;\n    releaseId?: string;\n    revisionId?: string;\n    mainModuleName?: string;\n    env?: Record<string, any>;\n    bundleUrl?: string;\n    debuggerHost?: string;\n    logUrl?: string;\n    hostUri?: string;\n    id?: string;\n    developer?: {\n        tool: string | null;\n        projectRoot?: string;\n    };\n    ios?: {\n        publishSourceMapPath?: string;\n    } & ExpoConfig['ios'];\n    android?: {\n        publishSourceMapPath?: string;\n    } & ExpoConfig['android'];\n};\nexport declare type Hook = {\n    file: string;\n    config: any;\n};\nexport declare type HookType = 'postPublish' | 'postExport';\nexport declare enum ProjectPrivacy {\n    PUBLIC = \"public\",\n    UNLISTED = \"unlisted\"\n}\nexport declare type ExpRc = {\n    [key: string]: any;\n};\nexport declare type Platform = 'android' | 'ios' | 'web';\nexport declare type ProjectTarget = 'managed' | 'bare';\nexport declare type ConfigErrorCode = 'NO_APP_JSON' | 'NOT_OBJECT' | 'NO_EXPO' | 'MODULE_NOT_FOUND' | 'INVALID_MODE' | 'INVALID_FORMAT' | 'INVALID_PLUGIN' | 'INVALID_CONFIG';\nexport declare type ConfigContext = {\n    projectRoot: string;\n    /**\n     * The static config path either app.json, app.config.json, or a custom user-defined config.\n     */\n    staticConfigPath: string | null;\n    packageJsonPath: string | null;\n    config: Partial<ExpoConfig>;\n};\nexport declare type GetConfigOptions = {\n    isPublicConfig?: boolean;\n    /**\n     * Should the config `mods` be preserved in the config? Used for compiling mods in the eject command.\n     *\n     * @default false\n     */\n    isModdedConfig?: boolean;\n    skipSDKVersionRequirement?: boolean;\n    strict?: boolean;\n};\nexport declare type WriteConfigOptions = {\n    dryRun?: boolean;\n};\nexport declare type ConfigFilePaths = {\n    staticConfigPath: string | null;\n    dynamicConfigPath: string | null;\n};\n"]},"metadata":{},"sourceType":"module"}