{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar core_plugins_1 = require(\"../plugins/core-plugins\");\n\nvar XML_1 = require(\"../utils/XML\");\n\nvar Colors_1 = require(\"./Colors\");\n\nvar Resources_1 = require(\"./Resources\");\n\nvar Styles_1 = require(\"./Styles\");\n\nvar ANDROID_WINDOW_BACKGROUND = 'android:windowBackground';\nvar WINDOW_BACKGROUND_COLOR = 'activityBackground';\n\nexports.withRootViewBackgroundColor = function (config) {\n  return core_plugins_1.withDangerousMod(config, ['android', function _callee(config) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(setRootViewBackgroundColor(config, config.modRequest.projectRoot));\n\n          case 2:\n            return _context.abrupt(\"return\", config);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }]);\n};\n\nfunction getRootViewBackgroundColor(config) {\n  var _a;\n\n  if ((_a = config.android) === null || _a === void 0 ? void 0 : _a.backgroundColor) {\n    return config.android.backgroundColor;\n  }\n\n  if (config.backgroundColor) {\n    return config.backgroundColor;\n  }\n\n  return null;\n}\n\nexports.getRootViewBackgroundColor = getRootViewBackgroundColor;\n\nfunction setRootViewBackgroundColor(config, projectRoot) {\n  var hexString, stylesPath, colorsPath, stylesJSON, colorsJSON, colorItemToAdd, styleItemToAdd;\n  return _regeneratorRuntime.async(function setRootViewBackgroundColor$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          hexString = getRootViewBackgroundColor(config);\n\n          if (hexString) {\n            _context2.next = 3;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", false);\n\n        case 3:\n          _context2.next = 5;\n          return _regeneratorRuntime.awrap(Styles_1.getProjectStylesXMLPathAsync(projectRoot));\n\n        case 5:\n          stylesPath = _context2.sent;\n          _context2.next = 8;\n          return _regeneratorRuntime.awrap(Colors_1.getProjectColorsXMLPathAsync(projectRoot));\n\n        case 8:\n          colorsPath = _context2.sent;\n          _context2.next = 11;\n          return _regeneratorRuntime.awrap(Resources_1.readResourcesXMLAsync({\n            path: stylesPath\n          }));\n\n        case 11:\n          stylesJSON = _context2.sent;\n          _context2.next = 14;\n          return _regeneratorRuntime.awrap(Resources_1.readResourcesXMLAsync({\n            path: colorsPath\n          }));\n\n        case 14:\n          colorsJSON = _context2.sent;\n          colorItemToAdd = Resources_1.buildResourceItem({\n            name: WINDOW_BACKGROUND_COLOR,\n            value: hexString\n          });\n          styleItemToAdd = Resources_1.buildResourceItem({\n            name: ANDROID_WINDOW_BACKGROUND,\n            value: \"@color/\" + WINDOW_BACKGROUND_COLOR\n          });\n          colorsJSON = Colors_1.setColorItem(colorItemToAdd, colorsJSON);\n          stylesJSON = Styles_1.setStylesItem({\n            item: styleItemToAdd,\n            xml: stylesJSON,\n            parent: {\n              name: 'AppTheme',\n              parent: 'Theme.AppCompat.Light.NoActionBar'\n            }\n          });\n          _context2.prev = 19;\n          _context2.next = 22;\n          return _regeneratorRuntime.awrap(Promise.all([XML_1.writeXMLAsync({\n            path: colorsPath,\n            xml: colorsJSON\n          }), XML_1.writeXMLAsync({\n            path: stylesPath,\n            xml: stylesJSON\n          })]));\n\n        case 22:\n          _context2.next = 27;\n          break;\n\n        case 24:\n          _context2.prev = 24;\n          _context2.t0 = _context2[\"catch\"](19);\n          throw new Error(\"Error setting Android root view background color. Cannot write new styles.xml to \" + stylesPath + \".\");\n\n        case 27:\n          return _context2.abrupt(\"return\", true);\n\n        case 28:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[19, 24]], Promise);\n}\n\nexports.setRootViewBackgroundColor = setRootViewBackgroundColor;","map":{"version":3,"sources":["../../src/android/RootViewBackgroundColor.ts"],"names":[],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withDangerousMod } from '../plugins/core-plugins';\nimport { writeXMLAsync } from '../utils/XML';\nimport { getProjectColorsXMLPathAsync, setColorItem } from './Colors';\nimport { buildResourceItem, readResourcesXMLAsync } from './Resources';\nimport { getProjectStylesXMLPathAsync, setStylesItem } from './Styles';\n\nconst ANDROID_WINDOW_BACKGROUND = 'android:windowBackground';\nconst WINDOW_BACKGROUND_COLOR = 'activityBackground';\n\nexport const withRootViewBackgroundColor: ConfigPlugin = config => {\n  return withDangerousMod(config, [\n    'android',\n    async config => {\n      await setRootViewBackgroundColor(config, config.modRequest.projectRoot);\n      return config;\n    },\n  ]);\n};\n\nexport function getRootViewBackgroundColor(\n  config: Pick<ExpoConfig, 'android' | 'backgroundColor'>\n) {\n  if (config.android?.backgroundColor) {\n    return config.android.backgroundColor;\n  }\n  if (config.backgroundColor) {\n    return config.backgroundColor;\n  }\n\n  return null;\n}\n\nexport async function setRootViewBackgroundColor(\n  config: Pick<ExpoConfig, 'android' | 'backgroundColor'>,\n  projectRoot: string\n) {\n  const hexString = getRootViewBackgroundColor(config);\n  if (!hexString) {\n    return false;\n  }\n\n  const stylesPath = await getProjectStylesXMLPathAsync(projectRoot);\n  const colorsPath = await getProjectColorsXMLPathAsync(projectRoot);\n\n  let stylesJSON = await readResourcesXMLAsync({ path: stylesPath });\n  let colorsJSON = await readResourcesXMLAsync({ path: colorsPath });\n\n  const colorItemToAdd = buildResourceItem({ name: WINDOW_BACKGROUND_COLOR, value: hexString });\n  const styleItemToAdd = buildResourceItem({\n    name: ANDROID_WINDOW_BACKGROUND,\n    value: `@color/${WINDOW_BACKGROUND_COLOR}`,\n  });\n\n  colorsJSON = setColorItem(colorItemToAdd, colorsJSON);\n  stylesJSON = setStylesItem({\n    item: styleItemToAdd,\n    xml: stylesJSON,\n    parent: { name: 'AppTheme', parent: 'Theme.AppCompat.Light.NoActionBar' },\n  });\n\n  try {\n    await Promise.all([\n      writeXMLAsync({ path: colorsPath, xml: colorsJSON }),\n      writeXMLAsync({ path: stylesPath, xml: stylesJSON }),\n    ]);\n  } catch (e) {\n    throw new Error(\n      `Error setting Android root view background color. Cannot write new styles.xml to ${stylesPath}.`\n    );\n  }\n  return true;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}