{"ast":null,"code":"'use strict';\n\nvar _require = require(\"./Utils\"),\n    flatObjects = _require.flatObjects,\n    capitalizeFirstLetter = _require.capitalizeFirstLetter;\n\nvar _require2 = require(\"./GenerateStructsForConstants\"),\n    generateStructsForConstants = _require2.generateStructsForConstants;\n\nvar template = \"\\n::_CONSTANTS_::::_STRUCTS_::::_INLINES_::\\n\";\nvar structTemplate = \"\\nnamespace JS {\\n  namespace Native::_MODULE_NAME_:: {\\n    struct Spec::_STRUCT_NAME_:: {\\n      ::_STRUCT_PROPERTIES_::\\n\\n      Spec::_STRUCT_NAME_::(NSDictionary *const v) : _v(v) {}\\n    private:\\n      NSDictionary *_v;\\n    };\\n  }\\n}\\n\\n@interface RCTCxxConvert (Native::_MODULE_NAME_::_Spec::_STRUCT_NAME_::)\\n+ (RCTManagedPointer *)JS_Native::_MODULE_NAME_::_Spec::_STRUCT_NAME_:::(id)json;\\n@end\\n\";\nvar inlineTemplate = \"\\ninline ::_RETURN_TYPE_::JS::Native::_MODULE_NAME_::::Spec::_STRUCT_NAME_::::::_PROPERTY_NAME_::() const\\n{\\n  id const p = _v[@\\\"::_PROPERTY_NAME_::\\\"];\\n  return ::_RETURN_VALUE_::;\\n}\\n\";\n\nfunction getInlineMethodSignature(property, name) {\n  var typeAnnotation = property.typeAnnotation;\n\n  switch (typeAnnotation.type) {\n    case 'StringTypeAnnotation':\n      return \"NSString *\" + property.name + \"() const;\";\n\n    case 'NumberTypeAnnotation':\n    case 'FloatTypeAnnotation':\n    case 'Int32TypeAnnotation':\n      return \"double \" + property.name + \"() const;\";\n\n    case 'BooleanTypeAnnotation':\n      return \"bool \" + property.name + \"() const;\";\n\n    case 'ObjectTypeAnnotation':\n      return \"JS::Native::_MODULE_NAME_::::Spec\" + name + capitalizeFirstLetter(property.name) + \" \" + property.name + \"() const;\";\n\n    case 'GenericObjectTypeAnnotation':\n    case 'AnyTypeAnnotation':\n      return \"id<NSObject> \" + property.name + \"() const;\";\n\n    case 'ArrayTypeAnnotation':\n      return \"facebook::react::LazyVector<id<NSObject>> \" + property.name + \"() const;\";\n\n    case 'FunctionTypeAnnotation':\n    default:\n      throw new Error(\"Unknown prop type, found: \" + typeAnnotation.type + \"\\\"\");\n  }\n}\n\nfunction getInlineMethodImplementation(property, name) {\n  var typeAnnotation = property.typeAnnotation;\n\n  switch (typeAnnotation.type) {\n    case 'StringTypeAnnotation':\n      return inlineTemplate.replace(/::_RETURN_TYPE_::/, 'NSString *').replace(/::_RETURN_VALUE_::/, 'RCTBridgingToString(p)');\n\n    case 'NumberTypeAnnotation':\n    case 'FloatTypeAnnotation':\n    case 'Int32TypeAnnotation':\n      return inlineTemplate.replace(/::_RETURN_TYPE_::/, 'double ').replace(/::_RETURN_VALUE_::/, 'RCTBridgingToDouble(p)');\n\n    case 'BooleanTypeAnnotation':\n      return inlineTemplate.replace(/::_RETURN_TYPE_::/, 'bool ').replace(/::_RETURN_VALUE_::/, 'RCTBridgingToBool(p)');\n\n    case 'GenericObjectTypeAnnotation':\n    case 'AnyTypeAnnotation':\n      return inlineTemplate.replace(/::_RETURN_TYPE_::/, 'id<NSObject> ').replace(/::_RETURN_VALUE_::/, 'p');\n\n    case 'ObjectTypeAnnotation':\n      return inlineTemplate.replace(/::_RETURN_TYPE_::/, \"JS::Native::_MODULE_NAME_::::Spec\" + name + capitalizeFirstLetter(property.name) + \" \").replace(/::_RETURN_VALUE_::/, \"JS::Native::_MODULE_NAME_::::Spec\" + name + capitalizeFirstLetter(property.name) + \"(p)\");\n\n    case 'ArrayTypeAnnotation':\n      return inlineTemplate.replace(/::_RETURN_TYPE_::/, 'facebook::react::LazyVector<id<NSObject>> ').replace(/::_RETURN_VALUE_::/, 'RCTBridgingToVec(p, ^id<NSObject>(id itemValue_0) { return itemValue_0; })');\n\n    case 'FunctionTypeAnnotation':\n    default:\n      throw new Error(\"Unknown prop type, found: \" + typeAnnotation.type + \"\\\"\");\n  }\n}\n\nfunction translateObjectsForStructs(annotations) {\n  var flattenObjects = flatObjects(annotations);\n  var translatedInlineMethods = flattenObjects.reduce(function (acc, object) {\n    return acc.concat(object.properties.map(function (property) {\n      return getInlineMethodImplementation(property, object.name).replace(/::_PROPERTY_NAME_::/g, property.name).replace(/::_STRUCT_NAME_::/g, object.name);\n    }));\n  }, []).join('\\n');\n  var translatedStructs = flattenObjects.map(function (object) {\n    return structTemplate.replace(/::_STRUCT_PROPERTIES_::/g, object.properties.map(function (property) {\n      return getInlineMethodSignature(property, object.name);\n    }).join('\\n      ')).replace(/::_STRUCT_NAME_::/g, object.name);\n  }).reverse().join('\\n');\n  var translatedConstants = generateStructsForConstants(annotations);\n  return template.replace(/::_STRUCTS_::/, translatedStructs).replace(/::_INLINES_::/, translatedInlineMethods).replace(/::_CONSTANTS_::/, translatedConstants);\n}\n\nmodule.exports = {\n  translateObjectsForStructs: translateObjectsForStructs,\n  capitalizeFirstLetter: capitalizeFirstLetter\n};","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/packages/react-native-codegen/src/generators/modules/ObjCppUtils/GenerateStructs.js"],"names":["require","flatObjects","capitalizeFirstLetter","generateStructsForConstants","template","structTemplate","inlineTemplate","getInlineMethodSignature","property","name","typeAnnotation","type","Error","getInlineMethodImplementation","replace","translateObjectsForStructs","annotations","flattenObjects","translatedInlineMethods","reduce","acc","object","concat","properties","map","join","translatedStructs","reverse","translatedConstants","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\n'use strict';\n\nimport type {ObjectParamTypeAnnotation} from '../../../CodegenSchema';\nconst {flatObjects, capitalizeFirstLetter} = require('./Utils');\nconst {generateStructsForConstants} = require('./GenerateStructsForConstants');\n\nconst template = `\n::_CONSTANTS_::::_STRUCTS_::::_INLINES_::\n`;\n\nconst structTemplate = `\nnamespace JS {\n  namespace Native::_MODULE_NAME_:: {\n    struct Spec::_STRUCT_NAME_:: {\n      ::_STRUCT_PROPERTIES_::\n\n      Spec::_STRUCT_NAME_::(NSDictionary *const v) : _v(v) {}\n    private:\n      NSDictionary *_v;\n    };\n  }\n}\n\n@interface RCTCxxConvert (Native::_MODULE_NAME_::_Spec::_STRUCT_NAME_::)\n+ (RCTManagedPointer *)JS_Native::_MODULE_NAME_::_Spec::_STRUCT_NAME_:::(id)json;\n@end\n`;\n\nconst inlineTemplate = `\ninline ::_RETURN_TYPE_::JS::Native::_MODULE_NAME_::::Spec::_STRUCT_NAME_::::::_PROPERTY_NAME_::() const\n{\n  id const p = _v[@\"::_PROPERTY_NAME_::\"];\n  return ::_RETURN_VALUE_::;\n}\n`;\n\nfunction getInlineMethodSignature(\n  property: ObjectParamTypeAnnotation,\n  name: string,\n): string {\n  const {typeAnnotation} = property;\n  switch (typeAnnotation.type) {\n    case 'StringTypeAnnotation':\n      return `NSString *${property.name}() const;`;\n    case 'NumberTypeAnnotation':\n    case 'FloatTypeAnnotation':\n    case 'Int32TypeAnnotation':\n      return `double ${property.name}() const;`;\n    case 'BooleanTypeAnnotation':\n      return `bool ${property.name}() const;`;\n    case 'ObjectTypeAnnotation':\n      return `JS::Native::_MODULE_NAME_::::Spec${name}${capitalizeFirstLetter(\n        property.name,\n      )} ${property.name}() const;`;\n    case 'GenericObjectTypeAnnotation':\n    case 'AnyTypeAnnotation':\n      return `id<NSObject> ${property.name}() const;`;\n    case 'ArrayTypeAnnotation':\n      return `facebook::react::LazyVector<id<NSObject>> ${\n        property.name\n      }() const;`;\n    case 'FunctionTypeAnnotation':\n    default:\n      throw new Error(`Unknown prop type, found: ${typeAnnotation.type}\"`);\n  }\n}\n\nfunction getInlineMethodImplementation(\n  property: ObjectParamTypeAnnotation,\n  name: string,\n): string {\n  const {typeAnnotation} = property;\n  switch (typeAnnotation.type) {\n    case 'StringTypeAnnotation':\n      return inlineTemplate\n        .replace(/::_RETURN_TYPE_::/, 'NSString *')\n        .replace(/::_RETURN_VALUE_::/, 'RCTBridgingToString(p)');\n    case 'NumberTypeAnnotation':\n    case 'FloatTypeAnnotation':\n    case 'Int32TypeAnnotation':\n      return inlineTemplate\n        .replace(/::_RETURN_TYPE_::/, 'double ')\n        .replace(/::_RETURN_VALUE_::/, 'RCTBridgingToDouble(p)');\n    case 'BooleanTypeAnnotation':\n      return inlineTemplate\n        .replace(/::_RETURN_TYPE_::/, 'bool ')\n        .replace(/::_RETURN_VALUE_::/, 'RCTBridgingToBool(p)');\n    case 'GenericObjectTypeAnnotation':\n    case 'AnyTypeAnnotation':\n      return inlineTemplate\n        .replace(/::_RETURN_TYPE_::/, 'id<NSObject> ')\n        .replace(/::_RETURN_VALUE_::/, 'p');\n    case 'ObjectTypeAnnotation':\n      return inlineTemplate\n        .replace(\n          /::_RETURN_TYPE_::/,\n          `JS::Native::_MODULE_NAME_::::Spec${name}${capitalizeFirstLetter(\n            property.name,\n          )} `,\n        )\n        .replace(\n          /::_RETURN_VALUE_::/,\n          `JS::Native::_MODULE_NAME_::::Spec${name}${capitalizeFirstLetter(\n            property.name,\n          )}(p)`,\n        );\n    case 'ArrayTypeAnnotation':\n      return inlineTemplate\n        .replace(\n          /::_RETURN_TYPE_::/,\n          'facebook::react::LazyVector<id<NSObject>> ',\n        )\n        .replace(\n          /::_RETURN_VALUE_::/,\n          'RCTBridgingToVec(p, ^id<NSObject>(id itemValue_0) { return itemValue_0; })',\n        );\n    case 'FunctionTypeAnnotation':\n    default:\n      throw new Error(`Unknown prop type, found: ${typeAnnotation.type}\"`);\n  }\n}\n\nfunction translateObjectsForStructs(\n  annotations: $ReadOnlyArray<\n    $ReadOnly<{|\n      name: string,\n      object: $ReadOnly<{|\n        type: 'ObjectTypeAnnotation',\n        properties: $ReadOnlyArray<ObjectParamTypeAnnotation>,\n      |}>,\n    |}>,\n  >,\n): string {\n  const flattenObjects = flatObjects(annotations);\n\n  const translatedInlineMethods = flattenObjects\n    .reduce(\n      (acc, object) =>\n        acc.concat(\n          object.properties.map(property =>\n            getInlineMethodImplementation(property, object.name)\n              .replace(/::_PROPERTY_NAME_::/g, property.name)\n              .replace(/::_STRUCT_NAME_::/g, object.name),\n          ),\n        ),\n      [],\n    )\n    .join('\\n');\n\n  const translatedStructs = flattenObjects\n    .map(object =>\n      structTemplate\n        .replace(\n          /::_STRUCT_PROPERTIES_::/g,\n          object.properties\n            .map(property => getInlineMethodSignature(property, object.name))\n            .join('\\n      '),\n        )\n        .replace(/::_STRUCT_NAME_::/g, object.name),\n    )\n    .reverse()\n    .join('\\n');\n\n  const translatedConstants = generateStructsForConstants(annotations);\n\n  return template\n    .replace(/::_STRUCTS_::/, translatedStructs)\n    .replace(/::_INLINES_::/, translatedInlineMethods)\n    .replace(/::_CONSTANTS_::/, translatedConstants);\n}\nmodule.exports = {\n  translateObjectsForStructs,\n  capitalizeFirstLetter,\n};\n"]},"metadata":{},"sourceType":"script"}