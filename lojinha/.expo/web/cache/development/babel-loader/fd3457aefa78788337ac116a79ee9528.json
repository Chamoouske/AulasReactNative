{"ast":null,"code":"'use strict';\n\nvar wd = require('wd');\n\nvar path = require('path');\n\nvar fs = require('fs');\n\nvar pd = require('pretty-data2').pd;\n\nrequire('colors');\n\nvar appiumDebugInterval = process.env.APPIUM_DEBUG_INTERVAL;\ndescribe('Android Test App', function () {\n  this.timeout(600000);\n  var driver;\n  var debugIntervalId;\n  before(function () {\n    driver = wd.promiseChainRemote({\n      host: 'localhost',\n      port: 4723\n    });\n    driver.on('status', function (info) {\n      console.log(info.cyan);\n    });\n    driver.on('command', function (method, command, data) {\n      if (command === 'source()' && data) {\n        console.log(' > ' + method.yellow, 'Screen contents'.grey, '\\n', pd.xml(data).yellow);\n      } else {\n        console.log(' > ' + method.yellow, command.grey, data || '');\n      }\n    });\n    driver.on('http', function (method, urlPath, data) {\n      console.log(' > ' + method.magenta, urlPath, (data || '').grey);\n    });\n\n    if (appiumDebugInterval) {\n      debugIntervalId = setInterval(function () {\n        driver.source();\n      }, appiumDebugInterval);\n    }\n\n    var desired = {\n      platformName: 'Android',\n      deviceName: 'Android Emulator',\n      app: path.resolve('android/app/build/outputs/apk/debug/app-debug.apk')\n    };\n    return driver.init(desired).setImplicitWaitTimeout(5000).waitForElementByXPath('//android.widget.Button[@text=\"Reload JS\"]').then(function (elem) {\n      elem.click();\n      driver.sleep(2000);\n    }, function (err) {});\n  });\n  after(function () {\n    if (debugIntervalId) {\n      clearInterval(debugIntervalId);\n    }\n\n    return driver.quit();\n  });\n  it('should display new content after a refresh', function () {\n    var androidAppCode = fs.readFileSync('App.js', 'utf-8');\n    var intervalToUpdate;\n    return driver.waitForElementByXPath('//android.widget.TextView[starts-with(@text, \"Welcome to React\")]').then(function () {\n      fs.writeFileSync('App.js', androidAppCode.replace('Step One', 'Step 1'), 'utf-8');\n    }).sleep(1000).pressDeviceKey(46).pressDeviceKey(46).sleep(2000).waitForElementByXPath('//android.widget.TextView[starts-with(@text, \"Step 1\")]').finally(function () {\n      clearInterval(intervalToUpdate);\n      fs.writeFileSync('App.js', androidAppCode, 'utf-8');\n      driver.pressDeviceKey(46).pressDeviceKey(46).sleep(2000);\n    });\n  });\n  it('should have the menu available', function () {\n    return driver.waitForElementByXPath('//android.widget.TextView[starts-with(@text, \"Welcome to React\")]').pressDeviceKey(82).waitForElementByXPath('//android.widget.TextView[starts-with(@text, \"Toggle Inspector\")]');\n  });\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/scripts/android-e2e-test.js"],"names":["wd","require","path","fs","pd","appiumDebugInterval","process","env","APPIUM_DEBUG_INTERVAL","describe","timeout","driver","debugIntervalId","before","promiseChainRemote","host","port","on","info","console","log","cyan","method","command","data","yellow","grey","xml","urlPath","magenta","setInterval","source","desired","platformName","deviceName","app","resolve","init","setImplicitWaitTimeout","waitForElementByXPath","then","elem","click","sleep","err","after","clearInterval","quit","it","androidAppCode","readFileSync","intervalToUpdate","writeFileSync","replace","pressDeviceKey","finally"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\n// Used in run-ci-e2e-test.js and executed in Circle CI.\n//\n// E2e test that verifies that init app can be installed, compiled, started and\n// Hot Module reloading and Chrome debugging work.\n//\n// For other examples of appium refer to:\n// https://github.com/appium/sample-code/tree/master/sample-code/examples/node and\n// https://www.npmjs.com/package/wd-android\n//\n// To set up:\n// - npm install --save-dev appium@1.11.1 mocha@2.4.5 wd@1.11.1 colors@1.0.3 pretty-data2@0.40.1\n// - cp <this file> <to app installation path>\n// - keytool -genkey -v -keystore android/app/debug.keystore -storepass android -alias androiddebugkey -keypass android -keyalg RSA -keysize 2048 -validity 10000 -dname \"CN=Android Debug,O=Android,C=US\"\n//\n// To run this test:\n// - npm start\n// - node node_modules/.bin/appium\n// - (cd android && ./gradlew :app:copyDownloadableDepsToLibs)\n// - react-native run-android\n// - node ../node_modules/.bin/_mocha ../android-e2e-test.js\n\n/* eslint-env mocha */\n\n'use strict';\n\nconst wd = require('wd');\nconst path = require('path');\nconst fs = require('fs');\nconst pd = require('pretty-data2').pd;\nrequire('colors');\n// value in ms to print out screen contents, set this value in CI to debug if tests are failing\nconst appiumDebugInterval = process.env.APPIUM_DEBUG_INTERVAL;\n\ndescribe('Android Test App', function() {\n  this.timeout(600000);\n  let driver;\n  let debugIntervalId;\n\n  before(function() {\n    driver = wd.promiseChainRemote({\n      host: 'localhost',\n      port: 4723,\n    });\n    driver.on('status', function(info) {\n      console.log(info.cyan);\n    });\n    driver.on('command', function(method, command, data) {\n      if (command === 'source()' && data) {\n        console.log(\n          ' > ' + method.yellow,\n          'Screen contents'.grey,\n          '\\n',\n          pd.xml(data).yellow,\n        );\n      } else {\n        console.log(' > ' + method.yellow, command.grey, data || '');\n      }\n    });\n    driver.on('http', function(method, urlPath, data) {\n      console.log(' > ' + method.magenta, urlPath, (data || '').grey);\n    });\n\n    // every interval print what is on the screen\n    if (appiumDebugInterval) {\n      debugIntervalId = setInterval(() => {\n        // it driver.on('command') will log the screen contents\n        driver.source();\n      }, appiumDebugInterval);\n    }\n\n    const desired = {\n      platformName: 'Android',\n      deviceName: 'Android Emulator',\n      app: path.resolve('android/app/build/outputs/apk/debug/app-debug.apk'),\n    };\n\n    // React Native in dev mode often starts with Red Box \"Can't fibd variable __fbBatchedBridge...\"\n    // This is fixed by clicking Reload JS which will trigger a request to packager server\n    return driver\n      .init(desired)\n      .setImplicitWaitTimeout(5000)\n      .waitForElementByXPath('//android.widget.Button[@text=\"Reload JS\"]')\n      .then(\n        elem => {\n          elem.click();\n          driver.sleep(2000);\n        },\n        err => {\n          // ignoring if Reload JS button can't be located\n        },\n      );\n  });\n\n  after(function() {\n    if (debugIntervalId) {\n      clearInterval(debugIntervalId);\n    }\n    return driver.quit();\n  });\n\n  it('should display new content after a refresh', function() {\n    const androidAppCode = fs.readFileSync('App.js', 'utf-8');\n    let intervalToUpdate;\n    return (\n      driver\n        .waitForElementByXPath(\n          '//android.widget.TextView[starts-with(@text, \"Welcome to React\")]',\n        )\n        .then(() => {\n          fs.writeFileSync(\n            'App.js',\n            androidAppCode.replace('Step One', 'Step 1'),\n            'utf-8',\n          );\n        })\n        .sleep(1000)\n        // http://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_MENU\n        .pressDeviceKey(46)\n        .pressDeviceKey(46)\n        .sleep(2000)\n        .waitForElementByXPath(\n          '//android.widget.TextView[starts-with(@text, \"Step 1\")]',\n        )\n        .finally(() => {\n          clearInterval(intervalToUpdate);\n          fs.writeFileSync('App.js', androidAppCode, 'utf-8');\n          driver\n            .pressDeviceKey(46)\n            .pressDeviceKey(46)\n            .sleep(2000);\n        })\n    );\n  });\n\n  it('should have the menu available', function() {\n    return (\n      driver\n        .waitForElementByXPath(\n          '//android.widget.TextView[starts-with(@text, \"Welcome to React\")]',\n        )\n        // http://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_MENU\n        .pressDeviceKey(82)\n        .waitForElementByXPath(\n          '//android.widget.TextView[starts-with(@text, \"Toggle Inspector\")]',\n        )\n    );\n  });\n});\n"]},"metadata":{},"sourceType":"script"}