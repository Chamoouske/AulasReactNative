{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport invariant from 'fbjs/lib/invariant';\nvar win = canUseDOM ? window : {\n  devicePixelRatio: undefined,\n  innerHeight: undefined,\n  innerWidth: undefined,\n  screen: {\n    height: undefined,\n    width: undefined\n  }\n};\nvar dimensions = {};\nvar listeners = {};\n\nvar Dimensions = function () {\n  function Dimensions() {\n    _classCallCheck(this, Dimensions);\n  }\n\n  _createClass(Dimensions, null, [{\n    key: \"get\",\n    value: function get(dimension) {\n      invariant(dimensions[dimension], \"No dimension set for key \" + dimension);\n      return dimensions[dimension];\n    }\n  }, {\n    key: \"set\",\n    value: function set(initialDimensions) {\n      if (initialDimensions) {\n        if (canUseDOM) {\n          invariant(false, 'Dimensions cannot be set in the browser');\n        } else {\n          dimensions.screen = initialDimensions.screen;\n          dimensions.window = initialDimensions.window;\n        }\n      }\n    }\n  }, {\n    key: \"_update\",\n    value: function _update() {\n      dimensions.window = {\n        fontScale: 1,\n        height: win.innerHeight,\n        scale: win.devicePixelRatio || 1,\n        width: win.innerWidth\n      };\n      dimensions.screen = {\n        fontScale: 1,\n        height: win.screen.height,\n        scale: win.devicePixelRatio || 1,\n        width: win.screen.width\n      };\n\n      if (Array.isArray(listeners['change'])) {\n        listeners['change'].forEach(function (handler) {\n          return handler(dimensions);\n        });\n      }\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(type, handler) {\n      listeners[type] = listeners[type] || [];\n      listeners[type].push(handler);\n    }\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(type, handler) {\n      if (Array.isArray(listeners[type])) {\n        listeners[type] = listeners[type].filter(function (_handler) {\n          return _handler !== handler;\n        });\n      }\n    }\n  }]);\n\n  return Dimensions;\n}();\n\nexport { Dimensions as default };\n\nDimensions._update();\n\nif (canUseDOM) {\n  window.addEventListener('resize', Dimensions._update, false);\n}","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native-web/src/exports/Dimensions/index.js"],"names":["canUseDOM","invariant","win","window","devicePixelRatio","undefined","innerHeight","innerWidth","screen","height","width","dimensions","listeners","Dimensions","dimension","initialDimensions","fontScale","scale","Array","isArray","forEach","handler","type","push","filter","_handler","_update","addEventListener"],"mappings":";;AAUA,SAASA,SAAT,QAA0B,+BAA1B;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AAkBA,IAAMC,GAAG,GAAGF,SAAS,GACjBG,MADiB,GAEjB;AACEC,EAAAA,gBAAgB,EAAEC,SADpB;AAEEC,EAAAA,WAAW,EAAGD,SAFhB;AAGEE,EAAAA,UAAU,EAAGF,SAHf;AAIEG,EAAAA,MAAM,EAAE;AACNC,IAAAA,MAAM,EAAGJ,SADH;AAENK,IAAAA,KAAK,EAAGL;AAFF;AAJV,CAFJ;AAYA,IAAMM,UAAU,GAAG,EAAnB;AACA,IAAMC,SAAS,GAAG,EAAlB;;IAEqBC,U;;;;;;;WACnB,aAAWC,SAAX,EAAoD;AAClDb,MAAAA,SAAS,CAACU,UAAU,CAACG,SAAD,CAAX,gCAAoDA,SAApD,CAAT;AACA,aAAOH,UAAU,CAACG,SAAD,CAAjB;AACD;;;WAED,aAAWC,iBAAX,EAAsD;AACpD,UAAIA,iBAAJ,EAAuB;AACrB,YAAIf,SAAJ,EAAe;AACbC,UAAAA,SAAS,CAAC,KAAD,EAAQ,yCAAR,CAAT;AACD,SAFD,MAEO;AACLU,UAAAA,UAAU,CAACH,MAAX,GAAoBO,iBAAiB,CAACP,MAAtC;AACAG,UAAAA,UAAU,CAACR,MAAX,GAAoBY,iBAAiB,CAACZ,MAAtC;AACD;AACF;AACF;;;WAED,mBAAiB;AACfQ,MAAAA,UAAU,CAACR,MAAX,GAAoB;AAClBa,QAAAA,SAAS,EAAE,CADO;AAElBP,QAAAA,MAAM,EAAEP,GAAG,CAACI,WAFM;AAGlBW,QAAAA,KAAK,EAAEf,GAAG,CAACE,gBAAJ,IAAwB,CAHb;AAIlBM,QAAAA,KAAK,EAAER,GAAG,CAACK;AAJO,OAApB;AAOAI,MAAAA,UAAU,CAACH,MAAX,GAAoB;AAClBQ,QAAAA,SAAS,EAAE,CADO;AAElBP,QAAAA,MAAM,EAAEP,GAAG,CAACM,MAAJ,CAAWC,MAFD;AAGlBQ,QAAAA,KAAK,EAAEf,GAAG,CAACE,gBAAJ,IAAwB,CAHb;AAIlBM,QAAAA,KAAK,EAAER,GAAG,CAACM,MAAJ,CAAWE;AAJA,OAApB;;AAOA,UAAIQ,KAAK,CAACC,OAAN,CAAcP,SAAS,CAAC,QAAD,CAAvB,CAAJ,EAAwC;AACtCA,QAAAA,SAAS,CAAC,QAAD,CAAT,CAAoBQ,OAApB,CAA4B,UAAAC,OAAO;AAAA,iBAAIA,OAAO,CAACV,UAAD,CAAX;AAAA,SAAnC;AACD;AACF;;;WAED,0BACEW,IADF,EAEED,OAFF,EAGQ;AACNT,MAAAA,SAAS,CAACU,IAAD,CAAT,GAAkBV,SAAS,CAACU,IAAD,CAAT,IAAmB,EAArC;AACAV,MAAAA,SAAS,CAACU,IAAD,CAAT,CAAgBC,IAAhB,CAAqBF,OAArB;AACD;;;WAED,6BACEC,IADF,EAEED,OAFF,EAGQ;AACN,UAAIH,KAAK,CAACC,OAAN,CAAcP,SAAS,CAACU,IAAD,CAAvB,CAAJ,EAAoC;AAClCV,QAAAA,SAAS,CAACU,IAAD,CAAT,GAAkBV,SAAS,CAACU,IAAD,CAAT,CAAgBE,MAAhB,CAAuB,UAAAC,QAAQ;AAAA,iBAAIA,QAAQ,KAAKJ,OAAjB;AAAA,SAA/B,CAAlB;AACD;AACF;;;;;;SApDkBR,U;;AAuDrBA,UAAU,CAACa,OAAX;;AAEA,IAAI1B,SAAJ,EAAe;AACbG,EAAAA,MAAM,CAACwB,gBAAP,CAAwB,QAAxB,EAAkCd,UAAU,CAACa,OAA7C,EAAsD,KAAtD;AACD","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport invariant from 'fbjs/lib/invariant';\n\nexport type DisplayMetrics = {|\n  fontScale: number,\n  height: number,\n  scale: number,\n  width: number\n|};\n\ntype DimensionsValue = {|\n  window?: DisplayMetrics,\n  screen?: DisplayMetrics\n|};\n\ntype DimensionKey = 'window' | 'screen';\n\ntype DimensionEventListenerType = 'change';\n\nconst win = canUseDOM\n  ? window\n  : {\n      devicePixelRatio: undefined,\n      innerHeight: (undefined: any),\n      innerWidth: (undefined: any),\n      screen: {\n        height: (undefined: any),\n        width: (undefined: any)\n      }\n    };\n\nconst dimensions = {};\nconst listeners = {};\n\nexport default class Dimensions {\n  static get(dimension: DimensionKey): DisplayMetrics {\n    invariant(dimensions[dimension], `No dimension set for key ${dimension}`);\n    return dimensions[dimension];\n  }\n\n  static set(initialDimensions: ?DimensionsValue): void {\n    if (initialDimensions) {\n      if (canUseDOM) {\n        invariant(false, 'Dimensions cannot be set in the browser');\n      } else {\n        dimensions.screen = initialDimensions.screen;\n        dimensions.window = initialDimensions.window;\n      }\n    }\n  }\n\n  static _update() {\n    dimensions.window = {\n      fontScale: 1,\n      height: win.innerHeight,\n      scale: win.devicePixelRatio || 1,\n      width: win.innerWidth\n    };\n\n    dimensions.screen = {\n      fontScale: 1,\n      height: win.screen.height,\n      scale: win.devicePixelRatio || 1,\n      width: win.screen.width\n    };\n\n    if (Array.isArray(listeners['change'])) {\n      listeners['change'].forEach(handler => handler(dimensions));\n    }\n  }\n\n  static addEventListener(\n    type: DimensionEventListenerType,\n    handler: DimensionsValue => void\n  ): void {\n    listeners[type] = listeners[type] || [];\n    listeners[type].push(handler);\n  }\n\n  static removeEventListener(\n    type: DimensionEventListenerType,\n    handler: DimensionsValue => void\n  ): void {\n    if (Array.isArray(listeners[type])) {\n      listeners[type] = listeners[type].filter(_handler => _handler !== handler);\n    }\n  }\n}\n\nDimensions._update();\n\nif (canUseDOM) {\n  window.addEventListener('resize', Dimensions._update, false);\n}\n"]},"metadata":{},"sourceType":"module"}