{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nvar _jsxFileName = \"/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/RNTester/js/examples/RefreshControl/RefreshControlExample.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar React = require('react');\n\nvar ScrollView = require(\"react-native-web/dist/exports/ScrollView\").default;\n\nvar StyleSheet = require(\"react-native-web/dist/exports/StyleSheet\").default;\n\nvar RefreshControl = require(\"react-native-web/dist/exports/RefreshControl\").default;\n\nvar Text = require(\"react-native-web/dist/exports/Text\").default;\n\nvar TouchableWithoutFeedback = require(\"react-native-web/dist/exports/TouchableWithoutFeedback\").default;\n\nvar View = require(\"react-native-web/dist/exports/View\").default;\n\nvar styles = StyleSheet.create({\n  row: {\n    borderColor: 'grey',\n    borderWidth: 1,\n    padding: 20,\n    backgroundColor: '#3a5795',\n    margin: 5\n  },\n  text: {\n    alignSelf: 'center',\n    color: '#fff'\n  },\n  scrollview: {\n    flex: 1\n  }\n});\n\nvar Row = function (_React$Component) {\n  _inherits(Row, _React$Component);\n\n  var _super = _createSuper(Row);\n\n  function Row() {\n    var _this;\n\n    _classCallCheck(this, Row);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this._onClick = function () {\n      _this.props.onClick(_this.props.data);\n    };\n\n    return _this;\n  }\n\n  _createClass(Row, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(TouchableWithoutFeedback, {\n        onPress: this._onClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 7\n        }\n      }, React.createElement(View, {\n        style: styles.row,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 9\n        }\n      }, React.createElement(Text, {\n        style: styles.text,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }\n      }, this.props.data.text + ' (' + this.props.data.clicks + ' clicks)')));\n    }\n  }]);\n\n  return Row;\n}(React.Component);\n\nvar RefreshControlExample = function (_React$Component2) {\n  _inherits(RefreshControlExample, _React$Component2);\n\n  var _super2 = _createSuper(RefreshControlExample);\n\n  function RefreshControlExample() {\n    var _this2;\n\n    _classCallCheck(this, RefreshControlExample);\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    _this2 = _super2.call.apply(_super2, [this].concat(args));\n    _this2.state = {\n      isRefreshing: false,\n      loaded: 0,\n      rowData: Array.from(new Array(20)).map(function (val, i) {\n        return {\n          text: 'Initial row ' + i,\n          clicks: 0\n        };\n      })\n    };\n\n    _this2._onClick = function (row) {\n      row.clicks++;\n\n      _this2.setState({\n        rowData: _this2.state.rowData\n      });\n    };\n\n    _this2._onRefresh = function () {\n      _this2.setState({\n        isRefreshing: true\n      });\n\n      setTimeout(function () {\n        var rowData = Array.from(new Array(10)).map(function (val, i) {\n          return {\n            text: 'Loaded row ' + (+_this2.state.loaded + i),\n            clicks: 0\n          };\n        }).concat(_this2.state.rowData);\n\n        _this2.setState({\n          loaded: _this2.state.loaded + 10,\n          isRefreshing: false,\n          rowData: rowData\n        });\n      }, 5000);\n    };\n\n    return _this2;\n  }\n\n  _createClass(RefreshControlExample, [{\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var rows = this.state.rowData.map(function (row, ii) {\n        return React.createElement(Row, {\n          key: ii,\n          data: row,\n          onClick: _this3._onClick,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 14\n          }\n        });\n      });\n      return React.createElement(ScrollView, {\n        style: styles.scrollview,\n        refreshControl: React.createElement(RefreshControl, {\n          refreshing: this.state.isRefreshing,\n          onRefresh: this._onRefresh,\n          tintColor: \"#ff0000\",\n          title: \"Loading...\",\n          titleColor: \"#00ff00\",\n          colors: ['#ff0000', '#00ff00', '#0000ff'],\n          progressBackgroundColor: \"#ffff00\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 11\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 7\n        }\n      }, rows);\n    }\n  }]);\n\n  return RefreshControlExample;\n}(React.Component);\n\nexports.title = '<RefreshControl>';\nexports.description = 'Adds pull-to-refresh support to a scrollview.';\nexports.simpleExampleContainer = true;\nexports.examples = [{\n  title: 'Simple refresh',\n  render: function render() {\n    return React.createElement(RefreshControlExample, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 14\n      }\n    });\n  }\n}];","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/RNTester/js/examples/RefreshControl/RefreshControlExample.js"],"names":["React","require","styles","StyleSheet","create","row","borderColor","borderWidth","padding","backgroundColor","margin","text","alignSelf","color","scrollview","flex","Row","_onClick","props","onClick","data","clicks","Component","RefreshControlExample","state","isRefreshing","loaded","rowData","Array","from","map","val","i","setState","_onRefresh","setTimeout","concat","rows","ii","exports","title","description","simpleExampleContainer","examples","render"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\n'use strict';\n\nconst React = require('react');\nconst {\n  ScrollView,\n  StyleSheet,\n  RefreshControl,\n  Text,\n  TouchableWithoutFeedback,\n  View,\n} = require('react-native');\n\nconst styles = StyleSheet.create({\n  row: {\n    borderColor: 'grey',\n    borderWidth: 1,\n    padding: 20,\n    backgroundColor: '#3a5795',\n    margin: 5,\n  },\n  text: {\n    alignSelf: 'center',\n    color: '#fff',\n  },\n  scrollview: {\n    flex: 1,\n  },\n});\n\nclass Row extends React.Component {\n  _onClick = () => {\n    this.props.onClick(this.props.data);\n  };\n\n  render() {\n    return (\n      <TouchableWithoutFeedback onPress={this._onClick}>\n        <View style={styles.row}>\n          <Text style={styles.text}>\n            {this.props.data.text + ' (' + this.props.data.clicks + ' clicks)'}\n          </Text>\n        </View>\n      </TouchableWithoutFeedback>\n    );\n  }\n}\n\nclass RefreshControlExample extends React.Component {\n  state = {\n    isRefreshing: false,\n    loaded: 0,\n    rowData: Array.from(new Array(20)).map((val, i) => ({\n      text: 'Initial row ' + i,\n      clicks: 0,\n    })),\n  };\n\n  _onClick = row => {\n    row.clicks++;\n    this.setState({\n      rowData: this.state.rowData,\n    });\n  };\n\n  render() {\n    const rows = this.state.rowData.map((row, ii) => {\n      return <Row key={ii} data={row} onClick={this._onClick} />;\n    });\n    return (\n      <ScrollView\n        style={styles.scrollview}\n        refreshControl={\n          <RefreshControl\n            refreshing={this.state.isRefreshing}\n            onRefresh={this._onRefresh}\n            tintColor=\"#ff0000\"\n            title=\"Loading...\"\n            titleColor=\"#00ff00\"\n            colors={['#ff0000', '#00ff00', '#0000ff']}\n            progressBackgroundColor=\"#ffff00\"\n          />\n        }>\n        {rows}\n      </ScrollView>\n    );\n  }\n\n  _onRefresh = () => {\n    this.setState({isRefreshing: true});\n    setTimeout(() => {\n      // prepend 10 items\n      const rowData = Array.from(new Array(10))\n        .map((val, i) => ({\n          text: 'Loaded row ' + (+this.state.loaded + i),\n          clicks: 0,\n        }))\n        .concat(this.state.rowData);\n\n      this.setState({\n        loaded: this.state.loaded + 10,\n        isRefreshing: false,\n        rowData: rowData,\n      });\n    }, 5000);\n  };\n}\n\nexports.title = '<RefreshControl>';\nexports.description = 'Adds pull-to-refresh support to a scrollview.';\nexports.simpleExampleContainer = true;\nexports.examples = [\n  {\n    title: 'Simple refresh',\n    render: function(): React.Element<typeof RefreshControlExample> {\n      return <RefreshControlExample />;\n    },\n  },\n];\n"]},"metadata":{},"sourceType":"script"}