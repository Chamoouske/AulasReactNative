{"ast":null,"code":"'use strict';\n\nfunction capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nfunction flatObjects(annotations) {\n  var forConstants = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var objectTypesToFlatten = annotations.map(function (annotation) {\n    return {\n      name: annotation.name,\n      properties: annotation.object.properties\n    };\n  }).filter(function (annotation) {\n    return annotation.name === 'GetConstantsReturnType' === forConstants;\n  }).filter(function (annotation) {\n    return annotation.name !== 'GetConstantsReturnType' || annotation.properties.length > 0;\n  });\n  var flattenObjects = [];\n\n  while (objectTypesToFlatten.length !== 0) {\n    var oldObjectTypesToFlatten = objectTypesToFlatten;\n    objectTypesToFlatten = [];\n    flattenObjects = flattenObjects.concat(oldObjectTypesToFlatten.map(function (object) {\n      var properties = object.properties;\n\n      if (properties !== undefined) {\n        objectTypesToFlatten = objectTypesToFlatten.concat(properties.reduce(function (acc, curr) {\n          if (curr.typeAnnotation.type === 'ObjectTypeAnnotation' && curr.typeAnnotation.properties) {\n            return acc.concat({\n              properties: curr.typeAnnotation.properties,\n              name: object.name + capitalizeFirstLetter(curr.name)\n            });\n          }\n\n          return acc;\n        }, []));\n      }\n\n      return object;\n    }));\n  }\n\n  return flattenObjects;\n}\n\nmodule.exports = {\n  flatObjects: flatObjects,\n  capitalizeFirstLetter: capitalizeFirstLetter\n};","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/packages/react-native-codegen/src/generators/modules/ObjCppUtils/Utils.js"],"names":["capitalizeFirstLetter","string","charAt","toUpperCase","slice","flatObjects","annotations","forConstants","objectTypesToFlatten","map","annotation","name","properties","object","filter","length","flattenObjects","oldObjectTypesToFlatten","concat","undefined","reduce","acc","curr","typeAnnotation","type","module","exports"],"mappings":"AAUA;;AAIA,SAASA,qBAAT,CAA+BC,MAA/B,EAAuD;AACrD,SAAOA,MAAM,CAACC,MAAP,CAAc,CAAd,EAAiBC,WAAjB,KAAiCF,MAAM,CAACG,KAAP,CAAa,CAAb,CAAxC;AACD;;AAED,SAASC,WAAT,CACEC,WADF,EAgBE;AAAA,MANAC,YAMA,uEANwB,KAMxB;AACA,MAAIC,oBAGD,GAAGF,WAAW,CACdG,GADG,CACC,UAAAC,UAAU;AAAA,WAAK;AAClBC,MAAAA,IAAI,EAAED,UAAU,CAACC,IADC;AAElBC,MAAAA,UAAU,EAAEF,UAAU,CAACG,MAAX,CAAkBD;AAFZ,KAAL;AAAA,GADX,EAKHE,MALG,CAMF,UAAAJ,UAAU;AAAA,WACPA,UAAU,CAACC,IAAX,KAAoB,wBAArB,KAAmDJ,YAD3C;AAAA,GANR,EASHO,MATG,CAUF,UAAAJ,UAAU;AAAA,WACRA,UAAU,CAACC,IAAX,KAAoB,wBAApB,IACAD,UAAU,CAACE,UAAX,CAAsBG,MAAtB,GAA+B,CAFvB;AAAA,GAVR,CAHN;AAkBA,MAAIC,cAGD,GAAG,EAHN;;AAKA,SAAOR,oBAAoB,CAACO,MAArB,KAAgC,CAAvC,EAA0C;AACxC,QAAME,uBAAuB,GAAGT,oBAAhC;AACAA,IAAAA,oBAAoB,GAAG,EAAvB;AACAQ,IAAAA,cAAc,GAAGA,cAAc,CAACE,MAAf,CACfD,uBAAuB,CAACR,GAAxB,CAA4B,UAAAI,MAAM,EAAI;AAAA,UAC7BD,UAD6B,GACfC,MADe,CAC7BD,UAD6B;;AAEpC,UAAIA,UAAU,KAAKO,SAAnB,EAA8B;AAC5BX,QAAAA,oBAAoB,GAAGA,oBAAoB,CAACU,MAArB,CACrBN,UAAU,CAACQ,MAAX,CAAkB,UAACC,GAAD,EAAMC,IAAN,EAAe;AAC/B,cACEA,IAAI,CAACC,cAAL,CAAoBC,IAApB,KAA6B,sBAA7B,IACAF,IAAI,CAACC,cAAL,CAAoBX,UAFtB,EAGE;AACA,mBAAOS,GAAG,CAACH,MAAJ,CAAW;AAChBN,cAAAA,UAAU,EAAEU,IAAI,CAACC,cAAL,CAAoBX,UADhB;AAEhBD,cAAAA,IAAI,EAAEE,MAAM,CAACF,IAAP,GAAcX,qBAAqB,CAACsB,IAAI,CAACX,IAAN;AAFzB,aAAX,CAAP;AAID;;AACD,iBAAOU,GAAP;AACD,SAXD,EAWG,EAXH,CADqB,CAAvB;AAcD;;AACD,aAAOR,MAAP;AACD,KAnBD,CADe,CAAjB;AAsBD;;AAED,SAAOG,cAAP;AACD;;AACDS,MAAM,CAACC,OAAP,GAAiB;AACfrB,EAAAA,WAAW,EAAXA,WADe;AAEfL,EAAAA,qBAAqB,EAArBA;AAFe,CAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\n'use strict';\n\nimport type {ObjectParamTypeAnnotation} from '../../../CodegenSchema';\n\nfunction capitalizeFirstLetter(string: string): string {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nfunction flatObjects(\n  annotations: $ReadOnlyArray<\n    $ReadOnly<{|\n      name: string,\n      object: $ReadOnly<{|\n        type: 'ObjectTypeAnnotation',\n        properties: $ReadOnlyArray<ObjectParamTypeAnnotation>,\n      |}>,\n    |}>,\n  >,\n  forConstants: boolean = false,\n): $ReadOnlyArray<\n  $ReadOnly<{|\n    name: string,\n    properties: $ReadOnlyArray<ObjectParamTypeAnnotation>,\n  |}>,\n> {\n  let objectTypesToFlatten: Array<{|\n    properties: $ReadOnlyArray<ObjectParamTypeAnnotation>,\n    name: string,\n  |}> = annotations\n    .map(annotation => ({\n      name: annotation.name,\n      properties: annotation.object.properties,\n    }))\n    .filter(\n      annotation =>\n        (annotation.name === 'GetConstantsReturnType') === forConstants,\n    )\n    .filter(\n      annotation =>\n        annotation.name !== 'GetConstantsReturnType' ||\n        annotation.properties.length > 0,\n    );\n\n  let flattenObjects: Array<{|\n    properties: $ReadOnlyArray<ObjectParamTypeAnnotation>,\n    name: string,\n  |}> = [];\n\n  while (objectTypesToFlatten.length !== 0) {\n    const oldObjectTypesToFlatten = objectTypesToFlatten;\n    objectTypesToFlatten = [];\n    flattenObjects = flattenObjects.concat(\n      oldObjectTypesToFlatten.map(object => {\n        const {properties} = object;\n        if (properties !== undefined) {\n          objectTypesToFlatten = objectTypesToFlatten.concat(\n            properties.reduce((acc, curr) => {\n              if (\n                curr.typeAnnotation.type === 'ObjectTypeAnnotation' &&\n                curr.typeAnnotation.properties\n              ) {\n                return acc.concat({\n                  properties: curr.typeAnnotation.properties,\n                  name: object.name + capitalizeFirstLetter(curr.name),\n                });\n              }\n              return acc;\n            }, []),\n          );\n        }\n        return object;\n      }),\n    );\n  }\n\n  return flattenObjects;\n}\nmodule.exports = {\n  flatObjects,\n  capitalizeFirstLetter,\n};\n"]},"metadata":{},"sourceType":"script"}