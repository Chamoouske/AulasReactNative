{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as ErrorRecovery from 'expo-error-recovery';\nimport * as React from 'react';\nimport Notifications from \"../Notifications/Notifications\";\nexport default function withExpoRoot(AppRootComponent) {\n  return function ExpoRoot(props) {\n    var didInitialize = React.useRef(false);\n\n    if (!didInitialize.current) {\n      var exp = props.exp;\n\n      if (exp.notification) {\n        Notifications._setInitialNotification(exp.notification);\n      }\n\n      didInitialize.current = true;\n    }\n\n    var combinedProps = _objectSpread(_objectSpread({}, props), {}, {\n      exp: _objectSpread(_objectSpread({}, props.exp), {}, {\n        errorRecovery: ErrorRecovery.recoveredProps\n      })\n    });\n\n    return React.createElement(AppRootComponent, _extends({}, combinedProps));\n  };\n}","map":{"version":3,"sources":["../../src/launch/withExpoRoot.tsx"],"names":[],"mappings":";;;;;;;AAAA,OAAO,KAAK,aAAZ,MAA+B,qBAA/B;AACA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AAEA,OAAO,aAAP;AAGA,eAAc,SAAU,YAAV,CACZ,gBADY,EAC4B;AAExC,SAAO,SAAS,QAAT,CAAkB,KAAlB,EAA0B;AAC/B,QAAM,aAAa,GAAG,KAAK,CAAC,MAAN,CAAa,KAAb,CAAtB;;AACA,QAAI,CAAC,aAAa,CAAC,OAAnB,EAA4B;AAAA,UAClB,GADkB,GACV,KADU,CAClB,GADkB;;AAE1B,UAAI,GAAG,CAAC,YAAR,EAAsB;AACpB,QAAA,aAAa,CAAC,uBAAd,CAAsC,GAAG,CAAC,YAA1C;AACD;;AAED,MAAA,aAAa,CAAC,OAAd,GAAwB,IAAxB;AACD;;AAED,QAAM,aAAa,mCACd,KADc;AAEjB,MAAA,GAAG,kCAAO,KAAK,CAAC,GAAb;AAAkB,QAAA,aAAa,EAAE,aAAa,CAAC;AAA/C;AAFc,MAAnB;;AAKA,WAAO,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAiB,SAAA,EAAA,EAAK,aAAL,CAAjB,CAAP;AACD,GAjBD;AAkBD","sourcesContent":["import * as ErrorRecovery from 'expo-error-recovery';\nimport * as React from 'react';\n\nimport Notifications from '../Notifications/Notifications';\nimport { InitialProps } from './withExpoRoot.types';\n\nexport default function withExpoRoot<P extends InitialProps>(\n  AppRootComponent: React.ComponentType<P>\n): React.ComponentType<P> {\n  return function ExpoRoot(props: P) {\n    const didInitialize = React.useRef(false);\n    if (!didInitialize.current) {\n      const { exp } = props;\n      if (exp.notification) {\n        Notifications._setInitialNotification(exp.notification);\n      }\n\n      didInitialize.current = true;\n    }\n\n    const combinedProps = {\n      ...props,\n      exp: { ...props.exp, errorRecovery: ErrorRecovery.recoveredProps },\n    };\n\n    return <AppRootComponent {...combinedProps} />;\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}