{"ast":null,"code":"","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["import { Color } from 'color-string';\nimport { NonPrimitiveAndNonArrayKeys, DeepRequired } from './types';\n/**\n * @param value Value to be checked.\n * @param availableValues Object storing all available options as values.\n */\nexport declare function validateEnumValue<T extends Record<string, string>>(value: string, availableValues: T): T[keyof T];\n/**\n * @param filePath Relative or absolute path to a file.\n * @returns Absolute path to the valid image file.\n */\nexport declare function validateFileIsPng(filePath: string): Promise<string>;\n/**\n * @param filePath Relative or absolute path to a file.\n * @returns Absolute path to the resolved file.\n */\nexport declare function validateFileExists(filePath: string): Promise<string>;\n/**\n * @param value Value to be checked.\n */\nexport declare function validateColor(value: string): Color;\nexport declare function generateValidateEnumValue<T extends Record<string, string>>(availableValues: T): (value: string) => T[keyof T];\nexport declare function ensurePropertyExists<T extends object, TK1 extends NonPrimitiveAndNonArrayKeys<DeepRequired<T>>, TK2 extends NonPrimitiveAndNonArrayKeys<DeepRequired<T>[TK1]>, TK3 extends NonPrimitiveAndNonArrayKeys<DeepRequired<T>[TK1][TK2]>>(object: T, propertyPath: [TK1] | [TK1, TK2] | [TK1, TK2, TK3]): void;\n"]},"metadata":{},"sourceType":"module"}