{"ast":null,"code":"'use strict';\n\nvar _extends = require(\"@babel/runtime/helpers/extends\");\n\nvar propertyHeaderTemplate = 'static jsi::Value __hostFunction_Native::_MODULE_NAME_::CxxSpecJSI_::_PROPERTY_NAME_::(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {';\nvar propertyCastTemplate = 'static_cast<Native::_MODULE_NAME_::CxxSpecJSI *>(&turboModule)->::_PROPERTY_NAME_::(rt::_ARGS_::);';\nvar nonvoidPropertyTemplate = (\"\\n\" + propertyHeaderTemplate + \"\\n  return \" + propertyCastTemplate + \"\\n}\").trim();\nvar voidPropertyTemplate = \"\\n\" + propertyHeaderTemplate + \"\\n  \" + propertyCastTemplate + \"\\n  return jsi::Value::undefined();\\n}\";\nvar proprertyDefTemplate = '  methodMap_[\"::_PROPERTY_NAME_::\"] = MethodMetadata {::_ARGS_COUNT_::, __hostFunction_Native::_MODULE_NAME_::CxxSpecJSI_::_PROPERTY_NAME_::};';\nvar moduleTemplate = \"\\n::_MODULE_PROPERTIES_::\\n\\nNative::_MODULE_NAME_::CxxSpecJSI::Native::_MODULE_NAME_::CxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker)\\n  : TurboModule(\\\"::_MODULE_NAME_::\\\", jsInvoker) {\\n::_PROPERTIES_MAP_::\\n}\".trim();\nvar template = \"\\n/**\\n * Copyright (c) Facebook, Inc. and its affiliates.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n */\\n\\n#include <react/modules/::_LIBRARY_NAME_::/NativeModules.h>\\n\\nnamespace facebook {\\nnamespace react {\\n\\n::_MODULES_::\\n\\n\\n} // namespace react\\n} // namespace facebook\\n\";\n\nfunction traverseArg(arg, index) {\n  function wrap(suffix) {\n    return \"args[\" + index + \"]\" + suffix;\n  }\n\n  var type = arg.typeAnnotation.type;\n\n  switch (type) {\n    case 'StringTypeAnnotation':\n      return wrap('.getString(rt)');\n\n    case 'BooleanTypeAnnotation':\n      return wrap('.getBool()');\n\n    case 'NumberTypeAnnotation':\n    case 'FloatTypeAnnotation':\n    case 'Int32TypeAnnotation':\n      return wrap('.getNumber()');\n\n    case 'ArrayTypeAnnotation':\n      return wrap('.getObject(rt).getArray(rt)');\n\n    case 'FunctionTypeAnnotation':\n      return \"std::move(\" + wrap('.getObject(rt).getFunction(rt)') + \")\";\n\n    case 'GenericObjectTypeAnnotation':\n    case 'ObjectTypeAnnotation':\n      return wrap('.getObject(rt)');\n\n    case 'AnyTypeAnnotation':\n      throw new Error(\"Any type is not allowed in params for \\\"\" + arg.name + \"\\\"\");\n\n    default:\n      type;\n      throw new Error(\"Unknown prop type for \\\"\" + arg.name + \", found: \" + type + \"\\\"\");\n  }\n}\n\nfunction traverseProprety(property) {\n  var propertyTemplate = property.typeAnnotation.returnTypeAnnotation.type === 'VoidTypeAnnotation' ? voidPropertyTemplate : nonvoidPropertyTemplate;\n  var traversedArgs = property.typeAnnotation.params.map(traverseArg).join(', ');\n  return propertyTemplate.replace(/::_PROPERTY_NAME_::/g, property.name).replace(/::_ARGS_::/g, traversedArgs === '' ? '' : ', ' + traversedArgs);\n}\n\nmodule.exports = {\n  generate: function generate(libraryName, schema, moduleSpecName) {\n    var nativeModules = Object.keys(schema.modules).map(function (moduleName) {\n      var modules = schema.modules[moduleName].nativeModules;\n\n      if (modules == null) {\n        return null;\n      }\n\n      return modules;\n    }).filter(Boolean).reduce(function (acc, modules) {\n      return _extends(acc, modules);\n    }, {});\n    var modules = Object.keys(nativeModules).map(function (name) {\n      var properties = nativeModules[name].properties;\n      var traversedProperties = properties.map(function (property) {\n        return traverseProprety(property);\n      }).join('\\n');\n      return moduleTemplate.replace(/::_MODULE_PROPERTIES_::/g, traversedProperties).replace('::_PROPERTIES_MAP_::', properties.map(function (_ref) {\n        var propertyName = _ref.name,\n            params = _ref.typeAnnotation.params;\n        return proprertyDefTemplate.replace(/::_PROPERTY_NAME_::/g, propertyName).replace(/::_ARGS_COUNT_::/g, params.length.toString());\n      }).join('\\n')).replace(/::_MODULE_NAME_::/g, name);\n    }).join('\\n');\n    var fileName = 'NativeModules.cpp';\n    var replacedTemplate = template.replace(/::_MODULES_::/g, modules).replace(/::_LIBRARY_NAME_::/g, libraryName);\n    return new Map([[fileName, replacedTemplate]]);\n  }\n};","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/packages/react-native-codegen/src/generators/modules/GenerateModuleCpp.js"],"names":["propertyHeaderTemplate","propertyCastTemplate","nonvoidPropertyTemplate","trim","voidPropertyTemplate","proprertyDefTemplate","moduleTemplate","template","traverseArg","arg","index","wrap","suffix","type","typeAnnotation","Error","name","traverseProprety","property","propertyTemplate","returnTypeAnnotation","traversedArgs","params","map","join","replace","module","exports","generate","libraryName","schema","moduleSpecName","nativeModules","Object","keys","modules","moduleName","filter","Boolean","reduce","acc","properties","traversedProperties","propertyName","length","toString","fileName","replacedTemplate","Map"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\n'use strict';\n\nimport type {SchemaType} from '../../CodegenSchema';\n\ntype FilesOutput = Map<string, string>;\n\nconst propertyHeaderTemplate =\n  'static jsi::Value __hostFunction_Native::_MODULE_NAME_::CxxSpecJSI_::_PROPERTY_NAME_::(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {';\n\nconst propertyCastTemplate =\n  'static_cast<Native::_MODULE_NAME_::CxxSpecJSI *>(&turboModule)->::_PROPERTY_NAME_::(rt::_ARGS_::);';\n\nconst nonvoidPropertyTemplate = `\n${propertyHeaderTemplate}\n  return ${propertyCastTemplate}\n}`.trim();\n\nconst voidPropertyTemplate = `\n${propertyHeaderTemplate}\n  ${propertyCastTemplate}\n  return jsi::Value::undefined();\n}`;\n\nconst proprertyDefTemplate =\n  '  methodMap_[\"::_PROPERTY_NAME_::\"] = MethodMetadata {::_ARGS_COUNT_::, __hostFunction_Native::_MODULE_NAME_::CxxSpecJSI_::_PROPERTY_NAME_::};';\n\nconst moduleTemplate = `\n::_MODULE_PROPERTIES_::\n\nNative::_MODULE_NAME_::CxxSpecJSI::Native::_MODULE_NAME_::CxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker)\n  : TurboModule(\"::_MODULE_NAME_::\", jsInvoker) {\n::_PROPERTIES_MAP_::\n}`.trim();\n\nconst template = `\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n#include <react/modules/::_LIBRARY_NAME_::/NativeModules.h>\n\nnamespace facebook {\nnamespace react {\n\n::_MODULES_::\n\n\n} // namespace react\n} // namespace facebook\n`;\n\nfunction traverseArg(arg, index): string {\n  function wrap(suffix) {\n    return `args[${index}]${suffix}`;\n  }\n  const type = arg.typeAnnotation.type;\n  switch (type) {\n    case 'StringTypeAnnotation':\n      return wrap('.getString(rt)');\n    case 'BooleanTypeAnnotation':\n      return wrap('.getBool()');\n    case 'NumberTypeAnnotation':\n    case 'FloatTypeAnnotation':\n    case 'Int32TypeAnnotation':\n      return wrap('.getNumber()');\n    case 'ArrayTypeAnnotation':\n      return wrap('.getObject(rt).getArray(rt)');\n    case 'FunctionTypeAnnotation':\n      return `std::move(${wrap('.getObject(rt).getFunction(rt)')})`;\n    case 'GenericObjectTypeAnnotation':\n    case 'ObjectTypeAnnotation':\n      return wrap('.getObject(rt)');\n    case 'AnyTypeAnnotation':\n      throw new Error(`Any type is not allowed in params for \"${arg.name}\"`);\n\n    default:\n      (type: empty);\n      throw new Error(`Unknown prop type for \"${arg.name}, found: ${type}\"`);\n  }\n}\n\nfunction traverseProprety(property): string {\n  const propertyTemplate =\n    property.typeAnnotation.returnTypeAnnotation.type === 'VoidTypeAnnotation'\n      ? voidPropertyTemplate\n      : nonvoidPropertyTemplate;\n  const traversedArgs = property.typeAnnotation.params\n    .map(traverseArg)\n    .join(', ');\n  return propertyTemplate\n    .replace(/::_PROPERTY_NAME_::/g, property.name)\n    .replace(/::_ARGS_::/g, traversedArgs === '' ? '' : ', ' + traversedArgs);\n}\n\nmodule.exports = {\n  generate(\n    libraryName: string,\n    schema: SchemaType,\n    moduleSpecName: string,\n  ): FilesOutput {\n    const nativeModules = Object.keys(schema.modules)\n      .map(moduleName => {\n        const modules = schema.modules[moduleName].nativeModules;\n        if (modules == null) {\n          return null;\n        }\n\n        return modules;\n      })\n      .filter(Boolean)\n      .reduce((acc, modules) => Object.assign(acc, modules), {});\n\n    const modules = Object.keys(nativeModules)\n      .map(name => {\n        const {properties} = nativeModules[name];\n        const traversedProperties = properties\n          .map(property => traverseProprety(property))\n          .join('\\n');\n        return moduleTemplate\n          .replace(/::_MODULE_PROPERTIES_::/g, traversedProperties)\n          .replace(\n            '::_PROPERTIES_MAP_::',\n            properties\n              .map(({name: propertyName, typeAnnotation: {params}}) =>\n                proprertyDefTemplate\n                  .replace(/::_PROPERTY_NAME_::/g, propertyName)\n                  .replace(/::_ARGS_COUNT_::/g, params.length.toString()),\n              )\n              .join('\\n'),\n          )\n          .replace(/::_MODULE_NAME_::/g, name);\n      })\n      .join('\\n');\n\n    const fileName = 'NativeModules.cpp';\n    const replacedTemplate = template\n      .replace(/::_MODULES_::/g, modules)\n      .replace(/::_LIBRARY_NAME_::/g, libraryName);\n    return new Map([[fileName, replacedTemplate]]);\n  },\n};\n"]},"metadata":{},"sourceType":"script"}