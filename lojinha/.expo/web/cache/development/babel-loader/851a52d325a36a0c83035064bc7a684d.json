{"ast":null,"code":"\"use strict\";\n\nvar _extends = require(\"@babel/runtime/helpers/extends\");\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ios_plugins_1 = require(\"../plugins/ios-plugins\");\n\nexports.withUsesNonExemptEncryption = ios_plugins_1.createInfoPlistPlugin(setUsesNonExemptEncryption, 'withUsesNonExemptEncryption');\n\nfunction getUsesNonExemptEncryption(config) {\n  var _a, _b, _c;\n\n  return (_c = (_b = (_a = config === null || config === void 0 ? void 0 : config.ios) === null || _a === void 0 ? void 0 : _a.config) === null || _b === void 0 ? void 0 : _b.usesNonExemptEncryption) !== null && _c !== void 0 ? _c : null;\n}\n\nexports.getUsesNonExemptEncryption = getUsesNonExemptEncryption;\n\nfunction setUsesNonExemptEncryption(config, _a) {\n  var ITSAppUsesNonExemptEncryption = _a.ITSAppUsesNonExemptEncryption,\n      infoPlist = __rest(_a, [\"ITSAppUsesNonExemptEncryption\"]);\n\n  var usesNonExemptEncryption = getUsesNonExemptEncryption(config);\n\n  if (usesNonExemptEncryption === null) {\n    return infoPlist;\n  }\n\n  return _extends(_extends({}, infoPlist), {\n    ITSAppUsesNonExemptEncryption: usesNonExemptEncryption\n  });\n}\n\nexports.setUsesNonExemptEncryption = setUsesNonExemptEncryption;","map":{"version":3,"sources":["../../src/ios/UsesNonExemptEncryption.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAEA,IAAA,aAAA,GAAA,OAAA,0BAAA;;AAGa,OAAA,CAAA,2BAAA,GAA8B,aAAA,CAAA,qBAAA,CACzC,0BADyC,EAEzC,6BAFyC,CAA9B;;AAKb,SAAgB,0BAAhB,CAA2C,MAA3C,EAA0E;;;AACxE,SAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAO,MAAM,KAAA,IAAN,IAAA,MAAM,KAAA,KAAA,CAAN,GAAM,KAAA,CAAN,GAAA,MAAM,CAAE,GAAf,MAAkB,IAAlB,IAAkB,EAAA,KAAA,KAAA,CAAlB,GAAkB,KAAA,CAAlB,GAAkB,EAAA,CAAE,MAApB,MAA0B,IAA1B,IAA0B,EAAA,KAAA,KAAA,CAA1B,GAA0B,KAAA,CAA1B,GAA0B,EAAA,CAAE,uBAA5B,MAAmD,IAAnD,IAAmD,EAAA,KAAA,KAAA,CAAnD,GAAmD,EAAnD,GAAuD,IAAvD;AACD;;AAFD,OAAA,CAAA,0BAAA,GAAA,0BAAA;;AAIA,SAAgB,0BAAhB,CACE,MADF,EAEE,EAFF,EAE4D;AAA1D,MAAE,6BAAF,GAA+B,EAA/B,CAAE,6BAAF;AAAA,MAAiC,SAAjC,GAAiC,MAAA,CAAA,EAAA,EAAA,CAAA,+BAAA,CAAA,CAAjC;;AAEA,MAAM,uBAAuB,GAAG,0BAA0B,CAAC,MAAD,CAA1D;;AAGA,MAAI,uBAAuB,KAAK,IAAhC,EAAsC;AACpC,WAAO,SAAP;AACD;;AAED,SAAA,SAAA,SAAA,EAAA,EACK,SADL,CAAA,EACc;AACZ,IAAA,6BAA6B,EAAE;AADnB,GADd,CAAA;AAID;;AAfD,OAAA,CAAA,0BAAA,GAAA,0BAAA","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { createInfoPlistPlugin } from '../plugins/ios-plugins';\nimport { InfoPlist } from './IosConfig.types';\n\nexport const withUsesNonExemptEncryption = createInfoPlistPlugin(\n  setUsesNonExemptEncryption,\n  'withUsesNonExemptEncryption'\n);\n\nexport function getUsesNonExemptEncryption(config: Pick<ExpoConfig, 'ios'>) {\n  return config?.ios?.config?.usesNonExemptEncryption ?? null;\n}\n\nexport function setUsesNonExemptEncryption(\n  config: Pick<ExpoConfig, 'ios'>,\n  { ITSAppUsesNonExemptEncryption, ...infoPlist }: InfoPlist\n): InfoPlist {\n  const usesNonExemptEncryption = getUsesNonExemptEncryption(config);\n\n  // Make no changes if the key is left blank\n  if (usesNonExemptEncryption === null) {\n    return infoPlist;\n  }\n\n  return {\n    ...infoPlist,\n    ITSAppUsesNonExemptEncryption: usesNonExemptEncryption,\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}