{"ast":null,"code":"\"use strict\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getGroup;\n\nvar getFirstProject = function getFirstProject(project) {\n  return project.getFirstProject().firstProject;\n};\n\nvar findGroup = function findGroup(groups, name) {\n  return groups.children.find(function (group) {\n    return group.comment === name;\n  });\n};\n\nfunction getGroup(project, path) {\n  var firstProject = getFirstProject(project);\n  var groups = project.getPBXGroupByKey(firstProject.mainGroup);\n\n  if (!path) {\n    return groups;\n  }\n\n  for (var _iterator = _createForOfIteratorHelperLoose(path.split('/')), _step; !(_step = _iterator()).done;) {\n    var name = _step.value;\n    var foundGroup = findGroup(groups, name);\n\n    if (foundGroup) {\n      groups = project.getPBXGroupByKey(foundGroup.value);\n    } else {\n      groups = null;\n      break;\n    }\n  }\n\n  return groups;\n}","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli-platform-ios/build/link/getGroup.js"],"names":["Object","defineProperty","exports","value","default","getGroup","getFirstProject","project","firstProject","findGroup","groups","name","children","find","group","comment","path","getPBXGroupByKey","mainGroup","split","foundGroup"],"mappings":"AAAA;;;;;;;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,QAAlB;;AASA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,OAAO;AAAA,SAAIA,OAAO,CAACD,eAAR,GAA0BE,YAA9B;AAAA,CAA/B;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,MAAD,EAASC,IAAT;AAAA,SAAkBD,MAAM,CAACE,QAAP,CAAgBC,IAAhB,CAAqB,UAAAC,KAAK;AAAA,WAAIA,KAAK,CAACC,OAAN,KAAkBJ,IAAtB;AAAA,GAA1B,CAAlB;AAAA,CAAlB;;AAWA,SAASN,QAAT,CAAkBE,OAAlB,EAA2BS,IAA3B,EAAiC;AAC/B,MAAMR,YAAY,GAAGF,eAAe,CAACC,OAAD,CAApC;AACA,MAAIG,MAAM,GAAGH,OAAO,CAACU,gBAAR,CAAyBT,YAAY,CAACU,SAAtC,CAAb;;AAEA,MAAI,CAACF,IAAL,EAAW;AACT,WAAON,MAAP;AACD;;AAED,uDAAmBM,IAAI,CAACG,KAAL,CAAW,GAAX,CAAnB,wCAAoC;AAAA,QAAzBR,IAAyB;AAClC,QAAMS,UAAU,GAAGX,SAAS,CAACC,MAAD,EAASC,IAAT,CAA5B;;AAEA,QAAIS,UAAJ,EAAgB;AACdV,MAAAA,MAAM,GAAGH,OAAO,CAACU,gBAAR,CAAyBG,UAAU,CAACjB,KAApC,CAAT;AACD,KAFD,MAEO;AACLO,MAAAA,MAAM,GAAG,IAAT;AACA;AACD;AACF;;AAED,SAAOA,MAAP;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getGroup;\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst getFirstProject = project => project.getFirstProject().firstProject;\n\nconst findGroup = (groups, name) => groups.children.find(group => group.comment === name);\n/**\n * Returns group from .xcodeproj if one exists, null otherwise\n *\n * Unlike node-xcode `pbxGroupByName` - it does not return `first-matching`\n * group if multiple groups with the same name exist\n *\n * If path is not provided, it returns top-level group\n */\n\n\nfunction getGroup(project, path) {\n  const firstProject = getFirstProject(project);\n  let groups = project.getPBXGroupByKey(firstProject.mainGroup);\n\n  if (!path) {\n    return groups;\n  }\n\n  for (const name of path.split('/')) {\n    const foundGroup = findGroup(groups, name);\n\n    if (foundGroup) {\n      groups = project.getPBXGroupByKey(foundGroup.value);\n    } else {\n      groups = null;\n      break;\n    }\n  }\n\n  return groups;\n}\n\n//# sourceMappingURL=getGroup.js.map"]},"metadata":{},"sourceType":"script"}