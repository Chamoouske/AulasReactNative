{"ast":null,"code":"","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nimport type {ElementRef, AbstractComponent} from 'react';\n\nexport type MeasureOnSuccessCallback = (\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  pageX: number,\n  pageY: number,\n) => void;\n\nexport type MeasureInWindowOnSuccessCallback = (\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n) => void;\n\nexport type MeasureLayoutOnSuccessCallback = (\n  left: number,\n  top: number,\n  width: number,\n  height: number,\n) => void;\n\ntype AttributeType =\n  | true\n  | $ReadOnly<{|\n      diff?: <T>(arg1: T, arg2: T) => boolean,\n      process?: (arg1: any) => any,\n    |}>;\n\nexport type AttributeConfiguration<\n  TProps = string,\n  TStyleProps = string,\n> = $ReadOnly<{\n  [propName: TProps]: AttributeType,\n  style: $ReadOnly<{[propName: TStyleProps]: AttributeType, ...}>,\n  ...\n}>;\n\nexport type ReactNativeBaseComponentViewConfig<\n  TProps = string,\n  TStyleProps = string,\n> = $ReadOnly<{|\n  baseModuleName?: string,\n  bubblingEventTypes?: $ReadOnly<{\n    [eventName: string]: $ReadOnly<{|\n      phasedRegistrationNames: $ReadOnly<{|\n        captured: string,\n        bubbled: string,\n      |}>,\n    |}>,\n    ...,\n  }>,\n  Commands?: $ReadOnly<{[commandName: string]: number, ...}>,\n  directEventTypes?: $ReadOnly<{\n    [eventName: string]: $ReadOnly<{|\n      registrationName: string,\n    |}>,\n    ...,\n  }>,\n  NativeProps?: $ReadOnly<{[propName: string]: string, ...}>,\n  uiViewClassName: string,\n  validAttributes: AttributeConfiguration<TProps, TStyleProps>,\n|}>;\n\nexport type ViewConfigGetter = () => ReactNativeBaseComponentViewConfig<>;\n\nexport type NativeMethods = {\n  blur(): void,\n  focus(): void,\n  measure(callback: MeasureOnSuccessCallback): void,\n  measureInWindow(callback: MeasureInWindowOnSuccessCallback): void,\n  measureLayout(\n    relativeToNativeNode: number | ElementRef<HostComponent<mixed>>,\n    onSuccess: MeasureLayoutOnSuccessCallback,\n    onFail?: () => void,\n  ): void,\n  setNativeProps(nativeProps: Object): void,\n  ...\n};\n\nexport type HostComponent<T> = AbstractComponent<T, $ReadOnly<NativeMethods>>;\n\ntype SecretInternalsType = {\n  computeComponentStackForErrorReporting(tag: number): string,\n  // TODO (bvaughn) Decide which additional types to expose here?\n  // And how much information to fill in for the above types.\n  ...\n};\n\ntype InspectorDataProps = $ReadOnly<{\n  [propName: string]: string,\n  ...,\n}>;\n\ntype InspectorDataSource = $ReadOnly<{|\n  fileName?: string,\n  lineNumber?: number,\n|}>;\n\ntype InspectorDataGetter = (\n  (componentOrHandle: any) => ?number,\n) => $ReadOnly<{|\n  measure: Function,\n  props: InspectorDataProps,\n  source: InspectorDataSource,\n|}>;\n\nexport type InspectorData = $ReadOnly<{|\n  hierarchy: Array<{|\n    name: ?string,\n    getInspectorData: InspectorDataGetter,\n  |}>,\n  selectedIndex: ?number,\n  props: InspectorDataProps,\n  source: ?InspectorDataSource,\n|}>;\n\nexport type TouchedViewDataAtPoint = $ReadOnly<{|\n  pointerY: number,\n  touchedViewTag?: number,\n  frame: $ReadOnly<{|\n    top: number,\n    left: number,\n    width: number,\n    height: number,\n  |}>,\n  ...InspectorData,\n|}>;\n\n/**\n * Flat ReactNative renderer bundles are too big for Flow to parse efficiently.\n * Provide minimal Flow typing for the high-level RN API and call it a day.\n */\nexport type ReactNativeType = {\n  findHostInstance_DEPRECATED(\n    componentOrHandle: any,\n  ): ?ElementRef<HostComponent<mixed>>,\n  findNodeHandle(componentOrHandle: any): ?number,\n  dispatchCommand(handle: any, command: string, args: Array<any>): void,\n  render(\n    element: React$Element<any>,\n    containerTag: any,\n    callback: ?Function,\n  ): any,\n  unmountComponentAtNode(containerTag: number): any,\n  unmountComponentAtNodeAndRemoveContainer(containerTag: number): any,\n  // TODO (bvaughn) Add types\n  unstable_batchedUpdates: any,\n  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: SecretInternalsType,\n  ...\n};\n\nexport type ReactFabricType = {\n  findHostInstance_DEPRECATED(\n    componentOrHandle: any,\n  ): ?ElementRef<HostComponent<mixed>>,\n  findNodeHandle(componentOrHandle: any): ?number,\n  dispatchCommand(handle: any, command: string, args: Array<any>): void,\n  render(\n    element: React$Element<any>,\n    containerTag: any,\n    callback: ?Function,\n  ): any,\n  unmountComponentAtNode(containerTag: number): any,\n  ...\n};\n\nexport type ReactNativeEventTarget = {\n  node: Object,\n  canonical: {\n    _nativeTag: number,\n    viewConfig: ReactNativeBaseComponentViewConfig<>,\n    currentProps: Object,\n    _internalInstanceHandle: Object,\n    ...\n  },\n  ...\n};\n\nexport type ReactFaricEventTouch = {\n  identifier: number,\n  locationX: number,\n  locationY: number,\n  pageX: number,\n  pageY: number,\n  screenX: number,\n  screenY: number,\n  target: number,\n  timestamp: number,\n  force: number,\n  ...\n};\n\nexport type ReactFaricEvent = {\n  touches: Array<ReactFaricEventTouch>,\n  changedTouches: Array<ReactFaricEventTouch>,\n  targetTouches: Array<ReactFaricEventTouch>,\n  target: number,\n  ...\n};\n"]},"metadata":{},"sourceType":"script"}