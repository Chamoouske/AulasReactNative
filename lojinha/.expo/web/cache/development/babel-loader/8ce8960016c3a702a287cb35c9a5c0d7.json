{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar fs_extra_1 = __importDefault(require(\"fs-extra\"));\n\nvar path_1 = __importDefault(require(\"path\"));\n\nvar SPLASH_SCREEN_FILENAME = 'splashscreen_image.png';\nvar DRAWABLES_CONFIGS = {\n  default: {\n    modes: {\n      light: {\n        path: \"./res/drawable/\" + SPLASH_SCREEN_FILENAME\n      },\n      dark: {\n        path: \"./res/drawable-night/\" + SPLASH_SCREEN_FILENAME\n      }\n    },\n    dimensionsMultiplier: 1\n  },\n  mdpi: {\n    modes: {\n      light: {\n        path: \"./res/drawable-mdpi/\" + SPLASH_SCREEN_FILENAME\n      },\n      dark: {\n        path: \"./res/drawable-night-mdpi/\" + SPLASH_SCREEN_FILENAME\n      }\n    },\n    dimensionsMultiplier: 1\n  },\n  hdpi: {\n    modes: {\n      light: {\n        path: \"./res/drawable-hdpi/\" + SPLASH_SCREEN_FILENAME\n      },\n      dark: {\n        path: \"./res/drawable-night-hdpi/\" + SPLASH_SCREEN_FILENAME\n      }\n    },\n    dimensionsMultiplier: 1.5\n  },\n  xhdpi: {\n    modes: {\n      light: {\n        path: \"./res/drawable-xhdpi/\" + SPLASH_SCREEN_FILENAME\n      },\n      dark: {\n        path: \"./res/drawable-night-xhdpi/\" + SPLASH_SCREEN_FILENAME\n      }\n    },\n    dimensionsMultiplier: 2\n  },\n  xxhdpi: {\n    modes: {\n      light: {\n        path: \"./res/drawable-xxhdpi/\" + SPLASH_SCREEN_FILENAME\n      },\n      dark: {\n        path: \"./res/drawable-night-xxhdpi/\" + SPLASH_SCREEN_FILENAME\n      }\n    },\n    dimensionsMultiplier: 3\n  },\n  xxxhdpi: {\n    modes: {\n      light: {\n        path: \"./res/drawable-xxxhdpi/\" + SPLASH_SCREEN_FILENAME\n      },\n      dark: {\n        path: \"./res/drawable-night-xxxhdpi/\" + SPLASH_SCREEN_FILENAME\n      }\n    },\n    dimensionsMultiplier: 4\n  }\n};\n\nfunction copyDrawableFile(srcPath, dstPath) {\n  return _regeneratorRuntime.async(function copyDrawableFile$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (srcPath) {\n            _context.next = 2;\n            break;\n          }\n\n          return _context.abrupt(\"return\");\n\n        case 2:\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(fs_extra_1.default.pathExists(path_1.default.dirname(dstPath)));\n\n        case 4:\n          if (_context.sent) {\n            _context.next = 7;\n            break;\n          }\n\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(fs_extra_1.default.mkdir(path_1.default.dirname(dstPath)));\n\n        case 7:\n          _context.next = 9;\n          return _regeneratorRuntime.awrap(fs_extra_1.default.copyFile(srcPath, path_1.default.resolve(dstPath)));\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction configureDrawables(androidMainPath) {\n  var config,\n      _a,\n      _args4 = arguments;\n\n  return _regeneratorRuntime.async(function configureDrawables$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          config = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};\n          _context4.next = 3;\n          return _regeneratorRuntime.awrap(Promise.all(Object.values(DRAWABLES_CONFIGS).map(function _callee2(_ref) {\n            var modes;\n            return _regeneratorRuntime.async(function _callee2$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    modes = _ref.modes;\n                    _context3.next = 3;\n                    return _regeneratorRuntime.awrap(Promise.all(Object.values(modes).map(function _callee(_ref2) {\n                      var filePath;\n                      return _regeneratorRuntime.async(function _callee$(_context2) {\n                        while (1) {\n                          switch (_context2.prev = _context2.next) {\n                            case 0:\n                              filePath = _ref2.path;\n                              _context2.next = 3;\n                              return _regeneratorRuntime.awrap(fs_extra_1.default.pathExists(path_1.default.resolve(androidMainPath, filePath)));\n\n                            case 3:\n                              if (!_context2.sent) {\n                                _context2.next = 6;\n                                break;\n                              }\n\n                              _context2.next = 6;\n                              return _regeneratorRuntime.awrap(fs_extra_1.default.remove(path_1.default.resolve(androidMainPath, filePath)));\n\n                            case 6:\n                            case \"end\":\n                              return _context2.stop();\n                          }\n                        }\n                      }, null, null, null, Promise);\n                    })));\n\n                  case 3:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          })));\n\n        case 3:\n          _context4.next = 5;\n          return _regeneratorRuntime.awrap(Promise.all([copyDrawableFile(config.image, path_1.default.resolve(androidMainPath, DRAWABLES_CONFIGS.default.modes.light.path)), copyDrawableFile((_a = config.darkMode) === null || _a === void 0 ? void 0 : _a.image, path_1.default.resolve(androidMainPath, DRAWABLES_CONFIGS.default.modes.dark.path))]));\n\n        case 5:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.default = configureDrawables;","map":{"version":3,"sources":["../../src/android/Drawables.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,IAAA,UAAA,GAAA,eAAA,CAAA,OAAA,CAAA,UAAA,CAAA,CAAA;;AACA,IAAA,MAAA,GAAA,eAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;AAEA,IAAM,sBAAsB,GAAG,wBAA/B;AAKA,IAAM,iBAAiB,GASnB;AACF,EAAA,OAAO,EAAE;AACP,IAAA,KAAK,EAAE;AACL,MAAA,KAAK,EAAE;AACL,QAAA,IAAI,sBAAoB;AADnB,OADF;AAIL,MAAA,IAAI,EAAE;AACJ,QAAA,IAAI,4BAA0B;AAD1B;AAJD,KADA;AASP,IAAA,oBAAoB,EAAE;AATf,GADP;AAYF,EAAA,IAAI,EAAE;AACJ,IAAA,KAAK,EAAE;AACL,MAAA,KAAK,EAAE;AACL,QAAA,IAAI,2BAAyB;AADxB,OADF;AAIL,MAAA,IAAI,EAAE;AACJ,QAAA,IAAI,iCAA+B;AAD/B;AAJD,KADH;AASJ,IAAA,oBAAoB,EAAE;AATlB,GAZJ;AAuBF,EAAA,IAAI,EAAE;AACJ,IAAA,KAAK,EAAE;AACL,MAAA,KAAK,EAAE;AACL,QAAA,IAAI,2BAAyB;AADxB,OADF;AAIL,MAAA,IAAI,EAAE;AACJ,QAAA,IAAI,iCAA+B;AAD/B;AAJD,KADH;AASJ,IAAA,oBAAoB,EAAE;AATlB,GAvBJ;AAkCF,EAAA,KAAK,EAAE;AACL,IAAA,KAAK,EAAE;AACL,MAAA,KAAK,EAAE;AACL,QAAA,IAAI,4BAA0B;AADzB,OADF;AAIL,MAAA,IAAI,EAAE;AACJ,QAAA,IAAI,kCAAgC;AADhC;AAJD,KADF;AASL,IAAA,oBAAoB,EAAE;AATjB,GAlCL;AA6CF,EAAA,MAAM,EAAE;AACN,IAAA,KAAK,EAAE;AACL,MAAA,KAAK,EAAE;AACL,QAAA,IAAI,6BAA2B;AAD1B,OADF;AAIL,MAAA,IAAI,EAAE;AACJ,QAAA,IAAI,mCAAiC;AADjC;AAJD,KADD;AASN,IAAA,oBAAoB,EAAE;AAThB,GA7CN;AAwDF,EAAA,OAAO,EAAE;AACP,IAAA,KAAK,EAAE;AACL,MAAA,KAAK,EAAE;AACL,QAAA,IAAI,8BAA4B;AAD3B,OADF;AAIL,MAAA,IAAI,EAAE;AACJ,QAAA,IAAI,oCAAkC;AADlC;AAJD,KADA;AASP,IAAA,oBAAoB,EAAE;AATf;AAxDP,CATJ;;AAkFA,SAAe,gBAAf,CAAgC,OAAhC,EAA6D,OAA7D;AAAA;AAAA;AAAA;AAAA;AAAA,cACO,OADP;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,2CAIc,UAAA,CAAA,OAAA,CAAG,UAAH,CAAc,MAAA,CAAA,OAAA,CAAK,OAAL,CAAa,OAAb,CAAd,CAJd;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAKU,UAAA,CAAA,OAAA,CAAG,KAAH,CAAS,MAAA,CAAA,OAAA,CAAK,OAAL,CAAa,OAAb,CAAT,CALV;;AAAA;AAAA;AAAA,2CAOQ,UAAA,CAAA,OAAA,CAAG,QAAH,CAAY,OAAZ,EAAqB,MAAA,CAAA,OAAA,CAAK,OAAL,CAAa,OAAb,CAArB,CAPR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBe,SAAe,kBAAf,CACb,eADa;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEb,UAAA,MAFa,8DAOT,EAPS;AAAA;AAAA,2CASP,OAAO,CAAC,GAAR,CACJ,MAAM,CAAC,MAAP,CAAc,iBAAd,EAAiC,GAAjC,CAAqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAS,oBAAA,KAAT,QAAS,KAAT;AAAA;AAAA,qDAC7B,OAAO,CAAC,GAAR,CACJ,MAAM,CAAC,MAAP,CAAc,KAAd,EAAqB,GAArB,CAAyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAe,8BAAA,QAAf,SAAS,IAAT;AAAA;AAAA,+DACb,UAAA,CAAA,OAAA,CAAG,UAAH,CAAc,MAAA,CAAA,OAAA,CAAK,OAAL,CAAa,eAAb,EAA8B,QAA9B,CAAd,CADa;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,+DAEf,UAAA,CAAA,OAAA,CAAG,MAAH,CAAU,MAAA,CAAA,OAAA,CAAK,OAAL,CAAa,eAAb,EAA8B,QAA9B,CAAV,CAFe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAzB,CADI,CAD6B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAArC,CADI,CATO;;AAAA;AAAA;AAAA,2CAqBP,OAAO,CAAC,GAAR,CAAY,CAChB,gBAAgB,CACd,MAAM,CAAC,KADO,EAEd,MAAA,CAAA,OAAA,CAAK,OAAL,CAAa,eAAb,EAA8B,iBAAiB,CAAC,OAAlB,CAA0B,KAA1B,CAAgC,KAAhC,CAAsC,IAApE,CAFc,CADA,EAKhB,gBAAgB,CAAA,CAAA,EAAA,GACd,MAAM,CAAC,QADO,MACC,IADD,IACC,EAAA,KAAA,KAAA,CADD,GACC,KAAA,CADD,GACC,EAAA,CAAE,KADH,EAEd,MAAA,CAAA,OAAA,CAAK,OAAL,CAAa,eAAb,EAA8B,iBAAiB,CAAC,OAAlB,CAA0B,KAA1B,CAAgC,IAAhC,CAAqC,IAAnE,CAFc,CALA,CAAZ,CArBO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAf,OAAA,CAAA,OAAA,GAAA,kBAAA","sourcesContent":["import fs from 'fs-extra';\nimport path from 'path';\n\nconst SPLASH_SCREEN_FILENAME = 'splashscreen_image.png';\n\ntype DRAWABLE_SIZE = 'default' | 'mdpi' | 'hdpi' | 'xhdpi' | 'xxhdpi' | 'xxxhdpi';\ntype THEME = 'light' | 'dark';\n\nconst DRAWABLES_CONFIGS: {\n  [key in DRAWABLE_SIZE]: {\n    modes: {\n      [key in THEME]: {\n        path: string;\n      };\n    };\n    dimensionsMultiplier: number;\n  };\n} = {\n  default: {\n    modes: {\n      light: {\n        path: `./res/drawable/${SPLASH_SCREEN_FILENAME}`,\n      },\n      dark: {\n        path: `./res/drawable-night/${SPLASH_SCREEN_FILENAME}`,\n      },\n    },\n    dimensionsMultiplier: 1,\n  },\n  mdpi: {\n    modes: {\n      light: {\n        path: `./res/drawable-mdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n      dark: {\n        path: `./res/drawable-night-mdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n    },\n    dimensionsMultiplier: 1,\n  },\n  hdpi: {\n    modes: {\n      light: {\n        path: `./res/drawable-hdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n      dark: {\n        path: `./res/drawable-night-hdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n    },\n    dimensionsMultiplier: 1.5,\n  },\n  xhdpi: {\n    modes: {\n      light: {\n        path: `./res/drawable-xhdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n      dark: {\n        path: `./res/drawable-night-xhdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n    },\n    dimensionsMultiplier: 2,\n  },\n  xxhdpi: {\n    modes: {\n      light: {\n        path: `./res/drawable-xxhdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n      dark: {\n        path: `./res/drawable-night-xxhdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n    },\n    dimensionsMultiplier: 3,\n  },\n  xxxhdpi: {\n    modes: {\n      light: {\n        path: `./res/drawable-xxxhdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n      dark: {\n        path: `./res/drawable-night-xxxhdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n    },\n    dimensionsMultiplier: 4,\n  },\n};\n\n/**\n * @param srcPath Absolute path\n * @param dstPath Absolute path\n */\nasync function copyDrawableFile(srcPath: string | undefined, dstPath: string) {\n  if (!srcPath) {\n    return;\n  }\n  if (!(await fs.pathExists(path.dirname(dstPath)))) {\n    await fs.mkdir(path.dirname(dstPath));\n  }\n  await fs.copyFile(srcPath, path.resolve(dstPath));\n}\n\n/**\n * Deletes all previous splash_screen_images and copies new one to desired drawable directory.\n * If path isn't provided then no new image is placed in drawable directories.\n * @see https://developer.android.com/training/multiscreen/screendensities\n *\n * @param androidMainPath Absolute path to the main directory containing code and resources in Android project. In general that would be `android/app/src/main`.\n */\nexport default async function configureDrawables(\n  androidMainPath: string,\n  config: {\n    image?: string;\n    darkMode?: {\n      image?: string;\n    };\n  } = {}\n) {\n  await Promise.all(\n    Object.values(DRAWABLES_CONFIGS).map(async ({ modes }) => {\n      await Promise.all(\n        Object.values(modes).map(async ({ path: filePath }) => {\n          if (await fs.pathExists(path.resolve(androidMainPath, filePath))) {\n            await fs.remove(path.resolve(androidMainPath, filePath));\n          }\n        })\n      );\n    })\n  );\n\n  await Promise.all([\n    copyDrawableFile(\n      config.image,\n      path.resolve(androidMainPath, DRAWABLES_CONFIGS.default.modes.light.path)\n    ),\n    copyDrawableFile(\n      config.darkMode?.image,\n      path.resolve(androidMainPath, DRAWABLES_CONFIGS.default.modes.dark.path)\n    ),\n  ]);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}