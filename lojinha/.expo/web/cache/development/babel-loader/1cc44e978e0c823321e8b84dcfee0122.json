{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport NativeDatePickerAndroid from \"./NativeDatePickerAndroid\";\n\nfunction _toMillis(options, key) {\n  var dateVal = options[key];\n\n  if (typeof dateVal === 'object' && typeof dateVal.getMonth === 'function') {\n    options[key] = dateVal.getTime();\n  }\n}\n\nvar DatePickerAndroid = function () {\n  function DatePickerAndroid() {\n    _classCallCheck(this, DatePickerAndroid);\n  }\n\n  _createClass(DatePickerAndroid, null, [{\n    key: \"open\",\n    value: function open(options) {\n      var optionsMs;\n      return _regeneratorRuntime.async(function open$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              optionsMs = options;\n\n              if (optionsMs != null) {\n                _toMillis(optionsMs, 'date');\n\n                _toMillis(optionsMs, 'minDate');\n\n                _toMillis(optionsMs, 'maxDate');\n              }\n\n              return _context.abrupt(\"return\", NativeDatePickerAndroid.open(options));\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n\n  return DatePickerAndroid;\n}();\n\nDatePickerAndroid.dateSetAction = 'dateSetAction';\nDatePickerAndroid.dismissedAction = 'dismissedAction';\nmodule.exports = DatePickerAndroid;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Components/DatePickerAndroid/DatePickerAndroid.android.js"],"names":["NativeDatePickerAndroid","_toMillis","options","key","dateVal","getMonth","getTime","DatePickerAndroid","optionsMs","open","dateSetAction","dismissedAction","module","exports"],"mappings":"AAUA;;;;;AAGA,OAAOA,uBAAP;;AAKA,SAASC,SAAT,CAAmBC,OAAnB,EAAqCC,GAArC,EAAkD;AAChD,MAAMC,OAAO,GAAGF,OAAO,CAACC,GAAD,CAAvB;;AAEA,MAAI,OAAOC,OAAP,KAAmB,QAAnB,IAA+B,OAAOA,OAAO,CAACC,QAAf,KAA4B,UAA/D,EAA2E;AACzEH,IAAAA,OAAO,CAACC,GAAD,CAAP,GAAeC,OAAO,CAACE,OAAR,EAAf;AACD;AACF;;IAsBKC,iB;;;;;;;WAsBJ,cAAkBL,OAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AACQM,cAAAA,SADR,GACoBN,OADpB;;AAEE,kBAAIM,SAAS,IAAI,IAAjB,EAAuB;AACrBP,gBAAAA,SAAS,CAACO,SAAD,EAAY,MAAZ,CAAT;;AACAP,gBAAAA,SAAS,CAACO,SAAD,EAAY,SAAZ,CAAT;;AACAP,gBAAAA,SAAS,CAACO,SAAD,EAAY,SAAZ,CAAT;AACD;;AANH,+CAOSR,uBAAuB,CAACS,IAAxB,CAA6BP,OAA7B,CAPT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAtBIK,iB,CAmCIG,a,GAAiC,e;AAnCrCH,iB,CAuCII,e,GAAqC,iB;AAG/CC,MAAM,CAACC,OAAP,GAAiBN,iBAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nimport type {Options, DatePickerOpenAction} from './DatePickerAndroidTypes';\nimport NativeDatePickerAndroid from './NativeDatePickerAndroid';\n\n/**\n * Convert a Date to a timestamp.\n */\nfunction _toMillis(options: Options, key: string) {\n  const dateVal = options[key];\n  // Is it a Date object?\n  if (typeof dateVal === 'object' && typeof dateVal.getMonth === 'function') {\n    options[key] = dateVal.getTime();\n  }\n}\n\n/**\n * Opens the standard Android date picker dialog.\n *\n * ### Example\n *\n * ```\n * try {\n *   const {action, year, month, day} = await DatePickerAndroid.open({\n *     // Use `new Date()` for current date.\n *     // May 25 2020. Month 0 is January.\n *     date: new Date(2020, 4, 25)\n *   });\n *   if (action !== DatePickerAndroid.dismissedAction) {\n *     // Selected year, month (0-11), day\n *   }\n * } catch ({code, message}) {\n *   console.warn('Cannot open date picker', message);\n * }\n * ```\n */\nclass DatePickerAndroid {\n  /**\n   * Opens the standard Android date picker dialog.\n   *\n   * The available keys for the `options` object are:\n   *\n   *   - `date` (`Date` object or timestamp in milliseconds) - date to show by default\n   *   - `minDate` (`Date` or timestamp in milliseconds) - minimum date that can be selected\n   *   - `maxDate` (`Date` object or timestamp in milliseconds) - maximum date that can be selected\n   *   - `mode` (`enum('calendar', 'spinner', 'default')`) - To set the date-picker mode to calendar/spinner/default\n   *     - 'calendar': Show a date picker in calendar mode.\n   *     - 'spinner': Show a date picker in spinner mode.\n   *     - 'default': Show a default native date picker(spinner/calendar) based on android versions.\n   *\n   * Returns a Promise which will be invoked an object containing `action`, `year`, `month` (0-11),\n   * `day` if the user picked a date. If the user dismissed the dialog, the Promise will\n   * still be resolved with action being `DatePickerAndroid.dismissedAction` and all the other keys\n   * being undefined. **Always** check whether the `action` before reading the values.\n   *\n   * Note the native date picker dialog has some UI glitches on Android 4 and lower\n   * when using the `minDate` and `maxDate` options.\n   */\n  static async open(options: ?Options): Promise<DatePickerOpenAction> {\n    const optionsMs = options;\n    if (optionsMs != null) {\n      _toMillis(optionsMs, 'date');\n      _toMillis(optionsMs, 'minDate');\n      _toMillis(optionsMs, 'maxDate');\n    }\n    return NativeDatePickerAndroid.open(options);\n  }\n\n  /**\n   * A date has been selected.\n   */\n  static +dateSetAction: 'dateSetAction' = 'dateSetAction';\n  /**\n   * The dialog has been dismissed.\n   */\n  static +dismissedAction: 'dismissedAction' = 'dismissedAction';\n}\n\nmodule.exports = DatePickerAndroid;\n"]},"metadata":{},"sourceType":"module"}