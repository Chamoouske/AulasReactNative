{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nvar _require = require(\"./JavaHelpers\"),\n    getImports = _require.getImports,\n    toSafeJavaString = _require.toSafeJavaString,\n    getInterfaceJavaClassName = _require.getInterfaceJavaClassName;\n\nvar template = \"/**\\n* Copyright (c) Facebook, Inc. and its affiliates.\\n*\\n* This source code is licensed under the MIT license found in the\\n* LICENSE file in the root directory of this source tree.\\n*\\n* \" + '@' + \"generated by codegen project: GeneratePropsJavaInterface.js\\n*/\\n\\npackage com.facebook.react.viewmanagers;\\n\\n::_IMPORTS_::\\n\\npublic interface ::_CLASSNAME_::<T extends ::_EXTEND_CLASSES_::> {\\n  ::_METHODS_::\\n}\\n\";\n\nfunction addNullable(imports) {\n  imports.add('import androidx.annotation.Nullable;');\n}\n\nfunction getJavaValueForProp(prop, imports) {\n  var typeAnnotation = prop.typeAnnotation;\n\n  switch (typeAnnotation.type) {\n    case 'BooleanTypeAnnotation':\n      if (typeAnnotation.default === null) {\n        addNullable(imports);\n        return '@Nullable Boolean value';\n      } else {\n        return 'boolean value';\n      }\n\n    case 'StringTypeAnnotation':\n      addNullable(imports);\n      return '@Nullable String value';\n\n    case 'Int32TypeAnnotation':\n      return 'int value';\n\n    case 'DoubleTypeAnnotation':\n      return 'double value';\n\n    case 'FloatTypeAnnotation':\n      if (typeAnnotation.default === null) {\n        addNullable(imports);\n        return '@Nullable Float value';\n      } else {\n        return 'float value';\n      }\n\n    case 'NativePrimitiveTypeAnnotation':\n      switch (typeAnnotation.name) {\n        case 'ColorPrimitive':\n          addNullable(imports);\n          return '@Nullable Integer value';\n\n        case 'ImageSourcePrimitive':\n          addNullable(imports);\n          return '@Nullable ReadableMap value';\n\n        case 'PointPrimitive':\n          addNullable(imports);\n          return '@Nullable ReadableMap value';\n\n        case 'EdgeInsetsPrimitive':\n          addNullable(imports);\n          return '@Nullable ReadableMap value';\n\n        default:\n          typeAnnotation.name;\n          throw new Error('Received unknown NativePrimitiveTypeAnnotation');\n      }\n\n    case 'ArrayTypeAnnotation':\n      {\n        addNullable(imports);\n        return '@Nullable ReadableArray value';\n      }\n\n    case 'ObjectTypeAnnotation':\n      {\n        addNullable(imports);\n        return '@Nullable ReadableMap value';\n      }\n\n    case 'StringEnumTypeAnnotation':\n      addNullable(imports);\n      return '@Nullable String value';\n\n    case 'Int32EnumTypeAnnotation':\n      addNullable(imports);\n      return '@Nullable Integer value';\n\n    default:\n      typeAnnotation;\n      throw new Error('Received invalid typeAnnotation');\n  }\n}\n\nfunction generatePropsString(component, imports) {\n  if (component.props.length === 0) {\n    return '// No props';\n  }\n\n  return component.props.map(function (prop) {\n    return \"void set\" + toSafeJavaString(prop.name) + \"(T view, \" + getJavaValueForProp(prop, imports) + \");\";\n  }).join('\\n' + '  ');\n}\n\nfunction getCommandArgJavaType(param) {\n  switch (param.typeAnnotation.type) {\n    case 'BooleanTypeAnnotation':\n      return 'boolean';\n\n    case 'DoubleTypeAnnotation':\n      return 'double';\n\n    case 'FloatTypeAnnotation':\n      return 'float';\n\n    case 'Int32TypeAnnotation':\n      return 'int';\n\n    case 'StringTypeAnnotation':\n      return 'String';\n\n    default:\n      param.typeAnnotation.type;\n      throw new Error('Receieved invalid typeAnnotation');\n  }\n}\n\nfunction getCommandArguments(command, componentName) {\n  return ['T view'].concat(_toConsumableArray(command.typeAnnotation.params.map(function (param) {\n    var commandArgJavaType = getCommandArgJavaType(param);\n    return commandArgJavaType + \" \" + param.name;\n  }))).join(', ');\n}\n\nfunction generateCommandsString(component, componentName) {\n  return component.commands.map(function (command) {\n    var safeJavaName = toSafeJavaString(command.name, false);\n    return \"void \" + safeJavaName + \"(\" + getCommandArguments(command, componentName) + \");\";\n  }).join('\\n' + '  ');\n}\n\nfunction getClassExtendString(component) {\n  var extendString = component.extendsProps.map(function (extendProps) {\n    switch (extendProps.type) {\n      case 'ReactNativeBuiltInType':\n        switch (extendProps.knownTypeName) {\n          case 'ReactNativeCoreViewProps':\n            return 'View';\n\n          default:\n            extendProps.knownTypeName;\n            throw new Error('Invalid knownTypeName');\n        }\n\n      default:\n        extendProps.type;\n        throw new Error('Invalid extended type');\n    }\n  }).join('');\n  return extendString;\n}\n\nmodule.exports = {\n  generate: function generate(libraryName, schema, moduleSpecName) {\n    var files = new Map();\n    Object.keys(schema.modules).forEach(function (moduleName) {\n      var components = schema.modules[moduleName].components;\n\n      if (components == null) {\n        return;\n      }\n\n      return Object.keys(components).filter(function (componentName) {\n        var component = components[componentName];\n        return component.excludedPlatform !== 'android';\n      }).forEach(function (componentName) {\n        var component = components[componentName];\n        var className = getInterfaceJavaClassName(componentName);\n        var fileName = className + \".java\";\n        var imports = getImports(component, 'interface');\n        var propsString = generatePropsString(component, imports);\n        var commandsString = generateCommandsString(component, componentName);\n        var extendString = getClassExtendString(component);\n        var replacedTemplate = template.replace(/::_IMPORTS_::/g, Array.from(imports).sort().join('\\n')).replace(/::_CLASSNAME_::/g, className).replace('::_EXTEND_CLASSES_::', extendString).replace('::_METHODS_::', [propsString, commandsString].join('\\n' + '  ').trimRight()).replace('::_COMMAND_HANDLERS_::', commandsString);\n        files.set(fileName, replacedTemplate);\n      });\n    });\n    return files;\n  }\n};","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/packages/react-native-codegen/src/generators/components/GeneratePropsJavaInterface.js"],"names":["require","getImports","toSafeJavaString","getInterfaceJavaClassName","template","addNullable","imports","add","getJavaValueForProp","prop","typeAnnotation","type","default","name","Error","generatePropsString","component","props","length","map","join","getCommandArgJavaType","param","getCommandArguments","command","componentName","params","commandArgJavaType","generateCommandsString","commands","safeJavaName","getClassExtendString","extendString","extendsProps","extendProps","knownTypeName","module","exports","generate","libraryName","schema","moduleSpecName","files","Map","Object","keys","modules","forEach","moduleName","components","filter","excludedPlatform","className","fileName","propsString","commandsString","replacedTemplate","replace","Array","from","sort","trimRight","set"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\n'use strict';\n\nimport type {\n  CommandTypeShape,\n  ComponentShape,\n  PropTypeShape,\n  SchemaType,\n} from '../../CodegenSchema';\nconst {\n  getImports,\n  toSafeJavaString,\n  getInterfaceJavaClassName,\n} = require('./JavaHelpers');\n\n// File path -> contents\ntype FilesOutput = Map<string, string>;\n\nconst template = `/**\n* Copyright (c) Facebook, Inc. and its affiliates.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*\n* ${'@'}generated by codegen project: GeneratePropsJavaInterface.js\n*/\n\npackage com.facebook.react.viewmanagers;\n\n::_IMPORTS_::\n\npublic interface ::_CLASSNAME_::<T extends ::_EXTEND_CLASSES_::> {\n  ::_METHODS_::\n}\n`;\n\nfunction addNullable(imports) {\n  imports.add('import androidx.annotation.Nullable;');\n}\n\nfunction getJavaValueForProp(prop: PropTypeShape, imports): string {\n  const typeAnnotation = prop.typeAnnotation;\n\n  switch (typeAnnotation.type) {\n    case 'BooleanTypeAnnotation':\n      if (typeAnnotation.default === null) {\n        addNullable(imports);\n        return '@Nullable Boolean value';\n      } else {\n        return 'boolean value';\n      }\n    case 'StringTypeAnnotation':\n      addNullable(imports);\n      return '@Nullable String value';\n    case 'Int32TypeAnnotation':\n      return 'int value';\n    case 'DoubleTypeAnnotation':\n      return 'double value';\n    case 'FloatTypeAnnotation':\n      if (typeAnnotation.default === null) {\n        addNullable(imports);\n        return '@Nullable Float value';\n      } else {\n        return 'float value';\n      }\n    case 'NativePrimitiveTypeAnnotation':\n      switch (typeAnnotation.name) {\n        case 'ColorPrimitive':\n          addNullable(imports);\n          return '@Nullable Integer value';\n        case 'ImageSourcePrimitive':\n          addNullable(imports);\n          return '@Nullable ReadableMap value';\n        case 'PointPrimitive':\n          addNullable(imports);\n          return '@Nullable ReadableMap value';\n        case 'EdgeInsetsPrimitive':\n          addNullable(imports);\n          return '@Nullable ReadableMap value';\n        default:\n          (typeAnnotation.name: empty);\n          throw new Error('Received unknown NativePrimitiveTypeAnnotation');\n      }\n    case 'ArrayTypeAnnotation': {\n      addNullable(imports);\n      return '@Nullable ReadableArray value';\n    }\n    case 'ObjectTypeAnnotation': {\n      addNullable(imports);\n      return '@Nullable ReadableMap value';\n    }\n    case 'StringEnumTypeAnnotation':\n      addNullable(imports);\n      return '@Nullable String value';\n    case 'Int32EnumTypeAnnotation':\n      addNullable(imports);\n      return '@Nullable Integer value';\n    default:\n      (typeAnnotation: empty);\n      throw new Error('Received invalid typeAnnotation');\n  }\n}\n\nfunction generatePropsString(component: ComponentShape, imports) {\n  if (component.props.length === 0) {\n    return '// No props';\n  }\n\n  return component.props\n    .map(prop => {\n      return `void set${toSafeJavaString(\n        prop.name,\n      )}(T view, ${getJavaValueForProp(prop, imports)});`;\n    })\n    .join('\\n' + '  ');\n}\n\nfunction getCommandArgJavaType(param) {\n  switch (param.typeAnnotation.type) {\n    case 'BooleanTypeAnnotation':\n      return 'boolean';\n    case 'DoubleTypeAnnotation':\n      return 'double';\n    case 'FloatTypeAnnotation':\n      return 'float';\n    case 'Int32TypeAnnotation':\n      return 'int';\n    case 'StringTypeAnnotation':\n      return 'String';\n    default:\n      (param.typeAnnotation.type: empty);\n      throw new Error('Receieved invalid typeAnnotation');\n  }\n}\n\nfunction getCommandArguments(\n  command: CommandTypeShape,\n  componentName: string,\n): string {\n  return [\n    'T view',\n    ...command.typeAnnotation.params.map(param => {\n      const commandArgJavaType = getCommandArgJavaType(param);\n\n      return `${commandArgJavaType} ${param.name}`;\n    }),\n  ].join(', ');\n}\n\nfunction generateCommandsString(\n  component: ComponentShape,\n  componentName: string,\n) {\n  return component.commands\n    .map(command => {\n      const safeJavaName = toSafeJavaString(command.name, false);\n\n      return `void ${safeJavaName}(${getCommandArguments(\n        command,\n        componentName,\n      )});`;\n    })\n    .join('\\n' + '  ');\n}\n\nfunction getClassExtendString(component): string {\n  const extendString = component.extendsProps\n    .map(extendProps => {\n      switch (extendProps.type) {\n        case 'ReactNativeBuiltInType':\n          switch (extendProps.knownTypeName) {\n            case 'ReactNativeCoreViewProps':\n              return 'View';\n            default:\n              (extendProps.knownTypeName: empty);\n              throw new Error('Invalid knownTypeName');\n          }\n        default:\n          (extendProps.type: empty);\n          throw new Error('Invalid extended type');\n      }\n    })\n    .join('');\n\n  return extendString;\n}\n\nmodule.exports = {\n  generate(\n    libraryName: string,\n    schema: SchemaType,\n    moduleSpecName: string,\n  ): FilesOutput {\n    const files = new Map();\n    Object.keys(schema.modules).forEach(moduleName => {\n      const components = schema.modules[moduleName].components;\n      // No components in this module\n      if (components == null) {\n        return;\n      }\n\n      return Object.keys(components)\n        .filter(componentName => {\n          const component = components[componentName];\n          return component.excludedPlatform !== 'android';\n        })\n        .forEach(componentName => {\n          const component = components[componentName];\n          const className = getInterfaceJavaClassName(componentName);\n          const fileName = `${className}.java`;\n\n          const imports = getImports(component, 'interface');\n          const propsString = generatePropsString(component, imports);\n          const commandsString = generateCommandsString(\n            component,\n            componentName,\n          );\n          const extendString = getClassExtendString(component);\n\n          const replacedTemplate = template\n            .replace(\n              /::_IMPORTS_::/g,\n              Array.from(imports)\n                .sort()\n                .join('\\n'),\n            )\n            .replace(/::_CLASSNAME_::/g, className)\n            .replace('::_EXTEND_CLASSES_::', extendString)\n            .replace(\n              '::_METHODS_::',\n              [propsString, commandsString].join('\\n' + '  ').trimRight(),\n            )\n            .replace('::_COMMAND_HANDLERS_::', commandsString);\n\n          files.set(fileName, replacedTemplate);\n        });\n    });\n\n    return files;\n  },\n};\n"]},"metadata":{},"sourceType":"script"}