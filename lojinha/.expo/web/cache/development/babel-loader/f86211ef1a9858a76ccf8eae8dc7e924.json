{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState, useRef } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport NativeEventEmitter from \"react-native-web/dist/exports/NativeEventEmitter\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { SafeAreaView } from 'react-native-safe-area-context';\nvar NativeDevLoadingView = NativeModules.DevLoadingView;\nvar nativeDevLoadingViewEventEmitter = new NativeEventEmitter(NativeDevLoadingView);\nexport default function DevLoadingView() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isDevLoading = _useState2[0],\n      setIsDevLoading = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isAnimating = _useState4[0],\n      setIsAnimating = _useState4[1];\n\n  var translateY = useRef(new Animated.Value(0)).current;\n  useEffect(function () {\n    function handleShowMessage(_ref) {\n      var message = _ref.message;\n\n      if (message !== 'Refreshing...') {\n        return;\n      }\n\n      translateY.setValue(0);\n      setIsDevLoading(true);\n    }\n\n    function handleHide() {\n      setIsAnimating(true);\n      setIsDevLoading(false);\n      Animated.timing(translateY, {\n        toValue: 150,\n        delay: 1000,\n        duration: 350,\n        useNativeDriver: true\n      }).start(function (_ref2) {\n        var finished = _ref2.finished;\n\n        if (finished) {\n          setIsAnimating(false);\n          translateY.setValue(0);\n        }\n      });\n    }\n\n    nativeDevLoadingViewEventEmitter.addListener('devLoadingView:showMessage', handleShowMessage);\n    nativeDevLoadingViewEventEmitter.addListener('devLoadingView:hide', handleHide);\n    return function cleanup() {\n      nativeDevLoadingViewEventEmitter.removeListener('devLoadingView:showMessage', handleShowMessage);\n      nativeDevLoadingViewEventEmitter.removeListener('devLoadingView:hide', handleHide);\n    };\n  }, [translateY]);\n\n  if (isDevLoading || isAnimating) {\n    return React.createElement(Animated.View, {\n      style: [styles.animatedContainer, {\n        transform: [{\n          translateY: translateY\n        }]\n      }],\n      pointerEvents: \"none\"\n    }, React.createElement(SafeAreaView, {\n      style: styles.banner,\n      edges: ['bottom']\n    }, React.createElement(View, {\n      style: styles.contentContainer\n    }, React.createElement(View, {\n      style: {\n        flexDirection: 'row'\n      }\n    }, React.createElement(Text, {\n      style: styles.text\n    }, isDevLoading ? 'Refreshing...' : 'Refreshed')), React.createElement(View, {\n      style: {\n        flex: 1\n      }\n    }, React.createElement(Text, {\n      style: styles.subtitle\n    }, isDevLoading ? 'Using Fast Refresh' : \"Don't see your changes? Reload the app\")))));\n  } else {\n    return null;\n  }\n}\nvar styles = StyleSheet.create({\n  animatedContainer: {\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    right: 0,\n    zIndex: 42\n  },\n  banner: {\n    flex: 1,\n    overflow: 'visible',\n    backgroundColor: 'rgba(0,0,0,0.75)'\n  },\n  contentContainer: {\n    flex: 1,\n    paddingTop: 10,\n    paddingBottom: 5,\n    alignItems: 'center',\n    justifyContent: 'center',\n    textAlign: 'center'\n  },\n  text: {\n    color: '#fff',\n    fontSize: 15\n  },\n  subtitle: {\n    color: 'rgba(255,255,255,0.8)'\n  }\n});","map":{"version":3,"sources":["../../src/environment/DevLoadingView.ios.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport { Animated, StyleSheet, Text, NativeModules, NativeEventEmitter, View } from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\n\nconst NativeDevLoadingView = NativeModules.DevLoadingView;\nconst nativeDevLoadingViewEventEmitter = new NativeEventEmitter(NativeDevLoadingView);\n\nexport default function DevLoadingView() {\n  const [isDevLoading, setIsDevLoading] = useState(false);\n  const [isAnimating, setIsAnimating] = useState(false);\n  const translateY = useRef(new Animated.Value(0)).current;\n\n  useEffect(() => {\n    function handleShowMessage({ message }) {\n      // \"Refreshing...\" is the standard fast refresh message and it's the\n      // only time we want to display this overlay.\n      if (message !== 'Refreshing...') {\n        return;\n      }\n\n      // TODO: if we show the refreshing banner and don't get a hide message\n      // for 3 seconds, warn the user that it's taking a while and suggest\n      // they reload\n\n      translateY.setValue(0);\n      setIsDevLoading(true);\n    }\n\n    function handleHide() {\n      // TODO: if we showed the 'refreshing' banner less than 250ms ago, delay\n      // switching to the 'finished' banner\n\n      setIsAnimating(true);\n      setIsDevLoading(false);\n      Animated.timing(translateY, {\n        toValue: 150,\n        delay: 1000,\n        duration: 350,\n        useNativeDriver: true,\n      }).start(({ finished }) => {\n        if (finished) {\n          setIsAnimating(false);\n          translateY.setValue(0);\n        }\n      });\n    }\n\n    nativeDevLoadingViewEventEmitter.addListener('devLoadingView:showMessage', handleShowMessage);\n    nativeDevLoadingViewEventEmitter.addListener('devLoadingView:hide', handleHide);\n\n    return function cleanup() {\n      nativeDevLoadingViewEventEmitter.removeListener(\n        'devLoadingView:showMessage',\n        handleShowMessage\n      );\n      nativeDevLoadingViewEventEmitter.removeListener('devLoadingView:hide', handleHide);\n    };\n  }, [translateY]);\n\n  if (isDevLoading || isAnimating) {\n    return (\n      <Animated.View\n        style={[styles.animatedContainer, { transform: [{ translateY }] }]}\n        pointerEvents=\"none\">\n        <SafeAreaView style={styles.banner} edges={['bottom']}>\n          <View style={styles.contentContainer}>\n            <View style={{ flexDirection: 'row' }}>\n              <Text style={styles.text}>{isDevLoading ? 'Refreshing...' : 'Refreshed'}</Text>\n            </View>\n\n            <View style={{ flex: 1 }}>\n              <Text style={styles.subtitle}>\n                {isDevLoading ? 'Using Fast Refresh' : \"Don't see your changes? Reload the app\"}\n              </Text>\n            </View>\n          </View>\n        </SafeAreaView>\n      </Animated.View>\n    );\n  } else {\n    return null;\n  }\n}\n\nconst styles = StyleSheet.create({\n  animatedContainer: {\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    right: 0,\n    zIndex: 42, // arbitrary\n  },\n  banner: {\n    flex: 1,\n    overflow: 'visible',\n    backgroundColor: 'rgba(0,0,0,0.75)',\n  },\n  contentContainer: {\n    flex: 1,\n    paddingTop: 10,\n    paddingBottom: 5,\n    alignItems: 'center',\n    justifyContent: 'center',\n    textAlign: 'center',\n  },\n  text: {\n    color: '#fff',\n    fontSize: 15,\n  },\n  subtitle: {\n    color: 'rgba(255,255,255,0.8)',\n  },\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}