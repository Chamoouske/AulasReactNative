{"ast":null,"code":"'use strict';\n\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport Dimensions from \"../Dimensions\";\nimport { useEffect, useState } from 'react';\nexport default function useWindowDimensions() {\n  var _useState = useState(function () {\n    return Dimensions.get('window');\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      dims = _useState2[0],\n      setDims = _useState2[1];\n\n  useEffect(function () {\n    function handleChange(_ref) {\n      var window = _ref.window;\n      setDims(window);\n    }\n\n    Dimensions.addEventListener('change', handleChange);\n    setDims(Dimensions.get('window'));\n    return function () {\n      Dimensions.removeEventListener('change', handleChange);\n    };\n  }, []);\n  return dims;\n}","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native-web/src/exports/useWindowDimensions/index.js"],"names":["Dimensions","useEffect","useState","useWindowDimensions","get","dims","setDims","handleChange","window","addEventListener","removeEventListener"],"mappings":"AAUA;;;AAIA,OAAOA,UAAP;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,eAAe,SAASC,mBAAT,GAA+C;AAAA,kBACpCD,QAAQ,CAAC;AAAA,WAAMF,UAAU,CAACI,GAAX,CAAe,QAAf,CAAN;AAAA,GAAD,CAD4B;AAAA;AAAA,MACrDC,IADqD;AAAA,MAC/CC,OAD+C;;AAE5DL,EAAAA,SAAS,CAAC,YAAM;AACd,aAASM,YAAT,OAAkC;AAAA,UAAVC,MAAU,QAAVA,MAAU;AAEhCF,MAAAA,OAAO,CAACE,MAAD,CAAP;AACD;;AACDR,IAAAA,UAAU,CAACS,gBAAX,CAA4B,QAA5B,EAAsCF,YAAtC;AAIAD,IAAAA,OAAO,CAACN,UAAU,CAACI,GAAX,CAAe,QAAf,CAAD,CAAP;AACA,WAAO,YAAM;AACXJ,MAAAA,UAAU,CAACU,mBAAX,CAA+B,QAA/B,EAAyCH,YAAzC;AACD,KAFD;AAGD,GAbQ,EAaN,EAbM,CAAT;AAcA,SAAOF,IAAP;AACD","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nimport type { DisplayMetrics } from '../Dimensions';\n\nimport Dimensions from '../Dimensions';\nimport { useEffect, useState } from 'react';\n\nexport default function useWindowDimensions(): DisplayMetrics {\n  const [dims, setDims] = useState(() => Dimensions.get('window'));\n  useEffect(() => {\n    function handleChange({ window }) {\n      // $FlowFixMe\n      setDims(window);\n    }\n    Dimensions.addEventListener('change', handleChange);\n    // We might have missed an update between calling `get` in render and\n    // `addEventListener` in this handler, so we set it here. If there was\n    // no change, React will filter out this update as a no-op.\n    setDims(Dimensions.get('window'));\n    return () => {\n      Dimensions.removeEventListener('change', handleChange);\n    };\n  }, []);\n  return dims;\n}\n"]},"metadata":{},"sourceType":"module"}