{"ast":null,"code":"var path = require('path'),\n    util = require('util');\n\nvar DEFAULT_SOURCETREE = '\"<group>\"',\n    DEFAULT_PRODUCT_SOURCETREE = 'BUILT_PRODUCTS_DIR',\n    DEFAULT_FILEENCODING = 4,\n    DEFAULT_GROUP = 'Resources',\n    DEFAULT_FILETYPE = 'unknown';\nvar FILETYPE_BY_EXTENSION = {\n  a: 'archive.ar',\n  app: 'wrapper.application',\n  appex: 'wrapper.app-extension',\n  bundle: 'wrapper.plug-in',\n  dylib: 'compiled.mach-o.dylib',\n  framework: 'wrapper.framework',\n  h: 'sourcecode.c.h',\n  m: 'sourcecode.c.objc',\n  markdown: 'text',\n  mdimporter: 'wrapper.cfbundle',\n  octest: 'wrapper.cfbundle',\n  pch: 'sourcecode.c.h',\n  plist: 'text.plist.xml',\n  sh: 'text.script.sh',\n  swift: 'sourcecode.swift',\n  tbd: 'sourcecode.text-based-dylib-definition',\n  xcassets: 'folder.assetcatalog',\n  xcconfig: 'text.xcconfig',\n  xcdatamodel: 'wrapper.xcdatamodel',\n  xcodeproj: 'wrapper.pb-project',\n  xctest: 'wrapper.cfbundle',\n  xib: 'file.xib',\n  strings: 'text.plist.strings'\n},\n    GROUP_BY_FILETYPE = {\n  'archive.ar': 'Frameworks',\n  'compiled.mach-o.dylib': 'Frameworks',\n  'sourcecode.text-based-dylib-definition': 'Frameworks',\n  'wrapper.framework': 'Frameworks',\n  'embedded.framework': 'Embed Frameworks',\n  'sourcecode.c.h': 'Resources',\n  'sourcecode.c.objc': 'Sources',\n  'sourcecode.swift': 'Sources'\n},\n    PATH_BY_FILETYPE = {\n  'compiled.mach-o.dylib': 'usr/lib/',\n  'sourcecode.text-based-dylib-definition': 'usr/lib/',\n  'wrapper.framework': 'System/Library/Frameworks/'\n},\n    SOURCETREE_BY_FILETYPE = {\n  'compiled.mach-o.dylib': 'SDKROOT',\n  'sourcecode.text-based-dylib-definition': 'SDKROOT',\n  'wrapper.framework': 'SDKROOT'\n},\n    ENCODING_BY_FILETYPE = {\n  'sourcecode.c.h': 4,\n  'sourcecode.c.h': 4,\n  'sourcecode.c.objc': 4,\n  'sourcecode.swift': 4,\n  'text': 4,\n  'text.plist.xml': 4,\n  'text.script.sh': 4,\n  'text.xcconfig': 4,\n  'text.plist.strings': 4\n};\n\nfunction unquoted(text) {\n  return text == null ? '' : text.replace(/(^\")|(\"$)/g, '');\n}\n\nfunction detectType(filePath) {\n  var extension = path.extname(filePath).substring(1),\n      filetype = FILETYPE_BY_EXTENSION[unquoted(extension)];\n\n  if (!filetype) {\n    return DEFAULT_FILETYPE;\n  }\n\n  return filetype;\n}\n\nfunction defaultExtension(fileRef) {\n  var filetype = fileRef.lastKnownFileType && fileRef.lastKnownFileType != DEFAULT_FILETYPE ? fileRef.lastKnownFileType : fileRef.explicitFileType;\n\n  for (var extension in FILETYPE_BY_EXTENSION) {\n    if (FILETYPE_BY_EXTENSION.hasOwnProperty(unquoted(extension))) {\n      if (FILETYPE_BY_EXTENSION[unquoted(extension)] === unquoted(filetype)) return extension;\n    }\n  }\n}\n\nfunction defaultEncoding(fileRef) {\n  var filetype = fileRef.lastKnownFileType || fileRef.explicitFileType,\n      encoding = ENCODING_BY_FILETYPE[unquoted(filetype)];\n\n  if (encoding) {\n    return encoding;\n  }\n}\n\nfunction detectGroup(fileRef, opt) {\n  var extension = path.extname(fileRef.basename).substring(1),\n      filetype = fileRef.lastKnownFileType || fileRef.explicitFileType,\n      groupName = GROUP_BY_FILETYPE[unquoted(filetype)];\n\n  if (extension === 'xcdatamodeld') {\n    return 'Sources';\n  }\n\n  if (opt.customFramework && opt.embed) {\n    return GROUP_BY_FILETYPE['embedded.framework'];\n  }\n\n  if (!groupName) {\n    return DEFAULT_GROUP;\n  }\n\n  return groupName;\n}\n\nfunction detectSourcetree(fileRef) {\n  var filetype = fileRef.lastKnownFileType || fileRef.explicitFileType,\n      sourcetree = SOURCETREE_BY_FILETYPE[unquoted(filetype)];\n\n  if (fileRef.explicitFileType) {\n    return DEFAULT_PRODUCT_SOURCETREE;\n  }\n\n  if (fileRef.customFramework) {\n    return DEFAULT_SOURCETREE;\n  }\n\n  if (!sourcetree) {\n    return DEFAULT_SOURCETREE;\n  }\n\n  return sourcetree;\n}\n\nfunction defaultPath(fileRef, filePath) {\n  var filetype = fileRef.lastKnownFileType || fileRef.explicitFileType,\n      defaultPath = PATH_BY_FILETYPE[unquoted(filetype)];\n\n  if (fileRef.customFramework) {\n    return filePath;\n  }\n\n  if (defaultPath) {\n    return path.join(defaultPath, path.basename(filePath));\n  }\n\n  return filePath;\n}\n\nfunction defaultGroup(fileRef) {\n  var groupName = GROUP_BY_FILETYPE[fileRef.lastKnownFileType];\n\n  if (!groupName) {\n    return DEFAULT_GROUP;\n  }\n\n  return defaultGroup;\n}\n\nfunction pbxFile(filepath, opt) {\n  var opt = opt || {};\n  this.basename = path.basename(filepath);\n  this.lastKnownFileType = opt.lastKnownFileType || detectType(filepath);\n  this.group = detectGroup(this, opt);\n\n  if (opt.customFramework == true) {\n    this.customFramework = true;\n    this.dirname = path.dirname(filepath).replace(/\\\\/g, '/');\n  }\n\n  this.path = defaultPath(this, filepath).replace(/\\\\/g, '/');\n  this.fileEncoding = this.defaultEncoding = opt.defaultEncoding || defaultEncoding(this);\n\n  if (opt.explicitFileType) {\n    this.explicitFileType = opt.explicitFileType;\n    this.basename = this.basename + '.' + defaultExtension(this);\n    delete this.path;\n    delete this.lastKnownFileType;\n    delete this.group;\n    delete this.defaultEncoding;\n  }\n\n  this.sourceTree = opt.sourceTree || detectSourcetree(this);\n  this.includeInIndex = 0;\n  if (opt.weak && opt.weak === true) this.settings = {\n    ATTRIBUTES: ['Weak']\n  };\n\n  if (opt.compilerFlags) {\n    if (!this.settings) this.settings = {};\n    this.settings.COMPILER_FLAGS = util.format('\"%s\"', opt.compilerFlags);\n  }\n\n  if (opt.embed && opt.sign) {\n    if (!this.settings) this.settings = {};\n    if (!this.settings.ATTRIBUTES) this.settings.ATTRIBUTES = [];\n    this.settings.ATTRIBUTES.push('CodeSignOnCopy');\n  }\n}\n\nmodule.exports = pbxFile;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@expo/configure-splash-screen/node_modules/xcode/lib/pbxFile.js"],"names":["path","require","util","DEFAULT_SOURCETREE","DEFAULT_PRODUCT_SOURCETREE","DEFAULT_FILEENCODING","DEFAULT_GROUP","DEFAULT_FILETYPE","FILETYPE_BY_EXTENSION","a","app","appex","bundle","dylib","framework","h","m","markdown","mdimporter","octest","pch","plist","sh","swift","tbd","xcassets","xcconfig","xcdatamodel","xcodeproj","xctest","xib","strings","GROUP_BY_FILETYPE","PATH_BY_FILETYPE","SOURCETREE_BY_FILETYPE","ENCODING_BY_FILETYPE","unquoted","text","replace","detectType","filePath","extension","extname","substring","filetype","defaultExtension","fileRef","lastKnownFileType","explicitFileType","hasOwnProperty","defaultEncoding","encoding","detectGroup","opt","basename","groupName","customFramework","embed","detectSourcetree","sourcetree","defaultPath","join","defaultGroup","pbxFile","filepath","group","dirname","fileEncoding","sourceTree","includeInIndex","weak","settings","ATTRIBUTES","compilerFlags","COMPILER_FLAGS","format","sign","push","module","exports"],"mappings":"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","sourcesContent":["/**\n Licensed to the Apache Software Foundation (ASF) under one\n or more contributor license agreements.  See the NOTICE file\n distributed with this work for additional information\n regarding copyright ownership.  The ASF licenses this file\n to you under the Apache License, Version 2.0 (the\n 'License'); you may not use this file except in compliance\n with the License.  You may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\n Unless required by applicable law or agreed to in writing,\n software distributed under the License is distributed on an\n 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n KIND, either express or implied.  See the License for the\n specific language governing permissions and limitations\n under the License.\n */\n\nvar path = require('path'),\n    util = require('util');\n\nvar DEFAULT_SOURCETREE = '\"<group>\"',\n    DEFAULT_PRODUCT_SOURCETREE = 'BUILT_PRODUCTS_DIR',\n    DEFAULT_FILEENCODING = 4,\n    DEFAULT_GROUP = 'Resources',\n    DEFAULT_FILETYPE = 'unknown';\n\nvar FILETYPE_BY_EXTENSION = {\n        a: 'archive.ar',\n        app: 'wrapper.application',\n        appex: 'wrapper.app-extension',\n        bundle: 'wrapper.plug-in',\n        dylib: 'compiled.mach-o.dylib',\n        framework: 'wrapper.framework',\n        h: 'sourcecode.c.h',\n        m: 'sourcecode.c.objc',\n        markdown: 'text',\n        mdimporter: 'wrapper.cfbundle',\n        octest: 'wrapper.cfbundle',\n        pch: 'sourcecode.c.h',\n        plist: 'text.plist.xml',\n        sh: 'text.script.sh',\n        swift: 'sourcecode.swift',\n        tbd: 'sourcecode.text-based-dylib-definition',\n        xcassets: 'folder.assetcatalog',\n        xcconfig: 'text.xcconfig',\n        xcdatamodel: 'wrapper.xcdatamodel',\n        xcodeproj: 'wrapper.pb-project',\n        xctest: 'wrapper.cfbundle',\n        xib: 'file.xib',\n        strings: 'text.plist.strings'\n    },\n    GROUP_BY_FILETYPE = {\n        'archive.ar': 'Frameworks',\n        'compiled.mach-o.dylib': 'Frameworks',\n        'sourcecode.text-based-dylib-definition': 'Frameworks',\n        'wrapper.framework': 'Frameworks',\n        'embedded.framework': 'Embed Frameworks',\n        'sourcecode.c.h': 'Resources',\n        'sourcecode.c.objc': 'Sources',\n        'sourcecode.swift': 'Sources'\n    },\n    PATH_BY_FILETYPE = {\n        'compiled.mach-o.dylib': 'usr/lib/',\n        'sourcecode.text-based-dylib-definition': 'usr/lib/',\n        'wrapper.framework': 'System/Library/Frameworks/'\n    },\n    SOURCETREE_BY_FILETYPE = {\n        'compiled.mach-o.dylib': 'SDKROOT',\n        'sourcecode.text-based-dylib-definition': 'SDKROOT',\n        'wrapper.framework': 'SDKROOT'\n    },\n    ENCODING_BY_FILETYPE = {\n        'sourcecode.c.h': 4,\n        'sourcecode.c.h': 4,\n        'sourcecode.c.objc': 4,\n        'sourcecode.swift': 4,\n        'text': 4,\n        'text.plist.xml': 4,\n        'text.script.sh': 4,\n        'text.xcconfig': 4,\n        'text.plist.strings': 4\n    };\n\n\nfunction unquoted(text){\n    return text == null ? '' : text.replace (/(^\")|(\"$)/g, '')\n}\n\nfunction detectType(filePath) {\n    var extension = path.extname(filePath).substring(1),\n        filetype = FILETYPE_BY_EXTENSION[unquoted(extension)];\n\n    if (!filetype) {\n        return DEFAULT_FILETYPE;\n    }\n\n    return filetype;\n}\n\nfunction defaultExtension(fileRef) {\n    var filetype = fileRef.lastKnownFileType && fileRef.lastKnownFileType != DEFAULT_FILETYPE ?\n        fileRef.lastKnownFileType : fileRef.explicitFileType;\n\n    for(var extension in FILETYPE_BY_EXTENSION) {\n        if(FILETYPE_BY_EXTENSION.hasOwnProperty(unquoted(extension)) ) {\n             if(FILETYPE_BY_EXTENSION[unquoted(extension)] === unquoted(filetype) )\n                 return extension;\n        }\n    }\n}\n\nfunction defaultEncoding(fileRef) {\n    var filetype = fileRef.lastKnownFileType || fileRef.explicitFileType,\n        encoding = ENCODING_BY_FILETYPE[unquoted(filetype)];\n\n    if (encoding) {\n        return encoding;\n    }\n}\n\nfunction detectGroup(fileRef, opt) {\n    var extension = path.extname(fileRef.basename).substring(1),\n        filetype = fileRef.lastKnownFileType || fileRef.explicitFileType,\n        groupName = GROUP_BY_FILETYPE[unquoted(filetype)];\n\n    if (extension === 'xcdatamodeld') {\n        return 'Sources';\n    }\n\n    if (opt.customFramework && opt.embed) {\n        return GROUP_BY_FILETYPE['embedded.framework'];\n    }\n\n    if (!groupName) {\n        return DEFAULT_GROUP;\n    }\n\n    return groupName;\n}\n\nfunction detectSourcetree(fileRef) {\n\n    var filetype = fileRef.lastKnownFileType || fileRef.explicitFileType,\n        sourcetree = SOURCETREE_BY_FILETYPE[unquoted(filetype)];\n\n    if (fileRef.explicitFileType) {\n        return DEFAULT_PRODUCT_SOURCETREE;\n    }\n\n    if (fileRef.customFramework) {\n        return DEFAULT_SOURCETREE;\n    }\n\n    if (!sourcetree) {\n        return DEFAULT_SOURCETREE;\n    }\n\n    return sourcetree;\n}\n\nfunction defaultPath(fileRef, filePath) {\n    var filetype = fileRef.lastKnownFileType || fileRef.explicitFileType,\n        defaultPath = PATH_BY_FILETYPE[unquoted(filetype)];\n\n    if (fileRef.customFramework) {\n        return filePath;\n    }\n\n    if (defaultPath) {\n        return path.join(defaultPath, path.basename(filePath));\n    }\n\n    return filePath;\n}\n\nfunction defaultGroup(fileRef) {\n    var groupName = GROUP_BY_FILETYPE[fileRef.lastKnownFileType];\n\n    if (!groupName) {\n        return DEFAULT_GROUP;\n    }\n\n    return defaultGroup;\n}\n\nfunction pbxFile(filepath, opt) {\n    var opt = opt || {};\n\n    this.basename = path.basename(filepath);\n    this.lastKnownFileType = opt.lastKnownFileType || detectType(filepath);\n    this.group = detectGroup(this, opt);\n\n    // for custom frameworks\n    if (opt.customFramework == true) {\n        this.customFramework = true;\n        this.dirname = path.dirname(filepath).replace(/\\\\/g, '/');\n    }\n\n    this.path = defaultPath(this, filepath).replace(/\\\\/g, '/');\n    this.fileEncoding = this.defaultEncoding = opt.defaultEncoding || defaultEncoding(this);\n\n    // When referencing products / build output files\n    if (opt.explicitFileType) {\n        this.explicitFileType = opt.explicitFileType;\n        this.basename = this.basename + '.' + defaultExtension(this);\n        delete this.path;\n        delete this.lastKnownFileType;\n        delete this.group;\n        delete this.defaultEncoding;\n    }\n\n    this.sourceTree = opt.sourceTree || detectSourcetree(this);\n    this.includeInIndex = 0;\n\n    if (opt.weak && opt.weak === true)\n        this.settings = { ATTRIBUTES: ['Weak'] };\n\n    if (opt.compilerFlags) {\n        if (!this.settings)\n            this.settings = {};\n        this.settings.COMPILER_FLAGS = util.format('\"%s\"', opt.compilerFlags);\n    }\n\n    if (opt.embed && opt.sign) {\n      if (!this.settings)\n          this.settings = {};\n      if (!this.settings.ATTRIBUTES)\n          this.settings.ATTRIBUTES = [];\n      this.settings.ATTRIBUTES.push('CodeSignOnCopy');\n    }\n}\n\nmodule.exports = pbxFile;\n"]},"metadata":{},"sourceType":"script"}