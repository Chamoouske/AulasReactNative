{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _execa() {\n  var data = _interopRequireDefault(require(\"execa\"));\n\n  _execa = function _execa() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _checkInstallation = require(\"../checkInstallation\");\n\nvar _installPods = require(\"../../../tools/installPods\");\n\nvar _common = require(\"./common\");\n\nvar _brewInstall = require(\"../../../tools/brewInstall\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar label = 'CocoaPods';\nvar _default = {\n  label: label,\n  description: 'Required for installing iOS dependencies',\n  getDiagnostics: function getDiagnostics() {\n    return _regeneratorRuntime.async(function getDiagnostics$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap((0, _checkInstallation.isSoftwareNotInstalled)('pod'));\n\n          case 2:\n            _context.t0 = _context.sent;\n            return _context.abrupt(\"return\", {\n              needsToBeFixed: _context.t0\n            });\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  runAutomaticFix: function runAutomaticFix(_ref) {\n    var loader, _await, installMethod, promptQuestion, installMethodCapitalized, loaderInstallationMessage, loaderSucceedMessage, options;\n\n    return _regeneratorRuntime.async(function runAutomaticFix$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            loader = _ref.loader;\n            loader.stop();\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap((0, _installPods.promptCocoaPodsInstallationQuestion)());\n\n          case 4:\n            _await = _context2.sent;\n            installMethod = _await.installMethod;\n            promptQuestion = _await.promptQuestion;\n            installMethodCapitalized = installMethod === 'homebrew' ? installMethod.substr(0, 1).toUpperCase() + installMethod.substr(1) : installMethod;\n            loaderInstallationMessage = label + \" (installing with \" + installMethodCapitalized + \")\";\n            loaderSucceedMessage = label + \" (installed with \" + installMethodCapitalized + \")\";\n            (0, _common.removeMessage)(promptQuestion);\n\n            if (!(installMethod === 'gem')) {\n              _context2.next = 31;\n              break;\n            }\n\n            loader.start(loaderInstallationMessage);\n            options = ['install', 'cocoapods', '--no-document'];\n            _context2.prev = 14;\n            _context2.next = 17;\n            return _regeneratorRuntime.awrap((0, _execa().default)('gem', options));\n\n          case 17:\n            return _context2.abrupt(\"return\", loader.succeed(loaderSucceedMessage));\n\n          case 20:\n            _context2.prev = 20;\n            _context2.t0 = _context2[\"catch\"](14);\n            _context2.prev = 22;\n            _context2.next = 25;\n            return _regeneratorRuntime.awrap((0, _installPods.runSudo)(\"gem \" + options.join(' ')));\n\n          case 25:\n            return _context2.abrupt(\"return\", loader.succeed(loaderSucceedMessage));\n\n          case 28:\n            _context2.prev = 28;\n            _context2.t1 = _context2[\"catch\"](22);\n            (0, _common.logError)({\n              healthcheck: label,\n              loader: loader,\n              error: _context2.t1,\n              command: 'sudo gem install cocoapods'\n            });\n\n          case 31:\n            if (!(installMethod === 'homebrew')) {\n              _context2.next = 35;\n              break;\n            }\n\n            _context2.next = 34;\n            return _regeneratorRuntime.awrap((0, _brewInstall.brewInstall)({\n              pkg: 'cocoapods',\n              label: loaderInstallationMessage,\n              loader: loader,\n              onSuccess: function onSuccess() {\n                return loader.succeed(loaderSucceedMessage);\n              }\n            }));\n\n          case 34:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 35:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[14, 20], [22, 28]], Promise);\n  }\n};\nexports.default = _default;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli/build/commands/doctor/healthchecks/cocoaPods.js"],"names":["Object","defineProperty","exports","value","default","_execa","data","_interopRequireDefault","require","_checkInstallation","_installPods","_common","_brewInstall","obj","__esModule","label","_default","description","getDiagnostics","isSoftwareNotInstalled","needsToBeFixed","runAutomaticFix","loader","stop","promptCocoaPodsInstallationQuestion","installMethod","promptQuestion","installMethodCapitalized","substr","toUpperCase","loaderInstallationMessage","loaderSucceedMessage","removeMessage","start","options","succeed","runSudo","join","logError","healthcheck","error","command","brewInstall","pkg","onSuccess"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _execa() {\n  const data = _interopRequireDefault(require(\"execa\"));\n\n  _execa = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _checkInstallation = require(\"../checkInstallation\");\n\nvar _installPods = require(\"../../../tools/installPods\");\n\nvar _common = require(\"./common\");\n\nvar _brewInstall = require(\"../../../tools/brewInstall\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst label = 'CocoaPods';\nvar _default = {\n  label,\n  description: 'Required for installing iOS dependencies',\n  getDiagnostics: async () => ({\n    needsToBeFixed: await (0, _checkInstallation.isSoftwareNotInstalled)('pod')\n  }),\n  runAutomaticFix: async ({\n    loader\n  }) => {\n    loader.stop();\n    const {\n      installMethod,\n      promptQuestion\n    } = await (0, _installPods.promptCocoaPodsInstallationQuestion)(); // Capitalise `Homebrew` when printing on the screen\n\n    const installMethodCapitalized = installMethod === 'homebrew' ? installMethod.substr(0, 1).toUpperCase() + installMethod.substr(1) : installMethod;\n    const loaderInstallationMessage = `${label} (installing with ${installMethodCapitalized})`;\n    const loaderSucceedMessage = `${label} (installed with ${installMethodCapitalized})`; // Remove the prompt after the question of how to install CocoaPods is answered\n\n    (0, _common.removeMessage)(promptQuestion);\n\n    if (installMethod === 'gem') {\n      loader.start(loaderInstallationMessage);\n      const options = ['install', 'cocoapods', '--no-document'];\n\n      try {\n        // First attempt to install `cocoapods`\n        await (0, _execa().default)('gem', options);\n        return loader.succeed(loaderSucceedMessage);\n      } catch (_error) {\n        // If that doesn't work then try with sudo\n        try {\n          await (0, _installPods.runSudo)(`gem ${options.join(' ')}`);\n          return loader.succeed(loaderSucceedMessage);\n        } catch (error) {\n          (0, _common.logError)({\n            healthcheck: label,\n            loader,\n            error,\n            command: 'sudo gem install cocoapods'\n          });\n        }\n      }\n    }\n\n    if (installMethod === 'homebrew') {\n      return await (0, _brewInstall.brewInstall)({\n        pkg: 'cocoapods',\n        label: loaderInstallationMessage,\n        loader,\n        onSuccess: () => loader.succeed(loaderSucceedMessage)\n      });\n    }\n  }\n};\nexports.default = _default;\n\n//# sourceMappingURL=cocoaPods.js.map"]},"metadata":{},"sourceType":"script"}