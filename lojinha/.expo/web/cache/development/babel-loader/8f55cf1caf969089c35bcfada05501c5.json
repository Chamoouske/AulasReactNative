{"ast":null,"code":"'use strict';\n\nfunction getCommandOptions(commandOptionsExpression) {\n  if (commandOptionsExpression == null) {\n    return null;\n  }\n\n  var foundOptions;\n\n  try {\n    foundOptions = commandOptionsExpression.properties.reduce(function (options, prop) {\n      options[prop.key.name] = (prop && prop.value && prop.value.elements || []).map(function (element) {\n        return element && element.value;\n      });\n      return options;\n    }, {});\n  } catch (e) {\n    throw new Error('Failed to parse command options, please check that they are defined correctly');\n  }\n\n  return foundOptions;\n}\n\nfunction getOptions(optionsExpression) {\n  if (!optionsExpression) {\n    return null;\n  }\n\n  var foundOptions;\n\n  try {\n    foundOptions = optionsExpression.properties.reduce(function (options, prop) {\n      options[prop.key.name] = prop.value.value;\n      return options;\n    }, {});\n  } catch (e) {\n    throw new Error('Failed to parse codegen options, please check that they are defined correctly');\n  }\n\n  if (foundOptions.paperComponentName && foundOptions.paperComponentNameDeprecated) {\n    throw new Error('Failed to parse codegen options, cannot use both paperComponentName and paperComponentNameDeprecated');\n  }\n\n  return foundOptions;\n}\n\nmodule.exports = {\n  getCommandOptions: getCommandOptions,\n  getOptions: getOptions\n};","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/components/options.js"],"names":["getCommandOptions","commandOptionsExpression","foundOptions","properties","reduce","options","prop","key","name","value","elements","map","element","e","Error","getOptions","optionsExpression","paperComponentName","paperComponentNameDeprecated","module","exports"],"mappings":"AAUA;;AAWA,SAASA,iBAAT,CACEC,wBADF,EAEmB;AACjB,MAAIA,wBAAwB,IAAI,IAAhC,EAAsC;AACpC,WAAO,IAAP;AACD;;AAED,MAAIC,YAAJ;;AACA,MAAI;AACFA,IAAAA,YAAY,GAAGD,wBAAwB,CAACE,UAAzB,CAAoCC,MAApC,CACb,UAACC,OAAD,EAAUC,IAAV,EAAmB;AACjBD,MAAAA,OAAO,CAACC,IAAI,CAACC,GAAL,CAASC,IAAV,CAAP,GAAyB,CACtBF,IAAI,IAAIA,IAAI,CAACG,KAAb,IAAsBH,IAAI,CAACG,KAAL,CAAWC,QAAlC,IACA,EAFuB,EAGvBC,GAHuB,CAGnB,UAAAC,OAAO;AAAA,eAAIA,OAAO,IAAIA,OAAO,CAACH,KAAvB;AAAA,OAHY,CAAzB;AAIA,aAAOJ,OAAP;AACD,KAPY,EAQb,EARa,CAAf;AAUD,GAXD,CAWE,OAAOQ,CAAP,EAAU;AACV,UAAM,IAAIC,KAAJ,CACJ,+EADI,CAAN;AAGD;;AAED,SAAOZ,YAAP;AACD;;AAED,SAASa,UAAT,CAAoBC,iBAApB,EAAkE;AAChE,MAAI,CAACA,iBAAL,EAAwB;AACtB,WAAO,IAAP;AACD;;AACD,MAAId,YAAJ;;AACA,MAAI;AACFA,IAAAA,YAAY,GAAGc,iBAAiB,CAACb,UAAlB,CAA6BC,MAA7B,CAAoC,UAACC,OAAD,EAAUC,IAAV,EAAmB;AACpED,MAAAA,OAAO,CAACC,IAAI,CAACC,GAAL,CAASC,IAAV,CAAP,GAAyBF,IAAI,CAACG,KAAL,CAAWA,KAApC;AACA,aAAOJ,OAAP;AACD,KAHc,EAGZ,EAHY,CAAf;AAID,GALD,CAKE,OAAOQ,CAAP,EAAU;AACV,UAAM,IAAIC,KAAJ,CACJ,+EADI,CAAN;AAGD;;AAED,MACEZ,YAAY,CAACe,kBAAb,IACAf,YAAY,CAACgB,4BAFf,EAGE;AACA,UAAM,IAAIJ,KAAJ,CACJ,sGADI,CAAN;AAGD;;AAED,SAAOZ,YAAP;AACD;;AAEDiB,MAAM,CAACC,OAAP,GAAiB;AACfpB,EAAAA,iBAAiB,EAAjBA,iBADe;AAEfe,EAAAA,UAAU,EAAVA;AAFe,CAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport type {OptionsShape} from '../../../CodegenSchema.js';\n\n// $FlowFixMe there's no flowtype for ASTs\ntype OptionsAST = Object;\n\nexport type CommandOptions = $ReadOnly<{|\n  supportedCommands: $ReadOnlyArray<string>,\n|}>;\n\nfunction getCommandOptions(\n  commandOptionsExpression: OptionsAST,\n): ?CommandOptions {\n  if (commandOptionsExpression == null) {\n    return null;\n  }\n\n  let foundOptions;\n  try {\n    foundOptions = commandOptionsExpression.properties.reduce(\n      (options, prop) => {\n        options[prop.key.name] = (\n          (prop && prop.value && prop.value.elements) ||\n          []\n        ).map(element => element && element.value);\n        return options;\n      },\n      {},\n    );\n  } catch (e) {\n    throw new Error(\n      'Failed to parse command options, please check that they are defined correctly',\n    );\n  }\n\n  return foundOptions;\n}\n\nfunction getOptions(optionsExpression: OptionsAST): ?OptionsShape {\n  if (!optionsExpression) {\n    return null;\n  }\n  let foundOptions;\n  try {\n    foundOptions = optionsExpression.properties.reduce((options, prop) => {\n      options[prop.key.name] = prop.value.value;\n      return options;\n    }, {});\n  } catch (e) {\n    throw new Error(\n      'Failed to parse codegen options, please check that they are defined correctly',\n    );\n  }\n\n  if (\n    foundOptions.paperComponentName &&\n    foundOptions.paperComponentNameDeprecated\n  ) {\n    throw new Error(\n      'Failed to parse codegen options, cannot use both paperComponentName and paperComponentNameDeprecated',\n    );\n  }\n\n  return foundOptions;\n}\n\nmodule.exports = {\n  getCommandOptions,\n  getOptions,\n};\n"]},"metadata":{},"sourceType":"script"}