{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _extends = require(\"@babel/runtime/helpers/extends\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar android_plugins_1 = require(\"../plugins/android-plugins\");\n\nvar XML_1 = require(\"../utils/XML\");\n\nvar errors_1 = require(\"../utils/errors\");\n\nvar Manifest_1 = require(\"./Manifest\");\n\nvar Resources_1 = require(\"./Resources\");\n\nvar Strings_1 = require(\"./Strings\");\n\nvar CUSTOM_TAB_ACTIVITY = 'com.facebook.CustomTabActivity';\nvar STRING_FACEBOOK_APP_ID = 'facebook_app_id';\nvar META_APP_ID = 'com.facebook.sdk.ApplicationId';\nvar META_APP_NAME = 'com.facebook.sdk.ApplicationName';\nvar META_AUTO_INIT = 'com.facebook.sdk.AutoInitEnabled';\nvar META_AUTO_LOG_APP_EVENTS = 'com.facebook.sdk.AutoLogAppEventsEnabled';\nvar META_AD_ID_COLLECTION = 'com.facebook.sdk.AdvertiserIDCollectionEnabled';\nexports.withFacebookAppIdString = android_plugins_1.createStringsXmlPlugin(applyFacebookAppIdString, 'withFacebookAppIdString');\nexports.withFacebookManifest = android_plugins_1.createAndroidManifestPlugin(setFacebookConfig, 'withFacebookManifest');\n\nfunction buildXMLItem(_ref) {\n  var head = _ref.head,\n      children = _ref.children;\n  return _extends(_extends({}, children !== null && children !== void 0 ? children : {}), {\n    $: head\n  });\n}\n\nfunction buildAndroidItem(datum) {\n  var item = typeof datum === 'string' ? {\n    name: datum\n  } : datum;\n  var head = Manifest_1.prefixAndroidKeys(item);\n  return buildXMLItem({\n    head: head\n  });\n}\n\nfunction getFacebookSchemeActivity(scheme) {\n  return buildXMLItem({\n    head: Manifest_1.prefixAndroidKeys({\n      name: CUSTOM_TAB_ACTIVITY,\n      exported: 'true'\n    }),\n    children: {\n      'intent-filter': [{\n        action: [buildAndroidItem('android.intent.action.VIEW')],\n        category: [buildAndroidItem('android.intent.category.DEFAULT'), buildAndroidItem('android.intent.category.BROWSABLE')],\n        data: [buildAndroidItem({\n          scheme: scheme\n        })]\n      }]\n    }\n  });\n}\n\nfunction getFacebookScheme(config) {\n  var _a;\n\n  return (_a = config.facebookScheme) !== null && _a !== void 0 ? _a : null;\n}\n\nexports.getFacebookScheme = getFacebookScheme;\n\nfunction getFacebookAppId(config) {\n  var _a;\n\n  return (_a = config.facebookAppId) !== null && _a !== void 0 ? _a : null;\n}\n\nexports.getFacebookAppId = getFacebookAppId;\n\nfunction getFacebookDisplayName(config) {\n  var _a;\n\n  return (_a = config.facebookDisplayName) !== null && _a !== void 0 ? _a : null;\n}\n\nexports.getFacebookDisplayName = getFacebookDisplayName;\n\nfunction getFacebookAutoInitEnabled(config) {\n  var _a;\n\n  return (_a = config.facebookAutoInitEnabled) !== null && _a !== void 0 ? _a : null;\n}\n\nexports.getFacebookAutoInitEnabled = getFacebookAutoInitEnabled;\n\nfunction getFacebookAutoLogAppEvents(config) {\n  var _a;\n\n  return (_a = config.facebookAutoLogAppEventsEnabled) !== null && _a !== void 0 ? _a : null;\n}\n\nexports.getFacebookAutoLogAppEvents = getFacebookAutoLogAppEvents;\n\nfunction getFacebookAdvertiserIDCollection(config) {\n  var _a;\n\n  return (_a = config.facebookAdvertiserIDCollectionEnabled) !== null && _a !== void 0 ? _a : null;\n}\n\nexports.getFacebookAdvertiserIDCollection = getFacebookAdvertiserIDCollection;\n\nfunction ensureFacebookActivity(_ref2) {\n  var mainApplication = _ref2.mainApplication,\n      scheme = _ref2.scheme;\n\n  if (Array.isArray(mainApplication.activity)) {\n    mainApplication.activity = mainApplication.activity.filter(function (activity) {\n      var _a;\n\n      return ((_a = activity.$) === null || _a === void 0 ? void 0 : _a['android:name']) !== CUSTOM_TAB_ACTIVITY;\n    });\n  } else {\n    mainApplication.activity = [];\n  }\n\n  if (scheme) {\n    mainApplication.activity.push(getFacebookSchemeActivity(scheme));\n  }\n\n  return mainApplication;\n}\n\nfunction setFacebookAppIdString(config, projectRoot) {\n  var stringsPath, stringsJSON;\n  return _regeneratorRuntime.async(function setFacebookAppIdString$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(Strings_1.getProjectStringsXMLPathAsync(projectRoot));\n\n        case 2:\n          stringsPath = _context.sent;\n          errors_1.assert(stringsPath, \"There was a problem setting your Facebook App ID in \\\"\" + stringsPath + \"\\\"\");\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(Resources_1.readResourcesXMLAsync({\n            path: stringsPath\n          }));\n\n        case 6:\n          stringsJSON = _context.sent;\n          stringsJSON = applyFacebookAppIdString(config, stringsJSON);\n          _context.prev = 8;\n          _context.next = 11;\n          return _regeneratorRuntime.awrap(XML_1.writeXMLAsync({\n            path: stringsPath,\n            xml: stringsJSON\n          }));\n\n        case 11:\n          _context.next = 16;\n          break;\n\n        case 13:\n          _context.prev = 13;\n          _context.t0 = _context[\"catch\"](8);\n          throw new Error(\"Error setting facebookAppId. Cannot write strings.xml to \\\"\" + stringsPath + \"\\\"\");\n\n        case 16:\n          return _context.abrupt(\"return\", true);\n\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[8, 13]], Promise);\n}\n\nexports.setFacebookAppIdString = setFacebookAppIdString;\n\nfunction applyFacebookAppIdString(config, stringsJSON) {\n  var appId = getFacebookAppId(config);\n\n  if (appId) {\n    return Strings_1.setStringItem([Resources_1.buildResourceItem({\n      name: STRING_FACEBOOK_APP_ID,\n      value: appId\n    })], stringsJSON);\n  }\n\n  return Strings_1.removeStringItem(STRING_FACEBOOK_APP_ID, stringsJSON);\n}\n\nfunction setFacebookConfig(config, androidManifest) {\n  var scheme = getFacebookScheme(config);\n  var appId = getFacebookAppId(config);\n  var displayName = getFacebookDisplayName(config);\n  var autoInitEnabled = getFacebookAutoInitEnabled(config);\n  var autoLogAppEvents = getFacebookAutoLogAppEvents(config);\n  var advertiserIdCollection = getFacebookAdvertiserIDCollection(config);\n  var mainApplication = Manifest_1.getMainApplicationOrThrow(androidManifest);\n  mainApplication = ensureFacebookActivity({\n    scheme: scheme,\n    mainApplication: mainApplication\n  });\n\n  if (appId) {\n    mainApplication = Manifest_1.addMetaDataItemToMainApplication(mainApplication, META_APP_ID, \"@string/\" + STRING_FACEBOOK_APP_ID);\n  } else {\n    mainApplication = Manifest_1.removeMetaDataItemFromMainApplication(mainApplication, META_APP_ID);\n  }\n\n  if (displayName) {\n    mainApplication = Manifest_1.addMetaDataItemToMainApplication(mainApplication, META_APP_NAME, displayName);\n  } else {\n    mainApplication = Manifest_1.removeMetaDataItemFromMainApplication(mainApplication, META_APP_NAME);\n  }\n\n  if (autoInitEnabled !== null) {\n    mainApplication = Manifest_1.addMetaDataItemToMainApplication(mainApplication, META_AUTO_INIT, autoInitEnabled ? 'true' : 'false');\n  } else {\n    mainApplication = Manifest_1.removeMetaDataItemFromMainApplication(mainApplication, META_AUTO_INIT);\n  }\n\n  if (autoLogAppEvents !== null) {\n    mainApplication = Manifest_1.addMetaDataItemToMainApplication(mainApplication, META_AUTO_LOG_APP_EVENTS, autoLogAppEvents ? 'true' : 'false');\n  } else {\n    mainApplication = Manifest_1.removeMetaDataItemFromMainApplication(mainApplication, META_AUTO_LOG_APP_EVENTS);\n  }\n\n  if (advertiserIdCollection !== null) {\n    mainApplication = Manifest_1.addMetaDataItemToMainApplication(mainApplication, META_AD_ID_COLLECTION, advertiserIdCollection ? 'true' : 'false');\n  } else {\n    mainApplication = Manifest_1.removeMetaDataItemFromMainApplication(mainApplication, META_AD_ID_COLLECTION);\n  }\n\n  return androidManifest;\n}\n\nexports.setFacebookConfig = setFacebookConfig;","map":{"version":3,"sources":["../../src/android/Facebook.ts"],"names":[],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { createAndroidManifestPlugin, createStringsXmlPlugin } from '../plugins/android-plugins';\nimport { writeXMLAsync } from '../utils/XML';\nimport { assert } from '../utils/errors';\nimport {\n  addMetaDataItemToMainApplication,\n  AndroidManifest,\n  getMainApplicationOrThrow,\n  ManifestActivity,\n  ManifestApplication,\n  prefixAndroidKeys,\n  removeMetaDataItemFromMainApplication,\n} from './Manifest';\nimport { buildResourceItem, readResourcesXMLAsync, ResourceXML } from './Resources';\nimport { getProjectStringsXMLPathAsync, removeStringItem, setStringItem } from './Strings';\n\nconst CUSTOM_TAB_ACTIVITY = 'com.facebook.CustomTabActivity';\nconst STRING_FACEBOOK_APP_ID = 'facebook_app_id';\nconst META_APP_ID = 'com.facebook.sdk.ApplicationId';\nconst META_APP_NAME = 'com.facebook.sdk.ApplicationName';\nconst META_AUTO_INIT = 'com.facebook.sdk.AutoInitEnabled';\nconst META_AUTO_LOG_APP_EVENTS = 'com.facebook.sdk.AutoLogAppEventsEnabled';\nconst META_AD_ID_COLLECTION = 'com.facebook.sdk.AdvertiserIDCollectionEnabled';\n\nexport const withFacebookAppIdString = createStringsXmlPlugin(\n  applyFacebookAppIdString,\n  'withFacebookAppIdString'\n);\nexport const withFacebookManifest = createAndroidManifestPlugin(\n  setFacebookConfig,\n  'withFacebookManifest'\n);\n\nfunction buildXMLItem({\n  head,\n  children,\n}: {\n  head: Record<string, string>;\n  children?: Record<string, string | any[]>;\n}) {\n  return { ...(children ?? {}), $: head };\n}\n\nfunction buildAndroidItem(datum: string | Record<string, any>) {\n  const item = typeof datum === 'string' ? { name: datum } : datum;\n  const head = prefixAndroidKeys(item);\n  return buildXMLItem({ head });\n}\n\nfunction getFacebookSchemeActivity(scheme: string) {\n  /**\n <activity\n    android:name=\"com.facebook.CustomTabActivity\"\n    android:exported=\"true\">\n    <intent-filter>\n        <action android:name=\"android.intent.action.VIEW\" />\n        <category android:name=\"android.intent.category.DEFAULT\" />\n        <category android:name=\"android.intent.category.BROWSABLE\" />\n        <data android:scheme=\"${scheme}\" />\n    </intent-filter>\n</activity>\n   */\n  return buildXMLItem({\n    head: prefixAndroidKeys({\n      name: CUSTOM_TAB_ACTIVITY,\n      exported: 'true',\n    }),\n    children: {\n      'intent-filter': [\n        {\n          action: [buildAndroidItem('android.intent.action.VIEW')],\n          category: [\n            buildAndroidItem('android.intent.category.DEFAULT'),\n            buildAndroidItem('android.intent.category.BROWSABLE'),\n          ],\n          data: [buildAndroidItem({ scheme })],\n        },\n      ],\n    },\n  }) as ManifestActivity;\n}\n\ntype ExpoConfigFacebook = Pick<\n  ExpoConfig,\n  | 'facebookScheme'\n  | 'facebookAdvertiserIDCollectionEnabled'\n  | 'facebookAppId'\n  | 'facebookAutoInitEnabled'\n  | 'facebookAutoLogAppEventsEnabled'\n  | 'facebookDisplayName'\n>;\n\nexport function getFacebookScheme(config: ExpoConfigFacebook) {\n  return config.facebookScheme ?? null;\n}\n\nexport function getFacebookAppId(config: ExpoConfigFacebook) {\n  return config.facebookAppId ?? null;\n}\n\nexport function getFacebookDisplayName(config: ExpoConfigFacebook) {\n  return config.facebookDisplayName ?? null;\n}\nexport function getFacebookAutoInitEnabled(config: ExpoConfigFacebook) {\n  return config.facebookAutoInitEnabled ?? null;\n}\n\nexport function getFacebookAutoLogAppEvents(config: ExpoConfigFacebook) {\n  return config.facebookAutoLogAppEventsEnabled ?? null;\n}\n\nexport function getFacebookAdvertiserIDCollection(config: ExpoConfigFacebook) {\n  return config.facebookAdvertiserIDCollectionEnabled ?? null;\n}\n\nfunction ensureFacebookActivity({\n  mainApplication,\n  scheme,\n}: {\n  mainApplication: ManifestApplication;\n  scheme: string | null;\n}) {\n  if (Array.isArray(mainApplication.activity)) {\n    // Remove all Facebook CustomTabActivities first\n    mainApplication.activity = mainApplication.activity.filter(activity => {\n      return activity.$?.['android:name'] !== CUSTOM_TAB_ACTIVITY;\n    });\n  } else {\n    mainApplication.activity = [];\n  }\n\n  // If a new scheme is defined, append it to the activity.\n  if (scheme) {\n    mainApplication.activity.push(getFacebookSchemeActivity(scheme));\n  }\n  return mainApplication;\n}\n\nexport async function setFacebookAppIdString(config: ExpoConfigFacebook, projectRoot: string) {\n  const stringsPath = await getProjectStringsXMLPathAsync(projectRoot);\n  assert(stringsPath, `There was a problem setting your Facebook App ID in \"${stringsPath}\"`);\n\n  let stringsJSON = await readResourcesXMLAsync({ path: stringsPath });\n  stringsJSON = applyFacebookAppIdString(config, stringsJSON);\n\n  try {\n    await writeXMLAsync({ path: stringsPath, xml: stringsJSON });\n  } catch {\n    throw new Error(`Error setting facebookAppId. Cannot write strings.xml to \"${stringsPath}\"`);\n  }\n  return true;\n}\n\nfunction applyFacebookAppIdString(config: ExpoConfigFacebook, stringsJSON: ResourceXML) {\n  const appId = getFacebookAppId(config);\n\n  if (appId) {\n    return setStringItem(\n      [buildResourceItem({ name: STRING_FACEBOOK_APP_ID, value: appId })],\n      stringsJSON\n    );\n  }\n  return removeStringItem(STRING_FACEBOOK_APP_ID, stringsJSON);\n}\n\nexport function setFacebookConfig(config: ExpoConfigFacebook, androidManifest: AndroidManifest) {\n  const scheme = getFacebookScheme(config);\n\n  const appId = getFacebookAppId(config);\n  const displayName = getFacebookDisplayName(config);\n  const autoInitEnabled = getFacebookAutoInitEnabled(config);\n  const autoLogAppEvents = getFacebookAutoLogAppEvents(config);\n  const advertiserIdCollection = getFacebookAdvertiserIDCollection(config);\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  let mainApplication = getMainApplicationOrThrow(androidManifest);\n\n  mainApplication = ensureFacebookActivity({ scheme, mainApplication });\n\n  if (appId) {\n    mainApplication = addMetaDataItemToMainApplication(\n      mainApplication,\n      META_APP_ID,\n      // The corresponding string is set in setFacebookAppIdString\n      `@string/${STRING_FACEBOOK_APP_ID}`\n    );\n  } else {\n    mainApplication = removeMetaDataItemFromMainApplication(mainApplication, META_APP_ID);\n  }\n  if (displayName) {\n    mainApplication = addMetaDataItemToMainApplication(mainApplication, META_APP_NAME, displayName);\n  } else {\n    mainApplication = removeMetaDataItemFromMainApplication(mainApplication, META_APP_NAME);\n  }\n  if (autoInitEnabled !== null) {\n    mainApplication = addMetaDataItemToMainApplication(\n      mainApplication,\n      META_AUTO_INIT,\n      autoInitEnabled ? 'true' : 'false'\n    );\n  } else {\n    mainApplication = removeMetaDataItemFromMainApplication(mainApplication, META_AUTO_INIT);\n  }\n  if (autoLogAppEvents !== null) {\n    mainApplication = addMetaDataItemToMainApplication(\n      mainApplication,\n      META_AUTO_LOG_APP_EVENTS,\n      autoLogAppEvents ? 'true' : 'false'\n    );\n  } else {\n    mainApplication = removeMetaDataItemFromMainApplication(\n      mainApplication,\n      META_AUTO_LOG_APP_EVENTS\n    );\n  }\n  if (advertiserIdCollection !== null) {\n    mainApplication = addMetaDataItemToMainApplication(\n      mainApplication,\n      META_AD_ID_COLLECTION,\n      advertiserIdCollection ? 'true' : 'false'\n    );\n  } else {\n    mainApplication = removeMetaDataItemFromMainApplication(mainApplication, META_AD_ID_COLLECTION);\n  }\n\n  return androidManifest;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}