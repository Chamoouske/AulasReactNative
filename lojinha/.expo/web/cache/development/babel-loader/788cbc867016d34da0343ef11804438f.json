{"ast":null,"code":"'use strict';","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native-web/src/vendor/react-native/Types/CoreEventTypes.js"],"names":[],"mappings":"AAUA","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\n'use strict';\n\nexport type SyntheticEvent<T> = $ReadOnly<{|\n  bubbles: ?boolean,\n  cancelable: ?boolean,\n  currentTarget: number,\n  defaultPrevented: ?boolean,\n  dispatchConfig: $ReadOnly<{|\n    registrationName: string,\n  |}>,\n  eventPhase: ?number,\n  preventDefault: () => void,\n  isDefaultPrevented: () => boolean,\n  stopPropagation: () => void,\n  isPropagationStopped: () => boolean,\n  isTrusted: ?boolean,\n  nativeEvent: T,\n  persist: () => void,\n  target: ?number,\n  timeStamp: number,\n  type: ?string,\n|}>;\n\nexport type ResponderSyntheticEvent<T> = $ReadOnly<{|\n  ...SyntheticEvent<T>,\n  touchHistory: $ReadOnly<{|\n    indexOfSingleActiveTouch: number,\n    mostRecentTimeStamp: number,\n    numberActiveTouches: number,\n    touchBank: $ReadOnlyArray<\n      $ReadOnly<{|\n        touchActive: boolean,\n        startPageX: number,\n        startPageY: number,\n        startTimeStamp: number,\n        currentPageX: number,\n        currentPageY: number,\n        currentTimeStamp: number,\n        previousPageX: number,\n        previousPageY: number,\n        previousTimeStamp: number,\n      |}>,\n    >,\n  |}>,\n|}>;\n\nexport type Layout = $ReadOnly<{|\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n|}>;\n\nexport type TextLayout = $ReadOnly<{|\n  ...Layout,\n  ascender: number,\n  capHeight: number,\n  descender: number,\n  text: string,\n  xHeight: number,\n|}>;\n\nexport type LayoutEvent = SyntheticEvent<\n  $ReadOnly<{|\n    layout: Layout,\n  |}>,\n>;\n\nexport type TextLayoutEvent = SyntheticEvent<\n  $ReadOnly<{|\n    lines: Array<TextLayout>,\n  |}>,\n>;\n\nexport type PressEvent = ResponderSyntheticEvent<\n  $ReadOnly<{|\n    changedTouches: $ReadOnlyArray<$PropertyType<PressEvent, 'nativeEvent'>>,\n    force: number,\n    identifier: number,\n    locationX: number,\n    locationY: number,\n    pageX: number,\n    pageY: number,\n    target: ?number,\n    timestamp: number,\n    touches: $ReadOnlyArray<$PropertyType<PressEvent, 'nativeEvent'>>,\n  |}>,\n>;\n\nexport type ScrollEvent = SyntheticEvent<\n  $ReadOnly<{|\n    contentInset: $ReadOnly<{|\n      bottom: number,\n      left: number,\n      right: number,\n      top: number,\n    |}>,\n    contentOffset: $ReadOnly<{|\n      y: number,\n      x: number,\n    |}>,\n    contentSize: $ReadOnly<{|\n      height: number,\n      width: number,\n    |}>,\n    layoutMeasurement: $ReadOnly<{|\n      height: number,\n      width: number,\n    |}>,\n    targetContentOffset?: $ReadOnly<{|\n      y: number,\n      x: number,\n    |}>,\n    velocity?: $ReadOnly<{|\n      y: number,\n      x: number,\n    |}>,\n    zoomScale?: number,\n    responderIgnoreScroll?: boolean,\n  |}>,\n>;\n\nexport type SwitchChangeEvent = SyntheticEvent<\n  $ReadOnly<{|\n    value: boolean,\n  |}>,\n>;\n"]},"metadata":{},"sourceType":"script"}