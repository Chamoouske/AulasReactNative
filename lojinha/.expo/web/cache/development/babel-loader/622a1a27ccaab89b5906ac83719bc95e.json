{"ast":null,"code":"#!/usr/bin/env node\n\nvar omit = require('lodash.omit');\n\nvar lodashTemplate = require('lodash.template');\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar yargs = require('yargs');\n\nvar _yargs$usage$demand$d = yargs.usage('Usage: $0 [options] path/to/codepoints \\nFor default template please provide --componentName and --fontFamily').demand(1).default('t', path.resolve(__dirname, '..', 'templates/bundled-icon-set.tpl')).describe('t', 'Template in lodash format').alias('t', 'template').describe('o', 'Save output to file, defaults to STDOUT').alias('o', 'output').describe('g', 'Save glyphmap JSON to file').alias('g', 'glyphmap'),\n    argv = _yargs$usage$demand$d.argv;\n\nfunction extractGlyphMapFromCodepoints(fileName) {\n  var codepoints = fs.readFileSync(fileName, {\n    encoding: 'utf8'\n  }).split('\\n');\n  var glyphMap = {};\n  codepoints.forEach(function (point) {\n    var parts = point.split(' ');\n\n    if (parts.length === 2) {\n      glyphMap[parts[0].replace(/_/g, '-')] = parseInt(parts[1], 16);\n    }\n  });\n  return glyphMap;\n}\n\nvar template;\n\nif (argv.template) {\n  template = fs.readFileSync(argv.template, {\n    encoding: 'utf8'\n  });\n}\n\nvar data = omit(argv, '_ $0 o output t template g glyphmap'.split(' '));\nvar glyphMap = extractGlyphMapFromCodepoints(argv._[0]);\nvar content = JSON.stringify(glyphMap, null, '  ');\n\nif (template) {\n  var compiled = lodashTemplate(template);\n  data = data || {};\n  data.glyphMap = content;\n  content = compiled(data);\n}\n\nif (argv.output) {\n  fs.writeFileSync(argv.output, content);\n} else {\n  console.log(content);\n}\n\nif (argv.glyphmap) {\n  fs.writeFileSync(argv.glyphmap, JSON.stringify(glyphMap, null, '  '));\n}","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@expo/vector-icons/build/vendor/react-native-vector-icons/bin/generate-material-icons.js"],"names":["omit","require","lodashTemplate","fs","path","yargs","usage","demand","default","resolve","__dirname","describe","alias","argv","extractGlyphMapFromCodepoints","fileName","codepoints","readFileSync","encoding","split","glyphMap","forEach","point","parts","length","replace","parseInt","template","data","_","content","JSON","stringify","compiled","output","writeFileSync","console","log","glyphmap"],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n/* eslint-disable no-console */\n\nconst omit = require('lodash.omit');\nconst lodashTemplate = require('lodash.template');\nconst fs = require('fs');\nconst path = require('path');\nconst yargs = require('yargs');\n\nconst { argv } = yargs\n  .usage(\n    'Usage: $0 [options] path/to/codepoints \\nFor default template please provide --componentName and --fontFamily'\n  )\n  .demand(1)\n  .default('t', path.resolve(__dirname, '..', 'templates/bundled-icon-set.tpl'))\n  .describe('t', 'Template in lodash format')\n  .alias('t', 'template')\n  .describe('o', 'Save output to file, defaults to STDOUT')\n  .alias('o', 'output')\n  .describe('g', 'Save glyphmap JSON to file')\n  .alias('g', 'glyphmap');\n\nfunction extractGlyphMapFromCodepoints(fileName) {\n  const codepoints = fs\n    .readFileSync(fileName, { encoding: 'utf8' })\n    .split('\\n');\n  const glyphMap = {};\n  codepoints.forEach(point => {\n    const parts = point.split(' ');\n    if (parts.length === 2) {\n      glyphMap[parts[0].replace(/_/g, '-')] = parseInt(parts[1], 16);\n    }\n  });\n\n  return glyphMap;\n}\n\nlet template;\nif (argv.template) {\n  template = fs.readFileSync(argv.template, { encoding: 'utf8' });\n}\n\nlet data = omit(argv, '_ $0 o output t template g glyphmap'.split(' '));\nconst glyphMap = extractGlyphMapFromCodepoints(argv._[0]);\n\nlet content = JSON.stringify(glyphMap, null, '  ');\nif (template) {\n  const compiled = lodashTemplate(template);\n  data = data || {};\n  data.glyphMap = content;\n  content = compiled(data);\n}\n\nif (argv.output) {\n  fs.writeFileSync(argv.output, content);\n} else {\n  console.log(content);\n}\n\nif (argv.glyphmap) {\n  fs.writeFileSync(argv.glyphmap, JSON.stringify(glyphMap, null, '  '));\n}\n"]},"metadata":{},"sourceType":"script"}