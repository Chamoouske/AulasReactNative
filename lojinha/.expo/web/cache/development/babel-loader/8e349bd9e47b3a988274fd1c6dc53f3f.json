{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar path = __importStar(require(\"path\"));\n\nvar xcode_1 = __importDefault(require(\"xcode\"));\n\nvar Paths_1 = require(\"./Paths\");\n\nfunction getProjectConfig(projectRoot) {\n  return {\n    projectPath: Paths_1.getAllXcodeProjectPaths(projectRoot)[0],\n    pbxprojPath: Paths_1.getAllPBXProjectPaths(projectRoot)[0]\n  };\n}\n\nfunction readPbxProject(projectRootPath) {\n  var config, xcodeProjPath, pbxprojPath, projectPath, projectName, pbxProject, applicationNativeTarget;\n  return _regeneratorRuntime.async(function readPbxProject$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          config = getProjectConfig(projectRootPath);\n          xcodeProjPath = config.projectPath, pbxprojPath = config.pbxprojPath;\n          projectPath = xcodeProjPath.substring(0, xcodeProjPath.length - '.xcodeproj'.length);\n          projectName = path.basename(projectPath);\n          pbxProject = xcode_1.default.project(pbxprojPath);\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(new Promise(function (resolve) {\n            return pbxProject.parse(function (err) {\n              if (err) {\n                throw new Error(\".pbxproj file parsing issue: \" + err.message + \".\");\n              }\n\n              resolve();\n            });\n          }));\n\n        case 7:\n          applicationNativeTarget = Paths_1.getApplicationNativeTarget({\n            project: pbxProject,\n            projectName: projectName\n          });\n          return _context.abrupt(\"return\", {\n            projectName: projectName,\n            projectPath: projectPath,\n            pbxProject: pbxProject,\n            applicationNativeTarget: applicationNativeTarget\n          });\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.default = readPbxProject;","map":{"version":3,"sources":["../../src/ios/pbxproj.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,IAAA,GAAA,YAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;AACA,IAAA,OAAA,GAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AAEA,IAAA,OAAA,GAAA,OAAA,WAAA;;AAsBA,SAAS,gBAAT,CAA0B,WAA1B,EAA6C;AAC3C,SAAO;AACL,IAAA,WAAW,EAAE,OAAA,CAAA,uBAAA,CAAwB,WAAxB,EAAqC,CAArC,CADR;AAEL,IAAA,WAAW,EAAE,OAAA,CAAA,qBAAA,CAAsB,WAAtB,EAAmC,CAAnC;AAFR,GAAP;AAID;;AAKc,SAAe,cAAf,CAA8B,eAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AACP,UAAA,MADO,GACE,gBAAgB,CAAC,eAAD,CADlB;AAGQ,UAAA,aAHR,GAGuC,MAHvC,CAGL,WAHK,EAGuB,WAHvB,GAGuC,MAHvC,CAGuB,WAHvB;AAKP,UAAA,WALO,GAKO,aAAa,CAAC,SAAd,CAAwB,CAAxB,EAA2B,aAAa,CAAC,MAAd,GAAuB,aAAa,MAA/D,CALP;AAMP,UAAA,WANO,GAMO,IAAI,CAAC,QAAL,CAAc,WAAd,CANP;AAQP,UAAA,UARO,GAQM,OAAA,CAAA,OAAA,CAAM,OAAN,CAAc,WAAd,CARN;AAAA;AAAA,2CAUP,IAAI,OAAJ,CAAkB,UAAA,OAAO;AAAA,mBAC7B,UAAU,CAAC,KAAX,CAAiB,UAAA,GAAG,EAAG;AACrB,kBAAI,GAAJ,EAAS;AACP,sBAAM,IAAI,KAAJ,mCAA0C,GAAG,CAAC,OAA9C,OAAN;AACD;;AACD,cAAA,OAAO;AACR,aALD,CAD6B;AAAA,WAAzB,CAVO;;AAAA;AAmBP,UAAA,uBAnBO,GAmBmB,OAAA,CAAA,0BAAA,CAA2B;AAAE,YAAA,OAAO,EAAE,UAAX;AAAuB,YAAA,WAAW,EAAX;AAAvB,WAA3B,CAnBnB;AAAA,2CAqBN;AACL,YAAA,WAAW,EAAX,WADK;AAEL,YAAA,WAAW,EAAX,WAFK;AAGL,YAAA,UAAU,EAAV,UAHK;AAIL,YAAA,uBAAuB,EAAvB;AAJK,WArBM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAf,OAAA,CAAA,OAAA,GAAA,cAAA","sourcesContent":["import * as path from 'path';\nimport xcode, { PBXNativeTarget, UUID, XcodeProject } from 'xcode';\n\nimport {\n  getAllPBXProjectPaths,\n  getAllXcodeProjectPaths,\n  getApplicationNativeTarget,\n} from './Paths';\n\nexport interface IosProject {\n  projectName: string;\n  /**\n   * Root path to directory containing project source files.\n   */\n  projectPath: string;\n  /**\n   * pbxProject reference that allows to modify `.pbxproj` file.\n   */\n  pbxProject: XcodeProject;\n  /**\n   * main application PBXNativeTarget from `.pbxproj` file.\n   */\n  applicationNativeTarget: { uuid: UUID; target: PBXNativeTarget };\n}\n\nfunction getProjectConfig(projectRoot: string): { projectPath: string; pbxprojPath: string } {\n  return {\n    projectPath: getAllXcodeProjectPaths(projectRoot)[0]!,\n    pbxprojPath: getAllPBXProjectPaths(projectRoot)[0]!,\n  };\n}\n\n/**\n * Reads iOS project and locates `.pbxproj` file for further parsing and modifications.\n */\nexport default async function readPbxProject(projectRootPath: string): Promise<IosProject> {\n  const config = getProjectConfig(projectRootPath);\n\n  const { projectPath: xcodeProjPath, pbxprojPath } = config;\n\n  const projectPath = xcodeProjPath.substring(0, xcodeProjPath.length - '.xcodeproj'.length);\n  const projectName = path.basename(projectPath);\n\n  const pbxProject = xcode.project(pbxprojPath);\n\n  await new Promise<void>(resolve =>\n    pbxProject.parse(err => {\n      if (err) {\n        throw new Error(`.pbxproj file parsing issue: ${err.message}.`);\n      }\n      resolve();\n    })\n  );\n\n  const applicationNativeTarget = getApplicationNativeTarget({ project: pbxProject, projectName });\n\n  return {\n    projectName,\n    projectPath,\n    pbxProject,\n    applicationNativeTarget,\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}