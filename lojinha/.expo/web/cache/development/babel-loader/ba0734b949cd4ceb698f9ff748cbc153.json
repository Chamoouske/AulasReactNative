{"ast":null,"code":"#!/usr/bin/env node\n\nvar omit = require('lodash.omit');\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar yargs = require('yargs');\n\nvar generateIconSetFromCss = require(\"../lib/generate-icon-set-from-css\");\n\nvar _yargs$usage$demand$d = yargs.usage('Usage: $0 [options] path/to/styles.css \\nFor default template please provide --componentName and --fontFamily').demand(1).default('p', '.icon-').describe('p', 'CSS selector prefix').alias('p', 'prefix').default('t', path.resolve(__dirname, '..', 'templates/bundled-icon-set.tpl')).describe('t', 'Template in lodash format').alias('t', 'template').describe('o', 'Save output to file, defaults to STDOUT').alias('o', 'output').describe('g', 'Save glyphmap JSON to file').alias('g', 'glyphmap'),\n    argv = _yargs$usage$demand$d.argv;\n\nvar template;\n\nif (argv.template) {\n  template = fs.readFileSync(argv.template, {\n    encoding: 'utf8'\n  });\n}\n\nvar data = omit(argv, '_ $0 o output p prefix t template g glyphmap'.split(' '));\nvar content = generateIconSetFromCss(argv._, argv.prefix, template, data);\n\nif (argv.output) {\n  fs.writeFileSync(argv.output, content);\n} else {\n  console.log(content);\n}\n\nif (argv.glyphmap) {\n  fs.writeFileSync(argv.glyphmap, generateIconSetFromCss(argv._, argv.prefix));\n}","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@expo/vector-icons/build/vendor/react-native-vector-icons/bin/generate-icon.js"],"names":["omit","require","fs","path","yargs","generateIconSetFromCss","usage","demand","default","describe","alias","resolve","__dirname","argv","template","readFileSync","encoding","data","split","content","_","prefix","output","writeFileSync","console","log","glyphmap"],"mappings":"AAAA;;AAGA,IAAMA,IAAI,GAAGC,OAAO,CAAC,aAAD,CAApB;;AACA,IAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;;AACA,IAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMG,KAAK,GAAGH,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMI,sBAAsB,GAAGJ,OAAO,qCAAtC;;4BAEiBG,KAAK,CACnBE,KADc,CAEb,+GAFa,EAIdC,MAJc,CAIP,CAJO,EAKdC,OALc,CAKN,GALM,EAKD,QALC,EAMdC,QANc,CAML,GANK,EAMA,qBANA,EAOdC,KAPc,CAOR,GAPQ,EAOH,QAPG,EAQdF,OARc,CAQN,GARM,EAQDL,IAAI,CAACQ,OAAL,CAAaC,SAAb,EAAwB,IAAxB,EAA8B,gCAA9B,CARC,EASdH,QATc,CASL,GATK,EASA,2BATA,EAUdC,KAVc,CAUR,GAVQ,EAUH,UAVG,EAWdD,QAXc,CAWL,GAXK,EAWA,yCAXA,EAYdC,KAZc,CAYR,GAZQ,EAYH,QAZG,EAadD,QAbc,CAaL,GAbK,EAaA,4BAbA,EAcdC,KAdc,CAcR,GAdQ,EAcH,UAdG,C;IAATG,I,yBAAAA,I;;AAgBR,IAAIC,QAAJ;;AACA,IAAID,IAAI,CAACC,QAAT,EAAmB;AACjBA,EAAAA,QAAQ,GAAGZ,EAAE,CAACa,YAAH,CAAgBF,IAAI,CAACC,QAArB,EAA+B;AAAEE,IAAAA,QAAQ,EAAE;AAAZ,GAA/B,CAAX;AACD;;AAED,IAAMC,IAAI,GAAGjB,IAAI,CACfa,IADe,EAEf,+CAA+CK,KAA/C,CAAqD,GAArD,CAFe,CAAjB;AAKA,IAAMC,OAAO,GAAGd,sBAAsB,CAACQ,IAAI,CAACO,CAAN,EAASP,IAAI,CAACQ,MAAd,EAAsBP,QAAtB,EAAgCG,IAAhC,CAAtC;;AACA,IAAIJ,IAAI,CAACS,MAAT,EAAiB;AACfpB,EAAAA,EAAE,CAACqB,aAAH,CAAiBV,IAAI,CAACS,MAAtB,EAA8BH,OAA9B;AACD,CAFD,MAEO;AACLK,EAAAA,OAAO,CAACC,GAAR,CAAYN,OAAZ;AACD;;AAED,IAAIN,IAAI,CAACa,QAAT,EAAmB;AACjBxB,EAAAA,EAAE,CAACqB,aAAH,CAAiBV,IAAI,CAACa,QAAtB,EAAgCrB,sBAAsB,CAACQ,IAAI,CAACO,CAAN,EAASP,IAAI,CAACQ,MAAd,CAAtD;AACD","sourcesContent":["#!/usr/bin/env node\n/* eslint-disable no-console */\n\nconst omit = require('lodash.omit');\nconst fs = require('fs');\nconst path = require('path');\nconst yargs = require('yargs');\nconst generateIconSetFromCss = require('../lib/generate-icon-set-from-css');\n\nconst { argv } = yargs\n  .usage(\n    'Usage: $0 [options] path/to/styles.css \\nFor default template please provide --componentName and --fontFamily'\n  )\n  .demand(1)\n  .default('p', '.icon-')\n  .describe('p', 'CSS selector prefix')\n  .alias('p', 'prefix')\n  .default('t', path.resolve(__dirname, '..', 'templates/bundled-icon-set.tpl'))\n  .describe('t', 'Template in lodash format')\n  .alias('t', 'template')\n  .describe('o', 'Save output to file, defaults to STDOUT')\n  .alias('o', 'output')\n  .describe('g', 'Save glyphmap JSON to file')\n  .alias('g', 'glyphmap');\n\nlet template;\nif (argv.template) {\n  template = fs.readFileSync(argv.template, { encoding: 'utf8' });\n}\n\nconst data = omit(\n  argv,\n  '_ $0 o output p prefix t template g glyphmap'.split(' ')\n);\n\nconst content = generateIconSetFromCss(argv._, argv.prefix, template, data);\nif (argv.output) {\n  fs.writeFileSync(argv.output, content);\n} else {\n  console.log(content);\n}\n\nif (argv.glyphmap) {\n  fs.writeFileSync(argv.glyphmap, generateIconSetFromCss(argv._, argv.prefix));\n}\n"]},"metadata":{},"sourceType":"script"}