{"ast":null,"code":"","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["import { EventSubscription } from 'fbemitter';\nexport declare type LogLevel = 'debug' | 'info' | 'warn' | 'error';\nexport declare type LogEntryFields = {\n    shouldHide?: boolean;\n    groupDepth?: number;\n    groupCollapsed?: boolean;\n};\nexport declare type LogData = string | LogErrorData;\nexport declare type LogErrorData = {\n    message: string;\n    stack: string;\n};\ndeclare type TransportErrorListener = (event: {\n    error: Error;\n    response?: Response;\n}) => void;\ndeclare function enqueueRemoteLogAsync(level: LogLevel, additionalFields: LogEntryFields, data: unknown[]): Promise<void>;\ndeclare function addTransportErrorListener(listener: TransportErrorListener): EventSubscription;\ndeclare const _default: {\n    enqueueRemoteLogAsync: typeof enqueueRemoteLogAsync;\n    addTransportErrorListener: typeof addTransportErrorListener;\n};\nexport default _default;\n/**\n * Returns a promise that resolves when all entries in the log queue have been sent. This method is\n * intended for testing only.\n */\nexport declare function __waitForEmptyLogQueueAsync(): Promise<void>;\n"]},"metadata":{},"sourceType":"module"}