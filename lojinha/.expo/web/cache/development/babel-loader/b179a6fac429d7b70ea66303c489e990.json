{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nvar _jsxFileName = \"/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/RNTester/js/examples/OrientationChange/OrientationChangeExample.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar React = require('react');\n\nvar DeviceEventEmitter = require(\"react-native-web/dist/exports/DeviceEventEmitter\").default;\n\nvar Text = require(\"react-native-web/dist/exports/Text\").default;\n\nvar View = require(\"react-native-web/dist/exports/View\").default;\n\nvar OrientationChangeExample = function (_React$Component) {\n  _inherits(OrientationChangeExample, _React$Component);\n\n  var _super = _createSuper(OrientationChangeExample);\n\n  function OrientationChangeExample() {\n    var _this;\n\n    _classCallCheck(this, OrientationChangeExample);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      currentOrientation: '',\n      orientationDegrees: 0,\n      isLandscape: false\n    };\n\n    _this._onOrientationChange = function (orientation) {\n      _this.setState({\n        currentOrientation: orientation.name,\n        orientationDegrees: orientation.rotationDegrees,\n        isLandscape: orientation.isLandscape\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(OrientationChangeExample, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._orientationSubscription = DeviceEventEmitter.addListener('namedOrientationDidChange', this._onOrientationChange);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._orientationSubscription.remove();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 7\n        }\n      }, React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 9\n        }\n      }, JSON.stringify(this.state)));\n    }\n  }]);\n\n  return OrientationChangeExample;\n}(React.Component);\n\nexports.title = 'OrientationChangeExample';\nexports.description = 'listening to orientation changes';\nexports.examples = [{\n  title: 'OrientationChangeExample',\n  description: 'listening to device orientation changes',\n  render: function render() {\n    return React.createElement(OrientationChangeExample, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 14\n      }\n    });\n  }\n}];","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/RNTester/js/examples/OrientationChange/OrientationChangeExample.js"],"names":["React","require","OrientationChangeExample","state","currentOrientation","orientationDegrees","isLandscape","_onOrientationChange","orientation","setState","name","rotationDegrees","_orientationSubscription","DeviceEventEmitter","addListener","remove","JSON","stringify","Component","exports","title","description","examples","render"],"mappings":"AAUA;;;;;;;;;;;;;;;;;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;;;;;;;IAMMC,wB;;;;;;;;;;;;;;;UAGJC,K,GAAQ;AACNC,MAAAA,kBAAkB,EAAE,EADd;AAENC,MAAAA,kBAAkB,EAAE,CAFd;AAGNC,MAAAA,WAAW,EAAE;AAHP,K;;UAiBRC,oB,GAAuB,UAACC,WAAD,EAAyB;AAC9C,YAAKC,QAAL,CAAc;AACZL,QAAAA,kBAAkB,EAAEI,WAAW,CAACE,IADpB;AAEZL,QAAAA,kBAAkB,EAAEG,WAAW,CAACG,eAFpB;AAGZL,QAAAA,WAAW,EAAEE,WAAW,CAACF;AAHb,OAAd;AAKD,K;;;;;;;WAjBD,6BAAoB;AAClB,WAAKM,wBAAL,GAAgCC,kBAAkB,CAACC,WAAnB,CAC9B,2BAD8B,EAE9B,KAAKP,oBAFyB,CAAhC;AAID;;;WAED,gCAAuB;AACrB,WAAKK,wBAAL,CAA8BG,MAA9B;AACD;;;WAUD,kBAAS;AACP,aACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAOC,IAAI,CAACC,SAAL,CAAe,KAAKd,KAApB,CAAP,CADF,CADF;AAKD;;;;EAlCoCH,KAAK,CAACkB,S;;AAqC7CC,OAAO,CAACC,KAAR,GAAgB,0BAAhB;AACAD,OAAO,CAACE,WAAR,GAAsB,kCAAtB;AACAF,OAAO,CAACG,QAAR,GAAmB,CACjB;AACEF,EAAAA,KAAK,EAAE,0BADT;AAEEC,EAAAA,WAAW,EAAE,yCAFf;AAGEE,EAAAA,MAHF,oBAGuB;AACnB,WAAO,oBAAC,wBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;AALH,CADiB,CAAnB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst React = require('react');\n\nconst {DeviceEventEmitter, Text, View} = require('react-native');\n\nimport type EmitterSubscription from '../../../../Libraries/vendor/emitter/EmitterSubscription';\n\nclass OrientationChangeExample extends React.Component<{...}, $FlowFixMeState> {\n  _orientationSubscription: EmitterSubscription;\n\n  state = {\n    currentOrientation: '',\n    orientationDegrees: 0,\n    isLandscape: false,\n  };\n\n  componentDidMount() {\n    this._orientationSubscription = DeviceEventEmitter.addListener(\n      'namedOrientationDidChange',\n      this._onOrientationChange,\n    );\n  }\n\n  componentWillUnmount() {\n    this._orientationSubscription.remove();\n  }\n\n  _onOrientationChange = (orientation: Object) => {\n    this.setState({\n      currentOrientation: orientation.name,\n      orientationDegrees: orientation.rotationDegrees,\n      isLandscape: orientation.isLandscape,\n    });\n  };\n\n  render() {\n    return (\n      <View>\n        <Text>{JSON.stringify(this.state)}</Text>\n      </View>\n    );\n  }\n}\n\nexports.title = 'OrientationChangeExample';\nexports.description = 'listening to orientation changes';\nexports.examples = [\n  {\n    title: 'OrientationChangeExample',\n    description: 'listening to device orientation changes',\n    render(): React.Node {\n      return <OrientationChangeExample />;\n    },\n  },\n];\n"]},"metadata":{},"sourceType":"script"}