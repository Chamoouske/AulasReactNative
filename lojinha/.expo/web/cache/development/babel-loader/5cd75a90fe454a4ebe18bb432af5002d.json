{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@expo/vector-icons/build/vendor/react-native-vector-icons/RNIMigration.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent } from 'react';\nimport FontAwesome from \"@expo/vector-icons/FontAwesome\";\nimport Foundation from \"@expo/vector-icons/Foundation\";\nimport Ionicons from \"@expo/vector-icons/Ionicons\";\nimport MaterialIcons from \"@expo/vector-icons/MaterialIcons\";\nimport Zocial from \"@expo/vector-icons/Zocial\";\nimport SimpleLineIcons from \"@expo/vector-icons/SimpleLineIcons\";\nvar ICON_SET_MAP = {\n  fontawesome: FontAwesome,\n  foundation: Foundation,\n  ion: Ionicons,\n  material: MaterialIcons,\n  zocial: Zocial,\n  simpleline: SimpleLineIcons\n};\n\nvar Icon = function (_PureComponent) {\n  _inherits(Icon, _PureComponent);\n\n  var _super = _createSuper(Icon);\n\n  function Icon() {\n    var _this;\n\n    _classCallCheck(this, Icon);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.iconRef = null;\n\n    _this.handleComponentRef = function (ref) {\n      _this.iconRef = ref;\n    };\n\n    return _this;\n  }\n\n  _createClass(Icon, [{\n    key: \"setNativeProps\",\n    value: function setNativeProps(nativeProps) {\n      if (this.iconRef) {\n        this.iconRef.setNativeProps(nativeProps);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var nameParts = this.props.name.split('|');\n      var setName = nameParts[0];\n      var name = nameParts[1];\n      var IconSet = ICON_SET_MAP[setName];\n\n      if (!IconSet) {\n        throw new Error(\"Invalid icon set \\\"\" + setName + \"\\\"\");\n      }\n\n      return React.createElement(IconSet, _extends({\n        allowFontScaling: false,\n        ref: this.handleComponentRef\n      }, this.props, {\n        name: name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 7\n        }\n      }));\n    }\n  }]);\n\n  return Icon;\n}(PureComponent);\n\nexport { Icon as default };","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@expo/vector-icons/build/vendor/react-native-vector-icons/RNIMigration.js"],"names":["React","PureComponent","FontAwesome","Foundation","Ionicons","MaterialIcons","Zocial","SimpleLineIcons","ICON_SET_MAP","fontawesome","foundation","ion","material","zocial","simpleline","Icon","iconRef","handleComponentRef","ref","nativeProps","setNativeProps","nameParts","props","name","split","setName","IconSet","Error"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,OAAOC,WAAP;AACA,OAAOC,UAAP;AACA,OAAOC,QAAP;AACA,OAAOC,aAAP;AACA,OAAOC,MAAP;AACA,OAAOC,eAAP;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,WAAW,EAAEP,WADM;AAEnBQ,EAAAA,UAAU,EAAEP,UAFO;AAGnBQ,EAAAA,GAAG,EAAEP,QAHc;AAInBQ,EAAAA,QAAQ,EAAEP,aAJS;AAKnBQ,EAAAA,MAAM,EAAEP,MALW;AAMnBQ,EAAAA,UAAU,EAAEP;AANO,CAArB;;IAWqBQ,I;;;;;;;;;;;;;;;UAOnBC,O,GAAU,I;;UAEVC,kB,GAAqB,UAAAC,GAAG,EAAI;AAC1B,YAAKF,OAAL,GAAeE,GAAf;AACD,K;;;;;;;WAVD,wBAAeC,WAAf,EAA4B;AAC1B,UAAI,KAAKH,OAAT,EAAkB;AAChB,aAAKA,OAAL,CAAaI,cAAb,CAA4BD,WAA5B;AACD;AACF;;;WAQD,kBAAS;AACP,UAAME,SAAS,GAAG,KAAKC,KAAL,CAAWC,IAAX,CAAgBC,KAAhB,CAAsB,GAAtB,CAAlB;AACA,UAAMC,OAAO,GAAGJ,SAAS,CAAC,CAAD,CAAzB;AACA,UAAME,IAAI,GAAGF,SAAS,CAAC,CAAD,CAAtB;AAEA,UAAMK,OAAO,GAAGlB,YAAY,CAACiB,OAAD,CAA5B;;AACA,UAAI,CAACC,OAAL,EAAc;AACZ,cAAM,IAAIC,KAAJ,yBAA+BF,OAA/B,QAAN;AACD;;AAED,aACE,oBAAC,OAAD;AACE,QAAA,gBAAgB,EAAE,KADpB;AAEE,QAAA,GAAG,EAAE,KAAKR;AAFZ,SAGM,KAAKK,KAHX;AAIE,QAAA,IAAI,EAAEC,IAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF;AAQD;;;;EA/B+BtB,a;;SAAbc,I","sourcesContent":["import React, { PureComponent } from 'react';\nimport FontAwesome from 'react-native-vector-icons/FontAwesome';\nimport Foundation from 'react-native-vector-icons/Foundation';\nimport Ionicons from 'react-native-vector-icons/Ionicons';\nimport MaterialIcons from 'react-native-vector-icons/MaterialIcons';\nimport Zocial from 'react-native-vector-icons/Zocial';\nimport SimpleLineIcons from 'react-native-vector-icons/SimpleLineIcons';\n\nconst ICON_SET_MAP = {\n  fontawesome: FontAwesome,\n  foundation: Foundation,\n  ion: Ionicons,\n  material: MaterialIcons,\n  zocial: Zocial,\n  simpleline: SimpleLineIcons,\n};\n\n// This is a composition is a drop in replacement for users migrating from the\n// react-native-icons module. Please don't use this component for new apps/views.\nexport default class Icon extends PureComponent {\n  setNativeProps(nativeProps) {\n    if (this.iconRef) {\n      this.iconRef.setNativeProps(nativeProps);\n    }\n  }\n\n  iconRef = null;\n\n  handleComponentRef = ref => {\n    this.iconRef = ref;\n  };\n\n  render() {\n    const nameParts = this.props.name.split('|');\n    const setName = nameParts[0];\n    const name = nameParts[1];\n\n    const IconSet = ICON_SET_MAP[setName];\n    if (!IconSet) {\n      throw new Error(`Invalid icon set \"${setName}\"`);\n    }\n\n    return (\n      <IconSet\n        allowFontScaling={false}\n        ref={this.handleComponentRef}\n        {...this.props}\n        name={name}\n      />\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}