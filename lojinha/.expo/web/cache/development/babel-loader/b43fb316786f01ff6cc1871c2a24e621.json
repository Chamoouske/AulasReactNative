{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native-web/src/exports/ScrollView/ScrollViewBase.js\";\n\nimport * as React from 'react';\nimport { forwardRef, useRef } from 'react';\nimport StyleSheet from \"../StyleSheet\";\nimport View from \"../View\";\n\nfunction normalizeScrollEvent(e) {\n  return {\n    nativeEvent: {\n      contentOffset: {\n        get x() {\n          return e.target.scrollLeft;\n        },\n\n        get y() {\n          return e.target.scrollTop;\n        }\n\n      },\n      contentSize: {\n        get height() {\n          return e.target.scrollHeight;\n        },\n\n        get width() {\n          return e.target.scrollWidth;\n        }\n\n      },\n      layoutMeasurement: {\n        get height() {\n          return e.target.offsetHeight;\n        },\n\n        get width() {\n          return e.target.offsetWidth;\n        }\n\n      }\n    },\n    timeStamp: Date.now()\n  };\n}\n\nfunction shouldEmitScrollEvent(lastTick, eventThrottle) {\n  var timeSinceLastTick = Date.now() - lastTick;\n  return eventThrottle > 0 && timeSinceLastTick >= eventThrottle;\n}\n\nvar ScrollViewBase = forwardRef(function (props, forwardedRef) {\n  var accessibilityLabel = props.accessibilityLabel,\n      accessibilityRole = props.accessibilityRole,\n      accessibilityState = props.accessibilityState,\n      children = props.children,\n      importantForAccessibility = props.importantForAccessibility,\n      nativeID = props.nativeID,\n      onLayout = props.onLayout,\n      onScroll = props.onScroll,\n      onTouchMove = props.onTouchMove,\n      onWheel = props.onWheel,\n      pointerEvents = props.pointerEvents,\n      _props$scrollEnabled = props.scrollEnabled,\n      scrollEnabled = _props$scrollEnabled === void 0 ? true : _props$scrollEnabled,\n      _props$scrollEventThr = props.scrollEventThrottle,\n      scrollEventThrottle = _props$scrollEventThr === void 0 ? 0 : _props$scrollEventThr,\n      showsHorizontalScrollIndicator = props.showsHorizontalScrollIndicator,\n      showsVerticalScrollIndicator = props.showsVerticalScrollIndicator,\n      style = props.style,\n      dataSet = props.dataSet,\n      testID = props.testID;\n  var scrollState = useRef({\n    isScrolling: false,\n    scrollLastTick: 0\n  });\n  var scrollTimeout = useRef(null);\n\n  function createPreventableScrollHandler(handler) {\n    return function (e) {\n      if (scrollEnabled) {\n        if (handler) {\n          handler(e);\n        }\n      }\n    };\n  }\n\n  function handleScroll(e) {\n    e.persist();\n    e.stopPropagation();\n\n    if (scrollTimeout.current != null) {\n      clearTimeout(scrollTimeout.current);\n    }\n\n    scrollTimeout.current = setTimeout(function () {\n      handleScrollEnd(e);\n    }, 100);\n\n    if (scrollState.current.isScrolling) {\n      if (shouldEmitScrollEvent(scrollState.current.scrollLastTick, scrollEventThrottle)) {\n        handleScrollTick(e);\n      }\n    } else {\n      handleScrollStart(e);\n    }\n  }\n\n  function handleScrollStart(e) {\n    scrollState.current.isScrolling = true;\n    scrollState.current.scrollLastTick = Date.now();\n  }\n\n  function handleScrollTick(e) {\n    scrollState.current.scrollLastTick = Date.now();\n\n    if (onScroll) {\n      onScroll(normalizeScrollEvent(e));\n    }\n  }\n\n  function handleScrollEnd(e) {\n    scrollState.current.isScrolling = false;\n\n    if (onScroll) {\n      onScroll(normalizeScrollEvent(e));\n    }\n  }\n\n  var hideScrollbar = showsHorizontalScrollIndicator === false || showsVerticalScrollIndicator === false;\n  return React.createElement(View, {\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: accessibilityRole,\n    accessibilityState: accessibilityState,\n    children: children,\n    dataSet: dataSet,\n    importantForAccessibility: importantForAccessibility,\n    nativeID: nativeID,\n    onLayout: onLayout,\n    onScroll: handleScroll,\n    onTouchMove: createPreventableScrollHandler(onTouchMove),\n    onWheel: createPreventableScrollHandler(onWheel),\n    pointerEvents: pointerEvents,\n    ref: forwardedRef,\n    style: [style, !scrollEnabled && styles.scrollDisabled, hideScrollbar && styles.hideScrollbar],\n    testID: testID,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 5\n    }\n  });\n});\nvar styles = StyleSheet.create({\n  scrollDisabled: {\n    overflowX: 'hidden',\n    overflowY: 'hidden',\n    touchAction: 'none'\n  },\n  hideScrollbar: {\n    scrollbarWidth: 'none'\n  }\n});\nexport default ScrollViewBase;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native-web/src/exports/ScrollView/ScrollViewBase.js"],"names":["React","forwardRef","useRef","StyleSheet","View","normalizeScrollEvent","e","nativeEvent","contentOffset","x","target","scrollLeft","y","scrollTop","contentSize","height","scrollHeight","width","scrollWidth","layoutMeasurement","offsetHeight","offsetWidth","timeStamp","Date","now","shouldEmitScrollEvent","lastTick","eventThrottle","timeSinceLastTick","ScrollViewBase","props","forwardedRef","accessibilityLabel","accessibilityRole","accessibilityState","children","importantForAccessibility","nativeID","onLayout","onScroll","onTouchMove","onWheel","pointerEvents","scrollEnabled","scrollEventThrottle","showsHorizontalScrollIndicator","showsVerticalScrollIndicator","style","dataSet","testID","scrollState","isScrolling","scrollLastTick","scrollTimeout","createPreventableScrollHandler","handler","handleScroll","persist","stopPropagation","current","clearTimeout","setTimeout","handleScrollEnd","handleScrollTick","handleScrollStart","hideScrollbar","styles","scrollDisabled","create","overflowX","overflowY","touchAction","scrollbarWidth"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type { ViewProps } from '../View';\n\nimport * as React from 'react';\nimport { forwardRef, useRef } from 'react';\nimport StyleSheet from '../StyleSheet';\nimport View from '../View';\n\ntype Props = {\n  ...ViewProps,\n  onMomentumScrollBegin?: (e: any) => void,\n  onMomentumScrollEnd?: (e: any) => void,\n  onScroll?: (e: any) => void,\n  onScrollBeginDrag?: (e: any) => void,\n  onScrollEndDrag?: (e: any) => void,\n  onTouchMove?: (e: any) => void,\n  onWheel?: (e: any) => void,\n  scrollEnabled?: boolean,\n  scrollEventThrottle?: number,\n  showsHorizontalScrollIndicator?: boolean,\n  showsVerticalScrollIndicator?: boolean\n};\n\nfunction normalizeScrollEvent(e) {\n  return {\n    nativeEvent: {\n      contentOffset: {\n        get x() {\n          return e.target.scrollLeft;\n        },\n        get y() {\n          return e.target.scrollTop;\n        }\n      },\n      contentSize: {\n        get height() {\n          return e.target.scrollHeight;\n        },\n        get width() {\n          return e.target.scrollWidth;\n        }\n      },\n      layoutMeasurement: {\n        get height() {\n          return e.target.offsetHeight;\n        },\n        get width() {\n          return e.target.offsetWidth;\n        }\n      }\n    },\n    timeStamp: Date.now()\n  };\n}\n\nfunction shouldEmitScrollEvent(lastTick: number, eventThrottle: number) {\n  const timeSinceLastTick = Date.now() - lastTick;\n  return eventThrottle > 0 && timeSinceLastTick >= eventThrottle;\n}\n\n/**\n * Encapsulates the Web-specific scroll throttling and disabling logic\n */\nconst ScrollViewBase = forwardRef<Props, *>((props, forwardedRef) => {\n  const {\n    accessibilityLabel,\n    accessibilityRole,\n    accessibilityState,\n    children,\n    importantForAccessibility,\n    nativeID,\n    onLayout,\n    onScroll,\n    onTouchMove,\n    onWheel,\n    pointerEvents,\n    scrollEnabled = true,\n    scrollEventThrottle = 0,\n    showsHorizontalScrollIndicator,\n    showsVerticalScrollIndicator,\n    style,\n    dataSet,\n    testID\n  } = props;\n\n  const scrollState = useRef({ isScrolling: false, scrollLastTick: 0 });\n  const scrollTimeout = useRef(null);\n\n  function createPreventableScrollHandler(handler: Function) {\n    return (e: Object) => {\n      if (scrollEnabled) {\n        if (handler) {\n          handler(e);\n        }\n      }\n    };\n  }\n\n  function handleScroll(e: Object) {\n    e.persist();\n    e.stopPropagation();\n    // A scroll happened, so the scroll resets the scrollend timeout.\n    if (scrollTimeout.current != null) {\n      clearTimeout(scrollTimeout.current);\n    }\n    scrollTimeout.current = setTimeout(() => {\n      handleScrollEnd(e);\n    }, 100);\n    if (scrollState.current.isScrolling) {\n      // Scroll last tick may have changed, check if we need to notify\n      if (shouldEmitScrollEvent(scrollState.current.scrollLastTick, scrollEventThrottle)) {\n        handleScrollTick(e);\n      }\n    } else {\n      // Weren't scrolling, so we must have just started\n      handleScrollStart(e);\n    }\n  }\n\n  function handleScrollStart(e: Object) {\n    scrollState.current.isScrolling = true;\n    scrollState.current.scrollLastTick = Date.now();\n  }\n\n  function handleScrollTick(e: Object) {\n    scrollState.current.scrollLastTick = Date.now();\n    if (onScroll) {\n      onScroll(normalizeScrollEvent(e));\n    }\n  }\n\n  function handleScrollEnd(e: Object) {\n    scrollState.current.isScrolling = false;\n    if (onScroll) {\n      onScroll(normalizeScrollEvent(e));\n    }\n  }\n\n  const hideScrollbar =\n    showsHorizontalScrollIndicator === false || showsVerticalScrollIndicator === false;\n\n  return (\n    <View\n      accessibilityLabel={accessibilityLabel}\n      accessibilityRole={accessibilityRole}\n      accessibilityState={accessibilityState}\n      children={children}\n      dataSet={dataSet}\n      importantForAccessibility={importantForAccessibility}\n      nativeID={nativeID}\n      onLayout={onLayout}\n      onScroll={handleScroll}\n      onTouchMove={createPreventableScrollHandler(onTouchMove)}\n      onWheel={createPreventableScrollHandler(onWheel)}\n      pointerEvents={pointerEvents}\n      ref={forwardedRef}\n      style={[\n        style,\n        !scrollEnabled && styles.scrollDisabled,\n        hideScrollbar && styles.hideScrollbar\n      ]}\n      testID={testID}\n    />\n  );\n});\n\n// Chrome doesn't support e.preventDefault in this case; touch-action must be\n// used to disable scrolling.\n// https://developers.google.com/web/updates/2017/01/scrolling-intervention\nconst styles = StyleSheet.create({\n  scrollDisabled: {\n    overflowX: 'hidden',\n    overflowY: 'hidden',\n    touchAction: 'none'\n  },\n  hideScrollbar: {\n    scrollbarWidth: 'none'\n  }\n});\n\nexport default ScrollViewBase;\n"]},"metadata":{},"sourceType":"module"}