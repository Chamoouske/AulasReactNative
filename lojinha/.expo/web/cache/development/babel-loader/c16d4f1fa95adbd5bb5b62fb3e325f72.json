{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateAndroidConfig = exports.validateIosConfig = exports.validateEnumValue = void 0;\n\nvar constants_1 = require(\"../constants\");\n\nvar FromJsonValidator_1 = __importDefault(require(\"./FromJsonValidator\"));\n\nvar utils_1 = require(\"./utils\");\n\nvar utils_2 = require(\"./utils\");\n\nObject.defineProperty(exports, \"validateEnumValue\", {\n  enumerable: true,\n  get: function get() {\n    return utils_2.validateEnumValue;\n  }\n});\n\nfunction validateIosConfig(config) {\n  var validator, validatedConfig;\n  return _regeneratorRuntime.async(function validateIosConfig$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          validator = new FromJsonValidator_1.default().addRule(['backgroundColor'], utils_1.validateColor).addRule(['image'], utils_1.validateFileIsPng).addRule(['imageResizeMode'], function (value, config) {\n            utils_1.ensurePropertyExists(config, ['image']);\n            var result = utils_1.generateValidateEnumValue(constants_1.SplashScreenImageResizeMode)(value);\n\n            if (result === constants_1.SplashScreenImageResizeMode.NATIVE) {\n              var _constants_1$SplashSc = constants_1.SplashScreenImageResizeMode,\n                  NATIVE = _constants_1$SplashSc.NATIVE,\n                  availableValues = _objectWithoutProperties(_constants_1$SplashSc, [\"NATIVE\"]);\n\n              throw new Error(\"Invalid value '\" + value + \"'. This value is not supported on iOS platform. Available values on iOS platform are \" + Object.values(availableValues).map(function (v) {\n                return \"\\\"\" + v + \"\\\"\";\n              }).join(' | ') + \".\");\n            }\n\n            return result;\n          }).addRule(['statusBar', 'hidden']).addRule(['statusBar', 'style'], utils_1.generateValidateEnumValue(constants_1.SplashScreenStatusBarStyle)).addRule(['darkMode', 'backgroundColor'], utils_1.validateColor).addRule(['darkMode', 'image'], function (value, config) {\n            utils_1.ensurePropertyExists(config, ['darkMode', 'backgroundColor']);\n            return utils_1.validateFileIsPng(value);\n          });\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(validator.validate(config));\n\n        case 3:\n          validatedConfig = _context.sent;\n          return _context.abrupt(\"return\", validatedConfig);\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.validateIosConfig = validateIosConfig;\n\nfunction validateAndroidConfig(config) {\n  var validator, validatedConfig;\n  return _regeneratorRuntime.async(function validateAndroidConfig$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          validator = new FromJsonValidator_1.default().addRule(['backgroundColor'], utils_1.validateColor).addRule(['image'], utils_1.validateFileIsPng).addRule(['imageResizeMode'], function (value, config) {\n            utils_1.ensurePropertyExists(config, ['image']);\n            return utils_1.generateValidateEnumValue(constants_1.SplashScreenImageResizeMode)(value);\n          }).addRule(['statusBar', 'hidden']).addRule(['statusBar', 'style'], utils_1.generateValidateEnumValue(constants_1.SplashScreenStatusBarStyle)).addRule(['statusBar', 'translucent']).addRule(['statusBar', 'backgroundColor'], utils_1.validateColor).addRule(['darkMode', 'backgroundColor'], utils_1.validateColor).addRule(['darkMode', 'image'], function (value, config) {\n            utils_1.ensurePropertyExists(config, ['darkMode', 'backgroundColor']);\n            return utils_1.validateFileIsPng(value);\n          }).addRule(['darkMode', 'statusBar', 'style'], function (value, config) {\n            utils_1.ensurePropertyExists(config, ['darkMode', 'backgroundColor']);\n            utils_1.ensurePropertyExists(config, ['statusBar', 'style']);\n            return utils_1.generateValidateEnumValue(constants_1.SplashScreenStatusBarStyle)(value);\n          }).addRule(['darkMode', 'statusBar', 'backgroundColor'], function (value, config) {\n            utils_1.ensurePropertyExists(config, ['darkMode', 'backgroundColor']);\n            utils_1.ensurePropertyExists(config, ['statusBar', 'backgroundColor']);\n            return utils_1.validateColor(value);\n          });\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(validator.validate(config));\n\n        case 3:\n          validatedConfig = _context2.sent;\n          return _context2.abrupt(\"return\", validatedConfig);\n\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.validateAndroidConfig = validateAndroidConfig;","map":{"version":3,"sources":["../../src/validators/index.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  IosSplashScreenConfigJSON,\n  IosSplashScreenConfig,\n  AndroidSplashScreenConfigJSON,\n  AndroidSplashScreenConfig,\n} from '../SplashScreenConfig';\nimport { SplashScreenImageResizeMode, SplashScreenStatusBarStyle } from '../constants';\nimport FromJsonValidator from './FromJsonValidator';\nimport {\n  validateColor,\n  validateFileIsPng,\n  ensurePropertyExists,\n  generateValidateEnumValue,\n} from './utils';\n\nexport { validateEnumValue } from './utils';\n\n/**\n * Validates given iOS configuration and converts it to it's semantically ready equivalent.\n * Ensures following generic config semantic requirements are met:\n * - `config.backgroundColor` is a valid css-formatted color,\n * - `config.imagePath` is pointing to a valid .png file,\n * - `config.imageResizeMode`\n *   - is provided only if `config.imagePath` is provided as well\n *   - and it's a recognizable value (one of `SplashScreenResizeMode`)\n *   - and its value isn't `SplashScreenImageResizeMode.NATIVE`\n *\n * - `config.statusBar.hidden` might exists\n * - `config.statusBar.style` is a recognizable value (one of `SplashScreenStatusBarStyle`),\n *\n * - `config.darkMode.backgroundColor` is a valid css-formatted color,\n * - `config.darkMode.imagePath`\n *   - is provided only if `config.darkMode.backgroundColor` is provided as well\n *   - and it's pointing to a valid .png file,\n */\nexport async function validateIosConfig(\n  config: IosSplashScreenConfigJSON\n): Promise<IosSplashScreenConfig> {\n  const validator = new FromJsonValidator<IosSplashScreenConfigJSON, IosSplashScreenConfig>()\n    .addRule(['backgroundColor'], validateColor)\n    .addRule(['image'], validateFileIsPng)\n    .addRule(['imageResizeMode'], (value, config) => {\n      ensurePropertyExists(config, ['image']);\n      const result = generateValidateEnumValue(SplashScreenImageResizeMode)(value);\n      if (result === SplashScreenImageResizeMode.NATIVE) {\n        const { NATIVE, ...availableValues } = SplashScreenImageResizeMode;\n        throw new Error(\n          `Invalid value '${value}'. This value is not supported on iOS platform. Available values on iOS platform are ${Object.values(\n            availableValues\n          )\n            .map(v => `\"${v}\"`)\n            .join(' | ')}.`\n        );\n      }\n      return result;\n    })\n    .addRule(['statusBar', 'hidden'])\n    .addRule(['statusBar', 'style'], generateValidateEnumValue(SplashScreenStatusBarStyle))\n    .addRule(['darkMode', 'backgroundColor'], validateColor)\n    .addRule(['darkMode', 'image'], (value, config) => {\n      ensurePropertyExists(config, ['darkMode', 'backgroundColor']);\n      return validateFileIsPng(value);\n    });\n\n  const validatedConfig = await validator.validate(config);\n  return validatedConfig;\n}\n\n/**\n * Validates given Android configuration and converts it to it's semantically ready equivalent.\n *\n * Ensures following generic config semantic requirements are met:\n * - `config.backgroundColor` is a valid css-formatted color,\n * - `config.imagePath` is pointing to a valid .png file,\n * - `config.imageResizeMode`\n *   - is provided only if `config.imagePath` is provided as well\n *   - and it's a recognizable value (one of `SplashScreenResizeMode`)\n *\n * - `config.statusBar.hidden` might exists,\n * - `config.statusBar.style` is a recognizable value (one of `SplashScreenStatusBarStyle`),\n * - `config.statusBar.translucent` might exist,\n * - `config.statusBar.backgroundColor` is a valid css-formatted color,\n *\n * - `config.darkMode.backgroundColor` is a valid css-formatted color,\n * - `config.darkMode.imagePath`\n *   - is provided only if `config.darkMode.backgroundColor` is provided as well\n *   - and it's pointing to a valid .png file,\n *\n * - `config.darkMode.statusBar.style`\n *    - is provided only if `config.darkMode.backgroundColor` is provided as well\n *    - and `config.statusBar.style` is provided as well\n *    - and it's a recognizable value (one of `SplashScreenStatusBarStyle`),\n * - `config.darkMode.statusBar.backgroundColor`\n *    - is provided only if `config.darkMode.backgroundColor` is provided as well\n *    - and `config.statusBar.backgroundColor` is provided as well\n *    - and it's a valid css-formatted color,\n */\nexport async function validateAndroidConfig(\n  config: AndroidSplashScreenConfigJSON\n): Promise<AndroidSplashScreenConfig> {\n  const validator = new FromJsonValidator<\n    AndroidSplashScreenConfigJSON,\n    AndroidSplashScreenConfig\n  >()\n    .addRule(['backgroundColor'], validateColor)\n    .addRule(['image'], validateFileIsPng)\n    .addRule(['imageResizeMode'], (value, config) => {\n      ensurePropertyExists(config, ['image']);\n      return generateValidateEnumValue(SplashScreenImageResizeMode)(value);\n    })\n    .addRule(['statusBar', 'hidden'])\n    .addRule(['statusBar', 'style'], generateValidateEnumValue(SplashScreenStatusBarStyle))\n    .addRule(['statusBar', 'translucent'])\n    .addRule(['statusBar', 'backgroundColor'], validateColor)\n    .addRule(['darkMode', 'backgroundColor'], validateColor)\n    .addRule(['darkMode', 'image'], (value, config) => {\n      ensurePropertyExists(config, ['darkMode', 'backgroundColor']);\n      return validateFileIsPng(value);\n    })\n    .addRule(['darkMode', 'statusBar', 'style'], (value, config) => {\n      ensurePropertyExists(config, ['darkMode', 'backgroundColor']);\n      ensurePropertyExists(config, ['statusBar', 'style']);\n      return generateValidateEnumValue(SplashScreenStatusBarStyle)(value);\n    })\n    .addRule(['darkMode', 'statusBar', 'backgroundColor'], (value, config) => {\n      ensurePropertyExists(config, ['darkMode', 'backgroundColor']);\n      ensurePropertyExists(config, ['statusBar', 'backgroundColor']);\n      return validateColor(value);\n    });\n\n  const validatedConfig = await validator.validate(config);\n  return validatedConfig;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}