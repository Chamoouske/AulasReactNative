{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.generateSourcemap = generateSourcemap;\nexports.findSourcemap = findSourcemap;\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _os() {\n  var data = _interopRequireDefault(require(\"os\"));\n\n  _os = function _os() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _ip() {\n  var data = _interopRequireDefault(require(\"ip\"));\n\n  _ip = function _ip() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getTempFilePath(filename) {\n  return _path().default.join(_os().default.tmpdir(), filename);\n}\n\nfunction writeJsonSync(targetPath, data) {\n  var json;\n\n  try {\n    json = JSON.stringify(data);\n  } catch (e) {\n    throw new (_cliTools().CLIError)(\"Failed to serialize data to json before writing to \" + targetPath, e);\n  }\n\n  try {\n    _fs().default.writeFileSync(targetPath, json, 'utf-8');\n  } catch (e) {\n    throw new (_cliTools().CLIError)(\"Failed to write json to \" + targetPath, e);\n  }\n}\n\nfunction getSourcemapFromServer(port) {\n  var DEBUG_SERVER_PORT, IP_ADDRESS, PLATFORM, requestURL, _await, data;\n\n  return _regeneratorRuntime.async(function getSourcemapFromServer$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _cliTools().logger.debug('Getting source maps from Metro packager server');\n\n          DEBUG_SERVER_PORT = port || '8081';\n          IP_ADDRESS = _ip().default.address();\n          PLATFORM = 'android';\n          requestURL = \"http://\" + IP_ADDRESS + \":\" + DEBUG_SERVER_PORT + \"/index.map?platform=\" + PLATFORM + \"&dev=true\";\n          _context.prev = 5;\n          _context.next = 8;\n          return _regeneratorRuntime.awrap((0, _cliTools().fetch)(requestURL));\n\n        case 8:\n          _await = _context.sent;\n          data = _await.data;\n          return _context.abrupt(\"return\", data);\n\n        case 13:\n          _context.prev = 13;\n          _context.t0 = _context[\"catch\"](5);\n\n          _cliTools().logger.debug(\"Failed to fetch source map from \\\"\" + requestURL + \"\\\"\");\n\n          return _context.abrupt(\"return\", undefined);\n\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[5, 13]], Promise);\n}\n\nfunction generateSourcemap(port) {\n  var sourceMapPath, sourceMapResult;\n  return _regeneratorRuntime.async(function generateSourcemap$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          sourceMapPath = getTempFilePath('index.map');\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(getSourcemapFromServer(port));\n\n        case 3:\n          sourceMapResult = _context2.sent;\n\n          if (!sourceMapResult) {\n            _context2.next = 11;\n            break;\n          }\n\n          _cliTools().logger.debug('Using source maps from Metro packager server');\n\n          writeJsonSync(sourceMapPath, sourceMapResult);\n\n          _cliTools().logger.debug(\"Successfully obtained the source map and stored it in \" + sourceMapPath);\n\n          return _context2.abrupt(\"return\", sourceMapPath);\n\n        case 11:\n          _cliTools().logger.error('Cannot obtain source maps from Metro packager server');\n\n          return _context2.abrupt(\"return\", undefined);\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction findSourcemap(ctx, port) {\n  var intermediateBuildPath, generatedBuildPath;\n  return _regeneratorRuntime.async(function findSourcemap$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          intermediateBuildPath = _path().default.join(ctx.root, 'android', 'app', 'build', 'intermediates', 'sourcemaps', 'react', 'debug', 'index.android.bundle.packager.map');\n          generatedBuildPath = _path().default.join(ctx.root, 'android', 'app', 'build', 'generated', 'sourcemaps', 'react', 'debug', 'index.android.bundle.map');\n\n          if (!_fs().default.existsSync(generatedBuildPath)) {\n            _context3.next = 7;\n            break;\n          }\n\n          _cliTools().logger.debug(\"Getting the source map from \" + generateSourcemap);\n\n          return _context3.abrupt(\"return\", generatedBuildPath);\n\n        case 7:\n          if (!_fs().default.existsSync(intermediateBuildPath)) {\n            _context3.next = 12;\n            break;\n          }\n\n          _cliTools().logger.debug(\"Getting the source map from \" + intermediateBuildPath);\n\n          return _context3.abrupt(\"return\", intermediateBuildPath);\n\n        case 12:\n          return _context3.abrupt(\"return\", generateSourcemap(port));\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli-hermes/build/profileHermes/sourcemapUtils.js"],"names":["Object","defineProperty","exports","value","generateSourcemap","findSourcemap","_cliTools","data","require","_fs","_interopRequireDefault","_path","_os","_ip","obj","__esModule","default","getTempFilePath","filename","join","tmpdir","writeJsonSync","targetPath","json","JSON","stringify","e","CLIError","writeFileSync","getSourcemapFromServer","port","logger","debug","DEBUG_SERVER_PORT","IP_ADDRESS","address","PLATFORM","requestURL","fetch","undefined","sourceMapPath","sourceMapResult","error","ctx","intermediateBuildPath","root","generatedBuildPath","existsSync"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.generateSourcemap = generateSourcemap;\nexports.findSourcemap = findSourcemap;\n\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _fs() {\n  const data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  const data = _interopRequireDefault(require(\"path\"));\n\n  _path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _os() {\n  const data = _interopRequireDefault(require(\"os\"));\n\n  _os = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _ip() {\n  const data = _interopRequireDefault(require(\"ip\"));\n\n  _ip = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction getTempFilePath(filename) {\n  return _path().default.join(_os().default.tmpdir(), filename);\n}\n\nfunction writeJsonSync(targetPath, data) {\n  let json;\n\n  try {\n    json = JSON.stringify(data);\n  } catch (e) {\n    throw new (_cliTools().CLIError)(`Failed to serialize data to json before writing to ${targetPath}`, e);\n  }\n\n  try {\n    _fs().default.writeFileSync(targetPath, json, 'utf-8');\n  } catch (e) {\n    throw new (_cliTools().CLIError)(`Failed to write json to ${targetPath}`, e);\n  }\n}\n\nasync function getSourcemapFromServer(port) {\n  _cliTools().logger.debug('Getting source maps from Metro packager server');\n\n  const DEBUG_SERVER_PORT = port || '8081';\n\n  const IP_ADDRESS = _ip().default.address();\n\n  const PLATFORM = 'android';\n  const requestURL = `http://${IP_ADDRESS}:${DEBUG_SERVER_PORT}/index.map?platform=${PLATFORM}&dev=true`;\n\n  try {\n    const {\n      data\n    } = await (0, _cliTools().fetch)(requestURL);\n    return data;\n  } catch (e) {\n    _cliTools().logger.debug(`Failed to fetch source map from \"${requestURL}\"`);\n\n    return undefined;\n  }\n}\n/**\n * Generate a sourcemap by fetching it from a running metro server\n */\n\n\nasync function generateSourcemap(port) {\n  // Fetch the source map to a temp directory\n  const sourceMapPath = getTempFilePath('index.map');\n  const sourceMapResult = await getSourcemapFromServer(port);\n\n  if (sourceMapResult) {\n    _cliTools().logger.debug('Using source maps from Metro packager server');\n\n    writeJsonSync(sourceMapPath, sourceMapResult);\n\n    _cliTools().logger.debug(`Successfully obtained the source map and stored it in ${sourceMapPath}`);\n\n    return sourceMapPath;\n  } else {\n    _cliTools().logger.error('Cannot obtain source maps from Metro packager server');\n\n    return undefined;\n  }\n}\n/**\n *\n * @param ctx\n */\n\n\nasync function findSourcemap(ctx, port) {\n  const intermediateBuildPath = _path().default.join(ctx.root, 'android', 'app', 'build', 'intermediates', 'sourcemaps', 'react', 'debug', 'index.android.bundle.packager.map');\n\n  const generatedBuildPath = _path().default.join(ctx.root, 'android', 'app', 'build', 'generated', 'sourcemaps', 'react', 'debug', 'index.android.bundle.map');\n\n  if (_fs().default.existsSync(generatedBuildPath)) {\n    _cliTools().logger.debug(`Getting the source map from ${generateSourcemap}`);\n\n    return generatedBuildPath;\n  } else if (_fs().default.existsSync(intermediateBuildPath)) {\n    _cliTools().logger.debug(`Getting the source map from ${intermediateBuildPath}`);\n\n    return intermediateBuildPath;\n  } else {\n    return generateSourcemap(port);\n  }\n}\n\n//# sourceMappingURL=sourcemapUtils.js.map"]},"metadata":{},"sourceType":"script"}