{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Paths_1 = require(\"./Paths\");\n\nfunction getProjectColorsXMLPathAsync(projectRoot) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      kind = _ref.kind;\n\n  return Paths_1.getResourceXMLPathAsync(projectRoot, {\n    kind: kind,\n    name: 'colors'\n  });\n}\n\nexports.getProjectColorsXMLPathAsync = getProjectColorsXMLPathAsync;\n\nfunction setColorItem(itemToAdd, colorFileContentsJSON) {\n  var _a;\n\n  if ((_a = colorFileContentsJSON.resources) === null || _a === void 0 ? void 0 : _a.color) {\n    var colorNameExists = colorFileContentsJSON.resources.color.filter(function (e) {\n      return e.$.name === itemToAdd.$.name;\n    })[0];\n\n    if (colorNameExists) {\n      colorNameExists._ = itemToAdd._;\n    } else {\n      colorFileContentsJSON.resources.color.push(itemToAdd);\n    }\n  } else {\n    if (!colorFileContentsJSON.resources || typeof colorFileContentsJSON.resources === 'string') {\n      colorFileContentsJSON.resources = {};\n    }\n\n    colorFileContentsJSON.resources.color = [itemToAdd];\n  }\n\n  return colorFileContentsJSON;\n}\n\nexports.setColorItem = setColorItem;\n\nfunction removeColorItem(named, contents) {\n  var _a;\n\n  if ((_a = contents.resources) === null || _a === void 0 ? void 0 : _a.color) {\n    var index = contents.resources.color.findIndex(function (e) {\n      return e.$.name === named;\n    });\n\n    if (index > -1) {\n      contents.resources.color.splice(index, 1);\n    }\n  }\n\n  return contents;\n}\n\nexports.removeColorItem = removeColorItem;","map":{"version":3,"sources":["../../src/android/Colors.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,OAAA,GAAA,OAAA,WAAA;;AAGA,SAAgB,4BAAhB,CACE,WADF,EAEwC;AAAA,iFAAF,EAAE;AAAA,MAApC,IAAoC,QAApC,IAAoC;;AAEtC,SAAO,OAAA,CAAA,uBAAA,CAAwB,WAAxB,EAAqC;AAAE,IAAA,IAAI,EAAJ,IAAF;AAAQ,IAAA,IAAI,EAAE;AAAd,GAArC,CAAP;AACD;;AALD,OAAA,CAAA,4BAAA,GAAA,4BAAA;;AAOA,SAAgB,YAAhB,CAA6B,SAA7B,EAAyD,qBAAzD,EAA2F;;;AACzF,MAAA,CAAA,EAAA,GAAI,qBAAqB,CAAC,SAA1B,MAAmC,IAAnC,IAAmC,EAAA,KAAA,KAAA,CAAnC,GAAmC,KAAA,CAAnC,GAAmC,EAAA,CAAE,KAArC,EAA4C;AAC1C,QAAM,eAAe,GAAG,qBAAqB,CAAC,SAAtB,CAAgC,KAAhC,CAAsC,MAAtC,CACtB,UAAC,CAAD;AAAA,aAAwB,CAAC,CAAC,CAAF,CAAI,IAAJ,KAAa,SAAS,CAAC,CAAV,CAAY,IAAjD;AAAA,KADsB,EAEtB,CAFsB,CAAxB;;AAGA,QAAI,eAAJ,EAAqB;AACnB,MAAA,eAAe,CAAC,CAAhB,GAAoB,SAAS,CAAC,CAA9B;AACD,KAFD,MAEO;AACL,MAAA,qBAAqB,CAAC,SAAtB,CAAgC,KAAhC,CAAsC,IAAtC,CAA2C,SAA3C;AACD;AACF,GATD,MASO;AACL,QAAI,CAAC,qBAAqB,CAAC,SAAvB,IAAoC,OAAO,qBAAqB,CAAC,SAA7B,KAA2C,QAAnF,EAA6F;AAE3F,MAAA,qBAAqB,CAAC,SAAtB,GAAkC,EAAlC;AACD;;AACD,IAAA,qBAAqB,CAAC,SAAtB,CAAgC,KAAhC,GAAwC,CAAC,SAAD,CAAxC;AACD;;AACD,SAAO,qBAAP;AACD;;AAlBD,OAAA,CAAA,YAAA,GAAA,YAAA;;AAoBA,SAAgB,eAAhB,CAAgC,KAAhC,EAA+C,QAA/C,EAAoE;;;AAClE,MAAA,CAAA,EAAA,GAAI,QAAQ,CAAC,SAAb,MAAsB,IAAtB,IAAsB,EAAA,KAAA,KAAA,CAAtB,GAAsB,KAAA,CAAtB,GAAsB,EAAA,CAAE,KAAxB,EAA+B;AAC7B,QAAM,KAAK,GAAG,QAAQ,CAAC,SAAT,CAAmB,KAAnB,CAAyB,SAAzB,CAAmC,UAAC,CAAD;AAAA,aAAwB,CAAC,CAAC,CAAF,CAAI,IAAJ,KAAa,KAArC;AAAA,KAAnC,CAAd;;AACA,QAAI,KAAK,GAAG,CAAC,CAAb,EAAgB;AAEd,MAAA,QAAQ,CAAC,SAAT,CAAmB,KAAnB,CAAyB,MAAzB,CAAgC,KAAhC,EAAuC,CAAvC;AACD;AACF;;AACD,SAAO,QAAP;AACD;;AATD,OAAA,CAAA,eAAA,GAAA,eAAA","sourcesContent":["import { getResourceXMLPathAsync } from './Paths';\nimport { ResourceItemXML, ResourceKind, ResourceXML } from './Resources';\n\nexport function getProjectColorsXMLPathAsync(\n  projectRoot: string,\n  { kind }: { kind?: ResourceKind } = {}\n) {\n  return getResourceXMLPathAsync(projectRoot, { kind, name: 'colors' });\n}\n\nexport function setColorItem(itemToAdd: ResourceItemXML, colorFileContentsJSON: ResourceXML) {\n  if (colorFileContentsJSON.resources?.color) {\n    const colorNameExists = colorFileContentsJSON.resources.color.filter(\n      (e: ResourceItemXML) => e.$.name === itemToAdd.$.name\n    )[0];\n    if (colorNameExists) {\n      colorNameExists._ = itemToAdd._;\n    } else {\n      colorFileContentsJSON.resources.color.push(itemToAdd);\n    }\n  } else {\n    if (!colorFileContentsJSON.resources || typeof colorFileContentsJSON.resources === 'string') {\n      //file was empty and JSON is `{resources : ''}`\n      colorFileContentsJSON.resources = {};\n    }\n    colorFileContentsJSON.resources.color = [itemToAdd];\n  }\n  return colorFileContentsJSON;\n}\n\nexport function removeColorItem(named: string, contents: ResourceXML) {\n  if (contents.resources?.color) {\n    const index = contents.resources.color.findIndex((e: ResourceItemXML) => e.$.name === named);\n    if (index > -1) {\n      // replace the previous value\n      contents.resources.color.splice(index, 1);\n    }\n  }\n  return contents;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}