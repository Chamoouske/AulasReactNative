{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _extends = require(\"@babel/runtime/helpers/extends\");\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar path = __importStar(require(\"path\"));\n\nvar resolve_from_1 = __importDefault(require(\"resolve-from\"));\n\nvar ios_plugins_1 = require(\"../plugins/ios-plugins\");\n\nvar CREATE_MANIFEST_IOS_PATH = 'expo-updates/scripts/create-manifest-ios.sh';\nvar Config;\n\n(function (Config) {\n  Config[\"ENABLED\"] = \"EXUpdatesEnabled\";\n  Config[\"CHECK_ON_LAUNCH\"] = \"EXUpdatesCheckOnLaunch\";\n  Config[\"LAUNCH_WAIT_MS\"] = \"EXUpdatesLaunchWaitMs\";\n  Config[\"RUNTIME_VERSION\"] = \"EXUpdatesRuntimeVersion\";\n  Config[\"SDK_VERSION\"] = \"EXUpdatesSDKVersion\";\n  Config[\"UPDATE_URL\"] = \"EXUpdatesURL\";\n  Config[\"RELEASE_CHANNEL\"] = \"EXUpdatesReleaseChannel\";\n})(Config = exports.Config || (exports.Config = {}));\n\nfunction getUpdateUrl(config, username) {\n  var user = typeof config.owner === 'string' ? config.owner : username;\n\n  if (!user) {\n    return null;\n  }\n\n  return \"https://exp.host/@\" + user + \"/\" + config.slug;\n}\n\nexports.getUpdateUrl = getUpdateUrl;\n\nfunction getRuntimeVersion(config) {\n  return typeof config.runtimeVersion === 'string' ? config.runtimeVersion : null;\n}\n\nexports.getRuntimeVersion = getRuntimeVersion;\n\nfunction getSDKVersion(config) {\n  return typeof config.sdkVersion === 'string' ? config.sdkVersion : null;\n}\n\nexports.getSDKVersion = getSDKVersion;\n\nfunction getUpdatesEnabled(config) {\n  var _a;\n\n  return ((_a = config.updates) === null || _a === void 0 ? void 0 : _a.enabled) !== false;\n}\n\nexports.getUpdatesEnabled = getUpdatesEnabled;\n\nfunction getUpdatesTimeout(config) {\n  var _a, _b;\n\n  return (_b = (_a = config.updates) === null || _a === void 0 ? void 0 : _a.fallbackToCacheTimeout) !== null && _b !== void 0 ? _b : 0;\n}\n\nexports.getUpdatesTimeout = getUpdatesTimeout;\n\nfunction getUpdatesCheckOnLaunch(config) {\n  var _a, _b;\n\n  if (((_a = config.updates) === null || _a === void 0 ? void 0 : _a.checkAutomatically) === 'ON_ERROR_RECOVERY') {\n    return 'NEVER';\n  } else if (((_b = config.updates) === null || _b === void 0 ? void 0 : _b.checkAutomatically) === 'ON_LOAD') {\n    return 'ALWAYS';\n  }\n\n  return 'ALWAYS';\n}\n\nexports.getUpdatesCheckOnLaunch = getUpdatesCheckOnLaunch;\n\nexports.withUpdates = function (config, _ref) {\n  var expoUsername = _ref.expoUsername;\n  return ios_plugins_1.withExpoPlist(config, function (config) {\n    config.modResults = setUpdatesConfig(config, config.modResults, expoUsername);\n    return config;\n  });\n};\n\nfunction setUpdatesConfig(config, expoPlist, username) {\n  var _extends2;\n\n  var newExpoPlist = _extends(_extends({}, expoPlist), (_extends2 = {}, _defineProperty(_extends2, Config.ENABLED, getUpdatesEnabled(config)), _defineProperty(_extends2, Config.CHECK_ON_LAUNCH, getUpdatesCheckOnLaunch(config)), _defineProperty(_extends2, Config.LAUNCH_WAIT_MS, getUpdatesTimeout(config)), _extends2));\n\n  var updateUrl = getUpdateUrl(config, username);\n\n  if (updateUrl) {\n    newExpoPlist[Config.UPDATE_URL] = updateUrl;\n  } else {\n    delete newExpoPlist[Config.UPDATE_URL];\n  }\n\n  return setVersionsConfig(config, newExpoPlist);\n}\n\nexports.setUpdatesConfig = setUpdatesConfig;\n\nfunction setVersionsConfig(config, expoPlist) {\n  var newExpoPlist = _extends({}, expoPlist);\n\n  var runtimeVersion = getRuntimeVersion(config);\n  var sdkVersion = getSDKVersion(config);\n\n  if (runtimeVersion) {\n    delete newExpoPlist[Config.SDK_VERSION];\n    newExpoPlist[Config.RUNTIME_VERSION] = runtimeVersion;\n  } else if (sdkVersion) {\n    delete newExpoPlist[Config.RUNTIME_VERSION];\n    newExpoPlist[Config.SDK_VERSION] = sdkVersion;\n  } else {\n    delete newExpoPlist[Config.SDK_VERSION];\n    delete newExpoPlist[Config.RUNTIME_VERSION];\n  }\n\n  return newExpoPlist;\n}\n\nexports.setVersionsConfig = setVersionsConfig;\n\nfunction formatConfigurationScriptPath(projectRoot) {\n  var buildScriptPath = resolve_from_1.default.silent(projectRoot, CREATE_MANIFEST_IOS_PATH);\n\n  if (!buildScriptPath) {\n    throw new Error(\"Could not find the build script for iOS. This could happen in case of outdated 'node_modules'. Run 'npm install' to make sure that it's up-to-date.\");\n  }\n\n  var relativePath = path.relative(path.join(projectRoot, 'ios'), buildScriptPath);\n  return process.platform === 'win32' ? relativePath.replace(/\\\\/g, '/') : relativePath;\n}\n\nfunction getBundleReactNativePhase(project) {\n  var shellScriptBuildPhase = project.hash.project.objects.PBXShellScriptBuildPhase;\n  var bundleReactNative = Object.values(shellScriptBuildPhase).find(function (buildPhase) {\n    return buildPhase.name === '\"Bundle React Native code and images\"';\n  });\n\n  if (!bundleReactNative) {\n    throw new Error(\"Couldn't find a build phase \\\"Bundle React Native code and images\\\"\");\n  }\n\n  return bundleReactNative;\n}\n\nexports.getBundleReactNativePhase = getBundleReactNativePhase;\n\nfunction ensureBundleReactNativePhaseContainsConfigurationScript(projectRoot, project) {\n  var bundleReactNative = getBundleReactNativePhase(project);\n  var buildPhaseShellScriptPath = formatConfigurationScriptPath(projectRoot);\n\n  if (!isShellScriptBuildPhaseConfigured(projectRoot, project)) {\n    if (bundleReactNative.shellScript.includes(CREATE_MANIFEST_IOS_PATH)) {\n      bundleReactNative.shellScript = bundleReactNative.shellScript.replace(new RegExp(\"(\\\\\\\\n)(\\\\.\\\\.)+/node_modules/\" + CREATE_MANIFEST_IOS_PATH), '');\n    }\n\n    bundleReactNative.shellScript = \"\" + bundleReactNative.shellScript.replace(/\"$/, '') + buildPhaseShellScriptPath + \"\\\\n\\\"\";\n  }\n\n  return project;\n}\n\nexports.ensureBundleReactNativePhaseContainsConfigurationScript = ensureBundleReactNativePhaseContainsConfigurationScript;\n\nfunction isShellScriptBuildPhaseConfigured(projectRoot, project) {\n  var bundleReactNative = getBundleReactNativePhase(project);\n  var buildPhaseShellScriptPath = formatConfigurationScriptPath(projectRoot);\n  return bundleReactNative.shellScript.includes(buildPhaseShellScriptPath);\n}\n\nexports.isShellScriptBuildPhaseConfigured = isShellScriptBuildPhaseConfigured;\n\nfunction isPlistConfigurationSet(expoPlist) {\n  return Boolean(expoPlist.EXUpdatesURL && (expoPlist.EXUpdatesSDKVersion || expoPlist.EXUpdatesRuntimeVersion));\n}\n\nexports.isPlistConfigurationSet = isPlistConfigurationSet;\n\nfunction isPlistConfigurationSynced(config, expoPlist, username) {\n  return getUpdateUrl(config, username) === expoPlist.EXUpdatesURL && getUpdatesEnabled(config) === expoPlist.EXUpdatesEnabled && getUpdatesTimeout(config) === expoPlist.EXUpdatesLaunchWaitMs && getUpdatesCheckOnLaunch(config) === expoPlist.EXUpdatesCheckOnLaunch && isPlistVersionConfigurationSynced(config, expoPlist);\n}\n\nexports.isPlistConfigurationSynced = isPlistConfigurationSynced;\n\nfunction isPlistVersionConfigurationSynced(config, expoPlist) {\n  var _a, _b;\n\n  var expectedRuntimeVersion = getRuntimeVersion(config);\n  var expectedSdkVersion = getSDKVersion(config);\n  var currentRuntimeVersion = (_a = expoPlist.EXUpdatesRuntimeVersion) !== null && _a !== void 0 ? _a : null;\n  var currentSdkVersion = (_b = expoPlist.EXUpdatesSDKVersion) !== null && _b !== void 0 ? _b : null;\n  return currentSdkVersion === expectedSdkVersion && currentRuntimeVersion === expectedRuntimeVersion;\n}\n\nexports.isPlistVersionConfigurationSynced = isPlistVersionConfigurationSynced;","map":{"version":3,"sources":["../../src/ios/Updates.ts"],"names":[],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport * as path from 'path';\nimport resolveFrom from 'resolve-from';\nimport xcode from 'xcode';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withExpoPlist } from '../plugins/ios-plugins';\nimport { ExpoPlist } from './IosConfig.types';\n\nconst CREATE_MANIFEST_IOS_PATH = 'expo-updates/scripts/create-manifest-ios.sh';\n\ntype ExpoConfigUpdates = Pick<\n  ExpoConfig,\n  'sdkVersion' | 'owner' | 'runtimeVersion' | 'updates' | 'slug'\n>;\n\nexport enum Config {\n  ENABLED = 'EXUpdatesEnabled',\n  CHECK_ON_LAUNCH = 'EXUpdatesCheckOnLaunch',\n  LAUNCH_WAIT_MS = 'EXUpdatesLaunchWaitMs',\n  RUNTIME_VERSION = 'EXUpdatesRuntimeVersion',\n  SDK_VERSION = 'EXUpdatesSDKVersion',\n  UPDATE_URL = 'EXUpdatesURL',\n  RELEASE_CHANNEL = 'EXUpdatesReleaseChannel',\n}\n\nexport function getUpdateUrl(\n  config: Pick<ExpoConfigUpdates, 'owner' | 'slug'>,\n  username: string | null\n): string | null {\n  const user = typeof config.owner === 'string' ? config.owner : username;\n  if (!user) {\n    return null;\n  }\n  return `https://exp.host/@${user}/${config.slug}`;\n}\n\nexport function getRuntimeVersion(\n  config: Pick<ExpoConfigUpdates, 'runtimeVersion'>\n): string | null {\n  return typeof config.runtimeVersion === 'string' ? config.runtimeVersion : null;\n}\n\nexport function getSDKVersion(config: Pick<ExpoConfigUpdates, 'sdkVersion'>): string | null {\n  return typeof config.sdkVersion === 'string' ? config.sdkVersion : null;\n}\n\nexport function getUpdatesEnabled(config: Pick<ExpoConfigUpdates, 'updates'>): boolean {\n  return config.updates?.enabled !== false;\n}\n\nexport function getUpdatesTimeout(config: Pick<ExpoConfigUpdates, 'updates'>) {\n  return config.updates?.fallbackToCacheTimeout ?? 0;\n}\n\nexport function getUpdatesCheckOnLaunch(\n  config: Pick<ExpoConfigUpdates, 'updates'>\n): 'NEVER' | 'ALWAYS' {\n  if (config.updates?.checkAutomatically === 'ON_ERROR_RECOVERY') {\n    return 'NEVER';\n  } else if (config.updates?.checkAutomatically === 'ON_LOAD') {\n    return 'ALWAYS';\n  }\n  return 'ALWAYS';\n}\n\nexport const withUpdates: ConfigPlugin<{ expoUsername: string | null }> = (\n  config,\n  { expoUsername }\n) => {\n  return withExpoPlist(config, config => {\n    config.modResults = setUpdatesConfig(config, config.modResults, expoUsername);\n    return config;\n  });\n};\n\nexport function setUpdatesConfig(\n  config: ExpoConfigUpdates,\n  expoPlist: ExpoPlist,\n  username: string | null\n): ExpoPlist {\n  const newExpoPlist = {\n    ...expoPlist,\n    [Config.ENABLED]: getUpdatesEnabled(config),\n    [Config.CHECK_ON_LAUNCH]: getUpdatesCheckOnLaunch(config),\n    [Config.LAUNCH_WAIT_MS]: getUpdatesTimeout(config),\n  };\n\n  const updateUrl = getUpdateUrl(config, username);\n  if (updateUrl) {\n    newExpoPlist[Config.UPDATE_URL] = updateUrl;\n  } else {\n    delete newExpoPlist[Config.UPDATE_URL];\n  }\n\n  return setVersionsConfig(config, newExpoPlist);\n}\n\nexport function setVersionsConfig(config: ExpoConfigUpdates, expoPlist: ExpoPlist): ExpoPlist {\n  const newExpoPlist = { ...expoPlist };\n\n  const runtimeVersion = getRuntimeVersion(config);\n  const sdkVersion = getSDKVersion(config);\n  if (runtimeVersion) {\n    delete newExpoPlist[Config.SDK_VERSION];\n    newExpoPlist[Config.RUNTIME_VERSION] = runtimeVersion;\n  } else if (sdkVersion) {\n    delete newExpoPlist[Config.RUNTIME_VERSION];\n    newExpoPlist[Config.SDK_VERSION] = sdkVersion;\n  } else {\n    delete newExpoPlist[Config.SDK_VERSION];\n    delete newExpoPlist[Config.RUNTIME_VERSION];\n  }\n\n  return newExpoPlist;\n}\n\nfunction formatConfigurationScriptPath(projectRoot: string): string {\n  const buildScriptPath = resolveFrom.silent(projectRoot, CREATE_MANIFEST_IOS_PATH);\n\n  if (!buildScriptPath) {\n    throw new Error(\n      \"Could not find the build script for iOS. This could happen in case of outdated 'node_modules'. Run 'npm install' to make sure that it's up-to-date.\"\n    );\n  }\n\n  const relativePath = path.relative(path.join(projectRoot, 'ios'), buildScriptPath);\n  return process.platform === 'win32' ? relativePath.replace(/\\\\/g, '/') : relativePath;\n}\n\ninterface ShellScriptBuildPhase {\n  isa: 'PBXShellScriptBuildPhase';\n  name: string;\n  shellScript: string;\n  [key: string]: any;\n}\n\nexport function getBundleReactNativePhase(project: xcode.XcodeProject): ShellScriptBuildPhase {\n  const shellScriptBuildPhase = project.hash.project.objects.PBXShellScriptBuildPhase as Record<\n    string,\n    ShellScriptBuildPhase\n  >;\n  const bundleReactNative = Object.values(shellScriptBuildPhase).find(\n    buildPhase => buildPhase.name === '\"Bundle React Native code and images\"'\n  );\n\n  if (!bundleReactNative) {\n    throw new Error(`Couldn't find a build phase \"Bundle React Native code and images\"`);\n  }\n\n  return bundleReactNative;\n}\n\nexport function ensureBundleReactNativePhaseContainsConfigurationScript(\n  projectRoot: string,\n  project: xcode.XcodeProject\n): xcode.XcodeProject {\n  const bundleReactNative = getBundleReactNativePhase(project);\n  const buildPhaseShellScriptPath = formatConfigurationScriptPath(projectRoot);\n\n  if (!isShellScriptBuildPhaseConfigured(projectRoot, project)) {\n    // check if there's already another path to create-manifest-ios.sh\n    // this might be the case for monorepos\n    if (bundleReactNative.shellScript.includes(CREATE_MANIFEST_IOS_PATH)) {\n      bundleReactNative.shellScript = bundleReactNative.shellScript.replace(\n        new RegExp(`(\\\\\\\\n)(\\\\.\\\\.)+/node_modules/${CREATE_MANIFEST_IOS_PATH}`),\n        ''\n      );\n    }\n    bundleReactNative.shellScript = `${bundleReactNative.shellScript.replace(\n      /\"$/,\n      ''\n    )}${buildPhaseShellScriptPath}\\\\n\"`;\n  }\n  return project;\n}\n\nexport function isShellScriptBuildPhaseConfigured(\n  projectRoot: string,\n  project: xcode.XcodeProject\n): boolean {\n  const bundleReactNative = getBundleReactNativePhase(project);\n  const buildPhaseShellScriptPath = formatConfigurationScriptPath(projectRoot);\n  return bundleReactNative.shellScript.includes(buildPhaseShellScriptPath);\n}\n\nexport function isPlistConfigurationSet(expoPlist: ExpoPlist): boolean {\n  return Boolean(\n    expoPlist.EXUpdatesURL && (expoPlist.EXUpdatesSDKVersion || expoPlist.EXUpdatesRuntimeVersion)\n  );\n}\n\nexport function isPlistConfigurationSynced(\n  config: ExpoConfigUpdates,\n  expoPlist: ExpoPlist,\n  username: string | null\n): boolean {\n  return (\n    getUpdateUrl(config, username) === expoPlist.EXUpdatesURL &&\n    getUpdatesEnabled(config) === expoPlist.EXUpdatesEnabled &&\n    getUpdatesTimeout(config) === expoPlist.EXUpdatesLaunchWaitMs &&\n    getUpdatesCheckOnLaunch(config) === expoPlist.EXUpdatesCheckOnLaunch &&\n    isPlistVersionConfigurationSynced(config, expoPlist)\n  );\n}\n\nexport function isPlistVersionConfigurationSynced(\n  config: Pick<ExpoConfigUpdates, 'sdkVersion' | 'runtimeVersion'>,\n  expoPlist: ExpoPlist\n): boolean {\n  const expectedRuntimeVersion = getRuntimeVersion(config);\n  const expectedSdkVersion = getSDKVersion(config);\n  const currentRuntimeVersion = expoPlist.EXUpdatesRuntimeVersion ?? null;\n  const currentSdkVersion = expoPlist.EXUpdatesSDKVersion ?? null;\n\n  return (\n    currentSdkVersion === expectedSdkVersion && currentRuntimeVersion === expectedRuntimeVersion\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}