{"ast":null,"code":"'use strict';\n\nimport { Event } from \"../src/Event.js\";\ntest('parses simple event', function () {\n  var obj = {\n    'name': 'resumed',\n    'description': 'Fired when the virtual machine resumed execution.'\n  };\n  var event = Event.create('Debugger', obj, false);\n  expect(event.domain).toBe('Debugger');\n  expect(event.name).toBe('resumed');\n  expect(event.description).toBe('Fired when the virtual machine resumed execution.');\n  expect(event.getDebuggerName()).toBe('Debugger.resumed');\n  expect(event.getCppNamespace()).toBe('debugger');\n  expect(event.getCppType()).toBe('ResumedNotification');\n  expect(event.getForwardDecls()).toEqual(['struct ResumedNotification;']);\n});\ntest('parses event with params', function () {\n  var obj = {\n    'name': 'breakpointResolved',\n    'parameters': [{\n      'name': 'breakpointId',\n      '$ref': 'BreakpointId',\n      'description': 'Breakpoint unique identifier.'\n    }, {\n      'name': 'location',\n      '$ref': 'Location',\n      'description': 'Actual breakpoint location.'\n    }],\n    'description': 'Fired when breakpoint is resolved to an actual script and location.'\n  };\n  var event = Event.create('Debugger', obj, false);\n  expect(event.domain).toBe('Debugger');\n  expect(event.name).toBe('breakpointResolved');\n  expect(event.description).toBe('Fired when breakpoint is resolved to an actual script and location.');\n  expect(event.parameters.map(function (p) {\n    return p.name;\n  })).toEqual(['breakpointId', 'location']);\n  expect(event.getDebuggerName()).toBe('Debugger.breakpointResolved');\n  expect(event.getCppNamespace()).toBe('debugger');\n  expect(event.getCppType()).toBe('BreakpointResolvedNotification');\n  expect(event.getForwardDecls()).toEqual(['struct BreakpointResolvedNotification;']);\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/ReactCommon/hermes/inspector/tools/msggen/__tests__/EventTest.js"],"names":["Event","test","obj","event","create","expect","domain","toBe","name","description","getDebuggerName","getCppNamespace","getCppType","getForwardDecls","toEqual","parameters","map","p"],"mappings":"AAOA;;AAEA,SAASA,KAAT;AAEAC,IAAI,CAAC,qBAAD,EAAwB,YAAM;AAChC,MAAIC,GAAG,GAAG;AACR,YAAQ,SADA;AAER,mBAAe;AAFP,GAAV;AAIA,MAAIC,KAAK,GAAGH,KAAK,CAACI,MAAN,CAAa,UAAb,EAAyBF,GAAzB,EAA8B,KAA9B,CAAZ;AAEAG,EAAAA,MAAM,CAACF,KAAK,CAACG,MAAP,CAAN,CAAqBC,IAArB,CAA0B,UAA1B;AACAF,EAAAA,MAAM,CAACF,KAAK,CAACK,IAAP,CAAN,CAAmBD,IAAnB,CAAwB,SAAxB;AACAF,EAAAA,MAAM,CAACF,KAAK,CAACM,WAAP,CAAN,CAA0BF,IAA1B,CAA+B,mDAA/B;AAEAF,EAAAA,MAAM,CAACF,KAAK,CAACO,eAAN,EAAD,CAAN,CAAgCH,IAAhC,CAAqC,kBAArC;AACAF,EAAAA,MAAM,CAACF,KAAK,CAACQ,eAAN,EAAD,CAAN,CAAgCJ,IAAhC,CAAqC,UAArC;AACAF,EAAAA,MAAM,CAACF,KAAK,CAACS,UAAN,EAAD,CAAN,CAA2BL,IAA3B,CAAgC,qBAAhC;AACAF,EAAAA,MAAM,CAACF,KAAK,CAACU,eAAN,EAAD,CAAN,CAAgCC,OAAhC,CAAwC,CAAC,6BAAD,CAAxC;AACD,CAfG,CAAJ;AAiBAb,IAAI,CAAC,0BAAD,EAA6B,YAAM;AACrC,MAAIC,GAAG,GAAG;AACR,YAAQ,oBADA;AAER,kBAAc,CACZ;AAAE,cAAQ,cAAV;AAA0B,cAAQ,cAAlC;AAAkD,qBAAe;AAAjE,KADY,EAEZ;AAAE,cAAQ,UAAV;AAAsB,cAAQ,UAA9B;AAA0C,qBAAe;AAAzD,KAFY,CAFN;AAMR,mBAAe;AANP,GAAV;AAQA,MAAIC,KAAK,GAAGH,KAAK,CAACI,MAAN,CAAa,UAAb,EAAyBF,GAAzB,EAA8B,KAA9B,CAAZ;AAEAG,EAAAA,MAAM,CAACF,KAAK,CAACG,MAAP,CAAN,CAAqBC,IAArB,CAA0B,UAA1B;AACAF,EAAAA,MAAM,CAACF,KAAK,CAACK,IAAP,CAAN,CAAmBD,IAAnB,CAAwB,oBAAxB;AACAF,EAAAA,MAAM,CAACF,KAAK,CAACM,WAAP,CAAN,CAA0BF,IAA1B,CAA+B,qEAA/B;AACAF,EAAAA,MAAM,CAACF,KAAK,CAACY,UAAN,CAAiBC,GAAjB,CAAqB,UAAAC,CAAC;AAAA,WAAIA,CAAC,CAACT,IAAN;AAAA,GAAtB,CAAD,CAAN,CAA0CM,OAA1C,CAAkD,CAAC,cAAD,EAAiB,UAAjB,CAAlD;AAEAT,EAAAA,MAAM,CAACF,KAAK,CAACO,eAAN,EAAD,CAAN,CAAgCH,IAAhC,CAAqC,6BAArC;AACAF,EAAAA,MAAM,CAACF,KAAK,CAACQ,eAAN,EAAD,CAAN,CAAgCJ,IAAhC,CAAqC,UAArC;AACAF,EAAAA,MAAM,CAACF,KAAK,CAACS,UAAN,EAAD,CAAN,CAA2BL,IAA3B,CAAgC,gCAAhC;AACAF,EAAAA,MAAM,CAACF,KAAK,CAACU,eAAN,EAAD,CAAN,CAAgCC,OAAhC,CAAwC,CAAC,wCAAD,CAAxC;AACD,CApBG,CAAJ","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nimport { Event } from '../src/Event.js';\n\ntest('parses simple event', () => {\n  let obj = {\n    'name': 'resumed',\n    'description': 'Fired when the virtual machine resumed execution.',\n  };\n  let event = Event.create('Debugger', obj, false);\n\n  expect(event.domain).toBe('Debugger');\n  expect(event.name).toBe('resumed');\n  expect(event.description).toBe('Fired when the virtual machine resumed execution.');\n\n  expect(event.getDebuggerName()).toBe('Debugger.resumed');\n  expect(event.getCppNamespace()).toBe('debugger');\n  expect(event.getCppType()).toBe('ResumedNotification');\n  expect(event.getForwardDecls()).toEqual(['struct ResumedNotification;']);\n});\n\ntest('parses event with params', () => {\n  let obj = {\n    'name': 'breakpointResolved',\n    'parameters': [\n      { 'name': 'breakpointId', '$ref': 'BreakpointId', 'description': 'Breakpoint unique identifier.' },\n      { 'name': 'location', '$ref': 'Location', 'description': 'Actual breakpoint location.' },\n    ],\n    'description': 'Fired when breakpoint is resolved to an actual script and location.',\n  };\n  let event = Event.create('Debugger', obj, false);\n\n  expect(event.domain).toBe('Debugger');\n  expect(event.name).toBe('breakpointResolved');\n  expect(event.description).toBe('Fired when breakpoint is resolved to an actual script and location.');\n  expect(event.parameters.map(p => p.name)).toEqual(['breakpointId', 'location']);\n\n  expect(event.getDebuggerName()).toBe('Debugger.breakpointResolved');\n  expect(event.getCppNamespace()).toBe('debugger');\n  expect(event.getCppType()).toBe('BreakpointResolvedNotification');\n  expect(event.getForwardDecls()).toEqual(['struct BreakpointResolvedNotification;']);\n});\n"]},"metadata":{},"sourceType":"module"}