{"ast":null,"code":"'use strict';\n\nvar _require = require(\"../../Utilities/Platform\"),\n    OS = _require.OS;\n\nvar processColorArray = require(\"../processColorArray\");\n\nvar PlatformColorIOS = require(\"../PlatformColorValueTypes.ios\").PlatformColor;\n\nvar DynamicColorIOS = require(\"../PlatformColorValueTypesIOS.ios\").DynamicColorIOS;\n\nvar PlatformColorAndroid = require(\"../PlatformColorValueTypes.android\").PlatformColor;\n\nvar platformSpecific = OS === 'android' ? function (unsigned) {\n  return unsigned | 0;\n} : function (x) {\n  return x;\n};\ndescribe('processColorArray', function () {\n  describe('predefined color name array', function () {\n    it('should convert array of color name type', function () {\n      var colorFromStringArray = processColorArray(['red', 'white', 'black']);\n      var expectedIntArray = [0xffff0000, 0xffffffff, 0xff000000].map(platformSpecific);\n      expect(colorFromStringArray).toEqual(expectedIntArray);\n    });\n    it('should convert array of color type rgb(x, y, z)', function () {\n      var colorFromRGBArray = processColorArray(['rgb(10, 20, 30)', 'rgb(30, 20, 10)', 'rgb(50, 150, 250)']);\n      var expectedIntArray = [0xff0a141e, 0xff1e140a, 0xff3296fa].map(platformSpecific);\n      expect(colorFromRGBArray).toEqual(platformSpecific(expectedIntArray));\n    });\n    it('should convert array of color type hsl(x, y%, z%)', function () {\n      var colorFromHSLArray = processColorArray(['hsl(318, 69%, 55%)', 'hsl(218, 59%, 33%)', 'hsl(118, 49%, 22%)']);\n      var expectedIntArray = [0xffdb3dac, 0xff234786, 0xff1e541d].map(platformSpecific);\n      expect(colorFromHSLArray).toEqual(platformSpecific(expectedIntArray));\n    });\n    it('should return null if no array', function () {\n      var colorFromNoArray = processColorArray(null);\n      expect(colorFromNoArray).toEqual(null);\n    });\n  });\n  describe('iOS', function () {\n    if (OS === 'ios') {\n      it('should convert array of iOS PlatformColor colors', function () {\n        var colorFromArray = processColorArray([PlatformColorIOS('systemColorWhite'), PlatformColorIOS('systemColorBlack')]);\n        var expectedColorValueArray = [{\n          semantic: ['systemColorWhite']\n        }, {\n          semantic: ['systemColorBlack']\n        }];\n        expect(colorFromArray).toEqual(expectedColorValueArray);\n      });\n      it('should process iOS Dynamic colors', function () {\n        var colorFromArray = processColorArray([DynamicColorIOS({\n          light: 'black',\n          dark: 'white'\n        }), DynamicColorIOS({\n          light: 'white',\n          dark: 'black'\n        })]);\n        var expectedColorValueArray = [{\n          dynamic: {\n            light: 0xff000000,\n            dark: 0xffffffff\n          }\n        }, {\n          dynamic: {\n            light: 0xffffffff,\n            dark: 0xff000000\n          }\n        }];\n        expect(colorFromArray).toEqual(expectedColorValueArray);\n      });\n    }\n  });\n  describe('Android', function () {\n    if (OS === 'android') {\n      it('should convert array of Android PlatformColor colors', function () {\n        var colorFromArray = processColorArray([PlatformColorAndroid('?attr/colorPrimary'), PlatformColorAndroid('?colorPrimaryDark')]);\n        var expectedColorValueArray = [{\n          resource_paths: ['?attr/colorPrimary']\n        }, {\n          resource_paths: ['?colorPrimaryDark']\n        }];\n        expect(colorFromArray).toEqual(expectedColorValueArray);\n      });\n    }\n  });\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/StyleSheet/__tests__/processColorArray-test.js"],"names":["require","OS","processColorArray","PlatformColorIOS","PlatformColor","DynamicColorIOS","PlatformColorAndroid","platformSpecific","unsigned","x","describe","it","colorFromStringArray","expectedIntArray","map","expect","toEqual","colorFromRGBArray","colorFromHSLArray","colorFromNoArray","colorFromArray","expectedColorValueArray","semantic","light","dark","dynamic","resource_paths"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @emails oncall+react_native\n */\n\n'use strict';\n\nconst {OS} = require('../../Utilities/Platform');\nconst processColorArray = require('../processColorArray');\n\nconst PlatformColorIOS = require('../PlatformColorValueTypes.ios')\n  .PlatformColor;\nconst DynamicColorIOS = require('../PlatformColorValueTypesIOS.ios')\n  .DynamicColorIOS;\nconst PlatformColorAndroid = require('../PlatformColorValueTypes.android')\n  .PlatformColor;\n\nconst platformSpecific =\n  OS === 'android'\n    ? unsigned => unsigned | 0 //eslint-disable-line no-bitwise\n    : x => x;\n\ndescribe('processColorArray', () => {\n  describe('predefined color name array', () => {\n    it('should convert array of color name type', () => {\n      const colorFromStringArray = processColorArray(['red', 'white', 'black']);\n      const expectedIntArray = [0xffff0000, 0xffffffff, 0xff000000].map(\n        platformSpecific,\n      );\n      expect(colorFromStringArray).toEqual(expectedIntArray);\n    });\n\n    it('should convert array of color type rgb(x, y, z)', () => {\n      const colorFromRGBArray = processColorArray([\n        'rgb(10, 20, 30)',\n        'rgb(30, 20, 10)',\n        'rgb(50, 150, 250)',\n      ]);\n      const expectedIntArray = [0xff0a141e, 0xff1e140a, 0xff3296fa].map(\n        platformSpecific,\n      );\n      expect(colorFromRGBArray).toEqual(platformSpecific(expectedIntArray));\n    });\n\n    it('should convert array of color type hsl(x, y%, z%)', () => {\n      const colorFromHSLArray = processColorArray([\n        'hsl(318, 69%, 55%)',\n        'hsl(218, 59%, 33%)',\n        'hsl(118, 49%, 22%)',\n      ]);\n      const expectedIntArray = [0xffdb3dac, 0xff234786, 0xff1e541d].map(\n        platformSpecific,\n      );\n      expect(colorFromHSLArray).toEqual(platformSpecific(expectedIntArray));\n    });\n\n    it('should return null if no array', () => {\n      const colorFromNoArray = processColorArray(null);\n      expect(colorFromNoArray).toEqual(null);\n    });\n  });\n\n  describe('iOS', () => {\n    if (OS === 'ios') {\n      it('should convert array of iOS PlatformColor colors', () => {\n        const colorFromArray = processColorArray([\n          PlatformColorIOS('systemColorWhite'),\n          PlatformColorIOS('systemColorBlack'),\n        ]);\n        const expectedColorValueArray = [\n          {semantic: ['systemColorWhite']},\n          {semantic: ['systemColorBlack']},\n        ];\n        expect(colorFromArray).toEqual(expectedColorValueArray);\n      });\n\n      it('should process iOS Dynamic colors', () => {\n        const colorFromArray = processColorArray([\n          DynamicColorIOS({light: 'black', dark: 'white'}),\n          DynamicColorIOS({light: 'white', dark: 'black'}),\n        ]);\n        const expectedColorValueArray = [\n          {dynamic: {light: 0xff000000, dark: 0xffffffff}},\n          {dynamic: {light: 0xffffffff, dark: 0xff000000}},\n        ];\n        expect(colorFromArray).toEqual(expectedColorValueArray);\n      });\n    }\n  });\n\n  describe('Android', () => {\n    if (OS === 'android') {\n      it('should convert array of Android PlatformColor colors', () => {\n        const colorFromArray = processColorArray([\n          PlatformColorAndroid('?attr/colorPrimary'),\n          PlatformColorAndroid('?colorPrimaryDark'),\n        ]);\n        const expectedColorValueArray = [\n          {resource_paths: ['?attr/colorPrimary']},\n          {resource_paths: ['?colorPrimaryDark']},\n        ];\n        expect(colorFromArray).toEqual(expectedColorValueArray);\n      });\n    }\n  });\n});\n"]},"metadata":{},"sourceType":"script"}