{"ast":null,"code":"'use strict';\n\nvar RCTDeviceEventEmitter = require(\"../../EventEmitter/RCTDeviceEventEmitter\");\n\nvar UIManager = require(\"../../ReactNative/UIManager\");\n\nimport NativeAccessibilityInfo from \"./NativeAccessibilityInfo\";\nvar REDUCE_MOTION_EVENT = 'reduceMotionDidChange';\nvar TOUCH_EXPLORATION_EVENT = 'touchExplorationDidChange';\n\nvar _subscriptions = new Map();\n\nvar AccessibilityInfo = {\n  isBoldTextEnabled: function isBoldTextEnabled() {\n    return Promise.resolve(false);\n  },\n  isGrayscaleEnabled: function isGrayscaleEnabled() {\n    return Promise.resolve(false);\n  },\n  isInvertColorsEnabled: function isInvertColorsEnabled() {\n    return Promise.resolve(false);\n  },\n  isReduceMotionEnabled: function isReduceMotionEnabled() {\n    return new Promise(function (resolve, reject) {\n      if (NativeAccessibilityInfo) {\n        NativeAccessibilityInfo.isReduceMotionEnabled(resolve);\n      } else {\n        reject(false);\n      }\n    });\n  },\n  isReduceTransparencyEnabled: function isReduceTransparencyEnabled() {\n    return Promise.resolve(false);\n  },\n  isScreenReaderEnabled: function isScreenReaderEnabled() {\n    return new Promise(function (resolve, reject) {\n      if (NativeAccessibilityInfo) {\n        NativeAccessibilityInfo.isTouchExplorationEnabled(resolve);\n      } else {\n        reject(false);\n      }\n    });\n  },\n\n  get fetch() {\n    console.warn('AccessibilityInfo.fetch is deprecated, call AccessibilityInfo.isScreenReaderEnabled instead');\n    return this.isScreenReaderEnabled;\n  },\n\n  addEventListener: function addEventListener(eventName, handler) {\n    var listener;\n\n    if (eventName === 'change' || eventName === 'screenReaderChanged') {\n      listener = RCTDeviceEventEmitter.addListener(TOUCH_EXPLORATION_EVENT, function (enabled) {\n        handler(enabled);\n      });\n    } else if (eventName === 'reduceMotionChanged') {\n      listener = RCTDeviceEventEmitter.addListener(REDUCE_MOTION_EVENT, function (enabled) {\n        handler(enabled);\n      });\n    }\n\n    _subscriptions.set(handler, listener);\n  },\n  removeEventListener: function removeEventListener(eventName, handler) {\n    var listener = _subscriptions.get(handler);\n\n    if (!listener) {\n      return;\n    }\n\n    listener.remove();\n\n    _subscriptions.delete(handler);\n  },\n  setAccessibilityFocus: function setAccessibilityFocus(reactTag) {\n    UIManager.sendAccessibilityEvent(reactTag, UIManager.getConstants().AccessibilityEventTypes.typeViewFocused);\n  },\n  announceForAccessibility: function announceForAccessibility(announcement) {\n    if (NativeAccessibilityInfo) {\n      NativeAccessibilityInfo.announceForAccessibility(announcement);\n    }\n  }\n};\nmodule.exports = AccessibilityInfo;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Components/AccessibilityInfo/AccessibilityInfo.android.js"],"names":["RCTDeviceEventEmitter","require","UIManager","NativeAccessibilityInfo","REDUCE_MOTION_EVENT","TOUCH_EXPLORATION_EVENT","_subscriptions","Map","AccessibilityInfo","isBoldTextEnabled","Promise","resolve","isGrayscaleEnabled","isInvertColorsEnabled","isReduceMotionEnabled","reject","isReduceTransparencyEnabled","isScreenReaderEnabled","isTouchExplorationEnabled","fetch","console","warn","addEventListener","eventName","handler","listener","addListener","enabled","set","removeEventListener","get","remove","delete","setAccessibilityFocus","reactTag","sendAccessibilityEvent","getConstants","AccessibilityEventTypes","typeViewFocused","announceForAccessibility","announcement","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst RCTDeviceEventEmitter = require('../../EventEmitter/RCTDeviceEventEmitter');\nconst UIManager = require('../../ReactNative/UIManager');\n\nimport NativeAccessibilityInfo from './NativeAccessibilityInfo';\n\nconst REDUCE_MOTION_EVENT = 'reduceMotionDidChange';\nconst TOUCH_EXPLORATION_EVENT = 'touchExplorationDidChange';\n\ntype ChangeEventName = $Keys<{\n  change: string,\n  reduceMotionChanged: string,\n  screenReaderChanged: string,\n  ...\n}>;\n\nconst _subscriptions = new Map();\n\n/**\n * Sometimes it's useful to know whether or not the device has a screen reader\n * that is currently active. The `AccessibilityInfo` API is designed for this\n * purpose. You can use it to query the current state of the screen reader as\n * well as to register to be notified when the state of the screen reader\n * changes.\n *\n * See https://reactnative.dev/docs/accessibilityinfo.html\n */\n\nconst AccessibilityInfo = {\n  /**\n   * iOS only\n   */\n  isBoldTextEnabled: function(): Promise<boolean> {\n    return Promise.resolve(false);\n  },\n\n  /**\n   * iOS only\n   */\n  isGrayscaleEnabled: function(): Promise<boolean> {\n    return Promise.resolve(false);\n  },\n\n  /**\n   * iOS only\n   */\n  isInvertColorsEnabled: function(): Promise<boolean> {\n    return Promise.resolve(false);\n  },\n\n  isReduceMotionEnabled: function(): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n      if (NativeAccessibilityInfo) {\n        NativeAccessibilityInfo.isReduceMotionEnabled(resolve);\n      } else {\n        reject(false);\n      }\n    });\n  },\n\n  /**\n   * iOS only\n   */\n  isReduceTransparencyEnabled: function(): Promise<boolean> {\n    return Promise.resolve(false);\n  },\n\n  isScreenReaderEnabled: function(): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n      if (NativeAccessibilityInfo) {\n        NativeAccessibilityInfo.isTouchExplorationEnabled(resolve);\n      } else {\n        reject(false);\n      }\n    });\n  },\n\n  /**\n   * Deprecated\n   *\n   * Same as `isScreenReaderEnabled`\n   */\n  get fetch(): () => Promise<boolean> {\n    console.warn(\n      'AccessibilityInfo.fetch is deprecated, call AccessibilityInfo.isScreenReaderEnabled instead',\n    );\n    return this.isScreenReaderEnabled;\n  },\n\n  addEventListener: function(\n    eventName: ChangeEventName,\n    handler: Function,\n  ): void {\n    let listener;\n\n    if (eventName === 'change' || eventName === 'screenReaderChanged') {\n      listener = RCTDeviceEventEmitter.addListener(\n        TOUCH_EXPLORATION_EVENT,\n        enabled => {\n          handler(enabled);\n        },\n      );\n    } else if (eventName === 'reduceMotionChanged') {\n      listener = RCTDeviceEventEmitter.addListener(\n        REDUCE_MOTION_EVENT,\n        enabled => {\n          handler(enabled);\n        },\n      );\n    }\n\n    _subscriptions.set(handler, listener);\n  },\n\n  removeEventListener: function(\n    eventName: ChangeEventName,\n    handler: Function,\n  ): void {\n    const listener = _subscriptions.get(handler);\n    if (!listener) {\n      return;\n    }\n    listener.remove();\n    _subscriptions.delete(handler);\n  },\n\n  /**\n   * Set accessibility focus to a react component.\n   *\n   * See https://reactnative.dev/docs/accessibilityinfo.html#setaccessibilityfocus\n   */\n  setAccessibilityFocus: function(reactTag: number): void {\n    UIManager.sendAccessibilityEvent(\n      reactTag,\n      UIManager.getConstants().AccessibilityEventTypes.typeViewFocused,\n    );\n  },\n\n  /**\n   * Post a string to be announced by the screen reader.\n   *\n   * See https://reactnative.dev/docs/accessibilityinfo.html#announceforaccessibility\n   */\n  announceForAccessibility: function(announcement: string): void {\n    if (NativeAccessibilityInfo) {\n      NativeAccessibilityInfo.announceForAccessibility(announcement);\n    }\n  },\n};\n\nmodule.exports = AccessibilityInfo;\n"]},"metadata":{},"sourceType":"module"}