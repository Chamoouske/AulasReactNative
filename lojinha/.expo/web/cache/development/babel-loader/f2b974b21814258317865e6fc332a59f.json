{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\njest.unmock('event-target-shim').setMock('../../BatchedBridge/NativeModules', {\n  BlobModule: require(\"../__mocks__/BlobModule\"),\n  FileReaderModule: require(\"../__mocks__/FileReaderModule\")\n});\n\nvar Blob = require(\"../Blob\");\n\nvar FileReader = require(\"../FileReader\");\n\ndescribe('FileReader', function () {\n  it('should read blob as text', function _callee() {\n    var e;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(new Promise(function (resolve, reject) {\n              var reader = new FileReader();\n              reader.onload = resolve;\n              reader.onerror = reject;\n              reader.readAsText(new Blob());\n            }));\n\n          case 2:\n            e = _context.sent;\n            expect(e.target.result).toBe('');\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  });\n  it('should read blob as data URL', function _callee2() {\n    var e;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(new Promise(function (resolve, reject) {\n              var reader = new FileReader();\n              reader.onload = resolve;\n              reader.onerror = reject;\n              reader.readAsDataURL(new Blob());\n            }));\n\n          case 2:\n            e = _context2.sent;\n            expect(e.target.result).toBe('data:text/plain;base64,NDI=');\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  });\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Blob/__tests__/FileReader-test.js"],"names":["jest","unmock","setMock","BlobModule","require","FileReaderModule","Blob","FileReader","describe","it","Promise","resolve","reject","reader","onload","onerror","readAsText","e","expect","target","result","toBe","readAsDataURL"],"mappings":"AAUA;;;;AAEAA,IAAI,CAACC,MAAL,CAAY,mBAAZ,EAAiCC,OAAjC,CAAyC,mCAAzC,EAA8E;AAC5EC,EAAAA,UAAU,EAAEC,OAAO,2BADyD;AAE5EC,EAAAA,gBAAgB,EAAED,OAAO;AAFmD,CAA9E;;AAKA,IAAME,IAAI,GAAGF,OAAO,WAApB;;AACA,IAAMG,UAAU,GAAGH,OAAO,iBAA1B;;AAEAI,QAAQ,CAAC,YAAD,EAAe,YAAW;AAChCC,EAAAA,EAAE,CAAC,0BAAD,EAA6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACb,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/C,kBAAMC,MAAM,GAAG,IAAIN,UAAJ,EAAf;AACAM,cAAAA,MAAM,CAACC,MAAP,GAAgBH,OAAhB;AACAE,cAAAA,MAAM,CAACE,OAAP,GAAiBH,MAAjB;AACAC,cAAAA,MAAM,CAACG,UAAP,CAAkB,IAAIV,IAAJ,EAAlB;AACD,aALe,CADa;;AAAA;AACvBW,YAAAA,CADuB;AAO7BC,YAAAA,MAAM,CAACD,CAAC,CAACE,MAAF,CAASC,MAAV,CAAN,CAAwBC,IAAxB,CAA6B,EAA7B;;AAP6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA7B,CAAF;AAUAZ,EAAAA,EAAE,CAAC,8BAAD,EAAiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACjB,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/C,kBAAMC,MAAM,GAAG,IAAIN,UAAJ,EAAf;AACAM,cAAAA,MAAM,CAACC,MAAP,GAAgBH,OAAhB;AACAE,cAAAA,MAAM,CAACE,OAAP,GAAiBH,MAAjB;AACAC,cAAAA,MAAM,CAACS,aAAP,CAAqB,IAAIhB,IAAJ,EAArB;AACD,aALe,CADiB;;AAAA;AAC3BW,YAAAA,CAD2B;AAOjCC,YAAAA,MAAM,CAACD,CAAC,CAACE,MAAF,CAASC,MAAV,CAAN,CAAwBC,IAAxB,CAA6B,6BAA7B;;AAPiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjC,CAAF;AASD,CApBO,CAAR","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @emails oncall+react_native\n */\n\n'use strict';\n\njest.unmock('event-target-shim').setMock('../../BatchedBridge/NativeModules', {\n  BlobModule: require('../__mocks__/BlobModule'),\n  FileReaderModule: require('../__mocks__/FileReaderModule'),\n});\n\nconst Blob = require('../Blob');\nconst FileReader = require('../FileReader');\n\ndescribe('FileReader', function() {\n  it('should read blob as text', async () => {\n    const e = await new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = resolve;\n      reader.onerror = reject;\n      reader.readAsText(new Blob());\n    });\n    expect(e.target.result).toBe('');\n  });\n\n  it('should read blob as data URL', async () => {\n    const e = await new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = resolve;\n      reader.onerror = reject;\n      reader.readAsDataURL(new Blob());\n    });\n    expect(e.target.result).toBe('data:text/plain;base64,NDI=');\n  });\n});\n"]},"metadata":{},"sourceType":"script"}