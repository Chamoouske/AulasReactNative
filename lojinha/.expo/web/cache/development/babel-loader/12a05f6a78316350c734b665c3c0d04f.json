{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar clipboardAvailable;\n\nvar Clipboard = function () {\n  function Clipboard() {\n    _classCallCheck(this, Clipboard);\n  }\n\n  _createClass(Clipboard, null, [{\n    key: \"isAvailable\",\n    value: function isAvailable() {\n      if (clipboardAvailable === undefined) {\n        clipboardAvailable = typeof document.queryCommandSupported === 'function' && document.queryCommandSupported('copy');\n      }\n\n      return clipboardAvailable;\n    }\n  }, {\n    key: \"getString\",\n    value: function getString() {\n      return Promise.resolve('');\n    }\n  }, {\n    key: \"setString\",\n    value: function setString(text) {\n      var success = false;\n      var body = document.body;\n\n      if (body) {\n        var node = document.createElement('span');\n        node.textContent = text;\n        node.style.opacity = '0';\n        node.style.position = 'absolute';\n        node.style.whiteSpace = 'pre-wrap';\n        node.style.userSelect = 'auto';\n        body.appendChild(node);\n        var selection = window.getSelection();\n        selection.removeAllRanges();\n        var range = document.createRange();\n        range.selectNodeContents(node);\n        selection.addRange(range);\n\n        try {\n          document.execCommand('copy');\n          success = true;\n        } catch (e) {}\n\n        selection.removeAllRanges();\n        body.removeChild(node);\n      }\n\n      return success;\n    }\n  }]);\n\n  return Clipboard;\n}();\n\nexport { Clipboard as default };","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native-web/src/exports/Clipboard/index.js"],"names":["clipboardAvailable","Clipboard","undefined","document","queryCommandSupported","Promise","resolve","text","success","body","node","createElement","textContent","style","opacity","position","whiteSpace","userSelect","appendChild","selection","window","getSelection","removeAllRanges","range","createRange","selectNodeContents","addRange","execCommand","e","removeChild"],"mappings":";;AAUA,IAAIA,kBAAJ;;IAEqBC,S;;;;;;;WACnB,uBAAqB;AACnB,UAAID,kBAAkB,KAAKE,SAA3B,EAAsC;AACpCF,QAAAA,kBAAkB,GAChB,OAAOG,QAAQ,CAACC,qBAAhB,KAA0C,UAA1C,IACAD,QAAQ,CAACC,qBAAT,CAA+B,MAA/B,CAFF;AAGD;;AACD,aAAOJ,kBAAP;AACD;;;WAED,qBAAoC;AAClC,aAAOK,OAAO,CAACC,OAAR,CAAgB,EAAhB,CAAP;AACD;;;WAED,mBAAiBC,IAAjB,EAA+B;AAC7B,UAAIC,OAAO,GAAG,KAAd;AACA,UAAMC,IAAI,GAAGN,QAAQ,CAACM,IAAtB;;AAEA,UAAIA,IAAJ,EAAU;AAER,YAAMC,IAAI,GAAGP,QAAQ,CAACQ,aAAT,CAAuB,MAAvB,CAAb;AACAD,QAAAA,IAAI,CAACE,WAAL,GAAmBL,IAAnB;AACAG,QAAAA,IAAI,CAACG,KAAL,CAAWC,OAAX,GAAqB,GAArB;AACAJ,QAAAA,IAAI,CAACG,KAAL,CAAWE,QAAX,GAAsB,UAAtB;AACAL,QAAAA,IAAI,CAACG,KAAL,CAAWG,UAAX,GAAwB,UAAxB;AACAN,QAAAA,IAAI,CAACG,KAAL,CAAWI,UAAX,GAAwB,MAAxB;AACAR,QAAAA,IAAI,CAACS,WAAL,CAAiBR,IAAjB;AAGA,YAAMS,SAAS,GAAGC,MAAM,CAACC,YAAP,EAAlB;AACAF,QAAAA,SAAS,CAACG,eAAV;AACA,YAAMC,KAAK,GAAGpB,QAAQ,CAACqB,WAAT,EAAd;AACAD,QAAAA,KAAK,CAACE,kBAAN,CAAyBf,IAAzB;AACAS,QAAAA,SAAS,CAACO,QAAV,CAAmBH,KAAnB;;AAGA,YAAI;AACFpB,UAAAA,QAAQ,CAACwB,WAAT,CAAqB,MAArB;AACAnB,UAAAA,OAAO,GAAG,IAAV;AACD,SAHD,CAGE,OAAOoB,CAAP,EAAU,CAAE;;AAGdT,QAAAA,SAAS,CAACG,eAAV;AACAb,QAAAA,IAAI,CAACoB,WAAL,CAAiBnB,IAAjB;AACD;;AAED,aAAOF,OAAP;AACD;;;;;;SA/CkBP,S","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nlet clipboardAvailable;\n\nexport default class Clipboard {\n  static isAvailable() {\n    if (clipboardAvailable === undefined) {\n      clipboardAvailable =\n        typeof document.queryCommandSupported === 'function' &&\n        document.queryCommandSupported('copy');\n    }\n    return clipboardAvailable;\n  }\n\n  static getString(): Promise<string> {\n    return Promise.resolve('');\n  }\n\n  static setString(text: string) {\n    let success = false;\n    const body = document.body;\n\n    if (body) {\n      // add the text to a hidden node\n      const node = document.createElement('span');\n      node.textContent = text;\n      node.style.opacity = '0';\n      node.style.position = 'absolute';\n      node.style.whiteSpace = 'pre-wrap';\n      node.style.userSelect = 'auto';\n      body.appendChild(node);\n\n      // select the text\n      const selection = window.getSelection();\n      selection.removeAllRanges();\n      const range = document.createRange();\n      range.selectNodeContents(node);\n      selection.addRange(range);\n\n      // attempt to copy\n      try {\n        document.execCommand('copy');\n        success = true;\n      } catch (e) {}\n\n      // remove selection and node\n      selection.removeAllRanges();\n      body.removeChild(node);\n    }\n\n    return success;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}