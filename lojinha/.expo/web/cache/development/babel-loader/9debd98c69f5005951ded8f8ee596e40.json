{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\njest.unmock(\"../NativeModules\");\nvar BatchedBridge;\nvar NativeModules;\nvar fs;\nvar parseErrorStack;\nvar MODULE_IDS = 0;\nvar METHOD_IDS = 1;\nvar PARAMS = 2;\nvar CALL_ID = 3;\n\nvar assertQueue = function assertQueue(flushedQueue, index, moduleID, methodID, params) {\n  expect(flushedQueue[MODULE_IDS][index]).toEqual(moduleID);\n  expect(flushedQueue[METHOD_IDS][index]).toEqual(methodID);\n  expect(flushedQueue[PARAMS][index]).toEqual(params);\n};\n\ndescribe('MessageQueue', function () {\n  beforeEach(function () {\n    jest.resetModules();\n    global.__fbBatchedBridgeConfig = require(\"../__mocks__/MessageQueueTestConfig\");\n    BatchedBridge = require(\"../BatchedBridge\");\n    NativeModules = require(\"../NativeModules\");\n    fs = require('fs');\n    parseErrorStack = require(\"../../Core/Devtools/parseErrorStack\");\n  });\n  it('should generate native modules', function () {\n    NativeModules.RemoteModule1.remoteMethod('foo');\n    var flushedQueue = BatchedBridge.flushedQueue();\n    assertQueue(flushedQueue, 0, 0, 0, ['foo']);\n  });\n  it('should make round trip and clear memory', function () {\n    var onFail = jest.fn();\n    var onSucc = jest.fn();\n    NativeModules.RemoteModule1.promiseMethod('paloAlto', 'menloPark', onFail, onSucc);\n    NativeModules.RemoteModule2.promiseMethod('mac', 'windows', onFail, onSucc);\n    var resultingRemoteInvocations = BatchedBridge.flushedQueue();\n    expect(resultingRemoteInvocations.length).toBe(4);\n    expect(resultingRemoteInvocations[MODULE_IDS].length).toBe(2);\n    expect(resultingRemoteInvocations[METHOD_IDS].length).toBe(2);\n    expect(resultingRemoteInvocations[PARAMS].length).toBe(2);\n    expect(typeof resultingRemoteInvocations[CALL_ID]).toEqual('number');\n    expect(resultingRemoteInvocations[0][0]).toBe(0);\n    expect(resultingRemoteInvocations[1][0]).toBe(1);\n    expect([resultingRemoteInvocations[2][0][0], resultingRemoteInvocations[2][0][1]]).toEqual(['paloAlto', 'menloPark']);\n    var firstFailCBID = resultingRemoteInvocations[2][0][2];\n    var firstSuccCBID = resultingRemoteInvocations[2][0][3];\n    expect(resultingRemoteInvocations[0][1]).toBe(1);\n    expect(resultingRemoteInvocations[1][1]).toBe(1);\n    expect([resultingRemoteInvocations[2][1][0], resultingRemoteInvocations[2][1][1]]).toEqual(['mac', 'windows']);\n    var secondFailCBID = resultingRemoteInvocations[2][1][2];\n    var secondSuccCBID = resultingRemoteInvocations[2][1][3];\n\n    BatchedBridge.__invokeCallback(firstFailCBID, ['firstFailure']);\n\n    expect(function () {\n      BatchedBridge.__invokeCallback(firstSuccCBID, ['firstSucc']);\n    }).toThrow();\n    expect(onFail.mock.calls.length).toBe(1);\n    expect(onSucc.mock.calls.length).toBe(0);\n\n    BatchedBridge.__invokeCallback(secondSuccCBID, ['secondSucc']);\n\n    expect(function () {\n      BatchedBridge.__invokeCallback(secondFailCBID, ['secondFail']);\n    }).toThrow();\n    expect(onFail.mock.calls.length).toBe(1);\n    expect(onSucc.mock.calls.length).toBe(1);\n  });\n  it('promise-returning methods (type=promise)', function _callee() {\n    var promise1, promise2, resultingRemoteInvocations, firstSuccCBID, firstFailCBID, secondSuccCBID, secondFailCBID;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            promise1 = NativeModules.RemoteModule1.promiseReturningMethod('paloAlto', 'menloPark');\n            promise2 = NativeModules.RemoteModule2.promiseReturningMethod('mac', 'windows');\n            resultingRemoteInvocations = BatchedBridge.flushedQueue();\n            expect(resultingRemoteInvocations.length).toBe(4);\n            expect(resultingRemoteInvocations[MODULE_IDS].length).toBe(2);\n            expect(resultingRemoteInvocations[METHOD_IDS].length).toBe(2);\n            expect(resultingRemoteInvocations[PARAMS].length).toBe(2);\n            expect(typeof resultingRemoteInvocations[CALL_ID]).toEqual('number');\n            expect(resultingRemoteInvocations[0][0]).toBe(0);\n            expect(resultingRemoteInvocations[1][0]).toBe(2);\n            expect([resultingRemoteInvocations[2][0][0], resultingRemoteInvocations[2][0][1]]).toEqual(['paloAlto', 'menloPark']);\n            firstSuccCBID = resultingRemoteInvocations[2][0][2];\n            firstFailCBID = resultingRemoteInvocations[2][0][3];\n            expect(resultingRemoteInvocations[0][1]).toBe(1);\n            expect(resultingRemoteInvocations[1][1]).toBe(2);\n            expect([resultingRemoteInvocations[2][1][0], resultingRemoteInvocations[2][1][1]]).toEqual(['mac', 'windows']);\n            secondSuccCBID = resultingRemoteInvocations[2][1][2];\n            secondFailCBID = resultingRemoteInvocations[2][1][3];\n\n            BatchedBridge.__invokeCallback(firstFailCBID, [{\n              message: 'firstFailure'\n            }]);\n\n            expect(function () {\n              BatchedBridge.__invokeCallback(firstSuccCBID, ['firstSucc']);\n            }).toThrow();\n            _context.next = 22;\n            return _regeneratorRuntime.awrap(expect(promise1).rejects.toBeInstanceOf(Error));\n\n          case 22:\n            _context.next = 24;\n            return _regeneratorRuntime.awrap(expect(promise1).rejects.toMatchObject({\n              message: 'firstFailure'\n            }));\n\n          case 24:\n            BatchedBridge.__invokeCallback(secondSuccCBID, ['secondSucc']);\n\n            expect(function () {\n              BatchedBridge.__invokeCallback(secondFailCBID, ['secondFail']);\n            }).toThrow();\n            _context.next = 28;\n            return _regeneratorRuntime.awrap(promise2);\n\n          case 28:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  });\n  describe('sync methods', function () {\n    afterEach(function () {\n      delete global.nativeCallSyncHook;\n    });\n    it('throwing an exception', function () {\n      global.nativeCallSyncHook = jest.fn(function () {\n        throw new Error('firstFailure');\n      });\n      var error;\n\n      try {\n        NativeModules.RemoteModule1.syncMethod('paloAlto', 'menloPark');\n      } catch (e) {\n        error = e;\n      }\n\n      expect(global.nativeCallSyncHook).toBeCalledTimes(1);\n      expect(global.nativeCallSyncHook).toBeCalledWith(0, 3, ['paloAlto', 'menloPark']);\n      expect(error).toBeInstanceOf(Error);\n      expect(error).toMatchObject({\n        message: 'firstFailure'\n      });\n    });\n    it('returning a value', function () {\n      global.nativeCallSyncHook = jest.fn(function () {\n        return 'secondSucc';\n      });\n      var result = NativeModules.RemoteModule2.syncMethod('mac', 'windows');\n      expect(global.nativeCallSyncHook).toBeCalledTimes(1);\n      expect(global.nativeCallSyncHook).toBeCalledWith(1, 3, ['mac', 'windows']);\n      expect(result).toBe('secondSucc');\n    });\n  });\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/BatchedBridge/__tests__/NativeModules-test.js"],"names":["jest","unmock","BatchedBridge","NativeModules","fs","parseErrorStack","MODULE_IDS","METHOD_IDS","PARAMS","CALL_ID","assertQueue","flushedQueue","index","moduleID","methodID","params","expect","toEqual","describe","beforeEach","resetModules","global","__fbBatchedBridgeConfig","require","it","RemoteModule1","remoteMethod","onFail","fn","onSucc","promiseMethod","RemoteModule2","resultingRemoteInvocations","length","toBe","firstFailCBID","firstSuccCBID","secondFailCBID","secondSuccCBID","__invokeCallback","toThrow","mock","calls","promise1","promiseReturningMethod","promise2","message","rejects","toBeInstanceOf","Error","toMatchObject","afterEach","nativeCallSyncHook","error","syncMethod","e","toBeCalledTimes","toBeCalledWith","result"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @emails oncall+react_native\n */\n\n'use strict';\n\njest.unmock('../NativeModules');\n\nlet BatchedBridge;\nlet NativeModules;\nlet fs;\nlet parseErrorStack;\n\nconst MODULE_IDS = 0;\nconst METHOD_IDS = 1;\nconst PARAMS = 2;\nconst CALL_ID = 3;\n\nconst assertQueue = (flushedQueue, index, moduleID, methodID, params) => {\n  expect(flushedQueue[MODULE_IDS][index]).toEqual(moduleID);\n  expect(flushedQueue[METHOD_IDS][index]).toEqual(methodID);\n  expect(flushedQueue[PARAMS][index]).toEqual(params);\n};\n\n// Important things to test:\n//\n// [x] Calling remote method actually queues it up on the BatchedBridge\n//\n// [x] Both error and success callbacks are invoked.\n//\n// [x] When simulating an error callback from remote method, both error and\n// success callbacks are cleaned up.\n//\n// [ ] Remote invocation throws if not supplying an error callback.\ndescribe('MessageQueue', function() {\n  beforeEach(function() {\n    jest.resetModules();\n\n    global.__fbBatchedBridgeConfig = require('../__mocks__/MessageQueueTestConfig');\n    BatchedBridge = require('../BatchedBridge');\n    NativeModules = require('../NativeModules');\n    fs = require('fs');\n    parseErrorStack = require('../../Core/Devtools/parseErrorStack');\n  });\n\n  it('should generate native modules', () => {\n    NativeModules.RemoteModule1.remoteMethod('foo');\n    const flushedQueue = BatchedBridge.flushedQueue();\n    assertQueue(flushedQueue, 0, 0, 0, ['foo']);\n  });\n\n  it('should make round trip and clear memory', function() {\n    const onFail = jest.fn();\n    const onSucc = jest.fn();\n\n    // Perform communication\n    NativeModules.RemoteModule1.promiseMethod(\n      'paloAlto',\n      'menloPark',\n      onFail,\n      onSucc,\n    );\n    NativeModules.RemoteModule2.promiseMethod('mac', 'windows', onFail, onSucc);\n\n    const resultingRemoteInvocations = BatchedBridge.flushedQueue();\n\n    // As always, the message queue has four fields\n    expect(resultingRemoteInvocations.length).toBe(4);\n    expect(resultingRemoteInvocations[MODULE_IDS].length).toBe(2);\n    expect(resultingRemoteInvocations[METHOD_IDS].length).toBe(2);\n    expect(resultingRemoteInvocations[PARAMS].length).toBe(2);\n    expect(typeof resultingRemoteInvocations[CALL_ID]).toEqual('number');\n\n    expect(resultingRemoteInvocations[0][0]).toBe(0); // `RemoteModule1`\n    expect(resultingRemoteInvocations[1][0]).toBe(1); // `promiseMethod`\n    expect([\n      // the arguments\n      resultingRemoteInvocations[2][0][0],\n      resultingRemoteInvocations[2][0][1],\n    ]).toEqual(['paloAlto', 'menloPark']);\n    // Callbacks ids are tacked onto the end of the remote arguments.\n    const firstFailCBID = resultingRemoteInvocations[2][0][2];\n    const firstSuccCBID = resultingRemoteInvocations[2][0][3];\n\n    expect(resultingRemoteInvocations[0][1]).toBe(1); // `RemoteModule2`\n    expect(resultingRemoteInvocations[1][1]).toBe(1); // `promiseMethod`\n    expect([\n      // the arguments\n      resultingRemoteInvocations[2][1][0],\n      resultingRemoteInvocations[2][1][1],\n    ]).toEqual(['mac', 'windows']);\n    const secondFailCBID = resultingRemoteInvocations[2][1][2];\n    const secondSuccCBID = resultingRemoteInvocations[2][1][3];\n\n    // Handle the first remote invocation by signaling failure.\n    BatchedBridge.__invokeCallback(firstFailCBID, ['firstFailure']);\n    // The failure callback was already invoked, the success is no longer valid\n    expect(function() {\n      BatchedBridge.__invokeCallback(firstSuccCBID, ['firstSucc']);\n    }).toThrow();\n    expect(onFail.mock.calls.length).toBe(1);\n    expect(onSucc.mock.calls.length).toBe(0);\n\n    // Handle the second remote invocation by signaling success.\n    BatchedBridge.__invokeCallback(secondSuccCBID, ['secondSucc']);\n    // The success callback was already invoked, the fail cb is no longer valid\n    expect(function() {\n      BatchedBridge.__invokeCallback(secondFailCBID, ['secondFail']);\n    }).toThrow();\n    expect(onFail.mock.calls.length).toBe(1);\n    expect(onSucc.mock.calls.length).toBe(1);\n  });\n\n  it('promise-returning methods (type=promise)', async function() {\n    // Perform communication\n    const promise1 = NativeModules.RemoteModule1.promiseReturningMethod(\n      'paloAlto',\n      'menloPark',\n    );\n    const promise2 = NativeModules.RemoteModule2.promiseReturningMethod(\n      'mac',\n      'windows',\n    );\n\n    const resultingRemoteInvocations = BatchedBridge.flushedQueue();\n\n    // As always, the message queue has four fields\n    expect(resultingRemoteInvocations.length).toBe(4);\n    expect(resultingRemoteInvocations[MODULE_IDS].length).toBe(2);\n    expect(resultingRemoteInvocations[METHOD_IDS].length).toBe(2);\n    expect(resultingRemoteInvocations[PARAMS].length).toBe(2);\n    expect(typeof resultingRemoteInvocations[CALL_ID]).toEqual('number');\n\n    expect(resultingRemoteInvocations[0][0]).toBe(0); // `RemoteModule1`\n    expect(resultingRemoteInvocations[1][0]).toBe(2); // `promiseReturningMethod`\n    expect([\n      // the arguments\n      resultingRemoteInvocations[2][0][0],\n      resultingRemoteInvocations[2][0][1],\n    ]).toEqual(['paloAlto', 'menloPark']);\n    // For promise-returning methods, the order of callbacks is flipped from\n    // regular async methods.\n    const firstSuccCBID = resultingRemoteInvocations[2][0][2];\n    const firstFailCBID = resultingRemoteInvocations[2][0][3];\n\n    expect(resultingRemoteInvocations[0][1]).toBe(1); // `RemoteModule2`\n    expect(resultingRemoteInvocations[1][1]).toBe(2); // `promiseReturningMethod`\n    expect([\n      // the arguments\n      resultingRemoteInvocations[2][1][0],\n      resultingRemoteInvocations[2][1][1],\n    ]).toEqual(['mac', 'windows']);\n    const secondSuccCBID = resultingRemoteInvocations[2][1][2];\n    const secondFailCBID = resultingRemoteInvocations[2][1][3];\n\n    // Handle the first remote invocation by signaling failure.\n    BatchedBridge.__invokeCallback(firstFailCBID, [{message: 'firstFailure'}]);\n    // The failure callback was already invoked, the success is no longer valid\n    expect(function() {\n      BatchedBridge.__invokeCallback(firstSuccCBID, ['firstSucc']);\n    }).toThrow();\n    await expect(promise1).rejects.toBeInstanceOf(Error);\n    await expect(promise1).rejects.toMatchObject({message: 'firstFailure'});\n\n    // Handle the second remote invocation by signaling success.\n    BatchedBridge.__invokeCallback(secondSuccCBID, ['secondSucc']);\n    // The success callback was already invoked, the fail cb is no longer valid\n    expect(function() {\n      BatchedBridge.__invokeCallback(secondFailCBID, ['secondFail']);\n    }).toThrow();\n    await promise2;\n  });\n\n  describe('sync methods', () => {\n    afterEach(function() {\n      delete global.nativeCallSyncHook;\n    });\n\n    it('throwing an exception', function() {\n      global.nativeCallSyncHook = jest.fn(() => {\n        throw new Error('firstFailure');\n      });\n\n      let error;\n      try {\n        NativeModules.RemoteModule1.syncMethod('paloAlto', 'menloPark');\n      } catch (e) {\n        error = e;\n      }\n\n      expect(global.nativeCallSyncHook).toBeCalledTimes(1);\n      expect(global.nativeCallSyncHook).toBeCalledWith(\n        0, // `RemoteModule1`\n        3, // `syncMethod`\n        ['paloAlto', 'menloPark'],\n      );\n      expect(error).toBeInstanceOf(Error);\n      expect(error).toMatchObject({\n        message: 'firstFailure',\n      });\n    });\n\n    it('returning a value', function() {\n      global.nativeCallSyncHook = jest.fn(() => {\n        return 'secondSucc';\n      });\n\n      const result = NativeModules.RemoteModule2.syncMethod('mac', 'windows');\n\n      expect(global.nativeCallSyncHook).toBeCalledTimes(1);\n      expect(global.nativeCallSyncHook).toBeCalledWith(\n        1, // `RemoteModule2`\n        3, // `syncMethod`\n        ['mac', 'windows'],\n      );\n\n      expect(result).toBe('secondSucc');\n    });\n  });\n});\n"]},"metadata":{},"sourceType":"script"}