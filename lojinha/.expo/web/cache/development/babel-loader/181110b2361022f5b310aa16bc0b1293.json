{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _marked = _regeneratorRuntime.mark(findPackageData);\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.findPackageData = findPackageData;\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar PACKAGE_FILENAME = \"package.json\";\n\nfunction findPackageData(filepath) {\n  var pkg, directories, isPackage, dirname, nextLoc;\n  return _regeneratorRuntime.wrap(function findPackageData$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          pkg = null;\n          directories = [];\n          isPackage = true;\n          dirname = _path().default.dirname(filepath);\n\n        case 4:\n          if (!(!pkg && _path().default.basename(dirname) !== \"node_modules\")) {\n            _context.next = 15;\n            break;\n          }\n\n          directories.push(dirname);\n          return _context.delegateYield(readConfigPackage(_path().default.join(dirname, PACKAGE_FILENAME)), \"t0\", 7);\n\n        case 7:\n          pkg = _context.t0;\n          nextLoc = _path().default.dirname(dirname);\n\n          if (!(dirname === nextLoc)) {\n            _context.next = 12;\n            break;\n          }\n\n          isPackage = false;\n          return _context.abrupt(\"break\", 15);\n\n        case 12:\n          dirname = nextLoc;\n          _context.next = 4;\n          break;\n\n        case 15:\n          return _context.abrupt(\"return\", {\n            filepath: filepath,\n            directories: directories,\n            pkg: pkg,\n            isPackage: isPackage\n          });\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nvar readConfigPackage = (0, _utils.makeStaticFileCache)(function (filepath, content) {\n  var options;\n\n  try {\n    options = JSON.parse(content);\n  } catch (err) {\n    err.message = filepath + \": Error while parsing JSON - \" + err.message;\n    throw err;\n  }\n\n  if (typeof options !== \"object\") {\n    throw new Error(filepath + \": Config returned typeof \" + typeof options);\n  }\n\n  if (Array.isArray(options)) {\n    throw new Error(filepath + \": Expected config object but found array\");\n  }\n\n  return {\n    filepath: filepath,\n    dirname: _path().default.dirname(filepath),\n    options: options\n  };\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@expo/config/node_modules/@babel/core/lib/config/files/package.js"],"names":["findPackageData","Object","defineProperty","exports","value","_path","data","_interopRequireDefault","require","_utils","obj","__esModule","default","PACKAGE_FILENAME","filepath","pkg","directories","isPackage","dirname","basename","push","readConfigPackage","join","nextLoc","makeStaticFileCache","content","options","JSON","parse","err","message","Error","Array","isArray"],"mappings":"AAAA;;;;uCAuBUA,e;;AArBVC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACH,eAAR,GAA0BA,eAA1B;;AAEA,SAASK,KAAT,GAAiB;AACf,MAAMC,IAAI,GAAGC,sBAAsB,CAACC,OAAO,CAAC,MAAD,CAAR,CAAnC;;AAEAH,EAAAA,KAAK,GAAG,iBAAY;AAClB,WAAOC,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,IAAIG,MAAM,GAAGD,OAAO,WAApB;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEE,IAAAA,OAAO,EAAEF;AAAX,GAArC;AAAwD;;AAE/F,IAAMG,gBAAgB,GAAG,cAAzB;;AAEA,SAAUb,eAAV,CAA0Bc,QAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AACMC,UAAAA,GADN,GACY,IADZ;AAEQC,UAAAA,WAFR,GAEsB,EAFtB;AAGMC,UAAAA,SAHN,GAGkB,IAHlB;AAKMC,UAAAA,OALN,GAKgBb,KAAK,GAAGO,OAAR,CAAgBM,OAAhB,CAAwBJ,QAAxB,CALhB;;AAAA;AAAA,gBAOS,CAACC,GAAD,IAAQV,KAAK,GAAGO,OAAR,CAAgBO,QAAhB,CAAyBD,OAAzB,MAAsC,cAPvD;AAAA;AAAA;AAAA;;AAQIF,UAAAA,WAAW,CAACI,IAAZ,CAAiBF,OAAjB;AACM,wCAAOG,iBAAiB,CAAChB,KAAK,GAAGO,OAAR,CAAgBU,IAAhB,CAAqBJ,OAArB,EAA8BL,gBAA9B,CAAD,CAAxB;;AATV;AASIE,UAAAA,GATJ;AAWUQ,UAAAA,OAXV,GAWoBlB,KAAK,GAAGO,OAAR,CAAgBM,OAAhB,CAAwBA,OAAxB,CAXpB;;AAAA,gBAaQA,OAAO,KAAKK,OAbpB;AAAA;AAAA;AAAA;;AAcMN,UAAAA,SAAS,GAAG,KAAZ;AAdN;;AAAA;AAkBIC,UAAAA,OAAO,GAAGK,OAAV;AAlBJ;AAAA;;AAAA;AAAA,2CAqBS;AACLT,YAAAA,QAAQ,EAARA,QADK;AAELE,YAAAA,WAAW,EAAXA,WAFK;AAGLD,YAAAA,GAAG,EAAHA,GAHK;AAILE,YAAAA,SAAS,EAATA;AAJK,WArBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA6BA,IAAMI,iBAAiB,GAAG,CAAC,GAAGZ,MAAM,CAACe,mBAAX,EAAgC,UAACV,QAAD,EAAWW,OAAX,EAAuB;AAC/E,MAAIC,OAAJ;;AAEA,MAAI;AACFA,IAAAA,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWH,OAAX,CAAV;AACD,GAFD,CAEE,OAAOI,GAAP,EAAY;AACZA,IAAAA,GAAG,CAACC,OAAJ,GAAiBhB,QAAjB,qCAAyDe,GAAG,CAACC,OAA7D;AACA,UAAMD,GAAN;AACD;;AAED,MAAI,OAAOH,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,UAAM,IAAIK,KAAJ,CAAajB,QAAb,iCAAiD,OAAOY,OAAxD,CAAN;AACD;;AAED,MAAIM,KAAK,CAACC,OAAN,CAAcP,OAAd,CAAJ,EAA4B;AAC1B,UAAM,IAAIK,KAAJ,CAAajB,QAAb,8CAAN;AACD;;AAED,SAAO;AACLA,IAAAA,QAAQ,EAARA,QADK;AAELI,IAAAA,OAAO,EAAEb,KAAK,GAAGO,OAAR,CAAgBM,OAAhB,CAAwBJ,QAAxB,CAFJ;AAGLY,IAAAA,OAAO,EAAPA;AAHK,GAAP;AAKD,CAvByB,CAA1B","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.findPackageData = findPackageData;\n\nfunction _path() {\n  const data = _interopRequireDefault(require(\"path\"));\n\n  _path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst PACKAGE_FILENAME = \"package.json\";\n\nfunction* findPackageData(filepath) {\n  let pkg = null;\n  const directories = [];\n  let isPackage = true;\n\n  let dirname = _path().default.dirname(filepath);\n\n  while (!pkg && _path().default.basename(dirname) !== \"node_modules\") {\n    directories.push(dirname);\n    pkg = yield* readConfigPackage(_path().default.join(dirname, PACKAGE_FILENAME));\n\n    const nextLoc = _path().default.dirname(dirname);\n\n    if (dirname === nextLoc) {\n      isPackage = false;\n      break;\n    }\n\n    dirname = nextLoc;\n  }\n\n  return {\n    filepath,\n    directories,\n    pkg,\n    isPackage\n  };\n}\n\nconst readConfigPackage = (0, _utils.makeStaticFileCache)((filepath, content) => {\n  let options;\n\n  try {\n    options = JSON.parse(content);\n  } catch (err) {\n    err.message = `${filepath}: Error while parsing JSON - ${err.message}`;\n    throw err;\n  }\n\n  if (typeof options !== \"object\") {\n    throw new Error(`${filepath}: Config returned typeof ${typeof options}`);\n  }\n\n  if (Array.isArray(options)) {\n    throw new Error(`${filepath}: Expected config object but found array`);\n  }\n\n  return {\n    filepath,\n    dirname: _path().default.dirname(filepath),\n    options\n  };\n});"]},"metadata":{},"sourceType":"script"}