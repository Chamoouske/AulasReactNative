{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Branch_1 = require(\"../../android/Branch\");\n\nvar Branch_2 = require(\"../../ios/Branch\");\n\nvar core_plugins_1 = require(\"../core-plugins\");\n\nvar static_plugins_1 = require(\"../static-plugins\");\n\nvar packageName = 'expo-branch';\n\nexports.withBranch = function (config) {\n  return static_plugins_1.withStaticPlugin(config, {\n    _isLegacyPlugin: true,\n    plugin: packageName,\n    fallback: withUnversionedBranch\n  });\n};\n\nvar withUnversionedBranch = core_plugins_1.createRunOncePlugin(function (config) {\n  config = Branch_1.withBranch(config);\n  config = Branch_2.withBranch(config);\n  return config;\n}, packageName);\nexports.default = exports.withBranch;","map":{"version":3,"sources":["../../../src/plugins/unversioned/expo-branch.ts"],"names":[],"mappings":";;;;;;AACA,IAAA,QAAA,GAAA,OAAA,wBAAA;;AACA,IAAA,QAAA,GAAA,OAAA,oBAAA;;AACA,IAAA,cAAA,GAAA,OAAA,mBAAA;;AACA,IAAA,gBAAA,GAAA,OAAA,qBAAA;;AAEA,IAAM,WAAW,GAAG,aAApB;;AAEa,OAAA,CAAA,UAAA,GAA2B,UAAA,MAAM,EAAG;AAC/C,SAAO,gBAAA,CAAA,gBAAA,CAAiB,MAAjB,EAAyB;AAC9B,IAAA,eAAe,EAAE,IADa;AAE9B,IAAA,MAAM,EAAE,WAFsB;AAI9B,IAAA,QAAQ,EAAE;AAJoB,GAAzB,CAAP;AAMD,CAPY;;AASb,IAAM,qBAAqB,GAAiB,cAAA,CAAA,mBAAA,CAAoB,UAAA,MAAM,EAAG;AACvE,EAAA,MAAM,GAAG,QAAA,CAAA,UAAA,CAAkB,MAAlB,CAAT;AACA,EAAA,MAAM,GAAG,QAAA,CAAA,UAAA,CAAc,MAAd,CAAT;AACA,SAAO,MAAP;AACD,CAJ2C,EAIzC,WAJyC,CAA5C;AAMA,OAAA,CAAA,OAAA,GAAe,OAAA,CAAA,UAAf","sourcesContent":["import { ConfigPlugin } from '../../Plugin.types';\nimport { withBranch as withBranchAndroid } from '../../android/Branch';\nimport { withBranch as withBranchIOS } from '../../ios/Branch';\nimport { createRunOncePlugin } from '../core-plugins';\nimport { withStaticPlugin } from '../static-plugins';\n\nconst packageName = 'expo-branch';\n\nexport const withBranch: ConfigPlugin = config => {\n  return withStaticPlugin(config, {\n    _isLegacyPlugin: true,\n    plugin: packageName,\n    // If the static plugin isn't found, use the unversioned one.\n    fallback: withUnversionedBranch,\n  });\n};\n\nconst withUnversionedBranch: ConfigPlugin = createRunOncePlugin(config => {\n  config = withBranchAndroid(config);\n  config = withBranchIOS(config);\n  return config;\n}, packageName);\n\nexport default withBranch;\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}