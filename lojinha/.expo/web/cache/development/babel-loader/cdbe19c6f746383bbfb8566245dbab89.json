{"ast":null,"code":"import { FontDisplay, FontSource, FontResource, UnloadFontOptions } from \"./Font.types\";\nexport { FontDisplay, FontSource, FontResource, UnloadFontOptions };","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/expo-font/build/Font.d.ts"],"names":["FontDisplay","FontSource","FontResource","UnloadFontOptions"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,UAAtB,EAAkCC,YAAlC,EAAgDC,iBAAhD;AAgDA,SAASH,WAAT,EAAsBC,UAAtB,EAAkCC,YAAlC,EAAgDC,iBAAhD","sourcesContent":["import { FontDisplay, FontSource, FontResource, UnloadFontOptions } from './Font.types';\n/**\n * Used to transform font family names to the scoped name. This does not need to\n * be called in standalone or bare apps but it will return unscoped font family\n * names if it is called in those contexts.\n * note(brentvatne): at some point we may want to warn if this is called\n * outside of a managed app.\n *\n * @param fontFamily name to process\n * @returns a name processed for use with the [current workflow](https://docs.expo.io/versions/latest/introduction/managed-vs-bare/)\n */\nexport declare function processFontFamily(fontFamily: string | null): string | null;\n/**\n * Synchronously detect if the font for `fontFamily` has finished loading\n *\n * @param fontFamily the name used to load the `FontResource`.\n * @returns `true` if the the font has fully loaded.\n */\nexport declare function isLoaded(fontFamily: string): boolean;\n/**\n * Synchronously detect if the font for `fontFamily` is still being loaded\n *\n * @param fontFamily the name used to load the `FontResource`.\n * @returns `true` if the the font is still loading.\n */\nexport declare function isLoading(fontFamily: string): boolean;\n/**\n * Natively load a font for use with Text elements.\n * @param fontFamilyOrFontMap string or map of values that can be used as the [`fontFamily`](https://reactnative.dev/docs/text#style) style prop with React Native Text elements.\n * @param source the font asset that should be loaded into the `fontFamily` namespace.\n */\nexport declare function loadAsync(fontFamilyOrFontMap: string | {\n    [fontFamily: string]: FontSource;\n}, source?: FontSource): Promise<void>;\n/**\n * Unloads all of the custom fonts. This is used for testing.\n */\nexport declare function unloadAllAsync(): Promise<void>;\n/**\n * Unload custom fonts matching the `fontFamily`s and display values provided.\n * Because fonts are automatically unloaded on every platform this is mostly used for testing.\n *\n * @param fontFamilyOrFontMap the names of the custom fonts that will be unloaded.\n * @param source when `fontFamilyOrFontMap` is a string, this should be the font source used to load the custom font originally.\n */\nexport declare function unloadAsync(fontFamilyOrFontMap: string | {\n    [fontFamily: string]: UnloadFontOptions;\n}, options?: UnloadFontOptions): Promise<void>;\nexport { FontDisplay, FontSource, FontResource, UnloadFontOptions };\n"]},"metadata":{},"sourceType":"module"}