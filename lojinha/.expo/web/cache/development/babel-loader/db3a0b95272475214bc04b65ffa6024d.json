{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nvar fs = require('fs');\n\nvar _process$argv$slice = process.argv.slice(2),\n    _process$argv$slice2 = _slicedToArray(_process$argv$slice, 2),\n    first = _process$argv$slice2[0],\n    second = _process$argv$slice2[1];\n\nvar contents1 = fs.readFileSync(first, 'utf8');\nvar contents2 = fs.readFileSync(second, 'utf8');\n\nfunction traverse(t) {\n  return t.replace(/\\).invoke/g, ')\\n.invoke').split('\\n').map(function (l) {\n    return l.trim();\n  }).filter(Boolean).filter(function (l) {\n    return !l.startsWith('namespace') && !l.startsWith('}') && !l.startsWith('/**') && !l.startsWith('#') && !l.startsWith('//') && !l.startsWith('importing it, you must change') && !l.startsWith('*');\n  }).map(function (l) {\n    return l.replace(/ /g, '');\n  }).sort();\n}\n\nvar t1 = traverse(contents1);\nvar t2 = traverse(contents2);\n\nif (t1.length !== t2.length) {\n  throw new Error('Old and new codegen produces output of different size');\n} else {\n  for (var i = 0; i < t1.length; i++) {\n    if (t1[i] !== t2[i]) {\n      throw new Error(\"Old and new codegen does not produce similar output! \" + i + \"  \" + t1[i] + \" | \" + t2[i]);\n    }\n  }\n}","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/packages/react-native-codegen/src/cli/verify_with_old_codegen.js"],"names":["fs","require","process","argv","slice","first","second","contents1","readFileSync","contents2","traverse","t","replace","split","map","l","trim","filter","Boolean","startsWith","sort","t1","t2","length","Error","i"],"mappings":"AAUA;;;;AAEA,IAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;0BACwBC,OAAO,CAACC,IAAR,CAAaC,KAAb,CAAmB,CAAnB,C;;IAAjBC,K;IAAOC,M;;AAEd,IAAMC,SAAS,GAAGP,EAAE,CAACQ,YAAH,CAAgBH,KAAhB,EAAuB,MAAvB,CAAlB;AACA,IAAMI,SAAS,GAAGT,EAAE,CAACQ,YAAH,CAAgBF,MAAhB,EAAwB,MAAxB,CAAlB;;AAEA,SAASI,QAAT,CAAkBC,CAAlB,EAAqB;AACnB,SAAOA,CAAC,CACLC,OADI,CACI,YADJ,EACkB,YADlB,EAEJC,KAFI,CAEE,IAFF,EAGJC,GAHI,CAGA,UAAAC,CAAC;AAAA,WAAIA,CAAC,CAACC,IAAF,EAAJ;AAAA,GAHD,EAIJC,MAJI,CAIGC,OAJH,EAKJD,MALI,CAMH,UAAAF,CAAC;AAAA,WACC,CAACA,CAAC,CAACI,UAAF,CAAa,WAAb,CAAD,IACA,CAACJ,CAAC,CAACI,UAAF,CAAa,GAAb,CADD,IAEA,CAACJ,CAAC,CAACI,UAAF,CAAa,KAAb,CAFD,IAGA,CAACJ,CAAC,CAACI,UAAF,CAAa,GAAb,CAHD,IAIA,CAACJ,CAAC,CAACI,UAAF,CAAa,IAAb,CAJD,IAKA,CAACJ,CAAC,CAACI,UAAF,CAAa,+BAAb,CALD,IAMA,CAACJ,CAAC,CAACI,UAAF,CAAa,GAAb,CAPF;AAAA,GANE,EAeJL,GAfI,CAeA,UAAAC,CAAC;AAAA,WAAIA,CAAC,CAACH,OAAF,CAAU,IAAV,EAAgB,EAAhB,CAAJ;AAAA,GAfD,EAgBJQ,IAhBI,EAAP;AAiBD;;AAED,IAAMC,EAAE,GAAGX,QAAQ,CAACH,SAAD,CAAnB;AACA,IAAMe,EAAE,GAAGZ,QAAQ,CAACD,SAAD,CAAnB;;AAEA,IAAIY,EAAE,CAACE,MAAH,KAAcD,EAAE,CAACC,MAArB,EAA6B;AAC3B,QAAM,IAAIC,KAAJ,CAAU,uDAAV,CAAN;AACD,CAFD,MAEO;AACL,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,EAAE,CAACE,MAAvB,EAA+BE,CAAC,EAAhC,EAAoC;AAClC,QAAIJ,EAAE,CAACI,CAAD,CAAF,KAAUH,EAAE,CAACG,CAAD,CAAhB,EAAqB;AACnB,YAAM,IAAID,KAAJ,2DACoDC,CADpD,UAEFJ,EAAE,CAACI,CAAD,CAFA,WAGEH,EAAE,CAACG,CAAD,CAHJ,CAAN;AAKD;AACF;AACF","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nconst fs = require('fs');\nconst [first, second] = process.argv.slice(2);\n\nconst contents1 = fs.readFileSync(first, 'utf8');\nconst contents2 = fs.readFileSync(second, 'utf8');\n\nfunction traverse(t) {\n  return t\n    .replace(/\\).invoke/g, ')\\n.invoke') // in old codegen it was in one line\n    .split('\\n')\n    .map(l => l.trim()) // no whitespaces\n    .filter(Boolean) // no empty lines\n    .filter(\n      l =>\n        !l.startsWith('namespace') && // no namespaces\n        !l.startsWith('}') && // after removing openign namespaces we need to remove all closings\n        !l.startsWith('/**') && // all comments\n        !l.startsWith('#') && // imports\n        !l.startsWith('//') && // comments\n        !l.startsWith('importing it, you must change') && // comment in old codegen\n        !l.startsWith('*'), //comments\n    )\n    .map(l => l.replace(/ /g, '')) // remove rest whitespaces\n    .sort(); // sort alphabetically lines\n}\n\nconst t1 = traverse(contents1);\nconst t2 = traverse(contents2);\n\nif (t1.length !== t2.length) {\n  throw new Error('Old and new codegen produces output of different size');\n} else {\n  for (let i = 0; i < t1.length; i++) {\n    if (t1[i] !== t2[i]) {\n      throw new Error(\n        `Old and new codegen does not produce similar output! ${i}  ${\n          t1[i]\n        } | ${t2[i]}`,\n      );\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}