{"ast":null,"code":"'use strict';\n\nvar deepDiffer = require(\"../deepDiffer\");\n\ndescribe('deepDiffer', function () {\n  it('should diff primitives of the same type', function () {\n    expect(deepDiffer(1, 2)).toBe(true);\n    expect(deepDiffer(42, 42)).toBe(false);\n    expect(deepDiffer('foo', 'bar')).toBe(true);\n    expect(deepDiffer('foo', 'foo')).toBe(false);\n    expect(deepDiffer(true, false)).toBe(true);\n    expect(deepDiffer(false, true)).toBe(true);\n    expect(deepDiffer(true, true)).toBe(false);\n    expect(deepDiffer(false, false)).toBe(false);\n    expect(deepDiffer(null, null)).toBe(false);\n    expect(deepDiffer(undefined, undefined)).toBe(false);\n  });\n  it('should diff primitives of different types', function () {\n    expect(deepDiffer(1, '1')).toBe(true);\n    expect(deepDiffer(true, 'true')).toBe(true);\n    expect(deepDiffer(true, 1)).toBe(true);\n    expect(deepDiffer(false, 0)).toBe(true);\n    expect(deepDiffer(null, undefined)).toBe(true);\n    expect(deepDiffer(null, 0)).toBe(true);\n    expect(deepDiffer(null, false)).toBe(true);\n    expect(deepDiffer(null, '')).toBe(true);\n    expect(deepDiffer(undefined, 0)).toBe(true);\n    expect(deepDiffer(undefined, false)).toBe(true);\n    expect(deepDiffer(undefined, '')).toBe(true);\n  });\n  it('should diff Objects', function () {\n    expect(deepDiffer({}, {})).toBe(false);\n    expect(deepDiffer({}, null)).toBe(true);\n    expect(deepDiffer(null, {})).toBe(true);\n    expect(deepDiffer({\n      a: 1\n    }, {\n      a: 1\n    })).toBe(false);\n    expect(deepDiffer({\n      a: 1\n    }, {\n      a: 2\n    })).toBe(true);\n    expect(deepDiffer({\n      a: 1\n    }, {\n      a: 1,\n      b: null\n    })).toBe(true);\n    expect(deepDiffer({\n      a: 1\n    }, {\n      a: 1,\n      b: 1\n    })).toBe(true);\n    expect(deepDiffer({\n      a: 1,\n      b: 1\n    }, {\n      a: 1\n    })).toBe(true);\n    expect(deepDiffer({\n      a: {\n        A: 1\n      },\n      b: 1\n    }, {\n      a: {\n        A: 1\n      },\n      b: 1\n    })).toBe(false);\n    expect(deepDiffer({\n      a: {\n        A: 1\n      },\n      b: 1\n    }, {\n      a: {\n        A: 2\n      },\n      b: 1\n    })).toBe(true);\n    expect(deepDiffer({\n      a: {\n        A: {\n          aA: 1,\n          bB: 1\n        }\n      },\n      b: 1\n    }, {\n      a: {\n        A: {\n          aA: 1,\n          bB: 1\n        }\n      },\n      b: 1\n    })).toBe(false);\n    expect(deepDiffer({\n      a: {\n        A: {\n          aA: 1,\n          bB: 1\n        }\n      },\n      b: 1\n    }, {\n      a: {\n        A: {\n          aA: 1,\n          cC: 1\n        }\n      },\n      b: 1\n    })).toBe(true);\n  });\n  it('should diff Arrays', function () {\n    expect(deepDiffer([], [])).toBe(false);\n    expect(deepDiffer([], null)).toBe(true);\n    expect(deepDiffer(null, [])).toBe(true);\n    expect(deepDiffer([42], [42])).toBe(false);\n    expect(deepDiffer([1], [2])).toBe(true);\n    expect(deepDiffer([1, 2, 3], [1, 2, 3])).toBe(false);\n    expect(deepDiffer([1, 2, 3], [1, 2, 4])).toBe(true);\n    expect(deepDiffer([1, 2, 3], [1, 4, 3])).toBe(true);\n    expect(deepDiffer([1, 2, 3, 4], [1, 2, 3])).toBe(true);\n    expect(deepDiffer([1, 2, 3], [1, 2, 3, 4])).toBe(true);\n    expect(deepDiffer([0, null, false, ''], [0, null, false, ''])).toBe(false);\n    expect(deepDiffer([0, null, false, ''], ['', false, null, 0])).toBe(true);\n  });\n  it('should diff mixed types', function () {\n    expect(deepDiffer({}, [])).toBe(true);\n    expect(deepDiffer([], {})).toBe(true);\n    expect(deepDiffer({\n      a: [{\n        A: {\n          aA: 1,\n          bB: 1\n        }\n      }, 'bar'],\n      c: [1, [false]]\n    }, {\n      a: [{\n        A: {\n          aA: 1,\n          bB: 1\n        }\n      }, 'bar'],\n      c: [1, [false]]\n    })).toBe(false);\n    expect(deepDiffer({\n      a: [{\n        A: {\n          aA: 1,\n          bB: 1\n        }\n      }, 'bar'],\n      c: [1, [false]]\n    }, {\n      a: [{\n        A: {\n          aA: 1,\n          bB: 2\n        }\n      }, 'bar'],\n      c: [1, [false]]\n    })).toBe(true);\n    expect(deepDiffer({\n      a: [{\n        A: {\n          aA: 1,\n          bB: 1\n        }\n      }, 'bar'],\n      c: [1, [false]]\n    }, {\n      a: [{\n        A: {\n          aA: 1,\n          bB: 1\n        }\n      }, 'bar'],\n      c: [1, [false], null]\n    })).toBe(true);\n    expect(deepDiffer({\n      a: [{\n        A: {\n          aA: 1,\n          bB: 1\n        }\n      }, 'bar'],\n      c: [1, [false]]\n    }, {\n      a: [{\n        A: {\n          aA: 1,\n          bB: 1\n        }\n      }, ['bar']],\n      c: [1, [false]]\n    })).toBe(true);\n  });\n  it('should distinguish between proper Array and Object', function () {\n    expect(deepDiffer(['a', 'b'], {\n      0: 'a',\n      1: 'b',\n      length: 2\n    })).toBe(true);\n    expect(deepDiffer(['a', 'b'], {\n      length: 2,\n      0: 'a',\n      1: 'b'\n    })).toBe(true);\n  });\n  it('should diff same object', function () {\n    var obj = [1, [2, 3]];\n    expect(deepDiffer(obj, obj)).toBe(false);\n  });\n  it('should respect maxDepth arg', function () {\n    expect(deepDiffer({\n      a: {\n        A: {\n          aA: 1,\n          bB: 1\n        }\n      },\n      b: 1\n    }, {\n      a: {\n        A: {\n          aA: 1,\n          bB: 1\n        }\n      },\n      b: 1\n    }, 3)).toBe(true);\n    expect(deepDiffer({\n      a: {\n        A: {\n          aA: 1,\n          bB: 1\n        }\n      },\n      b: 1\n    }, {\n      a: {\n        A: {\n          aA: 1,\n          bB: 1\n        }\n      },\n      b: 1\n    }, 4)).toBe(false);\n  });\n  it('should consider all functions equal', function () {\n    expect(deepDiffer(function () {}, function (x) {\n      return x;\n    })).toBe(false);\n\n    var f = function f() {};\n\n    expect(deepDiffer(f, f)).toBe(false);\n  });\n  it('should compare functions if unsafelyIgnoreFunctions is false', function () {\n    expect(deepDiffer(function () {}, function (x) {\n      return x;\n    }, undefined, {\n      unsafelyIgnoreFunctions: false\n    })).toBe(true);\n\n    var f = function f() {};\n\n    expect(deepDiffer(f, f, undefined, {\n      unsafelyIgnoreFunctions: false\n    })).toBe(false);\n    expect(deepDiffer(function () {}, function (x) {\n      return x;\n    }, {\n      unsafelyIgnoreFunctions: false\n    })).toBe(true);\n    expect(deepDiffer(f, f, {\n      unsafelyIgnoreFunctions: false\n    })).toBe(false);\n  });\n  it('should log when implicitly considering two different functions equal', function () {\n    function a() {}\n\n    function b() {}\n\n    var listeners = {\n      onDifferentFunctionsIgnored: jest.fn()\n    };\n    deepDiffer.unstable_setLogListeners(listeners);\n\n    try {\n      deepDiffer(a, a);\n      expect(listeners.onDifferentFunctionsIgnored).not.toHaveBeenCalled();\n      deepDiffer(a, b);\n      expect(listeners.onDifferentFunctionsIgnored.mock.calls).toEqual([['a', 'b']]);\n    } finally {\n      deepDiffer.unstable_setLogListeners(null);\n    }\n  });\n  it('should not log when explicitly considering two different functions equal', function () {\n    function a() {}\n\n    function b() {}\n\n    var listeners = {\n      onDifferentFunctionsIgnored: jest.fn()\n    };\n    deepDiffer.unstable_setLogListeners(listeners);\n\n    try {\n      deepDiffer(a, a, {\n        unsafelyIgnoreFunctions: true\n      });\n      expect(listeners.onDifferentFunctionsIgnored).not.toHaveBeenCalled();\n      deepDiffer(a, b, {\n        unsafelyIgnoreFunctions: true\n      });\n      expect(listeners.onDifferentFunctionsIgnored).not.toHaveBeenCalled();\n    } finally {\n      deepDiffer.unstable_setLogListeners(null);\n    }\n  });\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Utilities/differ/__tests__/deepDiffer-test.js"],"names":["deepDiffer","require","describe","it","expect","toBe","undefined","a","b","A","aA","bB","cC","c","length","obj","x","f","unsafelyIgnoreFunctions","listeners","onDifferentFunctionsIgnored","jest","fn","unstable_setLogListeners","not","toHaveBeenCalled","mock","calls","toEqual"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @emails oncall+react_native\n */\n\n'use strict';\n\nconst deepDiffer = require('../deepDiffer');\n\ndescribe('deepDiffer', function() {\n  it('should diff primitives of the same type', () => {\n    expect(deepDiffer(1, 2)).toBe(true);\n    expect(deepDiffer(42, 42)).toBe(false);\n    expect(deepDiffer('foo', 'bar')).toBe(true);\n    expect(deepDiffer('foo', 'foo')).toBe(false);\n    expect(deepDiffer(true, false)).toBe(true);\n    expect(deepDiffer(false, true)).toBe(true);\n    expect(deepDiffer(true, true)).toBe(false);\n    expect(deepDiffer(false, false)).toBe(false);\n    expect(deepDiffer(null, null)).toBe(false);\n    expect(deepDiffer(undefined, undefined)).toBe(false);\n  });\n  it('should diff primitives of different types', () => {\n    expect(deepDiffer(1, '1')).toBe(true);\n    expect(deepDiffer(true, 'true')).toBe(true);\n    expect(deepDiffer(true, 1)).toBe(true);\n    expect(deepDiffer(false, 0)).toBe(true);\n    expect(deepDiffer(null, undefined)).toBe(true);\n    expect(deepDiffer(null, 0)).toBe(true);\n    expect(deepDiffer(null, false)).toBe(true);\n    expect(deepDiffer(null, '')).toBe(true);\n    expect(deepDiffer(undefined, 0)).toBe(true);\n    expect(deepDiffer(undefined, false)).toBe(true);\n    expect(deepDiffer(undefined, '')).toBe(true);\n  });\n  it('should diff Objects', () => {\n    expect(deepDiffer({}, {})).toBe(false);\n    expect(deepDiffer({}, null)).toBe(true);\n    expect(deepDiffer(null, {})).toBe(true);\n    expect(deepDiffer({a: 1}, {a: 1})).toBe(false);\n    expect(deepDiffer({a: 1}, {a: 2})).toBe(true);\n    expect(deepDiffer({a: 1}, {a: 1, b: null})).toBe(true);\n    expect(deepDiffer({a: 1}, {a: 1, b: 1})).toBe(true);\n    expect(deepDiffer({a: 1, b: 1}, {a: 1})).toBe(true);\n    expect(deepDiffer({a: {A: 1}, b: 1}, {a: {A: 1}, b: 1})).toBe(false);\n    expect(deepDiffer({a: {A: 1}, b: 1}, {a: {A: 2}, b: 1})).toBe(true);\n    expect(\n      deepDiffer(\n        {a: {A: {aA: 1, bB: 1}}, b: 1},\n        {a: {A: {aA: 1, bB: 1}}, b: 1},\n      ),\n    ).toBe(false);\n    expect(\n      deepDiffer(\n        {a: {A: {aA: 1, bB: 1}}, b: 1},\n        {a: {A: {aA: 1, cC: 1}}, b: 1},\n      ),\n    ).toBe(true);\n  });\n  it('should diff Arrays', () => {\n    expect(deepDiffer([], [])).toBe(false);\n    expect(deepDiffer([], null)).toBe(true);\n    expect(deepDiffer(null, [])).toBe(true);\n    expect(deepDiffer([42], [42])).toBe(false);\n    expect(deepDiffer([1], [2])).toBe(true);\n    expect(deepDiffer([1, 2, 3], [1, 2, 3])).toBe(false);\n    expect(deepDiffer([1, 2, 3], [1, 2, 4])).toBe(true);\n    expect(deepDiffer([1, 2, 3], [1, 4, 3])).toBe(true);\n    expect(deepDiffer([1, 2, 3, 4], [1, 2, 3])).toBe(true);\n    expect(deepDiffer([1, 2, 3], [1, 2, 3, 4])).toBe(true);\n    expect(deepDiffer([0, null, false, ''], [0, null, false, ''])).toBe(false);\n    expect(deepDiffer([0, null, false, ''], ['', false, null, 0])).toBe(true);\n  });\n  it('should diff mixed types', () => {\n    expect(deepDiffer({}, [])).toBe(true);\n    expect(deepDiffer([], {})).toBe(true);\n    expect(\n      deepDiffer(\n        {a: [{A: {aA: 1, bB: 1}}, 'bar'], c: [1, [false]]},\n        {a: [{A: {aA: 1, bB: 1}}, 'bar'], c: [1, [false]]},\n      ),\n    ).toBe(false);\n    expect(\n      deepDiffer(\n        {a: [{A: {aA: 1, bB: 1}}, 'bar'], c: [1, [false]]},\n        {a: [{A: {aA: 1, bB: 2}}, 'bar'], c: [1, [false]]},\n      ),\n    ).toBe(true);\n    expect(\n      deepDiffer(\n        {a: [{A: {aA: 1, bB: 1}}, 'bar'], c: [1, [false]]},\n        {a: [{A: {aA: 1, bB: 1}}, 'bar'], c: [1, [false], null]},\n      ),\n    ).toBe(true);\n    expect(\n      deepDiffer(\n        {a: [{A: {aA: 1, bB: 1}}, 'bar'], c: [1, [false]]},\n        {a: [{A: {aA: 1, bB: 1}}, ['bar']], c: [1, [false]]},\n      ),\n    ).toBe(true);\n  });\n  it('should distinguish between proper Array and Object', () => {\n    expect(deepDiffer(['a', 'b'], {0: 'a', 1: 'b', length: 2})).toBe(true);\n    expect(deepDiffer(['a', 'b'], {length: 2, 0: 'a', 1: 'b'})).toBe(true);\n  });\n  it('should diff same object', () => {\n    const obj = [1, [2, 3]];\n    expect(deepDiffer(obj, obj)).toBe(false);\n  });\n  it('should respect maxDepth arg', () => {\n    expect(\n      deepDiffer(\n        {a: {A: {aA: 1, bB: 1}}, b: 1},\n        {a: {A: {aA: 1, bB: 1}}, b: 1},\n        3,\n      ),\n    ).toBe(true);\n    expect(\n      deepDiffer(\n        {a: {A: {aA: 1, bB: 1}}, b: 1},\n        {a: {A: {aA: 1, bB: 1}}, b: 1},\n        4,\n      ),\n    ).toBe(false);\n  });\n  it('should consider all functions equal', () => {\n    expect(deepDiffer(() => {}, x => x)).toBe(false);\n    const f = () => {};\n    expect(deepDiffer(f, f)).toBe(false);\n  });\n  it('should compare functions if unsafelyIgnoreFunctions is false', () => {\n    expect(\n      deepDiffer(() => {}, x => x, undefined, {unsafelyIgnoreFunctions: false}),\n    ).toBe(true);\n    const f = () => {};\n    expect(deepDiffer(f, f, undefined, {unsafelyIgnoreFunctions: false})).toBe(\n      false,\n    );\n\n    // shorthand, omitting maxDepth\n    expect(deepDiffer(() => {}, x => x, {unsafelyIgnoreFunctions: false})).toBe(\n      true,\n    );\n    expect(deepDiffer(f, f, {unsafelyIgnoreFunctions: false})).toBe(false);\n  });\n  it('should log when implicitly considering two different functions equal', () => {\n    function a() {}\n    function b() {}\n    const listeners = {onDifferentFunctionsIgnored: jest.fn()};\n    deepDiffer.unstable_setLogListeners(listeners);\n    try {\n      deepDiffer(a, a);\n      expect(listeners.onDifferentFunctionsIgnored).not.toHaveBeenCalled();\n\n      deepDiffer(a, b);\n      expect(listeners.onDifferentFunctionsIgnored.mock.calls).toEqual([\n        ['a', 'b'],\n      ]);\n    } finally {\n      deepDiffer.unstable_setLogListeners(null);\n    }\n  });\n  it('should not log when explicitly considering two different functions equal', () => {\n    function a() {}\n    function b() {}\n    const listeners = {onDifferentFunctionsIgnored: jest.fn()};\n    deepDiffer.unstable_setLogListeners(listeners);\n    try {\n      deepDiffer(a, a, {unsafelyIgnoreFunctions: true});\n      expect(listeners.onDifferentFunctionsIgnored).not.toHaveBeenCalled();\n\n      deepDiffer(a, b, {unsafelyIgnoreFunctions: true});\n      expect(listeners.onDifferentFunctionsIgnored).not.toHaveBeenCalled();\n    } finally {\n      deepDiffer.unstable_setLogListeners(null);\n    }\n  });\n});\n"]},"metadata":{},"sourceType":"script"}