{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Errors_1 = require(\"./Errors\");\n\nfunction serializeAndEvaluate(val) {\n  if (['undefined', 'string', 'boolean', 'number', 'bigint'].includes(typeof val)) {\n    return val;\n  } else if (typeof val === 'function') {\n    return val();\n  } else if (Array.isArray(val)) {\n    return val.map(serializeAndEvaluate);\n  } else if (typeof val === 'object') {\n    var output = {};\n\n    for (var property in val) {\n      if (val.hasOwnProperty(property)) {\n        output[property] = serializeAndEvaluate(val[property]);\n      }\n    }\n\n    return output;\n  }\n\n  throw new Errors_1.ConfigError(\"Expo config doesn't support `Symbols`: \" + val, 'INVALID_CONFIG');\n}\n\nexports.serializeAndEvaluate = serializeAndEvaluate;\n\nfunction serializeSkippingMods(val) {\n  if (typeof val === 'object' && !Array.isArray(val)) {\n    var output = {};\n\n    for (var property in val) {\n      if (val.hasOwnProperty(property)) {\n        if (property === 'mods' || property === 'plugins') {\n          output[property] = val[property];\n        } else {\n          output[property] = serializeAndEvaluate(val[property]);\n        }\n      }\n    }\n\n    return output;\n  }\n\n  return serializeAndEvaluate(val);\n}\n\nexports.serializeSkippingMods = serializeSkippingMods;\n\nfunction serializeAndEvaluatePlugin(val) {\n  var _a;\n\n  if (['undefined', 'string', 'boolean', 'number', 'bigint'].includes(typeof val)) {\n    return val;\n  } else if (typeof val === 'function') {\n    return (_a = val.name) !== null && _a !== void 0 ? _a : 'withAnonymous';\n  } else if (Array.isArray(val)) {\n    return val.map(serializeAndEvaluatePlugin);\n  } else if (typeof val === 'object') {\n    var output = {};\n\n    for (var property in val) {\n      if (val.hasOwnProperty(property)) {\n        output[property] = serializeAndEvaluatePlugin(val[property]);\n      }\n    }\n\n    return output;\n  }\n\n  throw new Errors_1.ConfigError(\"Expo config doesn't support `Symbols`: \" + val, 'INVALID_CONFIG');\n}\n\nfunction serializeAfterStaticPlugins(val) {\n  if (typeof val === 'object' && !Array.isArray(val)) {\n    var output = {};\n\n    for (var property in val) {\n      if (val.hasOwnProperty(property)) {\n        if (property === 'mods') {\n          output[property] = val[property];\n        } else if (property === 'plugins' && Array.isArray(val[property])) {\n          output[property] = val[property].map(serializeAndEvaluatePlugin);\n        } else {\n          output[property] = serializeAndEvaluate(val[property]);\n        }\n      }\n    }\n\n    return output;\n  }\n\n  return serializeAndEvaluate(val);\n}\n\nexports.serializeAfterStaticPlugins = serializeAfterStaticPlugins;","map":{"version":3,"sources":["../src/Serialize.ts"],"names":[],"mappings":"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","sourcesContent":["import { ConfigError } from './Errors';\n\nexport function serializeAndEvaluate(val: any): any {\n  if (['undefined', 'string', 'boolean', 'number', 'bigint'].includes(typeof val)) {\n    return val;\n  } else if (typeof val === 'function') {\n    // TODO: Bacon: Should we support async methods?\n    return val();\n  } else if (Array.isArray(val)) {\n    return val.map(serializeAndEvaluate);\n  } else if (typeof val === 'object') {\n    const output: { [key: string]: any } = {};\n    for (const property in val) {\n      if (val.hasOwnProperty(property)) {\n        output[property] = serializeAndEvaluate(val[property]);\n      }\n    }\n    return output;\n  }\n  // symbol\n  throw new ConfigError(`Expo config doesn't support \\`Symbols\\`: ${val}`, 'INVALID_CONFIG');\n}\n\nexport function serializeSkippingMods(val: any): any {\n  if (typeof val === 'object' && !Array.isArray(val)) {\n    const output: { [key: string]: any } = {};\n    for (const property in val) {\n      if (val.hasOwnProperty(property)) {\n        if (property === 'mods' || property === 'plugins') {\n          // Don't serialize mods or plugins\n          output[property] = val[property];\n        } else {\n          output[property] = serializeAndEvaluate(val[property]);\n        }\n      }\n    }\n    return output;\n  }\n  return serializeAndEvaluate(val);\n}\n\nfunction serializeAndEvaluatePlugin(val: any): any {\n  if (['undefined', 'string', 'boolean', 'number', 'bigint'].includes(typeof val)) {\n    return val;\n  } else if (typeof val === 'function') {\n    return val.name ?? 'withAnonymous';\n  } else if (Array.isArray(val)) {\n    return val.map(serializeAndEvaluatePlugin);\n  } else if (typeof val === 'object') {\n    const output: { [key: string]: any } = {};\n    for (const property in val) {\n      if (val.hasOwnProperty(property)) {\n        output[property] = serializeAndEvaluatePlugin(val[property]);\n      }\n    }\n    return output;\n  }\n  // symbol\n  throw new ConfigError(`Expo config doesn't support \\`Symbols\\`: ${val}`, 'INVALID_CONFIG');\n}\n\nexport function serializeAfterStaticPlugins(val: any): any {\n  if (typeof val === 'object' && !Array.isArray(val)) {\n    const output: { [key: string]: any } = {};\n    for (const property in val) {\n      if (val.hasOwnProperty(property)) {\n        if (property === 'mods') {\n          // Don't serialize mods\n          output[property] = val[property];\n        } else if (property === 'plugins' && Array.isArray(val[property])) {\n          // Serialize the mods by removing any config plugins\n          output[property] = val[property].map(serializeAndEvaluatePlugin);\n        } else {\n          output[property] = serializeAndEvaluate(val[property]);\n        }\n      }\n    }\n    return output;\n  }\n  return serializeAndEvaluate(val);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}