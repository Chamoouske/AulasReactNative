{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _path() {\n  var data = require(\"path\");\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _versionRanges = _interopRequireDefault(require(\"../versionRanges\"));\n\nvar _checkInstallation = require(\"../checkInstallation\");\n\nvar _common = require(\"./common\");\n\nvar _downloadAndUnzip = require(\"../../../tools/downloadAndUnzip\");\n\nvar _environmentVariables = require(\"../../../tools/windows/environmentVariables\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar _default = {\n  label: 'JDK',\n  getDiagnostics: function getDiagnostics(_ref) {\n    var Languages;\n    return _regeneratorRuntime.async(function getDiagnostics$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            Languages = _ref.Languages;\n            return _context.abrupt(\"return\", {\n              needsToBeFixed: (0, _checkInstallation.doesSoftwareNeedToBeFixed)({\n                version: typeof Languages.Java === 'string' ? Languages.Java : Languages.Java.version,\n                versionRange: _versionRanges.default.JAVA\n              }),\n              version: typeof Languages.Java === 'string' ? Languages.Java : Languages.Java.version,\n              versionRange: _versionRanges.default.JAVA\n            });\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  win32AutomaticFix: function win32AutomaticFix(_ref2) {\n    var loader, installerUrl, installPath, jdkPath;\n    return _regeneratorRuntime.async(function win32AutomaticFix$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            loader = _ref2.loader;\n            _context2.prev = 1;\n            installerUrl = 'https://download.java.net/java/GA/jdk11/9/GPL/openjdk-11.0.2_windows-x64_bin.zip';\n            installPath = process.env.LOCALAPPDATA || '';\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap((0, _downloadAndUnzip.downloadAndUnzip)({\n              loader: loader,\n              downloadUrl: installerUrl,\n              component: 'JDK',\n              installPath: installPath\n            }));\n\n          case 6:\n            loader.text = 'Updating environment variables';\n            jdkPath = (0, _path().join)(installPath, 'jdk-11.0.2');\n            _context2.next = 10;\n            return _regeneratorRuntime.awrap((0, _environmentVariables.setEnvironment)('JAVA_HOME', jdkPath));\n\n          case 10:\n            _context2.next = 12;\n            return _regeneratorRuntime.awrap((0, _environmentVariables.updateEnvironment)('PATH', (0, _path().join)(jdkPath, 'bin')));\n\n          case 12:\n            loader.succeed('JDK installed successfully. Please restart your shell to see the changes');\n            _context2.next = 18;\n            break;\n\n          case 15:\n            _context2.prev = 15;\n            _context2.t0 = _context2[\"catch\"](1);\n            loader.fail(_context2.t0);\n\n          case 18:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[1, 15]], Promise);\n  },\n  runAutomaticFix: function runAutomaticFix() {\n    return _regeneratorRuntime.async(function runAutomaticFix$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            (0, _common.logManualInstallation)({\n              healthcheck: 'JDK',\n              url: 'https://openjdk.java.net/'\n            });\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};\nexports.default = _default;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli/build/commands/doctor/healthchecks/jdk.js"],"names":["Object","defineProperty","exports","value","default","_path","data","require","_versionRanges","_interopRequireDefault","_checkInstallation","_common","_downloadAndUnzip","_environmentVariables","obj","__esModule","_default","label","getDiagnostics","Languages","needsToBeFixed","doesSoftwareNeedToBeFixed","version","Java","versionRange","JAVA","win32AutomaticFix","loader","installerUrl","installPath","process","env","LOCALAPPDATA","downloadAndUnzip","downloadUrl","component","text","jdkPath","join","setEnvironment","updateEnvironment","succeed","fail","runAutomaticFix","logManualInstallation","healthcheck","url"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _path() {\n  const data = require(\"path\");\n\n  _path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _versionRanges = _interopRequireDefault(require(\"../versionRanges\"));\n\nvar _checkInstallation = require(\"../checkInstallation\");\n\nvar _common = require(\"./common\");\n\nvar _downloadAndUnzip = require(\"../../../tools/downloadAndUnzip\");\n\nvar _environmentVariables = require(\"../../../tools/windows/environmentVariables\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _default = {\n  label: 'JDK',\n  getDiagnostics: async ({\n    Languages\n  }) => ({\n    needsToBeFixed: (0, _checkInstallation.doesSoftwareNeedToBeFixed)({\n      version: typeof Languages.Java === 'string' ? Languages.Java : Languages.Java.version,\n      versionRange: _versionRanges.default.JAVA\n    }),\n    version: typeof Languages.Java === 'string' ? Languages.Java : Languages.Java.version,\n    versionRange: _versionRanges.default.JAVA\n  }),\n  win32AutomaticFix: async ({\n    loader\n  }) => {\n    try {\n      // Installing JDK 11 because later versions seem to cause issues with gradle at the moment\n      const installerUrl = 'https://download.java.net/java/GA/jdk11/9/GPL/openjdk-11.0.2_windows-x64_bin.zip';\n      const installPath = process.env.LOCALAPPDATA || ''; // The zip is in a folder `jdk-11.02` so it can be unzipped directly there\n\n      await (0, _downloadAndUnzip.downloadAndUnzip)({\n        loader,\n        downloadUrl: installerUrl,\n        component: 'JDK',\n        installPath\n      });\n      loader.text = 'Updating environment variables';\n      const jdkPath = (0, _path().join)(installPath, 'jdk-11.0.2');\n      await (0, _environmentVariables.setEnvironment)('JAVA_HOME', jdkPath);\n      await (0, _environmentVariables.updateEnvironment)('PATH', (0, _path().join)(jdkPath, 'bin'));\n      loader.succeed('JDK installed successfully. Please restart your shell to see the changes');\n    } catch (e) {\n      loader.fail(e);\n    }\n  },\n  runAutomaticFix: async () => {\n    (0, _common.logManualInstallation)({\n      healthcheck: 'JDK',\n      url: 'https://openjdk.java.net/'\n    });\n  }\n};\nexports.default = _default;\n\n//# sourceMappingURL=jdk.js.map"]},"metadata":{},"sourceType":"script"}