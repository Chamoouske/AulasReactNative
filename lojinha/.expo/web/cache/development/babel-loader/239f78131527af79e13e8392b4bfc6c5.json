{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar fs_extra_1 = __importDefault(require(\"fs-extra\"));\n\nvar path_1 = __importDefault(require(\"path\"));\n\nvar StateManager_1 = __importDefault(require(\"../utils/StateManager\"));\n\nvar string_utils_1 = require(\"../utils/string-utils\");\n\nvar INFO_PLIST_FILE_PATH = 'Info.plist';\n\nfunction getUIStatusBarStyle(statusBarStyle) {\n  return \"UIStatusBarStyle\" + statusBarStyle.replace(/(^\\w)|(-\\w)/g, function (s) {\n    return s.toUpperCase();\n  }).replace(/-/g, '');\n}\n\nfunction configureInfoPlist(iosProjectPath) {\n  var config,\n      _a,\n      _b,\n      statusBarHidden,\n      statusBarStyle,\n      filePath,\n      fileContent,\n      _StateManager_1$defau,\n      newContent,\n      _args = arguments;\n\n  return _regeneratorRuntime.async(function configureInfoPlist$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          config = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n          statusBarHidden = (_a = config.statusBar) === null || _a === void 0 ? void 0 : _a.hidden;\n          statusBarStyle = (_b = config.statusBar) === null || _b === void 0 ? void 0 : _b.style;\n          filePath = path_1.default.resolve(iosProjectPath, INFO_PLIST_FILE_PATH);\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(fs_extra_1.default.readFile(filePath, 'utf-8'));\n\n        case 6:\n          fileContent = _context.sent;\n          _StateManager_1$defau = new StateManager_1.default(fileContent).applyAction(function (content) {\n            var _string_utils_1$repla = string_utils_1.replace(content, {\n              replaceContent: '<string>SplashScreen</string>',\n              replacePattern: /(?<=<key>UILaunchStoryboardName<\\/key>(.|\\n)*?)<string>.*?<\\/string>/m\n            }),\n                _string_utils_1$repla2 = _slicedToArray(_string_utils_1$repla, 2),\n                succeeded = _string_utils_1$repla2[0],\n                newContent = _string_utils_1$repla2[1];\n\n            return [newContent, 'launchScreenReplaced', succeeded];\n          }).applyAction(function (content, _ref) {\n            var launchScreenReplaced = _ref.launchScreenReplaced;\n\n            if (launchScreenReplaced) {\n              return [content, 'launchScreenInserted', false];\n            }\n\n            var _string_utils_1$inser = string_utils_1.insert(content, {\n              insertContent: \"  <key>UILaunchStoryboardName</key>\\n  <string>SplashScreen</string>\\n\",\n              insertPattern: /<\\/dict>/gm\n            }, true),\n                _string_utils_1$inser2 = _slicedToArray(_string_utils_1$inser, 2),\n                succeeded = _string_utils_1$inser2[0],\n                newContent = _string_utils_1$inser2[1];\n\n            return [newContent, 'inserted', succeeded];\n          }).applyAction(function (content) {\n            if (statusBarHidden === undefined) {\n              var _string_utils_1$repla3 = string_utils_1.replace(content, {\n                replaceContent: '',\n                replacePattern: /^.*<key>UIStatusBarHidden<\\/key>(.|\\n)*?<.*\\/>.*$/m\n              }),\n                  _string_utils_1$repla4 = _slicedToArray(_string_utils_1$repla3, 2),\n                  succeeded = _string_utils_1$repla4[0],\n                  _newContent = _string_utils_1$repla4[1];\n\n              return [_newContent, 'statusBarHidingRemoved', succeeded];\n            }\n\n            return [content, 'statusBarHidingRemoved', false];\n          }).applyAction(function (content, _ref2) {\n            var statusBarHidingRemoved = _ref2.statusBarHidingRemoved;\n\n            if (statusBarHidingRemoved || statusBarHidden === undefined) {\n              return [content, 'statusBarHidingReplaced', false];\n            }\n\n            var _string_utils_1$repla5 = string_utils_1.replace(content, {\n              replaceContent: String(statusBarHidden),\n              replacePattern: /(?<=<key>UIStatusBarHidden<\\/key>(.|\\n)*?<).*(?=\\/>)/m\n            }),\n                _string_utils_1$repla6 = _slicedToArray(_string_utils_1$repla5, 2),\n                succeeded = _string_utils_1$repla6[0],\n                newContent = _string_utils_1$repla6[1];\n\n            return [newContent, 'statusBarHidingReplaced', succeeded];\n          }).applyAction(function (content, _ref3) {\n            var statusBarHidingReplaced = _ref3.statusBarHidingReplaced;\n\n            if (statusBarHidingReplaced || statusBarHidden === undefined) {\n              return [content, 'statusBarHidingInserted', false];\n            }\n\n            var _string_utils_1$inser3 = string_utils_1.insert(content, {\n              insertContent: \"  <key>UIStatusBarHidden</key>\\n  <\" + statusBarHidden + \"/>\\n\",\n              insertPattern: /<\\/dict>/gm\n            }, true),\n                _string_utils_1$inser4 = _slicedToArray(_string_utils_1$inser3, 2),\n                succeeded = _string_utils_1$inser4[0],\n                newContent = _string_utils_1$inser4[1];\n\n            return [newContent, 'statusBarHidingInserted', succeeded];\n          }).applyAction(function (content) {\n            if (statusBarStyle === undefined) {\n              var _string_utils_1$repla7 = string_utils_1.replace(content, {\n                replacePattern: /^.*<key>UIStatusBarStyle<\\/key>(.|\\n)*?<string>.*<\\/string>.*$/m,\n                replaceContent: ''\n              }),\n                  _string_utils_1$repla8 = _slicedToArray(_string_utils_1$repla7, 2),\n                  succeeded = _string_utils_1$repla8[0],\n                  _newContent2 = _string_utils_1$repla8[1];\n\n              return [_newContent2, 'statusBarStyleRemoved', succeeded];\n            }\n\n            return [content, 'statusBarStyleRemoved', false];\n          }).applyAction(function (content, _ref4) {\n            var statusBarStyleRemoved = _ref4.statusBarStyleRemoved;\n\n            if (statusBarStyleRemoved || statusBarStyle === undefined) {\n              return [content, 'statusBarStyleReplaced', false];\n            }\n\n            var _string_utils_1$repla9 = string_utils_1.replace(content, {\n              replaceContent: getUIStatusBarStyle(statusBarStyle),\n              replacePattern: /(?<=<key>UIStatusBarStyle<\\/key>(.|\\n)*?<string>).*(?=<\\/string>)/m\n            }),\n                _string_utils_1$repla10 = _slicedToArray(_string_utils_1$repla9, 2),\n                succeeded = _string_utils_1$repla10[0],\n                newContent = _string_utils_1$repla10[1];\n\n            return [newContent, 'statusBarStyleReplaced', succeeded];\n          }).applyAction(function (content, _ref5) {\n            var statusBarStyleReplaced = _ref5.statusBarStyleReplaced;\n\n            if (statusBarStyleReplaced || statusBarStyle === undefined) {\n              return [content, 'statusBarStyleInserted', false];\n            }\n\n            var _string_utils_1$inser5 = string_utils_1.insert(content, {\n              insertContent: \"  <key>UIStatusBarStyle</key>\\n  <string>\" + getUIStatusBarStyle(statusBarStyle) + \"</string>\\n\",\n              insertPattern: /<\\/dict>/gm\n            }, true),\n                _string_utils_1$inser6 = _slicedToArray(_string_utils_1$inser5, 2),\n                succeeded = _string_utils_1$inser6[0],\n                newContent = _string_utils_1$inser6[1];\n\n            return [newContent, 'statusBarStyleInserted', succeeded];\n          }), newContent = _StateManager_1$defau.state;\n          _context.next = 10;\n          return _regeneratorRuntime.awrap(fs_extra_1.default.writeFile(filePath, newContent));\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.default = configureInfoPlist;","map":{"version":3,"sources":["../../src/ios/Info.plist.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from 'fs-extra';\nimport path from 'path';\n\nimport { SplashScreenStatusBarStyleType } from '../constants';\nimport StateManager from '../utils/StateManager';\nimport { replace, insert } from '../utils/string-utils';\n\nconst INFO_PLIST_FILE_PATH = 'Info.plist';\n\nfunction getUIStatusBarStyle(statusBarStyle: SplashScreenStatusBarStyleType) {\n  return `UIStatusBarStyle${statusBarStyle\n    .replace(/(^\\w)|(-\\w)/g, s => s.toUpperCase())\n    .replace(/-/g, '')}`;\n}\n\n/**\n * Configures [INFO_PLIST] to show [STORYBOARD] filename as Splash/Launch Screen.\n */\nexport default async function configureInfoPlist(\n  iosProjectPath: string,\n  config: {\n    statusBar?: {\n      hidden?: boolean;\n      style?: SplashScreenStatusBarStyleType;\n    };\n  } = {}\n) {\n  const statusBarHidden: boolean | undefined = config.statusBar?.hidden;\n  const statusBarStyle: SplashScreenStatusBarStyleType | undefined = config.statusBar?.style;\n\n  const filePath = path.resolve(iosProjectPath, INFO_PLIST_FILE_PATH);\n  const fileContent = await fs.readFile(filePath, 'utf-8');\n  const { state: newContent } = new StateManager<string, boolean>(fileContent)\n    // LaunchScreen\n    .applyAction(content => {\n      const [succeeded, newContent] = replace(content, {\n        replaceContent: '<string>SplashScreen</string>',\n        replacePattern: /(?<=<key>UILaunchStoryboardName<\\/key>(.|\\n)*?)<string>.*?<\\/string>/m,\n      });\n      return [newContent, 'launchScreenReplaced', succeeded];\n    })\n    .applyAction((content, { launchScreenReplaced }) => {\n      if (launchScreenReplaced) {\n        return [content, 'launchScreenInserted', false];\n      }\n      const [succeeded, newContent] = insert(\n        content,\n        {\n          insertContent: `  <key>UILaunchStoryboardName</key>\\n  <string>SplashScreen</string>\\n`,\n          insertPattern: /<\\/dict>/gm,\n        },\n        true\n      );\n      return [newContent, 'inserted', succeeded];\n    })\n    // StatusBar hiding\n    .applyAction(content => {\n      if (statusBarHidden === undefined) {\n        const [succeeded, newContent] = replace(content, {\n          replaceContent: '',\n          replacePattern: /^.*<key>UIStatusBarHidden<\\/key>(.|\\n)*?<.*\\/>.*$/m,\n        });\n        return [newContent, 'statusBarHidingRemoved', succeeded];\n      }\n      return [content, 'statusBarHidingRemoved', false];\n    })\n    .applyAction((content, { statusBarHidingRemoved }) => {\n      if (statusBarHidingRemoved || statusBarHidden === undefined) {\n        return [content, 'statusBarHidingReplaced', false];\n      }\n      const [succeeded, newContent] = replace(content, {\n        replaceContent: String(statusBarHidden),\n        replacePattern: /(?<=<key>UIStatusBarHidden<\\/key>(.|\\n)*?<).*(?=\\/>)/m,\n      });\n      return [newContent, 'statusBarHidingReplaced', succeeded];\n    })\n    .applyAction((content, { statusBarHidingReplaced }) => {\n      if (statusBarHidingReplaced || statusBarHidden === undefined) {\n        return [content, 'statusBarHidingInserted', false];\n      }\n      const [succeeded, newContent] = insert(\n        content,\n        {\n          insertContent: `  <key>UIStatusBarHidden</key>\\n  <${statusBarHidden}/>\\n`,\n          insertPattern: /<\\/dict>/gm,\n        },\n        true\n      );\n      return [newContent, 'statusBarHidingInserted', succeeded];\n    })\n    // StatusBar style\n    .applyAction(content => {\n      if (statusBarStyle === undefined) {\n        const [succeeded, newContent] = replace(content, {\n          replacePattern: /^.*<key>UIStatusBarStyle<\\/key>(.|\\n)*?<string>.*<\\/string>.*$/m,\n          replaceContent: '',\n        });\n        return [newContent, 'statusBarStyleRemoved', succeeded];\n      }\n      return [content, 'statusBarStyleRemoved', false];\n    })\n    .applyAction((content, { statusBarStyleRemoved }) => {\n      if (statusBarStyleRemoved || statusBarStyle === undefined) {\n        return [content, 'statusBarStyleReplaced', false];\n      }\n      const [succeeded, newContent] = replace(content, {\n        replaceContent: getUIStatusBarStyle(statusBarStyle),\n        replacePattern: /(?<=<key>UIStatusBarStyle<\\/key>(.|\\n)*?<string>).*(?=<\\/string>)/m,\n      });\n      return [newContent, 'statusBarStyleReplaced', succeeded];\n    })\n    .applyAction((content, { statusBarStyleReplaced }) => {\n      if (statusBarStyleReplaced || statusBarStyle === undefined) {\n        return [content, 'statusBarStyleInserted', false];\n      }\n      const [succeeded, newContent] = insert(\n        content,\n        {\n          insertContent: `  <key>UIStatusBarStyle</key>\\n  <string>${getUIStatusBarStyle(\n            statusBarStyle\n          )}</string>\\n`,\n          insertPattern: /<\\/dict>/gm,\n        },\n        true\n      );\n      return [newContent, 'statusBarStyleInserted', succeeded];\n    });\n  await fs.writeFile(filePath, newContent);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}