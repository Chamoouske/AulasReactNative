{"ast":null,"code":"export {};","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli/node_modules/@jest/types/build/ts3.4/Global.d.ts"],"names":[],"mappings":"AAmFA","sourcesContent":["/// <reference types=\"node\" />\r\n/**\r\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n/// <reference types=\"node\" />\r\nimport { CoverageMapData } from 'istanbul-lib-coverage';\r\nexport declare type DoneFn = (reason?: string | Error) => void;\r\nexport declare type TestName = string;\r\nexport declare type TestFn = (done?: DoneFn) => Promise<void | undefined | unknown> | void | undefined;\r\nexport declare type BlockFn = () => void;\r\nexport declare type BlockName = string;\r\nexport declare type HookFn = TestFn;\r\nexport declare type Col = unknown;\r\nexport declare type Row = Array<Col>;\r\nexport declare type Table = Array<Row>;\r\nexport declare type ArrayTable = Table | Row;\r\nexport declare type TemplateTable = TemplateStringsArray;\r\nexport declare type TemplateData = Array<unknown>;\r\nexport declare type EachTable = ArrayTable | TemplateTable;\r\nexport declare type EachTestFn = (...args: Array<any>) => Promise<any> | void | undefined;\r\ndeclare type Jasmine = {\r\n    _DEFAULT_TIMEOUT_INTERVAL?: number;\r\n    addMatchers: Function;\r\n};\r\ndeclare type Each = (table: EachTable, ...taggedTemplateData: Array<unknown>) => (title: string, test: EachTestFn, timeout?: number) => void;\r\nexport interface ItBase {\r\n    (testName: TestName, fn: TestFn, timeout?: number): void;\r\n    each: Each;\r\n}\r\nexport interface It extends ItBase {\r\n    only: ItBase;\r\n    skip: ItBase;\r\n    todo: (testName: TestName, ...rest: Array<any>) => void;\r\n}\r\nexport interface ItConcurrentBase {\r\n    (testName: string, testFn: () => Promise<any>, timeout?: number): void;\r\n}\r\nexport interface ItConcurrentExtended extends ItConcurrentBase {\r\n    only: ItConcurrentBase;\r\n    skip: ItConcurrentBase;\r\n}\r\nexport interface ItConcurrent extends It {\r\n    concurrent: ItConcurrentExtended;\r\n}\r\nexport interface DescribeBase {\r\n    (blockName: BlockName, blockFn: BlockFn): void;\r\n    each: Each;\r\n}\r\nexport interface Describe extends DescribeBase {\r\n    only: DescribeBase;\r\n    skip: DescribeBase;\r\n}\r\nexport interface TestFrameworkGlobals {\r\n    it: ItConcurrent;\r\n    test: ItConcurrent;\r\n    fit: ItBase & {\r\n        concurrent?: ItConcurrentBase;\r\n    };\r\n    xit: ItBase;\r\n    xtest: ItBase;\r\n    describe: Describe;\r\n    xdescribe: DescribeBase;\r\n    fdescribe: DescribeBase;\r\n    beforeAll: HookFn;\r\n    beforeEach: HookFn;\r\n    afterEach: HookFn;\r\n    afterAll: HookFn;\r\n}\r\nexport interface GlobalAdditions extends TestFrameworkGlobals {\r\n    __coverage__: CoverageMapData;\r\n    jasmine: Jasmine;\r\n    fail: () => void;\r\n    pending: () => void;\r\n    spyOn: () => void;\r\n    spyOnProperty: () => void;\r\n}\r\ndeclare type NodeGlobalWithoutAdditions = Pick<NodeJS.Global, Exclude<keyof NodeJS.Global, keyof GlobalAdditions>>;\r\nexport interface Global extends GlobalAdditions, NodeGlobalWithoutAdditions {\r\n    [extras: string]: any;\r\n}\r\nexport {};\r\n"]},"metadata":{},"sourceType":"module"}