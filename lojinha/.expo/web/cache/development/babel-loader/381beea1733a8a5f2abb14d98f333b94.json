{"ast":null,"code":"'use strict';\n\nfunction extendsForProp(prop, types) {\n  if (!prop.argument) {\n    console.log('null', prop);\n  }\n\n  var name = prop.argument.id.name;\n\n  if (types[name] != null) {\n    return null;\n  }\n\n  switch (name) {\n    case 'ViewProps':\n      return {\n        type: 'ReactNativeBuiltInType',\n        knownTypeName: 'ReactNativeCoreViewProps'\n      };\n\n    default:\n      {\n        throw new Error(\"Unable to handle prop spread: \" + name);\n      }\n  }\n}\n\nfunction removeKnownExtends(typeDefinition, types) {\n  return typeDefinition.filter(function (prop) {\n    return prop.type !== 'ObjectTypeSpreadProperty' || extendsForProp(prop, types) === null;\n  });\n}\n\nfunction getExtendsProps(typeDefinition, types) {\n  return typeDefinition.filter(function (prop) {\n    return prop.type === 'ObjectTypeSpreadProperty';\n  }).map(function (prop) {\n    return extendsForProp(prop, types);\n  }).filter(Boolean);\n}\n\nmodule.exports = {\n  getExtendsProps: getExtendsProps,\n  removeKnownExtends: removeKnownExtends\n};","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/components/extends.js"],"names":["extendsForProp","prop","types","argument","console","log","name","id","type","knownTypeName","Error","removeKnownExtends","typeDefinition","filter","getExtendsProps","map","Boolean","module","exports"],"mappings":"AAUA;;AAKA,SAASA,cAAT,CAAwBC,IAAxB,EAAwCC,KAAxC,EAAwD;AACtD,MAAI,CAACD,IAAI,CAACE,QAAV,EAAoB;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBJ,IAApB;AACD;;AACD,MAAMK,IAAI,GAAGL,IAAI,CAACE,QAAL,CAAcI,EAAd,CAAiBD,IAA9B;;AAEA,MAAIJ,KAAK,CAACI,IAAD,CAAL,IAAe,IAAnB,EAAyB;AAEvB,WAAO,IAAP;AACD;;AAED,UAAQA,IAAR;AACE,SAAK,WAAL;AACE,aAAO;AACLE,QAAAA,IAAI,EAAE,wBADD;AAELC,QAAAA,aAAa,EAAE;AAFV,OAAP;;AAIF;AAAS;AACP,cAAM,IAAIC,KAAJ,oCAA2CJ,IAA3C,CAAN;AACD;AARH;AAUD;;AAED,SAASK,kBAAT,CACEC,cADF,EAEEV,KAFF,EAG4B;AAC1B,SAAOU,cAAc,CAACC,MAAf,CACL,UAAAZ,IAAI;AAAA,WACFA,IAAI,CAACO,IAAL,KAAc,0BAAd,IACAR,cAAc,CAACC,IAAD,EAAOC,KAAP,CAAd,KAAgC,IAF9B;AAAA,GADC,CAAP;AAKD;;AAKD,SAASY,eAAT,CACEF,cADF,EAEEV,KAFF,EAGqC;AACnC,SAAOU,cAAc,CAClBC,MADI,CACG,UAAAZ,IAAI;AAAA,WAAIA,IAAI,CAACO,IAAL,KAAc,0BAAlB;AAAA,GADP,EAEJO,GAFI,CAEA,UAAAd,IAAI;AAAA,WAAID,cAAc,CAACC,IAAD,EAAOC,KAAP,CAAlB;AAAA,GAFJ,EAGJW,MAHI,CAGGG,OAHH,CAAP;AAID;;AAEDC,MAAM,CAACC,OAAP,GAAiB;AACfJ,EAAAA,eAAe,EAAfA,eADe;AAEfH,EAAAA,kBAAkB,EAAlBA;AAFe,CAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport type {ExtendsPropsShape} from '../../../CodegenSchema.js';\nimport type {TypeMap} from '../utils.js';\n\nfunction extendsForProp(prop: PropsAST, types: TypeMap) {\n  if (!prop.argument) {\n    console.log('null', prop);\n  }\n  const name = prop.argument.id.name;\n\n  if (types[name] != null) {\n    // This type is locally defined in the file\n    return null;\n  }\n\n  switch (name) {\n    case 'ViewProps':\n      return {\n        type: 'ReactNativeBuiltInType',\n        knownTypeName: 'ReactNativeCoreViewProps',\n      };\n    default: {\n      throw new Error(`Unable to handle prop spread: ${name}`);\n    }\n  }\n}\n\nfunction removeKnownExtends(\n  typeDefinition: $ReadOnlyArray<PropsAST>,\n  types: TypeMap,\n): $ReadOnlyArray<PropsAST> {\n  return typeDefinition.filter(\n    prop =>\n      prop.type !== 'ObjectTypeSpreadProperty' ||\n      extendsForProp(prop, types) === null,\n  );\n}\n\n// $FlowFixMe there's no flowtype for ASTs\ntype PropsAST = Object;\n\nfunction getExtendsProps(\n  typeDefinition: $ReadOnlyArray<PropsAST>,\n  types: TypeMap,\n): $ReadOnlyArray<ExtendsPropsShape> {\n  return typeDefinition\n    .filter(prop => prop.type === 'ObjectTypeSpreadProperty')\n    .map(prop => extendsForProp(prop, types))\n    .filter(Boolean);\n}\n\nmodule.exports = {\n  getExtendsProps,\n  removeKnownExtends,\n};\n"]},"metadata":{},"sourceType":"script"}