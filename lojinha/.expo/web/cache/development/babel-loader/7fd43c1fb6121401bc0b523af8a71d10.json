{"ast":null,"code":"'use strict';\n\nvar MessageQueue;\nvar MessageQueueTestModule;\nvar queue;\nvar MODULE_IDS = 0;\nvar METHOD_IDS = 1;\nvar PARAMS = 2;\n\nvar assertQueue = function assertQueue(flushedQueue, index, moduleID, methodID, params) {\n  expect(flushedQueue[MODULE_IDS][index]).toEqual(moduleID);\n  expect(flushedQueue[METHOD_IDS][index]).toEqual(methodID);\n  expect(flushedQueue[PARAMS][index]).toEqual(params);\n};\n\ndescribe('MessageQueue', function () {\n  beforeEach(function () {\n    jest.resetModules();\n    MessageQueue = require(\"../MessageQueue\");\n    MessageQueueTestModule = require(\"../__mocks__/MessageQueueTestModule\");\n    queue = new MessageQueue();\n    queue.registerCallableModule('MessageQueueTestModule', MessageQueueTestModule);\n    queue.createDebugLookup(0, 'MessageQueueTestModule', ['testHook1', 'testHook2']);\n  });\n  it('should enqueue native calls', function () {\n    queue.enqueueNativeCall(0, 1, [2]);\n    var flushedQueue = queue.flushedQueue();\n    assertQueue(flushedQueue, 0, 0, 1, [2]);\n  });\n  it('should call a local function with the function name', function () {\n    MessageQueueTestModule.testHook2 = jest.fn();\n    expect(MessageQueueTestModule.testHook2.mock.calls.length).toEqual(0);\n\n    queue.__callFunction('MessageQueueTestModule', 'testHook2', [2]);\n\n    expect(MessageQueueTestModule.testHook2.mock.calls.length).toEqual(1);\n  });\n  it('should store callbacks', function () {\n    queue.enqueueNativeCall(0, 1, ['foo'], null, null);\n    var flushedQueue = queue.flushedQueue();\n    assertQueue(flushedQueue, 0, 0, 1, ['foo']);\n  });\n  it('should call the stored callback', function () {\n    var done = false;\n    queue.enqueueNativeCall(0, 1, [], function () {}, function () {\n      done = true;\n    });\n\n    queue.__invokeCallback(1, []);\n\n    expect(done).toEqual(true);\n  });\n  it('should throw when calling the same callback twice', function () {\n    queue.enqueueNativeCall(0, 1, [], function () {}, function () {});\n\n    queue.__invokeCallback(1, []);\n\n    expect(function () {\n      return queue.__invokeCallback(1, []);\n    }).toThrow();\n  });\n  it('should throw when calling both success and failure callback', function () {\n    queue.enqueueNativeCall(0, 1, [], function () {}, function () {});\n\n    queue.__invokeCallback(1, []);\n\n    expect(function () {\n      return queue.__invokeCallback(0, []);\n    }).toThrow();\n  });\n  it('should throw when calling with unknown module', function () {\n    var unknownModule = 'UnknownModule',\n        unknownMethod = 'UnknownMethod';\n    expect(function () {\n      return queue.__callFunction(unknownModule, unknownMethod);\n    }).toThrow(\"Module \" + unknownModule + \" is not a registered callable module (calling \" + unknownMethod + \")\");\n  });\n  it('should return lazily registered module', function () {\n    var dummyModule = {},\n        name = 'modulesName';\n    queue.registerLazyCallableModule(name, function () {\n      return dummyModule;\n    });\n    expect(queue.getCallableModule(name)).toEqual(dummyModule);\n  });\n  it('should not initialize lazily registered module before it was used for the first time', function () {\n    var dummyModule = {},\n        name = 'modulesName';\n    var factory = jest.fn(function () {\n      return dummyModule;\n    });\n    queue.registerLazyCallableModule(name, factory);\n    expect(factory).not.toHaveBeenCalled();\n  });\n  it('should initialize lazily registered module only once', function () {\n    var dummyModule = {},\n        name = 'modulesName';\n    var factory = jest.fn(function () {\n      return dummyModule;\n    });\n    queue.registerLazyCallableModule(name, factory);\n    queue.getCallableModule(name);\n    queue.getCallableModule(name);\n    expect(factory).toHaveBeenCalledTimes(1);\n  });\n  it('should check if the global error handler is not overridden by the DebuggerInternal object', function () {\n    var dummyModule = {\n      dummy: function dummy() {}\n    };\n    var name = 'emptyModuleName';\n    var factory = jest.fn(function () {\n      return dummyModule;\n    });\n    queue.__shouldPauseOnThrow = jest.fn(function () {\n      return false;\n    });\n    queue.registerLazyCallableModule(name, factory);\n    queue.callFunctionReturnFlushedQueue(name, 'dummy', []);\n    expect(queue.__shouldPauseOnThrow).toHaveBeenCalledTimes(2);\n  });\n  it('should check if the global error handler is overridden by the DebuggerInternal object', function () {\n    var dummyModule = {\n      dummy: function dummy() {}\n    };\n    var name = 'emptyModuleName';\n    var factory = jest.fn(function () {\n      return dummyModule;\n    });\n    queue.__shouldPauseOnThrow = jest.fn(function () {\n      return true;\n    });\n    queue.registerLazyCallableModule(name, factory);\n    queue.callFunctionReturnFlushedQueue(name, 'dummy', []);\n    expect(queue.__shouldPauseOnThrow).toHaveBeenCalledTimes(2);\n  });\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/BatchedBridge/__tests__/MessageQueue-test.js"],"names":["MessageQueue","MessageQueueTestModule","queue","MODULE_IDS","METHOD_IDS","PARAMS","assertQueue","flushedQueue","index","moduleID","methodID","params","expect","toEqual","describe","beforeEach","jest","resetModules","require","registerCallableModule","createDebugLookup","it","enqueueNativeCall","testHook2","fn","mock","calls","length","__callFunction","done","__invokeCallback","toThrow","unknownModule","unknownMethod","dummyModule","name","registerLazyCallableModule","getCallableModule","factory","not","toHaveBeenCalled","toHaveBeenCalledTimes","dummy","__shouldPauseOnThrow","callFunctionReturnFlushedQueue"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+react_native\n * @format\n */\n\n'use strict';\n\nlet MessageQueue;\nlet MessageQueueTestModule;\nlet queue;\n\nconst MODULE_IDS = 0;\nconst METHOD_IDS = 1;\nconst PARAMS = 2;\n\nconst assertQueue = (flushedQueue, index, moduleID, methodID, params) => {\n  expect(flushedQueue[MODULE_IDS][index]).toEqual(moduleID);\n  expect(flushedQueue[METHOD_IDS][index]).toEqual(methodID);\n  expect(flushedQueue[PARAMS][index]).toEqual(params);\n};\n\n// Important things to test:\n//\n// [x] Local modules can be invoked through the queue.\n//\n// [ ] Local modules that throw exceptions are gracefully caught. In that case\n// local callbacks stored by IDs are cleaned up.\ndescribe('MessageQueue', function() {\n  beforeEach(function() {\n    jest.resetModules();\n    MessageQueue = require('../MessageQueue');\n    MessageQueueTestModule = require('../__mocks__/MessageQueueTestModule');\n    queue = new MessageQueue();\n    queue.registerCallableModule(\n      'MessageQueueTestModule',\n      MessageQueueTestModule,\n    );\n    queue.createDebugLookup(0, 'MessageQueueTestModule', [\n      'testHook1',\n      'testHook2',\n    ]);\n  });\n\n  it('should enqueue native calls', () => {\n    queue.enqueueNativeCall(0, 1, [2]);\n    const flushedQueue = queue.flushedQueue();\n    assertQueue(flushedQueue, 0, 0, 1, [2]);\n  });\n\n  it('should call a local function with the function name', () => {\n    MessageQueueTestModule.testHook2 = jest.fn();\n    expect(MessageQueueTestModule.testHook2.mock.calls.length).toEqual(0);\n    queue.__callFunction('MessageQueueTestModule', 'testHook2', [2]);\n    expect(MessageQueueTestModule.testHook2.mock.calls.length).toEqual(1);\n  });\n\n  it('should store callbacks', () => {\n    queue.enqueueNativeCall(0, 1, ['foo'], null, null);\n    const flushedQueue = queue.flushedQueue();\n    assertQueue(flushedQueue, 0, 0, 1, ['foo']);\n  });\n\n  it('should call the stored callback', () => {\n    let done = false;\n    queue.enqueueNativeCall(\n      0,\n      1,\n      [],\n      () => {},\n      () => {\n        done = true;\n      },\n    );\n    queue.__invokeCallback(1, []);\n    expect(done).toEqual(true);\n  });\n\n  it('should throw when calling the same callback twice', () => {\n    queue.enqueueNativeCall(0, 1, [], () => {}, () => {});\n    queue.__invokeCallback(1, []);\n    expect(() => queue.__invokeCallback(1, [])).toThrow();\n  });\n\n  it('should throw when calling both success and failure callback', () => {\n    queue.enqueueNativeCall(0, 1, [], () => {}, () => {});\n    queue.__invokeCallback(1, []);\n    expect(() => queue.__invokeCallback(0, [])).toThrow();\n  });\n\n  it('should throw when calling with unknown module', () => {\n    const unknownModule = 'UnknownModule',\n      unknownMethod = 'UnknownMethod';\n    expect(() => queue.__callFunction(unknownModule, unknownMethod)).toThrow(\n      `Module ${unknownModule} is not a registered callable module (calling ${unknownMethod})`,\n    );\n  });\n\n  it('should return lazily registered module', () => {\n    const dummyModule = {},\n      name = 'modulesName';\n    queue.registerLazyCallableModule(name, () => dummyModule);\n\n    expect(queue.getCallableModule(name)).toEqual(dummyModule);\n  });\n\n  it('should not initialize lazily registered module before it was used for the first time', () => {\n    const dummyModule = {},\n      name = 'modulesName';\n    const factory = jest.fn(() => dummyModule);\n    queue.registerLazyCallableModule(name, factory);\n    expect(factory).not.toHaveBeenCalled();\n  });\n\n  it('should initialize lazily registered module only once', () => {\n    const dummyModule = {},\n      name = 'modulesName';\n    const factory = jest.fn(() => dummyModule);\n    queue.registerLazyCallableModule(name, factory);\n    queue.getCallableModule(name);\n    queue.getCallableModule(name);\n    expect(factory).toHaveBeenCalledTimes(1);\n  });\n\n  it('should check if the global error handler is not overridden by the DebuggerInternal object', () => {\n    const dummyModule = {\n      dummy: function() {},\n    };\n    const name = 'emptyModuleName';\n    const factory = jest.fn(() => dummyModule);\n    queue.__shouldPauseOnThrow = jest.fn(() => false);\n    queue.registerLazyCallableModule(name, factory);\n    queue.callFunctionReturnFlushedQueue(name, 'dummy', []);\n    expect(queue.__shouldPauseOnThrow).toHaveBeenCalledTimes(2);\n  });\n\n  it('should check if the global error handler is overridden by the DebuggerInternal object', () => {\n    const dummyModule = {\n      dummy: function() {},\n    };\n    const name = 'emptyModuleName';\n    const factory = jest.fn(() => dummyModule);\n    queue.__shouldPauseOnThrow = jest.fn(() => true);\n    queue.registerLazyCallableModule(name, factory);\n    queue.callFunctionReturnFlushedQueue(name, 'dummy', []);\n    expect(queue.__shouldPauseOnThrow).toHaveBeenCalledTimes(2);\n  });\n});\n"]},"metadata":{},"sourceType":"script"}