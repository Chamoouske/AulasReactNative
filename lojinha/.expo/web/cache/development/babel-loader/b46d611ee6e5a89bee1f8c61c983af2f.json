{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar json_file_1 = __importDefault(require(\"@expo/json-file\"));\n\nvar fs = __importStar(require(\"fs-extra\"));\n\nvar path_1 = require(\"path\");\n\nvar ios_plugins_1 = require(\"../plugins/ios-plugins\");\n\nvar WarningAggregator = __importStar(require(\"../utils/warnings\"));\n\nvar Xcodeproj_1 = require(\"./utils/Xcodeproj\");\n\nexports.withLocales = function (config) {\n  return ios_plugins_1.withXcodeProject(config, function _callee(config) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(setLocalesAsync(config, {\n              projectRoot: config.modRequest.projectRoot,\n              project: config.modResults\n            }));\n\n          case 2:\n            config.modResults = _context.sent;\n            return _context.abrupt(\"return\", config);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  });\n};\n\nfunction getLocales(config) {\n  var _a;\n\n  return (_a = config.locales) !== null && _a !== void 0 ? _a : null;\n}\n\nexports.getLocales = getLocales;\n\nfunction setLocalesAsync(config, _ref) {\n  var projectRoot, project, locales, localesMap, projectName, supportingDirectory, stringName, _i, _Object$entries, _ref2, _ref3, lang, localizationObj, dir, strings, buffer, _i2, _Object$entries2, _ref4, _ref5, plistKey, localVersion, group;\n\n  return _regeneratorRuntime.async(function setLocalesAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          projectRoot = _ref.projectRoot, project = _ref.project;\n          locales = getLocales(config);\n\n          if (locales) {\n            _context2.next = 4;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", project);\n\n        case 4:\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(getResolvedLocalesAsync(projectRoot, locales));\n\n        case 6:\n          localesMap = _context2.sent;\n          projectName = Xcodeproj_1.getProjectName(projectRoot);\n          supportingDirectory = path_1.join(projectRoot, 'ios', projectName, 'Supporting');\n          stringName = 'InfoPlist.strings';\n          _i = 0, _Object$entries = Object.entries(localesMap);\n\n        case 11:\n          if (!(_i < _Object$entries.length)) {\n            _context2.next = 29;\n            break;\n          }\n\n          _ref2 = _Object$entries[_i];\n          _ref3 = _slicedToArray(_ref2, 2);\n          lang = _ref3[0];\n          localizationObj = _ref3[1];\n          dir = path_1.join(supportingDirectory, lang + \".lproj\");\n          _context2.next = 19;\n          return _regeneratorRuntime.awrap(fs.ensureDir(dir));\n\n        case 19:\n          strings = path_1.join(dir, stringName);\n          buffer = [];\n\n          for (_i2 = 0, _Object$entries2 = Object.entries(localizationObj); _i2 < _Object$entries2.length; _i2++) {\n            _ref4 = _Object$entries2[_i2];\n            _ref5 = _slicedToArray(_ref4, 2);\n            plistKey = _ref5[0];\n            localVersion = _ref5[1];\n            buffer.push(plistKey + \" = \\\"\" + localVersion + \"\\\";\");\n          }\n\n          _context2.next = 24;\n          return _regeneratorRuntime.awrap(fs.writeFile(strings, buffer.join('\\n')));\n\n        case 24:\n          group = Xcodeproj_1.ensureGroupRecursively(project, projectName + \"/Supporting/\" + lang + \".lproj\");\n\n          if (!(group === null || group === void 0 ? void 0 : group.children.some(function (_ref6) {\n            var comment = _ref6.comment;\n            return comment === stringName;\n          }))) {\n            project = Xcodeproj_1.addResourceFileToGroup(strings, projectName + \"/Supporting/\" + lang + \".lproj\", project);\n          }\n\n        case 26:\n          _i++;\n          _context2.next = 11;\n          break;\n\n        case 29:\n          return _context2.abrupt(\"return\", project);\n\n        case 30:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.setLocalesAsync = setLocalesAsync;\n\nfunction getResolvedLocalesAsync(projectRoot, input) {\n  var locales, _i3, _Object$entries3, _ref7, _ref8, lang, localeJsonPath;\n\n  return _regeneratorRuntime.async(function getResolvedLocalesAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          locales = {};\n          _i3 = 0, _Object$entries3 = Object.entries(input);\n\n        case 2:\n          if (!(_i3 < _Object$entries3.length)) {\n            _context3.next = 23;\n            break;\n          }\n\n          _ref7 = _Object$entries3[_i3];\n          _ref8 = _slicedToArray(_ref7, 2);\n          lang = _ref8[0];\n          localeJsonPath = _ref8[1];\n\n          if (!(typeof localeJsonPath === 'string')) {\n            _context3.next = 19;\n            break;\n          }\n\n          _context3.prev = 8;\n          _context3.next = 11;\n          return _regeneratorRuntime.awrap(json_file_1.default.readAsync(path_1.join(projectRoot, localeJsonPath)));\n\n        case 11:\n          locales[lang] = _context3.sent;\n          _context3.next = 17;\n          break;\n\n        case 14:\n          _context3.prev = 14;\n          _context3.t0 = _context3[\"catch\"](8);\n          WarningAggregator.addWarningIOS(\"locales-\" + lang, \"Failed to parse JSON of locale file for language: \" + lang, 'https://docs.expo.io/distribution/app-stores/#localizing-your-ios-app');\n\n        case 17:\n          _context3.next = 20;\n          break;\n\n        case 19:\n          locales[lang] = localeJsonPath;\n\n        case 20:\n          _i3++;\n          _context3.next = 2;\n          break;\n\n        case 23:\n          return _context3.abrupt(\"return\", locales);\n\n        case 24:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[8, 14]], Promise);\n}\n\nexports.getResolvedLocalesAsync = getResolvedLocalesAsync;","map":{"version":3,"sources":["../../src/ios/Locales.ts"],"names":[],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport JsonFile from '@expo/json-file';\nimport * as fs from 'fs-extra';\nimport { join } from 'path';\nimport { XcodeProject } from 'xcode';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withXcodeProject } from '../plugins/ios-plugins';\nimport * as WarningAggregator from '../utils/warnings';\nimport { addResourceFileToGroup, ensureGroupRecursively, getProjectName } from './utils/Xcodeproj';\n\ntype LocaleJson = Record<string, string>;\ntype ResolvedLocalesJson = Record<string, LocaleJson>;\ntype ExpoConfigLocales = NonNullable<ExpoConfig['locales']>;\n\nexport const withLocales: ConfigPlugin = config => {\n  return withXcodeProject(config, async config => {\n    config.modResults = await setLocalesAsync(config, {\n      projectRoot: config.modRequest.projectRoot,\n      project: config.modResults,\n    });\n    return config;\n  });\n};\n\nexport function getLocales(\n  config: Pick<ExpoConfig, 'locales'>\n): Record<string, string | LocaleJson> | null {\n  return config.locales ?? null;\n}\n\nexport async function setLocalesAsync(\n  config: Pick<ExpoConfig, 'locales'>,\n  { projectRoot, project }: { projectRoot: string; project: XcodeProject }\n): Promise<XcodeProject> {\n  const locales = getLocales(config);\n  if (!locales) {\n    return project;\n  }\n  // possibly validate CFBundleAllowMixedLocalizations is enabled\n  const localesMap = await getResolvedLocalesAsync(projectRoot, locales);\n\n  const projectName = getProjectName(projectRoot);\n  const supportingDirectory = join(projectRoot, 'ios', projectName, 'Supporting');\n\n  // TODO: Should we delete all before running? Revisit after we land on a lock file.\n  const stringName = 'InfoPlist.strings';\n\n  for (const [lang, localizationObj] of Object.entries(localesMap)) {\n    const dir = join(supportingDirectory, `${lang}.lproj`);\n    await fs.ensureDir(dir);\n    const strings = join(dir, stringName);\n    const buffer = [];\n    for (const [plistKey, localVersion] of Object.entries(localizationObj)) {\n      buffer.push(`${plistKey} = \"${localVersion}\";`);\n    }\n    // Write the file to the file system.\n    await fs.writeFile(strings, buffer.join('\\n'));\n\n    // deep find the correct folder\n    const group = ensureGroupRecursively(project, `${projectName}/Supporting/${lang}.lproj`);\n\n    // Ensure the file doesn't already exist\n    if (!group?.children.some(({ comment }) => comment === stringName)) {\n      // Only write the file if it doesn't already exist.\n      project = addResourceFileToGroup(strings, `${projectName}/Supporting/${lang}.lproj`, project);\n    }\n  }\n\n  return project;\n}\n\nexport async function getResolvedLocalesAsync(\n  projectRoot: string,\n  input: ExpoConfigLocales\n): Promise<ResolvedLocalesJson> {\n  const locales: ResolvedLocalesJson = {};\n  for (const [lang, localeJsonPath] of Object.entries(input)) {\n    if (typeof localeJsonPath === 'string') {\n      try {\n        locales[lang] = await JsonFile.readAsync(join(projectRoot, localeJsonPath));\n      } catch (e) {\n        // Add a warning when a json file cannot be parsed.\n        WarningAggregator.addWarningIOS(\n          `locales-${lang}`,\n          `Failed to parse JSON of locale file for language: ${lang}`,\n          'https://docs.expo.io/distribution/app-stores/#localizing-your-ios-app'\n        );\n      }\n    } else {\n      // In the off chance that someone defined the locales json in the config, pass it directly to the object.\n      // We do this to make the types more elegant.\n      locales[lang] = localeJsonPath;\n    }\n  }\n\n  return locales;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}