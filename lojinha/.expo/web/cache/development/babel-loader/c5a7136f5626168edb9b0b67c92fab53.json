{"ast":null,"code":"'use strict';\n\nvar getNativeComponentAttributes = require(\"../../ReactNative/getNativeComponentAttributes\");\n\nvar verifyComponentAttributeEquivalence = require(\"../verifyComponentAttributeEquivalence\").default;\n\njest.dontMock(\"../verifyComponentAttributeEquivalence\");\njest.mock(\"../../ReactNative/getNativeComponentAttributes\", function () {\n  return function () {\n    return {\n      NativeProps: {\n        value: 'BOOL'\n      },\n      bubblingEventTypes: {\n        topChange: {\n          phasedRegistrationNames: {\n            bubbled: 'onChange',\n            captured: 'onChangeCapture'\n          }\n        }\n      },\n      directEventTypes: {\n        topAccessibilityAction: {\n          registrationName: 'onAccessibilityAction'\n        }\n      },\n      validAttributes: {\n        borderColor: true,\n        style: {\n          borderColor: true,\n          transform: 'CATransform3D'\n        },\n        transform: 'CATransform3D'\n      }\n    };\n  };\n});\nbeforeEach(function () {\n  global.__DEV__ = true;\n  console.error = jest.fn();\n  jest.resetModules();\n});\ndescribe('verifyComponentAttributeEquivalence', function () {\n  test('should not verify in prod', function () {\n    global.__DEV__ = false;\n    verifyComponentAttributeEquivalence('TestComponent', {});\n  });\n  test('should not error with native config that is a subset of the given config', function () {\n    var configWithAdditionalProperties = getNativeComponentAttributes('TestComponent');\n    configWithAdditionalProperties.bubblingEventTypes.topFocus = {\n      phasedRegistrationNames: {\n        bubbled: 'onFocus',\n        captured: 'onFocusCapture'\n      }\n    };\n    configWithAdditionalProperties.directEventTypes.topSlidingComplete = {\n      registrationName: 'onSlidingComplete'\n    };\n    configWithAdditionalProperties.validAttributes.active = true;\n    verifyComponentAttributeEquivalence('TestComponent', configWithAdditionalProperties);\n    verifyComponentAttributeEquivalence('TestComponent', configWithAdditionalProperties);\n    expect(console.error).not.toBeCalled();\n  });\n  test('should error if given config is missing native config properties', function () {\n    verifyComponentAttributeEquivalence('TestComponent', {});\n    expect(console.error).toBeCalledTimes(3);\n    expect(console.error).toBeCalledWith('TestComponent generated view config for directEventTypes does not match native, missing: topAccessibilityAction');\n    expect(console.error).toBeCalledWith('TestComponent generated view config for bubblingEventTypes does not match native, missing: topChange');\n    expect(console.error).toBeCalledWith('TestComponent generated view config for validAttributes does not match native, missing: borderColor style');\n  });\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Utilities/__tests__/verifyComponentAttributeEquivalence-test.js"],"names":["getNativeComponentAttributes","require","verifyComponentAttributeEquivalence","default","jest","dontMock","mock","NativeProps","value","bubblingEventTypes","topChange","phasedRegistrationNames","bubbled","captured","directEventTypes","topAccessibilityAction","registrationName","validAttributes","borderColor","style","transform","beforeEach","global","__DEV__","console","error","fn","resetModules","describe","test","configWithAdditionalProperties","topFocus","topSlidingComplete","active","expect","not","toBeCalled","toBeCalledTimes","toBeCalledWith"],"mappings":"AAUA;;AAEA,IAAMA,4BAA4B,GAAGC,OAAO,kDAA5C;;AACA,IAAMC,mCAAmC,GAAGD,OAAO,0CAAP,CACzCE,OADH;;AAGAC,IAAI,CAACC,QAAL;AACAD,IAAI,CAACE,IAAL,mDAA4D;AAAA,SAAM;AAAA,WAAO;AACvEC,MAAAA,WAAW,EAAE;AACXC,QAAAA,KAAK,EAAE;AADI,OAD0D;AAIvEC,MAAAA,kBAAkB,EAAE;AAClBC,QAAAA,SAAS,EAAE;AACTC,UAAAA,uBAAuB,EAAE;AACvBC,YAAAA,OAAO,EAAE,UADc;AAEvBC,YAAAA,QAAQ,EAAE;AAFa;AADhB;AADO,OAJmD;AAYvEC,MAAAA,gBAAgB,EAAE;AAChBC,QAAAA,sBAAsB,EAAE;AACtBC,UAAAA,gBAAgB,EAAE;AADI;AADR,OAZqD;AAiBvEC,MAAAA,eAAe,EAAE;AACfC,QAAAA,WAAW,EAAE,IADE;AAEfC,QAAAA,KAAK,EAAE;AACLD,UAAAA,WAAW,EAAE,IADR;AAELE,UAAAA,SAAS,EAAE;AAFN,SAFQ;AAMfA,QAAAA,SAAS,EAAE;AANI;AAjBsD,KAAP;AAAA,GAAN;AAAA,CAA5D;AA2BAC,UAAU,CAAC,YAAM;AACfC,EAAAA,MAAM,CAACC,OAAP,GAAiB,IAAjB;AACAC,EAAAA,OAAO,CAACC,KAAR,GAAgBrB,IAAI,CAACsB,EAAL,EAAhB;AACAtB,EAAAA,IAAI,CAACuB,YAAL;AACD,CAJS,CAAV;AAMAC,QAAQ,CAAC,qCAAD,EAAwC,YAAM;AACpDC,EAAAA,IAAI,CAAC,2BAAD,EAA8B,YAAM;AACtCP,IAAAA,MAAM,CAACC,OAAP,GAAiB,KAAjB;AACArB,IAAAA,mCAAmC,CAAC,eAAD,EAAkB,EAAlB,CAAnC;AACD,GAHG,CAAJ;AAKA2B,EAAAA,IAAI,CAAC,0EAAD,EAA6E,YAAM;AACrF,QAAMC,8BAA8B,GAAG9B,4BAA4B,CACjE,eADiE,CAAnE;AAIA8B,IAAAA,8BAA8B,CAACrB,kBAA/B,CAAkDsB,QAAlD,GAA6D;AAC3DpB,MAAAA,uBAAuB,EAAE;AACvBC,QAAAA,OAAO,EAAE,SADc;AAEvBC,QAAAA,QAAQ,EAAE;AAFa;AADkC,KAA7D;AAOAiB,IAAAA,8BAA8B,CAAChB,gBAA/B,CAAgDkB,kBAAhD,GAAqE;AACnEhB,MAAAA,gBAAgB,EAAE;AADiD,KAArE;AAIAc,IAAAA,8BAA8B,CAACb,eAA/B,CAA+CgB,MAA/C,GAAwD,IAAxD;AAEA/B,IAAAA,mCAAmC,CACjC,eADiC,EAEjC4B,8BAFiC,CAAnC;AAIA5B,IAAAA,mCAAmC,CACjC,eADiC,EAEjC4B,8BAFiC,CAAnC;AAKAI,IAAAA,MAAM,CAACV,OAAO,CAACC,KAAT,CAAN,CAAsBU,GAAtB,CAA0BC,UAA1B;AACD,GA5BG,CAAJ;AA8BAP,EAAAA,IAAI,CAAC,kEAAD,EAAqE,YAAM;AAC7E3B,IAAAA,mCAAmC,CAAC,eAAD,EAAkB,EAAlB,CAAnC;AAEAgC,IAAAA,MAAM,CAACV,OAAO,CAACC,KAAT,CAAN,CAAsBY,eAAtB,CAAsC,CAAtC;AACAH,IAAAA,MAAM,CAACV,OAAO,CAACC,KAAT,CAAN,CAAsBa,cAAtB,CACE,iHADF;AAGAJ,IAAAA,MAAM,CAACV,OAAO,CAACC,KAAT,CAAN,CAAsBa,cAAtB,CACE,sGADF;AAGAJ,IAAAA,MAAM,CAACV,OAAO,CAACC,KAAT,CAAN,CAAsBa,cAAtB,CACE,2GADF;AAGD,GAbG,CAAJ;AAcD,CAlDO,CAAR","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @emails oncall+react_native\n */\n\n'use strict';\n\nconst getNativeComponentAttributes = require('../../ReactNative/getNativeComponentAttributes');\nconst verifyComponentAttributeEquivalence = require('../verifyComponentAttributeEquivalence')\n  .default;\n\njest.dontMock('../verifyComponentAttributeEquivalence');\njest.mock('../../ReactNative/getNativeComponentAttributes', () => () => ({\n  NativeProps: {\n    value: 'BOOL',\n  },\n  bubblingEventTypes: {\n    topChange: {\n      phasedRegistrationNames: {\n        bubbled: 'onChange',\n        captured: 'onChangeCapture',\n      },\n    },\n  },\n  directEventTypes: {\n    topAccessibilityAction: {\n      registrationName: 'onAccessibilityAction',\n    },\n  },\n  validAttributes: {\n    borderColor: true,\n    style: {\n      borderColor: true,\n      transform: 'CATransform3D',\n    },\n    transform: 'CATransform3D',\n  },\n}));\n\nbeforeEach(() => {\n  global.__DEV__ = true;\n  console.error = jest.fn();\n  jest.resetModules();\n});\n\ndescribe('verifyComponentAttributeEquivalence', () => {\n  test('should not verify in prod', () => {\n    global.__DEV__ = false;\n    verifyComponentAttributeEquivalence('TestComponent', {});\n  });\n\n  test('should not error with native config that is a subset of the given config', () => {\n    const configWithAdditionalProperties = getNativeComponentAttributes(\n      'TestComponent',\n    );\n\n    configWithAdditionalProperties.bubblingEventTypes.topFocus = {\n      phasedRegistrationNames: {\n        bubbled: 'onFocus',\n        captured: 'onFocusCapture',\n      },\n    };\n\n    configWithAdditionalProperties.directEventTypes.topSlidingComplete = {\n      registrationName: 'onSlidingComplete',\n    };\n\n    configWithAdditionalProperties.validAttributes.active = true;\n\n    verifyComponentAttributeEquivalence(\n      'TestComponent',\n      configWithAdditionalProperties,\n    );\n    verifyComponentAttributeEquivalence(\n      'TestComponent',\n      configWithAdditionalProperties,\n    );\n\n    expect(console.error).not.toBeCalled();\n  });\n\n  test('should error if given config is missing native config properties', () => {\n    verifyComponentAttributeEquivalence('TestComponent', {});\n\n    expect(console.error).toBeCalledTimes(3);\n    expect(console.error).toBeCalledWith(\n      'TestComponent generated view config for directEventTypes does not match native, missing: topAccessibilityAction',\n    );\n    expect(console.error).toBeCalledWith(\n      'TestComponent generated view config for bubblingEventTypes does not match native, missing: topChange',\n    );\n    expect(console.error).toBeCalledWith(\n      'TestComponent generated view config for validAttributes does not match native, missing: borderColor style',\n    );\n  });\n});\n"]},"metadata":{},"sourceType":"script"}