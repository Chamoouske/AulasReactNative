{"ast":null,"code":"","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["/// <reference types=\"node\" />\nimport { Server as HttpServer } from 'http';\nimport { Server as HttpsServer } from 'https';\nimport messageSocketModule from './messageSocketServer';\n/**\n * The eventsSocket websocket listens at the 'events/` for websocket\n * connections, on which all Metro reports will be emitted.\n *\n * This is mostly useful for developer tools (clients) that wants to monitor Metro,\n * and the apps connected to Metro.\n *\n * The eventsSocket provides the following features:\n * - it reports any Metro event (that is reported through a reporter) to all clients\n * - it reports any console.log's (and friends) from the connected app to all clients\n *   (as client_log event)\n * - it allows connected clients to send commands through Metro to the connected app.\n *   This reuses the generic command mechanism.\n *   Two useful commands are 'reload' and 'devmenu'.\n */\ndeclare type Server = HttpServer | HttpsServer;\ndeclare type MessageSocket = ReturnType<typeof messageSocketModule.attachToServer>;\n/**\n * Starts the eventsSocket at the given path\n *\n * @param server\n * @param path typically: 'events/'\n * @param messageSocket: webSocket to which all connected RN apps are listening\n */\ndeclare function attachToServer(server: Server, path: string, messageSocket: MessageSocket): {\n    reportEvent: (event: any) => void;\n};\ndeclare const _default: {\n    attachToServer: typeof attachToServer;\n};\nexport default _default;\n//# sourceMappingURL=eventsSocketServer.d.ts.map"]},"metadata":{},"sourceType":"module"}