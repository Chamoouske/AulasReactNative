{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useEffect, useState } from 'react';\nimport { loadAsync } from \"./Font\";\nexport function useFonts(map) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loaded = _useState2[0],\n      setLoaded = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      error = _useState4[0],\n      setError = _useState4[1];\n\n  useEffect(function () {\n    loadAsync(map).then(function () {\n      return setLoaded(true);\n    }).catch(setError);\n  }, []);\n  return [loaded, error];\n}","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/expo-font/src/FontHooks.ts"],"names":["useEffect","useState","loadAsync","useFonts","map","loaded","setLoaded","error","setError","then","catch"],"mappings":";AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,SAASC,SAAT;AAaA,OAAO,SAASC,QAAT,CACLC,GADK,EAEoB;AAAA,kBACGH,QAAQ,CAAC,KAAD,CADX;AAAA;AAAA,MAClBI,MADkB;AAAA,MACVC,SADU;;AAAA,mBAECL,QAAQ,CAAe,IAAf,CAFT;AAAA;AAAA,MAElBM,KAFkB;AAAA,MAEXC,QAFW;;AAIzBR,EAAAA,SAAS,CAAC,YAAM;AACdE,IAAAA,SAAS,CAACE,GAAD,CAAT,CACGK,IADH,CACQ;AAAA,aAAMH,SAAS,CAAC,IAAD,CAAf;AAAA,KADR,EAEGI,KAFH,CAESF,QAFT;AAGD,GAJQ,EAIN,EAJM,CAAT;AAMA,SAAO,CAACH,MAAD,EAASE,KAAT,CAAP;AACD","sourcesContent":["import { useEffect, useState } from 'react';\n\nimport { loadAsync } from './Font';\nimport { FontSource } from './Font.types';\n\n/**\n * Load a map of custom fonts to use in textual elements.\n * The map keys are used as font names, and can be used with `fontFamily: <name>;`.\n * It returns a boolean describing if all fonts are loaded.\n *\n * Note, the fonts are not \"reloaded\" when you dynamically change the font map.\n *\n * @see https://docs.expo.io/versions/latest/sdk/font/\n * @example const [loaded, error] = useFonts(...);\n */\nexport function useFonts(\n  map: string | { [fontFamily: string]: FontSource }\n): [boolean, Error | null] {\n  const [loaded, setLoaded] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    loadAsync(map)\n      .then(() => setLoaded(true))\n      .catch(setError);\n  }, []);\n\n  return [loaded, error];\n}\n"]},"metadata":{},"sourceType":"module"}