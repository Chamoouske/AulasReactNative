{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar configure_splash_screen_1 = require(\"@expo/configure-splash-screen\");\n\nvar core_plugins_1 = require(\"../plugins/core-plugins\");\n\nvar WarningAggregator = __importStar(require(\"../utils/warnings\"));\n\nexports.withSplashScreen = function (config) {\n  return core_plugins_1.withDangerousMod(config, ['ios', function _callee(config) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(setSplashScreenAsync(config, config.modRequest.projectRoot));\n\n          case 2:\n            return _context.abrupt(\"return\", config);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }]);\n};\n\nfunction getSplashScreen(config) {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;\n\n  if (!config.splash && !((_a = config.ios) === null || _a === void 0 ? void 0 : _a.splash)) {\n    return;\n  }\n\n  var result = {\n    imageResizeMode: (_f = (_d = (_c = (_b = config.ios) === null || _b === void 0 ? void 0 : _b.splash) === null || _c === void 0 ? void 0 : _c.resizeMode) !== null && _d !== void 0 ? _d : (_e = config.splash) === null || _e === void 0 ? void 0 : _e.resizeMode) !== null && _f !== void 0 ? _f : configure_splash_screen_1.SplashScreenImageResizeMode.CONTAIN,\n    backgroundColor: (_l = (_j = (_h = (_g = config.ios) === null || _g === void 0 ? void 0 : _g.splash) === null || _h === void 0 ? void 0 : _h.backgroundColor) !== null && _j !== void 0 ? _j : (_k = config.splash) === null || _k === void 0 ? void 0 : _k.backgroundColor) !== null && _l !== void 0 ? _l : '#FFFFFF',\n    image: (_p = (_o = (_m = config.ios) === null || _m === void 0 ? void 0 : _m.splash) === null || _o === void 0 ? void 0 : _o.image) !== null && _p !== void 0 ? _p : (_q = config.splash) === null || _q === void 0 ? void 0 : _q.image\n  };\n  return result;\n}\n\nexports.getSplashScreen = getSplashScreen;\n\nfunction setSplashScreenAsync(config, projectRoot) {\n  var splashScreenIsSupported, splashConfig;\n  return _regeneratorRuntime.async(function setSplashScreenAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          splashScreenIsSupported = config.sdkVersion === '39.0.0' || config.sdkVersion === '40.0.0' || !config.sdkVersion;\n\n          if (splashScreenIsSupported) {\n            _context2.next = 4;\n            break;\n          }\n\n          WarningAggregator.addWarningIOS('splash', 'Unable to automatically configure splash screen. Please refer to the expo-splash-screen README for more information: https://github.com/expo/expo/tree/master/packages/expo-splash-screen');\n          return _context2.abrupt(\"return\");\n\n        case 4:\n          splashConfig = getSplashScreen(config);\n\n          if (splashConfig) {\n            _context2.next = 7;\n            break;\n          }\n\n          return _context2.abrupt(\"return\");\n\n        case 7:\n          _context2.prev = 7;\n          _context2.next = 10;\n          return _regeneratorRuntime.awrap(configure_splash_screen_1.configureIosSplashScreen(projectRoot, splashConfig));\n\n        case 10:\n          _context2.next = 15;\n          break;\n\n        case 12:\n          _context2.prev = 12;\n          _context2.t0 = _context2[\"catch\"](7);\n          WarningAggregator.addWarningIOS('splash', _context2.t0);\n\n        case 15:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[7, 12]], Promise);\n}\n\nexports.setSplashScreenAsync = setSplashScreenAsync;","map":{"version":3,"sources":["../../src/ios/SplashScreen.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AACA,IAAA,yBAAA,GAAA,OAAA,CAAA,+BAAA,CAAA;;AAOA,IAAA,cAAA,GAAA,OAAA,2BAAA;;AACA,IAAA,iBAAA,GAAA,YAAA,CAAA,OAAA,qBAAA,CAAA;;AAEa,OAAA,CAAA,gBAAA,GAAiC,UAAA,MAAM,EAAG;AACrD,SAAO,cAAA,CAAA,gBAAA,CAAiB,MAAjB,EAAyB,CAC9B,KAD8B,EAE9B,iBAAM,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACQ,oBAAoB,CAAC,MAAD,EAAS,MAAM,CAAC,UAAP,CAAkB,WAA3B,CAD5B;;AAAA;AAAA,6CAES,MAFT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAF8B,CAAzB,CAAP;AAOD,CARY;;AAUb,SAAgB,eAAhB,CAAgC,MAAhC,EAAkD;;;AAChD,MAAI,CAAC,MAAM,CAAC,MAAR,IAAkB,EAAA,CAAA,EAAA,GAAC,MAAM,CAAC,GAAR,MAAW,IAAX,IAAW,EAAA,KAAA,KAAA,CAAX,GAAW,KAAA,CAAX,GAAW,EAAA,CAAE,MAAb,CAAtB,EAA2C;AACzC;AACD;;AAED,MAAM,MAAM,GAA0B;AACpC,IAAA,eAAe,EAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GACb,MAAM,CAAC,GADM,MACH,IADG,IACH,EAAA,KAAA,KAAA,CADG,GACH,KAAA,CADG,GACH,EAAA,CAAE,MADC,MACK,IADL,IACK,EAAA,KAAA,KAAA,CADL,GACK,KAAA,CADL,GACK,EAAA,CAAE,UADP,MACiB,IADjB,IACiB,EAAA,KAAA,KAAA,CADjB,GACiB,EADjB,GACiB,CAAA,EAAA,GAC9B,MAAM,CAAC,MADuB,MACjB,IADiB,IACjB,EAAA,KAAA,KAAA,CADiB,GACjB,KAAA,CADiB,GACjB,EAAA,CAAE,UAFF,MAEY,IAFZ,IAEY,EAAA,KAAA,KAAA,CAFZ,GAEY,EAFZ,GAGb,yBAAA,CAAA,2BAAA,CAA4B,OAJM;AAKpC,IAAA,eAAe,EAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GACb,MAAM,CAAC,GADM,MACH,IADG,IACH,EAAA,KAAA,KAAA,CADG,GACH,KAAA,CADG,GACH,EAAA,CAAE,MADC,MACK,IADL,IACK,EAAA,KAAA,KAAA,CADL,GACK,KAAA,CADL,GACK,EAAA,CAAE,eADP,MACsB,IADtB,IACsB,EAAA,KAAA,KAAA,CADtB,GACsB,EADtB,GACsB,CAAA,EAAA,GAAI,MAAM,CAAC,MAAX,MAAiB,IAAjB,IAAiB,EAAA,KAAA,KAAA,CAAjB,GAAiB,KAAA,CAAjB,GAAiB,EAAA,CAAE,eADzC,MACwD,IADxD,IACwD,EAAA,KAAA,KAAA,CADxD,GACwD,EADxD,GAC4D,SANvC;AAOpC,IAAA,KAAK,EAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAE,MAAM,CAAC,GAAT,MAAY,IAAZ,IAAY,EAAA,KAAA,KAAA,CAAZ,GAAY,KAAA,CAAZ,GAAY,EAAA,CAAE,MAAd,MAAoB,IAApB,IAAoB,EAAA,KAAA,KAAA,CAApB,GAAoB,KAAA,CAApB,GAAoB,EAAA,CAAE,KAAtB,MAA2B,IAA3B,IAA2B,EAAA,KAAA,KAAA,CAA3B,GAA2B,EAA3B,GAA2B,CAAA,EAAA,GAAI,MAAM,CAAC,MAAX,MAAiB,IAAjB,IAAiB,EAAA,KAAA,KAAA,CAAjB,GAAiB,KAAA,CAAjB,GAAiB,EAAA,CAAE;AAPf,GAAtC;AAUA,SAAO,MAAP;AACD;;AAhBD,OAAA,CAAA,eAAA,GAAA,eAAA;;AAkBO,SAAe,oBAAf,CAAoC,MAApC,EAAwD,WAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AACC,UAAA,uBADD,GAEH,MAAM,CAAC,UAAP,KAAsB,QAAtB,IAAkC,MAAM,CAAC,UAAP,KAAsB,QAAxD,IAAoE,CAAC,MAAM,CAAC,UAFzE;;AAAA,cAGA,uBAHA;AAAA;AAAA;AAAA;;AAIH,UAAA,iBAAiB,CAAC,aAAlB,CACE,QADF,EAEE,2LAFF;AAJG;;AAAA;AAWC,UAAA,YAXD,GAWgB,eAAe,CAAC,MAAD,CAX/B;;AAAA,cAaA,YAbA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA,2CAiBG,yBAAA,CAAA,wBAAA,CAAyB,WAAzB,EAAsC,YAAtC,CAjBH;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAmBH,UAAA,iBAAiB,CAAC,aAAlB,CAAgC,QAAhC;;AAnBG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAP,OAAA,CAAA,oBAAA,GAAA,oBAAA","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport {\n  configureIosSplashScreen,\n  IosSplashScreenConfig,\n  SplashScreenImageResizeMode,\n} from '@expo/configure-splash-screen';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withDangerousMod } from '../plugins/core-plugins';\nimport * as WarningAggregator from '../utils/warnings';\n\nexport const withSplashScreen: ConfigPlugin = config => {\n  return withDangerousMod(config, [\n    'ios',\n    async config => {\n      await setSplashScreenAsync(config, config.modRequest.projectRoot);\n      return config;\n    },\n  ]);\n};\n\nexport function getSplashScreen(config: ExpoConfig): IosSplashScreenConfig | undefined {\n  if (!config.splash && !config.ios?.splash) {\n    return;\n  }\n\n  const result: IosSplashScreenConfig = {\n    imageResizeMode:\n      config.ios?.splash?.resizeMode ??\n      config.splash?.resizeMode ??\n      SplashScreenImageResizeMode.CONTAIN,\n    backgroundColor:\n      config.ios?.splash?.backgroundColor ?? config.splash?.backgroundColor ?? '#FFFFFF', // white\n    image: config.ios?.splash?.image ?? config.splash?.image,\n  };\n\n  return result;\n}\n\nexport async function setSplashScreenAsync(config: ExpoConfig, projectRoot: string) {\n  const splashScreenIsSupported =\n    config.sdkVersion === '39.0.0' || config.sdkVersion === '40.0.0' || !config.sdkVersion;\n  if (!splashScreenIsSupported) {\n    WarningAggregator.addWarningIOS(\n      'splash',\n      'Unable to automatically configure splash screen. Please refer to the expo-splash-screen README for more information: https://github.com/expo/expo/tree/master/packages/expo-splash-screen'\n    );\n    return;\n  }\n\n  const splashConfig = getSplashScreen(config);\n\n  if (!splashConfig) {\n    return;\n  }\n  try {\n    await configureIosSplashScreen(projectRoot, splashConfig);\n  } catch (e) {\n    WarningAggregator.addWarningIOS('splash', e);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}