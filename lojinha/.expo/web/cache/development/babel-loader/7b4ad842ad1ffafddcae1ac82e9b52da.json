{"ast":null,"code":"","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["import { EventSubscription } from 'fbemitter';\nimport { Notification, LocalNotification, Channel, ActionType, LocalNotificationId } from './Notifications.types';\nexport declare function emitNotification(notification: any): void;\ndeclare const _default: {\n    _setInitialNotification(notification: Notification): void;\n    createCategoryAsync(categoryId: string, actions: ActionType[], previewPlaceholder?: string | undefined): Promise<void>;\n    deleteCategoryAsync(categoryId: string): Promise<void>;\n    getExpoPushTokenAsync(): Promise<string>;\n    getDevicePushTokenAsync: (config: {\n        gcmSenderId?: string;\n    }) => Promise<{\n        type: string;\n        data: string;\n    }>;\n    createChannelAndroidAsync(id: string, channel: Channel): Promise<void>;\n    deleteChannelAndroidAsync(id: string): Promise<void>;\n    presentLocalNotificationAsync(notification: LocalNotification): Promise<LocalNotificationId>;\n    scheduleLocalNotificationAsync(notification: LocalNotification, options?: {\n        time?: Date | number;\n        repeat?: 'minute' | 'hour' | 'day' | 'week' | 'month' | 'year';\n        intervalMs?: number;\n    }): Promise<LocalNotificationId>;\n    dismissNotificationAsync(notificationId: LocalNotificationId): Promise<void>;\n    dismissAllNotificationsAsync(): Promise<void>;\n    cancelScheduledNotificationAsync(notificationId: LocalNotificationId): Promise<void>;\n    cancelAllScheduledNotificationsAsync(): Promise<void>;\n    addListener(listener: (notification: Notification) => unknown): EventSubscription;\n    getBadgeNumberAsync(): Promise<number>;\n    setBadgeNumberAsync(number: number): Promise<void>;\n    scheduleNotificationWithCalendarAsync(notification: LocalNotification, options?: {\n        year?: number;\n        month?: number;\n        hour?: number;\n        day?: number;\n        minute?: number;\n        second?: number;\n        weekDay?: number;\n        repeat?: boolean;\n    }): Promise<string>;\n    scheduleNotificationWithTimerAsync(notification: LocalNotification, options: {\n        interval: number;\n        repeat?: boolean;\n    }): Promise<string>;\n};\nexport default _default;\n"]},"metadata":{},"sourceType":"module"}