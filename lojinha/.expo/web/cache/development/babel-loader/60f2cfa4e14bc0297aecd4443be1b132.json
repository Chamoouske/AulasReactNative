{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nif (!process.env.GITHUB_OWNER) {\n  console.error('Missing GITHUB_OWNER. Example: facebook');\n  process.exit(1);\n}\n\nif (!process.env.GITHUB_REPO) {\n  console.error('Missing GITHUB_REPO. Example: react-native');\n  process.exit(1);\n}\n\nvar path = require('path');\n\nfunction push(arr, key, value) {\n  if (!arr[key]) {\n    arr[key] = [];\n  }\n\n  arr[key].push(value);\n}\n\nvar converterSummary = {\n  eslint: '`eslint` found some issues. Run `yarn lint --fix` to automatically fix problems.',\n  flow: '`flow` found some issues. Run `yarn flow check` to analyze your code and address any errors.',\n  shellcheck: '`shellcheck` found some issues. Run `yarn shellcheck` to analyze shell scripts.'\n};\nvar converters = {\n  raw: function raw(output, input) {\n    var _loop = function _loop(key) {\n      input[key].forEach(function (message) {\n        push(output, key, message);\n      });\n    };\n\n    for (var key in input) {\n      _loop(key);\n    }\n  },\n  flow: function flow(output, input) {\n    if (!input || !input.errors) {\n      return;\n    }\n\n    input.errors.forEach(function (error) {\n      push(output, error.message[0].path, {\n        message: error.message.map(function (message) {\n          return message.descr;\n        }).join(' '),\n        line: error.message[0].line,\n        converter: 'flow'\n      });\n    });\n  },\n  eslint: function eslint(output, input) {\n    if (!input) {\n      return;\n    }\n\n    input.forEach(function (file) {\n      file.messages.forEach(function (message) {\n        push(output, file.filePath, {\n          message: message.ruleId + ': ' + message.message,\n          line: message.line,\n          converter: 'eslint'\n        });\n      });\n    });\n  },\n  shellcheck: function shellcheck(output, input) {\n    if (!input) {\n      return;\n    }\n\n    input.forEach(function (report) {\n      push(output, report.file, {\n        message: '**[SC' + report.code + '](https://github.com/koalaman/shellcheck/wiki/SC' + report.code + '):** (' + report.level + ') ' + report.message,\n        line: report.line,\n        endLine: report.endLine,\n        column: report.column,\n        endColumn: report.endColumn,\n        converter: 'shellcheck'\n      });\n    });\n  }\n};\n\nfunction getShaFromPullRequest(octokit, owner, repo, number, callback) {\n  octokit.pullRequests.get({\n    owner: owner,\n    repo: repo,\n    number: number\n  }, function (error, res) {\n    if (error) {\n      console.error(error);\n      return;\n    }\n\n    callback(res.data.head.sha);\n  });\n}\n\nfunction getFilesFromPullRequest(octokit, owner, repo, number, callback) {\n  octokit.pullRequests.listFiles({\n    owner: owner,\n    repo: repo,\n    number: number,\n    per_page: 100\n  }, function (error, res) {\n    if (error) {\n      console.error(error);\n      return;\n    }\n\n    callback(res.data);\n  });\n}\n\nfunction getLineMapFromPatch(patchString) {\n  var diffLineIndex = 0;\n  var fileLineIndex = 0;\n  var lineMap = {};\n  patchString.split('\\n').forEach(function (line) {\n    if (line.match(/^@@/)) {\n      fileLineIndex = line.match(/\\+([0-9]+)/)[1] - 1;\n      return;\n    }\n\n    diffLineIndex++;\n\n    if (line[0] !== '-') {\n      fileLineIndex++;\n\n      if (line[0] === '+') {\n        lineMap[fileLineIndex] = diffLineIndex;\n      }\n    }\n  });\n  return lineMap;\n}\n\nfunction sendReview(octokit, owner, repo, number, commit_id, body, comments) {\n  if (process.env.GITHUB_TOKEN) {\n    if (comments.length === 0) {\n      return;\n    } else if (comments.length > 5) {\n      comments = [];\n    }\n\n    var event = 'REQUEST_CHANGES';\n    var opts = {\n      owner: owner,\n      repo: repo,\n      number: number,\n      commit_id: commit_id,\n      body: body,\n      event: event,\n      comments: comments\n    };\n    octokit.pullRequests.createReview(opts, function (error, res) {\n      if (error) {\n        console.error(error);\n        return;\n      }\n    });\n  } else {\n    if (comments.length === 0) {\n      console.log('No issues found.');\n      return;\n    }\n\n    if (process.env.CIRCLE_CI) {\n      console.error('Code analysis found issues, but the review cannot be posted to GitHub without an access token.');\n      process.exit(1);\n    }\n\n    var results = body + '\\n';\n    comments.forEach(function (comment) {\n      results += comment.path + ':' + comment.position + ': ' + comment.body + '\\n';\n    });\n    console.log(results);\n  }\n}\n\nfunction main(messages, owner, repo, number) {\n  if (Object.keys(messages).length === 0) {\n    return;\n  }\n\n  if (!process.env.GITHUB_TOKEN) {\n    console.log('Missing GITHUB_TOKEN. Example: 5fd88b964fa214c4be2b144dc5af5d486a2f8c1e. Review feedback with code analysis results will not be provided on GitHub without a valid token.');\n  }\n\n  var _require = require('@octokit/rest'),\n      Octokit = _require.Octokit;\n\n  var octokit = new Octokit({\n    auth: process.env.GITHUB_TOKEN\n  });\n  getShaFromPullRequest(octokit, owner, repo, number, function (sha) {\n    getFilesFromPullRequest(octokit, owner, repo, number, function (files) {\n      var comments = [];\n      var convertersUsed = [];\n      files.filter(function (file) {\n        return messages[file.filename];\n      }).forEach(function (file) {\n        if (!file.patch) {\n          return;\n        }\n\n        var lineMap = getLineMapFromPatch(file.patch);\n        messages[file.filename].forEach(function (message) {\n          if (lineMap[message.line]) {\n            var comment = {\n              path: file.filename,\n              position: lineMap[message.line],\n              body: message.message\n            };\n            convertersUsed.push(message.converter);\n            comments.push(comment);\n          }\n        });\n      });\n      var body = '**Code analysis results:**\\n\\n';\n\n      var uniqueconvertersUsed = _toConsumableArray(new Set(convertersUsed));\n\n      uniqueconvertersUsed.forEach(function (converter) {\n        body += '* ' + converterSummary[converter] + '\\n';\n      });\n      sendReview(octokit, owner, repo, number, sha, body, comments);\n    });\n  });\n}\n\nvar content = '';\nprocess.stdin.resume();\nprocess.stdin.on('data', function (buf) {\n  content += buf.toString();\n});\nprocess.stdin.on('end', function () {\n  var messages = {};\n  var lines = content.trim().split('\\n');\n\n  for (var i = 0; i < Math.ceil(lines.length / 2); ++i) {\n    var converter = converters[lines[i * 2]];\n\n    if (!converter) {\n      throw new Error('Unknown converter ' + lines[i * 2]);\n    }\n\n    var json = void 0;\n\n    try {\n      json = JSON.parse(lines[i * 2 + 1]);\n    } catch (e) {}\n\n    converter(messages, json);\n  }\n\n  var pwd = path.resolve('.');\n\n  for (var absolutePath in messages) {\n    var relativePath = path.relative(pwd, absolutePath);\n\n    if (relativePath === absolutePath) {\n      continue;\n    }\n\n    messages[relativePath] = messages[absolutePath];\n    delete messages[absolutePath];\n  }\n\n  var owner = process.env.GITHUB_OWNER;\n  var repo = process.env.GITHUB_REPO;\n\n  if (!process.env.GITHUB_PR_NUMBER) {\n    console.error('Missing GITHUB_PR_NUMBER. Example: 4687. Review feedback with code analysis results cannot be provided on GitHub without a valid pull request number.');\n    process.exit(0);\n  }\n\n  var number = process.env.GITHUB_PR_NUMBER;\n  main(messages, owner, repo, number);\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/bots/code-analysis-bot.js"],"names":["process","env","GITHUB_OWNER","console","error","exit","GITHUB_REPO","path","require","push","arr","key","value","converterSummary","eslint","flow","shellcheck","converters","raw","output","input","forEach","message","errors","map","descr","join","line","converter","file","messages","filePath","ruleId","report","code","level","endLine","column","endColumn","getShaFromPullRequest","octokit","owner","repo","number","callback","pullRequests","get","res","data","head","sha","getFilesFromPullRequest","listFiles","per_page","getLineMapFromPatch","patchString","diffLineIndex","fileLineIndex","lineMap","split","match","sendReview","commit_id","body","comments","GITHUB_TOKEN","length","event","opts","createReview","log","CIRCLE_CI","results","comment","position","main","Object","keys","Octokit","auth","files","convertersUsed","filter","filename","patch","uniqueconvertersUsed","Set","content","stdin","resume","on","buf","toString","lines","trim","i","Math","ceil","Error","json","JSON","parse","e","pwd","resolve","absolutePath","relativePath","relative","GITHUB_PR_NUMBER"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\n'use strict';\n\nif (!process.env.GITHUB_OWNER) {\n  console.error('Missing GITHUB_OWNER. Example: facebook');\n  process.exit(1);\n}\nif (!process.env.GITHUB_REPO) {\n  console.error('Missing GITHUB_REPO. Example: react-native');\n  process.exit(1);\n}\n\nconst path = require('path');\n\nfunction push(arr, key, value) {\n  if (!arr[key]) {\n    arr[key] = [];\n  }\n  arr[key].push(value);\n}\n\nconst converterSummary = {\n  eslint:\n    '`eslint` found some issues. Run `yarn lint --fix` to automatically fix problems.',\n  flow:\n    '`flow` found some issues. Run `yarn flow check` to analyze your code and address any errors.',\n  shellcheck:\n    '`shellcheck` found some issues. Run `yarn shellcheck` to analyze shell scripts.',\n};\n\n/**\n * There is unfortunately no standard format to report an error, so we have\n * to write a specific converter for each tool we want to support.\n *\n * Those functions take a json object as input and fill the output with the\n * following format:\n *\n * { [ path: string ]: Array< { message: string, line: number }> }\n *\n * This is an object where the keys are the path of the files and values\n * is an array of objects of the shape message and line.\n */\nconst converters = {\n  raw: function(output, input) {\n    for (let key in input) {\n      input[key].forEach(function(message) {\n        push(output, key, message);\n      });\n    }\n  },\n\n  flow: function(output, input) {\n    if (!input || !input.errors) {\n      return;\n    }\n\n    input.errors.forEach(function(error) {\n      push(output, error.message[0].path, {\n        message: error.message.map(message => message.descr).join(' '),\n        line: error.message[0].line,\n        converter: 'flow',\n      });\n    });\n  },\n\n  eslint: function(output, input) {\n    if (!input) {\n      return;\n    }\n\n    input.forEach(function(file) {\n      file.messages.forEach(function(message) {\n        push(output, file.filePath, {\n          message: message.ruleId + ': ' + message.message,\n          line: message.line,\n          converter: 'eslint',\n        });\n      });\n    });\n  },\n\n  shellcheck: function(output, input) {\n    if (!input) {\n      return;\n    }\n\n    input.forEach(function(report) {\n      push(output, report.file, {\n        message:\n          '**[SC' +\n          report.code +\n          '](https://github.com/koalaman/shellcheck/wiki/SC' +\n          report.code +\n          '):** (' +\n          report.level +\n          ') ' +\n          report.message,\n        line: report.line,\n        endLine: report.endLine,\n        column: report.column,\n        endColumn: report.endColumn,\n        converter: 'shellcheck',\n      });\n    });\n  },\n};\n\nfunction getShaFromPullRequest(octokit, owner, repo, number, callback) {\n  octokit.pullRequests.get({owner, repo, number}, (error, res) => {\n    if (error) {\n      console.error(error);\n      return;\n    }\n\n    callback(res.data.head.sha);\n  });\n}\n\nfunction getFilesFromPullRequest(octokit, owner, repo, number, callback) {\n  octokit.pullRequests.listFiles(\n    {owner, repo, number, per_page: 100},\n    (error, res) => {\n      if (error) {\n        console.error(error);\n        return;\n      }\n      callback(res.data);\n    },\n  );\n}\n\n/**\n * Sadly we can't just give the line number to github, we have to give the\n * line number relative to the patch file which is super annoying. This\n * little function builds a map of line number in the file to line number\n * in the patch file\n */\nfunction getLineMapFromPatch(patchString) {\n  let diffLineIndex = 0;\n  let fileLineIndex = 0;\n  let lineMap = {};\n\n  patchString.split('\\n').forEach(line => {\n    if (line.match(/^@@/)) {\n      fileLineIndex = line.match(/\\+([0-9]+)/)[1] - 1;\n      return;\n    }\n\n    diffLineIndex++;\n    if (line[0] !== '-') {\n      fileLineIndex++;\n      if (line[0] === '+') {\n        lineMap[fileLineIndex] = diffLineIndex;\n      }\n    }\n  });\n\n  return lineMap;\n}\n\nfunction sendReview(octokit, owner, repo, number, commit_id, body, comments) {\n  if (process.env.GITHUB_TOKEN) {\n    if (comments.length === 0) {\n      // Do not leave an empty review.\n      return;\n    } else if (comments.length > 5) {\n      // Avoid noisy reviews and rely solely on the body of the review.\n      comments = [];\n    }\n\n    const event = 'REQUEST_CHANGES';\n\n    const opts = {\n      owner,\n      repo,\n      number,\n      commit_id,\n      body,\n      event,\n      comments,\n    };\n\n    octokit.pullRequests.createReview(opts, function(error, res) {\n      if (error) {\n        console.error(error);\n        return;\n      }\n    });\n  } else {\n    if (comments.length === 0) {\n      console.log('No issues found.');\n      return;\n    }\n\n    if (process.env.CIRCLE_CI) {\n      console.error(\n        'Code analysis found issues, but the review cannot be posted to GitHub without an access token.',\n      );\n      process.exit(1);\n    }\n\n    let results = body + '\\n';\n    comments.forEach(comment => {\n      results +=\n        comment.path + ':' + comment.position + ': ' + comment.body + '\\n';\n    });\n    console.log(results);\n  }\n}\n\nfunction main(messages, owner, repo, number) {\n  // No message, we don't need to do anything :)\n  if (Object.keys(messages).length === 0) {\n    return;\n  }\n\n  if (!process.env.GITHUB_TOKEN) {\n    console.log(\n      'Missing GITHUB_TOKEN. Example: 5fd88b964fa214c4be2b144dc5af5d486a2f8c1e. Review feedback with code analysis results will not be provided on GitHub without a valid token.',\n    );\n  }\n\n  // https://octokit.github.io/rest.js/\n  const {Octokit} = require('@octokit/rest');\n  const octokit = new Octokit({\n    auth: process.env.GITHUB_TOKEN,\n  });\n\n  getShaFromPullRequest(octokit, owner, repo, number, sha => {\n    getFilesFromPullRequest(octokit, owner, repo, number, files => {\n      let comments = [];\n      let convertersUsed = [];\n      files\n        .filter(file => messages[file.filename])\n        .forEach(file => {\n          // github api sometimes does not return a patch on large commits\n          if (!file.patch) {\n            return;\n          }\n          const lineMap = getLineMapFromPatch(file.patch);\n          messages[file.filename].forEach(message => {\n            if (lineMap[message.line]) {\n              const comment = {\n                path: file.filename,\n                position: lineMap[message.line],\n                body: message.message,\n              };\n              convertersUsed.push(message.converter);\n              comments.push(comment);\n            }\n          }); // forEach\n        }); // filter\n\n      let body = '**Code analysis results:**\\n\\n';\n      const uniqueconvertersUsed = [...new Set(convertersUsed)];\n      uniqueconvertersUsed.forEach(converter => {\n        body += '* ' + converterSummary[converter] + '\\n';\n      });\n\n      sendReview(octokit, owner, repo, number, sha, body, comments);\n    }); // getFilesFromPullRequest\n  }); // getShaFromPullRequest\n}\n\nlet content = '';\nprocess.stdin.resume();\nprocess.stdin.on('data', function(buf) {\n  content += buf.toString();\n});\nprocess.stdin.on('end', function() {\n  let messages = {};\n\n  // Since we send a few http requests to setup the process, we don't want\n  // to run this file one time per code analysis tool. Instead, we write all\n  // the results in the same stdin stream.\n  // The format of this stream is\n  //\n  //   name-of-the-converter\n  //   {\"json\":\"payload\"}\n  //   name-of-the-other-converter\n  //   {\"other\": [\"json\", \"payload\"]}\n  //\n  // In order to generate such stream, here is a sample bash command:\n  //\n  //   cat <(echo eslint; npm run lint --silent -- --format=json; echo flow; flow --json) | node code-analysis-bot.js\n\n  const lines = content.trim().split('\\n');\n  for (let i = 0; i < Math.ceil(lines.length / 2); ++i) {\n    const converter = converters[lines[i * 2]];\n    if (!converter) {\n      throw new Error('Unknown converter ' + lines[i * 2]);\n    }\n    let json;\n    try {\n      json = JSON.parse(lines[i * 2 + 1]);\n    } catch (e) {}\n\n    converter(messages, json);\n  }\n\n  // The paths are returned in absolute from code analysis tools but github works\n  // on paths relative from the root of the project. Doing the normalization here.\n  const pwd = path.resolve('.');\n  for (let absolutePath in messages) {\n    const relativePath = path.relative(pwd, absolutePath);\n    if (relativePath === absolutePath) {\n      continue;\n    }\n    messages[relativePath] = messages[absolutePath];\n    delete messages[absolutePath];\n  }\n\n  const owner = process.env.GITHUB_OWNER;\n  const repo = process.env.GITHUB_REPO;\n\n  if (!process.env.GITHUB_PR_NUMBER) {\n    console.error(\n      'Missing GITHUB_PR_NUMBER. Example: 4687. Review feedback with code analysis results cannot be provided on GitHub without a valid pull request number.',\n    );\n    // for master branch, don't throw an error\n    process.exit(0);\n  }\n\n  const number = process.env.GITHUB_PR_NUMBER;\n\n  // intentional lint warning to make sure that the bot is working :)\n  main(messages, owner, repo, number);\n});\n"]},"metadata":{},"sourceType":"script"}