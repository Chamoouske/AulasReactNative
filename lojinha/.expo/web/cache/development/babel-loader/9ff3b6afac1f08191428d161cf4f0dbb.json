{"ast":null,"code":"","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["export interface Window {\n    openDatabase?: (name: string, version: string, displayName: string, estimatedSize: number, creationCallback?: DatabaseCallback) => Database;\n}\nexport interface DatabaseCallback {\n    (database: Database): void;\n}\nexport interface Database {\n    version: string;\n    transaction(callback: SQLTransactionCallback, errorCallback?: SQLTransactionErrorCallback, successCallback?: SQLVoidCallback): void;\n    readTransaction(callback: SQLTransactionCallback, errorCallback?: SQLTransactionErrorCallback, successCallback?: SQLVoidCallback): void;\n}\nexport interface SQLVoidCallback {\n    (): void;\n}\nexport interface SQLTransactionCallback {\n    (transaction: SQLTransaction): void;\n}\nexport interface SQLTransactionErrorCallback {\n    (error: SQLError): void;\n}\nexport interface SQLTransaction {\n    executeSql(sqlStatement: string, args?: any[], callback?: SQLStatementCallback, errorCallback?: SQLStatementErrorCallback): void;\n}\nexport interface SQLStatementCallback {\n    (transaction: SQLTransaction, resultSet: SQLResultSet): void;\n}\nexport interface SQLStatementErrorCallback {\n    (transaction: SQLTransaction, error: SQLError): boolean;\n}\nexport interface SQLResultSet {\n    insertId: number;\n    rowsAffected: number;\n    rows: SQLResultSetRowList;\n}\nexport interface SQLResultSetRowList {\n    length: number;\n    item(index: number): any;\n}\nexport declare class SQLError {\n    static UNKNOWN_ERR: number;\n    static DATABASE_ERR: number;\n    static VERSION_ERR: number;\n    static TOO_LARGE_ERR: number;\n    static QUOTA_ERR: number;\n    static SYNTAX_ERR: number;\n    static CONSTRAINT_ERR: number;\n    static TIMEOUT_ERR: number;\n    code: number;\n    message: string;\n}\nexport interface WebSQLDatabase extends Database {\n    exec(queries: Query[], readOnly: boolean, callback: SQLiteCallback): void;\n}\nexport declare type Query = {\n    sql: string;\n    args: unknown[];\n};\nexport interface ResultSetError {\n    error: Error;\n}\nexport interface ResultSet {\n    insertId?: number;\n    rowsAffected: number;\n    rows: {\n        [column: string]: any;\n    }[];\n}\nexport declare type SQLiteCallback = (error?: Error | null, resultSet?: (ResultSetError | ResultSet)[]) => void;\n"]},"metadata":{},"sourceType":"script"}