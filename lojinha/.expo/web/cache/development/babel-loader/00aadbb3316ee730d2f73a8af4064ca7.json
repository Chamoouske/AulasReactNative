{"ast":null,"code":"'use strict';\n\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar NativeEventEmitter = require(\"../EventEmitter/NativeEventEmitter\");\n\nvar convertRequestBody = require(\"./convertRequestBody\");\n\nimport NativeNetworkingAndroid from \"./NativeNetworkingAndroid\";\n\nfunction convertHeadersMapToArray(headers) {\n  var headerArray = [];\n\n  for (var name in headers) {\n    headerArray.push([name, headers[name]]);\n  }\n\n  return headerArray;\n}\n\nvar _requestId = 1;\n\nfunction generateRequestId() {\n  return _requestId++;\n}\n\nvar RCTNetworking = function (_NativeEventEmitter) {\n  _inherits(RCTNetworking, _NativeEventEmitter);\n\n  var _super = _createSuper(RCTNetworking);\n\n  function RCTNetworking() {\n    _classCallCheck(this, RCTNetworking);\n\n    return _super.call(this, NativeNetworkingAndroid);\n  }\n\n  _createClass(RCTNetworking, [{\n    key: \"sendRequest\",\n    value: function sendRequest(method, trackingName, url, headers, data, responseType, incrementalUpdates, timeout, callback, withCredentials) {\n      var body = convertRequestBody(data);\n\n      if (body && body.formData) {\n        body.formData = body.formData.map(function (part) {\n          return _objectSpread(_objectSpread({}, part), {}, {\n            headers: convertHeadersMapToArray(part.headers)\n          });\n        });\n      }\n\n      var requestId = generateRequestId();\n      NativeNetworkingAndroid.sendRequest(method, url, requestId, convertHeadersMapToArray(headers), _objectSpread(_objectSpread({}, body), {}, {\n        trackingName: trackingName\n      }), responseType, incrementalUpdates, timeout, withCredentials);\n      callback(requestId);\n    }\n  }, {\n    key: \"abortRequest\",\n    value: function abortRequest(requestId) {\n      NativeNetworkingAndroid.abortRequest(requestId);\n    }\n  }, {\n    key: \"clearCookies\",\n    value: function clearCookies(callback) {\n      NativeNetworkingAndroid.clearCookies(callback);\n    }\n  }]);\n\n  return RCTNetworking;\n}(NativeEventEmitter);\n\nmodule.exports = new RCTNetworking();","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Network/RCTNetworking.android.js"],"names":["NativeEventEmitter","require","convertRequestBody","NativeNetworkingAndroid","convertHeadersMapToArray","headers","headerArray","name","push","_requestId","generateRequestId","RCTNetworking","method","trackingName","url","data","responseType","incrementalUpdates","timeout","callback","withCredentials","body","formData","map","part","requestId","sendRequest","abortRequest","clearCookies","module","exports"],"mappings":"AAUA;;;;;;;;;;;;;;;;;AAIA,IAAMA,kBAAkB,GAAGC,OAAO,sCAAlC;;AAEA,IAAMC,kBAAkB,GAAGD,OAAO,wBAAlC;;AAEA,OAAOE,uBAAP;;AAOA,SAASC,wBAAT,CAAkCC,OAAlC,EAAkE;AAChE,MAAMC,WAAW,GAAG,EAApB;;AACA,OAAK,IAAMC,IAAX,IAAmBF,OAAnB,EAA4B;AAC1BC,IAAAA,WAAW,CAACE,IAAZ,CAAiB,CAACD,IAAD,EAAOF,OAAO,CAACE,IAAD,CAAd,CAAjB;AACD;;AACD,SAAOD,WAAP;AACD;;AAED,IAAIG,UAAU,GAAG,CAAjB;;AACA,SAASC,iBAAT,GAAqC;AACnC,SAAOD,UAAU,EAAjB;AACD;;IAMKE,a;;;;;AACJ,2BAAc;AAAA;;AAAA,6BACNR,uBADM;AAEb;;;;WAED,qBACES,MADF,EAEEC,YAFF,EAGEC,GAHF,EAIET,OAJF,EAKEU,IALF,EAMEC,YANF,EAOEC,kBAPF,EAQEC,OARF,EASEC,QATF,EAUEC,eAVF,EAWE;AACA,UAAMC,IAAI,GAAGnB,kBAAkB,CAACa,IAAD,CAA/B;;AACA,UAAIM,IAAI,IAAIA,IAAI,CAACC,QAAjB,EAA2B;AACzBD,QAAAA,IAAI,CAACC,QAAL,GAAgBD,IAAI,CAACC,QAAL,CAAcC,GAAd,CAAkB,UAAAC,IAAI;AAAA,iDACjCA,IADiC;AAEpCnB,YAAAA,OAAO,EAAED,wBAAwB,CAACoB,IAAI,CAACnB,OAAN;AAFG;AAAA,SAAtB,CAAhB;AAID;;AACD,UAAMoB,SAAS,GAAGf,iBAAiB,EAAnC;AACAP,MAAAA,uBAAuB,CAACuB,WAAxB,CACEd,MADF,EAEEE,GAFF,EAGEW,SAHF,EAIErB,wBAAwB,CAACC,OAAD,CAJ1B,kCAKMgB,IALN;AAKYR,QAAAA,YAAY,EAAZA;AALZ,UAMEG,YANF,EAOEC,kBAPF,EAQEC,OARF,EASEE,eATF;AAWAD,MAAAA,QAAQ,CAACM,SAAD,CAAR;AACD;;;WAED,sBAAaA,SAAb,EAAgC;AAC9BtB,MAAAA,uBAAuB,CAACwB,YAAxB,CAAqCF,SAArC;AACD;;;WAED,sBAAaN,QAAb,EAAiD;AAC/ChB,MAAAA,uBAAuB,CAACyB,YAAxB,CAAqCT,QAArC;AACD;;;;EA7CyBnB,kB;;AAgD5B6B,MAAM,CAACC,OAAP,GAAkB,IAAInB,aAAJ,EAAlB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\n// Do not require the native RCTNetworking module directly! Use this wrapper module instead.\n// It will add the necessary requestId, so that you don't have to generate it yourself.\nconst NativeEventEmitter = require('../EventEmitter/NativeEventEmitter');\n\nconst convertRequestBody = require('./convertRequestBody');\n\nimport NativeNetworkingAndroid from './NativeNetworkingAndroid';\nimport type {RequestBody} from './convertRequestBody';\n\ntype Header = [string, string];\n\n// Convert FormData headers to arrays, which are easier to consume in\n// native on Android.\nfunction convertHeadersMapToArray(headers: Object): Array<Header> {\n  const headerArray = [];\n  for (const name in headers) {\n    headerArray.push([name, headers[name]]);\n  }\n  return headerArray;\n}\n\nlet _requestId = 1;\nfunction generateRequestId(): number {\n  return _requestId++;\n}\n\n/**\n * This class is a wrapper around the native RCTNetworking module. It adds a necessary unique\n * requestId to each network request that can be used to abort that request later on.\n */\nclass RCTNetworking extends NativeEventEmitter {\n  constructor() {\n    super(NativeNetworkingAndroid);\n  }\n\n  sendRequest(\n    method: string,\n    trackingName: string,\n    url: string,\n    headers: Object,\n    data: RequestBody,\n    responseType: 'text' | 'base64',\n    incrementalUpdates: boolean,\n    timeout: number,\n    callback: (requestId: number) => mixed,\n    withCredentials: boolean,\n  ) {\n    const body = convertRequestBody(data);\n    if (body && body.formData) {\n      body.formData = body.formData.map(part => ({\n        ...part,\n        headers: convertHeadersMapToArray(part.headers),\n      }));\n    }\n    const requestId = generateRequestId();\n    NativeNetworkingAndroid.sendRequest(\n      method,\n      url,\n      requestId,\n      convertHeadersMapToArray(headers),\n      {...body, trackingName},\n      responseType,\n      incrementalUpdates,\n      timeout,\n      withCredentials,\n    );\n    callback(requestId);\n  }\n\n  abortRequest(requestId: number) {\n    NativeNetworkingAndroid.abortRequest(requestId);\n  }\n\n  clearCookies(callback: (result: boolean) => any) {\n    NativeNetworkingAndroid.clearCookies(callback);\n  }\n}\n\nmodule.exports = (new RCTNetworking(): RCTNetworking);\n"]},"metadata":{},"sourceType":"module"}