{"ast":null,"code":"'use strict';\n\nvar _this = this,\n    _jsxFileName = \"/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Components/TextInput/__tests__/TextInput-test.js\";\n\nvar React = require('react');\n\nvar ReactTestRenderer = require('react-test-renderer');\n\nvar TextInput = require(\"../TextInput\");\n\nvar ReactNative = require(\"../../../Renderer/shims/ReactNative\");\n\nimport Component from '@reactions/component';\n\nvar _require = require(\"../../../Utilities/ReactNativeTestTools\"),\n    enter = _require.enter,\n    expectRendersMatchingSnapshot = _require.expectRendersMatchingSnapshot;\n\njest.unmock(\"../TextInput\");\ndescribe('TextInput tests', function () {\n  var input;\n  var inputRef;\n  var onChangeListener;\n  var onChangeTextListener;\n  var initialValue = 'initialValue';\n  beforeEach(function () {\n    inputRef = React.createRef(null);\n    onChangeListener = jest.fn();\n    onChangeTextListener = jest.fn();\n    var renderTree = ReactTestRenderer.create(React.createElement(Component, {\n      initialState: {\n        text: initialValue\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }\n    }, function (_ref) {\n      var setState = _ref.setState,\n          state = _ref.state;\n      return React.createElement(TextInput, {\n        ref: inputRef,\n        value: state.text,\n        onChangeText: function onChangeText(text) {\n          onChangeTextListener(text);\n          setState({\n            text: text\n          });\n        },\n        onChange: function onChange(event) {\n          onChangeListener(event);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }\n      });\n    }));\n    input = renderTree.root.findByType(TextInput);\n  });\n  it('has expected instance functions', function () {\n    expect(inputRef.current.isFocused).toBeInstanceOf(Function);\n    expect(inputRef.current.clear).toBeInstanceOf(Function);\n    expect(inputRef.current.focus).toBeInstanceOf(jest.fn().constructor);\n    expect(inputRef.current.blur).toBeInstanceOf(jest.fn().constructor);\n    expect(inputRef.current.setNativeProps).toBeInstanceOf(jest.fn().constructor);\n    expect(inputRef.current.measure).toBeInstanceOf(jest.fn().constructor);\n    expect(inputRef.current.measureInWindow).toBeInstanceOf(jest.fn().constructor);\n    expect(inputRef.current.measureLayout).toBeInstanceOf(jest.fn().constructor);\n  });\n  it('calls onChange callbacks', function () {\n    expect(input.props.value).toBe(initialValue);\n    var message = 'This is a test message';\n    enter(input, message);\n    expect(input.props.value).toBe(message);\n    expect(onChangeTextListener).toHaveBeenCalledWith(message);\n    expect(onChangeListener).toHaveBeenCalledWith({\n      nativeEvent: {\n        text: message\n      }\n    });\n  });\n  it('should have support being focused and unfocused', function () {\n    var textInputRef = React.createRef(null);\n    ReactTestRenderer.create(React.createElement(TextInput, {\n      ref: textInputRef,\n      value: \"value1\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 30\n      }\n    }));\n    expect(textInputRef.current.isFocused()).toBe(false);\n    ReactNative.findNodeHandle = jest.fn().mockImplementation(function (ref) {\n      if (ref == null) {\n        return null;\n      }\n\n      if (ref === textInputRef.current || ref === textInputRef.current.getNativeRef()) {\n        return 1;\n      }\n\n      return 2;\n    });\n    TextInput.State.focusTextInput(textInputRef.current);\n    expect(textInputRef.current.isFocused()).toBe(true);\n    expect(TextInput.State.currentlyFocusedInput()).toBe(textInputRef.current);\n    expect(TextInput.State.currentlyFocusedField()).toBe(ReactNative.findNodeHandle(textInputRef.current));\n    TextInput.State.blurTextInput(textInputRef.current);\n    expect(textInputRef.current.isFocused()).toBe(false);\n    expect(TextInput.State.currentlyFocusedInput()).toBe(null);\n    expect(TextInput.State.currentlyFocusedField()).toBe(null);\n  });\n  it('should unfocus when other TextInput is focused', function () {\n    var textInputRe1 = React.createRef(null);\n    var textInputRe2 = React.createRef(null);\n    ReactTestRenderer.create(React.createElement(React.Fragment, null, React.createElement(TextInput, {\n      ref: textInputRe1,\n      value: \"value1\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }\n    }), React.createElement(TextInput, {\n      ref: textInputRe2,\n      value: \"value2\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }\n    })));\n    ReactNative.findNodeHandle = jest.fn().mockImplementation(function (ref) {\n      if (ref === textInputRe1.current || ref === textInputRe1.current.getNativeRef()) {\n        return 1;\n      }\n\n      if (ref === textInputRe2.current || ref === textInputRe2.current.getNativeRef()) {\n        return 2;\n      }\n\n      return 3;\n    });\n    expect(textInputRe1.current.isFocused()).toBe(false);\n    expect(textInputRe2.current.isFocused()).toBe(false);\n    var inputTag1 = ReactNative.findNodeHandle(textInputRe1.current);\n    var inputTag2 = ReactNative.findNodeHandle(textInputRe2.current);\n    TextInput.State.focusTextInput(textInputRe1.current);\n    expect(textInputRe1.current.isFocused()).toBe(true);\n    expect(textInputRe2.current.isFocused()).toBe(false);\n    expect(TextInput.State.currentlyFocusedInput()).toBe(textInputRe1.current);\n    expect(TextInput.State.currentlyFocusedField()).toBe(inputTag1);\n    TextInput.State.focusTextInput(textInputRe2.current);\n    expect(textInputRe1.current.isFocused()).toBe(false);\n    expect(textInputRe2.current.isFocused()).toBe(true);\n    expect(TextInput.State.currentlyFocusedInput()).toBe(textInputRe2.current);\n    expect(TextInput.State.currentlyFocusedField()).toBe(inputTag2);\n  });\n  it('should render as expected', function () {\n    expectRendersMatchingSnapshot('TextInput', function () {\n      return React.createElement(TextInput, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 13\n        }\n      });\n    }, function () {\n      jest.dontMock(\"../TextInput\");\n    });\n  });\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Components/TextInput/__tests__/TextInput-test.js"],"names":["React","require","ReactTestRenderer","TextInput","ReactNative","Component","enter","expectRendersMatchingSnapshot","jest","unmock","describe","input","inputRef","onChangeListener","onChangeTextListener","initialValue","beforeEach","createRef","fn","renderTree","create","text","setState","state","event","root","findByType","it","expect","current","isFocused","toBeInstanceOf","Function","clear","focus","constructor","blur","setNativeProps","measure","measureInWindow","measureLayout","props","value","toBe","message","toHaveBeenCalledWith","nativeEvent","textInputRef","findNodeHandle","mockImplementation","ref","getNativeRef","State","focusTextInput","currentlyFocusedInput","currentlyFocusedField","blurTextInput","textInputRe1","textInputRe2","inputTag1","inputTag2","dontMock"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+react_native\n * @format\n * @flow-strict\n */\n\n'use strict';\n\nconst React = require('react');\nconst ReactTestRenderer = require('react-test-renderer');\nconst TextInput = require('../TextInput');\nconst ReactNative = require('../../../Renderer/shims/ReactNative');\n\nimport Component from '@reactions/component';\n\nconst {\n  enter,\n  expectRendersMatchingSnapshot,\n} = require('../../../Utilities/ReactNativeTestTools');\n\njest.unmock('../TextInput');\n\ndescribe('TextInput tests', () => {\n  let input;\n  let inputRef;\n  let onChangeListener;\n  let onChangeTextListener;\n  const initialValue = 'initialValue';\n  beforeEach(() => {\n    inputRef = React.createRef(null);\n    onChangeListener = jest.fn();\n    onChangeTextListener = jest.fn();\n    const renderTree = ReactTestRenderer.create(\n      <Component initialState={{text: initialValue}}>\n        {({setState, state}) => (\n          <TextInput\n            ref={inputRef}\n            value={state.text}\n            onChangeText={text => {\n              onChangeTextListener(text);\n              setState({text});\n            }}\n            onChange={event => {\n              onChangeListener(event);\n            }}\n          />\n        )}\n      </Component>,\n    );\n    input = renderTree.root.findByType(TextInput);\n  });\n  it('has expected instance functions', () => {\n    expect(inputRef.current.isFocused).toBeInstanceOf(Function); // Would have prevented S168585\n    expect(inputRef.current.clear).toBeInstanceOf(Function);\n    expect(inputRef.current.focus).toBeInstanceOf(jest.fn().constructor);\n    expect(inputRef.current.blur).toBeInstanceOf(jest.fn().constructor);\n    expect(inputRef.current.setNativeProps).toBeInstanceOf(\n      jest.fn().constructor,\n    );\n    expect(inputRef.current.measure).toBeInstanceOf(jest.fn().constructor);\n    expect(inputRef.current.measureInWindow).toBeInstanceOf(\n      jest.fn().constructor,\n    );\n    expect(inputRef.current.measureLayout).toBeInstanceOf(\n      jest.fn().constructor,\n    );\n  });\n  it('calls onChange callbacks', () => {\n    expect(input.props.value).toBe(initialValue);\n    const message = 'This is a test message';\n    enter(input, message);\n    expect(input.props.value).toBe(message);\n    expect(onChangeTextListener).toHaveBeenCalledWith(message);\n    expect(onChangeListener).toHaveBeenCalledWith({\n      nativeEvent: {text: message},\n    });\n  });\n\n  it('should have support being focused and unfocused', () => {\n    const textInputRef = React.createRef(null);\n    ReactTestRenderer.create(<TextInput ref={textInputRef} value=\"value1\" />);\n\n    expect(textInputRef.current.isFocused()).toBe(false);\n    ReactNative.findNodeHandle = jest.fn().mockImplementation(ref => {\n      if (ref == null) {\n        return null;\n      }\n\n      if (\n        ref === textInputRef.current ||\n        ref === textInputRef.current.getNativeRef()\n      ) {\n        return 1;\n      }\n\n      return 2;\n    });\n\n    TextInput.State.focusTextInput(textInputRef.current);\n    expect(textInputRef.current.isFocused()).toBe(true);\n    expect(TextInput.State.currentlyFocusedInput()).toBe(textInputRef.current);\n    // This function is currently deprecated and will be removed in the future\n    expect(TextInput.State.currentlyFocusedField()).toBe(\n      ReactNative.findNodeHandle(textInputRef.current),\n    );\n    TextInput.State.blurTextInput(textInputRef.current);\n    expect(textInputRef.current.isFocused()).toBe(false);\n    expect(TextInput.State.currentlyFocusedInput()).toBe(null);\n    // This function is currently deprecated and will be removed in the future\n    expect(TextInput.State.currentlyFocusedField()).toBe(null);\n  });\n\n  it('should unfocus when other TextInput is focused', () => {\n    const textInputRe1 = React.createRef(null);\n    const textInputRe2 = React.createRef(null);\n\n    ReactTestRenderer.create(\n      <>\n        <TextInput ref={textInputRe1} value=\"value1\" />\n        <TextInput ref={textInputRe2} value=\"value2\" />\n      </>,\n    );\n    ReactNative.findNodeHandle = jest.fn().mockImplementation(ref => {\n      if (\n        ref === textInputRe1.current ||\n        ref === textInputRe1.current.getNativeRef()\n      ) {\n        return 1;\n      }\n\n      if (\n        ref === textInputRe2.current ||\n        ref === textInputRe2.current.getNativeRef()\n      ) {\n        return 2;\n      }\n\n      return 3;\n    });\n\n    expect(textInputRe1.current.isFocused()).toBe(false);\n    expect(textInputRe2.current.isFocused()).toBe(false);\n\n    const inputTag1 = ReactNative.findNodeHandle(textInputRe1.current);\n    const inputTag2 = ReactNative.findNodeHandle(textInputRe2.current);\n\n    TextInput.State.focusTextInput(textInputRe1.current);\n\n    expect(textInputRe1.current.isFocused()).toBe(true);\n    expect(textInputRe2.current.isFocused()).toBe(false);\n    expect(TextInput.State.currentlyFocusedInput()).toBe(textInputRe1.current);\n    // This function is currently deprecated and will be removed in the future\n    expect(TextInput.State.currentlyFocusedField()).toBe(inputTag1);\n\n    TextInput.State.focusTextInput(textInputRe2.current);\n\n    expect(textInputRe1.current.isFocused()).toBe(false);\n    expect(textInputRe2.current.isFocused()).toBe(true);\n    expect(TextInput.State.currentlyFocusedInput()).toBe(textInputRe2.current);\n    // This function is currently deprecated and will be removed in the future\n    expect(TextInput.State.currentlyFocusedField()).toBe(inputTag2);\n  });\n\n  it('should render as expected', () => {\n    expectRendersMatchingSnapshot(\n      'TextInput',\n      () => <TextInput />,\n      () => {\n        jest.dontMock('../TextInput');\n      },\n    );\n  });\n});\n"]},"metadata":{},"sourceType":"module"}