{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar path_1 = __importDefault(require(\"path\"));\n\nvar constants_1 = require(\"../constants\");\n\nvar xml_manipulation_1 = require(\"../xml-manipulation\");\n\nvar STYLES_XML_FILE_PATH = './res/values/styles.xml';\nvar STYLES_V23_XML_FILE_PATH = './res/values-v23/styles.xml';\nvar STYLES_DARK_V23_XML_FILE_PATH = './res/values-night-v23/styles.xml';\nvar STYLE_NAME = 'Theme.App.SplashScreen';\n\nfunction configureStyle(xml, _ref) {\n  var statusBarHidden = _ref.statusBarHidden,\n      statusBarStyle = _ref.statusBarStyle,\n      addStatusBarBackgroundColor = _ref.addStatusBarBackgroundColor;\n  var idx = 0;\n  var result = xml_manipulation_1.mergeXmlElements(xml, {\n    elements: [{\n      name: 'resources',\n      elements: [{\n        name: 'style',\n        attributes: {\n          name: STYLE_NAME,\n          parent: 'Theme.AppCompat.Light.NoActionBar'\n        },\n        elements: [{\n          idx: idx++,\n          comment: \" Below line is handled by '@expo/configure-splash-screen' command and it's discouraged to modify it manually \"\n        }, {\n          idx: idx++,\n          name: 'item',\n          attributes: {\n            name: 'android:windowBackground'\n          },\n          elements: [{\n            text: '@drawable/splashscreen'\n          }]\n        }, {\n          idx: statusBarHidden === undefined ? undefined : idx++,\n          deletionFlag: statusBarHidden === undefined,\n          name: 'item',\n          attributes: {\n            name: 'android:windowFullscreen'\n          },\n          elements: [{\n            text: String(statusBarHidden)\n          }]\n        }, {\n          idx: statusBarStyle === undefined || statusBarStyle === constants_1.SplashScreenStatusBarStyle.DEFAULT ? undefined : idx++,\n          deletionFlag: statusBarStyle === undefined || statusBarStyle === constants_1.SplashScreenStatusBarStyle.DEFAULT,\n          name: 'item',\n          attributes: {\n            name: 'android:windowLightStatusBar'\n          },\n          elements: [{\n            text: statusBarStyle === constants_1.SplashScreenStatusBarStyle.LIGHT_CONTENT ? 'false' : statusBarStyle === constants_1.SplashScreenStatusBarStyle.DARK_CONTENT ? 'true' : ''\n          }]\n        }, {\n          idx: addStatusBarBackgroundColor ? idx++ : undefined,\n          deletionFlag: !addStatusBarBackgroundColor,\n          name: 'item',\n          attributes: {\n            name: 'android:statusBarColor'\n          },\n          elements: [{\n            text: '@color/splashscreen_statusbar_color'\n          }]\n        }, {\n          comment: \" Customize your splash screen theme here \"\n        }]\n      }]\n    }]\n  });\n  return result;\n}\n\nfunction areStyleElementsEqual(a, b) {\n  var _a, _b, _c, _d;\n\n  var styleA = (_b = (_a = a.elements) === null || _a === void 0 ? void 0 : _a[0].elements) === null || _b === void 0 ? void 0 : _b.find(function (_ref2) {\n    var name = _ref2.name,\n        attributes = _ref2.attributes;\n    return name === 'style' && (attributes === null || attributes === void 0 ? void 0 : attributes.name) === STYLE_NAME;\n  });\n  var styleB = (_d = (_c = b.elements) === null || _c === void 0 ? void 0 : _c[0].elements) === null || _d === void 0 ? void 0 : _d.find(function (_ref3) {\n    var name = _ref3.name,\n        attributes = _ref3.attributes;\n    return name === 'style' && (attributes === null || attributes === void 0 ? void 0 : attributes.name) === STYLE_NAME;\n  });\n  return !!styleA && !!styleB && xml_manipulation_1.xmlElementsEqual(styleA, styleB, {\n    disregardComments: true\n  });\n}\n\nfunction removeStyleElement(element) {\n  var _a, _b, _c, _d;\n\n  var resources = (_a = element.elements) === null || _a === void 0 ? void 0 : _a.find(function (el) {\n    return el.name === 'resources';\n  });\n  var idxToBeRemoved = (_c = (_b = resources === null || resources === void 0 ? void 0 : resources.elements) === null || _b === void 0 ? void 0 : _b.findIndex(function (el) {\n    var _a;\n\n    return el.name === 'style' && ((_a = el.attributes) === null || _a === void 0 ? void 0 : _a.name) === STYLE_NAME;\n  })) !== null && _c !== void 0 ? _c : -1;\n\n  if (idxToBeRemoved !== -1) {\n    (_d = resources === null || resources === void 0 ? void 0 : resources.elements) === null || _d === void 0 ? void 0 : _d.splice(idxToBeRemoved, 1);\n  }\n\n  return element;\n}\n\nfunction elementWithStyleElement(element) {\n  var _a, _b;\n\n  var result = _objectSpread({}, element);\n\n  var resources = (_a = element.elements) === null || _a === void 0 ? void 0 : _a.find(function (el) {\n    return el.name === 'resources';\n  });\n\n  if (!resources) {\n    return;\n  }\n\n  var styleElement = (_b = resources === null || resources === void 0 ? void 0 : resources.elements) === null || _b === void 0 ? void 0 : _b.find(function (el) {\n    var _a;\n\n    return el.name === 'style' && ((_a = el.attributes) === null || _a === void 0 ? void 0 : _a.name) === STYLE_NAME;\n  });\n\n  if (!styleElement) {\n    return;\n  }\n\n  result.elements = [_objectSpread(_objectSpread({}, resources), {}, {\n    elements: [styleElement]\n  })];\n  return result;\n}\n\nfunction configureStylesXml(androidMainPath) {\n  var config,\n      _a,\n      _b,\n      _c,\n      _d,\n      _e,\n      _f,\n      statusBarStyle,\n      statusBarHidden,\n      darkModeStatusBarStyle,\n      addStatusBarBackgroundColor,\n      filePath,\n      v23FilePath,\n      v23DarkFilePath,\n      xmlContent,\n      contentWithSingleStyle,\n      v23XmlContent,\n      v23DarkXmlContent,\n      configuredXmlContent,\n      configuredV23XmlContent,\n      configuredV23DarkXmlContent,\n      _args = arguments;\n\n  return _regeneratorRuntime.async(function configureStylesXml$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          config = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n          statusBarStyle = (_b = (_a = config.statusBar) === null || _a === void 0 ? void 0 : _a.style) !== null && _b !== void 0 ? _b : constants_1.SplashScreenStatusBarStyle.DEFAULT;\n          statusBarHidden = (_c = config.statusBar) === null || _c === void 0 ? void 0 : _c.hidden;\n          darkModeStatusBarStyle = (_e = (_d = config.darkMode) === null || _d === void 0 ? void 0 : _d.statusBar) === null || _e === void 0 ? void 0 : _e.style;\n          addStatusBarBackgroundColor = Boolean((_f = config.statusBar) === null || _f === void 0 ? void 0 : _f.backgroundColor);\n\n          if (!(darkModeStatusBarStyle && !statusBarStyle)) {\n            _context.next = 7;\n            break;\n          }\n\n          throw new Error(\"'darkModeStatusBarStyle' is available only if 'statusBarStyle' is provided as well.\");\n\n        case 7:\n          filePath = path_1.default.resolve(androidMainPath, STYLES_XML_FILE_PATH);\n          v23FilePath = path_1.default.resolve(androidMainPath, STYLES_V23_XML_FILE_PATH);\n          v23DarkFilePath = path_1.default.resolve(androidMainPath, STYLES_DARK_V23_XML_FILE_PATH);\n          _context.next = 12;\n          return _regeneratorRuntime.awrap(xml_manipulation_1.readXmlFile(filePath));\n\n        case 12:\n          xmlContent = _context.sent;\n          contentWithSingleStyle = elementWithStyleElement(xmlContent);\n          _context.next = 16;\n          return _regeneratorRuntime.awrap(xml_manipulation_1.readXmlFile(v23FilePath, contentWithSingleStyle));\n\n        case 16:\n          v23XmlContent = _context.sent;\n          _context.next = 19;\n          return _regeneratorRuntime.awrap(xml_manipulation_1.readXmlFile(v23DarkFilePath, contentWithSingleStyle));\n\n        case 19:\n          v23DarkXmlContent = _context.sent;\n          configuredXmlContent = configureStyle(xmlContent, {\n            statusBarHidden: statusBarHidden,\n            addStatusBarBackgroundColor: addStatusBarBackgroundColor\n          });\n          configuredV23XmlContent = configureStyle(v23XmlContent, {\n            statusBarHidden: statusBarHidden,\n            statusBarStyle: statusBarStyle,\n            addStatusBarBackgroundColor: addStatusBarBackgroundColor\n          });\n          configuredV23DarkXmlContent = configureStyle(v23DarkXmlContent, {\n            statusBarHidden: statusBarHidden,\n            statusBarStyle: darkModeStatusBarStyle !== null && darkModeStatusBarStyle !== void 0 ? darkModeStatusBarStyle : statusBarStyle,\n            addStatusBarBackgroundColor: addStatusBarBackgroundColor\n          });\n\n          if (!areStyleElementsEqual(configuredV23DarkXmlContent, configuredV23XmlContent)) {\n            _context.next = 28;\n            break;\n          }\n\n          _context.next = 26;\n          return _regeneratorRuntime.awrap(xml_manipulation_1.writeXmlFileOrRemoveFileUponNoResources(v23DarkFilePath, removeStyleElement(configuredV23DarkXmlContent)));\n\n        case 26:\n          _context.next = 30;\n          break;\n\n        case 28:\n          _context.next = 30;\n          return _regeneratorRuntime.awrap(xml_manipulation_1.writeXmlFile(v23DarkFilePath, configuredV23DarkXmlContent));\n\n        case 30:\n          if (!areStyleElementsEqual(configuredV23XmlContent, configuredXmlContent)) {\n            _context.next = 35;\n            break;\n          }\n\n          _context.next = 33;\n          return _regeneratorRuntime.awrap(xml_manipulation_1.writeXmlFileOrRemoveFileUponNoResources(v23FilePath, removeStyleElement(configuredV23XmlContent)));\n\n        case 33:\n          _context.next = 37;\n          break;\n\n        case 35:\n          _context.next = 37;\n          return _regeneratorRuntime.awrap(xml_manipulation_1.writeXmlFile(v23FilePath, configuredV23XmlContent));\n\n        case 37:\n          _context.next = 39;\n          return _regeneratorRuntime.awrap(xml_manipulation_1.writeXmlFile(filePath, configuredXmlContent));\n\n        case 39:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.default = configureStylesXml;","map":{"version":3,"sources":["../../src/android/Styles.xml.ts"],"names":[],"mappings":"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","sourcesContent":["import path from 'path';\nimport { Element } from 'xml-js';\n\nimport { Color } from '../SplashScreenConfig';\nimport { SplashScreenStatusBarStyle, SplashScreenStatusBarStyleType } from '../constants';\nimport {\n  readXmlFile,\n  writeXmlFile,\n  mergeXmlElements,\n  xmlElementsEqual,\n  writeXmlFileOrRemoveFileUponNoResources,\n} from '../xml-manipulation';\n\nconst STYLES_XML_FILE_PATH = './res/values/styles.xml';\nconst STYLES_V23_XML_FILE_PATH = './res/values-v23/styles.xml';\nconst STYLES_DARK_V23_XML_FILE_PATH = './res/values-night-v23/styles.xml';\n\nconst STYLE_NAME = 'Theme.App.SplashScreen';\nfunction configureStyle(\n  xml: Element,\n  {\n    statusBarHidden,\n    statusBarStyle,\n    addStatusBarBackgroundColor,\n  }: {\n    statusBarHidden?: boolean;\n    statusBarStyle?: SplashScreenStatusBarStyleType;\n    addStatusBarBackgroundColor?: boolean;\n  }\n): Element {\n  let idx = 0;\n  const result = mergeXmlElements(xml, {\n    elements: [\n      {\n        name: 'resources',\n        elements: [\n          {\n            name: 'style',\n            attributes: {\n              name: STYLE_NAME,\n              parent: 'Theme.AppCompat.Light.NoActionBar',\n            },\n            elements: [\n              {\n                idx: idx++,\n                comment: ` Below line is handled by '@expo/configure-splash-screen' command and it's discouraged to modify it manually `,\n              },\n              {\n                idx: idx++,\n                name: 'item',\n                attributes: {\n                  name: 'android:windowBackground',\n                },\n                elements: [\n                  {\n                    text: '@drawable/splashscreen',\n                  },\n                ],\n              },\n              {\n                idx: statusBarHidden === undefined ? undefined : idx++,\n                deletionFlag: statusBarHidden === undefined,\n                name: 'item',\n                attributes: {\n                  name: 'android:windowFullscreen',\n                },\n                elements: [{ text: String(statusBarHidden) }],\n              },\n              {\n                idx:\n                  statusBarStyle === undefined ||\n                  statusBarStyle === SplashScreenStatusBarStyle.DEFAULT\n                    ? undefined\n                    : idx++,\n                deletionFlag:\n                  statusBarStyle === undefined ||\n                  statusBarStyle === SplashScreenStatusBarStyle.DEFAULT,\n                name: 'item',\n                attributes: {\n                  name: 'android:windowLightStatusBar',\n                },\n                elements: [\n                  {\n                    text:\n                      statusBarStyle === SplashScreenStatusBarStyle.LIGHT_CONTENT\n                        ? 'false'\n                        : statusBarStyle === SplashScreenStatusBarStyle.DARK_CONTENT\n                        ? 'true'\n                        : '',\n                  },\n                ],\n              },\n              {\n                idx: addStatusBarBackgroundColor ? idx++ : undefined,\n                deletionFlag: !addStatusBarBackgroundColor,\n                name: 'item',\n                attributes: {\n                  name: 'android:statusBarColor',\n                },\n                elements: [{ text: '@color/splashscreen_statusbar_color' }],\n              },\n              {\n                comment: ` Customize your splash screen theme here `,\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  });\n  return result;\n}\n\n/**\n * Compares two subparts (`style` elements with STYLE_NAME name attribute) of given elements disregarding comments\n */\nfunction areStyleElementsEqual(a: Element, b: Element): boolean {\n  const styleA = a.elements?.[0].elements?.find(\n    ({ name, attributes }) => name === 'style' && attributes?.name === STYLE_NAME\n  );\n  const styleB = b.elements?.[0].elements?.find(\n    ({ name, attributes }) => name === 'style' && attributes?.name === STYLE_NAME\n  );\n\n  return !!styleA && !!styleB && xmlElementsEqual(styleA, styleB, { disregardComments: true });\n}\n\n/**\n * Removes `style` element with STYLE_NAME name attribute from given element.\n * Function assumes that the structure of the input `element` is correct (`element.elements[name = resources].elements[name = style, attributes.name = STYLE_NAME]`).\n */\nfunction removeStyleElement(element: Element): Element {\n  const resources = element.elements?.find(el => el.name === 'resources');\n  const idxToBeRemoved =\n    resources?.elements?.findIndex(\n      el => el.name === 'style' && el.attributes?.name === STYLE_NAME\n    ) ?? -1;\n  if (idxToBeRemoved !== -1) {\n    // eslint-disable-next-line no-unused-expressions\n    resources?.elements?.splice(idxToBeRemoved, 1);\n  }\n  return element;\n}\n\n/**\n * Creates proper element structure with single `style` element disregarding all other styles.\n * Use to create more specific configuration file, but preserving previous attributes.\n * Function assumes that the structure of the input `element` is correct (`element.elements[name = resources].elements[name = style, attributes.name = STYLE_NAME]`).\n */\nfunction elementWithStyleElement(element: Element): Element | undefined {\n  const result = { ...element };\n  const resources = element.elements?.find(el => el.name === 'resources');\n  if (!resources) {\n    return;\n  }\n  const styleElement = resources?.elements?.find(\n    el => el.name === 'style' && el.attributes?.name === STYLE_NAME\n  );\n  if (!styleElement) {\n    return;\n  }\n  result.elements = [{ ...resources, elements: [styleElement] }];\n  return result;\n}\n\n/**\n * @param androidMainPath Path to the main directory containing code and resources in Android project. In general that would be `android/app/src/main`.\n */\nexport default async function configureStylesXml(\n  androidMainPath: string,\n  config: {\n    statusBar?: {\n      style?: SplashScreenStatusBarStyleType;\n      hidden?: boolean;\n      backgroundColor?: Color;\n    };\n    darkMode?: {\n      statusBar?: {\n        style?: SplashScreenStatusBarStyleType;\n      };\n    };\n  } = {}\n) {\n  const statusBarStyle = config.statusBar?.style ?? SplashScreenStatusBarStyle.DEFAULT;\n  const statusBarHidden = config.statusBar?.hidden;\n  const darkModeStatusBarStyle = config.darkMode?.statusBar?.style;\n  const addStatusBarBackgroundColor = Boolean(config.statusBar?.backgroundColor);\n\n  if (darkModeStatusBarStyle && !statusBarStyle) {\n    throw new Error(\n      `'darkModeStatusBarStyle' is available only if 'statusBarStyle' is provided as well.`\n    );\n  }\n\n  const filePath = path.resolve(androidMainPath, STYLES_XML_FILE_PATH);\n  const v23FilePath = path.resolve(androidMainPath, STYLES_V23_XML_FILE_PATH);\n  const v23DarkFilePath = path.resolve(androidMainPath, STYLES_DARK_V23_XML_FILE_PATH);\n\n  const xmlContent = await readXmlFile(filePath);\n  const contentWithSingleStyle = elementWithStyleElement(xmlContent);\n  const v23XmlContent = await readXmlFile(v23FilePath, contentWithSingleStyle);\n  const v23DarkXmlContent = await readXmlFile(v23DarkFilePath, contentWithSingleStyle);\n\n  const configuredXmlContent = configureStyle(xmlContent, {\n    statusBarHidden,\n    addStatusBarBackgroundColor,\n  });\n  const configuredV23XmlContent = configureStyle(v23XmlContent, {\n    statusBarHidden,\n    statusBarStyle,\n    addStatusBarBackgroundColor,\n  });\n  const configuredV23DarkXmlContent = configureStyle(v23DarkXmlContent, {\n    statusBarHidden,\n    statusBarStyle: darkModeStatusBarStyle ?? statusBarStyle,\n    addStatusBarBackgroundColor,\n  });\n\n  if (areStyleElementsEqual(configuredV23DarkXmlContent, configuredV23XmlContent)) {\n    await writeXmlFileOrRemoveFileUponNoResources(\n      v23DarkFilePath,\n      removeStyleElement(configuredV23DarkXmlContent)\n    );\n  } else {\n    await writeXmlFile(v23DarkFilePath, configuredV23DarkXmlContent);\n  }\n\n  if (areStyleElementsEqual(configuredV23XmlContent, configuredXmlContent)) {\n    await writeXmlFileOrRemoveFileUponNoResources(\n      v23FilePath,\n      removeStyleElement(configuredV23XmlContent)\n    );\n  } else {\n    await writeXmlFile(v23FilePath, configuredV23XmlContent);\n  }\n\n  await writeXmlFile(filePath, configuredXmlContent);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}