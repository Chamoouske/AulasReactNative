{"ast":null,"code":"'use strict';\n\nvar _extends = require(\"@babel/runtime/helpers/extends\");\n\nvar _require = require(\"./ObjCppUtils/GenerateStructs\"),\n    capitalizeFirstLetter = _require.capitalizeFirstLetter;\n\nvar _require2 = require(\"./ObjCppUtils/Utils\"),\n    flatObjects = _require2.flatObjects;\n\nvar propertyHeaderTemplate = 'static facebook::jsi::Value __hostFunction_Native::_MODULE_NAME_::SpecJSI_::_PROPERTY_NAME_::(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {';\nvar propertyCastTemplate = \"static_cast<ObjCTurboModule &>(turboModule)\\n         .invokeObjCMethod(rt, ::_KIND_::, \\\"::_PROPERTY_NAME_::\\\", @selector(::_PROPERTY_NAME_::::_ARGS_::), args, count);\";\nvar propertyTemplate = (\"\\n\" + propertyHeaderTemplate + \"\\n  return \" + propertyCastTemplate + \"\\n}\").trim();\nvar proprertyDefTemplate = '  methodMap_[\"::_PROPERTY_NAME_::\"] = MethodMetadata {::_ARGS_COUNT_::, __hostFunction_Native::_MODULE_NAME_::SpecJSI_::_PROPERTY_NAME_::};';\nvar moduleTemplate = \"\\n::_TURBOMODULE_METHOD_INVOKERS_::\\n\\nNative::_MODULE_NAME_::SpecJSI::Native::_MODULE_NAME_::SpecJSI(id<RCTTurboModule> instance, std::shared_ptr<CallInvoker> jsInvoker, std::shared_ptr<CallInvoker> nativeInvoker, id<RCTTurboModulePerformanceLogger> perfLogger)\\n  : ObjCTurboModule(\\\"::_MODULE_NAME_::\\\", instance, jsInvoker, nativeInvoker, perfLogger) {\\n::_PROPERTIES_MAP_::::_CONVERSION_SELECTORS_::\\n}\".trim();\nvar getterTemplate = \"\\n  @implementation RCTCxxConvert (Native::_MODULE_NAME_::_Spec::_GETTER_NAME_::)\\n+ (RCTManagedPointer *)JS_Native::_MODULE_NAME_::_Spec::_GETTER_NAME_:::(id)json\\n{\\n  return facebook::react::managedPointer<JS::Native::_MODULE_NAME_::::Spec::_GETTER_NAME_::>(json);\\n}\\n@end\\n\".trim();\nvar argConvertionTemplate = '\\n  setMethodArgConversionSelector(@\"::_ARG_NAME_::\", ::_ARG_NUMBER_::, @\"JS_Native::_MODULE_NAME_::_Spec::_SELECTOR_NAME_:::\");';\nvar template = \"\\n/**\\n * Copyright (c) Facebook, Inc. and its affiliates.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n */\\n\\n#include <::_INCLUDE_::>\\n::_GETTERS_::\\nnamespace facebook {\\nnamespace react {\\n\\n::_MODULES_::\\n\\n\\n} // namespace react\\n} // namespace facebook\\n\";\n\nfunction translateReturnTypeToKind(type) {\n  switch (type) {\n    case 'VoidTypeAnnotation':\n      return 'VoidKind';\n\n    case 'StringTypeAnnotation':\n      return 'StringKind';\n\n    case 'BooleanTypeAnnotation':\n      return 'BooleanKind';\n\n    case 'NumberTypeAnnotation':\n    case 'DoubleTypeAnnotation':\n    case 'FloatTypeAnnotation':\n    case 'Int32TypeAnnotation':\n      return 'NumberKind';\n\n    case 'GenericPromiseTypeAnnotation':\n      return 'PromiseKind';\n\n    case 'GenericObjectTypeAnnotation':\n    case 'ObjectTypeAnnotation':\n      return 'ObjectKind';\n\n    case 'ArrayTypeAnnotation':\n      return 'ArrayKind';\n\n    default:\n      type;\n      throw new Error(\"Unknown prop type for returning value, found: \" + type + \"\\\"\");\n  }\n}\n\nfunction tranlsateMethodForImplementation(property) {\n  var numberOfParams = property.typeAnnotation.params.length + (property.typeAnnotation.returnTypeAnnotation.type === 'GenericPromiseTypeAnnotation' ? 2 : 0);\n  var translatedArguments = property.typeAnnotation.params.map(function (param) {\n    return param.name;\n  }).concat(property.typeAnnotation.returnTypeAnnotation.type === 'GenericPromiseTypeAnnotation' ? ['resolve', 'reject'] : []).slice(1).join(':').concat(':');\n\n  if (property.name === 'getConstants' && property.typeAnnotation.returnTypeAnnotation.type === 'ObjectTypeAnnotation' && property.typeAnnotation.returnTypeAnnotation.properties && property.typeAnnotation.returnTypeAnnotation.properties.length === 0) {\n    return '';\n  }\n\n  return propertyTemplate.replace(/::_KIND_::/g, translateReturnTypeToKind(property.typeAnnotation.returnTypeAnnotation.type)).replace(/::_PROPERTY_NAME_::/g, property.name).replace(/::_ARGS_::/g, numberOfParams === 0 ? '' : (numberOfParams === 1 ? '' : ':') + translatedArguments);\n}\n\nmodule.exports = {\n  generate: function generate(libraryName, schema, moduleSpecName) {\n    var nativeModules = Object.keys(schema.modules).map(function (moduleName) {\n      var modules = schema.modules[moduleName].nativeModules;\n\n      if (modules == null) {\n        return null;\n      }\n\n      return modules;\n    }).filter(Boolean).reduce(function (acc, modules) {\n      return _extends(acc, modules);\n    }, {});\n    var gettersImplementations = Object.keys(nativeModules).reduce(function (acc, moduleName) {\n      var module = nativeModules[moduleName];\n      return acc.concat(flatObjects(module.properties.reduce(function (moduleAcc, property) {\n        var returnTypeAnnotation = property.typeAnnotation.returnTypeAnnotation;\n\n        if (returnTypeAnnotation.type === 'ObjectTypeAnnotation') {\n          var properties = returnTypeAnnotation.properties;\n\n          if (properties) {\n            moduleAcc.push({\n              name: capitalizeFirstLetter(property.name) + 'ReturnType',\n              object: {\n                type: 'ObjectTypeAnnotation',\n                properties: properties\n              }\n            });\n          }\n        }\n\n        if (property.typeAnnotation.params) {\n          return moduleAcc.concat(property.typeAnnotation.params.map(function (param) {\n            if (param.typeAnnotation.type === 'ObjectTypeAnnotation') {\n              var _properties = param.typeAnnotation.properties;\n\n              if (_properties) {\n                return {\n                  name: capitalizeFirstLetter(property.name) + capitalizeFirstLetter(param.name),\n                  object: {\n                    type: 'ObjectTypeAnnotation',\n                    properties: _properties\n                  }\n                };\n              }\n            }\n          }).filter(Boolean));\n        }\n\n        return moduleAcc;\n      }, [])).map(function (object) {\n        return getterTemplate.replace(/::_GETTER_NAME_::/g, object.name).replace(/::_MODULE_NAME_::/g, moduleName);\n      }).join('\\n'));\n    }, []).join('\\n');\n    var modules = Object.keys(nativeModules).map(function (name) {\n      var properties = nativeModules[name].properties;\n      var translatedMethods = properties.map(function (property) {\n        return tranlsateMethodForImplementation(property);\n      }).join('\\n');\n      return moduleTemplate.replace(/::_TURBOMODULE_METHOD_INVOKERS_::/g, translatedMethods).replace('::_PROPERTIES_MAP_::', properties.map(function (_ref) {\n        var propertyName = _ref.name,\n            _ref$typeAnnotation = _ref.typeAnnotation,\n            params = _ref$typeAnnotation.params,\n            returnTypeAnnotation = _ref$typeAnnotation.returnTypeAnnotation;\n        return propertyName === 'getConstants' && returnTypeAnnotation.type === 'ObjectTypeAnnotation' && returnTypeAnnotation.properties && returnTypeAnnotation.properties.length === 0 ? '' : proprertyDefTemplate.replace(/::_PROPERTY_NAME_::/g, propertyName).replace(/::_ARGS_COUNT_::/g, params.length.toString());\n      }).join('\\n')).replace('::_CONVERSION_SELECTORS_::', properties.map(function (_ref2) {\n        var propertyName = _ref2.name,\n            params = _ref2.typeAnnotation.params;\n        return params.map(function (param, index) {\n          return param.typeAnnotation.type === 'ObjectTypeAnnotation' && param.typeAnnotation.properties ? argConvertionTemplate.replace('::_SELECTOR_NAME_::', capitalizeFirstLetter(propertyName) + capitalizeFirstLetter(param.name)).replace('::_ARG_NUMBER_::', index.toString()).replace('::_ARG_NAME_::', propertyName) : '';\n        }).join('');\n      }).join('')).replace(/::_MODULE_NAME_::/g, name);\n    }).join('\\n');\n    var fileName = moduleSpecName + \"-generated.mm\";\n    var replacedTemplate = template.replace(/::_GETTERS_::/g, gettersImplementations).replace(/::_MODULES_::/g, modules).replace(/::_LIBRARY_NAME_::/g, libraryName).replace(/::_INCLUDE_::/g, moduleSpecName + \"/\" + moduleSpecName + \".h\");\n    return new Map([[fileName, replacedTemplate]]);\n  }\n};","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/packages/react-native-codegen/src/generators/modules/GenerateModuleMm.js"],"names":["require","capitalizeFirstLetter","flatObjects","propertyHeaderTemplate","propertyCastTemplate","propertyTemplate","trim","proprertyDefTemplate","moduleTemplate","getterTemplate","argConvertionTemplate","template","translateReturnTypeToKind","type","Error","tranlsateMethodForImplementation","property","numberOfParams","typeAnnotation","params","length","returnTypeAnnotation","translatedArguments","map","param","name","concat","slice","join","properties","replace","module","exports","generate","libraryName","schema","moduleSpecName","nativeModules","Object","keys","modules","moduleName","filter","Boolean","reduce","acc","gettersImplementations","moduleAcc","push","object","translatedMethods","propertyName","toString","index","fileName","replacedTemplate","Map"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\n'use strict';\n\nimport type {SchemaType, NativeModuleShape} from '../../CodegenSchema';\n\nconst {capitalizeFirstLetter} = require('./ObjCppUtils/GenerateStructs');\nconst {flatObjects} = require('./ObjCppUtils/Utils');\n\ntype FilesOutput = Map<string, string>;\n\nconst propertyHeaderTemplate =\n  'static facebook::jsi::Value __hostFunction_Native::_MODULE_NAME_::SpecJSI_::_PROPERTY_NAME_::(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {';\n\nconst propertyCastTemplate = `static_cast<ObjCTurboModule &>(turboModule)\n         .invokeObjCMethod(rt, ::_KIND_::, \"::_PROPERTY_NAME_::\", @selector(::_PROPERTY_NAME_::::_ARGS_::), args, count);`;\n\nconst propertyTemplate = `\n${propertyHeaderTemplate}\n  return ${propertyCastTemplate}\n}`.trim();\n\nconst proprertyDefTemplate =\n  '  methodMap_[\"::_PROPERTY_NAME_::\"] = MethodMetadata {::_ARGS_COUNT_::, __hostFunction_Native::_MODULE_NAME_::SpecJSI_::_PROPERTY_NAME_::};';\n\nconst moduleTemplate = `\n::_TURBOMODULE_METHOD_INVOKERS_::\n\nNative::_MODULE_NAME_::SpecJSI::Native::_MODULE_NAME_::SpecJSI(id<RCTTurboModule> instance, std::shared_ptr<CallInvoker> jsInvoker, std::shared_ptr<CallInvoker> nativeInvoker, id<RCTTurboModulePerformanceLogger> perfLogger)\n  : ObjCTurboModule(\"::_MODULE_NAME_::\", instance, jsInvoker, nativeInvoker, perfLogger) {\n::_PROPERTIES_MAP_::::_CONVERSION_SELECTORS_::\n}`.trim();\n\nconst getterTemplate = `\n  @implementation RCTCxxConvert (Native::_MODULE_NAME_::_Spec::_GETTER_NAME_::)\n+ (RCTManagedPointer *)JS_Native::_MODULE_NAME_::_Spec::_GETTER_NAME_:::(id)json\n{\n  return facebook::react::managedPointer<JS::Native::_MODULE_NAME_::::Spec::_GETTER_NAME_::>(json);\n}\n@end\n`.trim();\n\nconst argConvertionTemplate =\n  '\\n  setMethodArgConversionSelector(@\"::_ARG_NAME_::\", ::_ARG_NUMBER_::, @\"JS_Native::_MODULE_NAME_::_Spec::_SELECTOR_NAME_:::\");';\n\nconst template = `\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n#include <::_INCLUDE_::>\n::_GETTERS_::\nnamespace facebook {\nnamespace react {\n\n::_MODULES_::\n\n\n} // namespace react\n} // namespace facebook\n`;\n\nfunction translateReturnTypeToKind(type): string {\n  switch (type) {\n    case 'VoidTypeAnnotation':\n      return 'VoidKind';\n    case 'StringTypeAnnotation':\n      return 'StringKind';\n    case 'BooleanTypeAnnotation':\n      return 'BooleanKind';\n    case 'NumberTypeAnnotation':\n    case 'DoubleTypeAnnotation':\n    case 'FloatTypeAnnotation':\n    case 'Int32TypeAnnotation':\n      return 'NumberKind';\n    case 'GenericPromiseTypeAnnotation':\n      return 'PromiseKind';\n    case 'GenericObjectTypeAnnotation':\n    case 'ObjectTypeAnnotation':\n      return 'ObjectKind';\n    case 'ArrayTypeAnnotation':\n      return 'ArrayKind';\n    default:\n      (type: empty);\n      throw new Error(`Unknown prop type for returning value, found: ${type}\"`);\n  }\n}\n\nfunction tranlsateMethodForImplementation(property): string {\n  const numberOfParams =\n    property.typeAnnotation.params.length +\n    (property.typeAnnotation.returnTypeAnnotation.type ===\n    'GenericPromiseTypeAnnotation'\n      ? 2\n      : 0);\n  const translatedArguments = property.typeAnnotation.params\n    .map(param => param.name)\n    .concat(\n      property.typeAnnotation.returnTypeAnnotation.type ===\n        'GenericPromiseTypeAnnotation'\n        ? ['resolve', 'reject']\n        : [],\n    )\n    .slice(1)\n    .join(':')\n    .concat(':');\n  if (\n    property.name === 'getConstants' &&\n    property.typeAnnotation.returnTypeAnnotation.type ===\n      'ObjectTypeAnnotation' &&\n    property.typeAnnotation.returnTypeAnnotation.properties &&\n    property.typeAnnotation.returnTypeAnnotation.properties.length === 0\n  ) {\n    return '';\n  }\n  return propertyTemplate\n    .replace(\n      /::_KIND_::/g,\n      translateReturnTypeToKind(\n        property.typeAnnotation.returnTypeAnnotation.type,\n      ),\n    )\n    .replace(/::_PROPERTY_NAME_::/g, property.name)\n    .replace(\n      /::_ARGS_::/g,\n      numberOfParams === 0\n        ? ''\n        : (numberOfParams === 1 ? '' : ':') + translatedArguments,\n    );\n}\n\nmodule.exports = {\n  generate(\n    libraryName: string,\n    schema: SchemaType,\n    moduleSpecName: string,\n  ): FilesOutput {\n    const nativeModules: {[name: string]: NativeModuleShape, ...} = Object.keys(\n      schema.modules,\n    )\n      .map(moduleName => {\n        const modules = schema.modules[moduleName].nativeModules;\n        if (modules == null) {\n          return null;\n        }\n\n        return modules;\n      })\n      .filter(Boolean)\n      .reduce((acc, modules) => Object.assign(acc, modules), {});\n\n    const gettersImplementations = Object.keys(nativeModules)\n      .reduce((acc, moduleName: string) => {\n        const module: NativeModuleShape = nativeModules[moduleName];\n        return acc.concat(\n          flatObjects(\n            module.properties.reduce((moduleAcc, property) => {\n              const {returnTypeAnnotation} = property.typeAnnotation;\n              if (returnTypeAnnotation.type === 'ObjectTypeAnnotation') {\n                const {properties} = returnTypeAnnotation;\n                if (properties) {\n                  moduleAcc.push({\n                    name: capitalizeFirstLetter(property.name) + 'ReturnType',\n                    object: {\n                      type: 'ObjectTypeAnnotation',\n                      properties: properties,\n                    },\n                  });\n                }\n              }\n              if (property.typeAnnotation.params) {\n                return moduleAcc.concat(\n                  property.typeAnnotation.params\n                    .map(param => {\n                      if (\n                        param.typeAnnotation.type === 'ObjectTypeAnnotation'\n                      ) {\n                        const {properties} = param.typeAnnotation;\n                        if (properties) {\n                          return {\n                            name:\n                              capitalizeFirstLetter(property.name) +\n                              capitalizeFirstLetter(param.name),\n                            object: {\n                              type: 'ObjectTypeAnnotation',\n                              properties: properties,\n                            },\n                          };\n                        }\n                      }\n                    })\n                    .filter(Boolean),\n                );\n              }\n              return moduleAcc;\n            }, []),\n          )\n            .map(object =>\n              getterTemplate\n                .replace(/::_GETTER_NAME_::/g, object.name)\n                .replace(/::_MODULE_NAME_::/g, moduleName),\n            )\n            .join('\\n'),\n        );\n      }, [])\n      .join('\\n');\n\n    const modules = Object.keys(nativeModules)\n      .map(name => {\n        const {properties} = nativeModules[name];\n        const translatedMethods = properties\n          .map(property => tranlsateMethodForImplementation(property))\n          .join('\\n');\n        return moduleTemplate\n          .replace(/::_TURBOMODULE_METHOD_INVOKERS_::/g, translatedMethods)\n          .replace(\n            '::_PROPERTIES_MAP_::',\n            properties\n              .map(\n                ({\n                  name: propertyName,\n                  typeAnnotation: {params, returnTypeAnnotation},\n                }) =>\n                  propertyName === 'getConstants' &&\n                  returnTypeAnnotation.type === 'ObjectTypeAnnotation' &&\n                  returnTypeAnnotation.properties &&\n                  returnTypeAnnotation.properties.length === 0\n                    ? ''\n                    : proprertyDefTemplate\n                        .replace(/::_PROPERTY_NAME_::/g, propertyName)\n                        .replace(/::_ARGS_COUNT_::/g, params.length.toString()),\n              )\n              .join('\\n'),\n          )\n          .replace(\n            '::_CONVERSION_SELECTORS_::',\n            properties\n              .map(({name: propertyName, typeAnnotation: {params}}) =>\n                params\n                  .map((param, index) =>\n                    param.typeAnnotation.type === 'ObjectTypeAnnotation' &&\n                    param.typeAnnotation.properties\n                      ? argConvertionTemplate\n                          .replace(\n                            '::_SELECTOR_NAME_::',\n                            capitalizeFirstLetter(propertyName) +\n                              capitalizeFirstLetter(param.name),\n                          )\n                          .replace('::_ARG_NUMBER_::', index.toString())\n                          .replace('::_ARG_NAME_::', propertyName)\n                      : '',\n                  )\n                  .join(''),\n              )\n              .join(''),\n          )\n          .replace(/::_MODULE_NAME_::/g, name);\n      })\n      .join('\\n');\n\n    const fileName = `${moduleSpecName}-generated.mm`;\n    const replacedTemplate = template\n      .replace(/::_GETTERS_::/g, gettersImplementations)\n      .replace(/::_MODULES_::/g, modules)\n      .replace(/::_LIBRARY_NAME_::/g, libraryName)\n      .replace(/::_INCLUDE_::/g, `${moduleSpecName}/${moduleSpecName}.h`);\n    return new Map([[fileName, replacedTemplate]]);\n  },\n};\n"]},"metadata":{},"sourceType":"script"}