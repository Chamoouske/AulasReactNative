{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar fs_extra_1 = __importDefault(require(\"fs-extra\"));\n\nvar path_1 = require(\"path\");\n\nfunction writeContentsJsonAsync(directory, _ref) {\n  var images;\n  return _regeneratorRuntime.async(function writeContentsJsonAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          images = _ref.images;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(fs_extra_1.default.ensureDir(directory));\n\n        case 3:\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(fs_extra_1.default.writeFile(path_1.join(directory, 'Contents.json'), JSON.stringify({\n            images: images,\n            info: {\n              version: 1,\n              author: 'expo'\n            }\n          }, null, 2)));\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.writeContentsJsonAsync = writeContentsJsonAsync;","map":{"version":3,"sources":["../../src/ios/AssetContents.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,IAAA,UAAA,GAAA,eAAA,CAAA,OAAA,CAAA,UAAA,CAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,MAAA,CAAA;;AAiCO,SAAe,sBAAf,CACL,SADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAEH,UAAA,MAFG,QAEH,MAFG;AAAA;AAAA,2CAIC,UAAA,CAAA,OAAA,CAAG,SAAH,CAAa,SAAb,CAJD;;AAAA;AAAA;AAAA,2CAMC,UAAA,CAAA,OAAA,CAAG,SAAH,CACJ,MAAA,CAAA,IAAA,CAAK,SAAL,EAAgB,eAAhB,CADI,EAEJ,IAAI,CAAC,SAAL,CACE;AACE,YAAA,MAAM,EAAN,MADF;AAEE,YAAA,IAAI,EAAE;AACJ,cAAA,OAAO,EAAE,CADL;AAGJ,cAAA,MAAM,EAAE;AAHJ;AAFR,WADF,EASE,IATF,EAUE,CAVF,CAFI,CAND;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAP,OAAA,CAAA,sBAAA,GAAA,sBAAA","sourcesContent":["import fs from 'fs-extra';\nimport { join } from 'path';\n\nexport type ContentsJsonImageIdiom = 'iphone' | 'ipad' | 'ios-marketing' | 'universal';\n\nexport type ContentsJsonImageAppearance = {\n  appearance: 'luminosity';\n  value: 'dark';\n};\n\nexport type ContentsJsonImageScale = '1x' | '2x' | '3x';\n\nexport interface ContentsJsonImage {\n  appearances?: ContentsJsonImageAppearance[];\n  idiom: ContentsJsonImageIdiom;\n  size?: string;\n  scale: ContentsJsonImageScale;\n  filename?: string;\n}\n\nexport interface ContentsJson {\n  images: ContentsJsonImage[];\n  info: {\n    version: number;\n    author: string;\n  };\n}\n\n/**\n * Writes the Config.json which is used to assign images to their respective platform, dpi, and idiom.\n *\n * @param directory path to add the Contents.json to.\n * @param contents image json data\n */\nexport async function writeContentsJsonAsync(\n  directory: string,\n  { images }: Pick<ContentsJson, 'images'>\n): Promise<void> {\n  await fs.ensureDir(directory);\n\n  await fs.writeFile(\n    join(directory, 'Contents.json'),\n    JSON.stringify(\n      {\n        images,\n        info: {\n          version: 1,\n          // common practice is for the tool that generated the icons to be the \"author\"\n          author: 'expo',\n        },\n      },\n      null,\n      2\n    )\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}