{"ast":null,"code":"function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar Range = require(\"../classes/range.js\");\n\nvar _require = require(\"../classes/comparator.js\"),\n    ANY = _require.ANY;\n\nvar satisfies = require(\"../functions/satisfies.js\");\n\nvar compare = require(\"../functions/compare.js\");\n\nvar subset = function subset(sub, dom, options) {\n  sub = new Range(sub, options);\n  dom = new Range(dom, options);\n  var sawNonNull = false;\n\n  OUTER: for (var _iterator = _createForOfIteratorHelperLoose(sub.set), _step; !(_step = _iterator()).done;) {\n    var simpleSub = _step.value;\n\n    for (var _iterator2 = _createForOfIteratorHelperLoose(dom.set), _step2; !(_step2 = _iterator2()).done;) {\n      var simpleDom = _step2.value;\n      var isSub = simpleSubset(simpleSub, simpleDom, options);\n      sawNonNull = sawNonNull || isSub !== null;\n      if (isSub) continue OUTER;\n    }\n\n    if (sawNonNull) return false;\n  }\n\n  return true;\n};\n\nvar simpleSubset = function simpleSubset(sub, dom, options) {\n  if (sub.length === 1 && sub[0].semver === ANY) return dom.length === 1 && dom[0].semver === ANY;\n  var eqSet = new Set();\n  var gt, lt;\n\n  for (var _iterator3 = _createForOfIteratorHelperLoose(sub), _step3; !(_step3 = _iterator3()).done;) {\n    var c = _step3.value;\n    if (c.operator === '>' || c.operator === '>=') gt = higherGT(gt, c, options);else if (c.operator === '<' || c.operator === '<=') lt = lowerLT(lt, c, options);else eqSet.add(c.semver);\n  }\n\n  if (eqSet.size > 1) return null;\n  var gtltComp;\n\n  if (gt && lt) {\n    gtltComp = compare(gt.semver, lt.semver, options);\n    if (gtltComp > 0) return null;else if (gtltComp === 0 && (gt.operator !== '>=' || lt.operator !== '<=')) return null;\n  }\n\n  for (var _iterator4 = _createForOfIteratorHelperLoose(eqSet), _step4; !(_step4 = _iterator4()).done;) {\n    var eq = _step4.value;\n    if (gt && !satisfies(eq, String(gt), options)) return null;\n    if (lt && !satisfies(eq, String(lt), options)) return null;\n\n    for (var _iterator6 = _createForOfIteratorHelperLoose(dom), _step6; !(_step6 = _iterator6()).done;) {\n      var _c2 = _step6.value;\n      if (!satisfies(eq, String(_c2), options)) return false;\n    }\n\n    return true;\n  }\n\n  var higher, lower;\n  var hasDomLT, hasDomGT;\n\n  for (var _iterator5 = _createForOfIteratorHelperLoose(dom), _step5; !(_step5 = _iterator5()).done;) {\n    var _c = _step5.value;\n    hasDomGT = hasDomGT || _c.operator === '>' || _c.operator === '>=';\n    hasDomLT = hasDomLT || _c.operator === '<' || _c.operator === '<=';\n\n    if (gt) {\n      if (_c.operator === '>' || _c.operator === '>=') {\n        higher = higherGT(gt, _c, options);\n        if (higher === _c) return false;\n      } else if (gt.operator === '>=' && !satisfies(gt.semver, String(_c), options)) return false;\n    }\n\n    if (lt) {\n      if (_c.operator === '<' || _c.operator === '<=') {\n        lower = lowerLT(lt, _c, options);\n        if (lower === _c) return false;\n      } else if (lt.operator === '<=' && !satisfies(lt.semver, String(_c), options)) return false;\n    }\n\n    if (!_c.operator && (lt || gt) && gtltComp !== 0) return false;\n  }\n\n  if (gt && hasDomLT && !lt && gtltComp !== 0) return false;\n  if (lt && hasDomGT && !gt && gtltComp !== 0) return false;\n  return true;\n};\n\nvar higherGT = function higherGT(a, b, options) {\n  if (!a) return b;\n  var comp = compare(a.semver, b.semver, options);\n  return comp > 0 ? a : comp < 0 ? b : b.operator === '>' && a.operator === '>=' ? b : a;\n};\n\nvar lowerLT = function lowerLT(a, b, options) {\n  if (!a) return b;\n  var comp = compare(a.semver, b.semver, options);\n  return comp < 0 ? a : comp > 0 ? b : b.operator === '<' && a.operator === '<=' ? b : a;\n};\n\nmodule.exports = subset;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@expo/config/node_modules/semver/ranges/subset.js"],"names":["Range","require","ANY","satisfies","compare","subset","sub","dom","options","sawNonNull","OUTER","set","simpleSub","simpleDom","isSub","simpleSubset","length","semver","eqSet","Set","gt","lt","c","operator","higherGT","lowerLT","add","size","gtltComp","eq","String","higher","lower","hasDomLT","hasDomGT","a","b","comp","module","exports"],"mappings":"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","sourcesContent":["const Range = require('../classes/range.js')\nconst { ANY } = require('../classes/comparator.js')\nconst satisfies = require('../functions/satisfies.js')\nconst compare = require('../functions/compare.js')\n\n// Complex range `r1 || r2 || ...` is a subset of `R1 || R2 || ...` iff:\n// - Every simple range `r1, r2, ...` is a subset of some `R1, R2, ...`\n//\n// Simple range `c1 c2 ...` is a subset of simple range `C1 C2 ...` iff:\n// - If c is only the ANY comparator\n//   - If C is only the ANY comparator, return true\n//   - Else return false\n// - Let EQ be the set of = comparators in c\n// - If EQ is more than one, return true (null set)\n// - Let GT be the highest > or >= comparator in c\n// - Let LT be the lowest < or <= comparator in c\n// - If GT and LT, and GT.semver > LT.semver, return true (null set)\n// - If EQ\n//   - If GT, and EQ does not satisfy GT, return true (null set)\n//   - If LT, and EQ does not satisfy LT, return true (null set)\n//   - If EQ satisfies every C, return true\n//   - Else return false\n// - If GT\n//   - If GT is lower than any > or >= comp in C, return false\n//   - If GT is >=, and GT.semver does not satisfy every C, return false\n// - If LT\n//   - If LT.semver is greater than that of any > comp in C, return false\n//   - If LT is <=, and LT.semver does not satisfy every C, return false\n// - If any C is a = range, and GT or LT are set, return false\n// - Else return true\n\nconst subset = (sub, dom, options) => {\n  sub = new Range(sub, options)\n  dom = new Range(dom, options)\n  let sawNonNull = false\n\n  OUTER: for (const simpleSub of sub.set) {\n    for (const simpleDom of dom.set) {\n      const isSub = simpleSubset(simpleSub, simpleDom, options)\n      sawNonNull = sawNonNull || isSub !== null\n      if (isSub)\n        continue OUTER\n    }\n    // the null set is a subset of everything, but null simple ranges in\n    // a complex range should be ignored.  so if we saw a non-null range,\n    // then we know this isn't a subset, but if EVERY simple range was null,\n    // then it is a subset.\n    if (sawNonNull)\n      return false\n  }\n  return true\n}\n\nconst simpleSubset = (sub, dom, options) => {\n  if (sub.length === 1 && sub[0].semver === ANY)\n    return dom.length === 1 && dom[0].semver === ANY\n\n  const eqSet = new Set()\n  let gt, lt\n  for (const c of sub) {\n    if (c.operator === '>' || c.operator === '>=')\n      gt = higherGT(gt, c, options)\n    else if (c.operator === '<' || c.operator === '<=')\n      lt = lowerLT(lt, c, options)\n    else\n      eqSet.add(c.semver)\n  }\n\n  if (eqSet.size > 1)\n    return null\n\n  let gtltComp\n  if (gt && lt) {\n    gtltComp = compare(gt.semver, lt.semver, options)\n    if (gtltComp > 0)\n      return null\n    else if (gtltComp === 0 && (gt.operator !== '>=' || lt.operator !== '<='))\n      return null\n  }\n\n  // will iterate one or zero times\n  for (const eq of eqSet) {\n    if (gt && !satisfies(eq, String(gt), options))\n      return null\n\n    if (lt && !satisfies(eq, String(lt), options))\n      return null\n\n    for (const c of dom) {\n      if (!satisfies(eq, String(c), options))\n        return false\n    }\n    return true\n  }\n\n  let higher, lower\n  let hasDomLT, hasDomGT\n  for (const c of dom) {\n    hasDomGT = hasDomGT || c.operator === '>' || c.operator === '>='\n    hasDomLT = hasDomLT || c.operator === '<' || c.operator === '<='\n    if (gt) {\n      if (c.operator === '>' || c.operator === '>=') {\n        higher = higherGT(gt, c, options)\n        if (higher === c)\n          return false\n      } else if (gt.operator === '>=' && !satisfies(gt.semver, String(c), options))\n        return false\n    }\n    if (lt) {\n      if (c.operator === '<' || c.operator === '<=') {\n        lower = lowerLT(lt, c, options)\n        if (lower === c)\n          return false\n      } else if (lt.operator === '<=' && !satisfies(lt.semver, String(c), options))\n        return false\n    }\n    if (!c.operator && (lt || gt) && gtltComp !== 0)\n      return false\n  }\n\n  // if there was a < or >, and nothing in the dom, then must be false\n  // UNLESS it was limited by another range in the other direction.\n  // Eg, >1.0.0 <1.0.1 is still a subset of <2.0.0\n  if (gt && hasDomLT && !lt && gtltComp !== 0)\n    return false\n\n  if (lt && hasDomGT && !gt && gtltComp !== 0)\n    return false\n\n  return true\n}\n\n// >=1.2.3 is lower than >1.2.3\nconst higherGT = (a, b, options) => {\n  if (!a)\n    return b\n  const comp = compare(a.semver, b.semver, options)\n  return comp > 0 ? a\n    : comp < 0 ? b\n    : b.operator === '>' && a.operator === '>=' ? b\n    : a\n}\n\n// <=1.2.3 is higher than <1.2.3\nconst lowerLT = (a, b, options) => {\n  if (!a)\n    return b\n  const comp = compare(a.semver, b.semver, options)\n  return comp < 0 ? a\n    : comp > 0 ? b\n    : b.operator === '<' && a.operator === '<=' ? b\n    : a\n}\n\nmodule.exports = subset\n"]},"metadata":{},"sourceType":"script"}