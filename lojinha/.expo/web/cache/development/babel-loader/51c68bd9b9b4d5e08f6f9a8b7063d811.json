{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _require = require(\"../e2e-helpers\"),\n    openComponentWithLabel = _require.openComponentWithLabel,\n    openExampleWithTitle = _require.openExampleWithTitle;\n\ndescribe('TextInput', function () {\n  beforeAll(function _callee() {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(device.reloadReactNative());\n\n          case 2:\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(openComponentWithLabel('<TextInput>', 'Single and multi-line text inputs.'));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  });\n  it('Live rewrite with spaces should replace spaces and enforce max length', function _callee2() {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(openExampleWithTitle('Live Re-Write \\\\(<sp>'));\n\n          case 2:\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(element(by.id('rewrite_sp_underscore_input')).typeText('this is a long sentence'));\n\n          case 4:\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(expect(element(by.id('rewrite_sp_underscore_input'))).toHaveText('this_is_a_long_sente'));\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  });\n  it('Live rewrite with no spaces should remove spaces', function _callee3() {\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(openExampleWithTitle('Live Re-Write \\\\(no spaces'));\n\n          case 2:\n            _context3.next = 4;\n            return _regeneratorRuntime.awrap(element(by.id('rewrite_no_sp_input')).typeText('this is a long sentence'));\n\n          case 4:\n            _context3.next = 6;\n            return _regeneratorRuntime.awrap(expect(element(by.id('rewrite_no_sp_input'))).toHaveText('thisisalongsentence'));\n\n          case 6:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  });\n  it('Live rewrite with clear should remove spaces and clear', function _callee4() {\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return _regeneratorRuntime.awrap(openExampleWithTitle('and clear'));\n\n          case 2:\n            _context4.next = 4;\n            return _regeneratorRuntime.awrap(element(by.id('rewrite_clear_input')).typeText('this is a long sentence'));\n\n          case 4:\n            _context4.next = 6;\n            return _regeneratorRuntime.awrap(expect(element(by.id('rewrite_clear_input'))).toHaveText('thisisalongsentence'));\n\n          case 6:\n            _context4.next = 8;\n            return _regeneratorRuntime.awrap(element(by.id('rewrite_clear_button')).tap());\n\n          case 8:\n            _context4.next = 10;\n            return _regeneratorRuntime.awrap(expect(element(by.id('rewrite_clear_input'))).toHaveText(''));\n\n          case 10:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  });\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/RNTester/e2e/__tests__/TextInput-test.js"],"names":["require","openComponentWithLabel","openExampleWithTitle","describe","beforeAll","device","reloadReactNative","it","element","by","id","typeText","expect","toHaveText","tap"],"mappings":";;eAcIA,OAAO,kB;IAFTC,sB,YAAAA,sB;IACAC,oB,YAAAA,oB;;AAGFC,QAAQ,CAAC,WAAD,EAAc,YAAM;AAC1BC,EAAAA,SAAS,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACFC,MAAM,CAACC,iBAAP,EADE;;AAAA;AAAA;AAAA,6CAEFL,sBAAsB,CAC1B,aAD0B,EAE1B,oCAF0B,CAFpB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,CAAT;AAQAM,EAAAA,EAAE,CAAC,uEAAD,EAA0E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACpEL,oBAAoB,CAAC,uBAAD,CADgD;;AAAA;AAAA;AAAA,6CAGpEM,OAAO,CAACC,EAAE,CAACC,EAAH,CAAM,6BAAN,CAAD,CAAP,CAA8CC,QAA9C,CACJ,yBADI,CAHoE;;AAAA;AAAA;AAAA,6CAMpEC,MAAM,CAACJ,OAAO,CAACC,EAAE,CAACC,EAAH,CAAM,6BAAN,CAAD,CAAR,CAAN,CAAsDG,UAAtD,CACJ,sBADI,CANoE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1E,CAAF;AAWAN,EAAAA,EAAE,CAAC,kDAAD,EAAqD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAC/CL,oBAAoB,CAAC,4BAAD,CAD2B;;AAAA;AAAA;AAAA,6CAG/CM,OAAO,CAACC,EAAE,CAACC,EAAH,CAAM,qBAAN,CAAD,CAAP,CAAsCC,QAAtC,CACJ,yBADI,CAH+C;;AAAA;AAAA;AAAA,6CAM/CC,MAAM,CAACJ,OAAO,CAACC,EAAE,CAACC,EAAH,CAAM,qBAAN,CAAD,CAAR,CAAN,CAA8CG,UAA9C,CACJ,qBADI,CAN+C;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArD,CAAF;AAWAN,EAAAA,EAAE,CAAC,wDAAD,EAA2D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACrDL,oBAAoB,CAAC,WAAD,CADiC;;AAAA;AAAA;AAAA,6CAGrDM,OAAO,CAACC,EAAE,CAACC,EAAH,CAAM,qBAAN,CAAD,CAAP,CAAsCC,QAAtC,CACJ,yBADI,CAHqD;;AAAA;AAAA;AAAA,6CAMrDC,MAAM,CAACJ,OAAO,CAACC,EAAE,CAACC,EAAH,CAAM,qBAAN,CAAD,CAAR,CAAN,CAA8CG,UAA9C,CACJ,qBADI,CANqD;;AAAA;AAAA;AAAA,6CAUrDL,OAAO,CAACC,EAAE,CAACC,EAAH,CAAM,sBAAN,CAAD,CAAP,CAAuCI,GAAvC,EAVqD;;AAAA;AAAA;AAAA,6CAYrDF,MAAM,CAACJ,OAAO,CAACC,EAAE,CAACC,EAAH,CAAM,qBAAN,CAAD,CAAR,CAAN,CAA8CG,UAA9C,CAAyD,EAAzD,CAZqD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA3D,CAAF;AAcD,CA7CO,CAAR","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+react_native\n * @format\n */\n\n/* global device, element, by, expect */\nconst {\n  openComponentWithLabel,\n  openExampleWithTitle,\n} = require('../e2e-helpers');\n\ndescribe('TextInput', () => {\n  beforeAll(async () => {\n    await device.reloadReactNative();\n    await openComponentWithLabel(\n      '<TextInput>',\n      'Single and multi-line text inputs.',\n    );\n  });\n\n  it('Live rewrite with spaces should replace spaces and enforce max length', async () => {\n    await openExampleWithTitle('Live Re-Write \\\\(<sp>');\n\n    await element(by.id('rewrite_sp_underscore_input')).typeText(\n      'this is a long sentence',\n    );\n    await expect(element(by.id('rewrite_sp_underscore_input'))).toHaveText(\n      'this_is_a_long_sente',\n    );\n  });\n\n  it('Live rewrite with no spaces should remove spaces', async () => {\n    await openExampleWithTitle('Live Re-Write \\\\(no spaces');\n\n    await element(by.id('rewrite_no_sp_input')).typeText(\n      'this is a long sentence',\n    );\n    await expect(element(by.id('rewrite_no_sp_input'))).toHaveText(\n      'thisisalongsentence',\n    );\n  });\n\n  it('Live rewrite with clear should remove spaces and clear', async () => {\n    await openExampleWithTitle('and clear');\n\n    await element(by.id('rewrite_clear_input')).typeText(\n      'this is a long sentence',\n    );\n    await expect(element(by.id('rewrite_clear_input'))).toHaveText(\n      'thisisalongsentence',\n    );\n\n    await element(by.id('rewrite_clear_button')).tap();\n\n    await expect(element(by.id('rewrite_clear_input'))).toHaveText('');\n  });\n});\n"]},"metadata":{},"sourceType":"script"}