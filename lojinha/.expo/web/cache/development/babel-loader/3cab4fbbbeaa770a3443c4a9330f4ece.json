{"ast":null,"code":"'use strict';\n\nvar InteractionManager = require(\"./InteractionManager\");\n\nvar InteractionMixin = {\n  componentWillUnmount: function componentWillUnmount() {\n    while (this._interactionMixinHandles.length) {\n      InteractionManager.clearInteractionHandle(this._interactionMixinHandles.pop());\n    }\n  },\n  _interactionMixinHandles: [],\n  createInteractionHandle: function createInteractionHandle() {\n    var handle = InteractionManager.createInteractionHandle();\n\n    this._interactionMixinHandles.push(handle);\n\n    return handle;\n  },\n  clearInteractionHandle: function clearInteractionHandle(clearHandle) {\n    InteractionManager.clearInteractionHandle(clearHandle);\n    this._interactionMixinHandles = this._interactionMixinHandles.filter(function (handle) {\n      return handle !== clearHandle;\n    });\n  },\n  runAfterInteractions: function runAfterInteractions(callback) {\n    InteractionManager.runAfterInteractions(callback);\n  }\n};\nmodule.exports = InteractionMixin;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Interaction/InteractionMixin.js"],"names":["InteractionManager","require","InteractionMixin","componentWillUnmount","_interactionMixinHandles","length","clearInteractionHandle","pop","createInteractionHandle","handle","push","clearHandle","filter","runAfterInteractions","callback","module","exports"],"mappings":"AAUA;;AAEA,IAAMA,kBAAkB,GAAGC,OAAO,wBAAlC;;AAQA,IAAMC,gBAAgB,GAAG;AACvBC,EAAAA,oBAAoB,EAAE,gCAAW;AAC/B,WAAO,KAAKC,wBAAL,CAA8BC,MAArC,EAA6C;AAC3CL,MAAAA,kBAAkB,CAACM,sBAAnB,CACE,KAAKF,wBAAL,CAA8BG,GAA9B,EADF;AAGD;AACF,GAPsB;AASvBH,EAAAA,wBAAwB,EAAG,EATJ;AAWvBI,EAAAA,uBAAuB,EAAE,mCAAmB;AAC1C,QAAMC,MAAM,GAAGT,kBAAkB,CAACQ,uBAAnB,EAAf;;AACA,SAAKJ,wBAAL,CAA8BM,IAA9B,CAAmCD,MAAnC;;AACA,WAAOA,MAAP;AACD,GAfsB;AAiBvBH,EAAAA,sBAAsB,EAAE,gCAASK,WAAT,EAAoC;AAC1DX,IAAAA,kBAAkB,CAACM,sBAAnB,CAA0CK,WAA1C;AACA,SAAKP,wBAAL,GAAgC,KAAKA,wBAAL,CAA8BQ,MAA9B,CAC9B,UAAAH,MAAM;AAAA,aAAIA,MAAM,KAAKE,WAAf;AAAA,KADwB,CAAhC;AAGD,GAtBsB;AA6BvBE,EAAAA,oBAAoB,EAAE,8BAASC,QAAT,EAAmC;AACvDd,IAAAA,kBAAkB,CAACa,oBAAnB,CAAwCC,QAAxC;AACD;AA/BsB,CAAzB;AAkCAC,MAAM,CAACC,OAAP,GAAiBd,gBAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst InteractionManager = require('./InteractionManager');\nimport {type Handle} from './InteractionManager';\n\n/**\n * This mixin provides safe versions of InteractionManager start/end methods\n * that ensures `clearInteractionHandle` is always called\n * once per start, even if the component is unmounted.\n */\nconst InteractionMixin = {\n  componentWillUnmount: function() {\n    while (this._interactionMixinHandles.length) {\n      InteractionManager.clearInteractionHandle(\n        this._interactionMixinHandles.pop(),\n      );\n    }\n  },\n\n  _interactionMixinHandles: ([]: Array<number>),\n\n  createInteractionHandle: function(): Handle {\n    const handle = InteractionManager.createInteractionHandle();\n    this._interactionMixinHandles.push(handle);\n    return handle;\n  },\n\n  clearInteractionHandle: function(clearHandle: number): void {\n    InteractionManager.clearInteractionHandle(clearHandle);\n    this._interactionMixinHandles = this._interactionMixinHandles.filter(\n      handle => handle !== clearHandle,\n    );\n  },\n\n  /**\n   * Schedule work for after all interactions have completed.\n   *\n   * @param {function} callback\n   */\n  runAfterInteractions: function(callback: Function): void {\n    InteractionManager.runAfterInteractions(callback);\n  },\n};\n\nmodule.exports = InteractionMixin;\n"]},"metadata":{},"sourceType":"module"}