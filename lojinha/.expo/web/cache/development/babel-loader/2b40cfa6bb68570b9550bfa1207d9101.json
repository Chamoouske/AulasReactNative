{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar config_plugins_1 = require(\"@expo/config-plugins\");\n\nvar Serialize_1 = require(\"../Serialize\");\n\nexports.withConfigPlugins = function (config) {\n  var _a;\n\n  if (!Array.isArray(config.plugins) || !((_a = config.plugins) === null || _a === void 0 ? void 0 : _a.length)) {\n    return config;\n  }\n\n  config = config_plugins_1.withPlugins(config, config.plugins);\n  return Serialize_1.serializeAfterStaticPlugins(config);\n};","map":{"version":3,"sources":["../../src/plugins/withConfigPlugins.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,gBAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AAEA,IAAA,WAAA,GAAA,OAAA,gBAAA;;AAQa,OAAA,CAAA,iBAAA,GAAkC,UAAA,MAAM,EAAG;;;AAEtD,MAAI,CAAC,KAAK,CAAC,OAAN,CAAc,MAAM,CAAC,OAArB,CAAD,IAAkC,EAAA,CAAA,EAAA,GAAC,MAAM,CAAC,OAAR,MAAe,IAAf,IAAe,EAAA,KAAA,KAAA,CAAf,GAAe,KAAA,CAAf,GAAe,EAAA,CAAE,MAAjB,CAAtC,EAA+D;AAC7D,WAAO,MAAP;AACD;;AAGD,EAAA,MAAM,GAAG,gBAAA,CAAA,WAAA,CAAY,MAAZ,EAAoB,MAAM,CAAC,OAA3B,CAAT;AAEA,SAAO,WAAA,CAAA,2BAAA,CAA4B,MAA5B,CAAP;AACD,CAVY","sourcesContent":["import { ConfigPlugin, withPlugins } from '@expo/config-plugins';\n\nimport { serializeAfterStaticPlugins } from '../Serialize';\n\n/**\n * Resolves static plugins array as config plugin functions.\n *\n * @param config\n * @param projectRoot\n */\nexport const withConfigPlugins: ConfigPlugin = config => {\n  // @ts-ignore: plugins not on config type yet -- TODO\n  if (!Array.isArray(config.plugins) || !config.plugins?.length) {\n    return config;\n  }\n  // Resolve and evaluate plugins\n  // @ts-ignore: TODO: add plugins to the config schema\n  config = withPlugins(config, config.plugins);\n  // plugins aren't serialized by default, serialize the plugins after resolving them.\n  return serializeAfterStaticPlugins(config);\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}