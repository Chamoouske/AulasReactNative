{"ast":null,"code":"'use strict';\n\nvar _require = require(\"../../Utilities/Platform\"),\n    OS = _require.OS;\n\nvar normalizeColor = require(\"../normalizeColor\");\n\ndescribe('normalizeColor', function () {\n  it('should accept only spec compliant colors', function () {\n    expect(normalizeColor('#abc')).not.toBe(null);\n    expect(normalizeColor('#abcd')).not.toBe(null);\n    expect(normalizeColor('#abcdef')).not.toBe(null);\n    expect(normalizeColor('#abcdef01')).not.toBe(null);\n    expect(normalizeColor('rgb(1,2,3)')).not.toBe(null);\n    expect(normalizeColor('rgb(1, 2, 3)')).not.toBe(null);\n    expect(normalizeColor('rgb(   1   , 2   , 3   )')).not.toBe(null);\n    expect(normalizeColor('rgb(-1, -2, -3)')).not.toBe(null);\n    expect(normalizeColor('rgba(0, 0, 0, 1)')).not.toBe(null);\n    expect(normalizeColor(0x01234567 + 0.5)).toBe(null);\n    expect(normalizeColor(-1)).toBe(null);\n    expect(normalizeColor(0xffffffff + 1)).toBe(null);\n  });\n  it('should temporarily accept floating point values for rgb', function () {\n    expect(normalizeColor('rgb(1.1, 2.1, 3.1)')).toBe(0x010203ff);\n    expect(normalizeColor('rgba(1.1, 2.1, 3.1, 1.0)')).toBe(0x010203ff);\n  });\n  it('should refuse non spec compliant colors', function () {\n    expect(normalizeColor('#00gg00')).toBe(null);\n    expect(normalizeColor('rgb(1, 2, 3,)')).toBe(null);\n    expect(normalizeColor('rgb(1, 2, 3')).toBe(null);\n    expect(normalizeColor('abc')).toBe(null);\n    expect(normalizeColor(' #abc ')).toBe(null);\n    expect(normalizeColor('##abc')).toBe(null);\n    expect(normalizeColor('rgb 255 0 0')).toBe(null);\n    expect(normalizeColor('RGBA(0, 1, 2)')).toBe(null);\n    expect(normalizeColor('rgb (0, 1, 2)')).toBe(null);\n    expect(normalizeColor('hsv(0, 1, 2)')).toBe(null);\n    expect(normalizeColor({\n      r: 10,\n      g: 10,\n      b: 10\n    })).toBe(null);\n    expect(normalizeColor('hsl(1%, 2, 3)')).toBe(null);\n    expect(normalizeColor('rgb(1%, 2%, 3%)')).toBe(null);\n  });\n  it('should handle hex6 properly', function () {\n    expect(normalizeColor('#000000')).toBe(0x000000ff);\n    expect(normalizeColor('#ffffff')).toBe(0xffffffff);\n    expect(normalizeColor('#ff00ff')).toBe(0xff00ffff);\n    expect(normalizeColor('#abcdef')).toBe(0xabcdefff);\n    expect(normalizeColor('#012345')).toBe(0x012345ff);\n  });\n  it('should handle hex3 properly', function () {\n    expect(normalizeColor('#000')).toBe(0x000000ff);\n    expect(normalizeColor('#fff')).toBe(0xffffffff);\n    expect(normalizeColor('#f0f')).toBe(0xff00ffff);\n  });\n  it('should handle hex8 properly', function () {\n    expect(normalizeColor('#00000000')).toBe(0x00000000);\n    expect(normalizeColor('#ffffffff')).toBe(0xffffffff);\n    expect(normalizeColor('#ffff00ff')).toBe(0xffff00ff);\n    expect(normalizeColor('#abcdef01')).toBe(0xabcdef01);\n    expect(normalizeColor('#01234567')).toBe(0x01234567);\n  });\n  it('should handle rgb properly', function () {\n    expect(normalizeColor('rgb(0, 0, 0)')).toBe(0x000000ff);\n    expect(normalizeColor('rgb(-1, -2, -3)')).toBe(0x000000ff);\n    expect(normalizeColor('rgb(0, 0, 255)')).toBe(0x0000ffff);\n    expect(normalizeColor('rgb(100, 15, 69)')).toBe(0x640f45ff);\n    expect(normalizeColor('rgb(255, 255, 255)')).toBe(0xffffffff);\n    expect(normalizeColor('rgb(256, 256, 256)')).toBe(0xffffffff);\n  });\n  it('should handle rgba properly', function () {\n    expect(normalizeColor('rgba(0, 0, 0, 0.0)')).toBe(0x00000000);\n    expect(normalizeColor('rgba(0, 0, 0, 0)')).toBe(0x00000000);\n    expect(normalizeColor('rgba(0, 0, 0, -0.5)')).toBe(0x00000000);\n    expect(normalizeColor('rgba(0, 0, 0, 1.0)')).toBe(0x000000ff);\n    expect(normalizeColor('rgba(0, 0, 0, 1)')).toBe(0x000000ff);\n    expect(normalizeColor('rgba(0, 0, 0, 1.5)')).toBe(0x000000ff);\n    expect(normalizeColor('rgba(100, 15, 69, 0.5)')).toBe(0x640f4580);\n  });\n  it('should handle hsl properly', function () {\n    expect(normalizeColor('hsl(0, 0%, 0%)')).toBe(0x000000ff);\n    expect(normalizeColor('hsl(360, 100%, 100%)')).toBe(0xffffffff);\n    expect(normalizeColor('hsl(180, 50%, 50%)')).toBe(0x40bfbfff);\n    expect(normalizeColor('hsl(540, 50%, 50%)')).toBe(0x40bfbfff);\n    expect(normalizeColor('hsl(70, 25%, 75%)')).toBe(0xcacfafff);\n    expect(normalizeColor('hsl(70, 100%, 75%)')).toBe(0xeaff80ff);\n    expect(normalizeColor('hsl(70, 110%, 75%)')).toBe(0xeaff80ff);\n    expect(normalizeColor('hsl(70, 0%, 75%)')).toBe(0xbfbfbfff);\n    expect(normalizeColor('hsl(70, -10%, 75%)')).toBe(0xbfbfbfff);\n  });\n  it('should handle hsla properly', function () {\n    expect(normalizeColor('hsla(0, 0%, 0%, 0)')).toBe(0x00000000);\n    expect(normalizeColor('hsla(360, 100%, 100%, 1)')).toBe(0xffffffff);\n    expect(normalizeColor('hsla(360, 100%, 100%, 0)')).toBe(0xffffff00);\n    expect(normalizeColor('hsla(180, 50%, 50%, 0.2)')).toBe(0x40bfbf33);\n  });\n  it('should handle named colors properly', function () {\n    expect(normalizeColor('red')).toBe(0xff0000ff);\n    expect(normalizeColor('transparent')).toBe(0x00000000);\n    expect(normalizeColor('peachpuff')).toBe(0xffdab9ff);\n  });\n  it('should handle number colors properly', function () {\n    expect(normalizeColor(0x00000000)).toBe(0x00000000);\n    expect(normalizeColor(0xff0000ff)).toBe(0xff0000ff);\n    expect(normalizeColor(0xffffffff)).toBe(0xffffffff);\n    expect(normalizeColor(0x01234567)).toBe(0x01234567);\n  });\n  it(\"should return the same color when it's already normalized\", function () {\n    var normalizedColor = normalizeColor('red') || 0;\n    expect(normalizeColor(normalizedColor)).toBe(normalizedColor);\n  });\n  describe('iOS', function () {\n    if (OS === 'ios') {\n      var PlatformColor = require(\"../PlatformColorValueTypes.ios\").PlatformColor;\n\n      var DynamicColorIOS = require(\"../PlatformColorValueTypesIOS.ios\").DynamicColorIOS;\n\n      it('should normalize iOS PlatformColor colors', function () {\n        var color = PlatformColor('systemRedColor');\n        var normalizedColor = normalizeColor(color);\n        var expectedColor = {\n          semantic: ['systemRedColor']\n        };\n        expect(normalizedColor).toEqual(expectedColor);\n      });\n      it('should normalize iOS Dynamic colors with named colors', function () {\n        var color = DynamicColorIOS({\n          light: 'black',\n          dark: 'white'\n        });\n        var normalizedColor = normalizeColor(color);\n        var expectedColor = {\n          dynamic: {\n            light: 'black',\n            dark: 'white'\n          }\n        };\n        expect(normalizedColor).toEqual(expectedColor);\n      });\n      it('should normalize iOS Dynamic colors with PlatformColor colors', function () {\n        var color = DynamicColorIOS({\n          light: PlatformColor('systemBlackColor'),\n          dark: PlatformColor('systemWhiteColor')\n        });\n        var normalizedColor = normalizeColor(color);\n        var expectedColor = {\n          dynamic: {\n            light: {\n              semantic: ['systemBlackColor']\n            },\n            dark: {\n              semantic: ['systemWhiteColor']\n            }\n          }\n        };\n        expect(normalizedColor).toEqual(expectedColor);\n      });\n    }\n  });\n  describe('Android', function () {\n    if (OS === 'android') {\n      var PlatformColor = require(\"../PlatformColorValueTypes.android\").PlatformColor;\n\n      it('should normalize Android PlatformColor colors', function () {\n        var color = PlatformColor('?attr/colorPrimary');\n        var normalizedColor = normalizeColor(color);\n        var expectedColor = {\n          resource_paths: ['?attr/colorPrimary']\n        };\n        expect(normalizedColor).toEqual(expectedColor);\n      });\n    }\n  });\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/StyleSheet/__tests__/normalizeColor-test.js"],"names":["require","OS","normalizeColor","describe","it","expect","not","toBe","r","g","b","normalizedColor","PlatformColor","DynamicColorIOS","color","expectedColor","semantic","toEqual","light","dark","dynamic","resource_paths"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @emails oncall+react_native\n */\n\n'use strict';\n\nconst {OS} = require('../../Utilities/Platform');\nconst normalizeColor = require('../normalizeColor');\n\ndescribe('normalizeColor', function() {\n  it('should accept only spec compliant colors', function() {\n    expect(normalizeColor('#abc')).not.toBe(null);\n    expect(normalizeColor('#abcd')).not.toBe(null);\n    expect(normalizeColor('#abcdef')).not.toBe(null);\n    expect(normalizeColor('#abcdef01')).not.toBe(null);\n    expect(normalizeColor('rgb(1,2,3)')).not.toBe(null);\n    expect(normalizeColor('rgb(1, 2, 3)')).not.toBe(null);\n    expect(normalizeColor('rgb(   1   , 2   , 3   )')).not.toBe(null);\n    expect(normalizeColor('rgb(-1, -2, -3)')).not.toBe(null);\n    expect(normalizeColor('rgba(0, 0, 0, 1)')).not.toBe(null);\n    expect(normalizeColor(0x01234567 + 0.5)).toBe(null);\n    expect(normalizeColor(-1)).toBe(null);\n    expect(normalizeColor(0xffffffff + 1)).toBe(null);\n  });\n\n  it('should temporarily accept floating point values for rgb', function() {\n    expect(normalizeColor('rgb(1.1, 2.1, 3.1)')).toBe(0x010203ff);\n    expect(normalizeColor('rgba(1.1, 2.1, 3.1, 1.0)')).toBe(0x010203ff);\n  });\n\n  it('should refuse non spec compliant colors', function() {\n    expect(normalizeColor('#00gg00')).toBe(null);\n    expect(normalizeColor('rgb(1, 2, 3,)')).toBe(null);\n    expect(normalizeColor('rgb(1, 2, 3')).toBe(null);\n\n    // Used to be accepted by normalizeColor\n    expect(normalizeColor('abc')).toBe(null);\n    expect(normalizeColor(' #abc ')).toBe(null);\n    expect(normalizeColor('##abc')).toBe(null);\n    expect(normalizeColor('rgb 255 0 0')).toBe(null);\n    expect(normalizeColor('RGBA(0, 1, 2)')).toBe(null);\n    expect(normalizeColor('rgb (0, 1, 2)')).toBe(null);\n    expect(normalizeColor('hsv(0, 1, 2)')).toBe(null);\n    expect(normalizeColor({r: 10, g: 10, b: 10})).toBe(null);\n    expect(normalizeColor('hsl(1%, 2, 3)')).toBe(null);\n    expect(normalizeColor('rgb(1%, 2%, 3%)')).toBe(null);\n  });\n\n  it('should handle hex6 properly', function() {\n    expect(normalizeColor('#000000')).toBe(0x000000ff);\n    expect(normalizeColor('#ffffff')).toBe(0xffffffff);\n    expect(normalizeColor('#ff00ff')).toBe(0xff00ffff);\n    expect(normalizeColor('#abcdef')).toBe(0xabcdefff);\n    expect(normalizeColor('#012345')).toBe(0x012345ff);\n  });\n\n  it('should handle hex3 properly', function() {\n    expect(normalizeColor('#000')).toBe(0x000000ff);\n    expect(normalizeColor('#fff')).toBe(0xffffffff);\n    expect(normalizeColor('#f0f')).toBe(0xff00ffff);\n  });\n\n  it('should handle hex8 properly', function() {\n    expect(normalizeColor('#00000000')).toBe(0x00000000);\n    expect(normalizeColor('#ffffffff')).toBe(0xffffffff);\n    expect(normalizeColor('#ffff00ff')).toBe(0xffff00ff);\n    expect(normalizeColor('#abcdef01')).toBe(0xabcdef01);\n    expect(normalizeColor('#01234567')).toBe(0x01234567);\n  });\n\n  it('should handle rgb properly', function() {\n    expect(normalizeColor('rgb(0, 0, 0)')).toBe(0x000000ff);\n    expect(normalizeColor('rgb(-1, -2, -3)')).toBe(0x000000ff);\n    expect(normalizeColor('rgb(0, 0, 255)')).toBe(0x0000ffff);\n    expect(normalizeColor('rgb(100, 15, 69)')).toBe(0x640f45ff);\n    expect(normalizeColor('rgb(255, 255, 255)')).toBe(0xffffffff);\n    expect(normalizeColor('rgb(256, 256, 256)')).toBe(0xffffffff);\n  });\n\n  it('should handle rgba properly', function() {\n    expect(normalizeColor('rgba(0, 0, 0, 0.0)')).toBe(0x00000000);\n    expect(normalizeColor('rgba(0, 0, 0, 0)')).toBe(0x00000000);\n    expect(normalizeColor('rgba(0, 0, 0, -0.5)')).toBe(0x00000000);\n    expect(normalizeColor('rgba(0, 0, 0, 1.0)')).toBe(0x000000ff);\n    expect(normalizeColor('rgba(0, 0, 0, 1)')).toBe(0x000000ff);\n    expect(normalizeColor('rgba(0, 0, 0, 1.5)')).toBe(0x000000ff);\n    expect(normalizeColor('rgba(100, 15, 69, 0.5)')).toBe(0x640f4580);\n  });\n\n  it('should handle hsl properly', function() {\n    expect(normalizeColor('hsl(0, 0%, 0%)')).toBe(0x000000ff);\n    expect(normalizeColor('hsl(360, 100%, 100%)')).toBe(0xffffffff);\n    expect(normalizeColor('hsl(180, 50%, 50%)')).toBe(0x40bfbfff);\n    expect(normalizeColor('hsl(540, 50%, 50%)')).toBe(0x40bfbfff);\n    expect(normalizeColor('hsl(70, 25%, 75%)')).toBe(0xcacfafff);\n    expect(normalizeColor('hsl(70, 100%, 75%)')).toBe(0xeaff80ff);\n    expect(normalizeColor('hsl(70, 110%, 75%)')).toBe(0xeaff80ff);\n    expect(normalizeColor('hsl(70, 0%, 75%)')).toBe(0xbfbfbfff);\n    expect(normalizeColor('hsl(70, -10%, 75%)')).toBe(0xbfbfbfff);\n  });\n\n  it('should handle hsla properly', function() {\n    expect(normalizeColor('hsla(0, 0%, 0%, 0)')).toBe(0x00000000);\n    expect(normalizeColor('hsla(360, 100%, 100%, 1)')).toBe(0xffffffff);\n    expect(normalizeColor('hsla(360, 100%, 100%, 0)')).toBe(0xffffff00);\n    expect(normalizeColor('hsla(180, 50%, 50%, 0.2)')).toBe(0x40bfbf33);\n  });\n\n  it('should handle named colors properly', function() {\n    expect(normalizeColor('red')).toBe(0xff0000ff);\n    expect(normalizeColor('transparent')).toBe(0x00000000);\n    expect(normalizeColor('peachpuff')).toBe(0xffdab9ff);\n  });\n\n  it('should handle number colors properly', function() {\n    expect(normalizeColor(0x00000000)).toBe(0x00000000);\n    expect(normalizeColor(0xff0000ff)).toBe(0xff0000ff);\n    expect(normalizeColor(0xffffffff)).toBe(0xffffffff);\n    expect(normalizeColor(0x01234567)).toBe(0x01234567);\n  });\n\n  it(\"should return the same color when it's already normalized\", function() {\n    const normalizedColor = normalizeColor('red') || 0;\n    expect(normalizeColor(normalizedColor)).toBe(normalizedColor);\n  });\n\n  describe('iOS', () => {\n    if (OS === 'ios') {\n      const PlatformColor = require('../PlatformColorValueTypes.ios')\n        .PlatformColor;\n      const DynamicColorIOS = require('../PlatformColorValueTypesIOS.ios')\n        .DynamicColorIOS;\n\n      it('should normalize iOS PlatformColor colors', () => {\n        const color = PlatformColor('systemRedColor');\n        const normalizedColor = normalizeColor(color);\n        const expectedColor = {semantic: ['systemRedColor']};\n        expect(normalizedColor).toEqual(expectedColor);\n      });\n\n      it('should normalize iOS Dynamic colors with named colors', () => {\n        const color = DynamicColorIOS({light: 'black', dark: 'white'});\n        const normalizedColor = normalizeColor(color);\n        const expectedColor = {dynamic: {light: 'black', dark: 'white'}};\n        expect(normalizedColor).toEqual(expectedColor);\n      });\n\n      it('should normalize iOS Dynamic colors with PlatformColor colors', () => {\n        const color = DynamicColorIOS({\n          light: PlatformColor('systemBlackColor'),\n          dark: PlatformColor('systemWhiteColor'),\n        });\n        const normalizedColor = normalizeColor(color);\n        const expectedColor = {\n          dynamic: {\n            light: {semantic: ['systemBlackColor']},\n            dark: {semantic: ['systemWhiteColor']},\n          },\n        };\n        expect(normalizedColor).toEqual(expectedColor);\n      });\n    }\n  });\n\n  describe('Android', () => {\n    if (OS === 'android') {\n      const PlatformColor = require('../PlatformColorValueTypes.android')\n        .PlatformColor;\n\n      it('should normalize Android PlatformColor colors', () => {\n        const color = PlatformColor('?attr/colorPrimary');\n        const normalizedColor = normalizeColor(color);\n        const expectedColor = {resource_paths: ['?attr/colorPrimary']};\n        expect(normalizedColor).toEqual(expectedColor);\n      });\n    }\n  });\n});\n"]},"metadata":{},"sourceType":"script"}