{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar fs_extra_1 = __importDefault(require(\"fs-extra\"));\n\nvar glob_1 = require(\"glob\");\n\nvar path_1 = __importDefault(require(\"path\"));\n\nvar android_plugins_1 = require(\"../plugins/android-plugins\");\n\nvar core_plugins_1 = require(\"../plugins/core-plugins\");\n\nvar WarningAggregator = __importStar(require(\"../utils/warnings\"));\n\nvar Paths_1 = require(\"./Paths\");\n\nexports.withPackageManifest = android_plugins_1.createAndroidManifestPlugin(setPackageInAndroidManifest, 'withPackageManifest');\n\nexports.withPackageGradle = function (config) {\n  return android_plugins_1.withAppBuildGradle(config, function (config) {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = setPackageInBuildGradle(config, config.modResults.contents);\n    } else {\n      WarningAggregator.addWarningAndroid('android-package', \"Cannot automatically configure app build.gradle if it's not groovy\");\n    }\n\n    return config;\n  });\n};\n\nexports.withPackageRefactor = function (config) {\n  return core_plugins_1.withDangerousMod(config, ['android', function _callee(config) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(renamePackageOnDisk(config, config.modRequest.projectRoot));\n\n          case 2:\n            return _context.abrupt(\"return\", config);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }]);\n};\n\nfunction getPackage(config) {\n  var _a, _b;\n\n  return (_b = (_a = config.android) === null || _a === void 0 ? void 0 : _a.package) !== null && _b !== void 0 ? _b : null;\n}\n\nexports.getPackage = getPackage;\n\nfunction getPackageRoot(projectRoot) {\n  return path_1.default.join(projectRoot, 'android', 'app', 'src', 'main', 'java');\n}\n\nfunction getCurrentPackageName(projectRoot) {\n  var packageRoot, mainApplication, packagePath, packagePathParts;\n  return _regeneratorRuntime.async(function getCurrentPackageName$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          packageRoot = getPackageRoot(projectRoot);\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(Paths_1.getMainApplicationAsync(projectRoot));\n\n        case 3:\n          mainApplication = _context2.sent;\n          packagePath = path_1.default.dirname(mainApplication.path);\n          packagePathParts = path_1.default.relative(packageRoot, packagePath).split(path_1.default.sep).filter(Boolean);\n          return _context2.abrupt(\"return\", packagePathParts.join('.'));\n\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction renamePackageOnDisk(config, projectRoot) {\n  var _path_1$default, _path_1$default2;\n\n  var newPackageName, currentPackageName, packageRoot, currentPackagePath, newPackagePath, oldPathParts, _path_1$default3, pathToCheck, files, filesToUpdate;\n\n  return _regeneratorRuntime.async(function renamePackageOnDisk$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          newPackageName = getPackage(config);\n\n          if (!(newPackageName === null)) {\n            _context3.next = 3;\n            break;\n          }\n\n          return _context3.abrupt(\"return\");\n\n        case 3:\n          _context3.next = 5;\n          return _regeneratorRuntime.awrap(getCurrentPackageName(projectRoot));\n\n        case 5:\n          currentPackageName = _context3.sent;\n\n          if (!(currentPackageName === newPackageName)) {\n            _context3.next = 8;\n            break;\n          }\n\n          return _context3.abrupt(\"return\");\n\n        case 8:\n          packageRoot = getPackageRoot(projectRoot);\n          currentPackagePath = (_path_1$default = path_1.default).join.apply(_path_1$default, [packageRoot].concat(_toConsumableArray(currentPackageName.split('.'))));\n          newPackagePath = (_path_1$default2 = path_1.default).join.apply(_path_1$default2, [packageRoot].concat(_toConsumableArray(newPackageName.split('.'))));\n          fs_extra_1.default.mkdirpSync(newPackagePath);\n          glob_1.sync('**/*', {\n            cwd: currentPackagePath\n          }).forEach(function (relativePath) {\n            var filepath = path_1.default.join(currentPackagePath, relativePath);\n\n            if (fs_extra_1.default.lstatSync(filepath).isFile()) {\n              fs_extra_1.default.moveSync(filepath, path_1.default.join(newPackagePath, relativePath));\n            } else {\n              fs_extra_1.default.mkdirpSync(filepath);\n            }\n          });\n          oldPathParts = currentPackageName.split('.');\n\n          while (oldPathParts.length) {\n            pathToCheck = (_path_1$default3 = path_1.default).join.apply(_path_1$default3, [packageRoot].concat(_toConsumableArray(oldPathParts)));\n\n            try {\n              files = fs_extra_1.default.readdirSync(pathToCheck);\n\n              if (files.length === 0) {\n                fs_extra_1.default.rmdirSync(pathToCheck);\n              }\n            } finally {\n              oldPathParts.pop();\n            }\n          }\n\n          filesToUpdate = [].concat(_toConsumableArray(glob_1.sync('**/*', {\n            cwd: newPackagePath,\n            absolute: true\n          })), [path_1.default.join(projectRoot, 'android', 'app', 'BUCK')]);\n          filesToUpdate.forEach(function (filepath) {\n            try {\n              if (fs_extra_1.default.lstatSync(filepath).isFile()) {\n                var contents = fs_extra_1.default.readFileSync(filepath).toString();\n                contents = contents.replace(new RegExp(currentPackageName, 'g'), newPackageName);\n                fs_extra_1.default.writeFileSync(filepath, contents);\n              }\n            } catch (_a) {}\n          });\n\n        case 17:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.renamePackageOnDisk = renamePackageOnDisk;\n\nfunction setPackageInBuildGradle(config, buildGradle) {\n  var packageName = getPackage(config);\n\n  if (packageName === null) {\n    return buildGradle;\n  }\n\n  var pattern = new RegExp(\"applicationId ['\\\"].*['\\\"]\");\n  return buildGradle.replace(pattern, \"applicationId '\" + packageName + \"'\");\n}\n\nexports.setPackageInBuildGradle = setPackageInBuildGradle;\n\nfunction setPackageInAndroidManifest(config, androidManifest) {\n  var packageName = getPackage(config);\n\n  if (packageName) {\n    androidManifest.manifest.$.package = packageName;\n  } else {\n    delete androidManifest.manifest.$.package;\n  }\n\n  return androidManifest;\n}\n\nexports.setPackageInAndroidManifest = setPackageInAndroidManifest;\n\nfunction getApplicationIdAsync(projectDir) {\n  var _a, buildGradlePath, buildGradle, matchResult;\n\n  return _regeneratorRuntime.async(function getApplicationIdAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          buildGradlePath = Paths_1.getAppBuildGradle(projectDir);\n          _context4.next = 3;\n          return _regeneratorRuntime.awrap(fs_extra_1.default.pathExists(buildGradlePath));\n\n        case 3:\n          if (_context4.sent) {\n            _context4.next = 5;\n            break;\n          }\n\n          return _context4.abrupt(\"return\", null);\n\n        case 5:\n          _context4.next = 7;\n          return _regeneratorRuntime.awrap(fs_extra_1.default.readFile(buildGradlePath, 'utf8'));\n\n        case 7:\n          buildGradle = _context4.sent;\n          matchResult = buildGradle.match(/applicationId ['\"](.*)['\"]/);\n          return _context4.abrupt(\"return\", (_a = matchResult === null || matchResult === void 0 ? void 0 : matchResult[1]) !== null && _a !== void 0 ? _a : null);\n\n        case 10:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.getApplicationIdAsync = getApplicationIdAsync;","map":{"version":3,"sources":["../../src/android/Package.ts"],"names":[],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport fs from 'fs-extra';\nimport { sync as globSync } from 'glob';\nimport path from 'path';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { createAndroidManifestPlugin, withAppBuildGradle } from '../plugins/android-plugins';\nimport { withDangerousMod } from '../plugins/core-plugins';\nimport * as WarningAggregator from '../utils/warnings';\nimport { AndroidManifest } from './Manifest';\nimport { getAppBuildGradle, getMainApplicationAsync } from './Paths';\n\nexport const withPackageManifest = createAndroidManifestPlugin(\n  setPackageInAndroidManifest,\n  'withPackageManifest'\n);\n\nexport const withPackageGradle: ConfigPlugin = config => {\n  return withAppBuildGradle(config, config => {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = setPackageInBuildGradle(config, config.modResults.contents);\n    } else {\n      WarningAggregator.addWarningAndroid(\n        'android-package',\n        `Cannot automatically configure app build.gradle if it's not groovy`\n      );\n    }\n    return config;\n  });\n};\n\nexport const withPackageRefactor: ConfigPlugin = config => {\n  return withDangerousMod(config, [\n    'android',\n    async config => {\n      await renamePackageOnDisk(config, config.modRequest.projectRoot);\n      return config;\n    },\n  ]);\n};\n\nexport function getPackage(config: Pick<ExpoConfig, 'android'>) {\n  return config.android?.package ?? null;\n}\n\nfunction getPackageRoot(projectRoot: string) {\n  return path.join(projectRoot, 'android', 'app', 'src', 'main', 'java');\n}\n\nasync function getCurrentPackageName(projectRoot: string) {\n  const packageRoot = getPackageRoot(projectRoot);\n  const mainApplication = await getMainApplicationAsync(projectRoot);\n  const packagePath = path.dirname(mainApplication.path);\n  const packagePathParts = path.relative(packageRoot, packagePath).split(path.sep).filter(Boolean);\n\n  return packagePathParts.join('.');\n}\n\n// NOTE(brentvatne): this assumes that our MainApplication.java file is in the root of the package\n// this makes sense for standard react-native projects but may not apply in customized projects, so if\n// we want this to be runnable in any app we need to handle other possibilities\nexport async function renamePackageOnDisk(\n  config: Pick<ExpoConfig, 'android'>,\n  projectRoot: string\n) {\n  const newPackageName = getPackage(config);\n  if (newPackageName === null) {\n    return;\n  }\n\n  const currentPackageName = await getCurrentPackageName(projectRoot);\n  if (currentPackageName === newPackageName) {\n    return;\n  }\n\n  // Set up our paths\n  const packageRoot = getPackageRoot(projectRoot);\n  const currentPackagePath = path.join(packageRoot, ...currentPackageName.split('.'));\n  const newPackagePath = path.join(packageRoot, ...newPackageName.split('.'));\n\n  // Create the new directory\n  fs.mkdirpSync(newPackagePath);\n\n  // Move everything from the old directory over\n  globSync('**/*', { cwd: currentPackagePath }).forEach(relativePath => {\n    const filepath = path.join(currentPackagePath, relativePath);\n    if (fs.lstatSync(filepath).isFile()) {\n      fs.moveSync(filepath, path.join(newPackagePath, relativePath));\n    } else {\n      fs.mkdirpSync(filepath);\n    }\n  });\n\n  // Remove the old directory recursively from com/old/package to com/old and com,\n  // as long as the directories are empty\n  const oldPathParts = currentPackageName.split('.');\n  while (oldPathParts.length) {\n    const pathToCheck = path.join(packageRoot, ...oldPathParts);\n    try {\n      const files = fs.readdirSync(pathToCheck);\n      if (files.length === 0) {\n        fs.rmdirSync(pathToCheck);\n      }\n    } finally {\n      oldPathParts.pop();\n    }\n  }\n\n  const filesToUpdate = [\n    ...globSync('**/*', { cwd: newPackagePath, absolute: true }),\n    path.join(projectRoot, 'android', 'app', 'BUCK'),\n  ];\n  // Replace all occurrences of the path in the project\n  filesToUpdate.forEach((filepath: string) => {\n    try {\n      if (fs.lstatSync(filepath).isFile()) {\n        let contents = fs.readFileSync(filepath).toString();\n        contents = contents.replace(new RegExp(currentPackageName, 'g'), newPackageName);\n        fs.writeFileSync(filepath, contents);\n      }\n    } catch {}\n  });\n}\n\nexport function setPackageInBuildGradle(config: Pick<ExpoConfig, 'android'>, buildGradle: string) {\n  const packageName = getPackage(config);\n  if (packageName === null) {\n    return buildGradle;\n  }\n\n  const pattern = new RegExp(`applicationId ['\"].*['\"]`);\n  return buildGradle.replace(pattern, `applicationId '${packageName}'`);\n}\n\nexport function setPackageInAndroidManifest(\n  config: Pick<ExpoConfig, 'android'>,\n  androidManifest: AndroidManifest\n) {\n  const packageName = getPackage(config);\n\n  if (packageName) {\n    androidManifest.manifest.$.package = packageName;\n  } else {\n    delete androidManifest.manifest.$.package;\n  }\n\n  return androidManifest;\n}\n\nexport async function getApplicationIdAsync(projectDir: string): Promise<string | null> {\n  const buildGradlePath = getAppBuildGradle(projectDir);\n  if (!(await fs.pathExists(buildGradlePath))) {\n    return null;\n  }\n  const buildGradle = await fs.readFile(buildGradlePath, 'utf8');\n  const matchResult = buildGradle.match(/applicationId ['\"](.*)['\"]/);\n  // TODO add fallback for legacy cases to read from AndroidManifest.xml\n  return matchResult?.[1] ?? null;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}