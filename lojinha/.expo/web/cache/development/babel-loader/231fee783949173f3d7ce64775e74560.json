{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.updateEnvironment = exports.setEnvironment = void 0;\n\nvar _executeWinCommand = require(\"./executeWinCommand\");\n\nvar setEnvironment = function setEnvironment(variable, value) {\n  var command;\n  return _regeneratorRuntime.async(function setEnvironment$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          command = \"setx \" + variable + \" \\\"\" + value + \"\\\"\";\n          _context.next = 3;\n          return _regeneratorRuntime.awrap((0, _executeWinCommand.executeCommand)(command));\n\n        case 3:\n          process.env[variable] = value;\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexports.setEnvironment = setEnvironment;\n\nvar updateEnvironment = function updateEnvironment(variable, value) {\n  var envVariable, command;\n  return _regeneratorRuntime.async(function updateEnvironment$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          envVariable = process.env[variable] || '';\n\n          if (!(variable === 'PATH' && envVariable.includes(value + \";\"))) {\n            _context2.next = 3;\n            break;\n          }\n\n          return _context2.abrupt(\"return\");\n\n        case 3:\n          command = \"for /f \\\"skip=2 tokens=3*\\\" %a in ('reg query HKCU\\\\Environment /v \" + variable + \"') do @if [%b]==[] ( @setx \" + variable + \" \\\"\" + value + \";%~a\\\" ) else ( @setx \" + variable + \" \\\"\" + value + \";%~a %~b\\\" )\\n  \";\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap((0, _executeWinCommand.executeCommand)(command));\n\n        case 6:\n          process.env[variable] = \"\" + process.env[variable] + value + \";\";\n\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexports.updateEnvironment = updateEnvironment;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli/build/tools/windows/environmentVariables.js"],"names":["Object","defineProperty","exports","value","updateEnvironment","setEnvironment","_executeWinCommand","require","variable","command","executeCommand","process","env","envVariable","includes"],"mappings":"AAAA;;;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,iBAAR,GAA4BF,OAAO,CAACG,cAAR,GAAyB,KAAK,CAA1D;;AAEA,IAAIC,kBAAkB,GAAGC,OAAO,uBAAhC;;AAKA,IAAMF,cAAc,GAAG,SAAjBA,cAAiB,CAAOG,QAAP,EAAiBL,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEfM,UAAAA,OAFe,aAEGD,QAFH,WAEgBL,KAFhB;AAAA;AAAA,2CAGf,CAAC,GAAGG,kBAAkB,CAACI,cAAvB,EAAuCD,OAAvC,CAHe;;AAAA;AAIrBE,UAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ,IAAwBL,KAAxB;;AAJqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;;AAcAD,OAAO,CAACG,cAAR,GAAyBA,cAAzB;;AAEA,IAAMD,iBAAiB,GAAG,SAApBA,iBAAoB,CAAOI,QAAP,EAAiBL,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAIlBU,UAAAA,WAJkB,GAIJF,OAAO,CAACC,GAAR,CAAYJ,QAAZ,KAAyB,EAJrB;;AAAA,gBAMpBA,QAAQ,KAAK,MAAb,IAAuBK,WAAW,CAACC,QAAZ,CAAwBX,KAAxB,OANH;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAWlBM,UAAAA,OAXkB,2EAW4DD,QAX5D,mCAWkGA,QAXlG,WAW+GL,KAX/G,8BAW4IK,QAX5I,WAWyJL,KAXzJ;AAAA;AAAA,2CAalB,CAAC,GAAGG,kBAAkB,CAACI,cAAvB,EAAuCD,OAAvC,CAbkB;;AAAA;AAcxBE,UAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ,SAA2BG,OAAO,CAACC,GAAR,CAAYJ,QAAZ,CAA3B,GAAmDL,KAAnD;;AAdwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA1B;;AAiBAD,OAAO,CAACE,iBAAR,GAA4BA,iBAA5B","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.updateEnvironment = exports.setEnvironment = void 0;\n\nvar _executeWinCommand = require(\"./executeWinCommand\");\n\n/**\n * Creates a new variable in the user's environment\n */\nconst setEnvironment = async (variable, value) => {\n  // https://superuser.com/a/601034\n  const command = `setx ${variable} \"${value}\"`;\n  await (0, _executeWinCommand.executeCommand)(command);\n  process.env[variable] = value;\n};\n/**\n * Prepends the given `value` to the user's environment `variable`.\n * @param {string} variable The environment variable to modify\n * @param {string} value The value to add to the variable\n * @returns {Promise<void>}\n */\n\n\nexports.setEnvironment = setEnvironment;\n\nconst updateEnvironment = async (variable, value) => {\n  // Avoid adding the value multiple times to PATH\n  // Need to do the following to avoid TSLint complaining about possible\n  // undefined values even if I check before via `typeof` or another way\n  const envVariable = process.env[variable] || '';\n\n  if (variable === 'PATH' && envVariable.includes(`${value};`)) {\n    return;\n  } // https://superuser.com/a/601034\n\n\n  const command = `for /f \"skip=2 tokens=3*\" %a in ('reg query HKCU\\\\Environment /v ${variable}') do @if [%b]==[] ( @setx ${variable} \"${value};%~a\" ) else ( @setx ${variable} \"${value};%~a %~b\" )\n  `;\n  await (0, _executeWinCommand.executeCommand)(command);\n  process.env[variable] = `${process.env[variable]}${value};`;\n};\n\nexports.updateEnvironment = updateEnvironment;\n\n//# sourceMappingURL=environmentVariables.js.map"]},"metadata":{},"sourceType":"script"}