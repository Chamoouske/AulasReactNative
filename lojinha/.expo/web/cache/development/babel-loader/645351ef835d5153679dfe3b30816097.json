{"ast":null,"code":"export {};","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@expo/configure-splash-screen/build/validators/types.d.ts"],"names":[],"mappings":"AAwBA","sourcesContent":["/**\n * Convert the given type into JSON-friendly equivalent that have the same structure,\n * but for any key the value can either be string | number | boolean.\n */\nexport declare type JsonShape<T> = IsNever<T, never, SNB | (T extends any[] ? JsonShape<T[number]>[] : T extends object ? {\n    [P in keyof T]+?: JsonShape<T[P]>;\n} : never)>;\n/**\n * Like Required but recursive for object properties\n */\nexport declare type DeepRequired<T> = T extends Primitive ? NonNullable<T> : T extends object ? {\n    [K in keyof T]-?: DeepRequired<T[K]>;\n} : NonNullable<T>;\n/**\n * The very same as keyof, but does not count in keys of primitives and arrays (e.g. will not return String.toUpperCase)\n */\nexport declare type NonPrimitiveAndNonArrayKeys<T> = T extends SNB | any[] ? never : keyof T;\n/**\n * @see https://github.com/microsoft/TypeScript/issues/23182\n */\nexport declare type IsNever<T, Positive, Negative> = [T] extends [never] ? Positive : Negative;\nexport declare type OptionalPromise<T> = Promise<T> | T;\ndeclare type SNB = string | number | boolean;\ndeclare type Primitive = SNB | bigint | symbol | null | undefined;\nexport {};\n"]},"metadata":{},"sourceType":"module"}