{"ast":null,"code":"'use strict';\n\nrequire('shelljs/global');\n\nvar argv = require('yargs').argv;\n\nvar numberOfMaxWorkers = argv.maxWorkers || 1;\nvar exitCode;\nvar JEST_BINARY = argv.jestBinary || './node_modules/.bin/jest';\nvar YARN_BINARY = argv.yarnBinary || 'yarn';\n\nfunction describe(message) {\n  echo(\"\\n\\n>>>>> \" + message + \"\\n\\n\\n\");\n}\n\ntry {\n  echo('Executing JavaScript tests');\n  describe('Test: eslint');\n\n  if (exec(YARN_BINARY + \" run lint\").code) {\n    echo('Failed to run eslint.');\n    exitCode = 1;\n    throw Error(exitCode);\n  }\n\n  describe('Test: Flow check (iOS)');\n\n  if (exec(YARN_BINARY + \" run flow-check-ios\").code) {\n    echo('Failed to run flow.');\n    exitCode = 1;\n    throw Error(exitCode);\n  }\n\n  describe('Test: Flow check (Android)');\n\n  if (exec(YARN_BINARY + \" run flow-check-android\").code) {\n    echo('Failed to run flow.');\n    exitCode = 1;\n    throw Error(exitCode);\n  }\n\n  describe('Test: Jest');\n\n  if (exec(JEST_BINARY + \" --maxWorkers=\" + numberOfMaxWorkers + \" --ci --reporters=\\\"default\\\" --reporters=\\\"jest-junit\\\"\").code) {\n    echo('Failed to run JavaScript tests.');\n    echo('Most likely the code is broken.');\n    exitCode = 1;\n    throw Error(exitCode);\n  }\n\n  exitCode = 0;\n} finally {\n  echo('Finished.');\n}\n\nexit(exitCode);","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/scripts/run-ci-javascript-tests.js"],"names":["require","argv","numberOfMaxWorkers","maxWorkers","exitCode","JEST_BINARY","jestBinary","YARN_BINARY","yarnBinary","describe","message","echo","exec","code","Error","exit"],"mappings":"AASA;;AAUAA,OAAO,CAAC,gBAAD,CAAP;;AAEA,IAAMC,IAAI,GAAGD,OAAO,CAAC,OAAD,CAAP,CAAiBC,IAA9B;;AAEA,IAAMC,kBAAkB,GAAGD,IAAI,CAACE,UAAL,IAAmB,CAA9C;AACA,IAAIC,QAAJ;AAEA,IAAMC,WAAW,GAAGJ,IAAI,CAACK,UAAL,IAAmB,0BAAvC;AACA,IAAMC,WAAW,GAAGN,IAAI,CAACO,UAAL,IAAmB,MAAvC;;AAEA,SAASC,QAAT,CAAkBC,OAAlB,EAA2B;AACzBC,EAAAA,IAAI,gBAAcD,OAAd,YAAJ;AACD;;AAED,IAAI;AACFC,EAAAA,IAAI,CAAC,4BAAD,CAAJ;AAEAF,EAAAA,QAAQ,CAAC,cAAD,CAAR;;AACA,MAAIG,IAAI,CAAIL,WAAJ,eAAJ,CAAgCM,IAApC,EAA0C;AACxCF,IAAAA,IAAI,CAAC,uBAAD,CAAJ;AACAP,IAAAA,QAAQ,GAAG,CAAX;AACA,UAAMU,KAAK,CAACV,QAAD,CAAX;AACD;;AAEDK,EAAAA,QAAQ,CAAC,wBAAD,CAAR;;AACA,MAAIG,IAAI,CAAIL,WAAJ,yBAAJ,CAA0CM,IAA9C,EAAoD;AAClDF,IAAAA,IAAI,CAAC,qBAAD,CAAJ;AACAP,IAAAA,QAAQ,GAAG,CAAX;AACA,UAAMU,KAAK,CAACV,QAAD,CAAX;AACD;;AACDK,EAAAA,QAAQ,CAAC,4BAAD,CAAR;;AACA,MAAIG,IAAI,CAAIL,WAAJ,6BAAJ,CAA8CM,IAAlD,EAAwD;AACtDF,IAAAA,IAAI,CAAC,qBAAD,CAAJ;AACAP,IAAAA,QAAQ,GAAG,CAAX;AACA,UAAMU,KAAK,CAACV,QAAD,CAAX;AACD;;AAEDK,EAAAA,QAAQ,CAAC,YAAD,CAAR;;AACA,MACEG,IAAI,CACCP,WADD,sBAC6BH,kBAD7B,8DAAJ,CAEEW,IAHJ,EAIE;AACAF,IAAAA,IAAI,CAAC,iCAAD,CAAJ;AACAA,IAAAA,IAAI,CAAC,iCAAD,CAAJ;AACAP,IAAAA,QAAQ,GAAG,CAAX;AACA,UAAMU,KAAK,CAACV,QAAD,CAAX;AACD;;AAEDA,EAAAA,QAAQ,GAAG,CAAX;AACD,CApCD,SAoCU;AAERO,EAAAA,IAAI,CAAC,WAAD,CAAJ;AACD;;AACDI,IAAI,CAACX,QAAD,CAAJ","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\n'use strict';\n\n/**\n * This script runs JavaScript tests.\n * Available arguments:\n * --maxWorkers [num] - how many workers, default 1\n * --jestBinary [path] - path to jest binary, defaults to local node modules\n * --yarnBinary [path] - path to yarn binary, defaults to yarn\n */\n/*eslint-disable no-undef */\nrequire('shelljs/global');\n\nconst argv = require('yargs').argv;\n\nconst numberOfMaxWorkers = argv.maxWorkers || 1;\nlet exitCode;\n\nconst JEST_BINARY = argv.jestBinary || './node_modules/.bin/jest';\nconst YARN_BINARY = argv.yarnBinary || 'yarn';\n\nfunction describe(message) {\n  echo(`\\n\\n>>>>> ${message}\\n\\n\\n`);\n}\n\ntry {\n  echo('Executing JavaScript tests');\n\n  describe('Test: eslint');\n  if (exec(`${YARN_BINARY} run lint`).code) {\n    echo('Failed to run eslint.');\n    exitCode = 1;\n    throw Error(exitCode);\n  }\n\n  describe('Test: Flow check (iOS)');\n  if (exec(`${YARN_BINARY} run flow-check-ios`).code) {\n    echo('Failed to run flow.');\n    exitCode = 1;\n    throw Error(exitCode);\n  }\n  describe('Test: Flow check (Android)');\n  if (exec(`${YARN_BINARY} run flow-check-android`).code) {\n    echo('Failed to run flow.');\n    exitCode = 1;\n    throw Error(exitCode);\n  }\n\n  describe('Test: Jest');\n  if (\n    exec(\n      `${JEST_BINARY} --maxWorkers=${numberOfMaxWorkers} --ci --reporters=\"default\" --reporters=\"jest-junit\"`,\n    ).code\n  ) {\n    echo('Failed to run JavaScript tests.');\n    echo('Most likely the code is broken.');\n    exitCode = 1;\n    throw Error(exitCode);\n  }\n\n  exitCode = 0;\n} finally {\n  // Do cleanup here\n  echo('Finished.');\n}\nexit(exitCode);\n\n/*eslint-enable no-undef */\n"]},"metadata":{},"sourceType":"script"}