{"ast":null,"code":"'use strict';\n\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native-web/src/exports/TouchableHighlight/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport { useCallback, useMemo, useState, useRef } from 'react';\nimport useMergeRefs from \"../../modules/useMergeRefs\";\nimport usePressEvents from \"../../hooks/usePressEvents\";\nimport StyleSheet from \"../StyleSheet\";\nimport View from \"../View\";\n\nfunction createExtraStyles(activeOpacity, underlayColor) {\n  return {\n    child: {\n      opacity: activeOpacity != null ? activeOpacity : 0.85\n    },\n    underlay: {\n      backgroundColor: underlayColor === undefined ? 'black' : underlayColor\n    }\n  };\n}\n\nfunction hasPressHandler(props) {\n  return props.onPress != null || props.onPressIn != null || props.onPressOut != null || props.onLongPress != null;\n}\n\nfunction TouchableHighlight(props, forwardedRef) {\n  var accessible = props.accessible,\n      activeOpacity = props.activeOpacity,\n      children = props.children,\n      delayPressIn = props.delayPressIn,\n      delayPressOut = props.delayPressOut,\n      delayLongPress = props.delayLongPress,\n      disabled = props.disabled,\n      focusable = props.focusable,\n      onHideUnderlay = props.onHideUnderlay,\n      onLongPress = props.onLongPress,\n      onPress = props.onPress,\n      onPressIn = props.onPressIn,\n      onPressOut = props.onPressOut,\n      onShowUnderlay = props.onShowUnderlay,\n      rejectResponderTermination = props.rejectResponderTermination,\n      style = props.style,\n      testOnly_pressed = props.testOnly_pressed,\n      underlayColor = props.underlayColor,\n      rest = _objectWithoutProperties(props, [\"accessible\", \"activeOpacity\", \"children\", \"delayPressIn\", \"delayPressOut\", \"delayLongPress\", \"disabled\", \"focusable\", \"onHideUnderlay\", \"onLongPress\", \"onPress\", \"onPressIn\", \"onPressOut\", \"onShowUnderlay\", \"rejectResponderTermination\", \"style\", \"testOnly_pressed\", \"underlayColor\"]);\n\n  var hostRef = useRef(null);\n  var setRef = useMergeRefs(forwardedRef, hostRef);\n\n  var _useState = useState(testOnly_pressed === true ? createExtraStyles(activeOpacity, underlayColor) : null),\n      _useState2 = _slicedToArray(_useState, 2),\n      extraStyles = _useState2[0],\n      setExtraStyles = _useState2[1];\n\n  var showUnderlay = useCallback(function () {\n    if (!hasPressHandler(props)) {\n      return;\n    }\n\n    setExtraStyles(createExtraStyles(activeOpacity, underlayColor));\n\n    if (onShowUnderlay != null) {\n      onShowUnderlay();\n    }\n  }, [activeOpacity, onShowUnderlay, props, underlayColor]);\n  var hideUnderlay = useCallback(function () {\n    if (testOnly_pressed === true) {\n      return;\n    }\n\n    if (hasPressHandler(props)) {\n      setExtraStyles(null);\n\n      if (onHideUnderlay != null) {\n        onHideUnderlay();\n      }\n    }\n  }, [onHideUnderlay, props, testOnly_pressed]);\n  var pressConfig = useMemo(function () {\n    return {\n      cancelable: !rejectResponderTermination,\n      disabled: disabled,\n      delayLongPress: delayLongPress,\n      delayPressStart: delayPressIn,\n      delayPressEnd: delayPressOut,\n      onLongPress: onLongPress,\n      onPress: onPress,\n      onPressStart: function onPressStart(event) {\n        showUnderlay();\n\n        if (onPressIn != null) {\n          onPressIn(event);\n        }\n      },\n      onPressEnd: function onPressEnd(event) {\n        hideUnderlay();\n\n        if (onPressOut != null) {\n          onPressOut(event);\n        }\n      }\n    };\n  }, [delayLongPress, delayPressIn, delayPressOut, disabled, onLongPress, onPress, onPressIn, onPressOut, rejectResponderTermination, showUnderlay, hideUnderlay]);\n  var pressEventHandlers = usePressEvents(hostRef, pressConfig);\n  var child = React.Children.only(children);\n  return React.createElement(View, _extends({}, rest, pressEventHandlers, {\n    accessibilityState: _objectSpread({\n      disabled: disabled\n    }, props.accessibilityState),\n    accessible: accessible !== false,\n    focusable: focusable !== false && onPress !== undefined,\n    ref: setRef,\n    style: [styles.root, style, !disabled && styles.actionable, extraStyles && extraStyles.underlay],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 5\n    }\n  }), React.cloneElement(child, {\n    style: StyleSheet.compose(child.props.style, extraStyles && extraStyles.child)\n  }));\n}\n\nvar styles = StyleSheet.create({\n  root: {\n    userSelect: 'none'\n  },\n  actionable: {\n    cursor: 'pointer',\n    touchAction: 'manipulation'\n  }\n});\nvar MemoedTouchableHighlight = React.memo(React.forwardRef(TouchableHighlight));\nMemoedTouchableHighlight.displayName = 'TouchableHighlight';\nexport default MemoedTouchableHighlight;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native-web/src/exports/TouchableHighlight/index.js"],"names":["React","useCallback","useMemo","useState","useRef","useMergeRefs","usePressEvents","StyleSheet","View","createExtraStyles","activeOpacity","underlayColor","child","opacity","underlay","backgroundColor","undefined","hasPressHandler","props","onPress","onPressIn","onPressOut","onLongPress","TouchableHighlight","forwardedRef","accessible","children","delayPressIn","delayPressOut","delayLongPress","disabled","focusable","onHideUnderlay","onShowUnderlay","rejectResponderTermination","style","testOnly_pressed","rest","hostRef","setRef","extraStyles","setExtraStyles","showUnderlay","hideUnderlay","pressConfig","cancelable","delayPressStart","delayPressEnd","onPressStart","event","onPressEnd","pressEventHandlers","Children","only","accessibilityState","styles","root","actionable","cloneElement","compose","create","userSelect","cursor","touchAction","MemoedTouchableHighlight","memo","forwardRef","displayName"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport type { ColorValue } from '../../types';\nimport type { Props as TouchableWithoutFeedbackProps } from '../TouchableWithoutFeedback';\nimport type { ViewProps } from '../View';\n\nimport * as React from 'react';\nimport { useCallback, useMemo, useState, useRef } from 'react';\nimport useMergeRefs from '../../modules/useMergeRefs';\nimport usePressEvents from '../../hooks/usePressEvents';\nimport StyleSheet from '../StyleSheet';\nimport View from '../View';\n\ntype ViewStyle = $PropertyType<ViewProps, 'style'>;\n\ntype Props = $ReadOnly<{|\n  ...TouchableWithoutFeedbackProps,\n  activeOpacity?: ?number,\n  onHideUnderlay?: ?() => void,\n  onShowUnderlay?: ?() => void,\n  style?: ViewStyle,\n  testOnly_pressed?: ?boolean,\n  underlayColor?: ?ColorValue\n|}>;\n\ntype ExtraStyles = $ReadOnly<{|\n  child: ViewStyle,\n  underlay: ViewStyle\n|}>;\n\nfunction createExtraStyles(activeOpacity, underlayColor): ExtraStyles {\n  return {\n    child: { opacity: activeOpacity ?? 0.85 },\n    underlay: {\n      backgroundColor: underlayColor === undefined ? 'black' : underlayColor\n    }\n  };\n}\n\nfunction hasPressHandler(props): boolean {\n  return (\n    props.onPress != null ||\n    props.onPressIn != null ||\n    props.onPressOut != null ||\n    props.onLongPress != null\n  );\n}\n\n/**\n * A wrapper for making views respond properly to touches.\n * On press down, the opacity of the wrapped view is decreased, which allows\n * the underlay color to show through, darkening or tinting the view.\n *\n * The underlay comes from wrapping the child in a new View, which can affect\n * layout, and sometimes cause unwanted visual artifacts if not used correctly,\n * for example if the backgroundColor of the wrapped view isn't explicitly set\n * to an opaque color.\n *\n * TouchableHighlight must have one child (not zero or more than one).\n * If you wish to have several child components, wrap them in a View.\n */\nfunction TouchableHighlight(props: Props, forwardedRef): React.Node {\n  const {\n    accessible,\n    activeOpacity,\n    children,\n    delayPressIn,\n    delayPressOut,\n    delayLongPress,\n    disabled,\n    focusable,\n    onHideUnderlay,\n    onLongPress,\n    onPress,\n    onPressIn,\n    onPressOut,\n    onShowUnderlay,\n    rejectResponderTermination,\n    style,\n    testOnly_pressed,\n    underlayColor,\n    ...rest\n  } = props;\n\n  const hostRef = useRef(null);\n  const setRef = useMergeRefs(forwardedRef, hostRef);\n\n  const [extraStyles, setExtraStyles] = useState(\n    testOnly_pressed === true ? createExtraStyles(activeOpacity, underlayColor) : null\n  );\n\n  const showUnderlay = useCallback(() => {\n    if (!hasPressHandler(props)) {\n      return;\n    }\n    setExtraStyles(createExtraStyles(activeOpacity, underlayColor));\n    if (onShowUnderlay != null) {\n      onShowUnderlay();\n    }\n  }, [activeOpacity, onShowUnderlay, props, underlayColor]);\n\n  const hideUnderlay = useCallback(() => {\n    if (testOnly_pressed === true) {\n      return;\n    }\n    if (hasPressHandler(props)) {\n      setExtraStyles(null);\n      if (onHideUnderlay != null) {\n        onHideUnderlay();\n      }\n    }\n  }, [onHideUnderlay, props, testOnly_pressed]);\n\n  const pressConfig = useMemo(\n    () => ({\n      cancelable: !rejectResponderTermination,\n      disabled,\n      delayLongPress,\n      delayPressStart: delayPressIn,\n      delayPressEnd: delayPressOut,\n      onLongPress,\n      onPress,\n      onPressStart(event) {\n        showUnderlay();\n        if (onPressIn != null) {\n          onPressIn(event);\n        }\n      },\n      onPressEnd(event) {\n        hideUnderlay();\n        if (onPressOut != null) {\n          onPressOut(event);\n        }\n      }\n    }),\n    [\n      delayLongPress,\n      delayPressIn,\n      delayPressOut,\n      disabled,\n      onLongPress,\n      onPress,\n      onPressIn,\n      onPressOut,\n      rejectResponderTermination,\n      showUnderlay,\n      hideUnderlay\n    ]\n  );\n\n  const pressEventHandlers = usePressEvents(hostRef, pressConfig);\n\n  const child = React.Children.only(children);\n\n  return (\n    <View\n      {...rest}\n      {...pressEventHandlers}\n      accessibilityState={{\n        disabled,\n        ...props.accessibilityState\n      }}\n      accessible={accessible !== false}\n      focusable={focusable !== false && onPress !== undefined}\n      ref={setRef}\n      style={[\n        styles.root,\n        style,\n        !disabled && styles.actionable,\n        extraStyles && extraStyles.underlay\n      ]}\n    >\n      {React.cloneElement(child, {\n        style: StyleSheet.compose(\n          child.props.style,\n          extraStyles && extraStyles.child\n        )\n      })}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    userSelect: 'none'\n  },\n  actionable: {\n    cursor: 'pointer',\n    touchAction: 'manipulation'\n  }\n});\n\nconst MemoedTouchableHighlight = React.memo(React.forwardRef(TouchableHighlight));\nMemoedTouchableHighlight.displayName = 'TouchableHighlight';\n\nexport default (MemoedTouchableHighlight: React.AbstractComponent<\n  Props,\n  React.ElementRef<typeof View>\n>);\n"]},"metadata":{},"sourceType":"module"}