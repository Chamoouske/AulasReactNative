{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getLatestRelease;\n\nfunction _semver() {\n  var data = _interopRequireDefault(require(\"semver\"));\n\n  _semver = function _semver() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _releaseCacheManager = _interopRequireDefault(require(\"./releaseCacheManager\"));\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getLatestRelease(name, currentVersion) {\n  var cachedLatest, aWeek, lastChecked, now, eTag, latestVersion;\n  return _regeneratorRuntime.async(function getLatestRelease$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _cliTools().logger.debug('Checking for a newer version of React Native');\n\n          _context.prev = 1;\n\n          _cliTools().logger.debug(\"Current version: \" + currentVersion);\n\n          cachedLatest = _releaseCacheManager.default.get(name, 'latestVersion');\n\n          if (cachedLatest) {\n            _cliTools().logger.debug(\"Cached release version: \" + cachedLatest);\n          }\n\n          aWeek = 7 * 24 * 60 * 60 * 1000;\n          lastChecked = _releaseCacheManager.default.get(name, 'lastChecked');\n          now = new Date();\n\n          if (!(lastChecked && Number(now) - Number(new Date(lastChecked)) < aWeek)) {\n            _context.next = 11;\n            break;\n          }\n\n          _cliTools().logger.debug('Cached release is still recent, skipping remote check');\n\n          return _context.abrupt(\"return\");\n\n        case 11:\n          _cliTools().logger.debug('Checking for newer releases on GitHub');\n\n          eTag = _releaseCacheManager.default.get(name, 'eTag');\n          _context.next = 15;\n          return _regeneratorRuntime.awrap(getLatestRnDiffPurgeVersion(name, eTag));\n\n        case 15:\n          latestVersion = _context.sent;\n\n          _cliTools().logger.debug(\"Latest release: \" + latestVersion);\n\n          if (!(_semver().default.compare(latestVersion, currentVersion) === 1 && !_semver().default.prerelease(latestVersion))) {\n            _context.next = 19;\n            break;\n          }\n\n          return _context.abrupt(\"return\", {\n            version: latestVersion,\n            changelogUrl: buildChangelogUrl(latestVersion),\n            diffUrl: buildDiffUrl(currentVersion)\n          });\n\n        case 19:\n          _context.next = 25;\n          break;\n\n        case 21:\n          _context.prev = 21;\n          _context.t0 = _context[\"catch\"](1);\n\n          _cliTools().logger.debug('Something went wrong with remote version checking, moving on');\n\n          _cliTools().logger.debug(_context.t0);\n\n        case 25:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[1, 21]], Promise);\n}\n\nfunction buildChangelogUrl(version) {\n  return \"https://github.com/facebook/react-native/releases/tag/v\" + version;\n}\n\nfunction buildDiffUrl(version) {\n  return \"https://react-native-community.github.io/upgrade-helper/?from=\" + version;\n}\n\nfunction getLatestRnDiffPurgeVersion(name, eTag) {\n  var options, _await, data, status, headers, body, latestVersion, eTagHeader, _latestVersion;\n\n  return _regeneratorRuntime.async(function getLatestRnDiffPurgeVersion$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          options = {\n            headers: {\n              'User-Agent': 'React-Native-CLI'\n            }\n          };\n\n          if (eTag) {\n            options.headers['If-None-Match'] = eTag;\n          }\n\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap((0, _cliTools().fetch)('https://api.github.com/repos/react-native-community/rn-diff-purge/tags', options));\n\n        case 4:\n          _await = _context2.sent;\n          data = _await.data;\n          status = _await.status;\n          headers = _await.headers;\n\n          if (!(status === 200)) {\n            _context2.next = 14;\n            break;\n          }\n\n          body = data;\n          latestVersion = body[0].name.substring(8);\n          eTagHeader = headers.get('eTag');\n\n          if (!_semver().default.prerelease(latestVersion) && eTagHeader) {\n            _cliTools().logger.debug(\"Saving \" + eTagHeader + \" to cache\");\n\n            _releaseCacheManager.default.set(name, 'eTag', eTagHeader);\n\n            _releaseCacheManager.default.set(name, 'latestVersion', latestVersion);\n          }\n\n          return _context2.abrupt(\"return\", latestVersion);\n\n        case 14:\n          if (!(status === 304)) {\n            _context2.next = 18;\n            break;\n          }\n\n          _latestVersion = _releaseCacheManager.default.get(name, 'latestVersion');\n\n          if (!_latestVersion) {\n            _context2.next = 18;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", _latestVersion);\n\n        case 18:\n          return _context2.abrupt(\"return\", '0.0.0');\n\n        case 19:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli/build/tools/releaseChecker/getLatestRelease.js"],"names":["Object","defineProperty","exports","value","default","getLatestRelease","_semver","data","_interopRequireDefault","require","_releaseCacheManager","_cliTools","obj","__esModule","name","currentVersion","logger","debug","cachedLatest","get","aWeek","lastChecked","now","Date","Number","eTag","getLatestRnDiffPurgeVersion","latestVersion","compare","prerelease","version","changelogUrl","buildChangelogUrl","diffUrl","buildDiffUrl","options","headers","fetch","status","body","substring","eTagHeader","set"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getLatestRelease;\n\nfunction _semver() {\n  const data = _interopRequireDefault(require(\"semver\"));\n\n  _semver = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _releaseCacheManager = _interopRequireDefault(require(\"./releaseCacheManager\"));\n\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Checks via GitHub API if there is a newer stable React Native release and,\n * if it exists, returns the release data.\n *\n * If the latest release is not newer or if it's a prerelease, the function\n * will return undefined.\n */\nasync function getLatestRelease(name, currentVersion) {\n  _cliTools().logger.debug('Checking for a newer version of React Native');\n\n  try {\n    _cliTools().logger.debug(`Current version: ${currentVersion}`);\n\n    const cachedLatest = _releaseCacheManager.default.get(name, 'latestVersion');\n\n    if (cachedLatest) {\n      _cliTools().logger.debug(`Cached release version: ${cachedLatest}`);\n    }\n\n    const aWeek = 7 * 24 * 60 * 60 * 1000;\n\n    const lastChecked = _releaseCacheManager.default.get(name, 'lastChecked');\n\n    const now = new Date();\n\n    if (lastChecked && Number(now) - Number(new Date(lastChecked)) < aWeek) {\n      _cliTools().logger.debug('Cached release is still recent, skipping remote check');\n\n      return;\n    }\n\n    _cliTools().logger.debug('Checking for newer releases on GitHub');\n\n    const eTag = _releaseCacheManager.default.get(name, 'eTag');\n\n    const latestVersion = await getLatestRnDiffPurgeVersion(name, eTag);\n\n    _cliTools().logger.debug(`Latest release: ${latestVersion}`);\n\n    if (_semver().default.compare(latestVersion, currentVersion) === 1 && !_semver().default.prerelease(latestVersion)) {\n      return {\n        version: latestVersion,\n        changelogUrl: buildChangelogUrl(latestVersion),\n        diffUrl: buildDiffUrl(currentVersion)\n      };\n    }\n  } catch (e) {\n    _cliTools().logger.debug('Something went wrong with remote version checking, moving on');\n\n    _cliTools().logger.debug(e);\n  }\n}\n\nfunction buildChangelogUrl(version) {\n  return `https://github.com/facebook/react-native/releases/tag/v${version}`;\n}\n\nfunction buildDiffUrl(version) {\n  return `https://react-native-community.github.io/upgrade-helper/?from=${version}`;\n}\n/**\n * Returns the most recent React Native version available to upgrade to.\n */\n\n\nasync function getLatestRnDiffPurgeVersion(name, eTag) {\n  const options = {\n    // https://developer.github.com/v3/#user-agent-required\n    headers: {\n      'User-Agent': 'React-Native-CLI'\n    }\n  };\n\n  if (eTag) {\n    options.headers['If-None-Match'] = eTag;\n  }\n\n  const {\n    data,\n    status,\n    headers\n  } = await (0, _cliTools().fetch)('https://api.github.com/repos/react-native-community/rn-diff-purge/tags', options); // Remote is newer.\n\n  if (status === 200) {\n    const body = data;\n    const latestVersion = body[0].name.substring(8);\n    const eTagHeader = headers.get('eTag'); // Update cache only if newer release is stable.\n\n    if (!_semver().default.prerelease(latestVersion) && eTagHeader) {\n      _cliTools().logger.debug(`Saving ${eTagHeader} to cache`);\n\n      _releaseCacheManager.default.set(name, 'eTag', eTagHeader);\n\n      _releaseCacheManager.default.set(name, 'latestVersion', latestVersion);\n    }\n\n    return latestVersion;\n  } // Cache is still valid.\n\n\n  if (status === 304) {\n    const latestVersion = _releaseCacheManager.default.get(name, 'latestVersion');\n\n    if (latestVersion) {\n      return latestVersion;\n    }\n  } // Should be returned only if something went wrong.\n\n\n  return '0.0.0';\n}\n\n//# sourceMappingURL=getLatestRelease.js.map"]},"metadata":{},"sourceType":"script"}