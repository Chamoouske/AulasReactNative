{"ast":null,"code":"'use strict';\n\nvar ViewabilityHelper = require(\"../ViewabilityHelper\");\n\nvar rowFrames;\nvar data;\n\nfunction getFrameMetrics(index) {\n  var frame = rowFrames[data[index].key];\n  return {\n    length: frame.height,\n    offset: frame.y\n  };\n}\n\nfunction createViewToken(index, isViewable) {\n  return {\n    key: data[index].key,\n    isViewable: isViewable\n  };\n}\n\ndescribe('computeViewableItems', function () {\n  it('returns all 4 entirely visible rows as viewable', function () {\n    var helper = new ViewabilityHelper({\n      viewAreaCoveragePercentThreshold: 50\n    });\n    rowFrames = {\n      a: {\n        y: 0,\n        height: 50\n      },\n      b: {\n        y: 50,\n        height: 50\n      },\n      c: {\n        y: 100,\n        height: 50\n      },\n      d: {\n        y: 150,\n        height: 50\n      }\n    };\n    data = [{\n      key: 'a'\n    }, {\n      key: 'b'\n    }, {\n      key: 'c'\n    }, {\n      key: 'd'\n    }];\n    expect(helper.computeViewableItems(data.length, 0, 200, getFrameMetrics)).toEqual([0, 1, 2, 3]);\n  });\n  it('returns top 2 rows as viewable (1. entirely visible and 2. majority)', function () {\n    var helper = new ViewabilityHelper({\n      viewAreaCoveragePercentThreshold: 50\n    });\n    rowFrames = {\n      a: {\n        y: 0,\n        height: 50\n      },\n      b: {\n        y: 50,\n        height: 150\n      },\n      c: {\n        y: 200,\n        height: 50\n      },\n      d: {\n        y: 250,\n        height: 50\n      }\n    };\n    data = [{\n      key: 'a'\n    }, {\n      key: 'b'\n    }, {\n      key: 'c'\n    }, {\n      key: 'd'\n    }];\n    expect(helper.computeViewableItems(data.length, 0, 200, getFrameMetrics)).toEqual([0, 1]);\n  });\n  it('returns only 2nd row as viewable (majority)', function () {\n    var helper = new ViewabilityHelper({\n      viewAreaCoveragePercentThreshold: 50\n    });\n    rowFrames = {\n      a: {\n        y: 0,\n        height: 50\n      },\n      b: {\n        y: 50,\n        height: 150\n      },\n      c: {\n        y: 200,\n        height: 50\n      },\n      d: {\n        y: 250,\n        height: 50\n      }\n    };\n    data = [{\n      key: 'a'\n    }, {\n      key: 'b'\n    }, {\n      key: 'c'\n    }, {\n      key: 'd'\n    }];\n    expect(helper.computeViewableItems(data.length, 25, 200, getFrameMetrics)).toEqual([1]);\n  });\n  it('handles empty input', function () {\n    var helper = new ViewabilityHelper({\n      viewAreaCoveragePercentThreshold: 50\n    });\n    rowFrames = {};\n    data = [];\n    expect(helper.computeViewableItems(data.length, 0, 200, getFrameMetrics)).toEqual([]);\n  });\n  it('handles different view area coverage percent thresholds', function () {\n    rowFrames = {\n      a: {\n        y: 0,\n        height: 50\n      },\n      b: {\n        y: 50,\n        height: 150\n      },\n      c: {\n        y: 200,\n        height: 500\n      },\n      d: {\n        y: 700,\n        height: 50\n      }\n    };\n    data = [{\n      key: 'a'\n    }, {\n      key: 'b'\n    }, {\n      key: 'c'\n    }, {\n      key: 'd'\n    }];\n    var helper = new ViewabilityHelper({\n      viewAreaCoveragePercentThreshold: 0\n    });\n    expect(helper.computeViewableItems(data.length, 0, 50, getFrameMetrics)).toEqual([0]);\n    expect(helper.computeViewableItems(data.length, 1, 50, getFrameMetrics)).toEqual([0, 1]);\n    expect(helper.computeViewableItems(data.length, 199, 50, getFrameMetrics)).toEqual([1, 2]);\n    expect(helper.computeViewableItems(data.length, 250, 50, getFrameMetrics)).toEqual([2]);\n    helper = new ViewabilityHelper({\n      viewAreaCoveragePercentThreshold: 100\n    });\n    expect(helper.computeViewableItems(data.length, 0, 200, getFrameMetrics)).toEqual([0, 1]);\n    expect(helper.computeViewableItems(data.length, 1, 200, getFrameMetrics)).toEqual([1]);\n    expect(helper.computeViewableItems(data.length, 400, 200, getFrameMetrics)).toEqual([2]);\n    expect(helper.computeViewableItems(data.length, 600, 200, getFrameMetrics)).toEqual([3]);\n    helper = new ViewabilityHelper({\n      viewAreaCoveragePercentThreshold: 10\n    });\n    expect(helper.computeViewableItems(data.length, 30, 200, getFrameMetrics)).toEqual([0, 1, 2]);\n    expect(helper.computeViewableItems(data.length, 31, 200, getFrameMetrics)).toEqual([1, 2]);\n  });\n  it('handles different item visible percent thresholds', function () {\n    rowFrames = {\n      a: {\n        y: 0,\n        height: 50\n      },\n      b: {\n        y: 50,\n        height: 150\n      },\n      c: {\n        y: 200,\n        height: 50\n      },\n      d: {\n        y: 250,\n        height: 50\n      }\n    };\n    data = [{\n      key: 'a'\n    }, {\n      key: 'b'\n    }, {\n      key: 'c'\n    }, {\n      key: 'd'\n    }];\n    var helper = new ViewabilityHelper({\n      itemVisiblePercentThreshold: 0\n    });\n    expect(helper.computeViewableItems(data.length, 0, 50, getFrameMetrics)).toEqual([0]);\n    expect(helper.computeViewableItems(data.length, 1, 50, getFrameMetrics)).toEqual([0, 1]);\n    helper = new ViewabilityHelper({\n      itemVisiblePercentThreshold: 100\n    });\n    expect(helper.computeViewableItems(data.length, 0, 250, getFrameMetrics)).toEqual([0, 1, 2]);\n    expect(helper.computeViewableItems(data.length, 1, 250, getFrameMetrics)).toEqual([1, 2]);\n    helper = new ViewabilityHelper({\n      itemVisiblePercentThreshold: 10\n    });\n    expect(helper.computeViewableItems(data.length, 184, 20, getFrameMetrics)).toEqual([1]);\n    expect(helper.computeViewableItems(data.length, 185, 20, getFrameMetrics)).toEqual([1, 2]);\n    expect(helper.computeViewableItems(data.length, 186, 20, getFrameMetrics)).toEqual([2]);\n  });\n});\ndescribe('onUpdate', function () {\n  it('returns 1 visible row as viewable then scrolls away', function () {\n    var helper = new ViewabilityHelper();\n    rowFrames = {\n      a: {\n        y: 0,\n        height: 50\n      }\n    };\n    data = [{\n      key: 'a'\n    }];\n    var onViewableItemsChanged = jest.fn();\n    helper.onUpdate(data.length, 0, 200, getFrameMetrics, createViewToken, onViewableItemsChanged);\n    expect(onViewableItemsChanged.mock.calls.length).toBe(1);\n    expect(onViewableItemsChanged.mock.calls[0][0]).toEqual({\n      changed: [{\n        isViewable: true,\n        key: 'a'\n      }],\n      viewabilityConfig: {\n        viewAreaCoveragePercentThreshold: 0\n      },\n      viewableItems: [{\n        isViewable: true,\n        key: 'a'\n      }]\n    });\n    helper.onUpdate(data.length, 0, 200, getFrameMetrics, createViewToken, onViewableItemsChanged);\n    expect(onViewableItemsChanged.mock.calls.length).toBe(1);\n    helper.onUpdate(data.length, 100, 200, getFrameMetrics, createViewToken, onViewableItemsChanged);\n    expect(onViewableItemsChanged.mock.calls.length).toBe(2);\n    expect(onViewableItemsChanged.mock.calls[1][0]).toEqual({\n      changed: [{\n        isViewable: false,\n        key: 'a'\n      }],\n      viewabilityConfig: {\n        viewAreaCoveragePercentThreshold: 0\n      },\n      viewableItems: []\n    });\n  });\n  it('returns 1st visible row then 1st and 2nd then just 2nd', function () {\n    var helper = new ViewabilityHelper();\n    rowFrames = {\n      a: {\n        y: 0,\n        height: 200\n      },\n      b: {\n        y: 200,\n        height: 200\n      }\n    };\n    data = [{\n      key: 'a'\n    }, {\n      key: 'b'\n    }];\n    var onViewableItemsChanged = jest.fn();\n    helper.onUpdate(data.length, 0, 200, getFrameMetrics, createViewToken, onViewableItemsChanged);\n    expect(onViewableItemsChanged.mock.calls.length).toBe(1);\n    expect(onViewableItemsChanged.mock.calls[0][0]).toEqual({\n      changed: [{\n        isViewable: true,\n        key: 'a'\n      }],\n      viewabilityConfig: {\n        viewAreaCoveragePercentThreshold: 0\n      },\n      viewableItems: [{\n        isViewable: true,\n        key: 'a'\n      }]\n    });\n    helper.onUpdate(data.length, 100, 200, getFrameMetrics, createViewToken, onViewableItemsChanged);\n    expect(onViewableItemsChanged.mock.calls.length).toBe(2);\n    expect(onViewableItemsChanged.mock.calls[1][0]).toEqual({\n      changed: [{\n        isViewable: true,\n        key: 'b'\n      }],\n      viewabilityConfig: {\n        viewAreaCoveragePercentThreshold: 0\n      },\n      viewableItems: [{\n        isViewable: true,\n        key: 'a'\n      }, {\n        isViewable: true,\n        key: 'b'\n      }]\n    });\n    helper.onUpdate(data.length, 200, 200, getFrameMetrics, createViewToken, onViewableItemsChanged);\n    expect(onViewableItemsChanged.mock.calls.length).toBe(3);\n    expect(onViewableItemsChanged.mock.calls[2][0]).toEqual({\n      changed: [{\n        isViewable: false,\n        key: 'a'\n      }],\n      viewabilityConfig: {\n        viewAreaCoveragePercentThreshold: 0\n      },\n      viewableItems: [{\n        isViewable: true,\n        key: 'b'\n      }]\n    });\n  });\n  it('minimumViewTime delays callback', function () {\n    var helper = new ViewabilityHelper({\n      minimumViewTime: 350,\n      viewAreaCoveragePercentThreshold: 0\n    });\n    rowFrames = {\n      a: {\n        y: 0,\n        height: 200\n      },\n      b: {\n        y: 200,\n        height: 200\n      }\n    };\n    data = [{\n      key: 'a'\n    }, {\n      key: 'b'\n    }];\n    var onViewableItemsChanged = jest.fn();\n    helper.onUpdate(data.length, 0, 200, getFrameMetrics, createViewToken, onViewableItemsChanged);\n    expect(onViewableItemsChanged).not.toBeCalled();\n    jest.runAllTimers();\n    expect(onViewableItemsChanged.mock.calls.length).toBe(1);\n    expect(onViewableItemsChanged.mock.calls[0][0]).toEqual({\n      changed: [{\n        isViewable: true,\n        key: 'a'\n      }],\n      viewabilityConfig: {\n        minimumViewTime: 350,\n        viewAreaCoveragePercentThreshold: 0\n      },\n      viewableItems: [{\n        isViewable: true,\n        key: 'a'\n      }]\n    });\n  });\n  it('minimumViewTime skips briefly visible items', function () {\n    var helper = new ViewabilityHelper({\n      minimumViewTime: 350,\n      viewAreaCoveragePercentThreshold: 0\n    });\n    rowFrames = {\n      a: {\n        y: 0,\n        height: 250\n      },\n      b: {\n        y: 250,\n        height: 200\n      }\n    };\n    data = [{\n      key: 'a'\n    }, {\n      key: 'b'\n    }];\n    var onViewableItemsChanged = jest.fn();\n    helper.onUpdate(data.length, 0, 200, getFrameMetrics, createViewToken, onViewableItemsChanged);\n    helper.onUpdate(data.length, 300, 200, getFrameMetrics, createViewToken, onViewableItemsChanged);\n    jest.runAllTimers();\n    expect(onViewableItemsChanged.mock.calls.length).toBe(1);\n    expect(onViewableItemsChanged.mock.calls[0][0]).toEqual({\n      changed: [{\n        isViewable: true,\n        key: 'b'\n      }],\n      viewabilityConfig: {\n        minimumViewTime: 350,\n        viewAreaCoveragePercentThreshold: 0\n      },\n      viewableItems: [{\n        isViewable: true,\n        key: 'b'\n      }]\n    });\n  });\n  it('waitForInteraction blocks callback until interaction', function () {\n    var helper = new ViewabilityHelper({\n      waitForInteraction: true,\n      viewAreaCoveragePercentThreshold: 0\n    });\n    rowFrames = {\n      a: {\n        y: 0,\n        height: 200\n      },\n      b: {\n        y: 200,\n        height: 200\n      }\n    };\n    data = [{\n      key: 'a'\n    }, {\n      key: 'b'\n    }];\n    var onViewableItemsChanged = jest.fn();\n    helper.onUpdate(data.length, 0, 100, getFrameMetrics, createViewToken, onViewableItemsChanged);\n    expect(onViewableItemsChanged).not.toBeCalled();\n    helper.recordInteraction();\n    helper.onUpdate(data.length, 20, 100, getFrameMetrics, createViewToken, onViewableItemsChanged);\n    expect(onViewableItemsChanged.mock.calls.length).toBe(1);\n    expect(onViewableItemsChanged.mock.calls[0][0]).toEqual({\n      changed: [{\n        isViewable: true,\n        key: 'a'\n      }],\n      viewabilityConfig: {\n        waitForInteraction: true,\n        viewAreaCoveragePercentThreshold: 0\n      },\n      viewableItems: [{\n        isViewable: true,\n        key: 'a'\n      }]\n    });\n  });\n  it('returns the right visible row after the underlying data changed', function () {\n    var helper = new ViewabilityHelper();\n    rowFrames = {\n      a: {\n        y: 0,\n        height: 200\n      },\n      b: {\n        y: 200,\n        height: 200\n      }\n    };\n    data = [{\n      key: 'a'\n    }, {\n      key: 'b'\n    }];\n    var onViewableItemsChanged = jest.fn();\n    helper.onUpdate(data.length, 0, 200, getFrameMetrics, createViewToken, onViewableItemsChanged);\n    expect(onViewableItemsChanged.mock.calls.length).toBe(1);\n    expect(onViewableItemsChanged.mock.calls[0][0]).toEqual({\n      changed: [{\n        isViewable: true,\n        key: 'a'\n      }],\n      viewabilityConfig: {\n        viewAreaCoveragePercentThreshold: 0\n      },\n      viewableItems: [{\n        isViewable: true,\n        key: 'a'\n      }]\n    });\n    rowFrames = {\n      c: {\n        y: 0,\n        height: 200\n      },\n      a: {\n        y: 200,\n        height: 200\n      },\n      b: {\n        y: 400,\n        height: 200\n      }\n    };\n    data = [{\n      key: 'c'\n    }, {\n      key: 'a'\n    }, {\n      key: 'b'\n    }];\n    helper.resetViewableIndices();\n    helper.onUpdate(data.length, 0, 200, getFrameMetrics, createViewToken, onViewableItemsChanged);\n    expect(onViewableItemsChanged.mock.calls.length).toBe(2);\n    expect(onViewableItemsChanged.mock.calls[1][0]).toEqual({\n      changed: [{\n        isViewable: true,\n        key: 'c'\n      }, {\n        isViewable: false,\n        key: 'a'\n      }],\n      viewabilityConfig: {\n        viewAreaCoveragePercentThreshold: 0\n      },\n      viewableItems: [{\n        isViewable: true,\n        key: 'c'\n      }]\n    });\n  });\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Lists/__tests__/ViewabilityHelper-test.js"],"names":["ViewabilityHelper","require","rowFrames","data","getFrameMetrics","index","frame","key","length","height","offset","y","createViewToken","isViewable","describe","it","helper","viewAreaCoveragePercentThreshold","a","b","c","d","expect","computeViewableItems","toEqual","itemVisiblePercentThreshold","onViewableItemsChanged","jest","fn","onUpdate","mock","calls","toBe","changed","viewabilityConfig","viewableItems","minimumViewTime","not","toBeCalled","runAllTimers","waitForInteraction","recordInteraction","resetViewableIndices"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @emails oncall+react_native\n */\n\n'use strict';\n\nconst ViewabilityHelper = require('../ViewabilityHelper');\n\nlet rowFrames;\nlet data;\nfunction getFrameMetrics(index: number) {\n  const frame = rowFrames[data[index].key];\n  return {length: frame.height, offset: frame.y};\n}\nfunction createViewToken(index: number, isViewable: boolean) {\n  return {key: data[index].key, isViewable};\n}\n\ndescribe('computeViewableItems', function() {\n  it('returns all 4 entirely visible rows as viewable', function() {\n    const helper = new ViewabilityHelper({\n      viewAreaCoveragePercentThreshold: 50,\n    });\n    rowFrames = {\n      a: {y: 0, height: 50},\n      b: {y: 50, height: 50},\n      c: {y: 100, height: 50},\n      d: {y: 150, height: 50},\n    };\n    data = [{key: 'a'}, {key: 'b'}, {key: 'c'}, {key: 'd'}];\n    expect(\n      helper.computeViewableItems(data.length, 0, 200, getFrameMetrics),\n    ).toEqual([0, 1, 2, 3]);\n  });\n\n  it('returns top 2 rows as viewable (1. entirely visible and 2. majority)', function() {\n    const helper = new ViewabilityHelper({\n      viewAreaCoveragePercentThreshold: 50,\n    });\n    rowFrames = {\n      a: {y: 0, height: 50},\n      b: {y: 50, height: 150},\n      c: {y: 200, height: 50},\n      d: {y: 250, height: 50},\n    };\n    data = [{key: 'a'}, {key: 'b'}, {key: 'c'}, {key: 'd'}];\n    expect(\n      helper.computeViewableItems(data.length, 0, 200, getFrameMetrics),\n    ).toEqual([0, 1]);\n  });\n\n  it('returns only 2nd row as viewable (majority)', function() {\n    const helper = new ViewabilityHelper({\n      viewAreaCoveragePercentThreshold: 50,\n    });\n    rowFrames = {\n      a: {y: 0, height: 50},\n      b: {y: 50, height: 150},\n      c: {y: 200, height: 50},\n      d: {y: 250, height: 50},\n    };\n    data = [{key: 'a'}, {key: 'b'}, {key: 'c'}, {key: 'd'}];\n    expect(\n      helper.computeViewableItems(data.length, 25, 200, getFrameMetrics),\n    ).toEqual([1]);\n  });\n\n  it('handles empty input', function() {\n    const helper = new ViewabilityHelper({\n      viewAreaCoveragePercentThreshold: 50,\n    });\n    rowFrames = {};\n    data = [];\n    expect(\n      helper.computeViewableItems(data.length, 0, 200, getFrameMetrics),\n    ).toEqual([]);\n  });\n\n  it('handles different view area coverage percent thresholds', function() {\n    rowFrames = {\n      a: {y: 0, height: 50},\n      b: {y: 50, height: 150},\n      c: {y: 200, height: 500},\n      d: {y: 700, height: 50},\n    };\n    data = [{key: 'a'}, {key: 'b'}, {key: 'c'}, {key: 'd'}];\n\n    let helper = new ViewabilityHelper({viewAreaCoveragePercentThreshold: 0});\n    expect(\n      helper.computeViewableItems(data.length, 0, 50, getFrameMetrics),\n    ).toEqual([0]);\n    expect(\n      helper.computeViewableItems(data.length, 1, 50, getFrameMetrics),\n    ).toEqual([0, 1]);\n    expect(\n      helper.computeViewableItems(data.length, 199, 50, getFrameMetrics),\n    ).toEqual([1, 2]);\n    expect(\n      helper.computeViewableItems(data.length, 250, 50, getFrameMetrics),\n    ).toEqual([2]);\n\n    helper = new ViewabilityHelper({viewAreaCoveragePercentThreshold: 100});\n    expect(\n      helper.computeViewableItems(data.length, 0, 200, getFrameMetrics),\n    ).toEqual([0, 1]);\n    expect(\n      helper.computeViewableItems(data.length, 1, 200, getFrameMetrics),\n    ).toEqual([1]);\n    expect(\n      helper.computeViewableItems(data.length, 400, 200, getFrameMetrics),\n    ).toEqual([2]);\n    expect(\n      helper.computeViewableItems(data.length, 600, 200, getFrameMetrics),\n    ).toEqual([3]);\n\n    helper = new ViewabilityHelper({viewAreaCoveragePercentThreshold: 10});\n    expect(\n      helper.computeViewableItems(data.length, 30, 200, getFrameMetrics),\n    ).toEqual([0, 1, 2]);\n    expect(\n      helper.computeViewableItems(data.length, 31, 200, getFrameMetrics),\n    ).toEqual([1, 2]);\n  });\n\n  it('handles different item visible percent thresholds', function() {\n    rowFrames = {\n      a: {y: 0, height: 50},\n      b: {y: 50, height: 150},\n      c: {y: 200, height: 50},\n      d: {y: 250, height: 50},\n    };\n    data = [{key: 'a'}, {key: 'b'}, {key: 'c'}, {key: 'd'}];\n    let helper = new ViewabilityHelper({itemVisiblePercentThreshold: 0});\n    expect(\n      helper.computeViewableItems(data.length, 0, 50, getFrameMetrics),\n    ).toEqual([0]);\n    expect(\n      helper.computeViewableItems(data.length, 1, 50, getFrameMetrics),\n    ).toEqual([0, 1]);\n\n    helper = new ViewabilityHelper({itemVisiblePercentThreshold: 100});\n    expect(\n      helper.computeViewableItems(data.length, 0, 250, getFrameMetrics),\n    ).toEqual([0, 1, 2]);\n    expect(\n      helper.computeViewableItems(data.length, 1, 250, getFrameMetrics),\n    ).toEqual([1, 2]);\n\n    helper = new ViewabilityHelper({itemVisiblePercentThreshold: 10});\n    expect(\n      helper.computeViewableItems(data.length, 184, 20, getFrameMetrics),\n    ).toEqual([1]);\n    expect(\n      helper.computeViewableItems(data.length, 185, 20, getFrameMetrics),\n    ).toEqual([1, 2]);\n    expect(\n      helper.computeViewableItems(data.length, 186, 20, getFrameMetrics),\n    ).toEqual([2]);\n  });\n});\n\ndescribe('onUpdate', function() {\n  it('returns 1 visible row as viewable then scrolls away', function() {\n    const helper = new ViewabilityHelper();\n    rowFrames = {\n      a: {y: 0, height: 50},\n    };\n    data = [{key: 'a'}];\n    const onViewableItemsChanged = jest.fn();\n    helper.onUpdate(\n      data.length,\n      0,\n      200,\n      getFrameMetrics,\n      createViewToken,\n      onViewableItemsChanged,\n    );\n    expect(onViewableItemsChanged.mock.calls.length).toBe(1);\n    expect(onViewableItemsChanged.mock.calls[0][0]).toEqual({\n      changed: [{isViewable: true, key: 'a'}],\n      viewabilityConfig: {viewAreaCoveragePercentThreshold: 0},\n      viewableItems: [{isViewable: true, key: 'a'}],\n    });\n    helper.onUpdate(\n      data.length,\n      0,\n      200,\n      getFrameMetrics,\n      createViewToken,\n      onViewableItemsChanged,\n    );\n    expect(onViewableItemsChanged.mock.calls.length).toBe(1); // nothing changed!\n    helper.onUpdate(\n      data.length,\n      100,\n      200,\n      getFrameMetrics,\n      createViewToken,\n      onViewableItemsChanged,\n    );\n    expect(onViewableItemsChanged.mock.calls.length).toBe(2);\n    expect(onViewableItemsChanged.mock.calls[1][0]).toEqual({\n      changed: [{isViewable: false, key: 'a'}],\n      viewabilityConfig: {viewAreaCoveragePercentThreshold: 0},\n      viewableItems: [],\n    });\n  });\n\n  it('returns 1st visible row then 1st and 2nd then just 2nd', function() {\n    const helper = new ViewabilityHelper();\n    rowFrames = {\n      a: {y: 0, height: 200},\n      b: {y: 200, height: 200},\n    };\n    data = [{key: 'a'}, {key: 'b'}];\n    const onViewableItemsChanged = jest.fn();\n    helper.onUpdate(\n      data.length,\n      0,\n      200,\n      getFrameMetrics,\n      createViewToken,\n      onViewableItemsChanged,\n    );\n    expect(onViewableItemsChanged.mock.calls.length).toBe(1);\n    expect(onViewableItemsChanged.mock.calls[0][0]).toEqual({\n      changed: [{isViewable: true, key: 'a'}],\n      viewabilityConfig: {viewAreaCoveragePercentThreshold: 0},\n      viewableItems: [{isViewable: true, key: 'a'}],\n    });\n    helper.onUpdate(\n      data.length,\n      100,\n      200,\n      getFrameMetrics,\n      createViewToken,\n      onViewableItemsChanged,\n    );\n    expect(onViewableItemsChanged.mock.calls.length).toBe(2);\n    // Both visible with 100px overlap each\n    expect(onViewableItemsChanged.mock.calls[1][0]).toEqual({\n      changed: [{isViewable: true, key: 'b'}],\n      viewabilityConfig: {viewAreaCoveragePercentThreshold: 0},\n      viewableItems: [\n        {isViewable: true, key: 'a'},\n        {isViewable: true, key: 'b'},\n      ],\n    });\n    helper.onUpdate(\n      data.length,\n      200,\n      200,\n      getFrameMetrics,\n      createViewToken,\n      onViewableItemsChanged,\n    );\n    expect(onViewableItemsChanged.mock.calls.length).toBe(3);\n    expect(onViewableItemsChanged.mock.calls[2][0]).toEqual({\n      changed: [{isViewable: false, key: 'a'}],\n      viewabilityConfig: {viewAreaCoveragePercentThreshold: 0},\n      viewableItems: [{isViewable: true, key: 'b'}],\n    });\n  });\n\n  it('minimumViewTime delays callback', function() {\n    const helper = new ViewabilityHelper({\n      minimumViewTime: 350,\n      viewAreaCoveragePercentThreshold: 0,\n    });\n    rowFrames = {\n      a: {y: 0, height: 200},\n      b: {y: 200, height: 200},\n    };\n    data = [{key: 'a'}, {key: 'b'}];\n    const onViewableItemsChanged = jest.fn();\n    helper.onUpdate(\n      data.length,\n      0,\n      200,\n      getFrameMetrics,\n      createViewToken,\n      onViewableItemsChanged,\n    );\n    expect(onViewableItemsChanged).not.toBeCalled();\n\n    jest.runAllTimers();\n\n    expect(onViewableItemsChanged.mock.calls.length).toBe(1);\n    expect(onViewableItemsChanged.mock.calls[0][0]).toEqual({\n      changed: [{isViewable: true, key: 'a'}],\n      viewabilityConfig: {\n        minimumViewTime: 350,\n        viewAreaCoveragePercentThreshold: 0,\n      },\n      viewableItems: [{isViewable: true, key: 'a'}],\n    });\n  });\n\n  it('minimumViewTime skips briefly visible items', function() {\n    const helper = new ViewabilityHelper({\n      minimumViewTime: 350,\n      viewAreaCoveragePercentThreshold: 0,\n    });\n    rowFrames = {\n      a: {y: 0, height: 250},\n      b: {y: 250, height: 200},\n    };\n    data = [{key: 'a'}, {key: 'b'}];\n    const onViewableItemsChanged = jest.fn();\n    helper.onUpdate(\n      data.length,\n      0,\n      200,\n      getFrameMetrics,\n      createViewToken,\n      onViewableItemsChanged,\n    );\n    helper.onUpdate(\n      data.length,\n      300, // scroll past item 'a'\n      200,\n      getFrameMetrics,\n      createViewToken,\n      onViewableItemsChanged,\n    );\n\n    jest.runAllTimers();\n\n    expect(onViewableItemsChanged.mock.calls.length).toBe(1);\n    expect(onViewableItemsChanged.mock.calls[0][0]).toEqual({\n      changed: [{isViewable: true, key: 'b'}],\n      viewabilityConfig: {\n        minimumViewTime: 350,\n        viewAreaCoveragePercentThreshold: 0,\n      },\n      viewableItems: [{isViewable: true, key: 'b'}],\n    });\n  });\n\n  it('waitForInteraction blocks callback until interaction', function() {\n    const helper = new ViewabilityHelper({\n      waitForInteraction: true,\n      viewAreaCoveragePercentThreshold: 0,\n    });\n    rowFrames = {\n      a: {y: 0, height: 200},\n      b: {y: 200, height: 200},\n    };\n    data = [{key: 'a'}, {key: 'b'}];\n    const onViewableItemsChanged = jest.fn();\n    helper.onUpdate(\n      data.length,\n      0,\n      100,\n      getFrameMetrics,\n      createViewToken,\n      onViewableItemsChanged,\n    );\n    expect(onViewableItemsChanged).not.toBeCalled();\n\n    helper.recordInteraction();\n\n    helper.onUpdate(\n      data.length,\n      20,\n      100,\n      getFrameMetrics,\n      createViewToken,\n      onViewableItemsChanged,\n    );\n    expect(onViewableItemsChanged.mock.calls.length).toBe(1);\n    expect(onViewableItemsChanged.mock.calls[0][0]).toEqual({\n      changed: [{isViewable: true, key: 'a'}],\n      viewabilityConfig: {\n        waitForInteraction: true,\n        viewAreaCoveragePercentThreshold: 0,\n      },\n      viewableItems: [{isViewable: true, key: 'a'}],\n    });\n  });\n\n  it('returns the right visible row after the underlying data changed', function() {\n    const helper = new ViewabilityHelper();\n    rowFrames = {\n      a: {y: 0, height: 200},\n      b: {y: 200, height: 200},\n    };\n    data = [{key: 'a'}, {key: 'b'}];\n    const onViewableItemsChanged = jest.fn();\n    helper.onUpdate(\n      data.length,\n      0,\n      200,\n      getFrameMetrics,\n      createViewToken,\n      onViewableItemsChanged,\n    );\n    expect(onViewableItemsChanged.mock.calls.length).toBe(1);\n    expect(onViewableItemsChanged.mock.calls[0][0]).toEqual({\n      changed: [{isViewable: true, key: 'a'}],\n      viewabilityConfig: {viewAreaCoveragePercentThreshold: 0},\n      viewableItems: [{isViewable: true, key: 'a'}],\n    });\n\n    // update data\n    rowFrames = {\n      c: {y: 0, height: 200},\n      a: {y: 200, height: 200},\n      b: {y: 400, height: 200},\n    };\n    data = [{key: 'c'}, {key: 'a'}, {key: 'b'}];\n\n    helper.resetViewableIndices();\n\n    helper.onUpdate(\n      data.length,\n      0,\n      200,\n      getFrameMetrics,\n      createViewToken,\n      onViewableItemsChanged,\n    );\n\n    expect(onViewableItemsChanged.mock.calls.length).toBe(2);\n    expect(onViewableItemsChanged.mock.calls[1][0]).toEqual({\n      changed: [{isViewable: true, key: 'c'}, {isViewable: false, key: 'a'}],\n      viewabilityConfig: {viewAreaCoveragePercentThreshold: 0},\n      viewableItems: [{isViewable: true, key: 'c'}],\n    });\n  });\n});\n"]},"metadata":{},"sourceType":"script"}