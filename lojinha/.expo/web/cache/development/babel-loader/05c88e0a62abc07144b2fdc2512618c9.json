{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { useEffect, useState } from 'react';\nexport default function useWindowDimensions() {\n  var _useState = useState(function () {\n    return Dimensions.get('window');\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      dimensions = _useState2[0],\n      setDimensions = _useState2[1];\n\n  useEffect(function () {\n    function handleChange(_ref) {\n      var window = _ref.window;\n\n      if (dimensions.width !== window.width || dimensions.height !== window.height || dimensions.scale !== window.scale || dimensions.fontScale !== window.fontScale) {\n        setDimensions(window);\n      }\n    }\n\n    Dimensions.addEventListener('change', handleChange);\n    handleChange({\n      window: Dimensions.get('window')\n    });\n    return function () {\n      Dimensions.removeEventListener('change', handleChange);\n    };\n  }, [dimensions]);\n  return dimensions;\n}","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native-safe-area-context/src/useWindowDimensions.tsx"],"names":["useEffect","useState","useWindowDimensions","Dimensions","get","dimensions","setDimensions","handleChange","window","width","height","scale","fontScale","addEventListener","removeEventListener"],"mappings":";;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAWA,eAAe,SAASC,mBAAT,GAA+C;AAAA,kBACxBD,QAAQ,CAAC;AAAA,WAAME,UAAU,CAACC,GAAX,CAAe,QAAf,CAAN;AAAA,GAAD,CADgB;AAAA;AAAA,MACrDC,UADqD;AAAA,MACzCC,aADyC;;AAE5DN,EAAAA,SAAS,CAAC,YAAM;AACd,aAASO,YAAT,OAA8D;AAAA,UAAtCC,MAAsC,QAAtCA,MAAsC;;AAC5D,UACEH,UAAU,CAACI,KAAX,KAAqBD,MAAM,CAACC,KAA5B,IACAJ,UAAU,CAACK,MAAX,KAAsBF,MAAM,CAACE,MAD7B,IAEAL,UAAU,CAACM,KAAX,KAAqBH,MAAM,CAACG,KAF5B,IAGAN,UAAU,CAACO,SAAX,KAAyBJ,MAAM,CAACI,SAJlC,EAKE;AACAN,QAAAA,aAAa,CAACE,MAAD,CAAb;AACD;AACF;;AACDL,IAAAA,UAAU,CAACU,gBAAX,CAA4B,QAA5B,EAAsCN,YAAtC;AAIAA,IAAAA,YAAY,CAAC;AAAEC,MAAAA,MAAM,EAAEL,UAAU,CAACC,GAAX,CAAe,QAAf;AAAV,KAAD,CAAZ;AACA,WAAO,YAAM;AACXD,MAAAA,UAAU,CAACW,mBAAX,CAA+B,QAA/B,EAAyCP,YAAzC;AACD,KAFD;AAGD,GAnBQ,EAmBN,CAACF,UAAD,CAnBM,CAAT;AAoBA,SAAOA,UAAP;AACD","sourcesContent":["import { Dimensions } from 'react-native';\nimport { useEffect, useState } from 'react';\n\ntype DisplayMetrics = {\n  width: number;\n  height: number;\n  scale: number;\n  fontScale: number;\n};\n\n// Copied from https://github.com/facebook/react-native/blob/8d57691a/Libraries/Utilities/useWindowDimensions.js\n// for compatibility with React Native < 0.61.\nexport default function useWindowDimensions(): DisplayMetrics {\n  const [dimensions, setDimensions] = useState(() => Dimensions.get('window'));\n  useEffect(() => {\n    function handleChange({ window }: { window: DisplayMetrics }) {\n      if (\n        dimensions.width !== window.width ||\n        dimensions.height !== window.height ||\n        dimensions.scale !== window.scale ||\n        dimensions.fontScale !== window.fontScale\n      ) {\n        setDimensions(window);\n      }\n    }\n    Dimensions.addEventListener('change', handleChange);\n    // We might have missed an update between calling `get` in render and\n    // `addEventListener` in this handler, so we set it here. If there was\n    // no change, React will filter out this update as a no-op.\n    handleChange({ window: Dimensions.get('window') });\n    return () => {\n      Dimensions.removeEventListener('change', handleChange);\n    };\n  }, [dimensions]);\n  return dimensions;\n}\n"]},"metadata":{},"sourceType":"module"}