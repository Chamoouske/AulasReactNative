{"ast":null,"code":"export {};","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli/node_modules/@jest/types/build/ts3.4/Circus.d.ts"],"names":[],"mappings":"AAgLA","sourcesContent":["/// <reference types=\"node\" />\r\n/**\r\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n/// <reference types=\"node\" />\r\nimport * as Global from './Global';\r\ndeclare type Process = NodeJS.Process;\r\nexport declare type DoneFn = Global.DoneFn;\r\nexport declare type BlockFn = Global.BlockFn;\r\nexport declare type BlockName = Global.BlockName;\r\nexport declare type BlockMode = void | 'skip' | 'only' | 'todo';\r\nexport declare type TestMode = BlockMode;\r\nexport declare type TestName = Global.TestName;\r\nexport declare type TestFn = Global.TestFn;\r\nexport declare type HookFn = Global.HookFn;\r\nexport declare type AsyncFn = TestFn | HookFn;\r\nexport declare type SharedHookType = 'afterAll' | 'beforeAll';\r\nexport declare type HookType = SharedHookType | 'afterEach' | 'beforeEach';\r\nexport declare type TestContext = Record<string, any>;\r\nexport declare type Exception = any;\r\nexport declare type FormattedError = string;\r\nexport declare type Hook = {\r\n    asyncError: Error;\r\n    fn: HookFn;\r\n    type: HookType;\r\n    parent: DescribeBlock;\r\n    timeout: number | undefined | null;\r\n};\r\nexport interface EventHandler {\r\n    (event: AsyncEvent, state: State): void | Promise<void>;\r\n    (event: SyncEvent, state: State): void;\r\n}\r\nexport declare type Event = SyncEvent | AsyncEvent;\r\nexport declare type SyncEvent = {\r\n    asyncError: Error;\r\n    mode: BlockMode;\r\n    name: 'start_describe_definition';\r\n    blockName: BlockName;\r\n} | {\r\n    mode: BlockMode;\r\n    name: 'finish_describe_definition';\r\n    blockName: BlockName;\r\n} | {\r\n    asyncError: Error;\r\n    name: 'add_hook';\r\n    hookType: HookType;\r\n    fn: HookFn;\r\n    timeout: number | undefined;\r\n} | {\r\n    asyncError: Error;\r\n    name: 'add_test';\r\n    testName: TestName;\r\n    fn?: TestFn;\r\n    mode?: TestMode;\r\n    timeout: number | undefined;\r\n} | {\r\n    name: 'error';\r\n    error: Exception;\r\n};\r\nexport declare type AsyncEvent = {\r\n    name: 'setup';\r\n    testNamePattern?: string;\r\n    parentProcess: Process;\r\n} | {\r\n    name: 'include_test_location_in_result';\r\n} | {\r\n    name: 'hook_start';\r\n    hook: Hook;\r\n} | {\r\n    name: 'hook_success';\r\n    describeBlock?: DescribeBlock;\r\n    test?: TestEntry;\r\n    hook: Hook;\r\n} | {\r\n    name: 'hook_failure';\r\n    error: string | Exception;\r\n    describeBlock?: DescribeBlock;\r\n    test?: TestEntry;\r\n    hook: Hook;\r\n} | {\r\n    name: 'test_fn_start';\r\n    test: TestEntry;\r\n} | {\r\n    name: 'test_fn_success';\r\n    test: TestEntry;\r\n} | {\r\n    name: 'test_fn_failure';\r\n    error: Exception;\r\n    test: TestEntry;\r\n} | {\r\n    name: 'test_retry';\r\n    test: TestEntry;\r\n} | {\r\n    name: 'test_start';\r\n    test: TestEntry;\r\n} | {\r\n    name: 'test_skip';\r\n    test: TestEntry;\r\n} | {\r\n    name: 'test_todo';\r\n    test: TestEntry;\r\n} | {\r\n    name: 'test_done';\r\n    test: TestEntry;\r\n} | {\r\n    name: 'run_describe_start';\r\n    describeBlock: DescribeBlock;\r\n} | {\r\n    name: 'run_describe_finish';\r\n    describeBlock: DescribeBlock;\r\n} | {\r\n    name: 'run_start';\r\n} | {\r\n    name: 'run_finish';\r\n} | {\r\n    name: 'teardown';\r\n};\r\nexport declare type TestStatus = 'skip' | 'done' | 'todo';\r\nexport declare type TestResult = {\r\n    duration?: number | null;\r\n    errors: Array<FormattedError>;\r\n    invocations: number;\r\n    status: TestStatus;\r\n    location?: {\r\n        column: number;\r\n        line: number;\r\n    } | null;\r\n    testPath: Array<TestName | BlockName>;\r\n};\r\nexport declare type RunResult = {\r\n    unhandledErrors: Array<FormattedError>;\r\n    testResults: TestResults;\r\n};\r\nexport declare type TestResults = Array<TestResult>;\r\nexport declare type GlobalErrorHandlers = {\r\n    uncaughtException: Array<(exception: Exception) => void>;\r\n    unhandledRejection: Array<(exception: Exception, promise: Promise<any>) => void>;\r\n};\r\nexport declare type State = {\r\n    currentDescribeBlock: DescribeBlock;\r\n    currentlyRunningTest?: TestEntry | null;\r\n    expand?: boolean;\r\n    hasFocusedTests: boolean;\r\n    originalGlobalErrorHandlers?: GlobalErrorHandlers;\r\n    parentProcess: Process | null;\r\n    rootDescribeBlock: DescribeBlock;\r\n    testNamePattern?: RegExp | null;\r\n    testTimeout: number;\r\n    unhandledErrors: Array<Exception>;\r\n    includeTestLocationInResult: boolean;\r\n};\r\nexport declare type DescribeBlock = {\r\n    children: Array<DescribeBlock>;\r\n    hooks: Array<Hook>;\r\n    mode: BlockMode;\r\n    name: BlockName;\r\n    parent?: DescribeBlock;\r\n    tests: Array<TestEntry>;\r\n};\r\nexport declare type TestError = Exception | Array<[Exception | undefined, Exception]>;\r\nexport declare type TestEntry = {\r\n    asyncError: Exception;\r\n    errors: TestError;\r\n    fn?: TestFn;\r\n    invocations: number;\r\n    mode: TestMode;\r\n    name: TestName;\r\n    parent: DescribeBlock;\r\n    startedAt?: number | null;\r\n    duration?: number | null;\r\n    status?: TestStatus | null;\r\n    timeout?: number;\r\n};\r\nexport {};\r\n"]},"metadata":{},"sourceType":"module"}