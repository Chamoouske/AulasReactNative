{"ast":null,"code":"'use strict';\n\nimport { Property } from \"../src/Property.js\";\ntest('parses required primitive prop', function () {\n  var obj = {\n    'name': 'lineNumber',\n    'type': 'integer',\n    'description': 'Line number in the script (0-based).'\n  };\n  var prop = Property.create('Debugger', obj);\n  expect(prop.domain).toBe('Debugger');\n  expect(prop.name).toBe('lineNumber');\n  expect(prop.type).toBe('integer');\n  expect(prop.optional).toBeUndefined();\n  expect(prop.description).toBe('Line number in the script (0-based).');\n  expect(prop.getFullCppType()).toBe('int');\n  expect(prop.getCppIdentifier()).toBe('lineNumber');\n  expect(prop.getInitializer()).toBe('{}');\n});\ntest('parses optional primitive prop', function () {\n  var obj = {\n    'name': 'samplingInterval',\n    'type': 'number',\n    'optional': true,\n    'description': 'Average sample interval in bytes.'\n  };\n  var prop = Property.create('HeapProfiler', obj);\n  expect(prop.domain).toBe('HeapProfiler');\n  expect(prop.name).toBe('samplingInterval');\n  expect(prop.type).toBe('number');\n  expect(prop.optional).toBe(true);\n  expect(prop.description).toBe('Average sample interval in bytes.');\n  expect(prop.getFullCppType()).toBe('folly::Optional<double>');\n  expect(prop.getCppIdentifier()).toBe('samplingInterval');\n  expect(prop.getInitializer()).toBe('');\n});\ntest('parses optional ref prop', function () {\n  var obj = {\n    'name': 'exceptionDetails',\n    'optional': true,\n    '$ref': 'Runtime.ExceptionDetails',\n    'description': 'Exception details if any.'\n  };\n  var prop = Property.create('Debugger', obj);\n  expect(prop.domain).toBe('Debugger');\n  expect(prop.name).toBe('exceptionDetails');\n  expect(prop.optional).toBe(true);\n  expect(prop.$ref).toBe('Runtime.ExceptionDetails');\n  expect(prop.description).toBe('Exception details if any.');\n  expect(prop.getFullCppType()).toBe('folly::Optional<runtime::ExceptionDetails>');\n  expect(prop.getCppIdentifier()).toBe('exceptionDetails');\n  expect(prop.getInitializer()).toBe('');\n});\ntest('parses recursive ref prop', function () {\n  var obj = {\n    'name': 'parent',\n    '$ref': 'StackTrace',\n    'optional': true,\n    'recursive': true,\n    'description': 'Asynchronous JavaScript stack trace...'\n  };\n  var prop = Property.create('Runtime', obj);\n  expect(prop.domain).toBe('Runtime');\n  expect(prop.name).toBe('parent');\n  expect(prop.optional).toBe(true);\n  expect(prop.recursive).toBe(true);\n  expect(prop.$ref).toBe('StackTrace');\n  expect(prop.description).toBe('Asynchronous JavaScript stack trace...');\n  expect(prop.getFullCppType()).toBe('std::unique_ptr<runtime::StackTrace>');\n  expect(prop.getCppIdentifier()).toBe('parent');\n  expect(prop.getInitializer()).toBe('');\n});\ntest('parses optional array items prop', function () {\n  var obj = {\n    'name': 'hitBreakpoints',\n    'type': 'array',\n    'optional': true,\n    'items': {\n      'type': 'string'\n    },\n    'description': 'Hit breakpoints IDs'\n  };\n  var prop = Property.create('Debugger', obj);\n  expect(prop.domain).toBe('Debugger');\n  expect(prop.name).toBe('hitBreakpoints');\n  expect(prop.type).toBe('array');\n  expect(prop.optional).toBe(true);\n  expect(prop.items).toEqual({\n    'type': 'string'\n  });\n  expect(prop.description).toBe('Hit breakpoints IDs');\n  expect(prop.getFullCppType()).toBe('folly::Optional<std::vector<std::string>>');\n  expect(prop.getCppIdentifier()).toBe('hitBreakpoints');\n  expect(prop.getInitializer()).toBe('');\n});\ntest('parses array ref prop', function () {\n  var obj = {\n    'name': 'domains',\n    'type': 'array',\n    'items': {\n      '$ref': 'Domain'\n    },\n    'description': 'List of supported domains.'\n  };\n  var prop = Property.create('Schema', obj);\n  expect(prop.domain).toBe('Schema');\n  expect(prop.name).toBe('domains');\n  expect(prop.type).toBe('array');\n  expect(prop.items).toEqual({\n    $ref: 'Domain'\n  });\n  expect(prop.description).toBe('List of supported domains.');\n  expect(prop.getFullCppType()).toBe('std::vector<schema::Domain>');\n  expect(prop.getCppIdentifier()).toBe('domains');\n  expect(prop.getInitializer()).toBe('');\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/ReactCommon/hermes/inspector/tools/msggen/__tests__/PropertyTest.js"],"names":["Property","test","obj","prop","create","expect","domain","toBe","name","type","optional","toBeUndefined","description","getFullCppType","getCppIdentifier","getInitializer","$ref","recursive","items","toEqual"],"mappings":"AAOA;;AAEA,SAASA,QAAT;AAEAC,IAAI,CAAC,gCAAD,EAAmC,YAAM;AAC3C,MAAIC,GAAG,GAAG;AACR,YAAQ,YADA;AAER,YAAQ,SAFA;AAGR,mBAAe;AAHP,GAAV;AAKA,MAAIC,IAAI,GAAGH,QAAQ,CAACI,MAAT,CAAgB,UAAhB,EAA4BF,GAA5B,CAAX;AAEAG,EAAAA,MAAM,CAACF,IAAI,CAACG,MAAN,CAAN,CAAoBC,IAApB,CAAyB,UAAzB;AACAF,EAAAA,MAAM,CAACF,IAAI,CAACK,IAAN,CAAN,CAAkBD,IAAlB,CAAuB,YAAvB;AACAF,EAAAA,MAAM,CAACF,IAAI,CAACM,IAAN,CAAN,CAAkBF,IAAlB,CAAuB,SAAvB;AACAF,EAAAA,MAAM,CAACF,IAAI,CAACO,QAAN,CAAN,CAAsBC,aAAtB;AACAN,EAAAA,MAAM,CAACF,IAAI,CAACS,WAAN,CAAN,CAAyBL,IAAzB,CAA8B,sCAA9B;AAEAF,EAAAA,MAAM,CAACF,IAAI,CAACU,cAAL,EAAD,CAAN,CAA8BN,IAA9B,CAAmC,KAAnC;AACAF,EAAAA,MAAM,CAACF,IAAI,CAACW,gBAAL,EAAD,CAAN,CAAgCP,IAAhC,CAAqC,YAArC;AACAF,EAAAA,MAAM,CAACF,IAAI,CAACY,cAAL,EAAD,CAAN,CAA8BR,IAA9B,CAAmC,IAAnC;AACD,CAjBG,CAAJ;AAmBAN,IAAI,CAAC,gCAAD,EAAmC,YAAM;AAC3C,MAAIC,GAAG,GAAG;AACR,YAAQ,kBADA;AAER,YAAQ,QAFA;AAGR,gBAAY,IAHJ;AAIR,mBAAe;AAJP,GAAV;AAMA,MAAIC,IAAI,GAAGH,QAAQ,CAACI,MAAT,CAAgB,cAAhB,EAAgCF,GAAhC,CAAX;AAEAG,EAAAA,MAAM,CAACF,IAAI,CAACG,MAAN,CAAN,CAAoBC,IAApB,CAAyB,cAAzB;AACAF,EAAAA,MAAM,CAACF,IAAI,CAACK,IAAN,CAAN,CAAkBD,IAAlB,CAAuB,kBAAvB;AACAF,EAAAA,MAAM,CAACF,IAAI,CAACM,IAAN,CAAN,CAAkBF,IAAlB,CAAuB,QAAvB;AACAF,EAAAA,MAAM,CAACF,IAAI,CAACO,QAAN,CAAN,CAAsBH,IAAtB,CAA2B,IAA3B;AACAF,EAAAA,MAAM,CAACF,IAAI,CAACS,WAAN,CAAN,CAAyBL,IAAzB,CAA8B,mCAA9B;AAEAF,EAAAA,MAAM,CAACF,IAAI,CAACU,cAAL,EAAD,CAAN,CAA8BN,IAA9B,CAAmC,yBAAnC;AACAF,EAAAA,MAAM,CAACF,IAAI,CAACW,gBAAL,EAAD,CAAN,CAAgCP,IAAhC,CAAqC,kBAArC;AACAF,EAAAA,MAAM,CAACF,IAAI,CAACY,cAAL,EAAD,CAAN,CAA8BR,IAA9B,CAAmC,EAAnC;AACD,CAlBG,CAAJ;AAoBAN,IAAI,CAAC,0BAAD,EAA6B,YAAM;AACrC,MAAIC,GAAG,GAAG;AACR,YAAQ,kBADA;AAER,gBAAY,IAFJ;AAGR,YAAQ,0BAHA;AAIR,mBAAe;AAJP,GAAV;AAMA,MAAIC,IAAI,GAAGH,QAAQ,CAACI,MAAT,CAAgB,UAAhB,EAA4BF,GAA5B,CAAX;AAEAG,EAAAA,MAAM,CAACF,IAAI,CAACG,MAAN,CAAN,CAAoBC,IAApB,CAAyB,UAAzB;AACAF,EAAAA,MAAM,CAACF,IAAI,CAACK,IAAN,CAAN,CAAkBD,IAAlB,CAAuB,kBAAvB;AACAF,EAAAA,MAAM,CAACF,IAAI,CAACO,QAAN,CAAN,CAAsBH,IAAtB,CAA2B,IAA3B;AACAF,EAAAA,MAAM,CAACF,IAAI,CAACa,IAAN,CAAN,CAAkBT,IAAlB,CAAuB,0BAAvB;AACAF,EAAAA,MAAM,CAACF,IAAI,CAACS,WAAN,CAAN,CAAyBL,IAAzB,CAA8B,2BAA9B;AAEAF,EAAAA,MAAM,CAACF,IAAI,CAACU,cAAL,EAAD,CAAN,CAA8BN,IAA9B,CAAmC,4CAAnC;AACAF,EAAAA,MAAM,CAACF,IAAI,CAACW,gBAAL,EAAD,CAAN,CAAgCP,IAAhC,CAAqC,kBAArC;AACAF,EAAAA,MAAM,CAACF,IAAI,CAACY,cAAL,EAAD,CAAN,CAA8BR,IAA9B,CAAmC,EAAnC;AACD,CAlBG,CAAJ;AAoBAN,IAAI,CAAC,2BAAD,EAA8B,YAAM;AACtC,MAAIC,GAAG,GAAG;AACR,YAAQ,QADA;AAER,YAAQ,YAFA;AAGR,gBAAY,IAHJ;AAIR,iBAAa,IAJL;AAKR,mBAAe;AALP,GAAV;AAOA,MAAIC,IAAI,GAAGH,QAAQ,CAACI,MAAT,CAAgB,SAAhB,EAA2BF,GAA3B,CAAX;AAEAG,EAAAA,MAAM,CAACF,IAAI,CAACG,MAAN,CAAN,CAAoBC,IAApB,CAAyB,SAAzB;AACAF,EAAAA,MAAM,CAACF,IAAI,CAACK,IAAN,CAAN,CAAkBD,IAAlB,CAAuB,QAAvB;AACAF,EAAAA,MAAM,CAACF,IAAI,CAACO,QAAN,CAAN,CAAsBH,IAAtB,CAA2B,IAA3B;AACAF,EAAAA,MAAM,CAACF,IAAI,CAACc,SAAN,CAAN,CAAuBV,IAAvB,CAA4B,IAA5B;AACAF,EAAAA,MAAM,CAACF,IAAI,CAACa,IAAN,CAAN,CAAkBT,IAAlB,CAAuB,YAAvB;AACAF,EAAAA,MAAM,CAACF,IAAI,CAACS,WAAN,CAAN,CAAyBL,IAAzB,CAA8B,wCAA9B;AAEAF,EAAAA,MAAM,CAACF,IAAI,CAACU,cAAL,EAAD,CAAN,CAA8BN,IAA9B,CAAmC,sCAAnC;AACAF,EAAAA,MAAM,CAACF,IAAI,CAACW,gBAAL,EAAD,CAAN,CAAgCP,IAAhC,CAAqC,QAArC;AACAF,EAAAA,MAAM,CAACF,IAAI,CAACY,cAAL,EAAD,CAAN,CAA8BR,IAA9B,CAAmC,EAAnC;AACD,CApBG,CAAJ;AAsBAN,IAAI,CAAC,kCAAD,EAAqC,YAAM;AAC7C,MAAIC,GAAG,GAAG;AACR,YAAQ,gBADA;AAER,YAAQ,OAFA;AAGR,gBAAY,IAHJ;AAIR,aAAS;AAAE,cAAQ;AAAV,KAJD;AAKR,mBAAe;AALP,GAAV;AAOA,MAAIC,IAAI,GAAGH,QAAQ,CAACI,MAAT,CAAgB,UAAhB,EAA4BF,GAA5B,CAAX;AAEAG,EAAAA,MAAM,CAACF,IAAI,CAACG,MAAN,CAAN,CAAoBC,IAApB,CAAyB,UAAzB;AACAF,EAAAA,MAAM,CAACF,IAAI,CAACK,IAAN,CAAN,CAAkBD,IAAlB,CAAuB,gBAAvB;AACAF,EAAAA,MAAM,CAACF,IAAI,CAACM,IAAN,CAAN,CAAkBF,IAAlB,CAAuB,OAAvB;AACAF,EAAAA,MAAM,CAACF,IAAI,CAACO,QAAN,CAAN,CAAsBH,IAAtB,CAA2B,IAA3B;AACAF,EAAAA,MAAM,CAACF,IAAI,CAACe,KAAN,CAAN,CAAmBC,OAAnB,CAA2B;AAAE,YAAQ;AAAV,GAA3B;AACAd,EAAAA,MAAM,CAACF,IAAI,CAACS,WAAN,CAAN,CAAyBL,IAAzB,CAA8B,qBAA9B;AAEAF,EAAAA,MAAM,CAACF,IAAI,CAACU,cAAL,EAAD,CAAN,CAA8BN,IAA9B,CAAmC,2CAAnC;AACAF,EAAAA,MAAM,CAACF,IAAI,CAACW,gBAAL,EAAD,CAAN,CAAgCP,IAAhC,CAAqC,gBAArC;AACAF,EAAAA,MAAM,CAACF,IAAI,CAACY,cAAL,EAAD,CAAN,CAA8BR,IAA9B,CAAmC,EAAnC;AACD,CApBG,CAAJ;AAsBAN,IAAI,CAAC,uBAAD,EAA0B,YAAM;AAClC,MAAIC,GAAG,GAAG;AACR,YAAQ,SADA;AAER,YAAQ,OAFA;AAGR,aAAS;AAAE,cAAQ;AAAV,KAHD;AAIR,mBAAe;AAJP,GAAV;AAMA,MAAIC,IAAI,GAAGH,QAAQ,CAACI,MAAT,CAAgB,QAAhB,EAA0BF,GAA1B,CAAX;AAEAG,EAAAA,MAAM,CAACF,IAAI,CAACG,MAAN,CAAN,CAAoBC,IAApB,CAAyB,QAAzB;AACAF,EAAAA,MAAM,CAACF,IAAI,CAACK,IAAN,CAAN,CAAkBD,IAAlB,CAAuB,SAAvB;AACAF,EAAAA,MAAM,CAACF,IAAI,CAACM,IAAN,CAAN,CAAkBF,IAAlB,CAAuB,OAAvB;AACAF,EAAAA,MAAM,CAACF,IAAI,CAACe,KAAN,CAAN,CAAmBC,OAAnB,CAA2B;AAAEH,IAAAA,IAAI,EAAE;AAAR,GAA3B;AACAX,EAAAA,MAAM,CAACF,IAAI,CAACS,WAAN,CAAN,CAAyBL,IAAzB,CAA8B,4BAA9B;AAEAF,EAAAA,MAAM,CAACF,IAAI,CAACU,cAAL,EAAD,CAAN,CAA8BN,IAA9B,CAAmC,6BAAnC;AACAF,EAAAA,MAAM,CAACF,IAAI,CAACW,gBAAL,EAAD,CAAN,CAAgCP,IAAhC,CAAqC,SAArC;AACAF,EAAAA,MAAM,CAACF,IAAI,CAACY,cAAL,EAAD,CAAN,CAA8BR,IAA9B,CAAmC,EAAnC;AACD,CAlBG,CAAJ","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nimport { Property } from '../src/Property.js';\n\ntest('parses required primitive prop', () => {\n  let obj = {\n    'name': 'lineNumber',\n    'type': 'integer',\n    'description': 'Line number in the script (0-based).',\n  };\n  let prop = Property.create('Debugger', obj);\n\n  expect(prop.domain).toBe('Debugger');\n  expect(prop.name).toBe('lineNumber');\n  expect(prop.type).toBe('integer');\n  expect(prop.optional).toBeUndefined();\n  expect(prop.description).toBe('Line number in the script (0-based).');\n\n  expect(prop.getFullCppType()).toBe('int');\n  expect(prop.getCppIdentifier()).toBe('lineNumber');\n  expect(prop.getInitializer()).toBe('{}');\n});\n\ntest('parses optional primitive prop', () => {\n  let obj = {\n    'name': 'samplingInterval',\n    'type': 'number',\n    'optional': true,\n    'description': 'Average sample interval in bytes.',\n  };\n  let prop = Property.create('HeapProfiler', obj);\n\n  expect(prop.domain).toBe('HeapProfiler');\n  expect(prop.name).toBe('samplingInterval');\n  expect(prop.type).toBe('number');\n  expect(prop.optional).toBe(true);\n  expect(prop.description).toBe('Average sample interval in bytes.');\n\n  expect(prop.getFullCppType()).toBe('folly::Optional<double>');\n  expect(prop.getCppIdentifier()).toBe('samplingInterval');\n  expect(prop.getInitializer()).toBe('');\n});\n\ntest('parses optional ref prop', () => {\n  let obj = {\n    'name': 'exceptionDetails',\n    'optional': true,\n    '$ref': 'Runtime.ExceptionDetails',\n    'description': 'Exception details if any.',\n  };\n  let prop = Property.create('Debugger', obj);\n\n  expect(prop.domain).toBe('Debugger');\n  expect(prop.name).toBe('exceptionDetails');\n  expect(prop.optional).toBe(true);\n  expect(prop.$ref).toBe('Runtime.ExceptionDetails');\n  expect(prop.description).toBe('Exception details if any.');\n\n  expect(prop.getFullCppType()).toBe('folly::Optional<runtime::ExceptionDetails>');\n  expect(prop.getCppIdentifier()).toBe('exceptionDetails');\n  expect(prop.getInitializer()).toBe('');\n});\n\ntest('parses recursive ref prop', () => {\n  let obj = {\n    'name': 'parent',\n    '$ref': 'StackTrace',\n    'optional': true,\n    'recursive': true,\n    'description': 'Asynchronous JavaScript stack trace...',\n  };\n  let prop = Property.create('Runtime', obj);\n\n  expect(prop.domain).toBe('Runtime');\n  expect(prop.name).toBe('parent');\n  expect(prop.optional).toBe(true);\n  expect(prop.recursive).toBe(true);\n  expect(prop.$ref).toBe('StackTrace');\n  expect(prop.description).toBe('Asynchronous JavaScript stack trace...');\n\n  expect(prop.getFullCppType()).toBe('std::unique_ptr<runtime::StackTrace>');\n  expect(prop.getCppIdentifier()).toBe('parent');\n  expect(prop.getInitializer()).toBe('');\n});\n\ntest('parses optional array items prop', () => {\n  let obj = {\n    'name': 'hitBreakpoints',\n    'type': 'array',\n    'optional': true,\n    'items': { 'type': 'string' },\n    'description': 'Hit breakpoints IDs',\n  };\n  let prop = Property.create('Debugger', obj);\n\n  expect(prop.domain).toBe('Debugger');\n  expect(prop.name).toBe('hitBreakpoints');\n  expect(prop.type).toBe('array');\n  expect(prop.optional).toBe(true);\n  expect(prop.items).toEqual({ 'type': 'string' });\n  expect(prop.description).toBe('Hit breakpoints IDs');\n\n  expect(prop.getFullCppType()).toBe('folly::Optional<std::vector<std::string>>');\n  expect(prop.getCppIdentifier()).toBe('hitBreakpoints');\n  expect(prop.getInitializer()).toBe('');\n});\n\ntest('parses array ref prop', () => {\n  let obj = {\n    'name': 'domains',\n    'type': 'array',\n    'items': { '$ref': 'Domain' },\n    'description': 'List of supported domains.',\n  };\n  let prop = Property.create('Schema', obj);\n\n  expect(prop.domain).toBe('Schema');\n  expect(prop.name).toBe('domains');\n  expect(prop.type).toBe('array');\n  expect(prop.items).toEqual({ $ref: 'Domain' });\n  expect(prop.description).toBe('List of supported domains.');\n\n  expect(prop.getFullCppType()).toBe('std::vector<schema::Domain>');\n  expect(prop.getCppIdentifier()).toBe('domains');\n  expect(prop.getInitializer()).toBe('');\n});\n"]},"metadata":{},"sourceType":"module"}