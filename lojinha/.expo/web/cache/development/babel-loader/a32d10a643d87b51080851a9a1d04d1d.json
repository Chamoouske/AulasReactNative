{"ast":null,"code":"'use strict';\n\nvar ESLintTester = require(\"./eslint-tester.js\");\n\nvar rule = require(\"../platform-colors.js\");\n\nvar eslintTester = new ESLintTester();\neslintTester.run('../platform-colors', rule, {\n  valid: [\"const color = PlatformColor('labelColor');\", \"const color = PlatformColor('controlAccentColor', 'controlColor');\", \"const color = DynamicColorIOS({light: 'black', dark: 'white'});\", \"const color = DynamicColorIOS({light: PlatformColor('black'), dark: PlatformColor('white')});\", \"const color = ColorAndroid('?attr/colorAccent')\"],\n  invalid: [{\n    code: 'const color = PlatformColor();',\n    errors: [{\n      message: rule.meta.messages.platformColorArgsLength\n    }]\n  }, {\n    code: \"const labelColor = 'labelColor'; const color = PlatformColor(labelColor);\",\n    errors: [{\n      message: rule.meta.messages.platformColorArgTypes\n    }]\n  }, {\n    code: \"const tuple = {light: 'black', dark: 'white'}; const color = DynamicColorIOS(tuple);\",\n    errors: [{\n      message: rule.meta.messages.dynamicColorIOSArg\n    }]\n  }, {\n    code: \"const black = 'black'; const color = DynamicColorIOS({light: black, dark: 'white'});\",\n    errors: [{\n      message: rule.meta.messages.dynamicColorIOSLight\n    }]\n  }, {\n    code: \"const white = 'white'; const color = DynamicColorIOS({light: 'black', dark: white});\",\n    errors: [{\n      message: rule.meta.messages.dynamicColorIOSDark\n    }]\n  }, {\n    code: 'const color = ColorAndroid();',\n    errors: [{\n      message: rule.meta.messages.colorAndroidArg\n    }]\n  }, {\n    code: \"const colorAccent = '?attr/colorAccent'; const color = ColorAndroid(colorAccent);\",\n    errors: [{\n      message: rule.meta.messages.colorAndroidArg\n    }]\n  }]\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/packages/eslint-plugin-react-native-community/__tests__/platform-colors-test.js"],"names":["ESLintTester","require","rule","eslintTester","run","valid","invalid","code","errors","message","meta","messages","platformColorArgsLength","platformColorArgTypes","dynamicColorIOSArg","dynamicColorIOSLight","dynamicColorIOSDark","colorAndroidArg"],"mappings":"AAUA;;AAEA,IAAMA,YAAY,GAAGC,OAAO,sBAA5B;;AAEA,IAAMC,IAAI,GAAGD,OAAO,yBAApB;;AAEA,IAAME,YAAY,GAAG,IAAIH,YAAJ,EAArB;AAEAG,YAAY,CAACC,GAAb,CAAiB,oBAAjB,EAAuCF,IAAvC,EAA6C;AAC3CG,EAAAA,KAAK,EAAE,CACL,4CADK,EAEL,oEAFK,EAGL,iEAHK,EAIL,+FAJK,EAKL,iDALK,CADoC;AAQ3CC,EAAAA,OAAO,EAAE,CACP;AACEC,IAAAA,IAAI,EAAE,gCADR;AAEEC,IAAAA,MAAM,EAAE,CAAC;AAACC,MAAAA,OAAO,EAAEP,IAAI,CAACQ,IAAL,CAAUC,QAAV,CAAmBC;AAA7B,KAAD;AAFV,GADO,EAKP;AACEL,IAAAA,IAAI,EACF,2EAFJ;AAGEC,IAAAA,MAAM,EAAE,CAAC;AAACC,MAAAA,OAAO,EAAEP,IAAI,CAACQ,IAAL,CAAUC,QAAV,CAAmBE;AAA7B,KAAD;AAHV,GALO,EAUP;AACEN,IAAAA,IAAI,EACF,sFAFJ;AAGEC,IAAAA,MAAM,EAAE,CAAC;AAACC,MAAAA,OAAO,EAAEP,IAAI,CAACQ,IAAL,CAAUC,QAAV,CAAmBG;AAA7B,KAAD;AAHV,GAVO,EAeP;AACEP,IAAAA,IAAI,EACF,sFAFJ;AAGEC,IAAAA,MAAM,EAAE,CAAC;AAACC,MAAAA,OAAO,EAAEP,IAAI,CAACQ,IAAL,CAAUC,QAAV,CAAmBI;AAA7B,KAAD;AAHV,GAfO,EAoBP;AACER,IAAAA,IAAI,EACF,sFAFJ;AAGEC,IAAAA,MAAM,EAAE,CAAC;AAACC,MAAAA,OAAO,EAAEP,IAAI,CAACQ,IAAL,CAAUC,QAAV,CAAmBK;AAA7B,KAAD;AAHV,GApBO,EAyBP;AACET,IAAAA,IAAI,EAAE,+BADR;AAEEC,IAAAA,MAAM,EAAE,CAAC;AAACC,MAAAA,OAAO,EAAEP,IAAI,CAACQ,IAAL,CAAUC,QAAV,CAAmBM;AAA7B,KAAD;AAFV,GAzBO,EA6BP;AACEV,IAAAA,IAAI,EACF,mFAFJ;AAGEC,IAAAA,MAAM,EAAE,CAAC;AAACC,MAAAA,OAAO,EAAEP,IAAI,CAACQ,IAAL,CAAUC,QAAV,CAAmBM;AAA7B,KAAD;AAHV,GA7BO;AARkC,CAA7C","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+react_native\n * @format\n */\n\n'use strict';\n\nconst ESLintTester = require('./eslint-tester.js');\n\nconst rule = require('../platform-colors.js');\n\nconst eslintTester = new ESLintTester();\n\neslintTester.run('../platform-colors', rule, {\n  valid: [\n    \"const color = PlatformColor('labelColor');\",\n    \"const color = PlatformColor('controlAccentColor', 'controlColor');\",\n    \"const color = DynamicColorIOS({light: 'black', dark: 'white'});\",\n    \"const color = DynamicColorIOS({light: PlatformColor('black'), dark: PlatformColor('white')});\",\n    \"const color = ColorAndroid('?attr/colorAccent')\",\n  ],\n  invalid: [\n    {\n      code: 'const color = PlatformColor();',\n      errors: [{message: rule.meta.messages.platformColorArgsLength}],\n    },\n    {\n      code:\n        \"const labelColor = 'labelColor'; const color = PlatformColor(labelColor);\",\n      errors: [{message: rule.meta.messages.platformColorArgTypes}],\n    },\n    {\n      code:\n        \"const tuple = {light: 'black', dark: 'white'}; const color = DynamicColorIOS(tuple);\",\n      errors: [{message: rule.meta.messages.dynamicColorIOSArg}],\n    },\n    {\n      code:\n        \"const black = 'black'; const color = DynamicColorIOS({light: black, dark: 'white'});\",\n      errors: [{message: rule.meta.messages.dynamicColorIOSLight}],\n    },\n    {\n      code:\n        \"const white = 'white'; const color = DynamicColorIOS({light: 'black', dark: white});\",\n      errors: [{message: rule.meta.messages.dynamicColorIOSDark}],\n    },\n    {\n      code: 'const color = ColorAndroid();',\n      errors: [{message: rule.meta.messages.colorAndroidArg}],\n    },\n    {\n      code:\n        \"const colorAccent = '?attr/colorAccent'; const color = ColorAndroid(colorAccent);\",\n      errors: [{message: rule.meta.messages.colorAndroidArg}],\n    },\n  ],\n});\n"]},"metadata":{},"sourceType":"script"}