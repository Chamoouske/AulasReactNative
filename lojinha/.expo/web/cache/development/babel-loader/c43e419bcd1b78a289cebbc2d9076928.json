{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.enableAMDH = exports.enableHAXM = exports.enableWHPX = exports.getBestHypervisor = exports.createAVD = exports.installComponent = exports.getAndroidSdkRootInstallation = exports.getUserAndroidPath = void 0;\n\nfunction _fsExtra() {\n  var data = require(\"fs-extra\");\n\n  _fsExtra = function _fsExtra() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  var data = require(\"path\");\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _executeWinCommand = require(\"./executeWinCommand\");\n\nvar _processorType = require(\"./processorType\");\n\nvar getUserAndroidPath = function getUserAndroidPath() {\n  return (0, _path().join)(process.env.LOCALAPPDATA || '', 'Android');\n};\n\nexports.getUserAndroidPath = getUserAndroidPath;\n\nvar getAndroidSdkRootInstallation = function getAndroidSdkRootInstallation() {\n  var env = process.env.ANDROID_SDK_ROOT || process.env.ANDROID_HOME;\n  var installPath = env ? env : (0, _path().join)(getUserAndroidPath(), 'Sdk');\n\n  if ((0, _fsExtra().pathExistsSync)(installPath)) {\n    return installPath;\n  } else {\n    return '';\n  }\n};\n\nexports.getAndroidSdkRootInstallation = getAndroidSdkRootInstallation;\n\nvar installComponent = function installComponent(component, androidSdkRoot) {\n  return new Promise(function (done, error) {\n    var sdkmanager = (0, _path().join)(androidSdkRoot, 'tools', 'bin', 'sdkmanager.bat');\n    var command = \"\\\"\" + sdkmanager + \"\\\" --sdk_root=\\\"\" + androidSdkRoot + \"\\\" \\\"\" + component + \"\\\"\";\n    var child = (0, _executeWinCommand.executeCommand)(command);\n    var stderr = '';\n    child.stdout.on('data', function (data) {\n      if (data.includes('(y/N)')) {\n        child.stdin.write('y\\n');\n      }\n    });\n    child.stderr.on('data', function (data) {\n      stderr += data.toString('utf-8');\n    });\n    child.on('close', function (exitStatus) {\n      if (exitStatus === 0) {\n        done();\n      } else {\n        error({\n          stderr: stderr\n        });\n      }\n    });\n    child.on('error', error);\n  });\n};\n\nexports.installComponent = installComponent;\n\nvar parseHypervisor = function parseHypervisor(status, customHypervisor) {\n  if (status.includes('is not installed, but Windows Hypervisor Platform is available.')) {\n    return {\n      hypervisor: 'WHPX',\n      installed: false\n    };\n  }\n\n  if (/WHPX \\((\\d|\\.)+\\) is installed and usable\\./.test(status)) {\n    return {\n      hypervisor: 'WHPX',\n      installed: true\n    };\n  }\n\n  if (/is installed and usable\\./.test(status)) {\n    return {\n      hypervisor: customHypervisor,\n      installed: true\n    };\n  }\n\n  if (status.includes(\"Your CPU: 'AuthenticAMD'\")) {\n    return {\n      hypervisor: customHypervisor,\n      installed: false\n    };\n  }\n\n  if (status.includes('is not installed on this machine')) {\n    return {\n      hypervisor: 'none',\n      installed: false\n    };\n  }\n\n  return null;\n};\n\nvar getEmulatorAccelOutputInformation = function getEmulatorAccelOutputInformation(androidSDKRoot) {\n  var _await, stdout, _stdout;\n\n  return _regeneratorRuntime.async(function getEmulatorAccelOutputInformation$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap((0, _executeWinCommand.executeCommand)(\"\\\"\" + (0, _path().join)(androidSDKRoot, 'emulator', 'emulator-check.exe') + \"\\\" accel\"));\n\n        case 3:\n          _await = _context.sent;\n          stdout = _await.stdout;\n          return _context.abrupt(\"return\", stdout);\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _stdout = _context.t0.stdout;\n          return _context.abrupt(\"return\", _stdout);\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 8]], Promise);\n};\n\nvar createAVD = function createAVD(androidSDKRoot, name, device, image) {\n  var abi, tag, avdmanager, _await2, stdout, configPath, content, updatedContent, stderr;\n\n  return _regeneratorRuntime.async(function createAVD$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          abi = image.includes('x86_64') ? 'x86_64' : 'x86';\n          tag = image.includes('google_apis') ? 'google_apis' : 'generic';\n          avdmanager = (0, _path().join)(androidSDKRoot, 'tools', 'bin', 'avdmanager.bat');\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap((0, _executeWinCommand.executeCommand)(avdmanager + \" -s create avd --force --name \\\"\" + name + \"\\\" --device \\\"\" + device + \"\\\" --package \\\"\" + image + \"\\\" --tag \\\"\" + tag + \"\\\" --abi \\\"\" + abi + \"\\\"\"));\n\n        case 6:\n          _await2 = _context2.sent;\n          stdout = _await2.stdout;\n          configPath = (0, _path().join)(process.env.HOMEPATH || '', '.android', 'avd', name + \".avd\", 'config.ini');\n          _context2.next = 11;\n          return _regeneratorRuntime.awrap((0, _fsExtra().readFile)(configPath, 'utf-8'));\n\n        case 11:\n          content = _context2.sent;\n          updatedContent = content.replace(/Sdk\\\\system-images/g, 'system-images');\n          _context2.next = 15;\n          return _regeneratorRuntime.awrap((0, _fsExtra().writeFile)(configPath, updatedContent, 'utf-8'));\n\n        case 15:\n          return _context2.abrupt(\"return\", stdout);\n\n        case 18:\n          _context2.prev = 18;\n          _context2.t0 = _context2[\"catch\"](0);\n          stderr = _context2.t0.stderr;\n          return _context2.abrupt(\"return\", stderr);\n\n        case 22:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 18]], Promise);\n};\n\nexports.createAVD = createAVD;\n\nvar getBestHypervisor = function getBestHypervisor(androidSDKRoot) {\n  var customHypervisor, stdout, lines, _iterator, _step, line, hypervisor;\n\n  return _regeneratorRuntime.async(function getBestHypervisor$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          customHypervisor = (0, _processorType.getProcessorType)() === 'Intel' ? 'HAXM' : 'AMDH';\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(getEmulatorAccelOutputInformation(androidSDKRoot));\n\n        case 3:\n          stdout = _context3.sent;\n          lines = stdout.split('\\n');\n          _iterator = _createForOfIteratorHelperLoose(lines);\n\n        case 6:\n          if ((_step = _iterator()).done) {\n            _context3.next = 13;\n            break;\n          }\n\n          line = _step.value;\n          hypervisor = parseHypervisor(line, customHypervisor);\n\n          if (!hypervisor) {\n            _context3.next = 11;\n            break;\n          }\n\n          return _context3.abrupt(\"return\", hypervisor);\n\n        case 11:\n          _context3.next = 6;\n          break;\n\n        case 13:\n          return _context3.abrupt(\"return\", {\n            hypervisor: 'none',\n            installed: false\n          });\n\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexports.getBestHypervisor = getBestHypervisor;\n\nvar enableWHPX = function enableWHPX() {\n  return (0, _executeWinCommand.executeCommand)('DISM /Quiet /NoRestart /Online /Enable-Feature /All /FeatureName:Microsoft-Hyper-V /FeatureName:HypervisorPlatform', true);\n};\n\nexports.enableWHPX = enableWHPX;\n\nvar enableHAXM = function enableHAXM(androidSdkInstallPath) {\n  return _regeneratorRuntime.async(function enableHAXM$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return _regeneratorRuntime.awrap(installComponent('extras;intel;Hardware_Accelerated_Execution_Manager', androidSdkInstallPath));\n\n        case 2:\n          _context4.next = 4;\n          return _regeneratorRuntime.awrap((0, _executeWinCommand.executeCommand)((0, _path().join)(androidSdkInstallPath, 'Sdk', 'extras', 'intel', 'Hardware_Accelerated_Execution_Manager', 'silent_install.bat')));\n\n        case 4:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexports.enableHAXM = enableHAXM;\n\nvar enableAMDH = function enableAMDH(androidSdkInstallPath) {\n  return _regeneratorRuntime.async(function enableAMDH$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return _regeneratorRuntime.awrap(installComponent('extras;google;Android_Emulator_Hypervisor_Driver', androidSdkInstallPath));\n\n        case 2:\n          _context5.next = 4;\n          return _regeneratorRuntime.awrap((0, _executeWinCommand.executeCommand)((0, _path().join)(androidSdkInstallPath, 'Sdk', 'extras', 'google', 'Android_Emulator_Hypervisor_Driver', 'silent_install.bat')));\n\n        case 4:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexports.enableAMDH = enableAMDH;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli/build/tools/windows/androidWinHelpers.js"],"names":["Object","defineProperty","exports","value","enableAMDH","enableHAXM","enableWHPX","getBestHypervisor","createAVD","installComponent","getAndroidSdkRootInstallation","getUserAndroidPath","_fsExtra","data","require","_path","_executeWinCommand","_processorType","join","process","env","LOCALAPPDATA","ANDROID_SDK_ROOT","ANDROID_HOME","installPath","pathExistsSync","component","androidSdkRoot","Promise","done","error","sdkmanager","command","child","executeCommand","stderr","stdout","on","includes","stdin","write","toString","exitStatus","parseHypervisor","status","customHypervisor","hypervisor","installed","test","getEmulatorAccelOutputInformation","androidSDKRoot","name","device","image","abi","tag","avdmanager","configPath","HOMEPATH","readFile","content","updatedContent","replace","writeFile","getProcessorType","lines","split","line","androidSdkInstallPath"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.enableAMDH = exports.enableHAXM = exports.enableWHPX = exports.getBestHypervisor = exports.createAVD = exports.installComponent = exports.getAndroidSdkRootInstallation = exports.getUserAndroidPath = void 0;\n\nfunction _fsExtra() {\n  const data = require(\"fs-extra\");\n\n  _fsExtra = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  const data = require(\"path\");\n\n  _path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _executeWinCommand = require(\"./executeWinCommand\");\n\nvar _processorType = require(\"./processorType\");\n\n/**\n * Returns the path to where all Android related things should be installed\n * locally to the user.\n */\nconst getUserAndroidPath = () => {\n  return (0, _path().join)(process.env.LOCALAPPDATA || '', 'Android');\n};\n/**\n * Deals with ANDROID_HOME, ANDROID_SDK_ROOT or generates a new one\n */\n\n\nexports.getUserAndroidPath = getUserAndroidPath;\n\nconst getAndroidSdkRootInstallation = () => {\n  const env = process.env.ANDROID_SDK_ROOT || process.env.ANDROID_HOME;\n  const installPath = env ? // Happens if previous installations or not fully completed\n  env : // All Android zip files have a root folder, using `Android` as the common place\n  (0, _path().join)(getUserAndroidPath(), 'Sdk');\n\n  if ((0, _fsExtra().pathExistsSync)(installPath)) {\n    return installPath;\n  } else {\n    return '';\n  }\n};\n/**\n * Installs an Android component (e.g.: `platform-tools`, `emulator`)\n * using the `sdkmanager` tool and automatically accepting the licenses.\n */\n\n\nexports.getAndroidSdkRootInstallation = getAndroidSdkRootInstallation;\n\nconst installComponent = (component, androidSdkRoot) => {\n  return new Promise((done, error) => {\n    const sdkmanager = (0, _path().join)(androidSdkRoot, 'tools', 'bin', 'sdkmanager.bat');\n    const command = `\"${sdkmanager}\" --sdk_root=\"${androidSdkRoot}\" \"${component}\"`;\n    const child = (0, _executeWinCommand.executeCommand)(command);\n    let stderr = '';\n    child.stdout.on('data', data => {\n      if (data.includes('(y/N)')) {\n        child.stdin.write('y\\n');\n      }\n    });\n    child.stderr.on('data', data => {\n      stderr += data.toString('utf-8');\n    });\n    child.on('close', exitStatus => {\n      if (exitStatus === 0) {\n        done();\n      } else {\n        error({\n          stderr\n        });\n      }\n    });\n    child.on('error', error);\n  });\n};\n/**\n * For the given custom Hypervisor and the output of `emulator-check accel`\n * returns the preferred Hypervisor to use and its installation status.\n * The recommendation order is:\n * 1. WHPX\n * 2. HAXM if Intel\n * 3. AMDH if AMD\n */\n\n\nexports.installComponent = installComponent;\n\nconst parseHypervisor = (status, customHypervisor) => {\n  /**\n   * Messages:\n   * Android Emulator requires an Intel processor with VT-x and NX support.  Your CPU: 'AuthenticAMD'\n   * HAXM is not installed, but Windows Hypervisor Platform is available.\n   * WHPX (10.0.19041) is installed and usable.\n   * * This message outputs for WHPX and when the AMD Hypervisor is installed\n   * HAXM version 6.2.1 (4) is installed and usable.\n   * HAXM is not installed on this machine\n   */\n  if (status.includes('is not installed, but Windows Hypervisor Platform is available.')) {\n    return {\n      hypervisor: 'WHPX',\n      installed: false\n    };\n  }\n\n  if (/WHPX \\((\\d|\\.)+\\) is installed and usable\\./.test(status)) {\n    return {\n      hypervisor: 'WHPX',\n      installed: true\n    };\n  }\n\n  if (/is installed and usable\\./.test(status)) {\n    return {\n      hypervisor: customHypervisor,\n      installed: true\n    };\n  }\n\n  if (status.includes(\"Your CPU: 'AuthenticAMD'\")) {\n    return {\n      hypervisor: customHypervisor,\n      installed: false\n    };\n  }\n\n  if (status.includes('is not installed on this machine')) {\n    return {\n      hypervisor: 'none',\n      installed: false\n    };\n  }\n\n  return null;\n};\n\nconst getEmulatorAccelOutputInformation = async androidSDKRoot => {\n  /**\n   * The output of the following command is something like:\n   *\n   * ```\n   * accel:\n   * 0\n   * WHPX (10.0.19041) is installed and usable.\n   * accel\n   * ```\n   *\n   * If it fails it will still output to stdout with a similar format:\n   *\n   * ```\n   * accel:\n   * 1\n   * Android Emulator does not support nested virtualization.  Your VM host: 'Microsoft Hv' (Hyper-V)\n   * accel\n   * ```\n   *\n   */\n  try {\n    const {\n      stdout\n    } = await (0, _executeWinCommand.executeCommand)(`\"${(0, _path().join)(androidSDKRoot, 'emulator', 'emulator-check.exe')}\" accel`);\n    return stdout;\n  } catch (e) {\n    const {\n      stdout\n    } = e;\n    return stdout;\n  }\n};\n/**\n * Creates a new Android Virtual Device in the default folder with the\n * name, device and system image passed by parameter.\n */\n\n\nconst createAVD = async (androidSDKRoot, name, device, image) => {\n  try {\n    const abi = image.includes('x86_64') ? 'x86_64' : 'x86';\n    const tag = image.includes('google_apis') ? 'google_apis' : 'generic';\n    const avdmanager = (0, _path().join)(androidSDKRoot, 'tools', 'bin', 'avdmanager.bat');\n    const {\n      stdout\n    } = await (0, _executeWinCommand.executeCommand)(`${avdmanager} -s create avd --force --name \"${name}\" --device \"${device}\" --package \"${image}\" --tag \"${tag}\" --abi \"${abi}\"`); // For some reason `image.sysdir.1` in `config.ini` points to the wrong location and needs to be updated\n\n    const configPath = (0, _path().join)(process.env.HOMEPATH || '', '.android', 'avd', `${name}.avd`, 'config.ini');\n    const content = await (0, _fsExtra().readFile)(configPath, 'utf-8');\n    const updatedContent = content.replace(/Sdk\\\\system-images/g, 'system-images');\n    await (0, _fsExtra().writeFile)(configPath, updatedContent, 'utf-8');\n    return stdout;\n  } catch (e) {\n    const {\n      stderr\n    } = e;\n    return stderr;\n  }\n};\n/**\n * Returns what hypervisor should be installed for the Android emulator\n * using [Microsoft's official\n * documentation](https://docs.microsoft.com/en-us/xamarin/android/get-started/installation/android-emulator/hardware-acceleration?pivots=windows)\n * as a reference.\n */\n\n\nexports.createAVD = createAVD;\n\nconst getBestHypervisor = async androidSDKRoot => {\n  const customHypervisor = (0, _processorType.getProcessorType)() === 'Intel' ? 'HAXM' : 'AMDH';\n  const stdout = await getEmulatorAccelOutputInformation(androidSDKRoot);\n  const lines = stdout.split('\\n');\n\n  for (const line of lines) {\n    const hypervisor = parseHypervisor(line, customHypervisor);\n\n    if (hypervisor) {\n      return hypervisor;\n    }\n  } // Couldn't identify the best one to run so not doing anything\n\n\n  return {\n    hypervisor: 'none',\n    installed: false\n  };\n};\n/**\n * Enables the Windows HypervisorPlatform and Hyper-V features.\n * Will prompt the User Account Control (UAC)\n */\n\n\nexports.getBestHypervisor = getBestHypervisor;\n\nconst enableWHPX = () => {\n  return (0, _executeWinCommand.executeCommand)('DISM /Quiet /NoRestart /Online /Enable-Feature /All /FeatureName:Microsoft-Hyper-V /FeatureName:HypervisorPlatform', true);\n};\n/**\n * Installs and enables the [HAXM](https://github.com/intel/haxm)\n * version available through the Android SDK manager.\n * @param androidSdkInstallPath The path to the Android SDK installation\n */\n\n\nexports.enableWHPX = enableWHPX;\n\nconst enableHAXM = async androidSdkInstallPath => {\n  await installComponent('extras;intel;Hardware_Accelerated_Execution_Manager', androidSdkInstallPath);\n  await (0, _executeWinCommand.executeCommand)((0, _path().join)(androidSdkInstallPath, 'Sdk', 'extras', 'intel', 'Hardware_Accelerated_Execution_Manager', 'silent_install.bat'));\n};\n/**\n * Installs and enables the\n * [Hypervisor Driver for AMD Processors](https://androidstudio.googleblog.com/2019/10/android-emulator-hypervisor-driver-for.html)\n * version available through the Android SDK manager.\n * @param androidSdkInstallPath The path to the Android SDK installation\n */\n\n\nexports.enableHAXM = enableHAXM;\n\nconst enableAMDH = async androidSdkInstallPath => {\n  await installComponent('extras;google;Android_Emulator_Hypervisor_Driver', androidSdkInstallPath);\n  await (0, _executeWinCommand.executeCommand)((0, _path().join)(androidSdkInstallPath, 'Sdk', 'extras', 'google', 'Android_Emulator_Hypervisor_Driver', 'silent_install.bat'));\n};\n\nexports.enableAMDH = enableAMDH;\n\n//# sourceMappingURL=androidWinHelpers.js.map"]},"metadata":{},"sourceType":"script"}