{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nvar _jsxFileName = \"/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/RNTester/js/examples/TVEventHandler/TVEventHandlerExample.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar React = require('react');\n\nvar ReactNative = require(\"react-native-web/dist/index\");\n\nvar Platform = ReactNative.Platform,\n    View = ReactNative.View,\n    Text = ReactNative.Text,\n    TouchableOpacity = ReactNative.TouchableOpacity,\n    TVEventHandler = ReactNative.TVEventHandler;\n\nvar TVEventHandlerView = function (_React$Component) {\n  _inherits(TVEventHandlerView, _React$Component);\n\n  var _super = _createSuper(TVEventHandlerView);\n\n  function TVEventHandlerView(props) {\n    var _this;\n\n    _classCallCheck(this, TVEventHandlerView);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      lastEventType: ''\n    };\n    return _this;\n  }\n\n  _createClass(TVEventHandlerView, [{\n    key: \"_enableTVEventHandler\",\n    value: function _enableTVEventHandler() {\n      this._tvEventHandler = new TVEventHandler();\n\n      this._tvEventHandler.enable(this, function (cmp, evt) {\n        cmp.setState({\n          lastEventType: evt.eventType\n        });\n      });\n    }\n  }, {\n    key: \"_disableTVEventHandler\",\n    value: function _disableTVEventHandler() {\n      if (this._tvEventHandler) {\n        this._tvEventHandler.disable();\n\n        delete this._tvEventHandler;\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._enableTVEventHandler();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._disableTVEventHandler();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (Platform.isTV) {\n        return React.createElement(View, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 9\n          }\n        }, React.createElement(TouchableOpacity, {\n          onPress: function onPress() {},\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 11\n          }\n        }, React.createElement(Text, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }\n        }, \"This example enables an instance of TVEventHandler to show the last event detected from the Apple TV Siri remote or from a keyboard.\")), React.createElement(Text, {\n          style: {\n            color: 'blue'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 11\n          }\n        }, this.state.lastEventType));\n      } else {\n        return React.createElement(View, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 9\n          }\n        }, React.createElement(Text, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 11\n          }\n        }, \"This example is intended to be run on Apple TV.\"));\n      }\n    }\n  }]);\n\n  return TVEventHandlerView;\n}(React.Component);\n\nexports.framework = 'React';\nexports.title = 'TVEventHandler example';\nexports.description = 'iOS alerts and action sheets';\nexports.examples = [{\n  title: 'TVEventHandler',\n  render: function render() {\n    return React.createElement(TVEventHandlerView, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 14\n      }\n    });\n  }\n}];","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/RNTester/js/examples/TVEventHandler/TVEventHandlerExample.js"],"names":["React","require","Platform","ReactNative","View","Text","TouchableOpacity","TVEventHandler","TVEventHandlerView","props","state","lastEventType","_tvEventHandler","enable","cmp","evt","setState","eventType","disable","_enableTVEventHandler","_disableTVEventHandler","isTV","color","Component","exports","framework","title","description","examples","render"],"mappings":"AAUA;;;;;;;;;;;;;;;;;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;;;IAGOC,Q,GAA0DC,W,CAA1DD,Q;IAAUE,I,GAAgDD,W,CAAhDC,I;IAAMC,I,GAA0CF,W,CAA1CE,I;IAAMC,gB,GAAoCH,W,CAApCG,gB;IAAkBC,c,GAAkBJ,W,CAAlBI,c;;IAIzCC,kB;;;;;AACJ,8BAAYC,KAAZ,EAA0B;AAAA;;AAAA;;AACxB,8BAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,aAAa,EAAE;AADJ,KAAb;AAFwB;AAKzB;;;;WAID,iCAAwB;AACtB,WAAKC,eAAL,GAAuB,IAAIL,cAAJ,EAAvB;;AACA,WAAKK,eAAL,CAAqBC,MAArB,CAA4B,IAA5B,EAAkC,UAASC,GAAT,EAAcC,GAAd,EAAmB;AACnDD,QAAAA,GAAG,CAACE,QAAJ,CAAa;AACXL,UAAAA,aAAa,EAAEI,GAAG,CAACE;AADR,SAAb;AAGD,OAJD;AAKD;;;WAED,kCAAyB;AACvB,UAAI,KAAKL,eAAT,EAA0B;AACxB,aAAKA,eAAL,CAAqBM,OAArB;;AACA,eAAO,KAAKN,eAAZ;AACD;AACF;;;WAED,6BAAoB;AAClB,WAAKO,qBAAL;AACD;;;WAED,gCAAuB;AACrB,WAAKC,sBAAL;AACD;;;WAED,kBAAS;AACP,UAAIlB,QAAQ,CAACmB,IAAb,EAAmB;AACjB,eACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,gBAAD;AAAkB,UAAA,OAAO,EAAE,mBAAM,CAAE,CAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kJADF,CADF,EAQE,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAE;AAACC,YAAAA,KAAK,EAAE;AAAR,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA+B,KAAKZ,KAAL,CAAWC,aAA1C,CARF,CADF;AAYD,OAbD,MAaO;AACL,eACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6DADF,CADF;AAKD;AACF;;;;EAvD8BX,KAAK,CAACuB,S;;AA0DvCC,OAAO,CAACC,SAAR,GAAoB,OAApB;AACAD,OAAO,CAACE,KAAR,GAAgB,wBAAhB;AACAF,OAAO,CAACG,WAAR,GAAsB,8BAAtB;AACAH,OAAO,CAACI,QAAR,GAAmB,CACjB;AACEF,EAAAA,KAAK,EAAE,gBADT;AAEEG,EAAAA,MAFF,oBAEuB;AACnB,WAAO,oBAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;AAJH,CADiB,CAAnB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst React = require('react');\nconst ReactNative = require('react-native');\n\nconst {Platform, View, Text, TouchableOpacity, TVEventHandler} = ReactNative;\n\ntype Props = $ReadOnly<{||}>;\ntype State = {|lastEventType: string|};\nclass TVEventHandlerView extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      lastEventType: '',\n    };\n  }\n\n  _tvEventHandler: any;\n\n  _enableTVEventHandler() {\n    this._tvEventHandler = new TVEventHandler();\n    this._tvEventHandler.enable(this, function(cmp, evt) {\n      cmp.setState({\n        lastEventType: evt.eventType,\n      });\n    });\n  }\n\n  _disableTVEventHandler() {\n    if (this._tvEventHandler) {\n      this._tvEventHandler.disable();\n      delete this._tvEventHandler;\n    }\n  }\n\n  componentDidMount() {\n    this._enableTVEventHandler();\n  }\n\n  componentWillUnmount() {\n    this._disableTVEventHandler();\n  }\n\n  render() {\n    if (Platform.isTV) {\n      return (\n        <View>\n          <TouchableOpacity onPress={() => {}}>\n            <Text>\n              This example enables an instance of TVEventHandler to show the\n              last event detected from the Apple TV Siri remote or from a\n              keyboard.\n            </Text>\n          </TouchableOpacity>\n          <Text style={{color: 'blue'}}>{this.state.lastEventType}</Text>\n        </View>\n      );\n    } else {\n      return (\n        <View>\n          <Text>This example is intended to be run on Apple TV.</Text>\n        </View>\n      );\n    }\n  }\n}\n\nexports.framework = 'React';\nexports.title = 'TVEventHandler example';\nexports.description = 'iOS alerts and action sheets';\nexports.examples = [\n  {\n    title: 'TVEventHandler',\n    render(): React.Node {\n      return <TVEventHandlerView />;\n    },\n  },\n];\n"]},"metadata":{},"sourceType":"script"}