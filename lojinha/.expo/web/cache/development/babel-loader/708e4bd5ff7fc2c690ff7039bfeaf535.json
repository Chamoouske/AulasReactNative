{"ast":null,"code":"'use strict';\n\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport GlobalPerformanceLogger from \"../GlobalPerformanceLogger\";\nimport createPerformanceLogger from \"../createPerformanceLogger\";\nvar TIMESPAN_1 = '<timespan_1>';\nvar TIMESPAN_2 = '<timespan_2>';\nvar TIMESPAN_2_DURATION = 123;\nvar EXTRA_KEY = '<extra_key>';\nvar EXTRA_VALUE = '<extra_value>';\nvar EXTRA_VALUE_2 = '<extra_value_2>';\nvar POINT = '<point>';\nvar POINT_TIMESTAMP = 99;\nvar POINT_TIMESTAMP_2 = 999;\ndescribe('PerformanceLogger', function () {\n  beforeEach(function () {\n    GlobalPerformanceLogger.clear();\n  });\n  it('starts & stops and adds a timespan', function () {\n    var perfLogger = createPerformanceLogger();\n    perfLogger.startTimespan(TIMESPAN_1);\n    perfLogger.stopTimespan(TIMESPAN_1);\n    perfLogger.addTimespan(TIMESPAN_2, TIMESPAN_2_DURATION);\n    expect(perfLogger.hasTimespan(TIMESPAN_1)).toBe(true);\n    expect(perfLogger.hasTimespan(TIMESPAN_2)).toBe(true);\n    expect(perfLogger.getTimespans()[TIMESPAN_2].totalTime).toBe(TIMESPAN_2_DURATION);\n  });\n  it('does not override a timespan', function () {\n    var perfLogger = createPerformanceLogger();\n    perfLogger.startTimespan(TIMESPAN_1);\n    var old = perfLogger.getTimespans()[TIMESPAN_1];\n    perfLogger.startTimespan(TIMESPAN_1);\n    expect(perfLogger.getTimespans()[TIMESPAN_1]).toBe(old);\n    perfLogger.addTimespan(TIMESPAN_1, 1);\n    expect(perfLogger.getTimespans()[TIMESPAN_1]).toBe(old);\n  });\n  it('logs an extra', function () {\n    var perfLogger = createPerformanceLogger();\n    perfLogger.setExtra(EXTRA_KEY, EXTRA_VALUE);\n    expect(perfLogger.getExtras()).toEqual(_defineProperty({}, EXTRA_KEY, EXTRA_VALUE));\n  });\n  it('does not override a extra', function () {\n    var perfLogger = createPerformanceLogger();\n    perfLogger.setExtra(EXTRA_KEY, EXTRA_VALUE);\n    expect(perfLogger.getExtras()).toEqual(_defineProperty({}, EXTRA_KEY, EXTRA_VALUE));\n    perfLogger.setExtra(EXTRA_KEY, EXTRA_VALUE_2);\n    expect(perfLogger.getExtras()).toEqual(_defineProperty({}, EXTRA_KEY, EXTRA_VALUE));\n  });\n  it('removes an extra', function () {\n    var perfLogger = createPerformanceLogger();\n    perfLogger.setExtra(EXTRA_KEY, EXTRA_VALUE);\n    expect(perfLogger.getExtras()).toEqual(_defineProperty({}, EXTRA_KEY, EXTRA_VALUE));\n    expect(perfLogger.removeExtra(EXTRA_KEY)).toEqual(EXTRA_VALUE);\n    expect(perfLogger.getExtras()).toEqual({});\n  });\n  it('logs a point', function () {\n    var perfLogger = createPerformanceLogger();\n    perfLogger.markPoint(POINT, POINT_TIMESTAMP);\n    expect(perfLogger.getPoints()).toEqual(_defineProperty({}, POINT, POINT_TIMESTAMP));\n  });\n  it('does not override a point', function () {\n    var perfLogger = createPerformanceLogger();\n    perfLogger.markPoint(POINT, POINT_TIMESTAMP);\n    expect(perfLogger.getPoints()).toEqual(_defineProperty({}, POINT, POINT_TIMESTAMP));\n    perfLogger.markPoint(POINT, POINT_TIMESTAMP_2);\n    expect(perfLogger.getPoints()).toEqual(_defineProperty({}, POINT, POINT_TIMESTAMP));\n  });\n  it('global and local loggers do not conflict', function () {\n    var checkLogger = function checkLogger(logger, shouldBeEmpty) {\n      expect(Object.keys(logger.getTimespans())).toEqual(shouldBeEmpty ? [] : [TIMESPAN_1]);\n      expect(logger.getExtras()).toEqual(shouldBeEmpty ? {} : _defineProperty({}, EXTRA_KEY, EXTRA_VALUE));\n      expect(Object.keys(logger.getPoints())).toEqual(shouldBeEmpty ? [] : [POINT]);\n    };\n\n    var localPerformanceLogger1 = createPerformanceLogger();\n    var localPerformanceLogger2 = createPerformanceLogger();\n    localPerformanceLogger1.startTimespan(TIMESPAN_1);\n    localPerformanceLogger1.stopTimespan(TIMESPAN_1);\n    localPerformanceLogger1.setExtra(EXTRA_KEY, EXTRA_VALUE);\n    localPerformanceLogger1.markPoint(POINT);\n    checkLogger(localPerformanceLogger1, false);\n    checkLogger(localPerformanceLogger2, true);\n    checkLogger(GlobalPerformanceLogger, true);\n    localPerformanceLogger2.startTimespan(TIMESPAN_1);\n    localPerformanceLogger2.stopTimespan(TIMESPAN_1);\n    localPerformanceLogger2.setExtra(EXTRA_KEY, EXTRA_VALUE);\n    localPerformanceLogger2.markPoint(POINT, undefined);\n    checkLogger(localPerformanceLogger2, false);\n    checkLogger(GlobalPerformanceLogger, true);\n    GlobalPerformanceLogger.startTimespan(TIMESPAN_1);\n    GlobalPerformanceLogger.stopTimespan(TIMESPAN_1);\n    GlobalPerformanceLogger.setExtra(EXTRA_KEY, EXTRA_VALUE);\n    GlobalPerformanceLogger.markPoint(POINT);\n    checkLogger(GlobalPerformanceLogger, false);\n    localPerformanceLogger1.clear();\n    checkLogger(localPerformanceLogger1, true);\n    checkLogger(localPerformanceLogger2, false);\n    checkLogger(GlobalPerformanceLogger, false);\n    GlobalPerformanceLogger.clear();\n    checkLogger(localPerformanceLogger1, true);\n    checkLogger(localPerformanceLogger2, false);\n    checkLogger(GlobalPerformanceLogger, true);\n    localPerformanceLogger2.clear();\n    checkLogger(localPerformanceLogger1, true);\n    checkLogger(localPerformanceLogger2, true);\n    checkLogger(GlobalPerformanceLogger, true);\n  });\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Utilities/__tests__/PerformanceLogger-test.js"],"names":["GlobalPerformanceLogger","createPerformanceLogger","TIMESPAN_1","TIMESPAN_2","TIMESPAN_2_DURATION","EXTRA_KEY","EXTRA_VALUE","EXTRA_VALUE_2","POINT","POINT_TIMESTAMP","POINT_TIMESTAMP_2","describe","beforeEach","clear","it","perfLogger","startTimespan","stopTimespan","addTimespan","expect","hasTimespan","toBe","getTimespans","totalTime","old","setExtra","getExtras","toEqual","removeExtra","markPoint","getPoints","checkLogger","logger","shouldBeEmpty","Object","keys","localPerformanceLogger1","localPerformanceLogger2","undefined"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\n'use strict';\n\nimport GlobalPerformanceLogger from '../GlobalPerformanceLogger';\nimport createPerformanceLogger from '../createPerformanceLogger';\nimport type {IPerformanceLogger} from '../createPerformanceLogger';\n\nconst TIMESPAN_1 = '<timespan_1>';\nconst TIMESPAN_2 = '<timespan_2>';\nconst TIMESPAN_2_DURATION = 123;\nconst EXTRA_KEY = '<extra_key>';\nconst EXTRA_VALUE = '<extra_value>';\nconst EXTRA_VALUE_2 = '<extra_value_2>';\nconst POINT = '<point>';\nconst POINT_TIMESTAMP = 99;\nconst POINT_TIMESTAMP_2 = 999;\n\ndescribe('PerformanceLogger', () => {\n  beforeEach(() => {\n    GlobalPerformanceLogger.clear();\n  });\n\n  it('starts & stops and adds a timespan', () => {\n    let perfLogger = createPerformanceLogger();\n    perfLogger.startTimespan(TIMESPAN_1);\n    perfLogger.stopTimespan(TIMESPAN_1);\n    perfLogger.addTimespan(TIMESPAN_2, TIMESPAN_2_DURATION);\n    expect(perfLogger.hasTimespan(TIMESPAN_1)).toBe(true);\n    expect(perfLogger.hasTimespan(TIMESPAN_2)).toBe(true);\n    expect(perfLogger.getTimespans()[TIMESPAN_2].totalTime).toBe(\n      TIMESPAN_2_DURATION,\n    );\n  });\n\n  it('does not override a timespan', () => {\n    let perfLogger = createPerformanceLogger();\n    perfLogger.startTimespan(TIMESPAN_1);\n    let old = perfLogger.getTimespans()[TIMESPAN_1];\n    perfLogger.startTimespan(TIMESPAN_1);\n    expect(perfLogger.getTimespans()[TIMESPAN_1]).toBe(old);\n    perfLogger.addTimespan(TIMESPAN_1, 1);\n    expect(perfLogger.getTimespans()[TIMESPAN_1]).toBe(old);\n  });\n\n  it('logs an extra', () => {\n    let perfLogger = createPerformanceLogger();\n    perfLogger.setExtra(EXTRA_KEY, EXTRA_VALUE);\n    expect(perfLogger.getExtras()).toEqual({\n      [EXTRA_KEY]: EXTRA_VALUE,\n    });\n  });\n\n  it('does not override a extra', () => {\n    let perfLogger = createPerformanceLogger();\n    perfLogger.setExtra(EXTRA_KEY, EXTRA_VALUE);\n    expect(perfLogger.getExtras()).toEqual({\n      [EXTRA_KEY]: EXTRA_VALUE,\n    });\n    perfLogger.setExtra(EXTRA_KEY, EXTRA_VALUE_2);\n    expect(perfLogger.getExtras()).toEqual({\n      [EXTRA_KEY]: EXTRA_VALUE,\n    });\n  });\n\n  it('removes an extra', () => {\n    let perfLogger = createPerformanceLogger();\n    perfLogger.setExtra(EXTRA_KEY, EXTRA_VALUE);\n    expect(perfLogger.getExtras()).toEqual({\n      [EXTRA_KEY]: EXTRA_VALUE,\n    });\n    expect(perfLogger.removeExtra(EXTRA_KEY)).toEqual(EXTRA_VALUE);\n    expect(perfLogger.getExtras()).toEqual({});\n  });\n\n  it('logs a point', () => {\n    let perfLogger = createPerformanceLogger();\n    perfLogger.markPoint(POINT, POINT_TIMESTAMP);\n    expect(perfLogger.getPoints()).toEqual({\n      [POINT]: POINT_TIMESTAMP,\n    });\n  });\n\n  it('does not override a point', () => {\n    let perfLogger = createPerformanceLogger();\n    perfLogger.markPoint(POINT, POINT_TIMESTAMP);\n    expect(perfLogger.getPoints()).toEqual({\n      [POINT]: POINT_TIMESTAMP,\n    });\n    perfLogger.markPoint(POINT, POINT_TIMESTAMP_2);\n    expect(perfLogger.getPoints()).toEqual({\n      [POINT]: POINT_TIMESTAMP,\n    });\n  });\n\n  it('global and local loggers do not conflict', () => {\n    let checkLogger = (logger: IPerformanceLogger, shouldBeEmpty: boolean) => {\n      expect(Object.keys(logger.getTimespans())).toEqual(\n        shouldBeEmpty ? [] : [TIMESPAN_1],\n      );\n      expect(logger.getExtras()).toEqual(\n        shouldBeEmpty\n          ? {}\n          : {\n              [EXTRA_KEY]: EXTRA_VALUE,\n            },\n      );\n      expect(Object.keys(logger.getPoints())).toEqual(\n        shouldBeEmpty ? [] : [POINT],\n      );\n    };\n    let localPerformanceLogger1 = createPerformanceLogger();\n    let localPerformanceLogger2 = createPerformanceLogger();\n    localPerformanceLogger1.startTimespan(TIMESPAN_1);\n    localPerformanceLogger1.stopTimespan(TIMESPAN_1);\n    localPerformanceLogger1.setExtra(EXTRA_KEY, EXTRA_VALUE);\n    localPerformanceLogger1.markPoint(POINT);\n    checkLogger(localPerformanceLogger1, false);\n    checkLogger(localPerformanceLogger2, true);\n    checkLogger(GlobalPerformanceLogger, true);\n    localPerformanceLogger2.startTimespan(TIMESPAN_1);\n    localPerformanceLogger2.stopTimespan(TIMESPAN_1);\n    localPerformanceLogger2.setExtra(EXTRA_KEY, EXTRA_VALUE);\n    localPerformanceLogger2.markPoint(POINT, undefined);\n    checkLogger(localPerformanceLogger2, false);\n    checkLogger(GlobalPerformanceLogger, true);\n    GlobalPerformanceLogger.startTimespan(TIMESPAN_1);\n    GlobalPerformanceLogger.stopTimespan(TIMESPAN_1);\n    GlobalPerformanceLogger.setExtra(EXTRA_KEY, EXTRA_VALUE);\n    GlobalPerformanceLogger.markPoint(POINT);\n    checkLogger(GlobalPerformanceLogger, false);\n    localPerformanceLogger1.clear();\n    checkLogger(localPerformanceLogger1, true);\n    checkLogger(localPerformanceLogger2, false);\n    checkLogger(GlobalPerformanceLogger, false);\n    GlobalPerformanceLogger.clear();\n    checkLogger(localPerformanceLogger1, true);\n    checkLogger(localPerformanceLogger2, false);\n    checkLogger(GlobalPerformanceLogger, true);\n    localPerformanceLogger2.clear();\n    checkLogger(localPerformanceLogger1, true);\n    checkLogger(localPerformanceLogger2, true);\n    checkLogger(GlobalPerformanceLogger, true);\n  });\n});\n"]},"metadata":{},"sourceType":"module"}