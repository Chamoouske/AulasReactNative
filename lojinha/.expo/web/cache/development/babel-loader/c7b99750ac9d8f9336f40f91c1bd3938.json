{"ast":null,"code":"'use strict';\n\njest.mock(\"../../vendor/core/ErrorUtils\").mock('../../BatchedBridge/BatchedBridge');\n\nfunction expectToBeCalledOnce(fn) {\n  expect(fn.mock.calls.length).toBe(1);\n}\n\ndescribe('Batchinator', function () {\n  var Batchinator = require(\"../Batchinator\");\n\n  it('executes vanilla tasks', function () {\n    var callback = jest.fn();\n    var batcher = new Batchinator(callback, 10000);\n    batcher.schedule();\n    jest.runAllTimers();\n    expectToBeCalledOnce(callback);\n  });\n  it('batches up tasks', function () {\n    var callback = jest.fn();\n    var batcher = new Batchinator(callback, 10000);\n    batcher.schedule();\n    batcher.schedule();\n    batcher.schedule();\n    batcher.schedule();\n    expect(callback).not.toBeCalled();\n    jest.runAllTimers();\n    expectToBeCalledOnce(callback);\n  });\n  it('flushes on dispose', function () {\n    var callback = jest.fn();\n    var batcher = new Batchinator(callback, 10000);\n    batcher.schedule();\n    batcher.schedule();\n    batcher.dispose();\n    expectToBeCalledOnce(callback);\n    jest.runAllTimers();\n    expectToBeCalledOnce(callback);\n  });\n  it('should call tasks scheduled by the callback', function () {\n    var batcher = null;\n    var hasRescheduled = false;\n    var callback = jest.fn(function () {\n      if (!hasRescheduled) {\n        batcher.schedule();\n        hasRescheduled = true;\n      }\n    });\n    batcher = new Batchinator(callback, 10000);\n    batcher.schedule();\n    jest.runAllTimers();\n    expect(callback.mock.calls.length).toBe(2);\n  });\n  it('does not run callbacks more than once', function () {\n    var callback = jest.fn();\n    var batcher = new Batchinator(callback, 10000);\n    batcher.schedule();\n    batcher.schedule();\n    jest.runAllTimers();\n    expectToBeCalledOnce(callback);\n    jest.runAllTimers();\n    expectToBeCalledOnce(callback);\n    batcher.dispose();\n    expectToBeCalledOnce(callback);\n  });\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Interaction/__tests__/Batchinator-test.js"],"names":["jest","mock","expectToBeCalledOnce","fn","expect","calls","length","toBe","describe","Batchinator","require","it","callback","batcher","schedule","runAllTimers","not","toBeCalled","dispose","hasRescheduled"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @emails oncall+react_native\n */\n\n'use strict';\n\njest\n  .mock('../../vendor/core/ErrorUtils')\n  .mock('../../BatchedBridge/BatchedBridge');\n\nfunction expectToBeCalledOnce(fn) {\n  expect(fn.mock.calls.length).toBe(1);\n}\n\ndescribe('Batchinator', () => {\n  const Batchinator = require('../Batchinator');\n\n  it('executes vanilla tasks', () => {\n    const callback = jest.fn();\n    const batcher = new Batchinator(callback, 10000);\n    batcher.schedule();\n    jest.runAllTimers();\n    expectToBeCalledOnce(callback);\n  });\n\n  it('batches up tasks', () => {\n    const callback = jest.fn();\n    const batcher = new Batchinator(callback, 10000);\n    batcher.schedule();\n    batcher.schedule();\n    batcher.schedule();\n    batcher.schedule();\n    expect(callback).not.toBeCalled();\n    jest.runAllTimers();\n    expectToBeCalledOnce(callback);\n  });\n\n  it('flushes on dispose', () => {\n    const callback = jest.fn();\n    const batcher = new Batchinator(callback, 10000);\n    batcher.schedule();\n    batcher.schedule();\n    batcher.dispose();\n    expectToBeCalledOnce(callback);\n    jest.runAllTimers();\n    expectToBeCalledOnce(callback);\n  });\n\n  it('should call tasks scheduled by the callback', () => {\n    let batcher = null;\n    let hasRescheduled = false;\n    const callback = jest.fn(() => {\n      if (!hasRescheduled) {\n        batcher.schedule();\n        hasRescheduled = true;\n      }\n    });\n    batcher = new Batchinator(callback, 10000);\n    batcher.schedule();\n    jest.runAllTimers();\n    expect(callback.mock.calls.length).toBe(2);\n  });\n\n  it('does not run callbacks more than once', () => {\n    const callback = jest.fn();\n    const batcher = new Batchinator(callback, 10000);\n    batcher.schedule();\n    batcher.schedule();\n    jest.runAllTimers();\n    expectToBeCalledOnce(callback);\n    jest.runAllTimers();\n    expectToBeCalledOnce(callback);\n    batcher.dispose();\n    expectToBeCalledOnce(callback);\n  });\n});\n"]},"metadata":{},"sourceType":"script"}