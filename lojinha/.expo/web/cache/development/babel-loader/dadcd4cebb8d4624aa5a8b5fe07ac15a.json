{"ast":null,"code":"'use strict';\n\njest.setMock(\"../../BatchedBridge/NativeModules\", {\n  BlobModule: require(\"../__mocks__/BlobModule\")\n});\n\nvar Blob = require(\"../Blob\");\n\ndescribe('Blob', function () {\n  it('should create empty blob', function () {\n    var blob = new Blob();\n    expect(blob).toBeInstanceOf(Blob);\n    expect(blob.data.offset).toBe(0);\n    expect(blob.data.size).toBe(0);\n    expect(blob.size).toBe(0);\n    expect(blob.type).toBe('');\n  });\n  it('should create blob from other blobs and strings', function () {\n    var blobA = new Blob();\n    var blobB = new Blob();\n    var textA = \"i \\u2665 dogs\";\n    var textB = \"\\uD800\\uDC00\";\n    var textC = \"Z\\u0351\\u036B\\u0343\\u036A\\u0302\\u036B\\u033D\\u034F\\u0334\\u0319\\u0324\" + \"\\u031E\\u0349\\u035A\\u032F\\u031E\\u0320\\u034DA\\u036B\\u0357\\u0334\\u0362\" + \"\\u0335\\u031C\\u0330\\u0354L\\u0368\\u0367\\u0369\\u0358\\u0320G\\u0311\\u0357\" + \"\\u030E\\u0305\\u035B\\u0341\\u0334\\u033B\\u0348\\u034D\\u0354\\u0339O\\u0342\" + \"\\u030C\\u030C\\u0358\\u0328\\u0335\\u0339\\u033B\\u031D\\u0333!\\u033F\\u030B\" + \"\\u0365\\u0365\\u0302\\u0363\\u0310\\u0301\\u0301\\u035E\\u035C\\u0356\\u032C\" + \"\\u0330\\u0319\\u0317\";\n    blobA.data.size = 34540;\n    blobB.data.size = 65452;\n    var blob = new Blob([blobA, blobB, textA, textB, textC]);\n    expect(blob.size).toBe(blobA.size + blobB.size + global.Buffer.byteLength(textA, 'UTF-8') + global.Buffer.byteLength(textB, 'UTF-8') + global.Buffer.byteLength(textC, 'UTF-8'));\n    expect(blob.type).toBe('');\n  });\n  it('should slice a blob', function () {\n    var blob = new Blob();\n    blob.data.size = 34546;\n    var sliceA = blob.slice(0, 2354);\n    expect(sliceA.data.offset).toBe(0);\n    expect(sliceA.size).toBe(2354);\n    expect(sliceA.type).toBe('');\n    var sliceB = blob.slice(2384, 7621);\n    expect(sliceB.data.offset).toBe(2384);\n    expect(sliceB.size).toBe(7621 - 2384);\n    expect(sliceB.type).toBe('');\n  });\n  it('should close a blob', function () {\n    var blob = new Blob();\n    blob.close();\n    expect(function () {\n      return blob.size;\n    }).toThrow();\n  });\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Blob/__tests__/Blob-test.js"],"names":["jest","setMock","BlobModule","require","Blob","describe","it","blob","expect","toBeInstanceOf","data","offset","toBe","size","type","blobA","blobB","textA","textB","textC","global","Buffer","byteLength","sliceA","slice","sliceB","close","toThrow"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @emails oncall+react_native\n */\n\n'use strict';\n\njest.setMock('../../BatchedBridge/NativeModules', {\n  BlobModule: require('../__mocks__/BlobModule'),\n});\n\nconst Blob = require('../Blob');\n\ndescribe('Blob', function() {\n  it('should create empty blob', () => {\n    const blob = new Blob();\n    expect(blob).toBeInstanceOf(Blob);\n    expect(blob.data.offset).toBe(0);\n    expect(blob.data.size).toBe(0);\n    expect(blob.size).toBe(0);\n    expect(blob.type).toBe('');\n  });\n\n  it('should create blob from other blobs and strings', () => {\n    const blobA = new Blob();\n    const blobB = new Blob();\n    const textA = 'i \\u2665 dogs';\n    const textB = '\\uD800\\uDC00';\n    const textC =\n      'Z\\u0351\\u036B\\u0343\\u036A\\u0302\\u036B\\u033D\\u034F\\u0334\\u0319\\u0324' +\n      '\\u031E\\u0349\\u035A\\u032F\\u031E\\u0320\\u034DA\\u036B\\u0357\\u0334\\u0362' +\n      '\\u0335\\u031C\\u0330\\u0354L\\u0368\\u0367\\u0369\\u0358\\u0320G\\u0311\\u0357' +\n      '\\u030E\\u0305\\u035B\\u0341\\u0334\\u033B\\u0348\\u034D\\u0354\\u0339O\\u0342' +\n      '\\u030C\\u030C\\u0358\\u0328\\u0335\\u0339\\u033B\\u031D\\u0333!\\u033F\\u030B' +\n      '\\u0365\\u0365\\u0302\\u0363\\u0310\\u0301\\u0301\\u035E\\u035C\\u0356\\u032C' +\n      '\\u0330\\u0319\\u0317';\n\n    blobA.data.size = 34540;\n    blobB.data.size = 65452;\n\n    const blob = new Blob([blobA, blobB, textA, textB, textC]);\n\n    expect(blob.size).toBe(\n      blobA.size +\n        blobB.size +\n        global.Buffer.byteLength(textA, 'UTF-8') +\n        global.Buffer.byteLength(textB, 'UTF-8') +\n        global.Buffer.byteLength(textC, 'UTF-8'),\n    );\n    expect(blob.type).toBe('');\n  });\n\n  it('should slice a blob', () => {\n    const blob = new Blob();\n\n    blob.data.size = 34546;\n\n    const sliceA = blob.slice(0, 2354);\n\n    expect(sliceA.data.offset).toBe(0);\n    expect(sliceA.size).toBe(2354);\n    expect(sliceA.type).toBe('');\n\n    const sliceB = blob.slice(2384, 7621);\n\n    expect(sliceB.data.offset).toBe(2384);\n    expect(sliceB.size).toBe(7621 - 2384);\n    expect(sliceB.type).toBe('');\n  });\n\n  it('should close a blob', () => {\n    const blob = new Blob();\n\n    blob.close();\n\n    expect(() => blob.size).toThrow();\n  });\n});\n"]},"metadata":{},"sourceType":"script"}