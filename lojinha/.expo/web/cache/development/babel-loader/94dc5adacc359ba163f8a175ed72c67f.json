{"ast":null,"code":"'use strict';\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\njest.setMock(\"../../BatchedBridge/NativeModules\", {\n  BlobModule: require(\"../__mocks__/BlobModule\")\n});\n\nvar Blob = require(\"../Blob\");\n\nvar File = require(\"../File\");\n\ndescribe('babel 7 smoke test', function () {\n  it('should be able to extend a class with native name', function () {\n    var called = false;\n\n    var Array = function Array() {\n      _classCallCheck(this, Array);\n\n      called = true;\n      return {\n        foo: 'PASS'\n      };\n    };\n\n    var A = function (_Array) {\n      _inherits(A, _Array);\n\n      var _super = _createSuper(A);\n\n      function A() {\n        _classCallCheck(this, A);\n\n        return _super.call(this);\n      }\n\n      return A;\n    }(Array);\n\n    expect(new A().foo).toBe('PASS');\n    expect(called).toBe(true);\n  });\n});\ndescribe('Blob', function () {\n  it('regression caused by circular dep && babel 7', function () {\n    var blob = new Blob([], {\n      type: 'image/jpeg'\n    });\n    expect(blob).toBeInstanceOf(Blob);\n  });\n});\ndescribe('File', function () {\n  it('should create empty file', function () {\n    var file = new File([], 'test.jpg');\n    expect(file).toBeInstanceOf(File);\n    expect(file.data.offset).toBe(0);\n    expect(file.data.size).toBe(0);\n    expect(file.size).toBe(0);\n    expect(file.type).toBe('');\n    expect(file.name).toBe('test.jpg');\n    expect(file.lastModified).toEqual(expect.any(Number));\n  });\n  it('should create empty file with type', function () {\n    var file = new File([], 'test.jpg', {\n      type: 'image/jpeg'\n    });\n    expect(file.type).toBe('image/jpeg');\n  });\n  it('should create empty file with lastModified', function () {\n    var file = new File([], 'test.jpg', {\n      lastModified: 1337\n    });\n    expect(file.lastModified).toBe(1337);\n  });\n  it('should throw on invalid arguments', function () {\n    expect(function () {\n      return new File();\n    }).toThrow();\n    expect(function () {\n      return new File([]);\n    }).toThrow();\n  });\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Blob/__tests__/File-test.js"],"names":["jest","setMock","BlobModule","require","Blob","File","describe","it","called","Array","foo","A","expect","toBe","blob","type","toBeInstanceOf","file","data","offset","size","name","lastModified","toEqual","any","Number","toThrow"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @emails oncall+react_native\n */\n\n'use strict';\n\njest.setMock('../../BatchedBridge/NativeModules', {\n  BlobModule: require('../__mocks__/BlobModule'),\n});\n\nconst Blob = require('../Blob');\nconst File = require('../File');\n\ndescribe('babel 7 smoke test', function() {\n  it('should be able to extend a class with native name', function() {\n    let called = false;\n    class Array {\n      constructor() {\n        called = true;\n        return {foo: 'PASS'};\n      }\n    }\n    class A extends Array {\n      constructor() {\n        super();\n      }\n    }\n\n    // there is/was a regression in Babel where this would break and super()\n    // would not actually invoke the constructor of the parent class if the\n    // parent class had a name matching a built-in class (like Blob)\n    expect(new A().foo).toBe('PASS');\n    expect(called).toBe(true);\n  });\n});\n\ndescribe('Blob', function() {\n  it('regression caused by circular dep && babel 7', function() {\n    const blob = new Blob([], {type: 'image/jpeg'});\n    expect(blob).toBeInstanceOf(Blob);\n  });\n});\n\ndescribe('File', function() {\n  it('should create empty file', () => {\n    const file = new File([], 'test.jpg');\n    expect(file).toBeInstanceOf(File);\n    expect(file.data.offset).toBe(0);\n    expect(file.data.size).toBe(0);\n    expect(file.size).toBe(0);\n    expect(file.type).toBe('');\n    expect(file.name).toBe('test.jpg');\n    expect(file.lastModified).toEqual(expect.any(Number));\n  });\n\n  it('should create empty file with type', () => {\n    const file = new File([], 'test.jpg', {type: 'image/jpeg'});\n    expect(file.type).toBe('image/jpeg');\n  });\n\n  it('should create empty file with lastModified', () => {\n    const file = new File([], 'test.jpg', {lastModified: 1337});\n    expect(file.lastModified).toBe(1337);\n  });\n\n  it('should throw on invalid arguments', () => {\n    expect(() => new File()).toThrow();\n    expect(() => new File([])).toThrow();\n  });\n});\n"]},"metadata":{},"sourceType":"script"}