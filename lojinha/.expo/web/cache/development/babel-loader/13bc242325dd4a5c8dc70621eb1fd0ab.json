{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _common = require(\"./common\");\n\nvar _findProjectRoot = _interopRequireDefault(require(\"../../../tools/config/findProjectRoot\"));\n\nvar _androidWinHelpers = require(\"../../../tools/windows/androidWinHelpers\");\n\nvar _downloadAndUnzip = require(\"../../../tools/downloadAndUnzip\");\n\nvar _environmentVariables = require(\"../../../tools/windows/environmentVariables\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar getBuildToolsVersion = function getBuildToolsVersion() {\n  var projectRoot = '';\n\n  try {\n    projectRoot = (0, _findProjectRoot.default)();\n  } catch (_unused) {\n    _cliTools().logger.log();\n\n    _cliTools().logger.warn(\"We couldn't find a package.json in this directory. Android SDK checks may fail. Doctor works best in a React Native project root.\");\n  }\n\n  var gradleBuildFilePath = _path().default.join(projectRoot, 'android/build.gradle');\n\n  var buildToolsVersionEntry = 'buildToolsVersion';\n\n  if (!_fs().default.existsSync(gradleBuildFilePath)) {\n    return 'Not Found';\n  }\n\n  var gradleBuildFile = _fs().default.readFileSync(gradleBuildFilePath, 'utf-8');\n\n  var buildToolsVersionIndex = gradleBuildFile.indexOf(buildToolsVersionEntry);\n  var buildToolsVersion = (gradleBuildFile.substring(buildToolsVersionIndex).split('\\n')[0].match(/\\d|\\../g) || []).join('');\n  return buildToolsVersion || 'Not Found';\n};\n\nvar installMessage = \"Read more about how to update Android SDK at \" + _chalk().default.dim('https://developer.android.com/studio');\n\nvar isSDKInstalled = function isSDKInstalled(environmentInfo) {\n  var version = environmentInfo.SDKs['Android SDK'];\n  return version !== 'Not Found';\n};\n\nvar _default = {\n  label: 'Android SDK',\n  description: 'Required for building and installing your app on Android',\n  getDiagnostics: function getDiagnostics(_ref) {\n    var SDKs, requiredVersion, buildTools, isAndroidSDKInstalled, isRequiredVersionInstalled;\n    return _regeneratorRuntime.async(function getDiagnostics$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            SDKs = _ref.SDKs;\n            requiredVersion = getBuildToolsVersion();\n            buildTools = typeof SDKs['Android SDK'] === 'string' ? SDKs['Android SDK'] : SDKs['Android SDK']['Build Tools'];\n            isAndroidSDKInstalled = Array.isArray(buildTools);\n            isRequiredVersionInstalled = isAndroidSDKInstalled ? buildTools.includes(requiredVersion) : false;\n            return _context.abrupt(\"return\", {\n              versions: isAndroidSDKInstalled ? buildTools : SDKs['Android SDK'],\n              versionRange: requiredVersion,\n              needsToBeFixed: !isRequiredVersionInstalled\n            });\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  win32AutomaticFix: function win32AutomaticFix(_ref2) {\n    var loader, cliToolsUrl, systemImage, componentsToInstall, androidSDKRoot, _i, _componentsToInstall, component, _await, hypervisor, installed;\n\n    return _regeneratorRuntime.async(function win32AutomaticFix$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            loader = _ref2.loader;\n            cliToolsUrl = 'https://dl.google.com/android/repository/commandlinetools-win-6200805_latest.zip';\n            systemImage = 'system-images;android-28;google_apis;x86_64';\n            componentsToInstall = ['platform-tools', 'build-tools;29.0.3', 'platforms;android-29', 'build-tools;28.0.3', 'platforms;android-28', 'emulator', systemImage, '--licenses'];\n            androidSDKRoot = (0, _androidWinHelpers.getAndroidSdkRootInstallation)();\n\n            if (!(androidSDKRoot === '')) {\n              _context2.next = 8;\n              break;\n            }\n\n            loader.fail('There was an error finding the Android SDK root');\n            return _context2.abrupt(\"return\");\n\n          case 8:\n            _context2.next = 10;\n            return _regeneratorRuntime.awrap((0, _downloadAndUnzip.downloadAndUnzip)({\n              loader: loader,\n              downloadUrl: cliToolsUrl,\n              component: 'Android Command Line Tools',\n              installPath: androidSDKRoot\n            }));\n\n          case 10:\n            _i = 0, _componentsToInstall = componentsToInstall;\n\n          case 11:\n            if (!(_i < _componentsToInstall.length)) {\n              _context2.next = 24;\n              break;\n            }\n\n            component = _componentsToInstall[_i];\n            loader.text = \"Installing \\\"\" + component + \"\\\" (this may take a few minutes)\";\n            _context2.prev = 14;\n            _context2.next = 17;\n            return _regeneratorRuntime.awrap((0, _androidWinHelpers.installComponent)(component, androidSDKRoot));\n\n          case 17:\n            _context2.next = 21;\n            break;\n\n          case 19:\n            _context2.prev = 19;\n            _context2.t0 = _context2[\"catch\"](14);\n\n          case 21:\n            _i++;\n            _context2.next = 11;\n            break;\n\n          case 24:\n            loader.text = 'Updating environment variables';\n            _context2.next = 27;\n            return _regeneratorRuntime.awrap((0, _environmentVariables.setEnvironment)('ANDROID_SDK_ROOT', androidSDKRoot));\n\n          case 27:\n            _context2.next = 29;\n            return _regeneratorRuntime.awrap((0, _environmentVariables.setEnvironment)('ANDROID_HOME', androidSDKRoot));\n\n          case 29:\n            _context2.next = 31;\n            return _regeneratorRuntime.awrap((0, _environmentVariables.updateEnvironment)('PATH', _path().default.join(androidSDKRoot, 'tools')));\n\n          case 31:\n            _context2.next = 33;\n            return _regeneratorRuntime.awrap((0, _environmentVariables.updateEnvironment)('PATH', _path().default.join(androidSDKRoot, 'platform-tools')));\n\n          case 33:\n            loader.text = 'Configuring Hypervisor for faster emulation, this might prompt UAC';\n            _context2.next = 36;\n            return _regeneratorRuntime.awrap((0, _androidWinHelpers.getBestHypervisor)(androidSDKRoot));\n\n          case 36:\n            _await = _context2.sent;\n            hypervisor = _await.hypervisor;\n            installed = _await.installed;\n\n            if (installed) {\n              _context2.next = 56;\n              break;\n            }\n\n            if (!(hypervisor === 'none')) {\n              _context2.next = 43;\n              break;\n            }\n\n            loader.warn('Android SDK configured but virtualization could not be enabled.');\n            return _context2.abrupt(\"return\");\n\n          case 43:\n            if (!(hypervisor === 'AMDH')) {\n              _context2.next = 48;\n              break;\n            }\n\n            _context2.next = 46;\n            return _regeneratorRuntime.awrap((0, _androidWinHelpers.enableAMDH)(androidSDKRoot));\n\n          case 46:\n            _context2.next = 56;\n            break;\n\n          case 48:\n            if (!(hypervisor === 'HAXM')) {\n              _context2.next = 53;\n              break;\n            }\n\n            _context2.next = 51;\n            return _regeneratorRuntime.awrap((0, _androidWinHelpers.enableHAXM)(androidSDKRoot));\n\n          case 51:\n            _context2.next = 56;\n            break;\n\n          case 53:\n            if (!(hypervisor === 'WHPX')) {\n              _context2.next = 56;\n              break;\n            }\n\n            _context2.next = 56;\n            return _regeneratorRuntime.awrap((0, _androidWinHelpers.enableWHPX)());\n\n          case 56:\n            loader.text = 'Creating AVD';\n            _context2.next = 59;\n            return _regeneratorRuntime.awrap((0, _androidWinHelpers.createAVD)(androidSDKRoot, 'pixel_9.0', 'pixel', systemImage));\n\n          case 59:\n            loader.succeed('Android SDK configured. You might need to restart your PC for all changes to take effect.');\n\n          case 60:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[14, 19]], Promise);\n  },\n  runAutomaticFix: function runAutomaticFix(_ref3) {\n    var loader, environmentInfo;\n    return _regeneratorRuntime.async(function runAutomaticFix$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            loader = _ref3.loader, environmentInfo = _ref3.environmentInfo;\n            loader.fail();\n\n            if (!isSDKInstalled(environmentInfo)) {\n              _context3.next = 4;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", (0, _common.logManualInstallation)({\n              message: installMessage\n            }));\n\n          case 4:\n            return _context3.abrupt(\"return\", (0, _common.logManualInstallation)({\n              healthcheck: 'Android SDK',\n              url: 'https://reactnative.dev/docs/getting-started'\n            }));\n\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};\nexports.default = _default;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli/build/commands/doctor/healthchecks/androidSDK.js"],"names":["Object","defineProperty","exports","value","default","_chalk","data","_interopRequireDefault","require","_fs","_path","_cliTools","_common","_findProjectRoot","_androidWinHelpers","_downloadAndUnzip","_environmentVariables","obj","__esModule","getBuildToolsVersion","projectRoot","_unused","logger","log","warn","gradleBuildFilePath","join","buildToolsVersionEntry","existsSync","gradleBuildFile","readFileSync","buildToolsVersionIndex","indexOf","buildToolsVersion","substring","split","match","installMessage","dim","isSDKInstalled","environmentInfo","version","SDKs","_default","label","description","getDiagnostics","requiredVersion","buildTools","isAndroidSDKInstalled","Array","isArray","isRequiredVersionInstalled","includes","versions","versionRange","needsToBeFixed","win32AutomaticFix","loader","cliToolsUrl","systemImage","componentsToInstall","androidSDKRoot","getAndroidSdkRootInstallation","fail","downloadAndUnzip","downloadUrl","component","installPath","text","installComponent","setEnvironment","updateEnvironment","getBestHypervisor","hypervisor","installed","enableAMDH","enableHAXM","enableWHPX","createAVD","succeed","runAutomaticFix","logManualInstallation","message","healthcheck","url"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require(\"chalk\"));\n\n  _chalk = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _fs() {\n  const data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  const data = _interopRequireDefault(require(\"path\"));\n\n  _path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _common = require(\"./common\");\n\nvar _findProjectRoot = _interopRequireDefault(require(\"../../../tools/config/findProjectRoot\"));\n\nvar _androidWinHelpers = require(\"../../../tools/windows/androidWinHelpers\");\n\nvar _downloadAndUnzip = require(\"../../../tools/downloadAndUnzip\");\n\nvar _environmentVariables = require(\"../../../tools/windows/environmentVariables\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst getBuildToolsVersion = () => {\n  let projectRoot = '';\n\n  try {\n    // doctor is a detached command, so we may not be in a RN project.\n    projectRoot = (0, _findProjectRoot.default)();\n  } catch (_unused) {\n    _cliTools().logger.log(); // for extra space\n\n\n    _cliTools().logger.warn(\"We couldn't find a package.json in this directory. Android SDK checks may fail. Doctor works best in a React Native project root.\");\n  }\n\n  const gradleBuildFilePath = _path().default.join(projectRoot, 'android/build.gradle');\n\n  const buildToolsVersionEntry = 'buildToolsVersion';\n\n  if (!_fs().default.existsSync(gradleBuildFilePath)) {\n    return 'Not Found';\n  } // Read the content of the `build.gradle` file\n\n\n  const gradleBuildFile = _fs().default.readFileSync(gradleBuildFilePath, 'utf-8');\n\n  const buildToolsVersionIndex = gradleBuildFile.indexOf(buildToolsVersionEntry);\n  const buildToolsVersion = (gradleBuildFile // Get only the portion of the declaration of `buildToolsVersion`\n  .substring(buildToolsVersionIndex).split('\\n')[0] // Get only the the value of `buildToolsVersion`\n  .match(/\\d|\\../g) || []).join('');\n  return buildToolsVersion || 'Not Found';\n};\n\nconst installMessage = `Read more about how to update Android SDK at ${_chalk().default.dim('https://developer.android.com/studio')}`;\n\nconst isSDKInstalled = environmentInfo => {\n  const version = environmentInfo.SDKs['Android SDK'];\n  return version !== 'Not Found';\n};\n\nvar _default = {\n  label: 'Android SDK',\n  description: 'Required for building and installing your app on Android',\n  getDiagnostics: async ({\n    SDKs\n  }) => {\n    const requiredVersion = getBuildToolsVersion();\n    const buildTools = typeof SDKs['Android SDK'] === 'string' ? SDKs['Android SDK'] : SDKs['Android SDK']['Build Tools'];\n    const isAndroidSDKInstalled = Array.isArray(buildTools);\n    const isRequiredVersionInstalled = isAndroidSDKInstalled ? buildTools.includes(requiredVersion) : false;\n    return {\n      versions: isAndroidSDKInstalled ? buildTools : SDKs['Android SDK'],\n      versionRange: requiredVersion,\n      needsToBeFixed: !isRequiredVersionInstalled\n    };\n  },\n  win32AutomaticFix: async ({\n    loader\n  }) => {\n    // Need a GitHub action to update automatically. See #1180\n    const cliToolsUrl = 'https://dl.google.com/android/repository/commandlinetools-win-6200805_latest.zip';\n    const systemImage = 'system-images;android-28;google_apis;x86_64'; // Installing 29 as well so Android Studio does not complain on first boot\n\n    const componentsToInstall = ['platform-tools', 'build-tools;29.0.3', 'platforms;android-29', // Is 28 still needed?\n    'build-tools;28.0.3', 'platforms;android-28', 'emulator', systemImage, '--licenses' // Accept any pending licenses at the end\n    ];\n    const androidSDKRoot = (0, _androidWinHelpers.getAndroidSdkRootInstallation)();\n\n    if (androidSDKRoot === '') {\n      loader.fail('There was an error finding the Android SDK root');\n      return;\n    }\n\n    await (0, _downloadAndUnzip.downloadAndUnzip)({\n      loader,\n      downloadUrl: cliToolsUrl,\n      component: 'Android Command Line Tools',\n      installPath: androidSDKRoot\n    });\n\n    for (const component of componentsToInstall) {\n      loader.text = `Installing \"${component}\" (this may take a few minutes)`;\n\n      try {\n        await (0, _androidWinHelpers.installComponent)(component, androidSDKRoot);\n      } catch (e) {// Is there a way to persist a line in loader and continue the execution?\n      }\n    }\n\n    loader.text = 'Updating environment variables'; // Required for the emulator to work from the CLI\n\n    await (0, _environmentVariables.setEnvironment)('ANDROID_SDK_ROOT', androidSDKRoot);\n    await (0, _environmentVariables.setEnvironment)('ANDROID_HOME', androidSDKRoot);\n    await (0, _environmentVariables.updateEnvironment)('PATH', _path().default.join(androidSDKRoot, 'tools'));\n    await (0, _environmentVariables.updateEnvironment)('PATH', _path().default.join(androidSDKRoot, 'platform-tools'));\n    loader.text = 'Configuring Hypervisor for faster emulation, this might prompt UAC';\n    const {\n      hypervisor,\n      installed\n    } = await (0, _androidWinHelpers.getBestHypervisor)(androidSDKRoot);\n\n    if (!installed) {\n      if (hypervisor === 'none') {\n        loader.warn('Android SDK configured but virtualization could not be enabled.');\n        return;\n      }\n\n      if (hypervisor === 'AMDH') {\n        await (0, _androidWinHelpers.enableAMDH)(androidSDKRoot);\n      } else if (hypervisor === 'HAXM') {\n        await (0, _androidWinHelpers.enableHAXM)(androidSDKRoot);\n      } else if (hypervisor === 'WHPX') {\n        await (0, _androidWinHelpers.enableWHPX)();\n      }\n    }\n\n    loader.text = 'Creating AVD';\n    await (0, _androidWinHelpers.createAVD)(androidSDKRoot, 'pixel_9.0', 'pixel', systemImage);\n    loader.succeed('Android SDK configured. You might need to restart your PC for all changes to take effect.');\n  },\n  runAutomaticFix: async ({\n    loader,\n    environmentInfo\n  }) => {\n    loader.fail();\n\n    if (isSDKInstalled(environmentInfo)) {\n      return (0, _common.logManualInstallation)({\n        message: installMessage\n      });\n    }\n\n    return (0, _common.logManualInstallation)({\n      healthcheck: 'Android SDK',\n      url: 'https://reactnative.dev/docs/getting-started'\n    });\n  }\n};\nexports.default = _default;\n\n//# sourceMappingURL=androidSDK.js.map"]},"metadata":{},"sourceType":"script"}