{"ast":null,"code":"'use strict';\n\nimport { Type } from \"../src/Type.js\";\ntest('parses primitive type', function () {\n  var obj = {\n    'id': 'Timestamp',\n    'type': 'number',\n    'description': 'Number of milliseconds since epoch.'\n  };\n  var type = Type.create('Runtime', obj, false);\n  expect(type.domain).toBe('Runtime');\n  expect(type.id).toBe('Timestamp');\n  expect(type.type).toBe('number');\n  expect(type.description).toBe('Number of milliseconds since epoch.');\n  expect(type.getCppNamespace()).toBe('runtime');\n  expect(type.getCppType()).toBe('Timestamp');\n  expect(type.getForwardDecls()).toEqual(['using Timestamp = double;']);\n});\ntest('parses object type', function () {\n  var obj = {\n    'id': 'Location',\n    'type': 'object',\n    'properties': [{\n      'name': 'scriptId',\n      '$ref': 'Runtime.ScriptId',\n      'description': 'Script identifier as reported in the <code>Debugger.scriptParsed</code>.'\n    }, {\n      'name': 'lineNumber',\n      'type': 'integer',\n      'description': 'Line number in the script (0-based).'\n    }, {\n      'name': 'columnNumber',\n      'type': 'integer',\n      'optional': true,\n      'description': 'Column number in the script (0-based).'\n    }],\n    'description': 'Location in the source code.'\n  };\n  var type = Type.create('Debugger', obj, false);\n  expect(type.domain).toBe('Debugger');\n  expect(type.id).toBe('Location');\n  expect(type.type).toBe('object');\n  expect(type.properties.map(function (p) {\n    return p.name;\n  })).toEqual(['scriptId', 'lineNumber', 'columnNumber']);\n  expect(type.description).toBe('Location in the source code.');\n  expect(type.getCppNamespace()).toBe('debugger');\n  expect(type.getCppType()).toBe('Location');\n  expect(type.getForwardDecls()).toEqual(['struct Location;']);\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/ReactCommon/hermes/inspector/tools/msggen/__tests__/TypeTest.js"],"names":["Type","test","obj","type","create","expect","domain","toBe","id","description","getCppNamespace","getCppType","getForwardDecls","toEqual","properties","map","p","name"],"mappings":"AAOA;;AAEA,SAASA,IAAT;AAEAC,IAAI,CAAC,uBAAD,EAA0B,YAAM;AAClC,MAAIC,GAAG,GAAG;AACR,UAAM,WADE;AAER,YAAQ,QAFA;AAGR,mBAAe;AAHP,GAAV;AAKA,MAAIC,IAAI,GAAGH,IAAI,CAACI,MAAL,CAAY,SAAZ,EAAuBF,GAAvB,EAA4B,KAA5B,CAAX;AAEAG,EAAAA,MAAM,CAACF,IAAI,CAACG,MAAN,CAAN,CAAoBC,IAApB,CAAyB,SAAzB;AACAF,EAAAA,MAAM,CAACF,IAAI,CAACK,EAAN,CAAN,CAAgBD,IAAhB,CAAqB,WAArB;AACAF,EAAAA,MAAM,CAACF,IAAI,CAACA,IAAN,CAAN,CAAkBI,IAAlB,CAAuB,QAAvB;AACAF,EAAAA,MAAM,CAACF,IAAI,CAACM,WAAN,CAAN,CAAyBF,IAAzB,CAA8B,qCAA9B;AAEAF,EAAAA,MAAM,CAACF,IAAI,CAACO,eAAL,EAAD,CAAN,CAA+BH,IAA/B,CAAoC,SAApC;AACAF,EAAAA,MAAM,CAACF,IAAI,CAACQ,UAAL,EAAD,CAAN,CAA0BJ,IAA1B,CAA+B,WAA/B;AACAF,EAAAA,MAAM,CAACF,IAAI,CAACS,eAAL,EAAD,CAAN,CAA+BC,OAA/B,CAAuC,CAAC,2BAAD,CAAvC;AACD,CAhBG,CAAJ;AAkBAZ,IAAI,CAAC,oBAAD,EAAuB,YAAM;AAC/B,MAAIC,GAAG,GAAG;AACR,UAAM,UADE;AAER,YAAQ,QAFA;AAGR,kBAAc,CACV;AAAE,cAAQ,UAAV;AAAsB,cAAQ,kBAA9B;AAAkD,qBAAe;AAAjE,KADU,EAEV;AAAE,cAAQ,YAAV;AAAwB,cAAQ,SAAhC;AAA2C,qBAAe;AAA1D,KAFU,EAGV;AAAE,cAAQ,cAAV;AAA0B,cAAQ,SAAlC;AAA6C,kBAAY,IAAzD;AAA+D,qBAAe;AAA9E,KAHU,CAHN;AAQR,mBAAe;AARP,GAAV;AAUA,MAAIC,IAAI,GAAGH,IAAI,CAACI,MAAL,CAAY,UAAZ,EAAwBF,GAAxB,EAA6B,KAA7B,CAAX;AAEAG,EAAAA,MAAM,CAACF,IAAI,CAACG,MAAN,CAAN,CAAoBC,IAApB,CAAyB,UAAzB;AACAF,EAAAA,MAAM,CAACF,IAAI,CAACK,EAAN,CAAN,CAAgBD,IAAhB,CAAqB,UAArB;AACAF,EAAAA,MAAM,CAACF,IAAI,CAACA,IAAN,CAAN,CAAkBI,IAAlB,CAAuB,QAAvB;AACAF,EAAAA,MAAM,CAACF,IAAI,CAACW,UAAL,CAAgBC,GAAhB,CAAoB,UAAAC,CAAC;AAAA,WAAIA,CAAC,CAACC,IAAN;AAAA,GAArB,CAAD,CAAN,CAAyCJ,OAAzC,CAAiD,CAAC,UAAD,EAAa,YAAb,EAA2B,cAA3B,CAAjD;AACAR,EAAAA,MAAM,CAACF,IAAI,CAACM,WAAN,CAAN,CAAyBF,IAAzB,CAA8B,8BAA9B;AAEAF,EAAAA,MAAM,CAACF,IAAI,CAACO,eAAL,EAAD,CAAN,CAA+BH,IAA/B,CAAoC,UAApC;AACAF,EAAAA,MAAM,CAACF,IAAI,CAACQ,UAAL,EAAD,CAAN,CAA0BJ,IAA1B,CAA+B,UAA/B;AACAF,EAAAA,MAAM,CAACF,IAAI,CAACS,eAAL,EAAD,CAAN,CAA+BC,OAA/B,CAAuC,CAAC,kBAAD,CAAvC;AACD,CAtBG,CAAJ","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nimport { Type } from '../src/Type.js';\n\ntest('parses primitive type', () => {\n  let obj = {\n    'id': 'Timestamp',\n    'type': 'number',\n    'description': 'Number of milliseconds since epoch.',\n  };\n  let type = Type.create('Runtime', obj, false);\n\n  expect(type.domain).toBe('Runtime');\n  expect(type.id).toBe('Timestamp');\n  expect(type.type).toBe('number');\n  expect(type.description).toBe('Number of milliseconds since epoch.');\n\n  expect(type.getCppNamespace()).toBe('runtime');\n  expect(type.getCppType()).toBe('Timestamp');\n  expect(type.getForwardDecls()).toEqual(['using Timestamp = double;']);\n});\n\ntest('parses object type', () => {\n  let obj = {\n    'id': 'Location',\n    'type': 'object',\n    'properties': [\n        { 'name': 'scriptId', '$ref': 'Runtime.ScriptId', 'description': 'Script identifier as reported in the <code>Debugger.scriptParsed</code>.' },\n        { 'name': 'lineNumber', 'type': 'integer', 'description': 'Line number in the script (0-based).' },\n        { 'name': 'columnNumber', 'type': 'integer', 'optional': true, 'description': 'Column number in the script (0-based).' },\n    ],\n    'description': 'Location in the source code.',\n  };\n  let type = Type.create('Debugger', obj, false);\n\n  expect(type.domain).toBe('Debugger');\n  expect(type.id).toBe('Location');\n  expect(type.type).toBe('object');\n  expect(type.properties.map(p => p.name)).toEqual(['scriptId', 'lineNumber', 'columnNumber']);\n  expect(type.description).toBe('Location in the source code.');\n\n  expect(type.getCppNamespace()).toBe('debugger');\n  expect(type.getCppType()).toBe('Location');\n  expect(type.getForwardDecls()).toEqual(['struct Location;']);\n});\n"]},"metadata":{},"sourceType":"module"}