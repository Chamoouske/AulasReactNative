{"ast":null,"code":"'use strict';\n\nimport infoLog from \"../infoLog\";\nimport performanceNow from 'fbjs/lib/performanceNow';\nvar JSEventLoopWatchdog = {\n  getStats: function getStats() {\n    return {\n      stallCount: stallCount,\n      totalStallTime: totalStallTime,\n      longestStall: longestStall,\n      acceptableBusyTime: acceptableBusyTime\n    };\n  },\n  reset: function reset() {\n    infoLog('JSEventLoopWatchdog: reset');\n    totalStallTime = 0;\n    stallCount = 0;\n    longestStall = 0;\n    lastInterval = performanceNow();\n  },\n  addHandler: function addHandler(handler) {\n    handlers.push(handler);\n  },\n  install: function install(_ref) {\n    var thresholdMS = _ref.thresholdMS;\n    acceptableBusyTime = thresholdMS;\n\n    if (installed) {\n      return;\n    }\n\n    installed = true;\n    lastInterval = performanceNow();\n\n    function iteration() {\n      var now = performanceNow();\n      var busyTime = now - lastInterval;\n\n      if (busyTime >= thresholdMS) {\n        var stallTime = busyTime - thresholdMS;\n        stallCount++;\n        totalStallTime += stallTime;\n        longestStall = Math.max(longestStall, stallTime);\n        var msg = \"JSEventLoopWatchdog: JS thread busy for \" + busyTime + \"ms. \" + (totalStallTime + \"ms in \" + stallCount + \" stalls so far. \");\n        handlers.forEach(function (handler) {\n          msg += handler.onStall({\n            lastInterval: lastInterval,\n            busyTime: busyTime\n          }) || '';\n        });\n        infoLog(msg);\n      }\n\n      handlers.forEach(function (handler) {\n        handler.onIterate && handler.onIterate();\n      });\n      lastInterval = now;\n      setTimeout(iteration, thresholdMS / 5);\n    }\n\n    iteration();\n  }\n};\nvar acceptableBusyTime = 0;\nvar installed = false;\nvar totalStallTime = 0;\nvar stallCount = 0;\nvar longestStall = 0;\nvar lastInterval = 0;\nvar handlers = [];\nexport default JSEventLoopWatchdog;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native-web/dist/vendor/react-native/JSEventLoopWatchdog/index.js"],"names":["infoLog","performanceNow","JSEventLoopWatchdog","getStats","stallCount","totalStallTime","longestStall","acceptableBusyTime","reset","lastInterval","addHandler","handler","handlers","push","install","_ref","thresholdMS","installed","iteration","now","busyTime","stallTime","Math","max","msg","forEach","onStall","onIterate","setTimeout"],"mappings":"AASA;;AAEA,OAAOA,OAAP;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AAcA,IAAIC,mBAAmB,GAAG;AACxBC,EAAAA,QAAQ,EAAE,SAASA,QAAT,GAAoB;AAC5B,WAAO;AACLC,MAAAA,UAAU,EAAEA,UADP;AAELC,MAAAA,cAAc,EAAEA,cAFX;AAGLC,MAAAA,YAAY,EAAEA,YAHT;AAILC,MAAAA,kBAAkB,EAAEA;AAJf,KAAP;AAMD,GARuB;AASxBC,EAAAA,KAAK,EAAE,SAASA,KAAT,GAAiB;AACtBR,IAAAA,OAAO,CAAC,4BAAD,CAAP;AACAK,IAAAA,cAAc,GAAG,CAAjB;AACAD,IAAAA,UAAU,GAAG,CAAb;AACAE,IAAAA,YAAY,GAAG,CAAf;AACAG,IAAAA,YAAY,GAAGR,cAAc,EAA7B;AACD,GAfuB;AAgBxBS,EAAAA,UAAU,EAAE,SAASA,UAAT,CAAoBC,OAApB,EAA6B;AACvCC,IAAAA,QAAQ,CAACC,IAAT,CAAcF,OAAd;AACD,GAlBuB;AAmBxBG,EAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBC,IAAjB,EAAuB;AAC9B,QAAIC,WAAW,GAAGD,IAAI,CAACC,WAAvB;AACAT,IAAAA,kBAAkB,GAAGS,WAArB;;AAEA,QAAIC,SAAJ,EAAe;AACb;AACD;;AAEDA,IAAAA,SAAS,GAAG,IAAZ;AACAR,IAAAA,YAAY,GAAGR,cAAc,EAA7B;;AAEA,aAASiB,SAAT,GAAqB;AACnB,UAAIC,GAAG,GAAGlB,cAAc,EAAxB;AACA,UAAImB,QAAQ,GAAGD,GAAG,GAAGV,YAArB;;AAEA,UAAIW,QAAQ,IAAIJ,WAAhB,EAA6B;AAC3B,YAAIK,SAAS,GAAGD,QAAQ,GAAGJ,WAA3B;AACAZ,QAAAA,UAAU;AACVC,QAAAA,cAAc,IAAIgB,SAAlB;AACAf,QAAAA,YAAY,GAAGgB,IAAI,CAACC,GAAL,CAASjB,YAAT,EAAuBe,SAAvB,CAAf;AACA,YAAIG,GAAG,GAAG,6CAA6CJ,QAA7C,GAAwD,MAAxD,IAAkEf,cAAc,GAAG,QAAjB,GAA4BD,UAA5B,GAAyC,kBAA3G,CAAV;AACAQ,QAAAA,QAAQ,CAACa,OAAT,CAAiB,UAAUd,OAAV,EAAmB;AAClCa,UAAAA,GAAG,IAAIb,OAAO,CAACe,OAAR,CAAgB;AACrBjB,YAAAA,YAAY,EAAEA,YADO;AAErBW,YAAAA,QAAQ,EAAEA;AAFW,WAAhB,KAGD,EAHN;AAID,SALD;AAMApB,QAAAA,OAAO,CAACwB,GAAD,CAAP;AACD;;AAEDZ,MAAAA,QAAQ,CAACa,OAAT,CAAiB,UAAUd,OAAV,EAAmB;AAClCA,QAAAA,OAAO,CAACgB,SAAR,IAAqBhB,OAAO,CAACgB,SAAR,EAArB;AACD,OAFD;AAGAlB,MAAAA,YAAY,GAAGU,GAAf;AACAS,MAAAA,UAAU,CAACV,SAAD,EAAYF,WAAW,GAAG,CAA1B,CAAV;AACD;;AAEDE,IAAAA,SAAS;AACV;AAzDuB,CAA1B;AA2DA,IAAIX,kBAAkB,GAAG,CAAzB;AACA,IAAIU,SAAS,GAAG,KAAhB;AACA,IAAIZ,cAAc,GAAG,CAArB;AACA,IAAID,UAAU,GAAG,CAAjB;AACA,IAAIE,YAAY,GAAG,CAAnB;AACA,IAAIG,YAAY,GAAG,CAAnB;AACA,IAAIG,QAAQ,GAAG,EAAf;AACA,eAAeV,mBAAf","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */\n'use strict';\n\nimport infoLog from '../infoLog';\nimport performanceNow from 'fbjs/lib/performanceNow';\n\n/**\n * A utility for tracking stalls in the JS event loop that prevent timers and\n * other events from being processed in a timely manner.\n *\n * The \"stall\" time is defined as the amount of time in access of the acceptable\n * threshold, which is typically around 100-200ms. So if the treshold is set to\n * 100 and a timer fires 150 ms later than it was scheduled because the event\n * loop was tied up, that would be considered a 50ms stall.\n *\n * By default, logs stall events to the console when installed. Can also be\n * queried with `getStats`.\n */\nvar JSEventLoopWatchdog = {\n  getStats: function getStats() {\n    return {\n      stallCount: stallCount,\n      totalStallTime: totalStallTime,\n      longestStall: longestStall,\n      acceptableBusyTime: acceptableBusyTime\n    };\n  },\n  reset: function reset() {\n    infoLog('JSEventLoopWatchdog: reset');\n    totalStallTime = 0;\n    stallCount = 0;\n    longestStall = 0;\n    lastInterval = performanceNow();\n  },\n  addHandler: function addHandler(handler) {\n    handlers.push(handler);\n  },\n  install: function install(_ref) {\n    var thresholdMS = _ref.thresholdMS;\n    acceptableBusyTime = thresholdMS;\n\n    if (installed) {\n      return;\n    }\n\n    installed = true;\n    lastInterval = performanceNow();\n\n    function iteration() {\n      var now = performanceNow();\n      var busyTime = now - lastInterval;\n\n      if (busyTime >= thresholdMS) {\n        var stallTime = busyTime - thresholdMS;\n        stallCount++;\n        totalStallTime += stallTime;\n        longestStall = Math.max(longestStall, stallTime);\n        var msg = \"JSEventLoopWatchdog: JS thread busy for \" + busyTime + \"ms. \" + (totalStallTime + \"ms in \" + stallCount + \" stalls so far. \");\n        handlers.forEach(function (handler) {\n          msg += handler.onStall({\n            lastInterval: lastInterval,\n            busyTime: busyTime\n          }) || '';\n        });\n        infoLog(msg);\n      }\n\n      handlers.forEach(function (handler) {\n        handler.onIterate && handler.onIterate();\n      });\n      lastInterval = now;\n      setTimeout(iteration, thresholdMS / 5);\n    }\n\n    iteration();\n  }\n};\nvar acceptableBusyTime = 0;\nvar installed = false;\nvar totalStallTime = 0;\nvar stallCount = 0;\nvar longestStall = 0;\nvar lastInterval = 0;\nvar handlers = [];\nexport default JSEventLoopWatchdog;"]},"metadata":{},"sourceType":"module"}