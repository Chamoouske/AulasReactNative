{"ast":null,"code":"'use strict';\n\nvar _require = require(\"../VirtualizeUtils\"),\n    elementsThatOverlapOffsets = _require.elementsThatOverlapOffsets,\n    newRangeCount = _require.newRangeCount;\n\ndescribe('newRangeCount', function () {\n  it('handles subset', function () {\n    expect(newRangeCount({\n      first: 1,\n      last: 4\n    }, {\n      first: 2,\n      last: 3\n    })).toBe(0);\n  });\n  it('handles forward disjoint set', function () {\n    expect(newRangeCount({\n      first: 1,\n      last: 4\n    }, {\n      first: 6,\n      last: 9\n    })).toBe(4);\n  });\n  it('handles reverse disjoint set', function () {\n    expect(newRangeCount({\n      first: 6,\n      last: 8\n    }, {\n      first: 1,\n      last: 4\n    })).toBe(4);\n  });\n  it('handles superset', function () {\n    expect(newRangeCount({\n      first: 1,\n      last: 4\n    }, {\n      first: 0,\n      last: 5\n    })).toBe(2);\n  });\n  it('handles end extension', function () {\n    expect(newRangeCount({\n      first: 1,\n      last: 4\n    }, {\n      first: 1,\n      last: 8\n    })).toBe(4);\n  });\n  it('handles front extension', function () {\n    expect(newRangeCount({\n      first: 1,\n      last: 4\n    }, {\n      first: 0,\n      last: 4\n    })).toBe(1);\n  });\n  it('handles forward intersect', function () {\n    expect(newRangeCount({\n      first: 1,\n      last: 4\n    }, {\n      first: 3,\n      last: 6\n    })).toBe(2);\n  });\n  it('handles reverse intersect', function () {\n    expect(newRangeCount({\n      first: 3,\n      last: 6\n    }, {\n      first: 1,\n      last: 4\n    })).toBe(2);\n  });\n});\ndescribe('elementsThatOverlapOffsets', function () {\n  it('handles fixed length', function () {\n    var offsets = [0, 250, 350, 450];\n\n    function getFrameMetrics(index) {\n      return {\n        length: 100,\n        offset: 100 * index\n      };\n    }\n\n    expect(elementsThatOverlapOffsets(offsets, 100, getFrameMetrics)).toEqual([0, 2, 3, 4]);\n  });\n  it('handles variable length', function () {\n    var offsets = [150, 250, 900];\n    var frames = [{\n      offset: 0,\n      length: 50\n    }, {\n      offset: 50,\n      length: 200\n    }, {\n      offset: 250,\n      length: 600\n    }, {\n      offset: 850,\n      length: 100\n    }, {\n      offset: 950,\n      length: 150\n    }];\n    expect(elementsThatOverlapOffsets(offsets, frames.length, function (ii) {\n      return frames[ii];\n    })).toEqual([1, 1, 3]);\n  });\n  it('handles out of bounds', function () {\n    var offsets = [150, 900];\n    var frames = [{\n      offset: 0,\n      length: 50\n    }, {\n      offset: 50,\n      length: 150\n    }, {\n      offset: 250,\n      length: 100\n    }];\n    expect(elementsThatOverlapOffsets(offsets, frames.length, function (ii) {\n      return frames[ii];\n    })).toEqual([1]);\n  });\n  it('errors on non-increasing offsets', function () {\n    var offsets = [150, 50];\n    var frames = [{\n      offset: 0,\n      length: 50\n    }, {\n      offset: 50,\n      length: 150\n    }, {\n      offset: 250,\n      length: 100\n    }];\n    expect(function () {\n      elementsThatOverlapOffsets(offsets, frames.length, function (ii) {\n        return frames[ii];\n      });\n    }).toThrowErrorMatchingSnapshot();\n  });\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Lists/__tests__/VirtualizeUtils-test.js"],"names":["require","elementsThatOverlapOffsets","newRangeCount","describe","it","expect","first","last","toBe","offsets","getFrameMetrics","index","length","offset","toEqual","frames","ii","toThrowErrorMatchingSnapshot"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @emails oncall+react_native\n */\n\n'use strict';\n\nconst {\n  elementsThatOverlapOffsets,\n  newRangeCount,\n} = require('../VirtualizeUtils');\n\ndescribe('newRangeCount', function() {\n  it('handles subset', function() {\n    expect(newRangeCount({first: 1, last: 4}, {first: 2, last: 3})).toBe(0);\n  });\n  it('handles forward disjoint set', function() {\n    expect(newRangeCount({first: 1, last: 4}, {first: 6, last: 9})).toBe(4);\n  });\n  it('handles reverse disjoint set', function() {\n    expect(newRangeCount({first: 6, last: 8}, {first: 1, last: 4})).toBe(4);\n  });\n  it('handles superset', function() {\n    expect(newRangeCount({first: 1, last: 4}, {first: 0, last: 5})).toBe(2);\n  });\n  it('handles end extension', function() {\n    expect(newRangeCount({first: 1, last: 4}, {first: 1, last: 8})).toBe(4);\n  });\n  it('handles front extension', function() {\n    expect(newRangeCount({first: 1, last: 4}, {first: 0, last: 4})).toBe(1);\n  });\n  it('handles forward intersect', function() {\n    expect(newRangeCount({first: 1, last: 4}, {first: 3, last: 6})).toBe(2);\n  });\n  it('handles reverse intersect', function() {\n    expect(newRangeCount({first: 3, last: 6}, {first: 1, last: 4})).toBe(2);\n  });\n});\n\ndescribe('elementsThatOverlapOffsets', function() {\n  it('handles fixed length', function() {\n    const offsets = [0, 250, 350, 450];\n    function getFrameMetrics(index: number) {\n      return {\n        length: 100,\n        offset: 100 * index,\n      };\n    }\n    expect(elementsThatOverlapOffsets(offsets, 100, getFrameMetrics)).toEqual([\n      0,\n      2,\n      3,\n      4,\n    ]);\n  });\n  it('handles variable length', function() {\n    const offsets = [150, 250, 900];\n    const frames = [\n      {offset: 0, length: 50},\n      {offset: 50, length: 200},\n      {offset: 250, length: 600},\n      {offset: 850, length: 100},\n      {offset: 950, length: 150},\n    ];\n    expect(\n      elementsThatOverlapOffsets(offsets, frames.length, ii => frames[ii]),\n    ).toEqual([1, 1, 3]);\n  });\n  it('handles out of bounds', function() {\n    const offsets = [150, 900];\n    const frames = [\n      {offset: 0, length: 50},\n      {offset: 50, length: 150},\n      {offset: 250, length: 100},\n    ];\n    expect(\n      elementsThatOverlapOffsets(offsets, frames.length, ii => frames[ii]),\n    ).toEqual([1]);\n  });\n  it('errors on non-increasing offsets', function() {\n    const offsets = [150, 50];\n    const frames = [\n      {offset: 0, length: 50},\n      {offset: 50, length: 150},\n      {offset: 250, length: 100},\n    ];\n    expect(() => {\n      elementsThatOverlapOffsets(offsets, frames.length, ii => frames[ii]);\n    }).toThrowErrorMatchingSnapshot();\n  });\n});\n"]},"metadata":{},"sourceType":"script"}