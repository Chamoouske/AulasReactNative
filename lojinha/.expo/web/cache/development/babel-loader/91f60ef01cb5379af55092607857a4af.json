{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar json_file_1 = __importDefault(require(\"@expo/json-file\"));\n\nvar Errors_1 = require(\"./Errors\");\n\nvar evalConfig_1 = require(\"./evalConfig\");\n\nfunction isMissingFileCode(code) {\n  return ['ENOENT', 'MODULE_NOT_FOUND', 'ENOTDIR'].includes(code);\n}\n\nfunction readConfigFile(configFile, context) {\n  try {\n    return evalConfig_1.evalConfig(configFile, context);\n  } catch (error) {\n    if (!isMissingFileCode(error.code)) {\n      error.isConfigError = true;\n      error.stack = new Error().stack;\n      throw error;\n    }\n  }\n\n  return null;\n}\n\nfunction getDynamicConfig(configPath, request) {\n  var config = readConfigFile(configPath, request);\n\n  if (config) {\n    return config;\n  }\n\n  throw new Errors_1.ConfigError(\"Failed to read config at: \" + configPath, 'INVALID_CONFIG');\n}\n\nexports.getDynamicConfig = getDynamicConfig;\n\nfunction getStaticConfig(configPath) {\n  var config = json_file_1.default.read(configPath, {\n    json5: true\n  });\n\n  if (config) {\n    return config;\n  }\n\n  throw new Errors_1.ConfigError(\"Failed to read config at: \" + configPath, 'INVALID_CONFIG');\n}\n\nexports.getStaticConfig = getStaticConfig;","map":{"version":3,"sources":["../src/getConfig.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,IAAA,WAAA,GAAA,eAAA,CAAA,OAAA,CAAA,iBAAA,CAAA,CAAA;;AAGA,IAAA,QAAA,GAAA,OAAA,YAAA;;AACA,IAAA,YAAA,GAAA,OAAA,gBAAA;;AAEA,SAAS,iBAAT,CAA2B,IAA3B,EAAuC;AACrC,SAAO,CAAC,QAAD,EAAW,kBAAX,EAA+B,SAA/B,EAA0C,QAA1C,CAAmD,IAAnD,CAAP;AACD;;AAID,SAAS,cAAT,CAAwB,UAAxB,EAA4C,OAA5C,EAAkE;AAChE,MAAI;AACF,WAAO,YAAA,CAAA,UAAA,CAAW,UAAX,EAAuB,OAAvB,CAAP;AACD,GAFD,CAEE,OAAO,KAAP,EAAc;AAEd,QAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,IAAP,CAAtB,EAAoC;AAElC,MAAA,KAAK,CAAC,aAAN,GAAsB,IAAtB;AAEA,MAAA,KAAK,CAAC,KAAN,GAAc,IAAI,KAAJ,GAAY,KAA1B;AACA,YAAM,KAAN;AACD;AACF;;AACD,SAAO,IAAP;AACD;;AAED,SAAgB,gBAAhB,CAAiC,UAAjC,EAAqD,OAArD,EAA2E;AACzE,MAAM,MAAM,GAAG,cAAc,CAAC,UAAD,EAAa,OAAb,CAA7B;;AACA,MAAI,MAAJ,EAAY;AAEV,WAAO,MAAP;AACD;;AAGD,QAAM,IAAI,QAAA,CAAA,WAAJ,gCAA6C,UAA7C,EAA2D,gBAA3D,CAAN;AACD;;AATD,OAAA,CAAA,gBAAA,GAAA,gBAAA;;AAWA,SAAgB,eAAhB,CAAgC,UAAhC,EAAkD;AAChD,MAAM,MAAM,GAAG,WAAA,CAAA,OAAA,CAAS,IAAT,CAAc,UAAd,EAA0B;AAAE,IAAA,KAAK,EAAE;AAAT,GAA1B,CAAf;;AACA,MAAI,MAAJ,EAAY;AACV,WAAO,MAAP;AACD;;AACD,QAAM,IAAI,QAAA,CAAA,WAAJ,gCAA6C,UAA7C,EAA2D,gBAA3D,CAAN;AACD;;AAND,OAAA,CAAA,eAAA,GAAA,eAAA","sourcesContent":["import JsonFile from '@expo/json-file';\n\nimport { AppJSONConfig, ConfigContext, ExpoConfig } from './Config.types';\nimport { ConfigError } from './Errors';\nimport { DynamicConfigResults, evalConfig } from './evalConfig';\n\nfunction isMissingFileCode(code: string): boolean {\n  return ['ENOENT', 'MODULE_NOT_FOUND', 'ENOTDIR'].includes(code);\n}\n\n// We cannot use async config resolution right now because Next.js doesn't support async configs.\n// If they don't add support for async Webpack configs then we may need to pull support for Next.js.\nfunction readConfigFile(configFile: string, context: ConfigContext): null | DynamicConfigResults {\n  try {\n    return evalConfig(configFile, context);\n  } catch (error) {\n    // If the file doesn't exist then we should skip it and continue searching.\n    if (!isMissingFileCode(error.code)) {\n      // @ts-ignore\n      error.isConfigError = true;\n      // @ts-ignore: Replace the babel stack with a more relevant stack.\n      error.stack = new Error().stack;\n      throw error;\n    }\n  }\n  return null;\n}\n\nexport function getDynamicConfig(configPath: string, request: ConfigContext): DynamicConfigResults {\n  const config = readConfigFile(configPath, request);\n  if (config) {\n    // The config must be serialized and evaluated ahead of time so the spawned process can send it over.\n    return config;\n  }\n  // TODO: It seems this is only thrown if the file cannot be found (which may never happen).\n  // If so we should throw a more helpful error.\n  throw new ConfigError(`Failed to read config at: ${configPath}`, 'INVALID_CONFIG');\n}\n\nexport function getStaticConfig(configPath: string): AppJSONConfig | ExpoConfig {\n  const config = JsonFile.read(configPath, { json5: true });\n  if (config) {\n    return config as any;\n  }\n  throw new ConfigError(`Failed to read config at: ${configPath}`, 'INVALID_CONFIG');\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}