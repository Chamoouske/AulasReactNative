{"ast":null,"code":"export {};","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@expo/config-plugins/build/android/Manifest.d.ts"],"names":[],"mappings":"AA0HA","sourcesContent":["export declare type StringBoolean = 'true' | 'false';\ndeclare type ManifestMetaDataAttributes = AndroidManifestAttributes & {\n    'android:value'?: string;\n    'android:resource'?: string;\n};\ndeclare type AndroidManifestAttributes = {\n    'android:name': string | 'android.intent.action.VIEW';\n};\ndeclare type ManifestAction = {\n    $: AndroidManifestAttributes;\n};\ndeclare type ManifestCategory = {\n    $: AndroidManifestAttributes;\n};\ndeclare type ManifestData = {\n    $: {\n        [key: string]: string | undefined;\n        'android:host'?: string;\n        'android:pathPrefix'?: string;\n        'android:scheme'?: string;\n    };\n};\ndeclare type ManifestReciever = {\n    $: AndroidManifestAttributes & {\n        'android:exported'?: StringBoolean;\n        'android:enabled'?: StringBoolean;\n    };\n    'intent-filter'?: ManifestIntentFilter[];\n};\ndeclare type ManifestIntentFilter = {\n    action?: ManifestAction[];\n    data?: ManifestData[];\n    category?: ManifestCategory[];\n};\nexport declare type ManifestMetaData = {\n    $: ManifestMetaDataAttributes;\n};\ndeclare type ManifestServiceAttributes = AndroidManifestAttributes & {\n    'android:enabled'?: StringBoolean;\n    'android:exported'?: StringBoolean;\n    'android:permission'?: string;\n};\ndeclare type ManifestService = {\n    $: ManifestServiceAttributes;\n    'intent-filter'?: ManifestIntentFilter[];\n};\ndeclare type ManifestApplicationAttributes = {\n    'android:name': string | '.MainApplication';\n    'android:icon'?: string;\n    'android:label'?: string;\n    'android:allowBackup'?: StringBoolean;\n    'android:largeHeap'?: StringBoolean;\n    'android:requestLegacyExternalStorage'?: StringBoolean;\n    'android:usesCleartextTraffic'?: StringBoolean;\n    [key: string]: string | undefined;\n};\nexport declare type ManifestActivity = {\n    $: ManifestApplicationAttributes & {\n        'android:exported'?: StringBoolean;\n        'android:launchMode'?: string;\n        'android:theme'?: string;\n        [key: string]: string | undefined;\n    };\n    'intent-filter'?: ManifestIntentFilter[];\n};\nexport declare type ManifestUsesLibrary = {\n    $: AndroidManifestAttributes & {\n        'android:required'?: StringBoolean;\n    };\n};\nexport declare type ManifestApplication = {\n    $: ManifestApplicationAttributes;\n    activity?: ManifestActivity[];\n    service?: ManifestService[];\n    receiver?: ManifestReciever[];\n    'meta-data'?: ManifestMetaData[];\n    'uses-library'?: ManifestUsesLibrary[];\n};\ndeclare type ManifestPermission = {\n    $: AndroidManifestAttributes & {\n        'android:protectionLevel'?: string | 'signature';\n    };\n};\nexport declare type ManifestUsesPermission = {\n    $: AndroidManifestAttributes;\n};\ndeclare type ManifestUsesFeature = {\n    $: AndroidManifestAttributes & {\n        'android:glEsVersion'?: string;\n        'android:required': StringBoolean;\n    };\n};\nexport declare type AndroidManifest = {\n    manifest: {\n        $: {\n            'xmlns:android': string;\n            package?: string;\n            [key: string]: string | undefined;\n        };\n        permission?: ManifestPermission[];\n        'uses-permission'?: ManifestUsesPermission[];\n        'uses-feature'?: ManifestUsesFeature[];\n        application?: ManifestApplication[];\n    };\n};\nexport declare function writeAndroidManifestAsync(manifestPath: string, androidManifest: AndroidManifest): Promise<void>;\nexport declare function readAndroidManifestAsync(manifestPath: string): Promise<AndroidManifest>;\nexport declare function getMainApplication(androidManifest: AndroidManifest): ManifestApplication | null;\nexport declare function getMainApplicationOrThrow(androidManifest: AndroidManifest): ManifestApplication;\nexport declare function getMainActivityOrThrow(androidManifest: AndroidManifest): ManifestActivity;\nexport declare function getMainActivity(androidManifest: AndroidManifest): ManifestActivity | null;\nexport declare function addMetaDataItemToMainApplication(mainApplication: ManifestApplication, itemName: string, itemValue: string, itemType?: 'resource' | 'value'): ManifestApplication;\nexport declare function removeMetaDataItemFromMainApplication(mainApplication: any, itemName: string): any;\nexport declare function findMetaDataItem(mainApplication: any, itemName: string): number;\nexport declare function findUsesLibraryItem(mainApplication: any, itemName: string): number;\nexport declare function getMainApplicationMetaDataValue(androidManifest: AndroidManifest, name: string): string | null;\nexport declare function addUsesLibraryItemToMainApplication(mainApplication: ManifestApplication, item: {\n    name: string;\n    required?: boolean;\n}): ManifestApplication;\nexport declare function removeUsesLibraryItemFromMainApplication(mainApplication: ManifestApplication, itemName: string): ManifestApplication;\nexport declare function prefixAndroidKeys<T extends Record<string, any> = Record<string, string>>(head: T): Record<string, any>;\nexport {};\n"]},"metadata":{},"sourceType":"module"}