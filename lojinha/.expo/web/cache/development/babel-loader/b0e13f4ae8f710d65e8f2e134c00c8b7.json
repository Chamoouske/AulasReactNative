{"ast":null,"code":"'use strict';\n\nexport function toCppNamespace(domain) {\n  return domain.substr(0, 1).toLowerCase() + domain.substr(1);\n}\nexport function toCppType(type) {\n  return type.substr(0, 1).toUpperCase() + type.substr(1);\n}\nvar jsTypeMappings = {\n  any: 'folly::dynamic',\n  array: 'folly::dynamic',\n  boolean: 'bool',\n  integer: 'int',\n  number: 'double',\n  object: 'folly::dynamic',\n  string: 'std::string'\n};\nexport function jsTypeToCppType(jsTypeStr) {\n  return jsTypeMappings[jsTypeStr];\n}","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/ReactCommon/hermes/inspector/tools/msggen/src/Converters.js"],"names":["toCppNamespace","domain","substr","toLowerCase","toCppType","type","toUpperCase","jsTypeMappings","any","array","boolean","integer","number","object","string","jsTypeToCppType","jsTypeStr"],"mappings":"AAUA;;AAEA,OAAO,SAASA,cAAT,CAAwBC,MAAxB,EAAgD;AACrD,SAAOA,MAAM,CAACC,MAAP,CAAc,CAAd,EAAiB,CAAjB,EAAoBC,WAApB,KAAoCF,MAAM,CAACC,MAAP,CAAc,CAAd,CAA3C;AACD;AAED,OAAO,SAASE,SAAT,CAAmBC,IAAnB,EAAyC;AAC9C,SAAOA,IAAI,CAACH,MAAL,CAAY,CAAZ,EAAe,CAAf,EAAkBI,WAAlB,KAAkCD,IAAI,CAACH,MAAL,CAAY,CAAZ,CAAzC;AACD;AAUD,IAAMK,cAAc,GAAG;AACrBC,EAAAA,GAAG,EAAE,gBADgB;AAErBC,EAAAA,KAAK,EAAE,gBAFc;AAGrBC,EAAAA,OAAO,EAAE,MAHY;AAIrBC,EAAAA,OAAO,EAAE,KAJY;AAKrBC,EAAAA,MAAM,EAAE,QALa;AAMrBC,EAAAA,MAAM,EAAE,gBANa;AAOrBC,EAAAA,MAAM,EAAE;AAPa,CAAvB;AAUA,OAAO,SAASC,eAAT,CAAyBC,SAAzB,EAA0D;AAC/D,SAAOT,cAAc,CAACS,SAAD,CAArB;AACD","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nexport function toCppNamespace(domain: string): string {\n  return domain.substr(0, 1).toLowerCase() + domain.substr(1);\n}\n\nexport function toCppType(type: string): string {\n  return type.substr(0, 1).toUpperCase() + type.substr(1);\n}\n\nexport type JsTypeString =\n  | 'any'\n  | 'boolean'\n  | 'integer'\n  | 'number'\n  | 'object'\n  | 'string';\n\nconst jsTypeMappings = {\n  any: 'folly::dynamic',\n  array: 'folly::dynamic',\n  boolean: 'bool',\n  integer: 'int',\n  number: 'double',\n  object: 'folly::dynamic',\n  string: 'std::string',\n};\n\nexport function jsTypeToCppType(jsTypeStr: JsTypeString): string {\n  return jsTypeMappings[jsTypeStr];\n}\n"]},"metadata":{},"sourceType":"module"}