{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CompatNativeSafeAreaProvider = CompatNativeSafeAreaProvider;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _useWindowDimensions = _interopRequireDefault(require(\"./useWindowDimensions\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction CompatNativeSafeAreaProvider(_ref) {\n  var children = _ref.children,\n      style = _ref.style,\n      onInsetsChange = _ref.onInsetsChange;\n  var window = (0, _useWindowDimensions.default)();\n  React.useEffect(function () {\n    var insets = {\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0\n    };\n    var frame = {\n      x: 0,\n      y: 0,\n      width: window.width,\n      height: window.height\n    };\n    onInsetsChange({\n      nativeEvent: {\n        insets: insets,\n        frame: frame\n      }\n    });\n  }, [onInsetsChange, window.height, window.width]);\n  return React.createElement(_reactNative.View, {\n    style: style\n  }, children);\n}","map":{"version":3,"sources":["CompatNativeSafeAreaProvider.tsx"],"names":["onInsetsChange","window","React","insets","top","bottom","left","right","frame","x","y","width","height","nativeEvent","style"],"mappings":";;;;;;;AAAA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;;;AAGA,IAAA,oBAAA,GAAA,sBAAA,CAAA,OAAA,yBAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEO,SAAA,4BAAA,OAIyB;AAAA,MAJa,QAIb,QAJa,QAIb;AAAA,MAJa,KAIb,QAJa,KAIb;AAAA,MAD9BA,cAC8B,QAD9BA,cAC8B;AAC9B,MAAMC,MAAM,GAAG,CAAA,GAAA,oBAAA,CAAf,OAAe,GAAf;AACAC,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpB,QAAMC,MAAM,GAAG;AACbC,MAAAA,GAAG,EADU,CAAA;AAEbC,MAAAA,MAAM,EAFO,CAAA;AAGbC,MAAAA,IAAI,EAHS,CAAA;AAIbC,MAAAA,KAAK,EAAE;AAJM,KAAf;AAMA,QAAMC,KAAK,GAAG;AACZC,MAAAA,CAAC,EADW,CAAA;AAEZC,MAAAA,CAAC,EAFW,CAAA;AAGZC,MAAAA,KAAK,EAAEV,MAAM,CAHD,KAAA;AAIZW,MAAAA,MAAM,EAAEX,MAAM,CAACW;AAJH,KAAd;AAOAZ,IAAAA,cAAc,CAAC;AAAEa,MAAAA,WAAW,EAAE;AAAEV,QAAAA,MAAF,EAAEA,MAAF;AAAUK,QAAAA,KAAAA,EAAAA;AAAV;AAAf,KAAD,CAAdR;AAdFE,GAAAA,EAeG,CAAA,cAAA,EAAiBD,MAAM,CAAvB,MAAA,EAAgCA,MAAM,CAfzCC,KAeG,CAfHA;AAgBA,SAAO,KAAA,CAAA,aAAA,CAAC,YAAA,CAAD,IAAA,EAAA;AAAM,IAAA,KAAK,EAAEY;AAAb,GAAA,EAAP,QAAO,CAAP;AACD","sourcesContent":["import * as React from 'react';\nimport { View } from 'react-native';\nimport { NativeSafeAreaProviderProps } from './SafeArea.types';\nimport useWindowDimensions from './useWindowDimensions';\n\nexport function CompatNativeSafeAreaProvider({\n  children,\n  style,\n  onInsetsChange,\n}: NativeSafeAreaProviderProps) {\n  const window = useWindowDimensions();\n  React.useEffect(() => {\n    const insets = {\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n    };\n    const frame = {\n      x: 0,\n      y: 0,\n      width: window.width,\n      height: window.height,\n    };\n    // @ts-ignore: missing properties\n    onInsetsChange({ nativeEvent: { insets, frame } });\n  }, [onInsetsChange, window.height, window.width]);\n  return <View style={style}>{children}</View>;\n}\n"]},"metadata":{},"sourceType":"script"}