{"ast":null,"code":"'use strict';\n\nvar bezier = require(\"../bezier\");\n\nvar identity = function identity(x) {\n  return x;\n};\n\nfunction assertClose(a, b) {\n  var precision = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 3;\n  expect(a).toBeCloseTo(b, precision);\n}\n\nfunction makeAssertCloseWithPrecision(precision) {\n  return function (a, b) {\n    assertClose(a, b, precision);\n  };\n}\n\nfunction allEquals(be1, be2, samples, assertion) {\n  if (!assertion) {\n    assertion = assertClose;\n  }\n\n  for (var i = 0; i <= samples; ++i) {\n    var x = i / samples;\n    assertion(be1(x), be2(x));\n  }\n}\n\nfunction repeat(n) {\n  return function (f) {\n    for (var i = 0; i < n; ++i) {\n      f();\n    }\n  };\n}\n\ndescribe('bezier', function () {\n  it('should be a function', function () {\n    expect(typeof bezier === 'function').toBe(true);\n  });\n  it('should creates an object', function () {\n    expect(typeof bezier(0, 0, 1, 1) === 'function').toBe(true);\n  });\n  it('should fail with wrong arguments', function () {\n    expect(function () {\n      bezier(0.5, 0.5, -5, 0.5);\n    }).toThrow();\n    expect(function () {\n      bezier(0.5, 0.5, 5, 0.5);\n    }).toThrow();\n    expect(function () {\n      bezier(-2, 0.5, 0.5, 0.5);\n    }).toThrow();\n    expect(function () {\n      bezier(2, 0.5, 0.5, 0.5);\n    }).toThrow();\n  });\n  describe('linear curves', function () {\n    it('should be linear', function () {\n      allEquals(bezier(0, 0, 1, 1), bezier(1, 1, 0, 0), 100);\n      allEquals(bezier(0, 0, 1, 1), identity, 100);\n    });\n  });\n  describe('common properties', function () {\n    it('should be the right value at extremes', function () {\n      repeat(10)(function () {\n        var a = Math.random(),\n            b = 2 * Math.random() - 0.5,\n            c = Math.random(),\n            d = 2 * Math.random() - 0.5;\n        var easing = bezier(a, b, c, d);\n        expect(easing(0)).toBe(0);\n        expect(easing(1)).toBe(1);\n      });\n    });\n    it('should approach the projected value of its x=y projected curve', function () {\n      repeat(10)(function () {\n        var a = Math.random(),\n            b = Math.random(),\n            c = Math.random(),\n            d = Math.random();\n        var easing = bezier(a, b, c, d);\n        var projected = bezier(b, a, d, c);\n\n        var composed = function composed(x) {\n          return projected(easing(x));\n        };\n\n        allEquals(identity, composed, 100, makeAssertCloseWithPrecision(2));\n      });\n    });\n  });\n  describe('two same instances', function () {\n    it('should be strictly equals', function () {\n      repeat(10)(function () {\n        var a = Math.random(),\n            b = 2 * Math.random() - 0.5,\n            c = Math.random(),\n            d = 2 * Math.random() - 0.5;\n        allEquals(bezier(a, b, c, d), bezier(a, b, c, d), 100, 0);\n      });\n    });\n  });\n  describe('symmetric curves', function () {\n    it('should have a central value y~=0.5 at x=0.5', function () {\n      repeat(10)(function () {\n        var a = Math.random(),\n            b = 2 * Math.random() - 0.5,\n            c = 1 - a,\n            d = 1 - b;\n        var easing = bezier(a, b, c, d);\n        assertClose(easing(0.5), 0.5, 2);\n      });\n    });\n    it('should be symmetrical', function () {\n      repeat(10)(function () {\n        var a = Math.random(),\n            b = 2 * Math.random() - 0.5,\n            c = 1 - a,\n            d = 1 - b;\n        var easing = bezier(a, b, c, d);\n\n        var sym = function sym(x) {\n          return 1 - easing(1 - x);\n        };\n\n        allEquals(easing, sym, 100, makeAssertCloseWithPrecision(2));\n      });\n    });\n  });\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Animated/src/__tests__/bezier-test.js"],"names":["bezier","require","identity","x","assertClose","a","b","precision","expect","toBeCloseTo","makeAssertCloseWithPrecision","allEquals","be1","be2","samples","assertion","i","repeat","n","f","describe","it","toBe","toThrow","Math","random","c","d","easing","projected","composed","sym"],"mappings":"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","sourcesContent":["/**\n * Portions Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+react_native\n * @flow\n * @format\n */\n\n/**\n * BezierEasing - use bezier curve for transition easing function\n * https://github.com/gre/bezier-easing\n * @copyright 2014-2015 Gaetan Renaudeau. MIT License.\n */\n\n'use strict';\n\nconst bezier = require('../bezier');\n\nconst identity = function(x) {\n  return x;\n};\n\nfunction assertClose(a, b, precision = 3) {\n  expect(a).toBeCloseTo(b, precision);\n}\n\nfunction makeAssertCloseWithPrecision(precision) {\n  return function(a, b) {\n    assertClose(a, b, precision);\n  };\n}\n\nfunction allEquals(be1, be2, samples, assertion) {\n  if (!assertion) {\n    assertion = assertClose;\n  }\n  for (let i = 0; i <= samples; ++i) {\n    const x = i / samples;\n    assertion(be1(x), be2(x));\n  }\n}\n\nfunction repeat(n) {\n  return function(f) {\n    for (let i = 0; i < n; ++i) {\n      f();\n    }\n  };\n}\n\ndescribe('bezier', function() {\n  it('should be a function', function() {\n    expect(typeof bezier === 'function').toBe(true);\n  });\n  it('should creates an object', function() {\n    expect(typeof bezier(0, 0, 1, 1) === 'function').toBe(true);\n  });\n  it('should fail with wrong arguments', function() {\n    expect(function() {\n      bezier(0.5, 0.5, -5, 0.5);\n    }).toThrow();\n    expect(function() {\n      bezier(0.5, 0.5, 5, 0.5);\n    }).toThrow();\n    expect(function() {\n      bezier(-2, 0.5, 0.5, 0.5);\n    }).toThrow();\n    expect(function() {\n      bezier(2, 0.5, 0.5, 0.5);\n    }).toThrow();\n  });\n  describe('linear curves', function() {\n    it('should be linear', function() {\n      allEquals(bezier(0, 0, 1, 1), bezier(1, 1, 0, 0), 100);\n      allEquals(bezier(0, 0, 1, 1), identity, 100);\n    });\n  });\n  describe('common properties', function() {\n    it('should be the right value at extremes', function() {\n      repeat(10)(function() {\n        const a = Math.random(),\n          b = 2 * Math.random() - 0.5,\n          c = Math.random(),\n          d = 2 * Math.random() - 0.5;\n        const easing = bezier(a, b, c, d);\n        expect(easing(0)).toBe(0);\n        expect(easing(1)).toBe(1);\n      });\n    });\n\n    it('should approach the projected value of its x=y projected curve', function() {\n      repeat(10)(function() {\n        const a = Math.random(),\n          b = Math.random(),\n          c = Math.random(),\n          d = Math.random();\n        const easing = bezier(a, b, c, d);\n        const projected = bezier(b, a, d, c);\n        const composed = function(x) {\n          return projected(easing(x));\n        };\n        allEquals(identity, composed, 100, makeAssertCloseWithPrecision(2));\n      });\n    });\n  });\n  describe('two same instances', function() {\n    it('should be strictly equals', function() {\n      repeat(10)(function() {\n        const a = Math.random(),\n          b = 2 * Math.random() - 0.5,\n          c = Math.random(),\n          d = 2 * Math.random() - 0.5;\n        allEquals(bezier(a, b, c, d), bezier(a, b, c, d), 100, 0);\n      });\n    });\n  });\n  describe('symmetric curves', function() {\n    it('should have a central value y~=0.5 at x=0.5', function() {\n      repeat(10)(function() {\n        const a = Math.random(),\n          b = 2 * Math.random() - 0.5,\n          c = 1 - a,\n          d = 1 - b;\n        const easing = bezier(a, b, c, d);\n        assertClose(easing(0.5), 0.5, 2);\n      });\n    });\n    it('should be symmetrical', function() {\n      repeat(10)(function() {\n        const a = Math.random(),\n          b = 2 * Math.random() - 0.5,\n          c = 1 - a,\n          d = 1 - b;\n        const easing = bezier(a, b, c, d);\n        const sym = function(x) {\n          return 1 - easing(1 - x);\n        };\n        allEquals(easing, sym, 100, makeAssertCloseWithPrecision(2));\n      });\n    });\n  });\n});\n"]},"metadata":{},"sourceType":"script"}