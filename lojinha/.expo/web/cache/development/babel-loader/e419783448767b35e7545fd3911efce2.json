{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nvar _jsxFileName = \"/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/RNTester/js/examples/RCTRootView/RCTRootViewIOSExample.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar React = require('react');\n\nvar StyleSheet = require(\"react-native-web/dist/exports/StyleSheet\").default;\n\nvar Text = require(\"react-native-web/dist/exports/Text\").default;\n\nvar View = require(\"react-native-web/dist/exports/View\").default;\n\nvar AppPropertiesUpdateExample = function (_React$Component) {\n  _inherits(AppPropertiesUpdateExample, _React$Component);\n\n  var _super = _createSuper(AppPropertiesUpdateExample);\n\n  function AppPropertiesUpdateExample() {\n    _classCallCheck(this, AppPropertiesUpdateExample);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(AppPropertiesUpdateExample, [{\n    key: \"render\",\n    value: function render() {\n      var UpdatePropertiesExampleView = requireNativeComponent('UpdatePropertiesExampleView');\n      return React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 7\n        }\n      }, React.createElement(Text, {\n        style: styles.text,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 9\n        }\n      }, \"Press the button to update the field below by passing new properties to the RN app.\"), React.createElement(UpdatePropertiesExampleView, {\n        style: styles.nativeView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 9\n        }\n      }, React.createElement(Text, {\n        style: styles.text,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }\n      }, \"Error: This demo is accessible only from RNTester app\")));\n    }\n  }]);\n\n  return AppPropertiesUpdateExample;\n}(React.Component);\n\nvar RootViewSizeFlexibilityExample = function (_React$Component2) {\n  _inherits(RootViewSizeFlexibilityExample, _React$Component2);\n\n  var _super2 = _createSuper(RootViewSizeFlexibilityExample);\n\n  function RootViewSizeFlexibilityExample() {\n    _classCallCheck(this, RootViewSizeFlexibilityExample);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(RootViewSizeFlexibilityExample, [{\n    key: \"render\",\n    value: function render() {\n      var FlexibleSizeExampleView = requireNativeComponent('FlexibleSizeExampleView');\n      return React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 7\n        }\n      }, React.createElement(Text, {\n        style: styles.text,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 9\n        }\n      }, \"Press the button to resize it. On resize, RCTRootViewDelegate is notified. You can use it to handle content size updates.\"), React.createElement(FlexibleSizeExampleView, {\n        style: styles.nativeView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 9\n        }\n      }, React.createElement(Text, {\n        style: styles.text,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }\n      }, \"Error: This demo is accessible only from RNTester app\")));\n    }\n  }]);\n\n  return RootViewSizeFlexibilityExample;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#F5FCFF'\n  },\n  text: {\n    marginBottom: 20\n  },\n  nativeView: {\n    height: 140,\n    width: 280\n  }\n});\nexports.title = 'RCTRootView';\nexports.description = 'Examples that show useful methods when embedding React Native in a native application';\nexports.examples = [{\n  title: 'Updating app properties in runtime',\n  render: function render() {\n    return React.createElement(AppPropertiesUpdateExample, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 14\n      }\n    });\n  }\n}, {\n  title: \"RCTRootView's size flexibility\",\n  render: function render() {\n    return React.createElement(RootViewSizeFlexibilityExample, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 14\n      }\n    });\n  }\n}];","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/RNTester/js/examples/RCTRootView/RCTRootViewIOSExample.js"],"names":["React","require","AppPropertiesUpdateExample","UpdatePropertiesExampleView","requireNativeComponent","styles","container","text","nativeView","Component","RootViewSizeFlexibilityExample","FlexibleSizeExampleView","StyleSheet","create","flex","backgroundColor","marginBottom","height","width","exports","title","description","examples","render"],"mappings":"AAUA;;;;;;;;;;;;;;;;;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;;;;;;;IAQMC,0B;;;;;;;;;;;;;WACJ,kBAAS;AAEP,UAAMC,2BAA2B,GAAGC,sBAAsB,CACxD,6BADwD,CAA1D;AAGA,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAED,MAAM,CAACE,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+FADF,EAKE,oBAAC,2BAAD;AAA6B,QAAA,KAAK,EAAEF,MAAM,CAACG,UAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEH,MAAM,CAACE,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iEADF,CALF,CADF;AAaD;;;;EAnBsCP,KAAK,CAACS,S;;IAsBzCC,8B;;;;;;;;;;;;;WACJ,kBAAS;AAEP,UAAMC,uBAAuB,GAAGP,sBAAsB,CACpD,yBADoD,CAAtD;AAGA,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAED,MAAM,CAACE,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qIADF,EAKE,oBAAC,uBAAD;AAAyB,QAAA,KAAK,EAAEF,MAAM,CAACG,UAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEH,MAAM,CAACE,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iEADF,CALF,CADF;AAaD;;;;EAnB0CP,KAAK,CAACS,S;;AAsBnD,IAAMJ,MAAM,GAAGO,UAAU,CAACC,MAAX,CAAkB;AAC/BP,EAAAA,SAAS,EAAE;AACTQ,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE;AAFR,GADoB;AAK/BR,EAAAA,IAAI,EAAE;AACJS,IAAAA,YAAY,EAAE;AADV,GALyB;AAQ/BR,EAAAA,UAAU,EAAE;AACVS,IAAAA,MAAM,EAAE,GADE;AAEVC,IAAAA,KAAK,EAAE;AAFG;AARmB,CAAlB,CAAf;AAcAC,OAAO,CAACC,KAAR,GAAgB,aAAhB;AACAD,OAAO,CAACE,WAAR,GACE,uFADF;AAEAF,OAAO,CAACG,QAAR,GAAmB,CACjB;AACEF,EAAAA,KAAK,EAAE,oCADT;AAEEG,EAAAA,MAFF,oBAE+B;AAC3B,WAAO,oBAAC,0BAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;AAJH,CADiB,EAOjB;AACEH,EAAAA,KAAK,EAAE,gCADT;AAEEG,EAAAA,MAFF,oBAE+B;AAC3B,WAAO,oBAAC,8BAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;AAJH,CAPiB,CAAnB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst React = require('react');\nconst {\n  StyleSheet,\n  Text,\n  View,\n  requireNativeComponent,\n} = require('react-native');\n\nclass AppPropertiesUpdateExample extends React.Component<{...}> {\n  render() {\n    // Do not require this unless we are actually rendering.\n    const UpdatePropertiesExampleView = requireNativeComponent(\n      'UpdatePropertiesExampleView',\n    );\n    return (\n      <View style={styles.container}>\n        <Text style={styles.text}>\n          Press the button to update the field below by passing new properties\n          to the RN app.\n        </Text>\n        <UpdatePropertiesExampleView style={styles.nativeView}>\n          <Text style={styles.text}>\n            Error: This demo is accessible only from RNTester app\n          </Text>\n        </UpdatePropertiesExampleView>\n      </View>\n    );\n  }\n}\n\nclass RootViewSizeFlexibilityExample extends React.Component<{...}> {\n  render() {\n    // Do not require this unless we are actually rendering.\n    const FlexibleSizeExampleView = requireNativeComponent(\n      'FlexibleSizeExampleView',\n    );\n    return (\n      <View style={styles.container}>\n        <Text style={styles.text}>\n          Press the button to resize it. On resize, RCTRootViewDelegate is\n          notified. You can use it to handle content size updates.\n        </Text>\n        <FlexibleSizeExampleView style={styles.nativeView}>\n          <Text style={styles.text}>\n            Error: This demo is accessible only from RNTester app\n          </Text>\n        </FlexibleSizeExampleView>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#F5FCFF',\n  },\n  text: {\n    marginBottom: 20,\n  },\n  nativeView: {\n    height: 140,\n    width: 280,\n  },\n});\n\nexports.title = 'RCTRootView';\nexports.description =\n  'Examples that show useful methods when embedding React Native in a native application';\nexports.examples = [\n  {\n    title: 'Updating app properties in runtime',\n    render(): React.Element<any> {\n      return <AppPropertiesUpdateExample />;\n    },\n  },\n  {\n    title: \"RCTRootView's size flexibility\",\n    render(): React.Element<any> {\n      return <RootViewSizeFlexibilityExample />;\n    },\n  },\n];\n"]},"metadata":{},"sourceType":"script"}