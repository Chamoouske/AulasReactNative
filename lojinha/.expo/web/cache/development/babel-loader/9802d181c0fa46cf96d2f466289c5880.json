{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar core_plugins_1 = require(\"../plugins/core-plugins\");\n\nvar XML_1 = require(\"../utils/XML\");\n\nvar WarningAggregator = __importStar(require(\"../utils/warnings\"));\n\nvar Colors_1 = require(\"./Colors\");\n\nvar Resources_1 = require(\"./Resources\");\n\nvar Styles_1 = require(\"./Styles\");\n\nvar NAVIGATION_BAR_COLOR = 'navigationBarColor';\nvar WINDOW_LIGHT_NAVIGATION_BAR = 'android:windowLightNavigationBar';\n\nexports.withNavigationBar = function (config) {\n  return core_plugins_1.withDangerousMod(config, ['android', function _callee(config) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(setNavigationBarConfig(config, config.modRequest.projectRoot));\n\n          case 2:\n            return _context.abrupt(\"return\", config);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }]);\n};\n\nfunction getNavigationBarImmersiveMode(config) {\n  var _a;\n\n  return ((_a = config.androidNavigationBar) === null || _a === void 0 ? void 0 : _a.visible) || null;\n}\n\nexports.getNavigationBarImmersiveMode = getNavigationBarImmersiveMode;\n\nfunction getNavigationBarColor(config) {\n  var _a;\n\n  return ((_a = config.androidNavigationBar) === null || _a === void 0 ? void 0 : _a.backgroundColor) || null;\n}\n\nexports.getNavigationBarColor = getNavigationBarColor;\n\nfunction getNavigationBarStyle(config) {\n  var _a;\n\n  return ((_a = config.androidNavigationBar) === null || _a === void 0 ? void 0 : _a.barStyle) || 'light-content';\n}\n\nexports.getNavigationBarStyle = getNavigationBarStyle;\n\nfunction setNavigationBarConfig(config, projectRoot) {\n  var immersiveMode, hexString, barStyle, stylesPath, colorsPath, stylesJSON, colorsJSON, colorItemToAdd, styleItemToAdd, navigationBarStyleItem;\n  return _regeneratorRuntime.async(function setNavigationBarConfig$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          immersiveMode = getNavigationBarImmersiveMode(config);\n          hexString = getNavigationBarColor(config);\n          barStyle = getNavigationBarStyle(config);\n          _context2.next = 5;\n          return _regeneratorRuntime.awrap(Styles_1.getProjectStylesXMLPathAsync(projectRoot));\n\n        case 5:\n          stylesPath = _context2.sent;\n          _context2.next = 8;\n          return _regeneratorRuntime.awrap(Colors_1.getProjectColorsXMLPathAsync(projectRoot));\n\n        case 8:\n          colorsPath = _context2.sent;\n          _context2.next = 11;\n          return _regeneratorRuntime.awrap(Resources_1.readResourcesXMLAsync({\n            path: stylesPath\n          }));\n\n        case 11:\n          stylesJSON = _context2.sent;\n          _context2.next = 14;\n          return _regeneratorRuntime.awrap(Resources_1.readResourcesXMLAsync({\n            path: colorsPath\n          }));\n\n        case 14:\n          colorsJSON = _context2.sent;\n\n          if (immersiveMode) {\n            WarningAggregator.addWarningAndroid('androidNavigationBar.visible', 'Hiding the navigation bar must be done programmatically. Refer to the Android documentation - https://developer.android.com/training/system-ui/immersive - for instructions.');\n          }\n\n          if (hexString) {\n            colorItemToAdd = Resources_1.buildResourceItem({\n              name: NAVIGATION_BAR_COLOR,\n              value: hexString\n            });\n            colorsJSON = Colors_1.setColorItem(colorItemToAdd, colorsJSON);\n            styleItemToAdd = Resources_1.buildResourceItem({\n              name: \"android:\" + NAVIGATION_BAR_COLOR,\n              value: \"@color/\" + NAVIGATION_BAR_COLOR\n            });\n            stylesJSON = Styles_1.setStylesItem({\n              item: styleItemToAdd,\n              xml: stylesJSON,\n              parent: {\n                name: 'AppTheme',\n                parent: 'Theme.AppCompat.Light.NoActionBar'\n              }\n            });\n          }\n\n          if (barStyle === 'dark-content') {\n            navigationBarStyleItem = Resources_1.buildResourceItem({\n              name: WINDOW_LIGHT_NAVIGATION_BAR,\n              value: 'true'\n            });\n            stylesJSON = Styles_1.setStylesItem({\n              item: navigationBarStyleItem,\n              xml: stylesJSON,\n              parent: {\n                name: 'AppTheme',\n                parent: 'Theme.AppCompat.Light.NoActionBar'\n              }\n            });\n          }\n\n          _context2.prev = 18;\n          _context2.next = 21;\n          return _regeneratorRuntime.awrap(Promise.all([XML_1.writeXMLAsync({\n            path: colorsPath,\n            xml: colorsJSON\n          }), XML_1.writeXMLAsync({\n            path: stylesPath,\n            xml: stylesJSON\n          })]));\n\n        case 21:\n          _context2.next = 26;\n          break;\n\n        case 23:\n          _context2.prev = 23;\n          _context2.t0 = _context2[\"catch\"](18);\n          throw new Error(\"Error setting Android navigation bar color. Cannot write colors.xml to \" + colorsPath + \", or styles.xml to \" + stylesPath + \".\");\n\n        case 26:\n          return _context2.abrupt(\"return\", true);\n\n        case 27:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[18, 23]], Promise);\n}\n\nexports.setNavigationBarConfig = setNavigationBarConfig;","map":{"version":3,"sources":["../../src/android/NavigationBar.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAGA,IAAA,cAAA,GAAA,OAAA,2BAAA;;AACA,IAAA,KAAA,GAAA,OAAA,gBAAA;;AACA,IAAA,iBAAA,GAAA,YAAA,CAAA,OAAA,qBAAA,CAAA;;AACA,IAAA,QAAA,GAAA,OAAA,YAAA;;AACA,IAAA,WAAA,GAAA,OAAA,eAAA;;AACA,IAAA,QAAA,GAAA,OAAA,YAAA;;AAEA,IAAM,oBAAoB,GAAG,oBAA7B;AACA,IAAM,2BAA2B,GAAG,kCAApC;;AAEa,OAAA,CAAA,iBAAA,GAAkC,UAAA,MAAM,EAAG;AACtD,SAAO,cAAA,CAAA,gBAAA,CAAiB,MAAjB,EAAyB,CAC9B,SAD8B,EAE9B,iBAAM,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACQ,sBAAsB,CAAC,MAAD,EAAS,MAAM,CAAC,UAAP,CAAkB,WAA3B,CAD9B;;AAAA;AAAA,6CAES,MAFT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAF8B,CAAzB,CAAP;AAOD,CARY;;AAUb,SAAgB,6BAAhB,CAA8C,MAA9C,EAA8F;;;AAC5F,SAAO,CAAA,CAAA,EAAA,GAAA,MAAM,CAAC,oBAAP,MAA2B,IAA3B,IAA2B,EAAA,KAAA,KAAA,CAA3B,GAA2B,KAAA,CAA3B,GAA2B,EAAA,CAAE,OAA7B,KAAwC,IAA/C;AACD;;AAFD,OAAA,CAAA,6BAAA,GAAA,6BAAA;;AAIA,SAAgB,qBAAhB,CAAsC,MAAtC,EAAsF;;;AACpF,SAAO,CAAA,CAAA,EAAA,GAAA,MAAM,CAAC,oBAAP,MAA2B,IAA3B,IAA2B,EAAA,KAAA,KAAA,CAA3B,GAA2B,KAAA,CAA3B,GAA2B,EAAA,CAAE,eAA7B,KAAgD,IAAvD;AACD;;AAFD,OAAA,CAAA,qBAAA,GAAA,qBAAA;;AAIA,SAAgB,qBAAhB,CAAsC,MAAtC,EAAsF;;;AACpF,SAAO,CAAA,CAAA,EAAA,GAAA,MAAM,CAAC,oBAAP,MAA2B,IAA3B,IAA2B,EAAA,KAAA,KAAA,CAA3B,GAA2B,KAAA,CAA3B,GAA2B,EAAA,CAAE,QAA7B,KAAyC,eAAhD;AACD;;AAFD,OAAA,CAAA,qBAAA,GAAA,qBAAA;;AAIO,SAAe,sBAAf,CACL,MADK,EAEL,WAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAIC,UAAA,aAJD,GAIiB,6BAA6B,CAAC,MAAD,CAJ9C;AAKC,UAAA,SALD,GAKa,qBAAqB,CAAC,MAAD,CALlC;AAMC,UAAA,QAND,GAMY,qBAAqB,CAAC,MAAD,CANjC;AAAA;AAAA,2CAQoB,QAAA,CAAA,4BAAA,CAA6B,WAA7B,CARpB;;AAAA;AAQC,UAAA,UARD;AAAA;AAAA,2CASoB,QAAA,CAAA,4BAAA,CAA6B,WAA7B,CATpB;;AAAA;AASC,UAAA,UATD;AAAA;AAAA,2CAWkB,WAAA,CAAA,qBAAA,CAAsB;AAAE,YAAA,IAAI,EAAE;AAAR,WAAtB,CAXlB;;AAAA;AAWD,UAAA,UAXC;AAAA;AAAA,2CAYkB,WAAA,CAAA,qBAAA,CAAsB;AAAE,YAAA,IAAI,EAAE;AAAR,WAAtB,CAZlB;;AAAA;AAYD,UAAA,UAZC;;AAcL,cAAI,aAAJ,EAAmB;AAEjB,YAAA,iBAAiB,CAAC,iBAAlB,CACE,8BADF,EAEE,8KAFF;AAID;;AACD,cAAI,SAAJ,EAAe;AACP,YAAA,cADO,GACU,WAAA,CAAA,iBAAA,CAAkB;AAAE,cAAA,IAAI,EAAE,oBAAR;AAA8B,cAAA,KAAK,EAAE;AAArC,aAAlB,CADV;AAEb,YAAA,UAAU,GAAG,QAAA,CAAA,YAAA,CAAa,cAAb,EAA6B,UAA7B,CAAb;AAEM,YAAA,cAJO,GAIU,WAAA,CAAA,iBAAA,CAAkB;AACvC,cAAA,IAAI,eAAa,oBADsB;AAEvC,cAAA,KAAK,cAAY;AAFsB,aAAlB,CAJV;AAQb,YAAA,UAAU,GAAG,QAAA,CAAA,aAAA,CAAc;AACzB,cAAA,IAAI,EAAE,cADmB;AAEzB,cAAA,GAAG,EAAE,UAFoB;AAGzB,cAAA,MAAM,EAAE;AAAE,gBAAA,IAAI,EAAE,UAAR;AAAoB,gBAAA,MAAM,EAAE;AAA5B;AAHiB,aAAd,CAAb;AAKD;;AACD,cAAI,QAAQ,KAAK,cAAjB,EAAiC;AACzB,YAAA,sBADyB,GACA,WAAA,CAAA,iBAAA,CAAkB;AAC/C,cAAA,IAAI,EAAE,2BADyC;AAE/C,cAAA,KAAK,EAAE;AAFwC,aAAlB,CADA;AAK/B,YAAA,UAAU,GAAG,QAAA,CAAA,aAAA,CAAc;AACzB,cAAA,IAAI,EAAE,sBADmB;AAEzB,cAAA,GAAG,EAAE,UAFoB;AAGzB,cAAA,MAAM,EAAE;AAAE,gBAAA,IAAI,EAAE,UAAR;AAAoB,gBAAA,MAAM,EAAE;AAA5B;AAHiB,aAAd,CAAb;AAKD;;AA7CI;AAAA;AAAA,2CAgDG,OAAO,CAAC,GAAR,CAAY,CAChB,KAAA,CAAA,aAAA,CAAc;AAAE,YAAA,IAAI,EAAE,UAAR;AAAoB,YAAA,GAAG,EAAE;AAAzB,WAAd,CADgB,EAEhB,KAAA,CAAA,aAAA,CAAc;AAAE,YAAA,IAAI,EAAE,UAAR;AAAoB,YAAA,GAAG,EAAE;AAAzB,WAAd,CAFgB,CAAZ,CAhDH;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,gBAqDG,IAAI,KAAJ,6EACsE,UADtE,2BACsG,UADtG,OArDH;;AAAA;AAAA,4CAyDE,IAzDF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAP,OAAA,CAAA,sBAAA,GAAA,sBAAA","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withDangerousMod } from '../plugins/core-plugins';\nimport { writeXMLAsync } from '../utils/XML';\nimport * as WarningAggregator from '../utils/warnings';\nimport { getProjectColorsXMLPathAsync, setColorItem } from './Colors';\nimport { buildResourceItem, readResourcesXMLAsync } from './Resources';\nimport { getProjectStylesXMLPathAsync, setStylesItem } from './Styles';\n\nconst NAVIGATION_BAR_COLOR = 'navigationBarColor';\nconst WINDOW_LIGHT_NAVIGATION_BAR = 'android:windowLightNavigationBar';\n\nexport const withNavigationBar: ConfigPlugin = config => {\n  return withDangerousMod(config, [\n    'android',\n    async config => {\n      await setNavigationBarConfig(config, config.modRequest.projectRoot);\n      return config;\n    },\n  ]);\n};\n\nexport function getNavigationBarImmersiveMode(config: Pick<ExpoConfig, 'androidNavigationBar'>) {\n  return config.androidNavigationBar?.visible || null;\n}\n\nexport function getNavigationBarColor(config: Pick<ExpoConfig, 'androidNavigationBar'>) {\n  return config.androidNavigationBar?.backgroundColor || null;\n}\n\nexport function getNavigationBarStyle(config: Pick<ExpoConfig, 'androidNavigationBar'>) {\n  return config.androidNavigationBar?.barStyle || 'light-content';\n}\n\nexport async function setNavigationBarConfig(\n  config: Pick<ExpoConfig, 'androidNavigationBar'>,\n  projectRoot: string\n) {\n  const immersiveMode = getNavigationBarImmersiveMode(config);\n  const hexString = getNavigationBarColor(config);\n  const barStyle = getNavigationBarStyle(config);\n\n  const stylesPath = await getProjectStylesXMLPathAsync(projectRoot);\n  const colorsPath = await getProjectColorsXMLPathAsync(projectRoot);\n\n  let stylesJSON = await readResourcesXMLAsync({ path: stylesPath });\n  let colorsJSON = await readResourcesXMLAsync({ path: colorsPath });\n\n  if (immersiveMode) {\n    // Immersive mode needs to be set programatically\n    WarningAggregator.addWarningAndroid(\n      'androidNavigationBar.visible',\n      'Hiding the navigation bar must be done programmatically. Refer to the Android documentation - https://developer.android.com/training/system-ui/immersive - for instructions.'\n    );\n  }\n  if (hexString) {\n    const colorItemToAdd = buildResourceItem({ name: NAVIGATION_BAR_COLOR, value: hexString });\n    colorsJSON = setColorItem(colorItemToAdd, colorsJSON);\n\n    const styleItemToAdd = buildResourceItem({\n      name: `android:${NAVIGATION_BAR_COLOR}`,\n      value: `@color/${NAVIGATION_BAR_COLOR}`,\n    });\n    stylesJSON = setStylesItem({\n      item: styleItemToAdd,\n      xml: stylesJSON,\n      parent: { name: 'AppTheme', parent: 'Theme.AppCompat.Light.NoActionBar' },\n    });\n  }\n  if (barStyle === 'dark-content') {\n    const navigationBarStyleItem = buildResourceItem({\n      name: WINDOW_LIGHT_NAVIGATION_BAR,\n      value: 'true',\n    });\n    stylesJSON = setStylesItem({\n      item: navigationBarStyleItem,\n      xml: stylesJSON,\n      parent: { name: 'AppTheme', parent: 'Theme.AppCompat.Light.NoActionBar' },\n    });\n  }\n\n  try {\n    await Promise.all([\n      writeXMLAsync({ path: colorsPath, xml: colorsJSON }),\n      writeXMLAsync({ path: stylesPath, xml: stylesJSON }),\n    ]);\n  } catch (e) {\n    throw new Error(\n      `Error setting Android navigation bar color. Cannot write colors.xml to ${colorsPath}, or styles.xml to ${stylesPath}.`\n    );\n  }\n  return true;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}