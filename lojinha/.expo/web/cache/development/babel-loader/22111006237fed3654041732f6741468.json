{"ast":null,"code":"\"use strict\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.logUsagePolyfills = exports.logEntryPolyfills = exports.logPluginOrPolyfill = void 0;\n\nvar _helperCompilationTargets = require(\"@babel/helper-compilation-targets\");\n\nvar wordEnds = function wordEnds(size) {\n  return size > 1 ? \"s\" : \"\";\n};\n\nvar logPluginOrPolyfill = function logPluginOrPolyfill(item, targetVersions, list) {\n  var filteredList = (0, _helperCompilationTargets.getInclusionReasons)(item, targetVersions, list);\n  var formattedTargets = JSON.stringify(filteredList).replace(/,/g, \", \").replace(/^\\{\"/, '{ \"').replace(/\"\\}$/, '\" }');\n  console.log(\"  \" + item + \" \" + formattedTargets);\n};\n\nexports.logPluginOrPolyfill = logPluginOrPolyfill;\n\nvar logEntryPolyfills = function logEntryPolyfills(polyfillName, importPolyfillIncluded, polyfills, filename, polyfillTargets, allBuiltInsList) {\n  if (process.env.BABEL_ENV === \"test\") {\n    filename = filename.replace(/\\\\/g, \"/\");\n  }\n\n  if (!importPolyfillIncluded) {\n    console.log(\"\\n[\" + filename + \"] Import of \" + polyfillName + \" was not found.\");\n    return;\n  }\n\n  if (!polyfills.size) {\n    console.log(\"\\n[\" + filename + \"] Based on your targets, polyfills were not added.\");\n    return;\n  }\n\n  console.log(\"\\n[\" + filename + \"] Replaced \" + polyfillName + \" entries with the following polyfill\" + wordEnds(polyfills.size) + \":\");\n\n  for (var _iterator = _createForOfIteratorHelperLoose(polyfills), _step; !(_step = _iterator()).done;) {\n    var polyfill = _step.value;\n    logPluginOrPolyfill(polyfill, polyfillTargets, allBuiltInsList);\n  }\n};\n\nexports.logEntryPolyfills = logEntryPolyfills;\n\nvar logUsagePolyfills = function logUsagePolyfills(polyfills, filename, polyfillTargets, allBuiltInsList) {\n  if (process.env.BABEL_ENV === \"test\") {\n    filename = filename.replace(/\\\\/g, \"/\");\n  }\n\n  if (!polyfills.size) {\n    console.log(\"\\n[\" + filename + \"] Based on your code and targets, core-js polyfills were not added.\");\n    return;\n  }\n\n  console.log(\"\\n[\" + filename + \"] Added following core-js polyfill\" + wordEnds(polyfills.size) + \":\");\n\n  for (var _iterator2 = _createForOfIteratorHelperLoose(polyfills), _step2; !(_step2 = _iterator2()).done;) {\n    var polyfill = _step2.value;\n    logPluginOrPolyfill(polyfill, polyfillTargets, allBuiltInsList);\n  }\n};\n\nexports.logUsagePolyfills = logUsagePolyfills;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@expo/config/node_modules/@babel/preset-env/lib/debug.js"],"names":["Object","defineProperty","exports","value","logUsagePolyfills","logEntryPolyfills","logPluginOrPolyfill","_helperCompilationTargets","require","wordEnds","size","item","targetVersions","list","filteredList","getInclusionReasons","formattedTargets","JSON","stringify","replace","console","log","polyfillName","importPolyfillIncluded","polyfills","filename","polyfillTargets","allBuiltInsList","process","env","BABEL_ENV","polyfill"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.logUsagePolyfills = exports.logEntryPolyfills = exports.logPluginOrPolyfill = void 0;\n\nvar _helperCompilationTargets = require(\"@babel/helper-compilation-targets\");\n\nconst wordEnds = size => {\n  return size > 1 ? \"s\" : \"\";\n};\n\nconst logPluginOrPolyfill = (item, targetVersions, list) => {\n  const filteredList = (0, _helperCompilationTargets.getInclusionReasons)(item, targetVersions, list);\n  const formattedTargets = JSON.stringify(filteredList).replace(/,/g, \", \").replace(/^\\{\"/, '{ \"').replace(/\"\\}$/, '\" }');\n  console.log(`  ${item} ${formattedTargets}`);\n};\n\nexports.logPluginOrPolyfill = logPluginOrPolyfill;\n\nconst logEntryPolyfills = (polyfillName, importPolyfillIncluded, polyfills, filename, polyfillTargets, allBuiltInsList) => {\n  if (process.env.BABEL_ENV === \"test\") {\n    filename = filename.replace(/\\\\/g, \"/\");\n  }\n\n  if (!importPolyfillIncluded) {\n    console.log(`\\n[${filename}] Import of ${polyfillName} was not found.`);\n    return;\n  }\n\n  if (!polyfills.size) {\n    console.log(`\\n[${filename}] Based on your targets, polyfills were not added.`);\n    return;\n  }\n\n  console.log(`\\n[${filename}] Replaced ${polyfillName} entries with the following polyfill${wordEnds(polyfills.size)}:`);\n\n  for (const polyfill of polyfills) {\n    logPluginOrPolyfill(polyfill, polyfillTargets, allBuiltInsList);\n  }\n};\n\nexports.logEntryPolyfills = logEntryPolyfills;\n\nconst logUsagePolyfills = (polyfills, filename, polyfillTargets, allBuiltInsList) => {\n  if (process.env.BABEL_ENV === \"test\") {\n    filename = filename.replace(/\\\\/g, \"/\");\n  }\n\n  if (!polyfills.size) {\n    console.log(`\\n[${filename}] Based on your code and targets, core-js polyfills were not added.`);\n    return;\n  }\n\n  console.log(`\\n[${filename}] Added following core-js polyfill${wordEnds(polyfills.size)}:`);\n\n  for (const polyfill of polyfills) {\n    logPluginOrPolyfill(polyfill, polyfillTargets, allBuiltInsList);\n  }\n};\n\nexports.logUsagePolyfills = logUsagePolyfills;"]},"metadata":{},"sourceType":"script"}