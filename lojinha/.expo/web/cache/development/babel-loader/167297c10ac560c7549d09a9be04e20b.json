{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar android_plugins_1 = require(\"../plugins/android-plugins\");\n\nvar WarningAggregator = __importStar(require(\"../utils/warnings\"));\n\nexports.withScheme = android_plugins_1.createAndroidManifestPlugin(setScheme, 'withScheme');\n\nfunction getScheme(config) {\n  if (Array.isArray(config.scheme)) {\n    var validate = function validate(value) {\n      return typeof value === 'string';\n    };\n\n    return config.scheme.filter(validate);\n  } else if (typeof config.scheme === 'string') {\n    return [config.scheme];\n  }\n\n  return [];\n}\n\nexports.getScheme = getScheme;\n\nfunction setScheme(config, androidManifest) {\n  var _a, _b;\n\n  var scheme = [].concat(_toConsumableArray(getScheme(config)), _toConsumableArray(getScheme((_a = config.android) !== null && _a !== void 0 ? _a : {})));\n\n  if ((_b = config.android) === null || _b === void 0 ? void 0 : _b.package) {\n    scheme.push(config.android.package);\n  }\n\n  if (scheme.length === 0) {\n    return androidManifest;\n  }\n\n  if (!ensureManifestHasValidIntentFilter(androidManifest)) {\n    WarningAggregator.addWarningAndroid('scheme', \"Cannot add schemes because the provided manifest does not have a valid Activity with `android:launchMode=\\\"singleTask\\\"`.\\nThis guide can help you get setup properly https://expo.fyi/setup-android-uri-scheme\");\n    return androidManifest;\n  }\n\n  var currentSchemes = getSchemesFromManifest(androidManifest);\n\n  for (var _iterator = _createForOfIteratorHelperLoose(currentSchemes), _step; !(_step = _iterator()).done;) {\n    var uri = _step.value;\n    androidManifest = removeScheme(uri, androidManifest);\n  }\n\n  for (var _iterator2 = _createForOfIteratorHelperLoose(scheme), _step2; !(_step2 = _iterator2()).done;) {\n    var _uri = _step2.value;\n    androidManifest = appendScheme(_uri, androidManifest);\n  }\n\n  return androidManifest;\n}\n\nexports.setScheme = setScheme;\n\nfunction isValidRedirectIntentFilter(_ref) {\n  var actions = _ref.actions,\n      categories = _ref.categories,\n      schemes = _ref.schemes;\n  return actions.includes('android.intent.action.VIEW') && !categories.includes('android.intent.category.LAUNCHER');\n}\n\nfunction propertiesFromIntentFilter(intentFilter) {\n  var _a, _b, _c, _d, _e, _f;\n\n  var actions = (_b = (_a = intentFilter === null || intentFilter === void 0 ? void 0 : intentFilter.action) === null || _a === void 0 ? void 0 : _a.map(function (data) {\n    var _a;\n\n    return (_a = data === null || data === void 0 ? void 0 : data.$) === null || _a === void 0 ? void 0 : _a['android:name'];\n  })) !== null && _b !== void 0 ? _b : [];\n  var categories = (_d = (_c = intentFilter === null || intentFilter === void 0 ? void 0 : intentFilter.category) === null || _c === void 0 ? void 0 : _c.map(function (data) {\n    var _a;\n\n    return (_a = data === null || data === void 0 ? void 0 : data.$) === null || _a === void 0 ? void 0 : _a['android:name'];\n  })) !== null && _d !== void 0 ? _d : [];\n  var schemes = (_f = (_e = intentFilter === null || intentFilter === void 0 ? void 0 : intentFilter.data) === null || _e === void 0 ? void 0 : _e.map(function (data) {\n    var _a;\n\n    return (_a = data === null || data === void 0 ? void 0 : data.$) === null || _a === void 0 ? void 0 : _a['android:scheme'];\n  })) !== null && _f !== void 0 ? _f : [];\n  return {\n    schemes: schemes,\n    actions: actions,\n    categories: categories\n  };\n}\n\nfunction getSingleTaskIntentFilters(androidManifest) {\n  if (!Array.isArray(androidManifest.manifest.application)) return [];\n  var outputSchemes = [];\n\n  for (var _iterator3 = _createForOfIteratorHelperLoose(androidManifest.manifest.application), _step3; !(_step3 = _iterator3()).done;) {\n    var application = _step3.value;\n    var activity = application.activity;\n    var activities = Array.isArray(activity) ? activity : [activity];\n    var singleTaskActivities = activities.filter(function (activity) {\n      var _a;\n\n      return ((_a = activity === null || activity === void 0 ? void 0 : activity.$) === null || _a === void 0 ? void 0 : _a['android:launchMode']) === 'singleTask';\n    });\n\n    for (var _iterator4 = _createForOfIteratorHelperLoose(singleTaskActivities), _step4; !(_step4 = _iterator4()).done;) {\n      var _activity = _step4.value;\n      var intentFilters = _activity['intent-filter'];\n      outputSchemes = outputSchemes.concat(intentFilters);\n    }\n  }\n\n  return outputSchemes;\n}\n\nfunction getSchemesFromManifest(androidManifest) {\n  var outputSchemes = [];\n  var singleTaskIntentFilters = getSingleTaskIntentFilters(androidManifest);\n\n  for (var _iterator5 = _createForOfIteratorHelperLoose(singleTaskIntentFilters), _step5; !(_step5 = _iterator5()).done;) {\n    var intentFilter = _step5.value;\n    var properties = propertiesFromIntentFilter(intentFilter);\n\n    if (isValidRedirectIntentFilter(properties)) {\n      outputSchemes.push(properties);\n    }\n  }\n\n  return outputSchemes.reduce(function (prev, _ref2) {\n    var schemes = _ref2.schemes;\n    return [].concat(_toConsumableArray(prev), _toConsumableArray(schemes));\n  }, []);\n}\n\nexports.getSchemesFromManifest = getSchemesFromManifest;\n\nfunction ensureManifestHasValidIntentFilter(androidManifest) {\n  var _a;\n\n  if (!Array.isArray(androidManifest.manifest.application)) {\n    return false;\n  }\n\n  for (var _iterator6 = _createForOfIteratorHelperLoose(androidManifest.manifest.application), _step6; !(_step6 = _iterator6()).done;) {\n    var application = _step6.value;\n\n    for (var _iterator7 = _createForOfIteratorHelperLoose(application.activity || []), _step7; !(_step7 = _iterator7()).done;) {\n      var activity = _step7.value;\n\n      if (((_a = activity === null || activity === void 0 ? void 0 : activity.$) === null || _a === void 0 ? void 0 : _a['android:launchMode']) === 'singleTask') {\n        for (var _iterator8 = _createForOfIteratorHelperLoose(activity['intent-filter'] || []), _step8; !(_step8 = _iterator8()).done;) {\n          var intentFilter = _step8.value;\n          var properties = propertiesFromIntentFilter(intentFilter);\n\n          if (isValidRedirectIntentFilter(properties)) {\n            return true;\n          }\n        }\n\n        if (!activity['intent-filter']) {\n          activity['intent-filter'] = [];\n        }\n\n        activity['intent-filter'].push({\n          action: [{\n            $: {\n              'android:name': 'android.intent.action.VIEW'\n            }\n          }],\n          category: [{\n            $: {\n              'android:name': 'android.intent.category.DEFAULT'\n            }\n          }, {\n            $: {\n              'android:name': 'android.intent.category.BROWSABLE'\n            }\n          }]\n        });\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nexports.ensureManifestHasValidIntentFilter = ensureManifestHasValidIntentFilter;\n\nfunction hasScheme(scheme, androidManifest) {\n  var schemes = getSchemesFromManifest(androidManifest);\n  return schemes.includes(scheme);\n}\n\nexports.hasScheme = hasScheme;\n\nfunction appendScheme(scheme, androidManifest) {\n  var _a;\n\n  if (!Array.isArray(androidManifest.manifest.application)) {\n    return androidManifest;\n  }\n\n  for (var _iterator9 = _createForOfIteratorHelperLoose(androidManifest.manifest.application), _step9; !(_step9 = _iterator9()).done;) {\n    var application = _step9.value;\n\n    for (var _iterator10 = _createForOfIteratorHelperLoose(application.activity || []), _step10; !(_step10 = _iterator10()).done;) {\n      var activity = _step10.value;\n\n      if (((_a = activity === null || activity === void 0 ? void 0 : activity.$) === null || _a === void 0 ? void 0 : _a['android:launchMode']) === 'singleTask') {\n        for (var _iterator11 = _createForOfIteratorHelperLoose(activity['intent-filter'] || []), _step11; !(_step11 = _iterator11()).done;) {\n          var intentFilter = _step11.value;\n          var properties = propertiesFromIntentFilter(intentFilter);\n\n          if (isValidRedirectIntentFilter(properties)) {\n            if (!intentFilter.data) intentFilter.data = [];\n            intentFilter.data.push({\n              $: {\n                'android:scheme': scheme\n              }\n            });\n          }\n        }\n\n        break;\n      }\n    }\n  }\n\n  return androidManifest;\n}\n\nexports.appendScheme = appendScheme;\n\nfunction removeScheme(scheme, androidManifest) {\n  var _a, _b, _c, _d;\n\n  if (!Array.isArray(androidManifest.manifest.application)) {\n    return androidManifest;\n  }\n\n  for (var _iterator12 = _createForOfIteratorHelperLoose(androidManifest.manifest.application), _step12; !(_step12 = _iterator12()).done;) {\n    var application = _step12.value;\n\n    for (var _iterator13 = _createForOfIteratorHelperLoose(application.activity || []), _step13; !(_step13 = _iterator13()).done;) {\n      var activity = _step13.value;\n\n      if (((_a = activity === null || activity === void 0 ? void 0 : activity.$) === null || _a === void 0 ? void 0 : _a['android:launchMode']) === 'singleTask') {\n        for (var _iterator14 = _createForOfIteratorHelperLoose(activity['intent-filter'] || []), _step14; !(_step14 = _iterator14()).done;) {\n          var intentFilter = _step14.value;\n          var properties = propertiesFromIntentFilter(intentFilter);\n\n          if (isValidRedirectIntentFilter(properties)) {\n            for (var dataKey in (intentFilter === null || intentFilter === void 0 ? void 0 : intentFilter.data) || []) {\n              var data = (_b = intentFilter.data) === null || _b === void 0 ? void 0 : _b[dataKey];\n\n              if (((_c = data === null || data === void 0 ? void 0 : data.$) === null || _c === void 0 ? void 0 : _c['android:scheme']) === scheme) {\n                (_d = intentFilter.data) === null || _d === void 0 ? true : delete _d[dataKey];\n              }\n            }\n          }\n        }\n\n        break;\n      }\n    }\n  }\n\n  return androidManifest;\n}\n\nexports.removeScheme = removeScheme;","map":{"version":3,"sources":["../../src/android/Scheme.ts"],"names":[],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { createAndroidManifestPlugin } from '../plugins/android-plugins';\nimport * as WarningAggregator from '../utils/warnings';\nimport { AndroidManifest, ManifestActivity } from './Manifest';\n\nexport type IntentFilterProps = {\n  actions: string[];\n  categories: string[];\n  schemes: string[];\n};\n\nexport const withScheme = createAndroidManifestPlugin(setScheme, 'withScheme');\n\nexport function getScheme(config: { scheme?: string | string[] }): string[] {\n  if (Array.isArray(config.scheme)) {\n    const validate = (value: any): value is string => typeof value === 'string';\n\n    return config.scheme.filter<string>(validate);\n  } else if (typeof config.scheme === 'string') {\n    return [config.scheme];\n  }\n  return [];\n}\n\nexport function setScheme(\n  config: Pick<ExpoConfig, 'scheme' | 'android'>,\n  androidManifest: AndroidManifest\n) {\n  const scheme = [\n    ...getScheme(config),\n    // @ts-ignore: TODO: android.scheme is an unreleased -- harder to add to turtle v1.\n    ...getScheme(config.android ?? {}),\n  ];\n  // Add the package name to the list of schemes for easier Google auth and parity with Turtle v1.\n  if (config.android?.package) {\n    scheme.push(config.android.package);\n  }\n  if (scheme.length === 0) {\n    return androidManifest;\n  }\n\n  if (!ensureManifestHasValidIntentFilter(androidManifest)) {\n    WarningAggregator.addWarningAndroid(\n      'scheme',\n      `Cannot add schemes because the provided manifest does not have a valid Activity with \\`android:launchMode=\"singleTask\"\\`.\\nThis guide can help you get setup properly https://expo.fyi/setup-android-uri-scheme`\n    );\n    return androidManifest;\n  }\n\n  // Get the current schemes and remove them.\n  const currentSchemes = getSchemesFromManifest(androidManifest);\n  for (const uri of currentSchemes) {\n    androidManifest = removeScheme(uri, androidManifest);\n  }\n\n  // Now add all the new schemes.\n  for (const uri of scheme) {\n    androidManifest = appendScheme(uri, androidManifest);\n  }\n\n  return androidManifest;\n}\n\nfunction isValidRedirectIntentFilter({ actions, categories, schemes }: IntentFilterProps): boolean {\n  return (\n    actions.includes('android.intent.action.VIEW') &&\n    !categories.includes('android.intent.category.LAUNCHER')\n  );\n}\n\nfunction propertiesFromIntentFilter(intentFilter: any): IntentFilterProps {\n  const actions = intentFilter?.action?.map((data: any) => data?.$?.['android:name']) ?? [];\n  const categories = intentFilter?.category?.map((data: any) => data?.$?.['android:name']) ?? [];\n  const schemes = intentFilter?.data?.map((data: any) => data?.$?.['android:scheme']) ?? [];\n  return {\n    schemes,\n    actions,\n    categories,\n  };\n}\n\nfunction getSingleTaskIntentFilters(androidManifest: AndroidManifest): any[] {\n  if (!Array.isArray(androidManifest.manifest.application)) return [];\n\n  let outputSchemes: any[] = [];\n  for (const application of androidManifest.manifest.application) {\n    const { activity } = application;\n    // @ts-ignore\n    const activities = Array.isArray(activity) ? activity : [activity];\n    const singleTaskActivities = (activities as ManifestActivity[]).filter(\n      activity => activity?.$?.['android:launchMode'] === 'singleTask'\n    );\n    for (const activity of singleTaskActivities) {\n      const intentFilters = activity['intent-filter'];\n      outputSchemes = outputSchemes.concat(intentFilters);\n    }\n  }\n  return outputSchemes;\n}\n\nexport function getSchemesFromManifest(androidManifest: AndroidManifest): string[] {\n  const outputSchemes: IntentFilterProps[] = [];\n\n  const singleTaskIntentFilters = getSingleTaskIntentFilters(androidManifest);\n  for (const intentFilter of singleTaskIntentFilters) {\n    const properties = propertiesFromIntentFilter(intentFilter);\n    if (isValidRedirectIntentFilter(properties)) {\n      outputSchemes.push(properties);\n    }\n  }\n\n  return outputSchemes.reduce<string[]>((prev, { schemes }) => [...prev, ...schemes], []);\n}\n\nexport function ensureManifestHasValidIntentFilter(androidManifest: AndroidManifest): boolean {\n  if (!Array.isArray(androidManifest.manifest.application)) {\n    return false;\n  }\n\n  for (const application of androidManifest.manifest.application) {\n    for (const activity of application.activity || []) {\n      if (activity?.$?.['android:launchMode'] === 'singleTask') {\n        for (const intentFilter of activity['intent-filter'] || []) {\n          // Parse valid intent filters...\n          const properties = propertiesFromIntentFilter(intentFilter);\n          if (isValidRedirectIntentFilter(properties)) {\n            return true;\n          }\n        }\n        if (!activity['intent-filter']) {\n          activity['intent-filter'] = [];\n        }\n\n        activity['intent-filter'].push({\n          action: [{ $: { 'android:name': 'android.intent.action.VIEW' } }],\n          category: [\n            { $: { 'android:name': 'android.intent.category.DEFAULT' } },\n            { $: { 'android:name': 'android.intent.category.BROWSABLE' } },\n          ],\n        });\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nexport function hasScheme(scheme: string, androidManifest: AndroidManifest): boolean {\n  const schemes = getSchemesFromManifest(androidManifest);\n  return schemes.includes(scheme);\n}\n\nexport function appendScheme(scheme: string, androidManifest: AndroidManifest): AndroidManifest {\n  if (!Array.isArray(androidManifest.manifest.application)) {\n    return androidManifest;\n  }\n\n  for (const application of androidManifest.manifest.application) {\n    for (const activity of application.activity || []) {\n      if (activity?.$?.['android:launchMode'] === 'singleTask') {\n        for (const intentFilter of activity['intent-filter'] || []) {\n          const properties = propertiesFromIntentFilter(intentFilter);\n          if (isValidRedirectIntentFilter(properties)) {\n            if (!intentFilter.data) intentFilter.data = [];\n            intentFilter.data.push({\n              $: { 'android:scheme': scheme },\n            });\n          }\n        }\n        break;\n      }\n    }\n  }\n  return androidManifest;\n}\n\nexport function removeScheme(scheme: string, androidManifest: AndroidManifest): AndroidManifest {\n  if (!Array.isArray(androidManifest.manifest.application)) {\n    return androidManifest;\n  }\n\n  for (const application of androidManifest.manifest.application) {\n    for (const activity of application.activity || []) {\n      if (activity?.$?.['android:launchMode'] === 'singleTask') {\n        for (const intentFilter of activity['intent-filter'] || []) {\n          // Parse valid intent filters...\n          const properties = propertiesFromIntentFilter(intentFilter);\n          if (isValidRedirectIntentFilter(properties)) {\n            for (const dataKey in intentFilter?.data || []) {\n              const data = intentFilter.data?.[dataKey];\n              if (data?.$?.['android:scheme'] === scheme) {\n                delete intentFilter.data?.[dataKey];\n              }\n            }\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  return androidManifest;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}