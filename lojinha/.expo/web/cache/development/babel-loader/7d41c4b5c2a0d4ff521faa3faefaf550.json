{"ast":null,"code":"","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * react-dom v16.x.x libdefs from flow-typed\n *\n * @noformat\n */\ndeclare module 'react-dom' {\n  declare function findDOMNode(\n    componentOrElement: Element | ?React$Component<any, any>,\n  ): null | Element | Text;\n\n  declare function render<ElementType: React$ElementType>(\n    element: React$Element<ElementType>,\n    container: Element,\n    callback?: () => void,\n  ): React$ElementRef<ElementType>;\n\n  declare function hydrate<ElementType: React$ElementType>(\n    element: React$Element<ElementType>,\n    container: Element,\n    callback?: () => void,\n  ): React$ElementRef<ElementType>;\n\n  declare function createPortal(\n    node: React$Node,\n    container: Element,\n  ): React$Portal;\n\n  declare function unmountComponentAtNode(container: any): boolean;\n  declare var version: string;\n\n  declare function unstable_batchedUpdates<A, B, C, D, E>(\n    callback: (a: A, b: B, c: C, d: D, e: E) => mixed,\n    a: A,\n    b: B,\n    c: C,\n    d: D,\n    e: E,\n  ): void;\n  declare function unstable_renderSubtreeIntoContainer<\n    ElementType: React$ElementType,\n  >(\n    parentComponent: React$Component<any, any>,\n    nextElement: React$Element<ElementType>,\n    container: any,\n    callback?: () => void,\n  ): React$ElementRef<ElementType>;\n}\n\ndeclare module 'react-dom/server' {\n  declare function renderToString(element: React$Node): string;\n  declare function renderToStaticMarkup(element: React$Node): string;\n  declare function renderToNodeStream(element: React$Node): stream$Readable;\n  declare function renderToStaticNodeStream(\n    element: React$Node,\n  ): stream$Readable;\n  declare var version: string;\n}\n\ntype Thenable = { then(resolve: () => mixed, reject?: () => mixed): mixed, ... };\n\ndeclare module 'react-dom/test-utils' {\n  declare var Simulate: { [eventName: string]: (element: Element, eventData?: Object) => void, ... };\n  declare function renderIntoDocument(\n    instance: React$Element<any>,\n  ): React$Component<any, any>;\n  declare function mockComponent(\n    componentClass: React$ElementType,\n    mockTagName?: string,\n  ): Object;\n  declare function isElement(element: React$Element<any>): boolean;\n  declare function isElementOfType(\n    element: React$Element<any>,\n    componentClass: React$ElementType,\n  ): boolean;\n  declare function isDOMComponent(instance: any): boolean;\n  declare function isCompositeComponent(\n    instance: React$Component<any, any>,\n  ): boolean;\n  declare function isCompositeComponentWithType(\n    instance: React$Component<any, any>,\n    componentClass: React$ElementType,\n  ): boolean;\n  declare function findAllInRenderedTree(\n    tree: React$Component<any, any>,\n    test: (child: React$Component<any, any>) => boolean,\n  ): Array<React$Component<any, any>>;\n  declare function scryRenderedDOMComponentsWithClass(\n    tree: React$Component<any, any>,\n    className: string,\n  ): Array<Element>;\n  declare function findRenderedDOMComponentWithClass(\n    tree: React$Component<any, any>,\n    className: string,\n  ): ?Element;\n  declare function scryRenderedDOMComponentsWithTag(\n    tree: React$Component<any, any>,\n    tagName: string,\n  ): Array<Element>;\n  declare function findRenderedDOMComponentWithTag(\n    tree: React$Component<any, any>,\n    tagName: string,\n  ): ?Element;\n  declare function scryRenderedComponentsWithType(\n    tree: React$Component<any, any>,\n    componentClass: React$ElementType,\n  ): Array<React$Component<any, any>>;\n  declare function findRenderedComponentWithType(\n    tree: React$Component<any, any>,\n    componentClass: React$ElementType,\n  ): ?React$Component<any, any>;\n  declare function act(callback: () => void | Thenable): Thenable;\n}\n"]},"metadata":{},"sourceType":"script"}