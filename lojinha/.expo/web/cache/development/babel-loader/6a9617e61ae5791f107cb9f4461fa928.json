{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = tryLaunchEmulator;\n\nfunction _os() {\n  var data = _interopRequireDefault(require(\"os\"));\n\n  _os = function _os() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _execa() {\n  var data = _interopRequireDefault(require(\"execa\"));\n\n  _execa = function _execa() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _adb = _interopRequireDefault(require(\"./adb\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar emulatorCommand = process.env.ANDROID_HOME ? process.env.ANDROID_HOME + \"/emulator/emulator\" : 'emulator';\n\nvar getEmulators = function getEmulators() {\n  try {\n    var emulatorsOutput = _execa().default.sync(emulatorCommand, ['-list-avds']).stdout;\n\n    return emulatorsOutput.split(_os().default.EOL).filter(function (name) {\n      return name !== '';\n    });\n  } catch (_unused) {\n    return [];\n  }\n};\n\nvar launchEmulator = function launchEmulator(emulatorName, adbPath) {\n  return _regeneratorRuntime.async(function launchEmulator$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n            var cp = (0, _execa().default)(emulatorCommand, [\"@\" + emulatorName], {\n              detached: true,\n              stdio: 'ignore'\n            });\n            cp.unref();\n            var timeout = 30;\n            var rejectTimeout = setTimeout(function () {\n              cleanup();\n              reject(\"Could not start emulator within \" + timeout + \" seconds.\");\n            }, timeout * 1000);\n            var bootCheckInterval = setInterval(function () {\n              if (_adb.default.getDevices(adbPath).length > 0) {\n                cleanup();\n                resolve();\n              }\n            }, 1000);\n\n            var cleanup = function cleanup() {\n              clearTimeout(rejectTimeout);\n              clearInterval(bootCheckInterval);\n            };\n\n            cp.on('exit', function () {\n              cleanup();\n              reject('Emulator exited before boot.');\n            });\n            cp.on('error', function (error) {\n              cleanup();\n              reject(error.message);\n            });\n          }));\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nfunction tryLaunchEmulator(adbPath) {\n  var emulators;\n  return _regeneratorRuntime.async(function tryLaunchEmulator$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          emulators = getEmulators();\n\n          if (!(emulators.length > 0)) {\n            _context2.next = 11;\n            break;\n          }\n\n          _context2.prev = 2;\n          _context2.next = 5;\n          return _regeneratorRuntime.awrap(launchEmulator(emulators[0], adbPath));\n\n        case 5:\n          return _context2.abrupt(\"return\", {\n            success: true\n          });\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](2);\n          return _context2.abrupt(\"return\", {\n            success: false,\n            error: _context2.t0\n          });\n\n        case 11:\n          return _context2.abrupt(\"return\", {\n            success: false,\n            error: 'No emulators found as an output of `emulator -list-avds`'\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[2, 8]], Promise);\n}","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryLaunchEmulator.js"],"names":["Object","defineProperty","exports","value","default","tryLaunchEmulator","_os","data","_interopRequireDefault","require","_execa","_adb","obj","__esModule","emulatorCommand","process","env","ANDROID_HOME","getEmulators","emulatorsOutput","sync","stdout","split","EOL","filter","name","_unused","launchEmulator","emulatorName","adbPath","Promise","resolve","reject","cp","detached","stdio","unref","timeout","rejectTimeout","setTimeout","cleanup","bootCheckInterval","setInterval","getDevices","length","clearTimeout","clearInterval","on","error","message","emulators","success"],"mappings":"AAAA;;;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,iBAAlB;;AAEA,SAASC,GAAT,GAAe;AACb,MAAMC,IAAI,GAAGC,sBAAsB,CAACC,OAAO,CAAC,IAAD,CAAR,CAAnC;;AAEAH,EAAAA,GAAG,GAAG,eAAY;AAChB,WAAOC,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,SAASG,MAAT,GAAkB;AAChB,MAAMH,IAAI,GAAGC,sBAAsB,CAACC,OAAO,CAAC,OAAD,CAAR,CAAnC;;AAEAC,EAAAA,MAAM,GAAG,kBAAY;AACnB,WAAOH,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,IAAII,IAAI,GAAGH,sBAAsB,CAACC,OAAO,SAAR,CAAjC;;AAEA,SAASD,sBAAT,CAAgCI,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAER,IAAAA,OAAO,EAAEQ;AAAX,GAArC;AAAwD;;AAE/F,IAAME,eAAe,GAAGC,OAAO,CAACC,GAAR,CAAYC,YAAZ,GAA8BF,OAAO,CAACC,GAAR,CAAYC,YAA1C,0BAA6E,UAArG;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzB,MAAI;AACF,QAAMC,eAAe,GAAGT,MAAM,GAAGN,OAAT,CAAiBgB,IAAjB,CAAsBN,eAAtB,EAAuC,CAAC,YAAD,CAAvC,EAAuDO,MAA/E;;AAEA,WAAOF,eAAe,CAACG,KAAhB,CAAsBhB,GAAG,GAAGF,OAAN,CAAcmB,GAApC,EAAyCC,MAAzC,CAAgD,UAAAC,IAAI;AAAA,aAAIA,IAAI,KAAK,EAAb;AAAA,KAApD,CAAP;AACD,GAJD,CAIE,OAAOC,OAAP,EAAgB;AAChB,WAAO,EAAP;AACD;AACF,CARD;;AAUA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAOC,YAAP,EAAqBC,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA,2CACd,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,gBAAMC,EAAE,GAAG,CAAC,GAAGvB,MAAM,GAAGN,OAAb,EAAsBU,eAAtB,EAAuC,OAAKc,YAAL,CAAvC,EAA6D;AACtEM,cAAAA,QAAQ,EAAE,IAD4D;AAEtEC,cAAAA,KAAK,EAAE;AAF+D,aAA7D,CAAX;AAIAF,YAAAA,EAAE,CAACG,KAAH;AACA,gBAAMC,OAAO,GAAG,EAAhB;AAEA,gBAAMC,aAAa,GAAGC,UAAU,CAAC,YAAM;AACrCC,cAAAA,OAAO;AACPR,cAAAA,MAAM,sCAAoCK,OAApC,eAAN;AACD,aAH+B,EAG7BA,OAAO,GAAG,IAHmB,CAAhC;AAIA,gBAAMI,iBAAiB,GAAGC,WAAW,CAAC,YAAM;AAC1C,kBAAI/B,IAAI,CAACP,OAAL,CAAauC,UAAb,CAAwBd,OAAxB,EAAiCe,MAAjC,GAA0C,CAA9C,EAAiD;AAC/CJ,gBAAAA,OAAO;AACPT,gBAAAA,OAAO;AACR;AACF,aALoC,EAKlC,IALkC,CAArC;;AAOA,gBAAMS,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpBK,cAAAA,YAAY,CAACP,aAAD,CAAZ;AACAQ,cAAAA,aAAa,CAACL,iBAAD,CAAb;AACD,aAHD;;AAKAR,YAAAA,EAAE,CAACc,EAAH,CAAM,MAAN,EAAc,YAAM;AAClBP,cAAAA,OAAO;AACPR,cAAAA,MAAM,CAAC,8BAAD,CAAN;AACD,aAHD;AAIAC,YAAAA,EAAE,CAACc,EAAH,CAAM,OAAN,EAAe,UAAAC,KAAK,EAAI;AACtBR,cAAAA,OAAO;AACPR,cAAAA,MAAM,CAACgB,KAAK,CAACC,OAAP,CAAN;AACD,aAHD;AAID,WAhCM,CADc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;;AAoCA,SAAe5C,iBAAf,CAAiCwB,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AACQqB,UAAAA,SADR,GACoBhC,YAAY,EADhC;;AAAA,gBAGMgC,SAAS,CAACN,MAAV,GAAmB,CAHzB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,2CAKYjB,cAAc,CAACuB,SAAS,CAAC,CAAD,CAAV,EAAerB,OAAf,CAL1B;;AAAA;AAAA,4CAMa;AACLsB,YAAAA,OAAO,EAAE;AADJ,WANb;;AAAA;AAAA;AAAA;AAAA,4CAUa;AACLA,YAAAA,OAAO,EAAE,KADJ;AAELH,YAAAA,KAAK;AAFA,WAVb;;AAAA;AAAA,4CAiBS;AACLG,YAAAA,OAAO,EAAE,KADJ;AAELH,YAAAA,KAAK,EAAE;AAFF,WAjBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = tryLaunchEmulator;\n\nfunction _os() {\n  const data = _interopRequireDefault(require(\"os\"));\n\n  _os = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _execa() {\n  const data = _interopRequireDefault(require(\"execa\"));\n\n  _execa = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _adb = _interopRequireDefault(require(\"./adb\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst emulatorCommand = process.env.ANDROID_HOME ? `${process.env.ANDROID_HOME}/emulator/emulator` : 'emulator';\n\nconst getEmulators = () => {\n  try {\n    const emulatorsOutput = _execa().default.sync(emulatorCommand, ['-list-avds']).stdout;\n\n    return emulatorsOutput.split(_os().default.EOL).filter(name => name !== '');\n  } catch (_unused) {\n    return [];\n  }\n};\n\nconst launchEmulator = async (emulatorName, adbPath) => {\n  return new Promise((resolve, reject) => {\n    const cp = (0, _execa().default)(emulatorCommand, [`@${emulatorName}`], {\n      detached: true,\n      stdio: 'ignore'\n    });\n    cp.unref();\n    const timeout = 30; // Reject command after timeout\n\n    const rejectTimeout = setTimeout(() => {\n      cleanup();\n      reject(`Could not start emulator within ${timeout} seconds.`);\n    }, timeout * 1000);\n    const bootCheckInterval = setInterval(() => {\n      if (_adb.default.getDevices(adbPath).length > 0) {\n        cleanup();\n        resolve();\n      }\n    }, 1000);\n\n    const cleanup = () => {\n      clearTimeout(rejectTimeout);\n      clearInterval(bootCheckInterval);\n    };\n\n    cp.on('exit', () => {\n      cleanup();\n      reject('Emulator exited before boot.');\n    });\n    cp.on('error', error => {\n      cleanup();\n      reject(error.message);\n    });\n  });\n};\n\nasync function tryLaunchEmulator(adbPath) {\n  const emulators = getEmulators();\n\n  if (emulators.length > 0) {\n    try {\n      await launchEmulator(emulators[0], adbPath);\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error\n      };\n    }\n  }\n\n  return {\n    success: false,\n    error: 'No emulators found as an output of `emulator -list-avds`'\n  };\n}\n\n//# sourceMappingURL=tryLaunchEmulator.js.map"]},"metadata":{},"sourceType":"script"}