{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useWindowDimensions;\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _react = require(\"react\");\n\nfunction useWindowDimensions() {\n  var _ref = (0, _react.useState)(function () {\n    return _reactNative.Dimensions.get('window');\n  }),\n      _ref2 = _slicedToArray(_ref, 2),\n      dimensions = _ref2[0],\n      setDimensions = _ref2[1];\n\n  (0, _react.useEffect)(function () {\n    function handleChange(_ref3) {\n      var window = _ref3.window;\n\n      if (dimensions.width !== window.width || dimensions.height !== window.height || dimensions.scale !== window.scale || dimensions.fontScale !== window.fontScale) {\n        setDimensions(window);\n      }\n    }\n\n    _reactNative.Dimensions.addEventListener('change', handleChange);\n\n    handleChange({\n      window: _reactNative.Dimensions.get('window')\n    });\n    return function () {\n      _reactNative.Dimensions.removeEventListener('change', handleChange);\n    };\n  }, [dimensions]);\n  return dimensions;\n}","map":{"version":3,"sources":["useWindowDimensions.tsx"],"names":["Dimensions","window","dimensions","setDimensions","handleChange"],"mappings":";;;;;;;;;;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AAWe,SAAA,mBAAA,GAA+C;AAAA,aACxB,CAAA,GAAA,MAAA,CAAA,QAAA,EAAS;AAAA,WAAMA,YAAAA,CAAAA,UAAAA,CAAAA,GAAAA,CAAnD,QAAmDA,CAAN;AAAA,GAAT,CADwB;AAAA;AAAA,MACtD,UADsD;AAAA,MACtD,aADsD;;AAE5D,GAAA,GAAA,MAAA,CAAA,SAAA,EAAU,YAAM;AACd,aAAA,YAAA,QAA8D;AAAA,UAAtCC,MAAsC,SAAtCA,MAAsC;;AAC5D,UACEC,UAAU,CAAVA,KAAAA,KAAqBD,MAAM,CAA3BC,KAAAA,IACAA,UAAU,CAAVA,MAAAA,KAAsBD,MAAM,CAD5BC,MAAAA,IAEAA,UAAU,CAAVA,KAAAA,KAAqBD,MAAM,CAF3BC,KAAAA,IAGAA,UAAU,CAAVA,SAAAA,KAAyBD,MAAM,CAJjC,SAAA,EAKE;AACAE,QAAAA,aAAa,CAAbA,MAAa,CAAbA;AACD;AACF;;AACDH,IAAAA,YAAAA,CAAAA,UAAAA,CAAAA,gBAAAA,CAAAA,QAAAA,EAXc,YAWdA;;AAIAI,IAAAA,YAAY,CAAC;AAAEH,MAAAA,MAAM,EAAED,YAAAA,CAAAA,UAAAA,CAAAA,GAAAA,CAAAA,QAAAA;AAAV,KAAD,CAAZI;AACA,WAAO,YAAM;AACXJ,MAAAA,YAAAA,CAAAA,UAAAA,CAAAA,mBAAAA,CAAAA,QAAAA,EAAAA,YAAAA;AADF,KAAA;AAhBF,GAAA,EAmBG,CAnBH,UAmBG,CAnBH;AAoBA,SAAA,UAAA;AACD","sourcesContent":["import { Dimensions } from 'react-native';\nimport { useEffect, useState } from 'react';\n\ntype DisplayMetrics = {\n  width: number;\n  height: number;\n  scale: number;\n  fontScale: number;\n};\n\n// Copied from https://github.com/facebook/react-native/blob/8d57691a/Libraries/Utilities/useWindowDimensions.js\n// for compatibility with React Native < 0.61.\nexport default function useWindowDimensions(): DisplayMetrics {\n  const [dimensions, setDimensions] = useState(() => Dimensions.get('window'));\n  useEffect(() => {\n    function handleChange({ window }: { window: DisplayMetrics }) {\n      if (\n        dimensions.width !== window.width ||\n        dimensions.height !== window.height ||\n        dimensions.scale !== window.scale ||\n        dimensions.fontScale !== window.fontScale\n      ) {\n        setDimensions(window);\n      }\n    }\n    Dimensions.addEventListener('change', handleChange);\n    // We might have missed an update between calling `get` in render and\n    // `addEventListener` in this handler, so we set it here. If there was\n    // no change, React will filter out this update as a no-op.\n    handleChange({ window: Dimensions.get('window') });\n    return () => {\n      Dimensions.removeEventListener('change', handleChange);\n    };\n  }, [dimensions]);\n  return dimensions;\n}\n"]},"metadata":{},"sourceType":"script"}