{"ast":null,"code":"'use strict';\n\nvar Keyboard = require(\"../Keyboard\");\n\nvar dismissKeyboard = require(\"../../../Utilities/dismissKeyboard\");\n\nvar LayoutAnimation = require(\"../../../LayoutAnimation/LayoutAnimation\");\n\nvar NativeEventEmitter = require(\"../../../EventEmitter/NativeEventEmitter\");\n\nvar NativeModules = require(\"../../../BatchedBridge/NativeModules\");\n\njest.mock(\"../../../LayoutAnimation/LayoutAnimation\");\ndescribe('Keyboard', function () {\n  beforeEach(function () {\n    jest.resetAllMocks();\n  });\n  it('exposes KeyboardEventEmitter methods', function () {\n    var KeyboardObserver = NativeModules.KeyboardObserver;\n    var KeyboardEventEmitter = new NativeEventEmitter(KeyboardObserver);\n    expect(Keyboard._subscriber).toBe(KeyboardEventEmitter._subscriber);\n    expect(Keyboard._nativeModule).toBe(KeyboardEventEmitter._nativeModule);\n  });\n  it('uses dismissKeyboard utility', function () {\n    expect(Keyboard.dismiss).toBe(dismissKeyboard);\n  });\n  describe('scheduling layout animation', function () {\n    var scheduleLayoutAnimation = function scheduleLayoutAnimation(duration, easing) {\n      return Keyboard.scheduleLayoutAnimation({\n        duration: duration,\n        easing: easing\n      });\n    };\n\n    it('triggers layout animation', function () {\n      scheduleLayoutAnimation(12, 'spring');\n      expect(LayoutAnimation.configureNext).toHaveBeenCalledWith({\n        duration: 12,\n        update: {\n          duration: 12,\n          type: 'spring'\n        }\n      });\n    });\n    it('does not trigger animation when duration is null', function () {\n      scheduleLayoutAnimation(null, 'spring');\n      expect(LayoutAnimation.configureNext).not.toHaveBeenCalled();\n    });\n    it('does not trigger animation when duration is 0', function () {\n      scheduleLayoutAnimation(0, 'spring');\n      expect(LayoutAnimation.configureNext).not.toHaveBeenCalled();\n    });\n    describe('animation update type', function () {\n      var assertAnimationUpdateType = function assertAnimationUpdateType(type) {\n        return expect(LayoutAnimation.configureNext).toHaveBeenCalledWith(expect.objectContaining({\n          duration: expect.anything(),\n          update: {\n            duration: expect.anything(),\n            type: type\n          }\n        }));\n      };\n\n      it('retrieves type from LayoutAnimation', function () {\n        scheduleLayoutAnimation(12, 'linear');\n        assertAnimationUpdateType('linear');\n      });\n      it(\"defaults to 'keyboard' when key in LayoutAnimation is not found\", function () {\n        scheduleLayoutAnimation(12, 'some-unknown-animation-type');\n        assertAnimationUpdateType('keyboard');\n      });\n      it(\"defaults to 'keyboard' when easing is null\", function () {\n        scheduleLayoutAnimation(12, null);\n        assertAnimationUpdateType('keyboard');\n      });\n    });\n  });\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Components/Keyboard/__tests__/Keyboard-test.js"],"names":["Keyboard","require","dismissKeyboard","LayoutAnimation","NativeEventEmitter","NativeModules","jest","mock","describe","beforeEach","resetAllMocks","it","KeyboardObserver","KeyboardEventEmitter","expect","_subscriber","toBe","_nativeModule","dismiss","scheduleLayoutAnimation","duration","easing","configureNext","toHaveBeenCalledWith","update","type","not","toHaveBeenCalled","assertAnimationUpdateType","objectContaining","anything"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n * @emails oncall+react_native\n */\n\n'use strict';\n\nconst Keyboard = require('../Keyboard');\nconst dismissKeyboard = require('../../../Utilities/dismissKeyboard');\nconst LayoutAnimation = require('../../../LayoutAnimation/LayoutAnimation');\n\nconst NativeEventEmitter = require('../../../EventEmitter/NativeEventEmitter');\nconst NativeModules = require('../../../BatchedBridge/NativeModules');\n\njest.mock('../../../LayoutAnimation/LayoutAnimation');\n\ndescribe('Keyboard', () => {\n  beforeEach(() => {\n    jest.resetAllMocks();\n  });\n\n  it('exposes KeyboardEventEmitter methods', () => {\n    const KeyboardObserver = NativeModules.KeyboardObserver;\n    const KeyboardEventEmitter = new NativeEventEmitter(KeyboardObserver);\n\n    // $FlowFixMe\n    expect(Keyboard._subscriber).toBe(KeyboardEventEmitter._subscriber);\n    // $FlowFixMe Cannot access private property\n    expect(Keyboard._nativeModule).toBe(KeyboardEventEmitter._nativeModule);\n  });\n\n  it('uses dismissKeyboard utility', () => {\n    expect(Keyboard.dismiss).toBe(dismissKeyboard);\n  });\n\n  describe('scheduling layout animation', () => {\n    const scheduleLayoutAnimation = (\n      duration: number | null,\n      easing: string | null,\n    ): void => Keyboard.scheduleLayoutAnimation({duration, easing});\n\n    it('triggers layout animation', () => {\n      scheduleLayoutAnimation(12, 'spring');\n      expect(LayoutAnimation.configureNext).toHaveBeenCalledWith({\n        duration: 12,\n        update: {\n          duration: 12,\n          type: 'spring',\n        },\n      });\n    });\n\n    it('does not trigger animation when duration is null', () => {\n      scheduleLayoutAnimation(null, 'spring');\n      expect(LayoutAnimation.configureNext).not.toHaveBeenCalled();\n    });\n\n    it('does not trigger animation when duration is 0', () => {\n      scheduleLayoutAnimation(0, 'spring');\n      expect(LayoutAnimation.configureNext).not.toHaveBeenCalled();\n    });\n\n    describe('animation update type', () => {\n      const assertAnimationUpdateType = type =>\n        expect(LayoutAnimation.configureNext).toHaveBeenCalledWith(\n          expect.objectContaining({\n            duration: expect.anything(),\n            update: {duration: expect.anything(), type},\n          }),\n        );\n\n      it('retrieves type from LayoutAnimation', () => {\n        scheduleLayoutAnimation(12, 'linear');\n        assertAnimationUpdateType('linear');\n      });\n\n      it(\"defaults to 'keyboard' when key in LayoutAnimation is not found\", () => {\n        scheduleLayoutAnimation(12, 'some-unknown-animation-type');\n        assertAnimationUpdateType('keyboard');\n      });\n\n      it(\"defaults to 'keyboard' when easing is null\", () => {\n        scheduleLayoutAnimation(12, null);\n        assertAnimationUpdateType('keyboard');\n      });\n    });\n  });\n});\n"]},"metadata":{},"sourceType":"script"}