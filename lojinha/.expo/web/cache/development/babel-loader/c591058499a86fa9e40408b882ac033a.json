{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nvar _require = require(\"./CppHelpers\"),\n    getImports = _require.getImports,\n    toSafeCppString = _require.toSafeCppString;\n\nvar fileTemplate = \"\\n/**\\n * Copyright (c) Facebook, Inc. and its affiliates.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n */\\n\\n#include <gtest/gtest.h>\\n#include <react/components/::_LIBRARY_NAME_::/Props.h>\\n::_IMPORTS_::\\n\\nusing namespace facebook::react;\\n::_COMPONENT_TESTS_::\\n\";\nvar testTemplate = \"\\nTEST(::_COMPONENT_NAME_::_::_TEST_NAME_::, etc) {\\n  auto propParser = RawPropsParser();\\n  propParser.prepare<::_COMPONENT_NAME_::>();\\n  auto const &sourceProps = ::_COMPONENT_NAME_::();\\n  auto const &rawProps = RawProps(folly::dynamic::object(\\\"::_PROP_NAME_::\\\", ::_PROP_VALUE_::));\\n  rawProps.parse(propParser);\\n  ::_COMPONENT_NAME_::(sourceProps, rawProps);\\n}\\n\";\n\nfunction getTestCasesForProp(propName, typeAnnotation) {\n  var cases = [];\n\n  if (typeAnnotation.type === 'StringEnumTypeAnnotation') {\n    typeAnnotation.options.forEach(function (option) {\n      return cases.push({\n        propName: propName,\n        testName: propName + \"_\" + toSafeCppString(option.name),\n        propValue: option.name\n      });\n    });\n  } else if (typeAnnotation.type === 'StringTypeAnnotation') {\n    cases.push({\n      propName: propName,\n      propValue: typeAnnotation.default != null && typeAnnotation.default !== '' ? typeAnnotation.default : 'foo'\n    });\n  } else if (typeAnnotation.type === 'BooleanTypeAnnotation') {\n    cases.push({\n      propName: propName,\n      propValue: typeAnnotation.default != null ? typeAnnotation.default : true\n    });\n  } else if (typeAnnotation.type === 'IntegerTypeAnnotation') {\n    cases.push({\n      propName: propName,\n      propValue: typeAnnotation.default || 10\n    });\n  } else if (typeAnnotation.type === 'FloatTypeAnnotation') {\n    cases.push({\n      propName: propName,\n      propValue: typeAnnotation.default != null ? typeAnnotation.default : 0.1\n    });\n  } else if (typeAnnotation.type === 'NativePrimitiveTypeAnnotation') {\n    if (typeAnnotation.name === 'ColorPrimitive') {\n      cases.push({\n        propName: propName,\n        propValue: 1\n      });\n    } else if (typeAnnotation.name === 'PointPrimitive') {\n      cases.push({\n        propName: propName,\n        propValue: 'folly::dynamic::object(\"x\", 1)(\"y\", 1)',\n        raw: true\n      });\n    } else if (typeAnnotation.name === 'ImageSourcePrimitive') {\n      cases.push({\n        propName: propName,\n        propValue: 'folly::dynamic::object(\"url\", \"testurl\")',\n        raw: true\n      });\n    }\n  }\n\n  return cases;\n}\n\nfunction generateTestsString(name, component) {\n  function createTest(_ref) {\n    var testName = _ref.testName,\n        propName = _ref.propName,\n        propValue = _ref.propValue,\n        _ref$raw = _ref.raw,\n        raw = _ref$raw === void 0 ? false : _ref$raw;\n    var value = !raw && typeof propValue === 'string' ? \"\\\"\" + propValue + \"\\\"\" : propValue;\n    return testTemplate.replace(/::_COMPONENT_NAME_::/g, name).replace(/::_TEST_NAME_::/g, testName != null ? testName : propName).replace(/::_PROP_NAME_::/g, propName).replace(/::_PROP_VALUE_::/g, String(value));\n  }\n\n  var testCases = component.props.reduce(function (cases, prop) {\n    return cases.concat(getTestCasesForProp(prop.name, prop.typeAnnotation));\n  }, []);\n  var baseTest = {\n    testName: 'DoesNotDie',\n    propName: 'xx_invalid_xx',\n    propValue: 'xx_invalid_xx'\n  };\n  return [baseTest].concat(_toConsumableArray(testCases)).map(createTest).join('');\n}\n\nmodule.exports = {\n  generate: function generate(libraryName, schema, moduleSpecName) {\n    var fileName = 'Tests.cpp';\n    var allImports = new Set(['#include <react/core/propsConversions.h>', '#include <react/core/RawProps.h>', '#include <react/core/RawPropsParser.h>']);\n    var componentTests = Object.keys(schema.modules).map(function (moduleName) {\n      var components = schema.modules[moduleName].components;\n\n      if (components == null) {\n        return null;\n      }\n\n      return Object.keys(components).map(function (componentName) {\n        var component = components[componentName];\n        var name = componentName + \"Props\";\n        var imports = getImports(component.props);\n        imports.forEach(allImports.add, allImports);\n        return generateTestsString(name, component);\n      }).join('');\n    }).filter(Boolean).join('');\n    var imports = Array.from(allImports).sort().join('\\n').trim();\n    var replacedTemplate = fileTemplate.replace(/::_IMPORTS_::/g, imports).replace(/::_LIBRARY_NAME_::/g, libraryName).replace(/::_COMPONENT_TESTS_::/g, componentTests).trim();\n    return new Map([[fileName, replacedTemplate]]);\n  }\n};","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/packages/react-native-codegen/src/generators/components/GenerateTests.js"],"names":["require","getImports","toSafeCppString","fileTemplate","testTemplate","getTestCasesForProp","propName","typeAnnotation","cases","type","options","forEach","option","push","testName","name","propValue","default","raw","generateTestsString","component","createTest","value","replace","String","testCases","props","reduce","prop","concat","baseTest","map","join","module","exports","generate","libraryName","schema","moduleSpecName","fileName","allImports","Set","componentTests","Object","keys","modules","moduleName","components","componentName","imports","add","filter","Boolean","Array","from","sort","trim","replacedTemplate","Map"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\n'use strict';\n\nimport type {SchemaType} from '../../CodegenSchema';\nconst {getImports, toSafeCppString} = require('./CppHelpers');\n\ntype FilesOutput = Map<string, string>;\ntype PropValueType = string | number | boolean;\n\ntype TestCase = $ReadOnly<{|\n  propName: string,\n  propValue: ?PropValueType,\n  testName?: string,\n  raw?: boolean,\n|}>;\n\nconst fileTemplate = `\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n#include <gtest/gtest.h>\n#include <react/components/::_LIBRARY_NAME_::/Props.h>\n::_IMPORTS_::\n\nusing namespace facebook::react;\n::_COMPONENT_TESTS_::\n`;\n\nconst testTemplate = `\nTEST(::_COMPONENT_NAME_::_::_TEST_NAME_::, etc) {\n  auto propParser = RawPropsParser();\n  propParser.prepare<::_COMPONENT_NAME_::>();\n  auto const &sourceProps = ::_COMPONENT_NAME_::();\n  auto const &rawProps = RawProps(folly::dynamic::object(\"::_PROP_NAME_::\", ::_PROP_VALUE_::));\n  rawProps.parse(propParser);\n  ::_COMPONENT_NAME_::(sourceProps, rawProps);\n}\n`;\n\nfunction getTestCasesForProp(propName, typeAnnotation) {\n  const cases = [];\n  if (typeAnnotation.type === 'StringEnumTypeAnnotation') {\n    typeAnnotation.options.forEach(option =>\n      cases.push({\n        propName,\n        testName: `${propName}_${toSafeCppString(option.name)}`,\n        propValue: option.name,\n      }),\n    );\n  } else if (typeAnnotation.type === 'StringTypeAnnotation') {\n    cases.push({\n      propName,\n      propValue:\n        typeAnnotation.default != null && typeAnnotation.default !== ''\n          ? typeAnnotation.default\n          : 'foo',\n    });\n  } else if (typeAnnotation.type === 'BooleanTypeAnnotation') {\n    cases.push({\n      propName: propName,\n      propValue: typeAnnotation.default != null ? typeAnnotation.default : true,\n    });\n  } else if (typeAnnotation.type === 'IntegerTypeAnnotation') {\n    cases.push({\n      propName,\n      propValue: typeAnnotation.default || 10,\n    });\n  } else if (typeAnnotation.type === 'FloatTypeAnnotation') {\n    cases.push({\n      propName,\n      propValue: typeAnnotation.default != null ? typeAnnotation.default : 0.1,\n    });\n  } else if (typeAnnotation.type === 'NativePrimitiveTypeAnnotation') {\n    if (typeAnnotation.name === 'ColorPrimitive') {\n      cases.push({\n        propName,\n        propValue: 1,\n      });\n    } else if (typeAnnotation.name === 'PointPrimitive') {\n      cases.push({\n        propName,\n        propValue: 'folly::dynamic::object(\"x\", 1)(\"y\", 1)',\n        raw: true,\n      });\n    } else if (typeAnnotation.name === 'ImageSourcePrimitive') {\n      cases.push({\n        propName,\n        propValue: 'folly::dynamic::object(\"url\", \"testurl\")',\n        raw: true,\n      });\n    }\n  }\n\n  return cases;\n}\n\nfunction generateTestsString(name, component) {\n  function createTest({testName, propName, propValue, raw = false}: TestCase) {\n    const value =\n      !raw && typeof propValue === 'string' ? `\"${propValue}\"` : propValue;\n\n    return testTemplate\n      .replace(/::_COMPONENT_NAME_::/g, name)\n      .replace(/::_TEST_NAME_::/g, testName != null ? testName : propName)\n      .replace(/::_PROP_NAME_::/g, propName)\n      .replace(/::_PROP_VALUE_::/g, String(value));\n  }\n\n  const testCases = component.props.reduce((cases, prop) => {\n    return cases.concat(getTestCasesForProp(prop.name, prop.typeAnnotation));\n  }, []);\n\n  const baseTest = {\n    testName: 'DoesNotDie',\n    propName: 'xx_invalid_xx',\n    propValue: 'xx_invalid_xx',\n  };\n\n  return [baseTest, ...testCases].map(createTest).join('');\n}\n\nmodule.exports = {\n  generate(\n    libraryName: string,\n    schema: SchemaType,\n    moduleSpecName: string,\n  ): FilesOutput {\n    const fileName = 'Tests.cpp';\n    const allImports = new Set([\n      '#include <react/core/propsConversions.h>',\n      '#include <react/core/RawProps.h>',\n      '#include <react/core/RawPropsParser.h>',\n    ]);\n\n    const componentTests = Object.keys(schema.modules)\n      .map(moduleName => {\n        const components = schema.modules[moduleName].components;\n        if (components == null) {\n          return null;\n        }\n\n        return Object.keys(components)\n          .map(componentName => {\n            const component = components[componentName];\n            const name = `${componentName}Props`;\n\n            const imports = getImports(component.props);\n            imports.forEach(allImports.add, allImports);\n\n            return generateTestsString(name, component);\n          })\n          .join('');\n      })\n      .filter(Boolean)\n      .join('');\n\n    const imports = Array.from(allImports)\n      .sort()\n      .join('\\n')\n      .trim();\n\n    const replacedTemplate = fileTemplate\n      .replace(/::_IMPORTS_::/g, imports)\n      .replace(/::_LIBRARY_NAME_::/g, libraryName)\n      .replace(/::_COMPONENT_TESTS_::/g, componentTests)\n      .trim();\n\n    return new Map([[fileName, replacedTemplate]]);\n  },\n};\n"]},"metadata":{},"sourceType":"script"}