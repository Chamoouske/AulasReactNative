{"ast":null,"code":"'use strict';\n\nvar _require = require('@babel/core'),\n    babelTransform = _require.transform;\n\nvar fixtures = require(\"../__test_fixtures__/fixtures.js\");\n\nvar failures = require(\"../__test_fixtures__/failures.js\");\n\nvar transform = function transform(fixture, filename) {\n  return babelTransform(fixture, {\n    babelrc: false,\n    cwd: '/',\n    filename: filename,\n    highlightCode: false,\n    plugins: [require('@babel/plugin-syntax-flow'), require(\"../index\")]\n  }).code;\n};\n\ndescribe('Babel plugin inline view configs', function () {\n  Object.keys(fixtures).sort().forEach(function (fixtureName) {\n    it(\"can inline config for \" + fixtureName, function () {\n      expect(transform(fixtures[fixtureName], fixtureName)).toMatchSnapshot();\n    });\n  });\n  Object.keys(failures).sort().forEach(function (fixtureName) {\n    it(\"fails on inline config for \" + fixtureName, function () {\n      expect(function () {\n        try {\n          transform(failures[fixtureName], fixtureName);\n        } catch (err) {\n          err.message = err.message.replace(/^[A-z]:\\\\/g, '/');\n          throw err;\n        }\n      }).toThrowErrorMatchingSnapshot();\n    });\n  });\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/packages/babel-plugin-inline-view-configs/__tests__/index-test.js"],"names":["require","babelTransform","transform","fixtures","failures","fixture","filename","babelrc","cwd","highlightCode","plugins","code","describe","Object","keys","sort","forEach","fixtureName","it","expect","toMatchSnapshot","err","message","replace","toThrowErrorMatchingSnapshot"],"mappings":"AAUA;;eAEoCA,OAAO,CAAC,aAAD,C;IAAzBC,c,YAAXC,S;;AACP,IAAMC,QAAQ,GAAGH,OAAO,oCAAxB;;AACA,IAAMI,QAAQ,GAAGJ,OAAO,oCAAxB;;AAEA,IAAME,SAAS,GAAG,SAAZA,SAAY,CAACG,OAAD,EAAUC,QAAV;AAAA,SAChBL,cAAc,CAACI,OAAD,EAAU;AACtBE,IAAAA,OAAO,EAAE,KADa;AAEtBC,IAAAA,GAAG,EAAE,GAFiB;AAGtBF,IAAAA,QAAQ,EAAEA,QAHY;AAItBG,IAAAA,aAAa,EAAE,KAJO;AAKtBC,IAAAA,OAAO,EAAE,CAACV,OAAO,CAAC,2BAAD,CAAR,EAAuCA,OAAO,YAA9C;AALa,GAAV,CAAd,CAMGW,IAPa;AAAA,CAAlB;;AASAC,QAAQ,CAAC,kCAAD,EAAqC,YAAM;AACjDC,EAAAA,MAAM,CAACC,IAAP,CAAYX,QAAZ,EACGY,IADH,GAEGC,OAFH,CAEW,UAAAC,WAAW,EAAI;AACtBC,IAAAA,EAAE,4BAA0BD,WAA1B,EAAyC,YAAM;AAC/CE,MAAAA,MAAM,CAACjB,SAAS,CAACC,QAAQ,CAACc,WAAD,CAAT,EAAwBA,WAAxB,CAAV,CAAN,CAAsDG,eAAtD;AACD,KAFC,CAAF;AAGD,GANH;AAQAP,EAAAA,MAAM,CAACC,IAAP,CAAYV,QAAZ,EACGW,IADH,GAEGC,OAFH,CAEW,UAAAC,WAAW,EAAI;AACtBC,IAAAA,EAAE,iCAA+BD,WAA/B,EAA8C,YAAM;AACpDE,MAAAA,MAAM,CAAC,YAAM;AACX,YAAI;AACFjB,UAAAA,SAAS,CAACE,QAAQ,CAACa,WAAD,CAAT,EAAwBA,WAAxB,CAAT;AACD,SAFD,CAEE,OAAOI,GAAP,EAAY;AACZA,UAAAA,GAAG,CAACC,OAAJ,GAAcD,GAAG,CAACC,OAAJ,CAAYC,OAAZ,CAAoB,YAApB,EAAkC,GAAlC,CAAd;AACA,gBAAMF,GAAN;AACD;AACF,OAPK,CAAN,CAOGG,4BAPH;AAQD,KATC,CAAF;AAUD,GAbH;AAcD,CAvBO,CAAR","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+react_native\n * @format\n */\n\n'use strict';\n\nconst {transform: babelTransform} = require('@babel/core');\nconst fixtures = require('../__test_fixtures__/fixtures.js');\nconst failures = require('../__test_fixtures__/failures.js');\n\nconst transform = (fixture, filename) =>\n  babelTransform(fixture, {\n    babelrc: false,\n    cwd: '/',\n    filename: filename,\n    highlightCode: false,\n    plugins: [require('@babel/plugin-syntax-flow'), require('../index')],\n  }).code;\n\ndescribe('Babel plugin inline view configs', () => {\n  Object.keys(fixtures)\n    .sort()\n    .forEach(fixtureName => {\n      it(`can inline config for ${fixtureName}`, () => {\n        expect(transform(fixtures[fixtureName], fixtureName)).toMatchSnapshot();\n      });\n    });\n\n  Object.keys(failures)\n    .sort()\n    .forEach(fixtureName => {\n      it(`fails on inline config for ${fixtureName}`, () => {\n        expect(() => {\n          try {\n            transform(failures[fixtureName], fixtureName);\n          } catch (err) {\n            err.message = err.message.replace(/^[A-z]:\\\\/g, '/'); // Ensure platform consistent snapshots.\n            throw err;\n          }\n        }).toThrowErrorMatchingSnapshot();\n      });\n    });\n});\n"]},"metadata":{},"sourceType":"script"}