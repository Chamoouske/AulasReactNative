{"ast":null,"code":"'use strict';\n\nvar ESLintTester = require(\"./eslint-tester.js\");\n\nvar rule = require(\"../error-subclass-name.js\");\n\nvar eslintTester = new ESLintTester();\nvar INVALID_SUPERCLASS_MESSAGE = \"'SomethingEndingWithError' must extend an error class (like 'Error') because its name is in PascalCase and ends with 'Error'.\";\nvar INVALID_OWN_NAME_MESSAGE = \"'Foo' may not be the name of an error class. It should be in PascalCase and end with 'Error'.\";\nvar MISSING_OWN_NAME_MESSAGE = \"An error class should have a PascalCase name ending with 'Error'.\";\nvar INVALID_FUNCTION_NAME_MESSAGE = \"'SomethingEndingWithError' is a reserved name. PascalCase names ending with 'Error' are reserved for error classes and may not be used for regular functions. Either rename this function or convert it to a class that extends 'Error'.\";\neslintTester.run('../error-subclass-name', rule, {\n  valid: ['class FooError extends Error {}', '(class FooError extends Error {})', 'class FooError extends SomethingEndingWithError {}', '(class FooError extends SomethingEndingWithError {})', 'function makeError() {}', '(function () {})', 'class Foo extends SomeLibrary.FooError {}', '(class extends SomeLibrary.FooError {})'],\n  invalid: [{\n    code: 'class SomethingEndingWithError {}',\n    errors: [{\n      message: INVALID_SUPERCLASS_MESSAGE\n    }]\n  }, {\n    code: '(class SomethingEndingWithError {})',\n    errors: [{\n      message: INVALID_SUPERCLASS_MESSAGE\n    }]\n  }, {\n    code: 'class Foo extends Error {}',\n    errors: [{\n      message: INVALID_OWN_NAME_MESSAGE\n    }]\n  }, {\n    code: '(class Foo extends Error {})',\n    errors: [{\n      message: INVALID_OWN_NAME_MESSAGE\n    }]\n  }, {\n    code: 'class Foo extends SomethingEndingWithError {}',\n    errors: [{\n      message: INVALID_OWN_NAME_MESSAGE\n    }]\n  }, {\n    code: '(class Foo extends SomethingEndingWithError {})',\n    errors: [{\n      message: INVALID_OWN_NAME_MESSAGE\n    }]\n  }, {\n    code: '(class extends Error {})',\n    errors: [{\n      message: MISSING_OWN_NAME_MESSAGE\n    }]\n  }, {\n    code: 'class SomethingEndingWithError extends C {}',\n    errors: [{\n      message: INVALID_SUPERCLASS_MESSAGE\n    }]\n  }, {\n    code: '(class SomethingEndingWithError extends C {})',\n    errors: [{\n      message: INVALID_SUPERCLASS_MESSAGE\n    }]\n  }, {\n    code: 'function SomethingEndingWithError() {}',\n    errors: [{\n      message: INVALID_FUNCTION_NAME_MESSAGE\n    }]\n  }, {\n    code: '(function SomethingEndingWithError() {})',\n    errors: [{\n      message: INVALID_FUNCTION_NAME_MESSAGE\n    }]\n  }, {\n    code: 'class SomethingEndingWithError extends SomeLibrary.FooError {}',\n    errors: [{\n      message: INVALID_SUPERCLASS_MESSAGE\n    }]\n  }, {\n    code: '(class SomethingEndingWithError extends SomeLibrary.FooError {})',\n    errors: [{\n      message: INVALID_SUPERCLASS_MESSAGE\n    }]\n  }]\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/packages/eslint-plugin-react-native-community/__tests__/error-subclass-name-test.js"],"names":["ESLintTester","require","rule","eslintTester","INVALID_SUPERCLASS_MESSAGE","INVALID_OWN_NAME_MESSAGE","MISSING_OWN_NAME_MESSAGE","INVALID_FUNCTION_NAME_MESSAGE","run","valid","invalid","code","errors","message"],"mappings":"AAUA;;AAEA,IAAMA,YAAY,GAAGC,OAAO,sBAA5B;;AAEA,IAAMC,IAAI,GAAGD,OAAO,6BAApB;;AAEA,IAAME,YAAY,GAAG,IAAIH,YAAJ,EAArB;AAEA,IAAMI,0BAA0B,GAC9B,+HADF;AAEA,IAAMC,wBAAwB,GAC5B,+FADF;AAEA,IAAMC,wBAAwB,GAC5B,mEADF;AAEA,IAAMC,6BAA6B,GACjC,0OADF;AAGAJ,YAAY,CAACK,GAAb,CAAiB,wBAAjB,EAA2CN,IAA3C,EAAiD;AAC/CO,EAAAA,KAAK,EAAE,CACL,iCADK,EAEL,mCAFK,EAGL,oDAHK,EAIL,sDAJK,EAKL,yBALK,EAML,kBANK,EAUL,2CAVK,EAWL,yCAXK,CADwC;AAc/CC,EAAAA,OAAO,EAAE,CACP;AACEC,IAAAA,IAAI,EAAE,mCADR;AAEEC,IAAAA,MAAM,EAAE,CAAC;AAACC,MAAAA,OAAO,EAAET;AAAV,KAAD;AAFV,GADO,EAKP;AACEO,IAAAA,IAAI,EAAE,qCADR;AAEEC,IAAAA,MAAM,EAAE,CAAC;AAACC,MAAAA,OAAO,EAAET;AAAV,KAAD;AAFV,GALO,EASP;AACEO,IAAAA,IAAI,EAAE,4BADR;AAEEC,IAAAA,MAAM,EAAE,CAAC;AAACC,MAAAA,OAAO,EAAER;AAAV,KAAD;AAFV,GATO,EAaP;AACEM,IAAAA,IAAI,EAAE,8BADR;AAEEC,IAAAA,MAAM,EAAE,CAAC;AAACC,MAAAA,OAAO,EAAER;AAAV,KAAD;AAFV,GAbO,EAiBP;AACEM,IAAAA,IAAI,EAAE,+CADR;AAEEC,IAAAA,MAAM,EAAE,CAAC;AAACC,MAAAA,OAAO,EAAER;AAAV,KAAD;AAFV,GAjBO,EAqBP;AACEM,IAAAA,IAAI,EAAE,iDADR;AAEEC,IAAAA,MAAM,EAAE,CAAC;AAACC,MAAAA,OAAO,EAAER;AAAV,KAAD;AAFV,GArBO,EAyBP;AACEM,IAAAA,IAAI,EAAE,0BADR;AAEEC,IAAAA,MAAM,EAAE,CAAC;AAACC,MAAAA,OAAO,EAAEP;AAAV,KAAD;AAFV,GAzBO,EA6BP;AACEK,IAAAA,IAAI,EAAE,6CADR;AAEEC,IAAAA,MAAM,EAAE,CAAC;AAACC,MAAAA,OAAO,EAAET;AAAV,KAAD;AAFV,GA7BO,EAiCP;AACEO,IAAAA,IAAI,EAAE,+CADR;AAEEC,IAAAA,MAAM,EAAE,CAAC;AAACC,MAAAA,OAAO,EAAET;AAAV,KAAD;AAFV,GAjCO,EAqCP;AACEO,IAAAA,IAAI,EAAE,wCADR;AAEEC,IAAAA,MAAM,EAAE,CAAC;AAACC,MAAAA,OAAO,EAAEN;AAAV,KAAD;AAFV,GArCO,EAyCP;AACEI,IAAAA,IAAI,EAAE,0CADR;AAEEC,IAAAA,MAAM,EAAE,CAAC;AAACC,MAAAA,OAAO,EAAEN;AAAV,KAAD;AAFV,GAzCO,EAiDP;AACEI,IAAAA,IAAI,EAAE,gEADR;AAEEC,IAAAA,MAAM,EAAE,CAAC;AAACC,MAAAA,OAAO,EAAET;AAAV,KAAD;AAFV,GAjDO,EAqDP;AACEO,IAAAA,IAAI,EAAE,kEADR;AAEEC,IAAAA,MAAM,EAAE,CAAC;AAACC,MAAAA,OAAO,EAAET;AAAV,KAAD;AAFV,GArDO;AAdsC,CAAjD","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+react_native\n * @format\n */\n\n'use strict';\n\nconst ESLintTester = require('./eslint-tester.js');\n\nconst rule = require('../error-subclass-name.js');\n\nconst eslintTester = new ESLintTester();\n\nconst INVALID_SUPERCLASS_MESSAGE =\n  \"'SomethingEndingWithError' must extend an error class (like 'Error') because its name is in PascalCase and ends with 'Error'.\";\nconst INVALID_OWN_NAME_MESSAGE =\n  \"'Foo' may not be the name of an error class. It should be in PascalCase and end with 'Error'.\";\nconst MISSING_OWN_NAME_MESSAGE =\n  \"An error class should have a PascalCase name ending with 'Error'.\";\nconst INVALID_FUNCTION_NAME_MESSAGE =\n  \"'SomethingEndingWithError' is a reserved name. PascalCase names ending with 'Error' are reserved for error classes and may not be used for regular functions. Either rename this function or convert it to a class that extends 'Error'.\";\n\neslintTester.run('../error-subclass-name', rule, {\n  valid: [\n    'class FooError extends Error {}',\n    '(class FooError extends Error {})',\n    'class FooError extends SomethingEndingWithError {}',\n    '(class FooError extends SomethingEndingWithError {})',\n    'function makeError() {}',\n    '(function () {})',\n\n    // The following cases are currently allowed but could be disallowed in the\n    // future. This is technically an escape hatch.\n    'class Foo extends SomeLibrary.FooError {}',\n    '(class extends SomeLibrary.FooError {})',\n  ],\n  invalid: [\n    {\n      code: 'class SomethingEndingWithError {}',\n      errors: [{message: INVALID_SUPERCLASS_MESSAGE}],\n    },\n    {\n      code: '(class SomethingEndingWithError {})',\n      errors: [{message: INVALID_SUPERCLASS_MESSAGE}],\n    },\n    {\n      code: 'class Foo extends Error {}',\n      errors: [{message: INVALID_OWN_NAME_MESSAGE}],\n    },\n    {\n      code: '(class Foo extends Error {})',\n      errors: [{message: INVALID_OWN_NAME_MESSAGE}],\n    },\n    {\n      code: 'class Foo extends SomethingEndingWithError {}',\n      errors: [{message: INVALID_OWN_NAME_MESSAGE}],\n    },\n    {\n      code: '(class Foo extends SomethingEndingWithError {})',\n      errors: [{message: INVALID_OWN_NAME_MESSAGE}],\n    },\n    {\n      code: '(class extends Error {})',\n      errors: [{message: MISSING_OWN_NAME_MESSAGE}],\n    },\n    {\n      code: 'class SomethingEndingWithError extends C {}',\n      errors: [{message: INVALID_SUPERCLASS_MESSAGE}],\n    },\n    {\n      code: '(class SomethingEndingWithError extends C {})',\n      errors: [{message: INVALID_SUPERCLASS_MESSAGE}],\n    },\n    {\n      code: 'function SomethingEndingWithError() {}',\n      errors: [{message: INVALID_FUNCTION_NAME_MESSAGE}],\n    },\n    {\n      code: '(function SomethingEndingWithError() {})',\n      errors: [{message: INVALID_FUNCTION_NAME_MESSAGE}],\n    },\n\n    // The following cases are intentionally disallowed because the member\n    // expression `SomeLibrary.FooError` doesn't imply that the superclass is\n    // actually declared with the name `FooError`.\n    {\n      code: 'class SomethingEndingWithError extends SomeLibrary.FooError {}',\n      errors: [{message: INVALID_SUPERCLASS_MESSAGE}],\n    },\n    {\n      code: '(class SomethingEndingWithError extends SomeLibrary.FooError {})',\n      errors: [{message: INVALID_SUPERCLASS_MESSAGE}],\n    },\n  ],\n});\n"]},"metadata":{},"sourceType":"script"}