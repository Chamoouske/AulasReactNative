{"ast":null,"code":"'use strict';","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/packages/react-native-codegen/src/CodegenSchema.js"],"names":[],"mappings":"AAUA","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\n'use strict';\n\nexport type CommandsFunctionTypeAnnotation = $ReadOnly<{|\n  type: 'FunctionTypeAnnotation',\n  params: $ReadOnlyArray<CommandsFunctionTypeParamAnnotation>,\n|}>;\n\nexport type CommandsFunctionTypeParamAnnotation = $ReadOnly<{|\n  name: string,\n  typeAnnotation: CommandsTypeAnnotation,\n|}>;\n\nexport type CommandsTypeAnnotation =\n  | BooleanTypeAnnotation\n  | Int32TypeAnnotation\n  | DoubleTypeAnnotation\n  | FloatTypeAnnotation\n  | StringTypeAnnotation;\n\nexport type DoubleTypeAnnotation = $ReadOnly<{|\n  type: 'DoubleTypeAnnotation',\n|}>;\n\nexport type FloatTypeAnnotation = $ReadOnly<{|\n  type: 'FloatTypeAnnotation',\n|}>;\n\nexport type BooleanTypeAnnotation = $ReadOnly<{|\n  type: 'BooleanTypeAnnotation',\n|}>;\n\nexport type Int32TypeAnnotation = $ReadOnly<{|\n  type: 'Int32TypeAnnotation',\n|}>;\n\nexport type StringTypeAnnotation = $ReadOnly<{|\n  type: 'StringTypeAnnotation',\n|}>;\n\nexport type ObjectPropertyType =\n  | $ReadOnly<{|\n      type: 'BooleanTypeAnnotation',\n      name: string,\n      optional: boolean,\n    |}>\n  | $ReadOnly<{|\n      type: 'StringTypeAnnotation',\n      name: string,\n      optional: boolean,\n    |}>\n  | $ReadOnly<{|\n      type: 'DoubleTypeAnnotation',\n      name: string,\n      optional: boolean,\n    |}>\n  | $ReadOnly<{|\n      type: 'FloatTypeAnnotation',\n      name: string,\n      optional: boolean,\n    |}>\n  | $ReadOnly<{|\n      type: 'Int32TypeAnnotation',\n      name: string,\n      optional: boolean,\n    |}>\n  | $ReadOnly<{|\n      type: 'StringEnumTypeAnnotation',\n      name: string,\n      optional: boolean,\n      options: $ReadOnlyArray<{|\n        name: string,\n      |}>,\n    |}>\n  | $ReadOnly<{|\n      type: 'ObjectTypeAnnotation',\n      name: string,\n      optional: boolean,\n      properties: $ReadOnlyArray<ObjectPropertyType>,\n    |}>;\n\ntype PropTypeTypeAnnotation =\n  | $ReadOnly<{|\n      type: 'BooleanTypeAnnotation',\n      default: boolean | null,\n    |}>\n  | $ReadOnly<{|\n      type: 'StringTypeAnnotation',\n      default: string | null,\n    |}>\n  | $ReadOnly<{|\n      type: 'DoubleTypeAnnotation',\n      default: number,\n    |}>\n  | $ReadOnly<{|\n      type: 'FloatTypeAnnotation',\n      default: number | null,\n    |}>\n  | $ReadOnly<{|\n      type: 'Int32TypeAnnotation',\n      default: number,\n    |}>\n  | $ReadOnly<{|\n      type: 'StringEnumTypeAnnotation',\n      default: string,\n      options: $ReadOnlyArray<{|\n        name: string,\n      |}>,\n    |}>\n  | $ReadOnly<{|\n      type: 'Int32EnumTypeAnnotation',\n      default: number,\n      options: $ReadOnlyArray<{|\n        value: number,\n      |}>,\n    |}>\n  | $ReadOnly<{|\n      type: 'NativePrimitiveTypeAnnotation',\n      name:\n        | 'ColorPrimitive'\n        | 'ImageSourcePrimitive'\n        | 'PointPrimitive'\n        | 'EdgeInsetsPrimitive',\n    |}>\n  | $ReadOnly<{|\n      type: 'ObjectTypeAnnotation',\n      properties: $ReadOnlyArray<PropTypeShape>,\n    |}>\n  | $ReadOnly<{|\n      type: 'ArrayTypeAnnotation',\n      elementType:\n        | $ReadOnly<{|\n            type: 'BooleanTypeAnnotation',\n          |}>\n        | $ReadOnly<{|\n            type: 'StringTypeAnnotation',\n          |}>\n        | $ReadOnly<{|\n            type: 'DoubleTypeAnnotation',\n          |}>\n        | $ReadOnly<{|\n            type: 'FloatTypeAnnotation',\n          |}>\n        | $ReadOnly<{|\n            type: 'Int32TypeAnnotation',\n          |}>\n        | $ReadOnly<{|\n            type: 'StringEnumTypeAnnotation',\n            default: string,\n            options: $ReadOnlyArray<{|\n              name: string,\n            |}>,\n          |}>\n        | $ReadOnly<{|\n            type: 'ObjectTypeAnnotation',\n            properties: $ReadOnlyArray<PropTypeShape>,\n          |}>\n        | $ReadOnly<{|\n            type: 'NativePrimitiveTypeAnnotation',\n            name:\n              | 'ColorPrimitive'\n              | 'ImageSourcePrimitive'\n              | 'PointPrimitive'\n              | 'EdgeInsetsPrimitive',\n          |}>\n        | $ReadOnly<{|\n            type: 'ArrayTypeAnnotation',\n            elementType: $ReadOnly<{|\n              type: 'ObjectTypeAnnotation',\n              properties: $ReadOnlyArray<PropTypeShape>,\n            |}>,\n          |}>,\n    |}>;\n\nexport type PropTypeShape = $ReadOnly<{|\n  name: string,\n  optional: boolean,\n  typeAnnotation: PropTypeTypeAnnotation,\n|}>;\n\nexport type PrimitiveTypeAnnotationType =\n  | 'StringTypeAnnotation'\n  | 'NumberTypeAnnotation'\n  | 'Int32TypeAnnotation'\n  | 'DoubleTypeAnnotation'\n  | 'FloatTypeAnnotation'\n  | 'BooleanTypeAnnotation'\n  | 'GenericObjectTypeAnnotation';\n\nexport type PrimitiveTypeAnnotation = $ReadOnly<{|\n  type: PrimitiveTypeAnnotationType,\n|}>;\n\nexport type FunctionTypeAnnotationParamTypeAnnotation =\n  | $ReadOnly<{|\n      type:\n        | 'AnyTypeAnnotation'\n        | 'FunctionTypeAnnotation'\n        | PrimitiveTypeAnnotationType,\n    |}>\n  | $ReadOnly<{|\n      type: 'ArrayTypeAnnotation',\n      elementType: ?FunctionTypeAnnotationParamTypeAnnotation,\n    |}>\n  | $ReadOnly<{|\n      type: 'ObjectTypeAnnotation',\n      properties: ?$ReadOnlyArray<ObjectParamTypeAnnotation>,\n    |}>;\n\nexport type FunctionTypeAnnotationReturnArrayElementType = FunctionTypeAnnotationParamTypeAnnotation;\n\nexport type ObjectParamTypeAnnotation = $ReadOnly<{|\n  optional: boolean,\n  name: string,\n  typeAnnotation: FunctionTypeAnnotationParamTypeAnnotation,\n|}>;\n\nexport type FunctionTypeAnnotationReturn =\n  | $ReadOnly<{|\n      nullable: boolean,\n      type:\n        | PrimitiveTypeAnnotationType\n        | 'VoidTypeAnnotation'\n        | 'GenericPromiseTypeAnnotation',\n    |}>\n  | $ReadOnly<{|\n      nullable: boolean,\n      type: 'ArrayTypeAnnotation',\n      elementType: ?FunctionTypeAnnotationReturnArrayElementType,\n    |}>\n  | $ReadOnly<{|\n      nullable: boolean,\n      type: 'ObjectTypeAnnotation',\n      properties: ?$ReadOnlyArray<ObjectParamTypeAnnotation>,\n    |}>;\n\nexport type FunctionTypeAnnotationParam = $ReadOnly<{|\n  nullable: boolean,\n  name: string,\n  typeAnnotation: FunctionTypeAnnotationParamTypeAnnotation,\n|}>;\n\nexport type FunctionTypeAnnotation = $ReadOnly<{|\n  type: 'FunctionTypeAnnotation',\n  params: $ReadOnlyArray<FunctionTypeAnnotationParam>,\n  returnTypeAnnotation: FunctionTypeAnnotationReturn,\n  optional: boolean,\n|}>;\n\nexport type MethodTypeShape = $ReadOnly<{|\n  name: string,\n  typeAnnotation: FunctionTypeAnnotation,\n|}>;\n\nexport type NativeModuleShape = $ReadOnly<{|\n  properties: $ReadOnlyArray<MethodTypeShape>,\n|}>;\n\nexport type EventTypeShape = $ReadOnly<{|\n  name: string,\n  bubblingType: 'direct' | 'bubble',\n  optional: boolean,\n  paperTopLevelNameDeprecated?: string,\n  typeAnnotation: $ReadOnly<{|\n    type: 'EventTypeAnnotation',\n    argument?: $ReadOnly<{|\n      type: 'ObjectTypeAnnotation',\n      properties: $ReadOnlyArray<ObjectPropertyType>,\n    |}>,\n  |}>,\n|}>;\n\nexport type CommandTypeShape = $ReadOnly<{|\n  name: string,\n  optional: boolean,\n  typeAnnotation: CommandsFunctionTypeAnnotation,\n|}>;\n\nexport type OptionsShape = $ReadOnly<{|\n  interfaceOnly?: boolean,\n\n  // Use for components with no current paper rename in progress\n  // Does not check for new name\n  paperComponentName?: string,\n\n  // Use for components that are not used on one or the other platform.\n  excludedPlatform?: 'iOS' | 'android',\n\n  // Use for components currently being renamed in paper\n  // Will use new name if it is available and fallback to this name\n  paperComponentNameDeprecated?: string,\n|}>;\n\nexport type ExtendsPropsShape = $ReadOnly<{|\n  type: 'ReactNativeBuiltInType',\n  knownTypeName: 'ReactNativeCoreViewProps',\n|}>;\n\nexport type ComponentShape = $ReadOnly<{|\n  ...OptionsShape,\n  extendsProps: $ReadOnlyArray<ExtendsPropsShape>,\n  events: $ReadOnlyArray<EventTypeShape>,\n  props: $ReadOnlyArray<PropTypeShape>,\n  commands: $ReadOnlyArray<CommandTypeShape>,\n|}>;\n\nexport type SchemaType = $ReadOnly<{|\n  modules: $ReadOnly<{\n    [module: string]: $ReadOnly<{|\n      components?: $ReadOnly<{[component: string]: ComponentShape, ...}>,\n      nativeModules?: $ReadOnly<{\n        [nativeModule: string]: NativeModuleShape,\n        ...,\n      }>,\n    |}>,\n    ...,\n  }>,\n|}>;\n"]},"metadata":{},"sourceType":"script"}