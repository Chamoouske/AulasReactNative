{"ast":null,"code":"'use strict';\n\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native-web/src/vendor/react-native/Animated/createAnimatedComponent.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { AnimatedEvent } from \"./AnimatedEvent\";\nimport AnimatedProps from \"./nodes/AnimatedProps\";\nimport React from 'react';\nimport invariant from 'fbjs/lib/invariant';\nimport mergeRefs from \"../../../modules/mergeRefs\";\n\nfunction createAnimatedComponent(Component, defaultProps) {\n  invariant(typeof Component !== 'function' || Component.prototype && Component.prototype.isReactComponent, '`createAnimatedComponent` does not support stateless functional components; ' + 'use a class component instead.');\n\n  var AnimatedComponent = function (_React$Component) {\n    _inherits(AnimatedComponent, _React$Component);\n\n    var _super = _createSuper(AnimatedComponent);\n\n    function AnimatedComponent(props) {\n      var _this;\n\n      _classCallCheck(this, AnimatedComponent);\n\n      _this = _super.call(this, props);\n      _this._invokeAnimatedPropsCallbackOnMount = false;\n      _this._eventDetachers = [];\n\n      _this._animatedPropsCallback = function () {\n        if (_this._component == null) {\n          _this._invokeAnimatedPropsCallbackOnMount = true;\n        } else if (AnimatedComponent.__skipSetNativeProps_FOR_TESTS_ONLY || typeof _this._component.setNativeProps !== 'function') {\n          _this.forceUpdate();\n        } else if (!_this._propsAnimated.__isNative) {\n          _this._component.setNativeProps(_this._propsAnimated.__getAnimatedValue());\n        } else {\n          throw new Error('Attempting to run JS driven animation on animated ' + 'node that has been moved to \"native\" earlier by starting an ' + 'animation with `useNativeDriver: true`');\n        }\n      };\n\n      _this._setComponentRef = mergeRefs(_this.props.forwardedRef, function (ref) {\n        _this._prevComponent = _this._component;\n        _this._component = ref;\n\n        if (ref != null && ref.getNode == null) {\n          ref.getNode = function () {\n            var _ref$constructor$name;\n\n            console.warn('%s: Calling `getNode()` on the ref of an Animated component ' + 'is no longer necessary. You can now directly use the ref ' + 'instead. This method will be removed in a future release.', (_ref$constructor$name = ref.constructor.name) != null ? _ref$constructor$name : '<<anonymous>>');\n            return ref;\n          };\n        }\n      });\n      return _this;\n    }\n\n    _createClass(AnimatedComponent, [{\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        this._propsAnimated && this._propsAnimated.__detach();\n\n        this._detachNativeEvents();\n      }\n    }, {\n      key: \"UNSAFE_componentWillMount\",\n      value: function UNSAFE_componentWillMount() {\n        this._attachProps(this.props);\n      }\n    }, {\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        if (this._invokeAnimatedPropsCallbackOnMount) {\n          this._invokeAnimatedPropsCallbackOnMount = false;\n\n          this._animatedPropsCallback();\n        }\n\n        this._propsAnimated.setNativeView(this._component);\n\n        this._attachNativeEvents();\n      }\n    }, {\n      key: \"_attachNativeEvents\",\n      value: function _attachNativeEvents() {\n        var _this2 = this;\n\n        var scrollableNode = this._component && this._component.getScrollableNode ? this._component.getScrollableNode() : this._component;\n\n        var _loop = function _loop(key) {\n          var prop = _this2.props[key];\n\n          if (prop instanceof AnimatedEvent && prop.__isNative) {\n            prop.__attach(scrollableNode, key);\n\n            _this2._eventDetachers.push(function () {\n              return prop.__detach(scrollableNode, key);\n            });\n          }\n        };\n\n        for (var key in this.props) {\n          _loop(key);\n        }\n      }\n    }, {\n      key: \"_detachNativeEvents\",\n      value: function _detachNativeEvents() {\n        this._eventDetachers.forEach(function (remove) {\n          return remove();\n        });\n\n        this._eventDetachers = [];\n      }\n    }, {\n      key: \"_attachProps\",\n      value: function _attachProps(nextProps) {\n        var oldPropsAnimated = this._propsAnimated;\n        this._propsAnimated = new AnimatedProps(nextProps, this._animatedPropsCallback);\n        oldPropsAnimated && oldPropsAnimated.__detach();\n      }\n    }, {\n      key: \"UNSAFE_componentWillReceiveProps\",\n      value: function UNSAFE_componentWillReceiveProps(newProps) {\n        this._attachProps(newProps);\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate(prevProps) {\n        if (this._component !== this._prevComponent) {\n          this._propsAnimated.setNativeView(this._component);\n        }\n\n        if (this._component !== this._prevComponent || prevProps !== this.props) {\n          this._detachNativeEvents();\n\n          this._attachNativeEvents();\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var props = this._propsAnimated.__getValue();\n\n        return React.createElement(Component, _extends({}, defaultProps, props, {\n          ref: this._setComponentRef,\n          collapsable: false,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 9\n          }\n        }));\n      }\n    }]);\n\n    return AnimatedComponent;\n  }(React.Component);\n\n  AnimatedComponent.__skipSetNativeProps_FOR_TESTS_ONLY = false;\n  var propTypes = Component.propTypes;\n  return React.forwardRef(function AnimatedComponentWrapper(props, ref) {\n    return React.createElement(AnimatedComponent, _extends({}, props, ref == null ? null : {\n      forwardedRef: ref\n    }, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 7\n      }\n    }));\n  });\n}\n\nexport default createAnimatedComponent;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native-web/src/vendor/react-native/Animated/createAnimatedComponent.js"],"names":["AnimatedEvent","AnimatedProps","React","invariant","mergeRefs","createAnimatedComponent","Component","defaultProps","prototype","isReactComponent","AnimatedComponent","props","_invokeAnimatedPropsCallbackOnMount","_eventDetachers","_animatedPropsCallback","_component","__skipSetNativeProps_FOR_TESTS_ONLY","setNativeProps","forceUpdate","_propsAnimated","__isNative","__getAnimatedValue","Error","_setComponentRef","forwardedRef","ref","_prevComponent","getNode","console","warn","constructor","name","__detach","_detachNativeEvents","_attachProps","setNativeView","_attachNativeEvents","scrollableNode","getScrollableNode","key","prop","__attach","push","forEach","remove","nextProps","oldPropsAnimated","newProps","prevProps","__getValue","propTypes","forwardRef","AnimatedComponentWrapper"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nimport { AnimatedEvent } from './AnimatedEvent';\nimport AnimatedProps from './nodes/AnimatedProps';\nimport React from 'react';\nimport invariant from 'fbjs/lib/invariant';\nimport mergeRefs from '../../../modules/mergeRefs';\n\nfunction createAnimatedComponent(Component: any, defaultProps: any): any {\n  invariant(\n    typeof Component !== 'function' ||\n      (Component.prototype && Component.prototype.isReactComponent),\n    '`createAnimatedComponent` does not support stateless functional components; ' +\n      'use a class component instead.',\n  );\n\n  class AnimatedComponent extends React.Component<Object> {\n    _component: any;\n    _invokeAnimatedPropsCallbackOnMount: boolean = false;\n    _prevComponent: any;\n    _propsAnimated: AnimatedProps;\n    _eventDetachers: Array<Function> = [];\n\n    static __skipSetNativeProps_FOR_TESTS_ONLY = false;\n\n    constructor(props: Object) {\n      super(props);\n    }\n\n    componentWillUnmount() {\n      this._propsAnimated && this._propsAnimated.__detach();\n      this._detachNativeEvents();\n    }\n\n    UNSAFE_componentWillMount() {\n      this._attachProps(this.props);\n    }\n\n    componentDidMount() {\n      if (this._invokeAnimatedPropsCallbackOnMount) {\n        this._invokeAnimatedPropsCallbackOnMount = false;\n        this._animatedPropsCallback();\n      }\n\n      this._propsAnimated.setNativeView(this._component);\n      this._attachNativeEvents();\n    }\n\n    _attachNativeEvents() {\n      // Make sure to get the scrollable node for components that implement\n      // `ScrollResponder.Mixin`.\n      const scrollableNode = this._component && this._component.getScrollableNode\n        ? this._component.getScrollableNode()\n        : this._component;\n\n      for (const key in this.props) {\n        const prop = this.props[key];\n        if (prop instanceof AnimatedEvent && prop.__isNative) {\n          prop.__attach(scrollableNode, key);\n          this._eventDetachers.push(() => prop.__detach(scrollableNode, key));\n        }\n      }\n    }\n\n    _detachNativeEvents() {\n      this._eventDetachers.forEach(remove => remove());\n      this._eventDetachers = [];\n    }\n\n    // The system is best designed when setNativeProps is implemented. It is\n    // able to avoid re-rendering and directly set the attributes that changed.\n    // However, setNativeProps can only be implemented on leaf native\n    // components. If you want to animate a composite component, you need to\n    // re-render it. In this case, we have a fallback that uses forceUpdate.\n    _animatedPropsCallback = () => {\n      if (this._component == null) {\n        // AnimatedProps is created in will-mount because it's used in render.\n        // But this callback may be invoked before mount in async mode,\n        // In which case we should defer the setNativeProps() call.\n        // React may throw away uncommitted work in async mode,\n        // So a deferred call won't always be invoked.\n        this._invokeAnimatedPropsCallbackOnMount = true;\n      } else if (\n        AnimatedComponent.__skipSetNativeProps_FOR_TESTS_ONLY ||\n        typeof this._component.setNativeProps !== 'function'\n      ) {\n        this.forceUpdate();\n      } else if (!this._propsAnimated.__isNative) {\n        this._component.setNativeProps(\n          this._propsAnimated.__getAnimatedValue(),\n        );\n      } else {\n        throw new Error(\n          'Attempting to run JS driven animation on animated ' +\n            'node that has been moved to \"native\" earlier by starting an ' +\n            'animation with `useNativeDriver: true`',\n        );\n      }\n    };\n\n    _attachProps(nextProps) {\n      const oldPropsAnimated = this._propsAnimated;\n\n      this._propsAnimated = new AnimatedProps(\n        nextProps,\n        this._animatedPropsCallback,\n      );\n\n      // When you call detach, it removes the element from the parent list\n      // of children. If it goes to 0, then the parent also detaches itself\n      // and so on.\n      // An optimization is to attach the new elements and THEN detach the old\n      // ones instead of detaching and THEN attaching.\n      // This way the intermediate state isn't to go to 0 and trigger\n      // this expensive recursive detaching to then re-attach everything on\n      // the very next operation.\n      oldPropsAnimated && oldPropsAnimated.__detach();\n    }\n\n    UNSAFE_componentWillReceiveProps(newProps) {\n      this._attachProps(newProps);\n    }\n\n    componentDidUpdate(prevProps) {\n      if (this._component !== this._prevComponent) {\n        this._propsAnimated.setNativeView(this._component);\n      }\n      if (this._component !== this._prevComponent || prevProps !== this.props) {\n        this._detachNativeEvents();\n        this._attachNativeEvents();\n      }\n    }\n\n    _setComponentRef = mergeRefs(this.props.forwardedRef, (ref) => {\n      this._prevComponent = this._component;\n      this._component = ref;\n\n      // TODO: Delete this in a future release.\n      if (ref != null && ref.getNode == null) {\n        ref.getNode = () => {\n          console.warn(\n            '%s: Calling `getNode()` on the ref of an Animated component ' +\n              'is no longer necessary. You can now directly use the ref ' +\n              'instead. This method will be removed in a future release.',\n            ref.constructor.name ?? '<<anonymous>>',\n          );\n          return ref;\n        };\n      }\n    })\n\n    render() {\n      const props = this._propsAnimated.__getValue();\n      return (\n        <Component\n          {...defaultProps}\n          {...props}\n          ref={this._setComponentRef}\n          // The native driver updates views directly through the UI thread so we\n          // have to make sure the view doesn't get optimized away because it cannot\n          // go through the NativeViewHierarchyManager since it operates on the shadow\n          // thread.\n          collapsable={false}\n        />\n      );\n    }\n  }\n\n  const propTypes = Component.propTypes;\n\n  return React.forwardRef(function AnimatedComponentWrapper(props, ref) {\n    return (\n      <AnimatedComponent\n        {...props}\n        {...(ref == null ? null : {forwardedRef: ref})}\n      />\n    );\n  });\n}\n\nexport default createAnimatedComponent;\n"]},"metadata":{},"sourceType":"module"}