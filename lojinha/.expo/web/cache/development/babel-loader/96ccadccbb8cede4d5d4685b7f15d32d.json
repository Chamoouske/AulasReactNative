{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _path() {\n  var data = require(\"path\");\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _common = require(\"./common\");\n\nvar _downloadAndUnzip = require(\"../../../tools/downloadAndUnzip\");\n\nvar _executeWinCommand = require(\"../../../tools/windows/executeWinCommand\");\n\nvar _androidWinHelpers = require(\"../../../tools/windows/androidWinHelpers\");\n\nvar _createShortcut = require(\"../../../tools/windows/create-shortcut\");\n\nvar _default = {\n  label: 'Android Studio',\n  description: 'Required for building and installing your app on Android',\n  getDiagnostics: function getDiagnostics(_ref) {\n    var IDEs, needsToBeFixed, missing, androidStudioPath, _await, stdout, version;\n\n    return _regeneratorRuntime.async(function getDiagnostics$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            IDEs = _ref.IDEs;\n            needsToBeFixed = IDEs['Android Studio'] === 'Not Found';\n            missing = {\n              needsToBeFixed: needsToBeFixed,\n              version: IDEs['Android Studio']\n            };\n\n            if (!(needsToBeFixed && process.platform === 'win32')) {\n              _context.next = 13;\n              break;\n            }\n\n            androidStudioPath = (0, _path().join)((0, _androidWinHelpers.getUserAndroidPath)(), 'android-studio', 'bin', 'studio.exe').replace(/\\\\/g, '\\\\\\\\');\n            _context.next = 7;\n            return _regeneratorRuntime.awrap((0, _executeWinCommand.executeCommand)(\"wmic datafile where name=\\\"\" + androidStudioPath + \"\\\" get Version\"));\n\n          case 7:\n            _await = _context.sent;\n            stdout = _await.stdout;\n            version = stdout.replace(/(\\r\\n|\\n|\\r)/gm, '').trim();\n\n            if (!(version === '')) {\n              _context.next = 12;\n              break;\n            }\n\n            return _context.abrupt(\"return\", missing);\n\n          case 12:\n            return _context.abrupt(\"return\", {\n              needsToBeFixed: false,\n              version: version\n            });\n\n          case 13:\n            return _context.abrupt(\"return\", missing);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  win32AutomaticFix: function win32AutomaticFix(_ref2) {\n    var loader, androidStudioUrl, installPath, prefix, binFolder;\n    return _regeneratorRuntime.async(function win32AutomaticFix$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            loader = _ref2.loader;\n            androidStudioUrl = 'https://redirector.gvt1.com/edgedl/android/studio/ide-zips/3.6.3.0/android-studio-ide-192.6392135-windows.zip';\n            installPath = (0, _androidWinHelpers.getUserAndroidPath)();\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap((0, _downloadAndUnzip.downloadAndUnzip)({\n              loader: loader,\n              downloadUrl: androidStudioUrl,\n              component: 'Android Studio',\n              installPath: installPath\n            }));\n\n          case 5:\n            prefix = process.arch === 'x64' ? '64' : '';\n            binFolder = (0, _path().join)(installPath, 'android-studio', 'bin');\n            _context2.next = 9;\n            return _regeneratorRuntime.awrap((0, _createShortcut.createShortcut)({\n              path: (0, _path().join)(binFolder, \"studio\" + prefix + \".exe\"),\n              name: 'Android Studio',\n              ico: (0, _path().join)(binFolder, 'studio.ico')\n            }));\n\n          case 9:\n            loader.succeed(\"Android Studio installed successfully in \\\"\" + installPath + \"\\\".\");\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  runAutomaticFix: function runAutomaticFix(_ref3) {\n    var loader;\n    return _regeneratorRuntime.async(function runAutomaticFix$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            loader = _ref3.loader;\n            loader.fail();\n            return _context3.abrupt(\"return\", (0, _common.logManualInstallation)({\n              healthcheck: 'Android Studio',\n              url: 'https://reactnative.dev/docs/environment-setup'\n            }));\n\n          case 3:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};\nexports.default = _default;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli/build/commands/doctor/healthchecks/androidStudio.js"],"names":["Object","defineProperty","exports","value","default","_path","data","require","_common","_downloadAndUnzip","_executeWinCommand","_androidWinHelpers","_createShortcut","_default","label","description","getDiagnostics","IDEs","needsToBeFixed","missing","version","process","platform","androidStudioPath","join","getUserAndroidPath","replace","executeCommand","stdout","trim","win32AutomaticFix","loader","androidStudioUrl","installPath","downloadAndUnzip","downloadUrl","component","prefix","arch","binFolder","createShortcut","path","name","ico","succeed","runAutomaticFix","fail","logManualInstallation","healthcheck","url"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _path() {\n  const data = require(\"path\");\n\n  _path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _common = require(\"./common\");\n\nvar _downloadAndUnzip = require(\"../../../tools/downloadAndUnzip\");\n\nvar _executeWinCommand = require(\"../../../tools/windows/executeWinCommand\");\n\nvar _androidWinHelpers = require(\"../../../tools/windows/androidWinHelpers\");\n\nvar _createShortcut = require(\"../../../tools/windows/create-shortcut\");\n\nvar _default = {\n  label: 'Android Studio',\n  description: 'Required for building and installing your app on Android',\n  getDiagnostics: async ({\n    IDEs\n  }) => {\n    const needsToBeFixed = IDEs['Android Studio'] === 'Not Found';\n    const missing = {\n      needsToBeFixed,\n      version: IDEs['Android Studio']\n    }; // On Windows `doctor` installs Android Studio locally in a well-known place\n\n    if (needsToBeFixed && process.platform === 'win32') {\n      const androidStudioPath = (0, _path().join)((0, _androidWinHelpers.getUserAndroidPath)(), 'android-studio', 'bin', 'studio.exe').replace(/\\\\/g, '\\\\\\\\');\n      const {\n        stdout\n      } = await (0, _executeWinCommand.executeCommand)(`wmic datafile where name=\"${androidStudioPath}\" get Version`);\n      const version = stdout.replace(/(\\r\\n|\\n|\\r)/gm, '').trim();\n\n      if (version === '') {\n        return missing;\n      }\n\n      return {\n        needsToBeFixed: false,\n        version\n      };\n    }\n\n    return missing;\n  },\n  win32AutomaticFix: async ({\n    loader\n  }) => {\n    // Need a GitHub action to update automatically. See #1180\n    const androidStudioUrl = 'https://redirector.gvt1.com/edgedl/android/studio/ide-zips/3.6.3.0/android-studio-ide-192.6392135-windows.zip';\n    const installPath = (0, _androidWinHelpers.getUserAndroidPath)();\n    await (0, _downloadAndUnzip.downloadAndUnzip)({\n      loader,\n      downloadUrl: androidStudioUrl,\n      component: 'Android Studio',\n      installPath: installPath\n    });\n    const prefix = process.arch === 'x64' ? '64' : '';\n    const binFolder = (0, _path().join)(installPath, 'android-studio', 'bin');\n    await (0, _createShortcut.createShortcut)({\n      path: (0, _path().join)(binFolder, `studio${prefix}.exe`),\n      name: 'Android Studio',\n      ico: (0, _path().join)(binFolder, 'studio.ico')\n    });\n    loader.succeed(`Android Studio installed successfully in \"${installPath}\".`);\n  },\n  runAutomaticFix: async ({\n    loader\n  }) => {\n    loader.fail();\n    return (0, _common.logManualInstallation)({\n      healthcheck: 'Android Studio',\n      url: 'https://reactnative.dev/docs/environment-setup'\n    });\n  }\n};\nexports.default = _default;\n\n//# sourceMappingURL=androidStudio.js.map"]},"metadata":{},"sourceType":"script"}