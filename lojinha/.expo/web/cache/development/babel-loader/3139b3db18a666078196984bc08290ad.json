{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { UnavailabilityError } from '@unimodules/core';\nimport ExpoSecureStore from \"./ExpoSecureStore\";\nexport var AFTER_FIRST_UNLOCK = ExpoSecureStore.AFTER_FIRST_UNLOCK;\nexport var AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY = ExpoSecureStore.AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY;\nexport var ALWAYS = ExpoSecureStore.ALWAYS;\nexport var WHEN_PASSCODE_SET_THIS_DEVICE_ONLY = ExpoSecureStore.WHEN_PASSCODE_SET_THIS_DEVICE_ONLY;\nexport var ALWAYS_THIS_DEVICE_ONLY = ExpoSecureStore.ALWAYS_THIS_DEVICE_ONLY;\nexport var WHEN_UNLOCKED = ExpoSecureStore.WHEN_UNLOCKED;\nexport var WHEN_UNLOCKED_THIS_DEVICE_ONLY = ExpoSecureStore.WHEN_UNLOCKED_THIS_DEVICE_ONLY;\nvar VALUE_BYTES_LIMIT = 2048;\nexport function isAvailableAsync() {\n  return _regeneratorRuntime.async(function isAvailableAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", !!ExpoSecureStore.getValueWithKeyAsync);\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function deleteItemAsync(key) {\n  var options,\n      _args2 = arguments;\n  return _regeneratorRuntime.async(function deleteItemAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};\n\n          _ensureValidKey(key);\n\n          if (ExpoSecureStore.deleteValueWithKeyAsync) {\n            _context2.next = 4;\n            break;\n          }\n\n          throw new UnavailabilityError('SecureStore', 'deleteItemAsync');\n\n        case 4:\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(ExpoSecureStore.deleteValueWithKeyAsync(key, options));\n\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getItemAsync(key) {\n  var options,\n      _args3 = arguments;\n  return _regeneratorRuntime.async(function getItemAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          options = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};\n\n          _ensureValidKey(key);\n\n          _context3.next = 4;\n          return _regeneratorRuntime.awrap(ExpoSecureStore.getValueWithKeyAsync(key, options));\n\n        case 4:\n          return _context3.abrupt(\"return\", _context3.sent);\n\n        case 5:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function setItemAsync(key, value) {\n  var options,\n      _args4 = arguments;\n  return _regeneratorRuntime.async(function setItemAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          options = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : {};\n\n          _ensureValidKey(key);\n\n          if (_isValidValue(value)) {\n            _context4.next = 4;\n            break;\n          }\n\n          throw new Error(\"Invalid value provided to SecureStore. Values must be strings; consider JSON-encoding your values if they are serializable.\");\n\n        case 4:\n          if (ExpoSecureStore.setValueWithKeyAsync) {\n            _context4.next = 6;\n            break;\n          }\n\n          throw new UnavailabilityError('SecureStore', 'setItemAsync');\n\n        case 6:\n          _context4.next = 8;\n          return _regeneratorRuntime.awrap(ExpoSecureStore.setValueWithKeyAsync(value, key, options));\n\n        case 8:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction _ensureValidKey(key) {\n  if (!_isValidKey(key)) {\n    throw new Error(\"Invalid key provided to SecureStore. Keys must not be empty and contain only alphanumeric characters, \\\".\\\", \\\"-\\\", and \\\"_\\\".\");\n  }\n}\n\nfunction _isValidKey(key) {\n  return typeof key === 'string' && /^[\\w.-]+$/.test(key);\n}\n\nfunction _isValidValue(value) {\n  if (typeof value !== 'string') {\n    return false;\n  }\n\n  if (_byteCount(value) > VALUE_BYTES_LIMIT) {\n    console.warn('Provided value to SecureStore is larger than 2048 bytes. An attempt to store such a value will throw an error in SDK 35.');\n  }\n\n  return true;\n}\n\nfunction _byteCount(value) {\n  var bytes = 0;\n\n  for (var i = 0; i < value.length; i++) {\n    var codePoint = value.charCodeAt(i);\n\n    if (codePoint >= 0xd800 && codePoint < 0xe000) {\n      if (codePoint < 0xdc00 && i + 1 < value.length) {\n        var next = value.charCodeAt(i + 1);\n\n        if (next >= 0xdc00 && next < 0xe000) {\n          bytes += 4;\n          i++;\n          continue;\n        }\n      }\n    }\n\n    bytes += codePoint < 0x80 ? 1 : codePoint < 0x800 ? 2 : 3;\n  }\n\n  return bytes;\n}","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/expo-secure-store/src/SecureStore.ts"],"names":["UnavailabilityError","ExpoSecureStore","AFTER_FIRST_UNLOCK","AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY","ALWAYS","WHEN_PASSCODE_SET_THIS_DEVICE_ONLY","ALWAYS_THIS_DEVICE_ONLY","WHEN_UNLOCKED","WHEN_UNLOCKED_THIS_DEVICE_ONLY","VALUE_BYTES_LIMIT","isAvailableAsync","getValueWithKeyAsync","deleteItemAsync","key","options","_ensureValidKey","deleteValueWithKeyAsync","getItemAsync","setItemAsync","value","_isValidValue","Error","setValueWithKeyAsync","_isValidKey","test","_byteCount","console","warn","bytes","i","length","codePoint","charCodeAt","next"],"mappings":"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","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\n\nimport ExpoSecureStore from './ExpoSecureStore';\n\nexport type KeychainAccessibilityConstant = number;\n\nexport const AFTER_FIRST_UNLOCK: KeychainAccessibilityConstant = ExpoSecureStore.AFTER_FIRST_UNLOCK;\nexport const AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY: KeychainAccessibilityConstant =\n  ExpoSecureStore.AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY;\nexport const ALWAYS: KeychainAccessibilityConstant = ExpoSecureStore.ALWAYS;\nexport const WHEN_PASSCODE_SET_THIS_DEVICE_ONLY: KeychainAccessibilityConstant =\n  ExpoSecureStore.WHEN_PASSCODE_SET_THIS_DEVICE_ONLY;\nexport const ALWAYS_THIS_DEVICE_ONLY: KeychainAccessibilityConstant =\n  ExpoSecureStore.ALWAYS_THIS_DEVICE_ONLY;\nexport const WHEN_UNLOCKED: KeychainAccessibilityConstant = ExpoSecureStore.WHEN_UNLOCKED;\nexport const WHEN_UNLOCKED_THIS_DEVICE_ONLY: KeychainAccessibilityConstant =\n  ExpoSecureStore.WHEN_UNLOCKED_THIS_DEVICE_ONLY;\n\nconst VALUE_BYTES_LIMIT = 2048;\n\nexport type SecureStoreOptions = {\n  keychainService?: string;\n  keychainAccessible?: KeychainAccessibilityConstant;\n};\n\n/**\n * Returns whether the SecureStore API is enabled on the current device. This does not check the app permissions.\n *\n * @returns Async `boolean`, indicating whether the SecureStore API is available on the current device. Currently this resolves `true` on iOS and Android only.\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  return !!ExpoSecureStore.getValueWithKeyAsync;\n}\n\nexport async function deleteItemAsync(\n  key: string,\n  options: SecureStoreOptions = {}\n): Promise<void> {\n  _ensureValidKey(key);\n\n  if (!ExpoSecureStore.deleteValueWithKeyAsync) {\n    throw new UnavailabilityError('SecureStore', 'deleteItemAsync');\n  }\n  await ExpoSecureStore.deleteValueWithKeyAsync(key, options);\n}\n\nexport async function getItemAsync(\n  key: string,\n  options: SecureStoreOptions = {}\n): Promise<string | null> {\n  _ensureValidKey(key);\n  return await ExpoSecureStore.getValueWithKeyAsync(key, options);\n}\n\nexport async function setItemAsync(\n  key: string,\n  value: string,\n  options: SecureStoreOptions = {}\n): Promise<void> {\n  _ensureValidKey(key);\n  if (!_isValidValue(value)) {\n    throw new Error(\n      `Invalid value provided to SecureStore. Values must be strings; consider JSON-encoding your values if they are serializable.`\n    );\n  }\n  if (!ExpoSecureStore.setValueWithKeyAsync) {\n    throw new UnavailabilityError('SecureStore', 'setItemAsync');\n  }\n  await ExpoSecureStore.setValueWithKeyAsync(value, key, options);\n}\n\nfunction _ensureValidKey(key: string) {\n  if (!_isValidKey(key)) {\n    throw new Error(\n      `Invalid key provided to SecureStore. Keys must not be empty and contain only alphanumeric characters, \".\", \"-\", and \"_\".`\n    );\n  }\n}\n\nfunction _isValidKey(key: string) {\n  return typeof key === 'string' && /^[\\w.-]+$/.test(key);\n}\n\nfunction _isValidValue(value: string) {\n  if (typeof value !== 'string') {\n    return false;\n  }\n  if (_byteCount(value) > VALUE_BYTES_LIMIT) {\n    console.warn(\n      'Provided value to SecureStore is larger than 2048 bytes. An attempt to store such a value will throw an error in SDK 35.'\n    );\n  }\n  return true;\n}\n\n// copy-pasted from https://stackoverflow.com/a/39488643\nfunction _byteCount(value: string) {\n  let bytes = 0;\n\n  for (let i = 0; i < value.length; i++) {\n    const codePoint = value.charCodeAt(i);\n\n    // Lone surrogates cannot be passed to encodeURI\n    if (codePoint >= 0xd800 && codePoint < 0xe000) {\n      if (codePoint < 0xdc00 && i + 1 < value.length) {\n        const next = value.charCodeAt(i + 1);\n\n        if (next >= 0xdc00 && next < 0xe000) {\n          bytes += 4;\n          i++;\n          continue;\n        }\n      }\n    }\n\n    bytes += codePoint < 0x80 ? 1 : codePoint < 0x800 ? 2 : 3;\n  }\n\n  return bytes;\n}\n"]},"metadata":{},"sourceType":"module"}