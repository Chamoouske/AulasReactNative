{"ast":null,"code":"","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport xcode, { PBXGroup, PBXNativeTarget, PBXProject, XCBuildConfiguration, XCConfigurationList, XcodeProject } from 'xcode';\nexport declare type ProjectSectionEntry = [string, PBXProject];\nexport declare type NativeTargetSection = Record<string, PBXNativeTarget>;\nexport declare type NativeTargetSectionEntry = [string, PBXNativeTarget];\nexport declare type ConfigurationLists = Record<string, XCConfigurationList>;\nexport declare type ConfigurationListEntry = [string, XCConfigurationList];\nexport declare type ConfigurationSectionEntry = [string, XCBuildConfiguration];\nexport declare function getProjectName(projectRoot: string): string;\nexport declare function getHackyProjectName(projectRoot: string, config: ExpoConfig): string;\nexport declare function addResourceFileToGroup(filepath: string, groupName: string, project: XcodeProject): XcodeProject;\nexport declare function getApplicationNativeTarget({ project, projectName, }: {\n    project: XcodeProject;\n    projectName: string;\n}): {\n    uuid: string;\n    target: xcode.PBXNativeTarget;\n};\n/**\n * Add a framework to the default app native target.\n *\n * @param projectName Name of the PBX project.\n * @param framework String ending in `.framework`, i.e. `StoreKit.framework`\n */\nexport declare function addFramework({ project, projectName, framework, }: {\n    project: XcodeProject;\n    projectName: string;\n    framework: string;\n}): unknown;\nexport declare function ensureGroupRecursively(project: XcodeProject, filepath: string): PBXGroup | null;\n/**\n * Get the pbxproj for the given path\n */\nexport declare function getPbxproj(projectRoot: string): XcodeProject;\n/**\n * Get the productName for a project, if the name is using a variable `$(TARGET_NAME)`, then attempt to get the value of that variable.\n *\n * @param project\n */\nexport declare function getProductName(project: XcodeProject): string;\nexport declare function getProjectSection(project: XcodeProject): Record<string, xcode.PBXProject> & Record<string, string>;\nexport declare function getNativeTargets(project: XcodeProject): NativeTargetSectionEntry[];\nexport declare function findFirstNativeTarget(project: XcodeProject): NativeTargetSectionEntry;\nexport declare function findNativeTargetByName(project: XcodeProject, targetName: string): NativeTargetSectionEntry;\nexport declare function getXCConfigurationListEntries(project: XcodeProject): ConfigurationListEntry[];\nexport declare function getBuildConfigurationForId(project: XcodeProject, configurationListId: string): ConfigurationSectionEntry[];\nexport declare function isBuildConfig([, sectionItem]: ConfigurationSectionEntry): boolean;\nexport declare function isNotTestHost([, sectionItem]: ConfigurationSectionEntry): boolean;\nexport declare function isNotComment([key]: ConfigurationSectionEntry | ProjectSectionEntry | ConfigurationListEntry | NativeTargetSectionEntry): boolean;\n"]},"metadata":{},"sourceType":"module"}