{"ast":null,"code":"'use strict';\n\nrequire('shelljs/global');\n\nvar spawn = require('child_process').spawn;\n\nvar argv = require('yargs').argv;\n\nvar path = require('path');\n\nvar SCRIPTS = __dirname;\nvar ROOT = path.normalize(path.join(__dirname, '..'));\n\nvar tryExecNTimes = require(\"./try-n-times\");\n\nvar REACT_NATIVE_TEMP_DIR = exec('mktemp -d /tmp/react-native-XXXXXXXX').stdout.trim();\nvar REACT_NATIVE_APP_DIR = REACT_NATIVE_TEMP_DIR + \"/template\";\nvar numberOfRetries = argv.retries || 1;\nvar SERVER_PID;\nvar APPIUM_PID;\nvar exitCode;\n\nfunction describe(message) {\n  echo(\"\\n\\n>>>>> \" + message + \"\\n\\n\\n\");\n}\n\ntry {\n  if (argv.android) {\n    describe('Compile Android binaries');\n\n    if (exec('./gradlew :ReactAndroid:installArchives -Pjobs=1 -Dorg.gradle.jvmargs=\"-Xmx512m -XX:+HeapDumpOnOutOfMemoryError\"').code) {\n      echo('Failed to compile Android binaries');\n      exitCode = 1;\n      throw Error(exitCode);\n    }\n  }\n\n  if (argv.js) {\n    describe('Install Flow');\n\n    if (tryExecNTimes(function () {\n      return exec('npm install --save-dev flow-bin').code;\n    }, numberOfRetries, function () {\n      return exec('sleep 10s');\n    })) {\n      echo('Failed to install Flow');\n      echo('Most common reason is npm registry connectivity, try again');\n      exitCode = 1;\n      throw Error(exitCode);\n    }\n  }\n\n  describe('Create react-native package');\n\n  if (exec('npm pack').code) {\n    echo('Failed to pack react-native');\n    exitCode = 1;\n    throw Error(exitCode);\n  }\n\n  var REACT_NATIVE_PACKAGE = path.join(ROOT, 'react-native-*.tgz');\n  describe('Scaffold a basic React Native app from template');\n  exec(\"rsync -a \" + ROOT + \"/template \" + REACT_NATIVE_TEMP_DIR);\n  cd(REACT_NATIVE_APP_DIR);\n  var METRO_CONFIG = path.join(ROOT, 'metro.config.js');\n  var RN_GET_POLYFILLS = path.join(ROOT, 'rn-get-polyfills.js');\n  var RN_POLYFILLS_PATH = 'Libraries/polyfills/';\n  exec(\"mkdir -p \" + RN_POLYFILLS_PATH);\n  cp(METRO_CONFIG, '.');\n  cp(RN_GET_POLYFILLS, '.');\n  exec(\"rsync -a \" + ROOT + \"/\" + RN_POLYFILLS_PATH + \" \" + REACT_NATIVE_APP_DIR + \"/\" + RN_POLYFILLS_PATH);\n  mv('_flowconfig', '.flowconfig');\n  mv('_watchmanconfig', '.watchmanconfig');\n  describe('Install React Native package');\n  exec(\"npm install \" + REACT_NATIVE_PACKAGE);\n  describe('Install node_modules');\n\n  if (tryExecNTimes(function () {\n    return exec('npm install').code;\n  }, numberOfRetries, function () {\n    return exec('sleep 10s');\n  })) {\n    echo('Failed to execute npm install');\n    echo('Most common reason is npm registry connectivity, try again');\n    exitCode = 1;\n    throw Error(exitCode);\n  }\n\n  exec('rm -rf ./node_modules/react-native/template');\n\n  if (argv.android) {\n    describe('Install end-to-end framework');\n\n    if (tryExecNTimes(function () {\n      return exec('yarn add --dev appium@1.11.1 mocha@2.4.5 wd@1.11.1 colors@1.0.3 pretty-data2@0.40.1', {\n        silent: true\n      }).code;\n    }, numberOfRetries)) {\n      echo('Failed to install appium');\n      echo('Most common reason is npm registry connectivity, try again');\n      exitCode = 1;\n      throw Error(exitCode);\n    }\n\n    cp(SCRIPTS + \"/android-e2e-test.js\", 'android-e2e-test.js');\n    cd('android');\n    describe('Download Maven deps');\n    exec('./gradlew :app:copyDownloadableDepsToLibs');\n    cd('..');\n    describe('Generate key');\n    exec('rm android/app/debug.keystore');\n\n    if (exec('keytool -genkey -v -keystore android/app/debug.keystore -storepass android -alias androiddebugkey -keypass android -keyalg RSA -keysize 2048 -validity 10000 -dname \"CN=Android Debug,O=Android,C=US\"').code) {\n      echo('Key could not be generated');\n      exitCode = 1;\n      throw Error(exitCode);\n    }\n\n    describe(\"Start appium server, \" + APPIUM_PID);\n    var appiumProcess = spawn('node', ['./node_modules/.bin/appium']);\n    APPIUM_PID = appiumProcess.pid;\n    describe('Build the app');\n\n    if (exec('react-native run-android').code) {\n      echo('could not execute react-native run-android');\n      exitCode = 1;\n      throw Error(exitCode);\n    }\n\n    describe(\"Start packager server, \" + SERVER_PID);\n    var packagerProcess = spawn('yarn', ['start', '--max-workers 1'], {\n      env: process.env\n    });\n    SERVER_PID = packagerProcess.pid;\n    exec('sleep 15s');\n    describe('Test: Android end-to-end test');\n\n    if (tryExecNTimes(function () {\n      return exec('node node_modules/.bin/_mocha android-e2e-test.js').code;\n    }, numberOfRetries, function () {\n      return exec('sleep 10s');\n    })) {\n      echo('Failed to run Android end-to-end tests');\n      echo('Most likely the code is broken');\n      exitCode = 1;\n      throw Error(exitCode);\n    }\n  }\n\n  if (argv.ios || argv.tvos) {\n    var iosTestType = argv.tvos ? 'tvOS' : 'iOS';\n    cd('ios');\n    var packagerEnv = Object.create(process.env);\n    packagerEnv.REACT_NATIVE_MAX_WORKERS = 1;\n    describe('Start packager server');\n\n    var _packagerProcess = spawn('yarn', ['start'], {\n      stdio: 'inherit',\n      env: packagerEnv\n    });\n\n    SERVER_PID = _packagerProcess.pid;\n    exec('sleep 15s');\n    exec('response=$(curl --write-out %{http_code} --silent --output /dev/null localhost:8081/index.bundle?platform=ios&dev=true)');\n    echo(\"Packager server up and running, \" + SERVER_PID);\n    describe('Install CocoaPod dependencies');\n    exec('pod install');\n    describe('Test: ' + iosTestType + ' end-to-end test');\n\n    if (tryExecNTimes(function () {\n      var destination = 'platform=iOS Simulator,name=iPhone 8,OS=13.3';\n      var sdk = 'iphonesimulator';\n      var scheme = 'HelloWorld';\n\n      if (argv.tvos) {\n        destination = 'platform=tvOS Simulator,name=Apple TV,OS=13.3';\n        sdk = 'appletvsimulator';\n        scheme = 'HelloWorld-tvOS';\n      }\n\n      return exec(['xcodebuild', '-workspace', '\"HelloWorld.xcworkspace\"', '-destination', \"\\\"\" + destination + \"\\\"\", '-scheme', \"\\\"\" + scheme + \"\\\"\", '-sdk', sdk, '-UseModernBuildSystem=NO', 'test'].join(' ') + ' | ' + ['xcpretty', '--report', 'junit', '--output', \"\\\"~/react-native/reports/junit/\" + iosTestType + \"-e2e/results.xml\\\"\"].join(' ') + ' && exit ${PIPESTATUS[0]}').code;\n    }, numberOfRetries, function () {\n      return exec('sleep 10s');\n    })) {\n      echo('Failed to run ' + iosTestType + ' end-to-end tests');\n      echo('Most likely the code is broken');\n      exitCode = 1;\n      throw Error(exitCode);\n    }\n\n    cd('..');\n  }\n\n  if (argv.js) {\n    describe('Test: Verify packager can generate an Android bundle');\n\n    if (exec('yarn react-native bundle --verbose --entry-file index.js --platform android --dev true --bundle-output android-bundle.js --max-workers 1').code) {\n      echo('Could not build Android bundle');\n      exitCode = 1;\n      throw Error(exitCode);\n    }\n\n    describe('Test: Verify packager can generate an iOS bundle');\n\n    if (exec('yarn react-native bundle --entry-file index.js --platform ios --dev true --bundle-output ios-bundle.js --max-workers 1').code) {\n      echo('Could not build iOS bundle');\n      exitCode = 1;\n      throw Error(exitCode);\n    }\n\n    describe('Test: Flow check');\n\n    if (exec(ROOT + \"/node_modules/.bin/flow check\").code) {\n      echo('Flow check failed.');\n      exitCode = 1;\n      throw Error(exitCode);\n    }\n  }\n\n  exitCode = 0;\n} finally {\n  describe('Clean up');\n\n  if (SERVER_PID) {\n    echo(\"Killing packager \" + SERVER_PID);\n    exec(\"kill -9 \" + SERVER_PID);\n    exec(\"lsof -i tcp:8081 | awk 'NR!=1 {print $2}' | xargs kill\");\n  }\n\n  if (APPIUM_PID) {\n    echo(\"Killing appium \" + APPIUM_PID);\n    exec(\"kill -9 \" + APPIUM_PID);\n  }\n}\n\nexit(exitCode);","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/scripts/run-ci-e2e-tests.js"],"names":["require","spawn","argv","path","SCRIPTS","__dirname","ROOT","normalize","join","tryExecNTimes","REACT_NATIVE_TEMP_DIR","exec","stdout","trim","REACT_NATIVE_APP_DIR","numberOfRetries","retries","SERVER_PID","APPIUM_PID","exitCode","describe","message","echo","android","code","Error","js","REACT_NATIVE_PACKAGE","cd","METRO_CONFIG","RN_GET_POLYFILLS","RN_POLYFILLS_PATH","cp","mv","silent","appiumProcess","pid","packagerProcess","env","process","ios","tvos","iosTestType","packagerEnv","Object","create","REACT_NATIVE_MAX_WORKERS","stdio","destination","sdk","scheme","exit"],"mappings":"AASA;;AAaAA,OAAO,CAAC,gBAAD,CAAP;;AAEA,IAAMC,KAAK,GAAGD,OAAO,CAAC,eAAD,CAAP,CAAyBC,KAAvC;;AACA,IAAMC,IAAI,GAAGF,OAAO,CAAC,OAAD,CAAP,CAAiBE,IAA9B;;AACA,IAAMC,IAAI,GAAGH,OAAO,CAAC,MAAD,CAApB;;AAEA,IAAMI,OAAO,GAAGC,SAAhB;AACA,IAAMC,IAAI,GAAGH,IAAI,CAACI,SAAL,CAAeJ,IAAI,CAACK,IAAL,CAAUH,SAAV,EAAqB,IAArB,CAAf,CAAb;;AACA,IAAMI,aAAa,GAAGT,OAAO,iBAA7B;;AAEA,IAAMU,qBAAqB,GAAGC,IAAI,CAChC,sCADgC,CAAJ,CAE5BC,MAF4B,CAErBC,IAFqB,EAA9B;AAGA,IAAMC,oBAAoB,GAAMJ,qBAAN,cAA1B;AACA,IAAMK,eAAe,GAAGb,IAAI,CAACc,OAAL,IAAgB,CAAxC;AACA,IAAIC,UAAJ;AACA,IAAIC,UAAJ;AACA,IAAIC,QAAJ;;AAEA,SAASC,QAAT,CAAkBC,OAAlB,EAA2B;AACzBC,EAAAA,IAAI,gBAAcD,OAAd,YAAJ;AACD;;AAED,IAAI;AACF,MAAInB,IAAI,CAACqB,OAAT,EAAkB;AAChBH,IAAAA,QAAQ,CAAC,0BAAD,CAAR;;AACA,QACET,IAAI,CACF,kHADE,CAAJ,CAEEa,IAHJ,EAIE;AACAF,MAAAA,IAAI,CAAC,oCAAD,CAAJ;AACAH,MAAAA,QAAQ,GAAG,CAAX;AACA,YAAMM,KAAK,CAACN,QAAD,CAAX;AACD;AACF;;AAED,MAAIjB,IAAI,CAACwB,EAAT,EAAa;AACXN,IAAAA,QAAQ,CAAC,cAAD,CAAR;;AACA,QACEX,aAAa,CACX,YAAM;AACJ,aAAOE,IAAI,CAAC,iCAAD,CAAJ,CAAwCa,IAA/C;AACD,KAHU,EAIXT,eAJW,EAKX;AAAA,aAAMJ,IAAI,CAAC,WAAD,CAAV;AAAA,KALW,CADf,EAQE;AACAW,MAAAA,IAAI,CAAC,wBAAD,CAAJ;AACAA,MAAAA,IAAI,CAAC,4DAAD,CAAJ;AACAH,MAAAA,QAAQ,GAAG,CAAX;AACA,YAAMM,KAAK,CAACN,QAAD,CAAX;AACD;AACF;;AAEDC,EAAAA,QAAQ,CAAC,6BAAD,CAAR;;AACA,MAAIT,IAAI,CAAC,UAAD,CAAJ,CAAiBa,IAArB,EAA2B;AACzBF,IAAAA,IAAI,CAAC,6BAAD,CAAJ;AACAH,IAAAA,QAAQ,GAAG,CAAX;AACA,UAAMM,KAAK,CAACN,QAAD,CAAX;AACD;;AAED,MAAMQ,oBAAoB,GAAGxB,IAAI,CAACK,IAAL,CAAUF,IAAV,EAAgB,oBAAhB,CAA7B;AAEAc,EAAAA,QAAQ,CAAC,iDAAD,CAAR;AACAT,EAAAA,IAAI,eAAaL,IAAb,kBAA8BI,qBAA9B,CAAJ;AACAkB,EAAAA,EAAE,CAACd,oBAAD,CAAF;AAEA,MAAMe,YAAY,GAAG1B,IAAI,CAACK,IAAL,CAAUF,IAAV,EAAgB,iBAAhB,CAArB;AACA,MAAMwB,gBAAgB,GAAG3B,IAAI,CAACK,IAAL,CAAUF,IAAV,EAAgB,qBAAhB,CAAzB;AACA,MAAMyB,iBAAiB,GAAG,sBAA1B;AACApB,EAAAA,IAAI,eAAaoB,iBAAb,CAAJ;AAEAC,EAAAA,EAAE,CAACH,YAAD,EAAe,GAAf,CAAF;AACAG,EAAAA,EAAE,CAACF,gBAAD,EAAmB,GAAnB,CAAF;AACAnB,EAAAA,IAAI,eACUL,IADV,SACkByB,iBADlB,SACuCjB,oBADvC,SAC+DiB,iBAD/D,CAAJ;AAGAE,EAAAA,EAAE,CAAC,aAAD,EAAgB,aAAhB,CAAF;AACAA,EAAAA,EAAE,CAAC,iBAAD,EAAoB,iBAApB,CAAF;AAEAb,EAAAA,QAAQ,CAAC,8BAAD,CAAR;AACAT,EAAAA,IAAI,kBAAgBgB,oBAAhB,CAAJ;AAEAP,EAAAA,QAAQ,CAAC,sBAAD,CAAR;;AACA,MACEX,aAAa,CACX,YAAM;AACJ,WAAOE,IAAI,CAAC,aAAD,CAAJ,CAAoBa,IAA3B;AACD,GAHU,EAIXT,eAJW,EAKX;AAAA,WAAMJ,IAAI,CAAC,WAAD,CAAV;AAAA,GALW,CADf,EAQE;AACAW,IAAAA,IAAI,CAAC,+BAAD,CAAJ;AACAA,IAAAA,IAAI,CAAC,4DAAD,CAAJ;AACAH,IAAAA,QAAQ,GAAG,CAAX;AACA,UAAMM,KAAK,CAACN,QAAD,CAAX;AACD;;AACDR,EAAAA,IAAI,CAAC,6CAAD,CAAJ;;AAEA,MAAIT,IAAI,CAACqB,OAAT,EAAkB;AAChBH,IAAAA,QAAQ,CAAC,8BAAD,CAAR;;AACA,QACEX,aAAa,CACX;AAAA,aACEE,IAAI,CACF,qFADE,EAEF;AAACuB,QAAAA,MAAM,EAAE;AAAT,OAFE,CAAJ,CAGEV,IAJJ;AAAA,KADW,EAMXT,eANW,CADf,EASE;AACAO,MAAAA,IAAI,CAAC,0BAAD,CAAJ;AACAA,MAAAA,IAAI,CAAC,4DAAD,CAAJ;AACAH,MAAAA,QAAQ,GAAG,CAAX;AACA,YAAMM,KAAK,CAACN,QAAD,CAAX;AACD;;AACDa,IAAAA,EAAE,CAAI5B,OAAJ,2BAAmC,qBAAnC,CAAF;AACAwB,IAAAA,EAAE,CAAC,SAAD,CAAF;AACAR,IAAAA,QAAQ,CAAC,qBAAD,CAAR;AACAT,IAAAA,IAAI,CAAC,2CAAD,CAAJ;AACAiB,IAAAA,EAAE,CAAC,IAAD,CAAF;AAEAR,IAAAA,QAAQ,CAAC,cAAD,CAAR;AACAT,IAAAA,IAAI,CAAC,+BAAD,CAAJ;;AACA,QACEA,IAAI,CACF,uMADE,CAAJ,CAEEa,IAHJ,EAIE;AACAF,MAAAA,IAAI,CAAC,4BAAD,CAAJ;AACAH,MAAAA,QAAQ,GAAG,CAAX;AACA,YAAMM,KAAK,CAACN,QAAD,CAAX;AACD;;AAEDC,IAAAA,QAAQ,2BAAyBF,UAAzB,CAAR;AACA,QAAMiB,aAAa,GAAGlC,KAAK,CAAC,MAAD,EAAS,CAAC,4BAAD,CAAT,CAA3B;AACAiB,IAAAA,UAAU,GAAGiB,aAAa,CAACC,GAA3B;AAEAhB,IAAAA,QAAQ,CAAC,eAAD,CAAR;;AACA,QAAIT,IAAI,CAAC,0BAAD,CAAJ,CAAiCa,IAArC,EAA2C;AACzCF,MAAAA,IAAI,CAAC,4CAAD,CAAJ;AACAH,MAAAA,QAAQ,GAAG,CAAX;AACA,YAAMM,KAAK,CAACN,QAAD,CAAX;AACD;;AAEDC,IAAAA,QAAQ,6BAA2BH,UAA3B,CAAR;AAEA,QAAMoB,eAAe,GAAGpC,KAAK,CAAC,MAAD,EAAS,CAAC,OAAD,EAAU,iBAAV,CAAT,EAAuC;AAClEqC,MAAAA,GAAG,EAAEC,OAAO,CAACD;AADqD,KAAvC,CAA7B;AAGArB,IAAAA,UAAU,GAAGoB,eAAe,CAACD,GAA7B;AAEAzB,IAAAA,IAAI,CAAC,WAAD,CAAJ;AACAS,IAAAA,QAAQ,CAAC,+BAAD,CAAR;;AACA,QACEX,aAAa,CACX,YAAM;AACJ,aAAOE,IAAI,CAAC,mDAAD,CAAJ,CAA0Da,IAAjE;AACD,KAHU,EAIXT,eAJW,EAKX;AAAA,aAAMJ,IAAI,CAAC,WAAD,CAAV;AAAA,KALW,CADf,EAQE;AACAW,MAAAA,IAAI,CAAC,wCAAD,CAAJ;AACAA,MAAAA,IAAI,CAAC,gCAAD,CAAJ;AACAH,MAAAA,QAAQ,GAAG,CAAX;AACA,YAAMM,KAAK,CAACN,QAAD,CAAX;AACD;AACF;;AAED,MAAIjB,IAAI,CAACsC,GAAL,IAAYtC,IAAI,CAACuC,IAArB,EAA2B;AACzB,QAAIC,WAAW,GAAGxC,IAAI,CAACuC,IAAL,GAAY,MAAZ,GAAqB,KAAvC;AACAb,IAAAA,EAAE,CAAC,KAAD,CAAF;AAEA,QAAMe,WAAW,GAAGC,MAAM,CAACC,MAAP,CAAcN,OAAO,CAACD,GAAtB,CAApB;AACAK,IAAAA,WAAW,CAACG,wBAAZ,GAAuC,CAAvC;AACA1B,IAAAA,QAAQ,CAAC,uBAAD,CAAR;;AACA,QAAMiB,gBAAe,GAAGpC,KAAK,CAAC,MAAD,EAAS,CAAC,OAAD,CAAT,EAAoB;AAC/C8C,MAAAA,KAAK,EAAE,SADwC;AAE/CT,MAAAA,GAAG,EAAEK;AAF0C,KAApB,CAA7B;;AAIA1B,IAAAA,UAAU,GAAGoB,gBAAe,CAACD,GAA7B;AACAzB,IAAAA,IAAI,CAAC,WAAD,CAAJ;AAEAA,IAAAA,IAAI,CACF,yHADE,CAAJ;AAGAW,IAAAA,IAAI,sCAAoCL,UAApC,CAAJ;AAEAG,IAAAA,QAAQ,CAAC,+BAAD,CAAR;AACAT,IAAAA,IAAI,CAAC,aAAD,CAAJ;AAEAS,IAAAA,QAAQ,CAAC,WAAWsB,WAAX,GAAyB,kBAA1B,CAAR;;AACA,QAEEjC,aAAa,CACX,YAAM;AACJ,UAAIuC,WAAW,GAAG,8CAAlB;AACA,UAAIC,GAAG,GAAG,iBAAV;AACA,UAAIC,MAAM,GAAG,YAAb;;AAEA,UAAIhD,IAAI,CAACuC,IAAT,EAAe;AACbO,QAAAA,WAAW,GAAG,+CAAd;AACAC,QAAAA,GAAG,GAAG,kBAAN;AACAC,QAAAA,MAAM,GAAG,iBAAT;AACD;;AAED,aAAOvC,IAAI,CACT,CACE,YADF,EAEE,YAFF,EAGE,0BAHF,EAIE,cAJF,SAKMqC,WALN,SAME,SANF,SAOME,MAPN,SAQE,MARF,EASED,GATF,EAUE,0BAVF,EAWE,MAXF,EAYEzC,IAZF,CAYO,GAZP,IAaE,KAbF,GAcE,CACE,UADF,EAEE,UAFF,EAGE,OAHF,EAIE,UAJF,sCAKmCkC,WALnC,yBAMElC,IANF,CAMO,GANP,CAdF,GAqBE,2BAtBO,CAAJ,CAuBLgB,IAvBF;AAwBD,KApCU,EAqCXT,eArCW,EAsCX;AAAA,aAAMJ,IAAI,CAAC,WAAD,CAAV;AAAA,KAtCW,CAFf,EA0CE;AACAW,MAAAA,IAAI,CAAC,mBAAmBoB,WAAnB,GAAiC,mBAAlC,CAAJ;AACApB,MAAAA,IAAI,CAAC,gCAAD,CAAJ;AACAH,MAAAA,QAAQ,GAAG,CAAX;AACA,YAAMM,KAAK,CAACN,QAAD,CAAX;AACD;;AACDS,IAAAA,EAAE,CAAC,IAAD,CAAF;AACD;;AAED,MAAI1B,IAAI,CAACwB,EAAT,EAAa;AAEXN,IAAAA,QAAQ,CAAC,sDAAD,CAAR;;AACA,QACET,IAAI,CACF,0IADE,CAAJ,CAEEa,IAHJ,EAIE;AACAF,MAAAA,IAAI,CAAC,gCAAD,CAAJ;AACAH,MAAAA,QAAQ,GAAG,CAAX;AACA,YAAMM,KAAK,CAACN,QAAD,CAAX;AACD;;AACDC,IAAAA,QAAQ,CAAC,kDAAD,CAAR;;AACA,QACET,IAAI,CACF,wHADE,CAAJ,CAEEa,IAHJ,EAIE;AACAF,MAAAA,IAAI,CAAC,4BAAD,CAAJ;AACAH,MAAAA,QAAQ,GAAG,CAAX;AACA,YAAMM,KAAK,CAACN,QAAD,CAAX;AACD;;AACDC,IAAAA,QAAQ,CAAC,kBAAD,CAAR;;AACA,QAAIT,IAAI,CAAIL,IAAJ,mCAAJ,CAA6CkB,IAAjD,EAAuD;AACrDF,MAAAA,IAAI,CAAC,oBAAD,CAAJ;AACAH,MAAAA,QAAQ,GAAG,CAAX;AACA,YAAMM,KAAK,CAACN,QAAD,CAAX;AACD;AACF;;AACDA,EAAAA,QAAQ,GAAG,CAAX;AACD,CA7PD,SA6PU;AACRC,EAAAA,QAAQ,CAAC,UAAD,CAAR;;AACA,MAAIH,UAAJ,EAAgB;AACdK,IAAAA,IAAI,uBAAqBL,UAArB,CAAJ;AACAN,IAAAA,IAAI,cAAYM,UAAZ,CAAJ;AAGAN,IAAAA,IAAI,CAAC,wDAAD,CAAJ;AACD;;AACD,MAAIO,UAAJ,EAAgB;AACdI,IAAAA,IAAI,qBAAmBJ,UAAnB,CAAJ;AACAP,IAAAA,IAAI,cAAYO,UAAZ,CAAJ;AACD;AACF;;AACDiC,IAAI,CAAChC,QAAD,CAAJ","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\n'use strict';\n\n/**\n * This script tests that React Native end to end installation/bootstrap works for different platforms\n * Available arguments:\n * --ios - 'react-native init' and check iOS app doesn't redbox\n * --tvos - 'react-native init' and check tvOS app doesn't redbox\n * --android - 'react-native init' and check Android app doesn't redbox\n * --js - 'react-native init' and only check the packager returns a bundle\n * --skip-cli-install - to skip react-native-cli global installation (for local debugging)\n * --retries [num] - how many times to retry possible flaky commands: yarn add and running tests, default 1\n */\n/*eslint-disable no-undef */\nrequire('shelljs/global');\n\nconst spawn = require('child_process').spawn;\nconst argv = require('yargs').argv;\nconst path = require('path');\n\nconst SCRIPTS = __dirname;\nconst ROOT = path.normalize(path.join(__dirname, '..'));\nconst tryExecNTimes = require('./try-n-times');\n\nconst REACT_NATIVE_TEMP_DIR = exec(\n  'mktemp -d /tmp/react-native-XXXXXXXX',\n).stdout.trim();\nconst REACT_NATIVE_APP_DIR = `${REACT_NATIVE_TEMP_DIR}/template`;\nconst numberOfRetries = argv.retries || 1;\nlet SERVER_PID;\nlet APPIUM_PID;\nlet exitCode;\n\nfunction describe(message) {\n  echo(`\\n\\n>>>>> ${message}\\n\\n\\n`);\n}\n\ntry {\n  if (argv.android) {\n    describe('Compile Android binaries');\n    if (\n      exec(\n        './gradlew :ReactAndroid:installArchives -Pjobs=1 -Dorg.gradle.jvmargs=\"-Xmx512m -XX:+HeapDumpOnOutOfMemoryError\"',\n      ).code\n    ) {\n      echo('Failed to compile Android binaries');\n      exitCode = 1;\n      throw Error(exitCode);\n    }\n  }\n\n  if (argv.js) {\n    describe('Install Flow');\n    if (\n      tryExecNTimes(\n        () => {\n          return exec('npm install --save-dev flow-bin').code;\n        },\n        numberOfRetries,\n        () => exec('sleep 10s'),\n      )\n    ) {\n      echo('Failed to install Flow');\n      echo('Most common reason is npm registry connectivity, try again');\n      exitCode = 1;\n      throw Error(exitCode);\n    }\n  }\n\n  describe('Create react-native package');\n  if (exec('npm pack').code) {\n    echo('Failed to pack react-native');\n    exitCode = 1;\n    throw Error(exitCode);\n  }\n\n  const REACT_NATIVE_PACKAGE = path.join(ROOT, 'react-native-*.tgz');\n\n  describe('Scaffold a basic React Native app from template');\n  exec(`rsync -a ${ROOT}/template ${REACT_NATIVE_TEMP_DIR}`);\n  cd(REACT_NATIVE_APP_DIR);\n\n  const METRO_CONFIG = path.join(ROOT, 'metro.config.js');\n  const RN_GET_POLYFILLS = path.join(ROOT, 'rn-get-polyfills.js');\n  const RN_POLYFILLS_PATH = 'Libraries/polyfills/';\n  exec(`mkdir -p ${RN_POLYFILLS_PATH}`);\n\n  cp(METRO_CONFIG, '.');\n  cp(RN_GET_POLYFILLS, '.');\n  exec(\n    `rsync -a ${ROOT}/${RN_POLYFILLS_PATH} ${REACT_NATIVE_APP_DIR}/${RN_POLYFILLS_PATH}`,\n  );\n  mv('_flowconfig', '.flowconfig');\n  mv('_watchmanconfig', '.watchmanconfig');\n\n  describe('Install React Native package');\n  exec(`npm install ${REACT_NATIVE_PACKAGE}`);\n\n  describe('Install node_modules');\n  if (\n    tryExecNTimes(\n      () => {\n        return exec('npm install').code;\n      },\n      numberOfRetries,\n      () => exec('sleep 10s'),\n    )\n  ) {\n    echo('Failed to execute npm install');\n    echo('Most common reason is npm registry connectivity, try again');\n    exitCode = 1;\n    throw Error(exitCode);\n  }\n  exec('rm -rf ./node_modules/react-native/template');\n\n  if (argv.android) {\n    describe('Install end-to-end framework');\n    if (\n      tryExecNTimes(\n        () =>\n          exec(\n            'yarn add --dev appium@1.11.1 mocha@2.4.5 wd@1.11.1 colors@1.0.3 pretty-data2@0.40.1',\n            {silent: true},\n          ).code,\n        numberOfRetries,\n      )\n    ) {\n      echo('Failed to install appium');\n      echo('Most common reason is npm registry connectivity, try again');\n      exitCode = 1;\n      throw Error(exitCode);\n    }\n    cp(`${SCRIPTS}/android-e2e-test.js`, 'android-e2e-test.js');\n    cd('android');\n    describe('Download Maven deps');\n    exec('./gradlew :app:copyDownloadableDepsToLibs');\n    cd('..');\n\n    describe('Generate key');\n    exec('rm android/app/debug.keystore');\n    if (\n      exec(\n        'keytool -genkey -v -keystore android/app/debug.keystore -storepass android -alias androiddebugkey -keypass android -keyalg RSA -keysize 2048 -validity 10000 -dname \"CN=Android Debug,O=Android,C=US\"',\n      ).code\n    ) {\n      echo('Key could not be generated');\n      exitCode = 1;\n      throw Error(exitCode);\n    }\n\n    describe(`Start appium server, ${APPIUM_PID}`);\n    const appiumProcess = spawn('node', ['./node_modules/.bin/appium']);\n    APPIUM_PID = appiumProcess.pid;\n\n    describe('Build the app');\n    if (exec('react-native run-android').code) {\n      echo('could not execute react-native run-android');\n      exitCode = 1;\n      throw Error(exitCode);\n    }\n\n    describe(`Start packager server, ${SERVER_PID}`);\n    // shelljs exec('', {async: true}) does not emit stdout events, so we rely on good old spawn\n    const packagerProcess = spawn('yarn', ['start', '--max-workers 1'], {\n      env: process.env,\n    });\n    SERVER_PID = packagerProcess.pid;\n    // wait a bit to allow packager to startup\n    exec('sleep 15s');\n    describe('Test: Android end-to-end test');\n    if (\n      tryExecNTimes(\n        () => {\n          return exec('node node_modules/.bin/_mocha android-e2e-test.js').code;\n        },\n        numberOfRetries,\n        () => exec('sleep 10s'),\n      )\n    ) {\n      echo('Failed to run Android end-to-end tests');\n      echo('Most likely the code is broken');\n      exitCode = 1;\n      throw Error(exitCode);\n    }\n  }\n\n  if (argv.ios || argv.tvos) {\n    var iosTestType = argv.tvos ? 'tvOS' : 'iOS';\n    cd('ios');\n    // shelljs exec('', {async: true}) does not emit stdout events, so we rely on good old spawn\n    const packagerEnv = Object.create(process.env);\n    packagerEnv.REACT_NATIVE_MAX_WORKERS = 1;\n    describe('Start packager server');\n    const packagerProcess = spawn('yarn', ['start'], {\n      stdio: 'inherit',\n      env: packagerEnv,\n    });\n    SERVER_PID = packagerProcess.pid;\n    exec('sleep 15s');\n    // prepare cache to reduce chances of possible red screen \"Can't fibd variable __fbBatchedBridge...\"\n    exec(\n      'response=$(curl --write-out %{http_code} --silent --output /dev/null localhost:8081/index.bundle?platform=ios&dev=true)',\n    );\n    echo(`Packager server up and running, ${SERVER_PID}`);\n\n    describe('Install CocoaPod dependencies');\n    exec('pod install');\n\n    describe('Test: ' + iosTestType + ' end-to-end test');\n    if (\n      // TODO: Get target OS and simulator from .tests.env\n      tryExecNTimes(\n        () => {\n          let destination = 'platform=iOS Simulator,name=iPhone 8,OS=13.3';\n          let sdk = 'iphonesimulator';\n          let scheme = 'HelloWorld';\n\n          if (argv.tvos) {\n            destination = 'platform=tvOS Simulator,name=Apple TV,OS=13.3';\n            sdk = 'appletvsimulator';\n            scheme = 'HelloWorld-tvOS';\n          }\n\n          return exec(\n            [\n              'xcodebuild',\n              '-workspace',\n              '\"HelloWorld.xcworkspace\"',\n              '-destination',\n              `\"${destination}\"`,\n              '-scheme',\n              `\"${scheme}\"`,\n              '-sdk',\n              sdk,\n              '-UseModernBuildSystem=NO',\n              'test',\n            ].join(' ') +\n              ' | ' +\n              [\n                'xcpretty',\n                '--report',\n                'junit',\n                '--output',\n                `\"~/react-native/reports/junit/${iosTestType}-e2e/results.xml\"`,\n              ].join(' ') +\n              ' && exit ${PIPESTATUS[0]}',\n          ).code;\n        },\n        numberOfRetries,\n        () => exec('sleep 10s'),\n      )\n    ) {\n      echo('Failed to run ' + iosTestType + ' end-to-end tests');\n      echo('Most likely the code is broken');\n      exitCode = 1;\n      throw Error(exitCode);\n    }\n    cd('..');\n  }\n\n  if (argv.js) {\n    // Check the packager produces a bundle (doesn't throw an error)\n    describe('Test: Verify packager can generate an Android bundle');\n    if (\n      exec(\n        'yarn react-native bundle --verbose --entry-file index.js --platform android --dev true --bundle-output android-bundle.js --max-workers 1',\n      ).code\n    ) {\n      echo('Could not build Android bundle');\n      exitCode = 1;\n      throw Error(exitCode);\n    }\n    describe('Test: Verify packager can generate an iOS bundle');\n    if (\n      exec(\n        'yarn react-native bundle --entry-file index.js --platform ios --dev true --bundle-output ios-bundle.js --max-workers 1',\n      ).code\n    ) {\n      echo('Could not build iOS bundle');\n      exitCode = 1;\n      throw Error(exitCode);\n    }\n    describe('Test: Flow check');\n    if (exec(`${ROOT}/node_modules/.bin/flow check`).code) {\n      echo('Flow check failed.');\n      exitCode = 1;\n      throw Error(exitCode);\n    }\n  }\n  exitCode = 0;\n} finally {\n  describe('Clean up');\n  if (SERVER_PID) {\n    echo(`Killing packager ${SERVER_PID}`);\n    exec(`kill -9 ${SERVER_PID}`);\n    // this is quite drastic but packager starts a daemon that we can't kill by killing the parent process\n    // it will be fixed in April (quote David Aurelio), so until then we will kill the zombie by the port number\n    exec(\"lsof -i tcp:8081 | awk 'NR!=1 {print $2}' | xargs kill\");\n  }\n  if (APPIUM_PID) {\n    echo(`Killing appium ${APPIUM_PID}`);\n    exec(`kill -9 ${APPIUM_PID}`);\n  }\n}\nexit(exitCode);\n\n/*eslint-enable no-undef */\n"]},"metadata":{},"sourceType":"script"}