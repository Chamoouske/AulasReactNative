{"ast":null,"code":"import invariant from 'fbjs/lib/invariant';\nimport requestIdleCallback, { cancelIdleCallback } from \"../../modules/requestIdleCallback\";\nvar InteractionManager = {\n  Events: {\n    interactionStart: 'interactionStart',\n    interactionComplete: 'interactionComplete'\n  },\n  runAfterInteractions: function runAfterInteractions(task) {\n    var handle;\n    var promise = new Promise(function (resolve) {\n      handle = requestIdleCallback(function () {\n        if (task) {\n          resolve(task());\n        } else {\n          resolve();\n        }\n      });\n    });\n    return {\n      then: promise.then.bind(promise),\n      done: promise.then.bind(promise),\n      cancel: function cancel() {\n        cancelIdleCallback(handle);\n      }\n    };\n  },\n  createInteractionHandle: function createInteractionHandle() {\n    return 1;\n  },\n  clearInteractionHandle: function clearInteractionHandle(handle) {\n    invariant(!!handle, 'Must provide a handle to clear.');\n  },\n  addListener: function addListener() {}\n};\nexport default InteractionManager;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native-web/src/exports/InteractionManager/index.js"],"names":["invariant","requestIdleCallback","cancelIdleCallback","InteractionManager","Events","interactionStart","interactionComplete","runAfterInteractions","task","handle","promise","Promise","resolve","then","bind","done","cancel","createInteractionHandle","clearInteractionHandle","addListener"],"mappings":"AAUA,OAAOA,SAAP,MAAsB,oBAAtB;AACA,OAAOC,mBAAP,IAA8BC,kBAA9B;AAEA,IAAMC,kBAAkB,GAAG;AACzBC,EAAAA,MAAM,EAAE;AACNC,IAAAA,gBAAgB,EAAE,kBADZ;AAENC,IAAAA,mBAAmB,EAAE;AAFf,GADiB;AASzBC,EAAAA,oBATyB,gCASJC,IATI,EASmE;AAC1F,QAAIC,MAAJ;AAEA,QAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAAAC,OAAO,EAAI;AACrCH,MAAAA,MAAM,GAAGR,mBAAmB,CAAC,YAAM;AACjC,YAAIO,IAAJ,EAAU;AACRI,UAAAA,OAAO,CAACJ,IAAI,EAAL,CAAP;AACD,SAFD,MAEO;AACLI,UAAAA,OAAO;AACR;AACF,OAN2B,CAA5B;AAOD,KARe,CAAhB;AASA,WAAO;AACLC,MAAAA,IAAI,EAAEH,OAAO,CAACG,IAAR,CAAaC,IAAb,CAAkBJ,OAAlB,CADD;AAELK,MAAAA,IAAI,EAAEL,OAAO,CAACG,IAAR,CAAaC,IAAb,CAAkBJ,OAAlB,CAFD;AAGLM,MAAAA,MAAM,EAAE,kBAAM;AACZd,QAAAA,kBAAkB,CAACO,MAAD,CAAlB;AACD;AALI,KAAP;AAOD,GA5BwB;AAiCzBQ,EAAAA,uBAjCyB,qCAiCC;AACxB,WAAO,CAAP;AACD,GAnCwB;AAwCzBC,EAAAA,sBAxCyB,kCAwCFT,MAxCE,EAwCc;AACrCT,IAAAA,SAAS,CAAC,CAAC,CAACS,MAAH,EAAW,iCAAX,CAAT;AACD,GA1CwB;AA4CzBU,EAAAA,WAAW,EAAE,uBAAM,CAAE;AA5CI,CAA3B;AA+CA,eAAehB,kBAAf","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport invariant from 'fbjs/lib/invariant';\nimport requestIdleCallback, { cancelIdleCallback } from '../../modules/requestIdleCallback';\n\nconst InteractionManager = {\n  Events: {\n    interactionStart: 'interactionStart',\n    interactionComplete: 'interactionComplete'\n  },\n\n  /**\n   * Schedule a function to run after all interactions have completed.\n   */\n  runAfterInteractions(task: ?Function): { then: Function, done: Function, cancel: Function } {\n    let handle;\n\n    const promise = new Promise(resolve => {\n      handle = requestIdleCallback(() => {\n        if (task) {\n          resolve(task());\n        } else {\n          resolve();\n        }\n      });\n    });\n    return {\n      then: promise.then.bind(promise),\n      done: promise.then.bind(promise),\n      cancel: () => {\n        cancelIdleCallback(handle);\n      }\n    };\n  },\n\n  /**\n   * Notify manager that an interaction has started.\n   */\n  createInteractionHandle() {\n    return 1;\n  },\n\n  /**\n   * Notify manager that an interaction has completed.\n   */\n  clearInteractionHandle(handle: number) {\n    invariant(!!handle, 'Must provide a handle to clear.');\n  },\n\n  addListener: () => {}\n};\n\nexport default InteractionManager;\n"]},"metadata":{},"sourceType":"module"}