{"ast":null,"code":"'use strict';\n\nimport NativeDeviceEventManager from \"../../Libraries/NativeModules/specs/NativeDeviceEventManager\";\nimport RCTDeviceEventEmitter from \"../EventEmitter/RCTDeviceEventEmitter\";\nvar DEVICE_BACK_EVENT = 'hardwareBackPress';\nvar _backPressSubscriptions = [];\nRCTDeviceEventEmitter.addListener(DEVICE_BACK_EVENT, function () {\n  for (var i = _backPressSubscriptions.length - 1; i >= 0; i--) {\n    if (_backPressSubscriptions[i]()) {\n      return;\n    }\n  }\n\n  BackHandler.exitApp();\n});\nvar BackHandler = {\n  exitApp: function exitApp() {\n    if (!NativeDeviceEventManager) {\n      return;\n    }\n\n    NativeDeviceEventManager.invokeDefaultBackPressHandler();\n  },\n  addEventListener: function addEventListener(eventName, handler) {\n    if (_backPressSubscriptions.indexOf(handler) === -1) {\n      _backPressSubscriptions.push(handler);\n    }\n\n    return {\n      remove: function remove() {\n        return BackHandler.removeEventListener(eventName, handler);\n      }\n    };\n  },\n  removeEventListener: function removeEventListener(eventName, handler) {\n    if (_backPressSubscriptions.indexOf(handler) !== -1) {\n      _backPressSubscriptions.splice(_backPressSubscriptions.indexOf(handler), 1);\n    }\n  }\n};\nmodule.exports = BackHandler;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Utilities/BackHandler.android.js"],"names":["NativeDeviceEventManager","RCTDeviceEventEmitter","DEVICE_BACK_EVENT","_backPressSubscriptions","addListener","i","length","BackHandler","exitApp","invokeDefaultBackPressHandler","addEventListener","eventName","handler","indexOf","push","remove","removeEventListener","splice","module","exports"],"mappings":"AAUA;;AAEA,OAAOA,wBAAP;AACA,OAAOC,qBAAP;AAEA,IAAMC,iBAAiB,GAAG,mBAA1B;AAIA,IAAMC,uBAAuB,GAAG,EAAhC;AAEAF,qBAAqB,CAACG,WAAtB,CAAkCF,iBAAlC,EAAqD,YAAW;AAC9D,OAAK,IAAIG,CAAC,GAAGF,uBAAuB,CAACG,MAAxB,GAAiC,CAA9C,EAAiDD,CAAC,IAAI,CAAtD,EAAyDA,CAAC,EAA1D,EAA8D;AAC5D,QAAIF,uBAAuB,CAACE,CAAD,CAAvB,EAAJ,EAAkC;AAChC;AACD;AACF;;AAEDE,EAAAA,WAAW,CAACC,OAAZ;AACD,CARD;AAmDA,IAAMD,WAAyB,GAAG;AAChCC,EAAAA,OAAO,EAAE,mBAAiB;AACxB,QAAI,CAACR,wBAAL,EAA+B;AAC7B;AACD;;AAEDA,IAAAA,wBAAwB,CAACS,6BAAzB;AACD,GAP+B;AAehCC,EAAAA,gBAAgB,EAAE,0BAChBC,SADgB,EAEhBC,OAFgB,EAGW;AAC3B,QAAIT,uBAAuB,CAACU,OAAxB,CAAgCD,OAAhC,MAA6C,CAAC,CAAlD,EAAqD;AACnDT,MAAAA,uBAAuB,CAACW,IAAxB,CAA6BF,OAA7B;AACD;;AACD,WAAO;AACLG,MAAAA,MAAM,EAAE;AAAA,eAAYR,WAAW,CAACS,mBAAZ,CAAgCL,SAAhC,EAA2CC,OAA3C,CAAZ;AAAA;AADH,KAAP;AAGD,GAzB+B;AA8BhCI,EAAAA,mBAAmB,EAAE,6BACnBL,SADmB,EAEnBC,OAFmB,EAGb;AACN,QAAIT,uBAAuB,CAACU,OAAxB,CAAgCD,OAAhC,MAA6C,CAAC,CAAlD,EAAqD;AACnDT,MAAAA,uBAAuB,CAACc,MAAxB,CACEd,uBAAuB,CAACU,OAAxB,CAAgCD,OAAhC,CADF,EAEE,CAFF;AAID;AACF;AAxC+B,CAAlC;AA2CAM,MAAM,CAACC,OAAP,GAAiBZ,WAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nimport NativeDeviceEventManager from '../../Libraries/NativeModules/specs/NativeDeviceEventManager';\nimport RCTDeviceEventEmitter from '../EventEmitter/RCTDeviceEventEmitter';\n\nconst DEVICE_BACK_EVENT = 'hardwareBackPress';\n\ntype BackPressEventName = 'backPress' | 'hardwareBackPress';\n\nconst _backPressSubscriptions = [];\n\nRCTDeviceEventEmitter.addListener(DEVICE_BACK_EVENT, function() {\n  for (let i = _backPressSubscriptions.length - 1; i >= 0; i--) {\n    if (_backPressSubscriptions[i]()) {\n      return;\n    }\n  }\n\n  BackHandler.exitApp();\n});\n\n/**\n * Detect hardware button presses for back navigation.\n *\n * Android: Detect hardware back button presses, and programmatically invoke the default back button\n * functionality to exit the app if there are no listeners or if none of the listeners return true.\n *\n * tvOS: Detect presses of the menu button on the TV remote.  (Still to be implemented:\n * programmatically disable menu button handling\n * functionality to exit the app if there are no listeners or if none of the listeners return true.)\n *\n * iOS: Not applicable.\n *\n * The event subscriptions are called in reverse order (i.e. last registered subscription first),\n * and if one subscription returns true then subscriptions registered earlier will not be called.\n *\n * Example:\n *\n * ```javascript\n * BackHandler.addEventListener('hardwareBackPress', function() {\n *  // this.onMainScreen and this.goBack are just examples, you need to use your own implementation here\n *  // Typically you would use the navigator here to go to the last state.\n *\n *  if (!this.onMainScreen()) {\n *    this.goBack();\n *    return true;\n *  }\n *  return false;\n * });\n * ```\n */\ntype TBackHandler = {|\n  +exitApp: () => void,\n  +addEventListener: (\n    eventName: BackPressEventName,\n    handler: Function,\n  ) => {remove: () => void, ...},\n  +removeEventListener: (\n    eventName: BackPressEventName,\n    handler: Function,\n  ) => void,\n|};\nconst BackHandler: TBackHandler = {\n  exitApp: function(): void {\n    if (!NativeDeviceEventManager) {\n      return;\n    }\n\n    NativeDeviceEventManager.invokeDefaultBackPressHandler();\n  },\n\n  /**\n   * Adds an event handler. Supported events:\n   *\n   * - `hardwareBackPress`: Fires when the Android hardware back button is pressed or when the\n   * tvOS menu button is pressed.\n   */\n  addEventListener: function(\n    eventName: BackPressEventName,\n    handler: Function,\n  ): {remove: () => void, ...} {\n    if (_backPressSubscriptions.indexOf(handler) === -1) {\n      _backPressSubscriptions.push(handler);\n    }\n    return {\n      remove: (): void => BackHandler.removeEventListener(eventName, handler),\n    };\n  },\n\n  /**\n   * Removes the event handler.\n   */\n  removeEventListener: function(\n    eventName: BackPressEventName,\n    handler: Function,\n  ): void {\n    if (_backPressSubscriptions.indexOf(handler) !== -1) {\n      _backPressSubscriptions.splice(\n        _backPressSubscriptions.indexOf(handler),\n        1,\n      );\n    }\n  },\n};\n\nmodule.exports = BackHandler;\n"]},"metadata":{},"sourceType":"module"}