{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar color_string_1 = __importDefault(require(\"color-string\"));\n\nvar path_1 = __importDefault(require(\"path\"));\n\nvar xml_manipulation_1 = require(\"../xml-manipulation\");\n\nvar COLORS_XML_FILE_PATH = './res/values/colors.xml';\nvar COLORS_NIGHT_XML_FILE_PATH = './res/values-night/colors.xml';\n\nfunction ensureDesiredXmlContent(xml, _ref) {\n  var backgroundColor = _ref.backgroundColor,\n      statusBarBackgroundColor = _ref.statusBarBackgroundColor;\n  var idx = 0;\n  var result = xml_manipulation_1.mergeXmlElements(xml, {\n    elements: [{\n      name: 'resources',\n      elements: [{\n        idx: idx++,\n        comment: \" Below line is handled by '@expo/configure-splash-screen' command and it's discouraged to modify it manually \"\n      }, {\n        deletionFlag: !backgroundColor,\n        idx: !backgroundColor ? undefined : idx++,\n        name: 'color',\n        attributes: {\n          name: 'splashscreen_background'\n        },\n        elements: [{\n          text: backgroundColor ? getAndroidStyleHex(backgroundColor) : ''\n        }]\n      }, {\n        deletionFlag: !statusBarBackgroundColor,\n        idx: !statusBarBackgroundColor ? undefined : idx++,\n        name: 'color',\n        attributes: {\n          name: 'splashscreen_statusbar_color'\n        },\n        elements: [{\n          text: statusBarBackgroundColor ? getAndroidStyleHex(statusBarBackgroundColor) : ''\n        }]\n      }]\n    }]\n  });\n  return result;\n}\n\nfunction getAndroidStyleHex(color) {\n  return color_string_1.default.to.hex(color).replace(/^(#)([0-F]{2})([0-F]{4})([0-F]{2}$)/i, '$1$4$2$3').replace(/^(#)([0-F])([0-F]{2})([0-F])$/i, '$1$4$2$3');\n}\n\nfunction configureColorsXml(androidMainPath, config) {\n  var _a, _b, _c, _d, backgroundColor, darkModeBackgroundColor, statusBarBackgroundColor, darkModeStatusBarBackgroundColor, filePath, darkFilePath, xmlContent, darkFileContent, configuredXmlContent, configuredDarkXmlContent;\n\n  return _regeneratorRuntime.async(function configureColorsXml$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          backgroundColor = config.backgroundColor;\n          darkModeBackgroundColor = (_a = config.darkMode) === null || _a === void 0 ? void 0 : _a.backgroundColor;\n          statusBarBackgroundColor = (_b = config.statusBar) === null || _b === void 0 ? void 0 : _b.backgroundColor;\n          darkModeStatusBarBackgroundColor = (_d = (_c = config.darkMode) === null || _c === void 0 ? void 0 : _c.statusBar) === null || _d === void 0 ? void 0 : _d.backgroundColor;\n\n          if (!(darkModeStatusBarBackgroundColor && !statusBarBackgroundColor)) {\n            _context.next = 6;\n            break;\n          }\n\n          throw new Error(\"'darkModeStatusBarBackgroundColor' is available only if 'statusBarBackgroundColor' is provided as well.\");\n\n        case 6:\n          filePath = path_1.default.resolve(androidMainPath, COLORS_XML_FILE_PATH);\n          darkFilePath = path_1.default.resolve(androidMainPath, COLORS_NIGHT_XML_FILE_PATH);\n          _context.next = 10;\n          return _regeneratorRuntime.awrap(xml_manipulation_1.readXmlFile(filePath));\n\n        case 10:\n          xmlContent = _context.sent;\n          _context.next = 13;\n          return _regeneratorRuntime.awrap(xml_manipulation_1.readXmlFile(darkFilePath));\n\n        case 13:\n          darkFileContent = _context.sent;\n          configuredXmlContent = ensureDesiredXmlContent(xmlContent, {\n            backgroundColor: backgroundColor,\n            statusBarBackgroundColor: statusBarBackgroundColor\n          });\n          configuredDarkXmlContent = ensureDesiredXmlContent(darkFileContent, {\n            backgroundColor: darkModeBackgroundColor,\n            statusBarBackgroundColor: darkModeStatusBarBackgroundColor\n          });\n          _context.next = 18;\n          return _regeneratorRuntime.awrap(xml_manipulation_1.writeXmlFileOrRemoveFileUponNoResources(darkFilePath, configuredDarkXmlContent, {\n            disregardComments: true\n          }));\n\n        case 18:\n          _context.next = 20;\n          return _regeneratorRuntime.awrap(xml_manipulation_1.writeXmlFile(filePath, configuredXmlContent));\n\n        case 20:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.default = configureColorsXml;","map":{"version":3,"sources":["../../src/android/Colors.xml.ts"],"names":[],"mappings":"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","sourcesContent":["import colorString from 'color-string';\nimport path from 'path';\nimport { Element } from 'xml-js';\n\nimport { Color } from '../SplashScreenConfig';\nimport {\n  readXmlFile,\n  writeXmlFile,\n  mergeXmlElements,\n  writeXmlFileOrRemoveFileUponNoResources,\n} from '../xml-manipulation';\n\nconst COLORS_XML_FILE_PATH = './res/values/colors.xml';\nconst COLORS_NIGHT_XML_FILE_PATH = './res/values-night/colors.xml';\n\nfunction ensureDesiredXmlContent(\n  xml: Element,\n  {\n    backgroundColor,\n    statusBarBackgroundColor,\n  }: {\n    backgroundColor?: Color;\n    statusBarBackgroundColor?: Color;\n  }\n): Element {\n  let idx = 0;\n  const result = mergeXmlElements(xml, {\n    elements: [\n      {\n        name: 'resources',\n        elements: [\n          {\n            idx: idx++,\n            comment: ` Below line is handled by '@expo/configure-splash-screen' command and it's discouraged to modify it manually `,\n          },\n          {\n            deletionFlag: !backgroundColor,\n            idx: !backgroundColor ? undefined : idx++,\n            name: 'color',\n            attributes: {\n              name: 'splashscreen_background',\n            },\n            elements: [\n              {\n                text: backgroundColor ? getAndroidStyleHex(backgroundColor) : '',\n              },\n            ],\n          },\n          {\n            deletionFlag: !statusBarBackgroundColor,\n            idx: !statusBarBackgroundColor ? undefined : idx++,\n            name: 'color',\n            attributes: {\n              name: 'splashscreen_statusbar_color',\n            },\n            elements: [\n              {\n                text: statusBarBackgroundColor ? getAndroidStyleHex(statusBarBackgroundColor) : '',\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  });\n  return result;\n}\n\n/**\n * css-recognized hex is of format `#RRGGBB(AA)` or `#RGB(A)`, while Android accepts `#(AA)RRGGBB` or `#(A)RGB` (https://developer.android.com/guide/topics/resources/color-list-resource)\n * This function converts following formats:\n * - `#RRGGBBAA` ➡️ `#AARRGGBB`,\n * - `#RGBA` ➡️ `#ARGB`.\n */\nfunction getAndroidStyleHex(color: Color): string {\n  return colorString.to\n    .hex(color)\n    .replace(/^(#)([0-F]{2})([0-F]{4})([0-F]{2}$)/i, '$1$4$2$3')\n    .replace(/^(#)([0-F])([0-F]{2})([0-F])$/i, '$1$4$2$3');\n}\n\n/**\n * @param androidMainPath Path to the main directory containing code and resources in Android project. In general that would be `android/app/src/main`.\n */\nexport default async function configureColorsXml(\n  androidMainPath: string,\n  config: {\n    backgroundColor: Color;\n    statusBar?: {\n      backgroundColor?: Color;\n    };\n    darkMode?: {\n      backgroundColor?: Color;\n      statusBar?: {\n        backgroundColor?: Color;\n      };\n    };\n  }\n) {\n  const backgroundColor = config.backgroundColor;\n  const darkModeBackgroundColor = config.darkMode?.backgroundColor;\n  const statusBarBackgroundColor = config.statusBar?.backgroundColor;\n  const darkModeStatusBarBackgroundColor = config.darkMode?.statusBar?.backgroundColor;\n\n  if (darkModeStatusBarBackgroundColor && !statusBarBackgroundColor) {\n    throw new Error(\n      `'darkModeStatusBarBackgroundColor' is available only if 'statusBarBackgroundColor' is provided as well.`\n    );\n  }\n\n  const filePath = path.resolve(androidMainPath, COLORS_XML_FILE_PATH);\n  const darkFilePath = path.resolve(androidMainPath, COLORS_NIGHT_XML_FILE_PATH);\n\n  const xmlContent = await readXmlFile(filePath);\n  const darkFileContent = await readXmlFile(darkFilePath);\n\n  const configuredXmlContent = ensureDesiredXmlContent(xmlContent, {\n    backgroundColor,\n    statusBarBackgroundColor,\n  });\n\n  const configuredDarkXmlContent = ensureDesiredXmlContent(darkFileContent, {\n    backgroundColor: darkModeBackgroundColor,\n    statusBarBackgroundColor: darkModeStatusBarBackgroundColor,\n  });\n\n  await writeXmlFileOrRemoveFileUponNoResources(darkFilePath, configuredDarkXmlContent, {\n    disregardComments: true,\n  });\n  await writeXmlFile(filePath, configuredXmlContent);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}