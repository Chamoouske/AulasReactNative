{"ast":null,"code":"'use strict';\n\nvar RNCodegen = require(\"../src/generators/RNCodegen.js\");\n\nvar fs = require('fs');\n\nvar mkdirp = require('mkdirp');\n\nvar args = process.argv.slice(2);\n\nif (args.length !== 4) {\n  throw new Error(\"Expected to receive path to schema, library name, output directory and module spec name. Received \" + args.join(', '));\n}\n\nvar schemaPath = args[0];\nvar libraryName = args[1];\nvar outputDirectory = args[2];\nvar moduleSpecName = args[3];\nvar schemaText = fs.readFileSync(schemaPath, 'utf-8');\n\nif (schemaText == null) {\n  throw new Error(\"Can't find schema at \" + schemaPath);\n}\n\nmkdirp.sync(outputDirectory);\nvar schema;\n\ntry {\n  schema = JSON.parse(schemaText);\n} catch (err) {\n  throw new Error(\"Can't parse schema to JSON. \" + schemaPath);\n}\n\nRNCodegen.generate({\n  libraryName: libraryName,\n  schema: schema,\n  outputDirectory: outputDirectory,\n  moduleSpecName: moduleSpecName\n}, {\n  generators: ['descriptors', 'events', 'props', 'tests', 'shadow-nodes', 'modules']\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/packages/react-native-codegen/buck_tests/generate-tests.js"],"names":["RNCodegen","require","fs","mkdirp","args","process","argv","slice","length","Error","join","schemaPath","libraryName","outputDirectory","moduleSpecName","schemaText","readFileSync","sync","schema","JSON","parse","err","generate","generators"],"mappings":"AAUA;;AAEA,IAAMA,SAAS,GAAGC,OAAO,kCAAzB;;AACA,IAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;;AACA,IAAME,MAAM,GAAGF,OAAO,CAAC,QAAD,CAAtB;;AAEA,IAAMG,IAAI,GAAGC,OAAO,CAACC,IAAR,CAAaC,KAAb,CAAmB,CAAnB,CAAb;;AACA,IAAIH,IAAI,CAACI,MAAL,KAAgB,CAApB,EAAuB;AACrB,QAAM,IAAIC,KAAJ,wGACiGL,IAAI,CAACM,IAAL,CACnG,IADmG,CADjG,CAAN;AAKD;;AAED,IAAMC,UAAU,GAAGP,IAAI,CAAC,CAAD,CAAvB;AACA,IAAMQ,WAAW,GAAGR,IAAI,CAAC,CAAD,CAAxB;AACA,IAAMS,eAAe,GAAGT,IAAI,CAAC,CAAD,CAA5B;AACA,IAAMU,cAAc,GAAGV,IAAI,CAAC,CAAD,CAA3B;AAEA,IAAMW,UAAU,GAAGb,EAAE,CAACc,YAAH,CAAgBL,UAAhB,EAA4B,OAA5B,CAAnB;;AAEA,IAAII,UAAU,IAAI,IAAlB,EAAwB;AACtB,QAAM,IAAIN,KAAJ,2BAAkCE,UAAlC,CAAN;AACD;;AAEDR,MAAM,CAACc,IAAP,CAAYJ,eAAZ;AAEA,IAAIK,MAAJ;;AACA,IAAI;AACFA,EAAAA,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWL,UAAX,CAAT;AACD,CAFD,CAEE,OAAOM,GAAP,EAAY;AACZ,QAAM,IAAIZ,KAAJ,kCAAyCE,UAAzC,CAAN;AACD;;AAEDX,SAAS,CAACsB,QAAV,CACE;AAACV,EAAAA,WAAW,EAAXA,WAAD;AAAcM,EAAAA,MAAM,EAANA,MAAd;AAAsBL,EAAAA,eAAe,EAAfA,eAAtB;AAAuCC,EAAAA,cAAc,EAAdA;AAAvC,CADF,EAEE;AACES,EAAAA,UAAU,EAAE,CACV,aADU,EAEV,QAFU,EAGV,OAHU,EAIV,OAJU,EAKV,cALU,EAMV,SANU;AADd,CAFF","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nconst RNCodegen = require('../src/generators/RNCodegen.js');\nconst fs = require('fs');\nconst mkdirp = require('mkdirp');\n\nconst args = process.argv.slice(2);\nif (args.length !== 4) {\n  throw new Error(\n    `Expected to receive path to schema, library name, output directory and module spec name. Received ${args.join(\n      ', ',\n    )}`,\n  );\n}\n\nconst schemaPath = args[0];\nconst libraryName = args[1];\nconst outputDirectory = args[2];\nconst moduleSpecName = args[3];\n\nconst schemaText = fs.readFileSync(schemaPath, 'utf-8');\n\nif (schemaText == null) {\n  throw new Error(`Can't find schema at ${schemaPath}`);\n}\n\nmkdirp.sync(outputDirectory);\n\nlet schema;\ntry {\n  schema = JSON.parse(schemaText);\n} catch (err) {\n  throw new Error(`Can't parse schema to JSON. ${schemaPath}`);\n}\n\nRNCodegen.generate(\n  {libraryName, schema, outputDirectory, moduleSpecName},\n  {\n    generators: [\n      'descriptors',\n      'events',\n      'props',\n      'tests',\n      'shadow-nodes',\n      'modules',\n    ],\n  },\n);\n"]},"metadata":{},"sourceType":"script"}