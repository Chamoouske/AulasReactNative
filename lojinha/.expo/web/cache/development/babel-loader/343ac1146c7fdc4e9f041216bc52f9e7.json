{"ast":null,"code":"'use strict';\n\nvar _extends = require(\"@babel/runtime/helpers/extends\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nvar _jsxFileName = \"/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/RNTester/js/utils/RNTesterStatePersister.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar React = require('react');\n\nfunction createContainer(Component, spec) {\n  var _class, _temp, _Component$displayNam;\n\n  return _temp = _class = function (_React$Component) {\n    _inherits(ComponentWithPersistedState, _React$Component);\n\n    var _super = _createSuper(ComponentWithPersistedState);\n\n    function ComponentWithPersistedState() {\n      var _this;\n\n      _classCallCheck(this, ComponentWithPersistedState);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _super.call.apply(_super, [this].concat(args));\n      _this.state = {\n        value: spec.getInitialState(_this.props)\n      };\n      _this._cacheKey = \"RNTester:\" + (spec.version || 'v1') + \":\" + spec.cacheKeySuffix(_this.props);\n\n      _this._passSetState = function (stateLamda) {\n        _this.setState(function (state) {\n          var value = stateLamda(state.value);\n          AsyncStorage.setItem(_this._cacheKey, JSON.stringify(value));\n          return {\n            value: value\n          };\n        });\n      };\n\n      return _this;\n    }\n\n    _createClass(ComponentWithPersistedState, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        var _this2 = this;\n\n        AsyncStorage.getItem(this._cacheKey, function (err, value) {\n          if (!err && value) {\n            _this2.setState({\n              value: JSON.parse(value)\n            });\n          }\n        });\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        return React.createElement(Component, _extends({}, this.props, {\n          persister: {\n            state: this.state.value,\n            setState: this._passSetState\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 9\n          }\n        }));\n      }\n    }]);\n\n    return ComponentWithPersistedState;\n  }(React.Component), _class.displayName = \"RNTesterStatePersister(\" + String((_Component$displayNam = Component.displayName) != null ? _Component$displayNam : Component.name) + \")\", _temp;\n}\n\nvar RNTesterStatePersister = {\n  createContainer: createContainer\n};\nmodule.exports = RNTesterStatePersister;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/RNTester/js/utils/RNTesterStatePersister.js"],"names":["React","require","createContainer","Component","spec","state","value","getInitialState","props","_cacheKey","version","cacheKeySuffix","_passSetState","stateLamda","setState","AsyncStorage","setItem","JSON","stringify","getItem","err","parse","displayName","String","name","RNTesterStatePersister","module","exports"],"mappings":"AAUA;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAmBA,SAASC,eAAT,CACEC,SADF,EAEEC,IAFF,EAQ8B;AAAA;;AAC5B;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,YAOEC,KAPF,GAOU;AAACC,QAAAA,KAAK,EAAEF,IAAI,CAACG,eAAL,CAAqB,MAAKC,KAA1B;AAAR,OAPV;AAAA,YAQEC,SARF,kBAQ0BL,IAAI,CAACM,OAAL,IAAgB,IAR1C,UAQkDN,IAAI,CAACO,cAAL,CAC9C,MAAKH,KADyC,CARlD;;AAAA,YAkBEI,aAlBF,GAkBkB,UAACC,UAAD,EAA+C;AAC7D,cAAKC,QAAL,CAAc,UAAAT,KAAK,EAAI;AACrB,cAAMC,KAAK,GAAGO,UAAU,CAACR,KAAK,CAACC,KAAP,CAAxB;AACAS,UAAAA,YAAY,CAACC,OAAb,CAAqB,MAAKP,SAA1B,EAAqCQ,IAAI,CAACC,SAAL,CAAeZ,KAAf,CAArC;AACA,iBAAO;AAACA,YAAAA,KAAK,EAALA;AAAD,WAAP;AACD,SAJD;AAKD,OAxBH;;AAAA;AAAA;;AAAA;AAAA;AAAA,aAWE,6BAAoB;AAAA;;AAClBS,QAAAA,YAAY,CAACI,OAAb,CAAqB,KAAKV,SAA1B,EAAqC,UAACW,GAAD,EAAMd,KAAN,EAAgB;AACnD,cAAI,CAACc,GAAD,IAAQd,KAAZ,EAAmB;AACjB,YAAA,MAAI,CAACQ,QAAL,CAAc;AAACR,cAAAA,KAAK,EAAEW,IAAI,CAACI,KAAL,CAAWf,KAAX;AAAR,aAAd;AACD;AACF,SAJD;AAKD;AAjBH;AAAA;AAAA,aAyBE,kBAAqB;AACnB,eACE,oBAAC,SAAD,eACM,KAAKE,KADX;AAEE,UAAA,SAAS,EAAE;AACTH,YAAAA,KAAK,EAAE,KAAKA,KAAL,CAAWC,KADT;AAETQ,YAAAA,QAAQ,EAAE,KAAKF;AAFN,WAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AASD;AAnCH;;AAAA;AAAA,IAAiDZ,KAAK,CAACG,SAAvD,UAISmB,WAJT,+BAIiDC,MAAM,0BACnDpB,SAAS,CAACmB,WADyC,oCAC1BnB,SAAS,CAACqB,IADgB,CAJvD;AAqCD;;AAED,IAAMC,sBAAsB,GAAG;AAC7BvB,EAAAA,eAAe,EAAfA;AAD6B,CAA/B;AAIAwB,MAAM,CAACC,OAAP,GAAiBF,sBAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst React = require('react');\nconst {AsyncStorage} = require('react-native');\n\nexport type PassProps<State> = {\n  state: State,\n  setState: (stateLamda: (state: State) => State) => void,\n  ...\n};\n\n/**\n * A simple container for persisting some state and passing it into the wrapped component as\n * `props.persister.state`. Update it with `props.persister.setState`. The component is initially\n * rendered using `getInitialState` in the spec and is then re-rendered with the persisted data\n * once it's fetched.\n *\n * This is currently tied to RNTester because it's generally not good to use AsyncStorage like\n * this in real apps with user data, but we could maybe pull it out for other internal settings-type\n * usage.\n */\nfunction createContainer<Props: Object, State>(\n  Component: React.ComponentType<Props & {persister: PassProps<State>, ...}>,\n  spec: {\n    cacheKeySuffix: (props: Props) => string,\n    getInitialState: (props: Props) => State,\n    version?: string,\n    ...\n  },\n): React.ComponentType<Props> {\n  return class ComponentWithPersistedState extends React.Component<\n    Props,\n    $FlowFixMeState,\n  > {\n    static displayName = `RNTesterStatePersister(${String(\n      Component.displayName ?? Component.name,\n    )})`;\n    state = {value: spec.getInitialState(this.props)};\n    _cacheKey = `RNTester:${spec.version || 'v1'}:${spec.cacheKeySuffix(\n      this.props,\n    )}`;\n    componentDidMount() {\n      AsyncStorage.getItem(this._cacheKey, (err, value) => {\n        if (!err && value) {\n          this.setState({value: JSON.parse(value)});\n        }\n      });\n    }\n    _passSetState = (stateLamda: (state: State) => State): void => {\n      this.setState(state => {\n        const value = stateLamda(state.value);\n        AsyncStorage.setItem(this._cacheKey, JSON.stringify(value));\n        return {value};\n      });\n    };\n    render(): React.Node {\n      return (\n        <Component\n          {...this.props}\n          persister={{\n            state: this.state.value,\n            setState: this._passSetState,\n          }}\n        />\n      );\n    }\n  };\n}\n\nconst RNTesterStatePersister = {\n  createContainer,\n};\n\nmodule.exports = RNTesterStatePersister;\n"]},"metadata":{},"sourceType":"script"}