{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nvar _extends = require(\"@babel/runtime/helpers/extends\");\n\nvar _jsxFileName = \"/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/RNTester/js/examples/Text/TextExample.ios.js\",\n    _this9 = this;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar React = require('react');\n\nvar TextAncestor = require(\"../../../../Libraries/Text/TextAncestor\");\n\nvar TextInlineView = require(\"../../components/TextInlineView\");\n\nvar TextLegend = require(\"../../components/TextLegend\");\n\nvar Button = require(\"react-native-web/dist/exports/Button\").default;\n\nvar LayoutAnimation = require(\"react-native-web/dist/exports/LayoutAnimation\").default;\n\nvar Platform = require(\"react-native-web/dist/exports/Platform\").default;\n\nvar Text = require(\"react-native-web/dist/exports/Text\").default;\n\nvar TextInput = require(\"react-native-web/dist/exports/TextInput\").default;\n\nvar View = require(\"react-native-web/dist/exports/View\").default;\n\nfunction InlineView(props) {\n  return React.createElement(TextAncestor.Provider, {\n    value: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, React.createElement(View, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  })));\n}\n\nvar TextAlignRTLExample = function (_React$Component) {\n  _inherits(TextAlignRTLExample, _React$Component);\n\n  var _super = _createSuper(TextAlignRTLExample);\n\n  function TextAlignRTLExample() {\n    var _this;\n\n    _classCallCheck(this, TextAlignRTLExample);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      isRTL: false\n    };\n    return _this;\n  }\n\n  _createClass(TextAlignRTLExample, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var isRTL = this.state.isRTL;\n\n      var toggleRTL = function toggleRTL() {\n        return _this2.setState({\n          isRTL: !isRTL\n        });\n      };\n\n      return React.createElement(View, {\n        style: {\n          direction: isRTL ? 'rtl' : 'ltr'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 7\n        }\n      }, React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 9\n        }\n      }, \"auto (default) - english LTR\"), React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 9\n        }\n      }, \"\\u0623\\u062D\\u0628 \\u0627\\u0644\\u0644\\u063A\\u0629 \" + \"\\u0627\\u0644\\u0639\\u0631\\u0628\\u064A\\u0629 auto (default) - arabic RTL\"), React.createElement(Text, {\n        style: {\n          textAlign: 'left'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 9\n        }\n      }, \"left left left left left left left left left left left left left left left\"), React.createElement(Text, {\n        style: {\n          textAlign: 'center'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 9\n        }\n      }, \"center center center center center center center center center center center\"), React.createElement(Text, {\n        style: {\n          textAlign: 'right'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 9\n        }\n      }, \"right right right right right right right right right right right right right\"), React.createElement(Text, {\n        style: {\n          textAlign: 'justify'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 9\n        }\n      }, \"justify: this text component\", \"'\", \"s contents are laid out with \\\"textAlign: justify\\\" and as you can see all of the lines except the last one span the available width of the parent container.\"), React.createElement(Button, {\n        onPress: toggleRTL,\n        title: \"Switch to \" + (isRTL ? 'LTR' : 'RTL'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return TextAlignRTLExample;\n}(React.Component);\n\nvar Entity = function (_React$Component2) {\n  _inherits(Entity, _React$Component2);\n\n  var _super2 = _createSuper(Entity);\n\n  function Entity() {\n    _classCallCheck(this, Entity);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(Entity, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Text, {\n        style: {\n          fontWeight: '500',\n          color: '#527fe4'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 7\n        }\n      }, this.props.children);\n    }\n  }]);\n\n  return Entity;\n}(React.Component);\n\nvar AttributeToggler = function (_React$Component3) {\n  _inherits(AttributeToggler, _React$Component3);\n\n  var _super3 = _createSuper(AttributeToggler);\n\n  function AttributeToggler() {\n    var _this3;\n\n    _classCallCheck(this, AttributeToggler);\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    _this3 = _super3.call.apply(_super3, [this].concat(args));\n    _this3.state = {\n      fontWeight: 'bold',\n      fontSize: 15\n    };\n\n    _this3.toggleWeight = function () {\n      _this3.setState({\n        fontWeight: _this3.state.fontWeight === 'bold' ? 'normal' : 'bold'\n      });\n    };\n\n    _this3.increaseSize = function () {\n      _this3.setState({\n        fontSize: _this3.state.fontSize + 1\n      });\n    };\n\n    return _this3;\n  }\n\n  _createClass(AttributeToggler, [{\n    key: \"render\",\n    value: function render() {\n      var curStyle = {\n        fontWeight: this.state.fontWeight,\n        fontSize: this.state.fontSize\n      };\n      return React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 7\n        }\n      }, React.createElement(Text, {\n        style: curStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 9\n        }\n      }, \"Tap the controls below to change attributes.\"), React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 9\n        }\n      }, React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }\n      }, \"See how it will even work on\", ' ', React.createElement(Text, {\n        style: curStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }\n      }, \"this nested text\"))), React.createElement(Text, {\n        style: {\n          backgroundColor: '#ffaaaa',\n          marginTop: 5\n        },\n        onPress: this.toggleWeight,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 9\n        }\n      }, \"Toggle Weight\"), React.createElement(Text, {\n        style: {\n          backgroundColor: '#aaaaff',\n          marginTop: 5\n        },\n        onPress: this.increaseSize,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 9\n        }\n      }, \"Increase Size\"));\n    }\n  }]);\n\n  return AttributeToggler;\n}(React.Component);\n\nvar AdjustingFontSize = function (_React$Component4) {\n  _inherits(AdjustingFontSize, _React$Component4);\n\n  var _super4 = _createSuper(AdjustingFontSize);\n\n  function AdjustingFontSize() {\n    var _this4;\n\n    _classCallCheck(this, AdjustingFontSize);\n\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    _this4 = _super4.call.apply(_super4, [this].concat(args));\n    _this4.state = {\n      dynamicText: '',\n      shouldRender: true\n    };\n\n    _this4.reset = function () {\n      LayoutAnimation.easeInEaseOut();\n\n      _this4.setState({\n        shouldRender: false\n      });\n\n      setTimeout(function () {\n        LayoutAnimation.easeInEaseOut();\n\n        _this4.setState({\n          dynamicText: '',\n          shouldRender: true\n        });\n      }, 300);\n    };\n\n    _this4.addText = function () {\n      _this4.setState({\n        dynamicText: _this4.state.dynamicText + (Math.floor(Math.random() * 10 % 2) ? ' foo' : ' bar')\n      });\n    };\n\n    _this4.removeText = function () {\n      _this4.setState({\n        dynamicText: _this4.state.dynamicText.slice(0, _this4.state.dynamicText.length - 4)\n      });\n    };\n\n    return _this4;\n  }\n\n  _createClass(AdjustingFontSize, [{\n    key: \"render\",\n    value: function render() {\n      if (!this.state.shouldRender) {\n        return React.createElement(View, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 14\n          }\n        });\n      }\n\n      return React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 7\n        }\n      }, React.createElement(Text, {\n        ellipsizeMode: \"tail\",\n        numberOfLines: 1,\n        style: {\n          fontSize: 36,\n          marginVertical: 6\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 9\n        }\n      }, \"Truncated text is baaaaad.\"), React.createElement(Text, {\n        numberOfLines: 1,\n        adjustsFontSizeToFit: true,\n        style: {\n          fontSize: 40,\n          marginVertical: 6\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 9\n        }\n      }, \"Shrinking to fit available space is much better!\"), React.createElement(Text, {\n        adjustsFontSizeToFit: true,\n        numberOfLines: 1,\n        style: {\n          fontSize: 30,\n          marginVertical: 6\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 9\n        }\n      }, 'Add text to me to watch me shrink!' + ' ' + this.state.dynamicText), React.createElement(Text, {\n        adjustsFontSizeToFit: true,\n        numberOfLines: 4,\n        style: {\n          fontSize: 20,\n          marginVertical: 6\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 9\n        }\n      }, 'Multiline text component shrinking is supported, watch as this reeeeaaaally loooooong teeeeeeext grooooows and then shriiiinks as you add text to me! ioahsdia soady auydoa aoisyd aosdy ' + ' ' + this.state.dynamicText), React.createElement(Text, {\n        adjustsFontSizeToFit: true,\n        style: {\n          fontSize: 20,\n          marginVertical: 6,\n          maxHeight: 50\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 9\n        }\n      }, 'Text limited by height, watch as this reeeeaaaally loooooong teeeeeeext grooooows and then shriiiinks as you add text to me! ioahsdia soady auydoa aoisyd aosdy ' + ' ' + this.state.dynamicText), React.createElement(Text, {\n        adjustsFontSizeToFit: true,\n        numberOfLines: 1,\n        style: {\n          marginVertical: 6\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 9\n        }\n      }, React.createElement(Text, {\n        style: {\n          fontSize: 14\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }\n      }, 'Differently sized nested elements will shrink together. '), React.createElement(Text, {\n        style: {\n          fontSize: 20\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }\n      }, 'LARGE TEXT! ' + this.state.dynamicText)), React.createElement(View, {\n        style: {\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginTop: 5,\n          marginVertical: 6\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 9\n        }\n      }, React.createElement(Text, {\n        style: {\n          backgroundColor: '#ffaaaa'\n        },\n        onPress: this.reset,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }\n      }, \"Reset\"), React.createElement(Text, {\n        style: {\n          backgroundColor: '#aaaaff'\n        },\n        onPress: this.removeText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 11\n        }\n      }, \"Remove Text\"), React.createElement(Text, {\n        style: {\n          backgroundColor: '#aaffaa'\n        },\n        onPress: this.addText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 11\n        }\n      }, \"Add Text\")));\n    }\n  }]);\n\n  return AdjustingFontSize;\n}(React.Component);\n\nvar TextBaseLineLayoutExample = function (_React$Component5) {\n  _inherits(TextBaseLineLayoutExample, _React$Component5);\n\n  var _super5 = _createSuper(TextBaseLineLayoutExample);\n\n  function TextBaseLineLayoutExample() {\n    _classCallCheck(this, TextBaseLineLayoutExample);\n\n    return _super5.apply(this, arguments);\n  }\n\n  _createClass(TextBaseLineLayoutExample, [{\n    key: \"render\",\n    value: function render() {\n      var texts = [];\n\n      for (var i = 9; i >= 0; i--) {\n        texts.push(React.createElement(Text, {\n          key: i,\n          style: {\n            fontSize: 8 + i * 5,\n            backgroundColor: '#eee'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 9\n          }\n        }, i));\n      }\n\n      var marker = React.createElement(View, {\n        style: {\n          width: 20,\n          height: 20,\n          backgroundColor: 'gray'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 7\n        }\n      });\n      var subtitleStyle = {\n        fontSize: 16,\n        marginTop: 8,\n        fontWeight: 'bold'\n      };\n      return React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 7\n        }\n      }, React.createElement(Text, {\n        style: subtitleStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 9\n        }\n      }, 'Nested <Text/>s:'), React.createElement(View, {\n        style: {\n          flexDirection: 'row',\n          alignItems: 'baseline'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 9\n        }\n      }, marker, React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 11\n        }\n      }, texts), marker), React.createElement(Text, {\n        style: subtitleStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 9\n        }\n      }, 'Array of <Text/>s in <View>:'), React.createElement(View, {\n        style: {\n          flexDirection: 'row',\n          alignItems: 'baseline'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 9\n        }\n      }, marker, texts, marker), React.createElement(Text, {\n        style: subtitleStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 9\n        }\n      }, 'Interleaving <View> and <Text>:'), React.createElement(View, {\n        style: {\n          flexDirection: 'row',\n          alignItems: 'baseline'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 9\n        }\n      }, marker, React.createElement(Text, {\n        selectable: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 11\n        }\n      }, \"Some text.\", React.createElement(View, {\n        style: {\n          flexDirection: 'row',\n          alignItems: 'baseline',\n          backgroundColor: '#eee'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 13\n        }\n      }, marker, React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 15\n        }\n      }, \"Text inside View.\"), marker)), marker), React.createElement(Text, {\n        style: subtitleStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 9\n        }\n      }, 'Multi-line interleaved <View> and <Text>:'), React.createElement(View, {\n        style: {\n          flexDirection: 'row',\n          alignItems: 'baseline'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 9\n        }\n      }, React.createElement(Text, {\n        selectable: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 11\n        }\n      }, \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris venenatis,\", ' ', React.createElement(View, {\n        style: {\n          backgroundColor: 'yellow'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 13\n        }\n      }, React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 15\n        }\n      }, \"mauris eu commodo maximus\")), ' ', \", ante arcu vestibulum ligula, et scelerisque diam.\")), React.createElement(Text, {\n        style: subtitleStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 9\n        }\n      }, '<TextInput/>:'), React.createElement(View, {\n        style: {\n          flexDirection: 'row',\n          alignItems: 'baseline'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 9\n        }\n      }, marker, React.createElement(TextInput, {\n        style: {\n          margin: 0,\n          padding: 0\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 11\n        }\n      }, texts), marker), React.createElement(Text, {\n        style: subtitleStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 9\n        }\n      }, '<TextInput multiline/>:'), React.createElement(View, {\n        style: {\n          flexDirection: 'row',\n          alignItems: 'baseline'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 9\n        }\n      }, marker, React.createElement(TextInput, {\n        multiline: true,\n        style: {\n          margin: 0,\n          padding: 0\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 11\n        }\n      }, texts), marker));\n    }\n  }]);\n\n  return TextBaseLineLayoutExample;\n}(React.Component);\n\nvar TextRenderInfoExample = function (_React$Component6) {\n  _inherits(TextRenderInfoExample, _React$Component6);\n\n  var _super6 = _createSuper(TextRenderInfoExample);\n\n  function TextRenderInfoExample() {\n    var _this5;\n\n    _classCallCheck(this, TextRenderInfoExample);\n\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n\n    _this5 = _super6.call.apply(_super6, [this].concat(args));\n    _this5.state = {\n      textMetrics: {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0,\n        capHeight: 0,\n        descender: 0,\n        ascender: 0,\n        xHeight: 0\n      },\n      numberOfTextBlocks: 1,\n      fontSize: 14\n    };\n    return _this5;\n  }\n\n  _createClass(TextRenderInfoExample, [{\n    key: \"render\",\n    value: function render() {\n      var _this6 = this;\n\n      var topOfBox = this.state.textMetrics.y + this.state.textMetrics.height - (this.state.textMetrics.descender + this.state.textMetrics.capHeight);\n      return React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 7\n        }\n      }, React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 9\n        }\n      }, React.createElement(View, {\n        style: {\n          position: 'absolute',\n          left: this.state.textMetrics.x + this.state.textMetrics.width,\n          top: topOfBox,\n          width: 5,\n          height: Math.ceil(this.state.textMetrics.capHeight - this.state.textMetrics.xHeight),\n          backgroundColor: 'red'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 11\n        }\n      }), React.createElement(View, {\n        style: {\n          position: 'absolute',\n          left: this.state.textMetrics.x + this.state.textMetrics.width,\n          top: topOfBox + (this.state.textMetrics.capHeight - this.state.textMetrics.xHeight),\n          width: 5,\n          height: Math.ceil(this.state.textMetrics.xHeight),\n          backgroundColor: 'green'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 11\n        }\n      }), React.createElement(Text, {\n        style: {\n          fontSize: this.state.fontSize\n        },\n        onTextLayout: function onTextLayout(event) {\n          var lines = event.nativeEvent.lines;\n\n          if (lines.length > 0) {\n            _this6.setState({\n              textMetrics: lines[lines.length - 1]\n            });\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 11\n        }\n      }, new Array(this.state.numberOfTextBlocks).fill('A tiny block of text.').join(' '))), React.createElement(Text, {\n        onPress: function onPress() {\n          return _this6.setState({\n            numberOfTextBlocks: _this6.state.numberOfTextBlocks + 1\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 9\n        }\n      }, \"More text\"), React.createElement(Text, {\n        onPress: function onPress() {\n          return _this6.setState({\n            fontSize: _this6.state.fontSize + 1\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 9\n        }\n      }, \"Increase size\"), React.createElement(Text, {\n        onPress: function onPress() {\n          return _this6.setState({\n            fontSize: _this6.state.fontSize - 1\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 9\n        }\n      }, \"Decrease size\"));\n    }\n  }]);\n\n  return TextRenderInfoExample;\n}(React.Component);\n\nvar TextWithCapBaseBox = function (_React$Component7) {\n  _inherits(TextWithCapBaseBox, _React$Component7);\n\n  var _super7 = _createSuper(TextWithCapBaseBox);\n\n  function TextWithCapBaseBox() {\n    var _this7;\n\n    _classCallCheck(this, TextWithCapBaseBox);\n\n    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      args[_key5] = arguments[_key5];\n    }\n\n    _this7 = _super7.call.apply(_super7, [this].concat(args));\n    _this7.state = {\n      textMetrics: {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0,\n        capHeight: 0,\n        descender: 0,\n        ascender: 0,\n        xHeight: 0\n      }\n    };\n    return _this7;\n  }\n\n  _createClass(TextWithCapBaseBox, [{\n    key: \"render\",\n    value: function render() {\n      var _this8 = this;\n\n      return React.createElement(Text, {\n        onTextLayout: function onTextLayout(event) {\n          var lines = event.nativeEvent.lines;\n\n          if (lines.length > 0) {\n            _this8.setState({\n              textMetrics: lines[0]\n            });\n          }\n        },\n        style: [{\n          marginTop: Math.ceil(-(this.state.textMetrics.ascender - this.state.textMetrics.capHeight)),\n          marginBottom: Math.ceil(-this.state.textMetrics.descender)\n        }, this.props.style],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 7\n        }\n      }, this.props.children);\n    }\n  }]);\n\n  return TextWithCapBaseBox;\n}(React.Component);\n\nexports.title = '<Text>';\nexports.description = 'Base component for rendering styled text.';\nexports.displayName = 'TextExample';\nexports.examples = [{\n  title: 'Wrap',\n  render: function render() {\n    return React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 9\n      }\n    }, \"The text should wrap if it goes on multiple lines. See, this is going to the next line.\");\n  }\n}, {\n  title: \"Substring Emoji (should only see 'test')\",\n  render: function render() {\n    return React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 14\n      }\n    }, 'test🙃'.substring(0, 5));\n  }\n}, {\n  title: 'Transparent Background Color',\n  render: function render() {\n    return React.createElement(Text, {\n      style: {\n        backgroundColor: '#00000020',\n        padding: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 507,\n        columnNumber: 9\n      }\n    }, \"Text in a gray box!\", React.createElement(Text, {\n      style: {\n        backgroundColor: 'red'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 11\n      }\n    }, \"Another text in a (inline) red box (which is inside the gray box).\"));\n  }\n}, {\n  title: 'Text metrics',\n  render: function render() {\n    return React.createElement(TextRenderInfoExample, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519,\n        columnNumber: 14\n      }\n    });\n  }\n}, {\n  title: 'Text metrics legend',\n  render: function render() {\n    return React.createElement(TextLegend, {\n      __self: _this9,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 31\n      }\n    });\n  }\n}, {\n  title: 'Baseline capheight box',\n  render: function render() {\n    return React.createElement(View, {\n      style: {\n        backgroundColor: 'red'\n      },\n      __self: _this9,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 7\n      }\n    }, React.createElement(TextWithCapBaseBox, {\n      __self: _this9,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530,\n        columnNumber: 9\n      }\n    }, \"Some example text.\"));\n  }\n}, {\n  title: 'Padding',\n  render: function render() {\n    return React.createElement(Text, {\n      style: {\n        padding: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 9\n      }\n    }, \"This text is indented by 10px padding on all sides.\");\n  }\n}, {\n  title: 'Font Family',\n  render: function render() {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548,\n        columnNumber: 9\n      }\n    }, React.createElement(Text, {\n      style: {\n        fontFamily: Platform.isTV ? 'Times' : 'Cochin'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549,\n        columnNumber: 11\n      }\n    }, \"Cochin\"), React.createElement(Text, {\n      style: {\n        fontFamily: Platform.isTV ? 'Times' : 'Cochin',\n        fontWeight: 'bold'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 552,\n        columnNumber: 11\n      }\n    }, \"Cochin bold\"), React.createElement(Text, {\n      style: {\n        fontFamily: 'Helvetica'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 11\n      }\n    }, \"Helvetica\"), React.createElement(Text, {\n      style: {\n        fontFamily: 'Helvetica',\n        fontWeight: 'bold'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560,\n        columnNumber: 11\n      }\n    }, \"Helvetica bold\"), React.createElement(Text, {\n      style: {\n        fontFamily: Platform.isTV ? 'Courier' : 'Verdana'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 563,\n        columnNumber: 11\n      }\n    }, \"Verdana\"), React.createElement(Text, {\n      style: {\n        fontFamily: Platform.isTV ? 'Courier' : 'Verdana',\n        fontWeight: 'bold'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 566,\n        columnNumber: 11\n      }\n    }, \"Verdana bold\"));\n  }\n}, {\n  title: 'Font Size',\n  render: function render() {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 581,\n        columnNumber: 9\n      }\n    }, React.createElement(Text, {\n      style: {\n        fontSize: 23\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 582,\n        columnNumber: 11\n      }\n    }, \"Size 23\"), React.createElement(Text, {\n      style: {\n        fontSize: 8\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 583,\n        columnNumber: 11\n      }\n    }, \"Size 8\"));\n  }\n}, {\n  title: 'Color',\n  render: function render() {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 592,\n        columnNumber: 9\n      }\n    }, React.createElement(Text, {\n      style: {\n        color: 'red'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 593,\n        columnNumber: 11\n      }\n    }, \"Red color\"), React.createElement(Text, {\n      style: {\n        color: 'blue'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 594,\n        columnNumber: 11\n      }\n    }, \"Blue color\"));\n  }\n}, {\n  title: 'Font Weight',\n  render: function render() {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 603,\n        columnNumber: 9\n      }\n    }, React.createElement(Text, {\n      style: {\n        fontSize: 20,\n        fontWeight: '100'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 604,\n        columnNumber: 11\n      }\n    }, \"Move fast and be ultralight\"), React.createElement(Text, {\n      style: {\n        fontSize: 20,\n        fontWeight: '200'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 607,\n        columnNumber: 11\n      }\n    }, \"Move fast and be light\"), React.createElement(Text, {\n      style: {\n        fontSize: 20,\n        fontWeight: 'normal'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 610,\n        columnNumber: 11\n      }\n    }, \"Move fast and be normal\"), React.createElement(Text, {\n      style: {\n        fontSize: 20,\n        fontWeight: 'bold'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 613,\n        columnNumber: 11\n      }\n    }, \"Move fast and be bold\"), React.createElement(Text, {\n      style: {\n        fontSize: 20,\n        fontWeight: '900'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 616,\n        columnNumber: 11\n      }\n    }, \"Move fast and be ultrabold\"));\n  }\n}, {\n  title: 'Font Style',\n  render: function render() {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 627,\n        columnNumber: 9\n      }\n    }, React.createElement(Text, {\n      style: {\n        fontStyle: 'normal'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 628,\n        columnNumber: 11\n      }\n    }, \"Normal text\"), React.createElement(Text, {\n      style: {\n        fontStyle: 'italic'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 629,\n        columnNumber: 11\n      }\n    }, \"Italic text\"));\n  }\n}, {\n  title: 'Selectable',\n  render: function render() {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 638,\n        columnNumber: 9\n      }\n    }, React.createElement(Text, {\n      selectable: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 639,\n        columnNumber: 11\n      }\n    }, \"This text is \", React.createElement(Text, {\n      style: {\n        fontWeight: 'bold'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 640,\n        columnNumber: 26\n      }\n    }, \"selectable\"), \" if you click-and-hold.\"));\n  }\n}, {\n  title: 'Text Decoration',\n  render: function render() {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 651,\n        columnNumber: 9\n      }\n    }, React.createElement(Text, {\n      style: {\n        textDecorationLine: 'underline',\n        textDecorationStyle: 'solid'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 652,\n        columnNumber: 11\n      }\n    }, \"Solid underline\"), React.createElement(Text, {\n      style: {\n        textDecorationLine: 'underline',\n        textDecorationStyle: 'double',\n        textDecorationColor: '#ff0000'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 659,\n        columnNumber: 11\n      }\n    }, \"Double underline with custom color\"), React.createElement(Text, {\n      style: {\n        textDecorationLine: 'underline',\n        textDecorationStyle: 'dashed',\n        textDecorationColor: '#9CDC40'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 667,\n        columnNumber: 11\n      }\n    }, \"Dashed underline with custom color\"), React.createElement(Text, {\n      style: {\n        textDecorationLine: 'underline',\n        textDecorationStyle: 'dotted',\n        textDecorationColor: 'blue'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 675,\n        columnNumber: 11\n      }\n    }, \"Dotted underline with custom color\"), React.createElement(Text, {\n      style: {\n        textDecorationLine: 'none'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 683,\n        columnNumber: 11\n      }\n    }, \"None textDecoration\"), React.createElement(Text, {\n      style: {\n        textDecorationLine: 'line-through',\n        textDecorationStyle: 'solid'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 684,\n        columnNumber: 11\n      }\n    }, \"Solid line-through\"), React.createElement(Text, {\n      style: {\n        textDecorationLine: 'line-through',\n        textDecorationStyle: 'double',\n        textDecorationColor: '#ff0000'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 691,\n        columnNumber: 11\n      }\n    }, \"Double line-through with custom color\"), React.createElement(Text, {\n      style: {\n        textDecorationLine: 'line-through',\n        textDecorationStyle: 'dashed',\n        textDecorationColor: '#9CDC40'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 699,\n        columnNumber: 11\n      }\n    }, \"Dashed line-through with custom color\"), React.createElement(Text, {\n      style: {\n        textDecorationLine: 'line-through',\n        textDecorationStyle: 'dotted',\n        textDecorationColor: 'blue'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 707,\n        columnNumber: 11\n      }\n    }, \"Dotted line-through with custom color\"), React.createElement(Text, {\n      style: {\n        textDecorationLine: 'underline line-through'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 715,\n        columnNumber: 11\n      }\n    }, \"Both underline and line-through\"));\n  }\n}, {\n  title: 'Nested',\n  description: 'Nested text components will inherit the styles of their ' + 'parents (only backgroundColor is inherited from non-Text parents).  ' + '<Text> only supports other <Text> and raw text (strings) as children.',\n  render: function render() {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 729,\n        columnNumber: 9\n      }\n    }, React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 730,\n        columnNumber: 11\n      }\n    }, \"(Normal text,\", React.createElement(Text, {\n      style: {\n        fontWeight: 'bold'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 732,\n        columnNumber: 13\n      }\n    }, \"(and bold\", React.createElement(Text, {\n      style: {\n        fontSize: 11,\n        color: '#527fe4'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 734,\n        columnNumber: 15\n      }\n    }, \"(and tiny inherited bold blue)\"), \")\"), \")\"), React.createElement(Text, {\n      style: {\n        opacity: 0.7\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 741,\n        columnNumber: 11\n      }\n    }, \"(opacity\", React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 743,\n        columnNumber: 13\n      }\n    }, \"(is inherited\", React.createElement(Text, {\n      style: {\n        opacity: 0.7\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 745,\n        columnNumber: 15\n      }\n    }, \"(and accumulated\", React.createElement(Text, {\n      style: {\n        backgroundColor: '#ffaaaa'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 747,\n        columnNumber: 17\n      }\n    }, \"(and also applies to the background)\"), \")\"), \")\"), \")\"), React.createElement(Text, {\n      style: {\n        fontSize: 12\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 756,\n        columnNumber: 11\n      }\n    }, React.createElement(Entity, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 757,\n        columnNumber: 13\n      }\n    }, \"Entity Name\")));\n  }\n}, {\n  title: 'Text Align',\n  render: function render() {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 767,\n        columnNumber: 9\n      }\n    }, React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 768,\n        columnNumber: 11\n      }\n    }, \"auto (default) - english LTR\"), React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 769,\n        columnNumber: 11\n      }\n    }, \"\\u0623\\u062D\\u0628 \\u0627\\u0644\\u0644\\u063A\\u0629 \" + \"\\u0627\\u0644\\u0639\\u0631\\u0628\\u064A\\u0629 auto (default) - arabic \" + 'RTL'), React.createElement(Text, {\n      style: {\n        textAlign: 'left'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 774,\n        columnNumber: 11\n      }\n    }, \"left left left left left left left left left left left left left left left\"), React.createElement(Text, {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 778,\n        columnNumber: 11\n      }\n    }, \"center center center center center center center center center center center\"), React.createElement(Text, {\n      style: {\n        textAlign: 'right'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 782,\n        columnNumber: 11\n      }\n    }, \"right right right right right right right right right right right right right\"), React.createElement(Text, {\n      style: {\n        textAlign: 'justify'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 786,\n        columnNumber: 11\n      }\n    }, \"justify: this text component\", \"'\", \"s contents are laid out with \\\"textAlign: justify\\\" and as you can see all of the lines except the last one span the available width of the parent container.\"));\n  }\n}, {\n  title: 'Letter Spacing',\n  render: function render() {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 799,\n        columnNumber: 9\n      }\n    }, React.createElement(Text, {\n      style: {\n        letterSpacing: 0\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 800,\n        columnNumber: 11\n      }\n    }, \"letterSpacing = 0\"), React.createElement(Text, {\n      style: {\n        letterSpacing: 2,\n        marginTop: 5\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 801,\n        columnNumber: 11\n      }\n    }, \"letterSpacing = 2\"), React.createElement(Text, {\n      style: {\n        letterSpacing: 9,\n        marginTop: 5\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 804,\n        columnNumber: 11\n      }\n    }, \"letterSpacing = 9\"), React.createElement(View, {\n      style: {\n        flexDirection: 'row'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 807,\n        columnNumber: 11\n      }\n    }, React.createElement(Text, {\n      style: {\n        fontSize: 12,\n        letterSpacing: 2,\n        backgroundColor: 'fuchsia',\n        marginTop: 5\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 808,\n        columnNumber: 13\n      }\n    }, \"With size and background color\")), React.createElement(Text, {\n      style: {\n        letterSpacing: -1,\n        marginTop: 5\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 818,\n        columnNumber: 11\n      }\n    }, \"letterSpacing = -1\"), React.createElement(Text, {\n      style: {\n        letterSpacing: 3,\n        backgroundColor: '#dddddd',\n        marginTop: 5\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 821,\n        columnNumber: 11\n      }\n    }, \"[letterSpacing = 3]\", React.createElement(Text, {\n      style: {\n        letterSpacing: 0,\n        backgroundColor: '#bbbbbb'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 828,\n        columnNumber: 13\n      }\n    }, \"[Nested letterSpacing = 0]\"), React.createElement(Text, {\n      style: {\n        letterSpacing: 6,\n        backgroundColor: '#eeeeee'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 831,\n        columnNumber: 13\n      }\n    }, \"[Nested letterSpacing = 6]\")));\n  }\n}, {\n  title: 'Spaces',\n  render: function render() {\n    return React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 843,\n        columnNumber: 9\n      }\n    }, \"A \", 'generated', \" \", 'string', \" and some \\xA0\\xA0\\xA0 spaces\");\n  }\n}, {\n  title: 'Line Height',\n  render: function render() {\n    return React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 853,\n        columnNumber: 9\n      }\n    }, React.createElement(Text, {\n      style: {\n        lineHeight: 35\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 854,\n        columnNumber: 11\n      }\n    }, \"A lot of space between the lines of this long passage that should wrap once.\"));\n  }\n}, {\n  title: 'Empty Text',\n  description: \"It's ok to have Text with zero or null children.\",\n  render: function render() {\n    return React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 866,\n        columnNumber: 14\n      }\n    });\n  }\n}, {\n  title: 'Toggling Attributes',\n  render: function render() {\n    return React.createElement(AttributeToggler, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 872,\n        columnNumber: 14\n      }\n    });\n  }\n}, {\n  title: 'backgroundColor attribute',\n  description: 'backgroundColor is inherited from all types of views.',\n  render: function render() {\n    return React.createElement(Text, {\n      style: {\n        backgroundColor: 'yellow'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 880,\n        columnNumber: 9\n      }\n    }, \"Yellow container background,\", React.createElement(Text, {\n      style: {\n        backgroundColor: '#ffaaaa'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 882,\n        columnNumber: 11\n      }\n    }, ' ', \"red background,\", React.createElement(Text, {\n      style: {\n        backgroundColor: '#aaaaff'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 885,\n        columnNumber: 13\n      }\n    }, ' ', \"blue background,\", React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 888,\n        columnNumber: 15\n      }\n    }, ' ', \"inherited blue background,\", React.createElement(Text, {\n      style: {\n        backgroundColor: '#aaffaa'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 891,\n        columnNumber: 17\n      }\n    }, ' ', \"nested green background.\")))));\n  }\n}, {\n  title: 'numberOfLines attribute',\n  render: function render() {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 906,\n        columnNumber: 9\n      }\n    }, React.createElement(Text, {\n      numberOfLines: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 907,\n        columnNumber: 11\n      }\n    }, \"Maximum of one line, no matter how much I write here. If I keep writing, it\", \"'\", \"ll just truncate after one line.\"), React.createElement(Text, {\n      numberOfLines: 2,\n      style: {\n        marginTop: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 911,\n        columnNumber: 11\n      }\n    }, \"Maximum of two lines, no matter how much I write here. If I keep writing, it\", \"'\", \"ll just truncate after two lines.\"), React.createElement(Text, {\n      style: {\n        marginTop: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 915,\n        columnNumber: 11\n      }\n    }, \"No maximum lines specified, no matter how much I write here. If I keep writing, it\", \"'\", \"ll just keep going and going.\"));\n  }\n}, {\n  title: 'Text highlighting (tap the link to see highlight)',\n  render: function render() {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 927,\n        columnNumber: 9\n      }\n    }, React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 928,\n        columnNumber: 11\n      }\n    }, \"Lorem ipsum dolor sit amet,\", ' ', React.createElement(Text, {\n      suppressHighlighting: false,\n      style: {\n        backgroundColor: 'white',\n        textDecorationLine: 'underline',\n        color: 'blue'\n      },\n      onPress: function onPress() {\n        return null;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 930,\n        columnNumber: 13\n      }\n    }, \"consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud\"), ' ', \"exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\"));\n  }\n}, {\n  title: 'allowFontScaling attribute',\n  render: function render() {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 953,\n        columnNumber: 9\n      }\n    }, React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 954,\n        columnNumber: 11\n      }\n    }, \"By default, text will respect Text Size accessibility setting on iOS. It means that all font sizes will be increased or decreased depending on the value of Text Size setting in\", ' ', React.createElement(Text, {\n      style: {\n        fontWeight: 'bold'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 958,\n        columnNumber: 13\n      }\n    }, \"Settings.app - Display & Brightness - Text Size\")), React.createElement(Text, {\n      style: {\n        marginTop: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 962,\n        columnNumber: 11\n      }\n    }, \"You can disable scaling for your Text component by passing \", '\"', \"allowFontScaling=\", '{', \"false\", '}\"', \" prop.\"), React.createElement(Text, {\n      allowFontScaling: false,\n      style: {\n        marginTop: 20,\n        fontSize: 15\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 966,\n        columnNumber: 11\n      }\n    }, \"This text will not scale.\", ' ', React.createElement(Text, {\n      style: {\n        fontSize: 15\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 968,\n        columnNumber: 13\n      }\n    }, \"This text also won't scale because it inherits \\\"allowFontScaling\\\" from its parent.\")));\n  }\n}, {\n  title: 'Inline views',\n  render: function render() {\n    return React.createElement(TextInlineView.Basic, {\n      __self: _this9,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 979,\n        columnNumber: 31\n      }\n    });\n  }\n}, {\n  title: 'Inline image/view clipped by <Text>',\n  render: function render() {\n    return React.createElement(TextInlineView.ClippedByText, {\n      __self: _this9,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 983,\n        columnNumber: 31\n      }\n    });\n  }\n}, {\n  title: 'Relayout inline image',\n  render: function render() {\n    return React.createElement(TextInlineView.ChangeImageSize, {\n      __self: _this9,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 987,\n        columnNumber: 31\n      }\n    });\n  }\n}, {\n  title: 'Relayout inline view',\n  render: function render() {\n    return React.createElement(TextInlineView.ChangeViewSize, {\n      __self: _this9,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 991,\n        columnNumber: 31\n      }\n    });\n  }\n}, {\n  title: 'Relayout nested inline view',\n  render: function render() {\n    return React.createElement(TextInlineView.ChangeInnerViewSize, {\n      __self: _this9,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 995,\n        columnNumber: 31\n      }\n    });\n  }\n}, {\n  title: 'Text shadow',\n  render: function render() {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1001,\n        columnNumber: 9\n      }\n    }, React.createElement(Text, {\n      style: {\n        fontSize: 20,\n        textShadowOffset: {\n          width: 2,\n          height: 2\n        },\n        textShadowRadius: 1,\n        textShadowColor: '#00cccc'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1002,\n        columnNumber: 11\n      }\n    }, \"Demo text shadow\"));\n  }\n}, {\n  title: 'Ellipsize mode',\n  render: function render() {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1019,\n        columnNumber: 9\n      }\n    }, React.createElement(Text, {\n      numberOfLines: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1020,\n        columnNumber: 11\n      }\n    }, \"This very long text should be truncated with dots in the end.\"), React.createElement(Text, {\n      ellipsizeMode: \"middle\",\n      numberOfLines: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1023,\n        columnNumber: 11\n      }\n    }, \"This very long text should be truncated with dots in the middle.\"), React.createElement(Text, {\n      ellipsizeMode: \"head\",\n      numberOfLines: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1026,\n        columnNumber: 11\n      }\n    }, \"This very long text should be truncated with dots in the beginning.\"), React.createElement(Text, {\n      ellipsizeMode: \"clip\",\n      numberOfLines: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1029,\n        columnNumber: 11\n      }\n    }, \"This very looooooooooooooooooooooooooooong text should be clipped.\"));\n  }\n}, {\n  title: 'Font variants',\n  render: function render() {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1040,\n        columnNumber: 9\n      }\n    }, React.createElement(Text, {\n      style: {\n        fontVariant: ['small-caps']\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1041,\n        columnNumber: 11\n      }\n    }, \"Small Caps\", '\\n'), React.createElement(Text, {\n      style: {\n        fontFamily: Platform.isTV ? 'Times' : 'Hoefler Text',\n        fontVariant: ['oldstyle-nums']\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1042,\n        columnNumber: 11\n      }\n    }, \"Old Style nums 0123456789\", '\\n'), React.createElement(Text, {\n      style: {\n        fontFamily: Platform.isTV ? 'Times' : 'Hoefler Text',\n        fontVariant: ['lining-nums']\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1049,\n        columnNumber: 11\n      }\n    }, \"Lining nums 0123456789\", '\\n'), React.createElement(Text, {\n      style: {\n        fontVariant: ['tabular-nums']\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1056,\n        columnNumber: 11\n      }\n    }, \"Tabular nums\", '\\n', \"1111\", '\\n', \"2222\", '\\n'), React.createElement(Text, {\n      style: {\n        fontVariant: ['proportional-nums']\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1061,\n        columnNumber: 11\n      }\n    }, \"Proportional nums\", '\\n', \"1111\", '\\n', \"2222\", '\\n'));\n  }\n}, {\n  title: 'Nested content',\n  render: function render() {\n    return React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1077,\n        columnNumber: 9\n      }\n    }, \"This text has a view\", React.createElement(InlineView, {\n      style: {\n        borderColor: 'red',\n        borderWidth: 1\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1079,\n        columnNumber: 11\n      }\n    }, React.createElement(Text, {\n      style: {\n        borderColor: 'blue',\n        borderWidth: 1\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1080,\n        columnNumber: 13\n      }\n    }, \"which has\"), React.createElement(Text, {\n      style: {\n        borderColor: 'green',\n        borderWidth: 1\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1081,\n        columnNumber: 13\n      }\n    }, \"another text inside.\"), React.createElement(Text, {\n      style: {\n        borderColor: 'yellow',\n        borderWidth: 1\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1084,\n        columnNumber: 13\n      }\n    }, \"And moreover, it has another view\", React.createElement(InlineView, {\n      style: {\n        borderColor: 'red',\n        borderWidth: 1\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1086,\n        columnNumber: 15\n      }\n    }, React.createElement(Text, {\n      style: {\n        borderColor: 'blue',\n        borderWidth: 1\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1087,\n        columnNumber: 17\n      }\n    }, \"with another text inside!\")))), \"Because we need to go deeper.\");\n  }\n}, {\n  title: 'Dynamic Font Size Adjustment',\n  render: function render() {\n    return React.createElement(AdjustingFontSize, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1101,\n        columnNumber: 14\n      }\n    });\n  }\n}, {\n  title: 'Text Align with RTL',\n  render: function render() {\n    return React.createElement(TextAlignRTLExample, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1107,\n        columnNumber: 14\n      }\n    });\n  }\n}, {\n  title: \"Text `alignItems: 'baseline'` style\",\n  render: function render() {\n    return React.createElement(TextBaseLineLayoutExample, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1113,\n        columnNumber: 14\n      }\n    });\n  }\n}, {\n  title: 'Transform',\n  render: function render() {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1120,\n        columnNumber: 9\n      }\n    }, React.createElement(Text, {\n      style: {\n        textTransform: 'uppercase'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1121,\n        columnNumber: 11\n      }\n    }, \"This text should be uppercased.\"), React.createElement(Text, {\n      style: {\n        textTransform: 'lowercase'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1124,\n        columnNumber: 11\n      }\n    }, \"This TEXT SHOULD be lowercased.\"), React.createElement(Text, {\n      style: {\n        textTransform: 'capitalize'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1127,\n        columnNumber: 11\n      }\n    }, \"This text should be CAPITALIZED.\"), React.createElement(Text, {\n      style: {\n        textTransform: 'capitalize'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1130,\n        columnNumber: 11\n      }\n    }, \"Mixed: \", React.createElement(Text, {\n      style: {\n        textTransform: 'uppercase'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1131,\n        columnNumber: 20\n      }\n    }, \"uppercase \"), React.createElement(Text, {\n      style: {\n        textTransform: 'lowercase'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1132,\n        columnNumber: 13\n      }\n    }, \"LoWeRcAsE \"), React.createElement(Text, {\n      style: {\n        textTransform: 'capitalize'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1133,\n        columnNumber: 13\n      }\n    }, \"capitalize each word\")), React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1137,\n        columnNumber: 11\n      }\n    }, \"Should be \\\"ABC\\\":\", React.createElement(Text, {\n      style: {\n        textTransform: 'uppercase'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1139,\n        columnNumber: 13\n      }\n    }, \"a\", React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1140,\n        columnNumber: 16\n      }\n    }, \"b\"), \"c\")), React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1143,\n        columnNumber: 11\n      }\n    }, \"Should be \\\"AbC\\\":\", React.createElement(Text, {\n      style: {\n        textTransform: 'uppercase'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1145,\n        columnNumber: 13\n      }\n    }, \"a\", React.createElement(Text, {\n      style: {\n        textTransform: 'none'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1146,\n        columnNumber: 16\n      }\n    }, \"b\"), \"c\")));\n  }\n}];","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/RNTester/js/examples/Text/TextExample.ios.js"],"names":["React","require","TextAncestor","TextInlineView","TextLegend","InlineView","props","TextAlignRTLExample","args","state","isRTL","toggleRTL","setState","direction","textAlign","Component","Entity","fontWeight","color","children","AttributeToggler","fontSize","toggleWeight","increaseSize","curStyle","backgroundColor","marginTop","AdjustingFontSize","dynamicText","shouldRender","reset","LayoutAnimation","easeInEaseOut","setTimeout","addText","Math","floor","random","removeText","slice","length","marginVertical","maxHeight","flexDirection","justifyContent","TextBaseLineLayoutExample","texts","i","push","marker","width","height","subtitleStyle","alignItems","margin","padding","TextRenderInfoExample","textMetrics","x","y","capHeight","descender","ascender","xHeight","numberOfTextBlocks","topOfBox","position","left","top","ceil","event","lines","nativeEvent","Array","fill","join","TextWithCapBaseBox","marginBottom","style","exports","title","description","displayName","examples","render","substring","fontFamily","Platform","isTV","fontStyle","textDecorationLine","textDecorationStyle","textDecorationColor","opacity","letterSpacing","lineHeight","textShadowOffset","textShadowRadius","textShadowColor","fontVariant","borderColor","borderWidth","textTransform"],"mappings":"AAUA;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMC,YAAY,GAAGD,OAAO,2CAA5B;;AACA,IAAME,cAAc,GAAGF,OAAO,mCAA9B;;AACA,IAAMG,UAAU,GAAGH,OAAO,+BAA1B;;;;;;;;;;;;;;AAcA,SAASI,UAAT,CAAoBC,KAApB,EAA2B;AACzB,SACE,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD,eAAUA,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CADF;AAKD;;IAMKC,mB;;;;;AACJ,iCAA+B;AAAA;;AAAA;;AAAA,sCAAhBC,IAAgB;AAAhBA,MAAAA,IAAgB;AAAA;;AAC7B,oDAASA,IAAT;AAEA,UAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE;AADI,KAAb;AAH6B;AAM9B;;;;WAED,kBAAS;AAAA;;AAAA,UACAA,KADA,GACS,KAAKD,KADd,CACAC,KADA;;AAEP,UAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA,eAAM,MAAI,CAACC,QAAL,CAAc;AAACF,UAAAA,KAAK,EAAE,CAACA;AAAT,SAAd,CAAN;AAAA,OAAlB;;AACA,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACG,UAAAA,SAAS,EAAEH,KAAK,GAAG,KAAH,GAAW;AAA5B,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCADF,EAEE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,uDACC,wEAFJ,CAFF,EAME,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACI,UAAAA,SAAS,EAAE;AAAZ,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sFANF,EAUE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACA,UAAAA,SAAS,EAAE;AAAZ,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wFAVF,EAcE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACA,UAAAA,SAAS,EAAE;AAAZ,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yFAdF,EAkBE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACA,UAAAA,SAAS,EAAE;AAAZ,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAC+B,GAD/B,kKAlBF,EAuBE,oBAAC,MAAD;AACE,QAAA,OAAO,EAAEH,SADX;AAEE,QAAA,KAAK,kBAAeD,KAAK,GAAG,KAAH,GAAW,KAA/B,CAFP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAvBF,CADF;AA8BD;;;;EA1C+BV,KAAK,CAACe,S;;IA6ClCC,M;;;;;;;;;;;;;WACJ,kBAAS;AACP,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACC,UAAAA,UAAU,EAAE,KAAb;AAAoBC,UAAAA,KAAK,EAAE;AAA3B,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKZ,KAAL,CAAWa,QADd,CADF;AAKD;;;;EAPkBnB,KAAK,CAACe,S;;IAUrBK,gB;;;;;;;;;;;;;;;WACJX,K,GAAQ;AAACQ,MAAAA,UAAU,EAAE,MAAb;AAAqBI,MAAAA,QAAQ,EAAE;AAA/B,K;;WAERC,Y,GAAe,YAAM;AACnB,aAAKV,QAAL,CAAc;AACZK,QAAAA,UAAU,EAAE,OAAKR,KAAL,CAAWQ,UAAX,KAA0B,MAA1B,GAAmC,QAAnC,GAA8C;AAD9C,OAAd;AAGD,K;;WAEDM,Y,GAAe,YAAM;AACnB,aAAKX,QAAL,CAAc;AACZS,QAAAA,QAAQ,EAAE,OAAKZ,KAAL,CAAWY,QAAX,GAAsB;AADpB,OAAd;AAGD,K;;;;;;;WAED,kBAAS;AACP,UAAMG,QAAQ,GAAG;AACfP,QAAAA,UAAU,EAAE,KAAKR,KAAL,CAAWQ,UADR;AAEfI,QAAAA,QAAQ,EAAE,KAAKZ,KAAL,CAAWY;AAFN,OAAjB;AAIA,aACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEG,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wDADF,EAIE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAC+B,GAD/B,EAEE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEA,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAFF,CADF,CAJF,EAUE,oBAAC,IAAD;AACE,QAAA,KAAK,EAAE;AAACC,UAAAA,eAAe,EAAE,SAAlB;AAA6BC,UAAAA,SAAS,EAAE;AAAxC,SADT;AAEE,QAAA,OAAO,EAAE,KAAKJ,YAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAVF,EAeE,oBAAC,IAAD;AACE,QAAA,KAAK,EAAE;AAACG,UAAAA,eAAe,EAAE,SAAlB;AAA6BC,UAAAA,SAAS,EAAE;AAAxC,SADT;AAEE,QAAA,OAAO,EAAE,KAAKH,YAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAfF,CADF;AAuBD;;;;EA3C4BvB,KAAK,CAACe,S;;IAqD/BY,iB;;;;;;;;;;;;;;;WAIJlB,K,GAAQ;AACNmB,MAAAA,WAAW,EAAE,EADP;AAENC,MAAAA,YAAY,EAAE;AAFR,K;;WAKRC,K,GAAQ,YAAM;AACZC,MAAAA,eAAe,CAACC,aAAhB;;AACA,aAAKpB,QAAL,CAAc;AACZiB,QAAAA,YAAY,EAAE;AADF,OAAd;;AAGAI,MAAAA,UAAU,CAAC,YAAM;AACfF,QAAAA,eAAe,CAACC,aAAhB;;AACA,eAAKpB,QAAL,CAAc;AACZgB,UAAAA,WAAW,EAAE,EADD;AAEZC,UAAAA,YAAY,EAAE;AAFF,SAAd;AAID,OANS,EAMP,GANO,CAAV;AAOD,K;;WAEDK,O,GAAU,YAAM;AACd,aAAKtB,QAAL,CAAc;AACZgB,QAAAA,WAAW,EACT,OAAKnB,KAAL,CAAWmB,WAAX,IACCO,IAAI,CAACC,KAAL,CAAYD,IAAI,CAACE,MAAL,KAAgB,EAAjB,GAAuB,CAAlC,IAAuC,MAAvC,GAAgD,MADjD;AAFU,OAAd;AAKD,K;;WAEDC,U,GAAa,YAAM;AACjB,aAAK1B,QAAL,CAAc;AACZgB,QAAAA,WAAW,EAAE,OAAKnB,KAAL,CAAWmB,WAAX,CAAuBW,KAAvB,CACX,CADW,EAEX,OAAK9B,KAAL,CAAWmB,WAAX,CAAuBY,MAAvB,GAAgC,CAFrB;AADD,OAAd;AAMD,K;;;;;;;WAED,kBAAS;AACP,UAAI,CAAC,KAAK/B,KAAL,CAAWoB,YAAhB,EAA8B;AAC5B,eAAO,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;AACD,aACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AACE,QAAA,aAAa,EAAC,MADhB;AAEE,QAAA,aAAa,EAAE,CAFjB;AAGE,QAAA,KAAK,EAAE;AAACR,UAAAA,QAAQ,EAAE,EAAX;AAAeoB,UAAAA,cAAc,EAAE;AAA/B,SAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCADF,EAOE,oBAAC,IAAD;AACE,QAAA,aAAa,EAAE,CADjB;AAEE,QAAA,oBAAoB,EAAE,IAFxB;AAGE,QAAA,KAAK,EAAE;AAACpB,UAAAA,QAAQ,EAAE,EAAX;AAAeoB,UAAAA,cAAc,EAAE;AAA/B,SAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4DAPF,EAcE,oBAAC,IAAD;AACE,QAAA,oBAAoB,EAAE,IADxB;AAEE,QAAA,aAAa,EAAE,CAFjB;AAGE,QAAA,KAAK,EAAE;AAACpB,UAAAA,QAAQ,EAAE,EAAX;AAAeoB,UAAAA,cAAc,EAAE;AAA/B,SAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIG,uCAAuC,GAAvC,GAA6C,KAAKhC,KAAL,CAAWmB,WAJ3D,CAdF,EAqBE,oBAAC,IAAD;AACE,QAAA,oBAAoB,EAAE,IADxB;AAEE,QAAA,aAAa,EAAE,CAFjB;AAGE,QAAA,KAAK,EAAE;AAACP,UAAAA,QAAQ,EAAE,EAAX;AAAeoB,UAAAA,cAAc,EAAE;AAA/B,SAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIG,8LACC,GADD,GAEC,KAAKhC,KAAL,CAAWmB,WANf,CArBF,EA8BE,oBAAC,IAAD;AACE,QAAA,oBAAoB,EAAE,IADxB;AAEE,QAAA,KAAK,EAAE;AAACP,UAAAA,QAAQ,EAAE,EAAX;AAAeoB,UAAAA,cAAc,EAAE,CAA/B;AAAkCC,UAAAA,SAAS,EAAE;AAA7C,SAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAGG,qKACC,GADD,GAEC,KAAKjC,KAAL,CAAWmB,WALf,CA9BF,EAsCE,oBAAC,IAAD;AACE,QAAA,oBAAoB,EAAE,IADxB;AAEE,QAAA,aAAa,EAAE,CAFjB;AAGE,QAAA,KAAK,EAAE;AAACa,UAAAA,cAAc,EAAE;AAAjB,SAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACpB,UAAAA,QAAQ,EAAE;AAAX,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,0DADH,CAJF,EAOE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACA,UAAAA,QAAQ,EAAE;AAAX,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,iBAAiB,KAAKZ,KAAL,CAAWmB,WAD/B,CAPF,CAtCF,EAkDE,oBAAC,IAAD;AACE,QAAA,KAAK,EAAE;AACLe,UAAAA,aAAa,EAAE,KADV;AAELC,UAAAA,cAAc,EAAE,cAFX;AAGLlB,UAAAA,SAAS,EAAE,CAHN;AAILe,UAAAA,cAAc,EAAE;AAJX,SADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAChB,UAAAA,eAAe,EAAE;AAAlB,SAAb;AAA2C,QAAA,OAAO,EAAE,KAAKK,KAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAPF,EAUE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACL,UAAAA,eAAe,EAAE;AAAlB,SAAb;AAA2C,QAAA,OAAO,EAAE,KAAKa,UAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAVF,EAaE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACb,UAAAA,eAAe,EAAE;AAAlB,SAAb;AAA2C,QAAA,OAAO,EAAE,KAAKS,OAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAbF,CAlDF,CADF;AAsED;;;;EAlH6BlC,KAAK,CAACe,S;;IAqHhC8B,yB;;;;;;;;;;;;;WACJ,kBAAS;AACP,UAAMC,KAAK,GAAG,EAAd;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3BD,QAAAA,KAAK,CAACE,IAAN,CACE,oBAAC,IAAD;AAAM,UAAA,GAAG,EAAED,CAAX;AAAc,UAAA,KAAK,EAAE;AAAC1B,YAAAA,QAAQ,EAAE,IAAI0B,CAAC,GAAG,CAAnB;AAAsBtB,YAAAA,eAAe,EAAE;AAAvC,WAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGsB,CADH,CADF;AAKD;;AAED,UAAME,MAAM,GACV,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACC,UAAAA,KAAK,EAAE,EAAR;AAAYC,UAAAA,MAAM,EAAE,EAApB;AAAwB1B,UAAAA,eAAe,EAAE;AAAzC,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAGA,UAAM2B,aAAa,GAAG;AAAC/B,QAAAA,QAAQ,EAAE,EAAX;AAAeK,QAAAA,SAAS,EAAE,CAA1B;AAA6BT,QAAAA,UAAU,EAAE;AAAzC,OAAtB;AAEA,aACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEmC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA6B,kBAA7B,CADF,EAEE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACT,UAAAA,aAAa,EAAE,KAAhB;AAAuBU,UAAAA,UAAU,EAAE;AAAnC,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGJ,MADH,EAEE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAOH,KAAP,CAFF,EAGGG,MAHH,CAFF,EAQE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEG,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA6B,8BAA7B,CARF,EASE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACT,UAAAA,aAAa,EAAE,KAAhB;AAAuBU,UAAAA,UAAU,EAAE;AAAnC,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGJ,MADH,EAEGH,KAFH,EAGGG,MAHH,CATF,EAkBE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEG,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA6B,iCAA7B,CAlBF,EAmBE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACT,UAAAA,aAAa,EAAE,KAAhB;AAAuBU,UAAAA,UAAU,EAAE;AAAnC,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGJ,MADH,EAEE,oBAAC,IAAD;AAAM,QAAA,UAAU,EAAE,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEE,oBAAC,IAAD;AACE,QAAA,KAAK,EAAE;AACLN,UAAAA,aAAa,EAAE,KADV;AAELU,UAAAA,UAAU,EAAE,UAFP;AAGL5B,UAAAA,eAAe,EAAE;AAHZ,SADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAMGwB,MANH,EAOE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAPF,EAQGA,MARH,CAFF,CAFF,EAeGA,MAfH,CAnBF,EAqCE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEG,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,2CADH,CArCF,EAwCE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACT,UAAAA,aAAa,EAAE,KAAhB;AAAuBU,UAAAA,UAAU,EAAE;AAAnC,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,UAAU,EAAE,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uFAEa,GAFb,EAGE,oBAAC,IAAD;AACE,QAAA,KAAK,EAAE;AACL5B,UAAAA,eAAe,EAAE;AADZ,SADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAJF,CAHF,EAQU,GARV,wDADF,CAxCF,EAsDE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE2B,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA6B,eAA7B,CAtDF,EAuDE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACT,UAAAA,aAAa,EAAE,KAAhB;AAAuBU,UAAAA,UAAU,EAAE;AAAnC,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGJ,MADH,EAEE,oBAAC,SAAD;AAAW,QAAA,KAAK,EAAE;AAACK,UAAAA,MAAM,EAAE,CAAT;AAAYC,UAAAA,OAAO,EAAE;AAArB,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA4CT,KAA5C,CAFF,EAGGG,MAHH,CAvDF,EA6DE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEG,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA6B,yBAA7B,CA7DF,EA8DE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACT,UAAAA,aAAa,EAAE,KAAhB;AAAuBU,UAAAA,UAAU,EAAE;AAAnC,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGJ,MADH,EAEE,oBAAC,SAAD;AAAW,QAAA,SAAS,EAAE,IAAtB;AAA4B,QAAA,KAAK,EAAE;AAACK,UAAAA,MAAM,EAAE,CAAT;AAAYC,UAAAA,OAAO,EAAE;AAArB,SAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGT,KADH,CAFF,EAKGG,MALH,CA9DF,CADF;AAwED;;;;EAxFqCjD,KAAK,CAACe,S;;IA2FxCyC,qB;;;;;;;;;;;;;;;WACJ/C,K,GAAQ;AACNgD,MAAAA,WAAW,EAAE;AACXC,QAAAA,CAAC,EAAE,CADQ;AAEXC,QAAAA,CAAC,EAAE,CAFQ;AAGXT,QAAAA,KAAK,EAAE,CAHI;AAIXC,QAAAA,MAAM,EAAE,CAJG;AAKXS,QAAAA,SAAS,EAAE,CALA;AAMXC,QAAAA,SAAS,EAAE,CANA;AAOXC,QAAAA,QAAQ,EAAE,CAPC;AAQXC,QAAAA,OAAO,EAAE;AARE,OADP;AAWNC,MAAAA,kBAAkB,EAAE,CAXd;AAYN3C,MAAAA,QAAQ,EAAE;AAZJ,K;;;;;;WAeR,kBAAS;AAAA;;AACP,UAAM4C,QAAQ,GACZ,KAAKxD,KAAL,CAAWgD,WAAX,CAAuBE,CAAvB,GACA,KAAKlD,KAAL,CAAWgD,WAAX,CAAuBN,MADvB,IAEC,KAAK1C,KAAL,CAAWgD,WAAX,CAAuBI,SAAvB,GAAmC,KAAKpD,KAAL,CAAWgD,WAAX,CAAuBG,SAF3D,CADF;AAIA,aACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AACE,QAAA,KAAK,EAAE;AACLM,UAAAA,QAAQ,EAAE,UADL;AAELC,UAAAA,IAAI,EAAE,KAAK1D,KAAL,CAAWgD,WAAX,CAAuBC,CAAvB,GAA2B,KAAKjD,KAAL,CAAWgD,WAAX,CAAuBP,KAFnD;AAGLkB,UAAAA,GAAG,EAAEH,QAHA;AAILf,UAAAA,KAAK,EAAE,CAJF;AAKLC,UAAAA,MAAM,EAAEhB,IAAI,CAACkC,IAAL,CACN,KAAK5D,KAAL,CAAWgD,WAAX,CAAuBG,SAAvB,GACE,KAAKnD,KAAL,CAAWgD,WAAX,CAAuBM,OAFnB,CALH;AASLtC,UAAAA,eAAe,EAAE;AATZ,SADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAcE,oBAAC,IAAD;AACE,QAAA,KAAK,EAAE;AACLyC,UAAAA,QAAQ,EAAE,UADL;AAELC,UAAAA,IAAI,EAAE,KAAK1D,KAAL,CAAWgD,WAAX,CAAuBC,CAAvB,GAA2B,KAAKjD,KAAL,CAAWgD,WAAX,CAAuBP,KAFnD;AAGLkB,UAAAA,GAAG,EACDH,QAAQ,IACP,KAAKxD,KAAL,CAAWgD,WAAX,CAAuBG,SAAvB,GACC,KAAKnD,KAAL,CAAWgD,WAAX,CAAuBM,OAFjB,CAJL;AAOLb,UAAAA,KAAK,EAAE,CAPF;AAQLC,UAAAA,MAAM,EAAEhB,IAAI,CAACkC,IAAL,CAAU,KAAK5D,KAAL,CAAWgD,WAAX,CAAuBM,OAAjC,CARH;AASLtC,UAAAA,eAAe,EAAE;AATZ,SADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAdF,EA2BE,oBAAC,IAAD;AACE,QAAA,KAAK,EAAE;AAACJ,UAAAA,QAAQ,EAAE,KAAKZ,KAAL,CAAWY;AAAtB,SADT;AAEE,QAAA,YAAY,EAAE,sBAAAiD,KAAK,EAAI;AAAA,cACdC,KADc,GACLD,KAAK,CAACE,WADD,CACdD,KADc;;AAErB,cAAIA,KAAK,CAAC/B,MAAN,GAAe,CAAnB,EAAsB;AACpB,YAAA,MAAI,CAAC5B,QAAL,CAAc;AAAC6C,cAAAA,WAAW,EAAEc,KAAK,CAACA,KAAK,CAAC/B,MAAN,GAAe,CAAhB;AAAnB,aAAd;AACD;AACF,SAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAQG,IAAIiC,KAAJ,CAAU,KAAKhE,KAAL,CAAWuD,kBAArB,EACEU,IADF,CACO,uBADP,EAEEC,IAFF,CAEO,GAFP,CARH,CA3BF,CADF,EAyCE,oBAAC,IAAD;AACE,QAAA,OAAO,EAAE;AAAA,iBACP,MAAI,CAAC/D,QAAL,CAAc;AACZoD,YAAAA,kBAAkB,EAAE,MAAI,CAACvD,KAAL,CAAWuD,kBAAX,GAAgC;AADxC,WAAd,CADO;AAAA,SADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAzCF,EAiDE,oBAAC,IAAD;AACE,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACpD,QAAL,CAAc;AAACS,YAAAA,QAAQ,EAAE,MAAI,CAACZ,KAAL,CAAWY,QAAX,GAAsB;AAAjC,WAAd,CAAN;AAAA,SADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAjDF,EAqDE,oBAAC,IAAD;AACE,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACT,QAAL,CAAc;AAACS,YAAAA,QAAQ,EAAE,MAAI,CAACZ,KAAL,CAAWY,QAAX,GAAsB;AAAjC,WAAd,CAAN;AAAA,SADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBArDF,CADF;AA4DD;;;;EAjFiCrB,KAAK,CAACe,S;;IAoFpC6D,kB;;;;;;;;;;;;;;;WACJnE,K,GAAQ;AACNgD,MAAAA,WAAW,EAAE;AACXC,QAAAA,CAAC,EAAE,CADQ;AAEXC,QAAAA,CAAC,EAAE,CAFQ;AAGXT,QAAAA,KAAK,EAAE,CAHI;AAIXC,QAAAA,MAAM,EAAE,CAJG;AAKXS,QAAAA,SAAS,EAAE,CALA;AAMXC,QAAAA,SAAS,EAAE,CANA;AAOXC,QAAAA,QAAQ,EAAE,CAPC;AAQXC,QAAAA,OAAO,EAAE;AARE;AADP,K;;;;;;WAYR,kBAAS;AAAA;;AACP,aACE,oBAAC,IAAD;AACE,QAAA,YAAY,EAAE,sBAAAO,KAAK,EAAI;AAAA,cACdC,KADc,GACLD,KAAK,CAACE,WADD,CACdD,KADc;;AAErB,cAAIA,KAAK,CAAC/B,MAAN,GAAe,CAAnB,EAAsB;AACpB,YAAA,MAAI,CAAC5B,QAAL,CAAc;AAAC6C,cAAAA,WAAW,EAAEc,KAAK,CAAC,CAAD;AAAnB,aAAd;AACD;AACF,SANH;AAOE,QAAA,KAAK,EAAE,CACL;AACE7C,UAAAA,SAAS,EAAES,IAAI,CAACkC,IAAL,CACT,EACE,KAAK5D,KAAL,CAAWgD,WAAX,CAAuBK,QAAvB,GACA,KAAKrD,KAAL,CAAWgD,WAAX,CAAuBG,SAFzB,CADS,CADb;AAOEiB,UAAAA,YAAY,EAAE1C,IAAI,CAACkC,IAAL,CAAU,CAAC,KAAK5D,KAAL,CAAWgD,WAAX,CAAuBI,SAAlC;AAPhB,SADK,EAUL,KAAKvD,KAAL,CAAWwE,KAVN,CAPT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAmBG,KAAKxE,KAAL,CAAWa,QAnBd,CADF;AAuBD;;;;EArC8BnB,KAAK,CAACe,S;;AAwCvCgE,OAAO,CAACC,KAAR,GAAgB,QAAhB;AACAD,OAAO,CAACE,WAAR,GAAsB,2CAAtB;AACAF,OAAO,CAACG,WAAR,GAAsB,aAAtB;AACAH,OAAO,CAACI,QAAR,GAAmB,CACjB;AACEH,EAAAA,KAAK,EAAE,MADT;AAEEI,EAAAA,MAAM,EAAE,kBAAuB;AAC7B,WACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iGADF;AAMD;AATH,CADiB,EAYjB;AACEJ,EAAAA,KAAK,EAAE,0CADT;AAEEI,EAAAA,MAAM,EAAE,kBAAuB;AAC7B,WAAO,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAO,SAASC,SAAT,CAAmB,CAAnB,EAAsB,CAAtB,CAAP,CAAP;AACD;AAJH,CAZiB,EAkBjB;AACEL,EAAAA,KAAK,EAAE,8BADT;AAEEI,EAAAA,MAAM,EAAE,kBAAuB;AAC7B,WACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAC3D,QAAAA,eAAe,EAAE,WAAlB;AAA+B8B,QAAAA,OAAO,EAAE;AAAxC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAEE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAC9B,QAAAA,eAAe,EAAE;AAAlB,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4EAFF,CADF;AAQD;AAXH,CAlBiB,EA+BjB;AACEuD,EAAAA,KAAK,EAAE,cADT;AAEEI,EAAAA,MAAM,EAAE,kBAAuB;AAC7B,WAAO,oBAAC,qBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;AAJH,CA/BiB,EAqCjB;AACEJ,EAAAA,KAAK,EAAE,qBADT;AAEEI,EAAAA,MAAM,EAAE;AAAA,WAAkB,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAlB;AAAA;AAFV,CArCiB,EAyCjB;AACEJ,EAAAA,KAAK,EAAE,wBADT;AAEEI,EAAAA,MAAM,EAAE;AAAA,WACN,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAC3D,QAAAA,eAAe,EAAE;AAAlB,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADF,CADM;AAAA;AAFV,CAzCiB,EAiDjB;AACEuD,EAAAA,KAAK,EAAE,SADT;AAEEI,EAAAA,MAAM,EAAE,kBAAuB;AAC7B,WACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAC7B,QAAAA,OAAO,EAAE;AAAV,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6DADF;AAKD;AARH,CAjDiB,EA2DjB;AACEyB,EAAAA,KAAK,EAAE,aADT;AAEEI,EAAAA,MAAM,EAAE,kBAAuB;AAC7B,WACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACE,QAAAA,UAAU,EAAEC,QAAQ,CAACC,IAAT,GAAgB,OAAhB,GAA0B;AAAvC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAIE,oBAAC,IAAD;AACE,MAAA,KAAK,EAAE;AACLF,QAAAA,UAAU,EAAEC,QAAQ,CAACC,IAAT,GAAgB,OAAhB,GAA0B,QADjC;AAELvE,QAAAA,UAAU,EAAE;AAFP,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAJF,EAWE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACqE,QAAAA,UAAU,EAAE;AAAb,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAXF,EAYE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACA,QAAAA,UAAU,EAAE,WAAb;AAA0BrE,QAAAA,UAAU,EAAE;AAAtC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAZF,EAeE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACqE,QAAAA,UAAU,EAAEC,QAAQ,CAACC,IAAT,GAAgB,SAAhB,GAA4B;AAAzC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAfF,EAkBE,oBAAC,IAAD;AACE,MAAA,KAAK,EAAE;AACLF,QAAAA,UAAU,EAAEC,QAAQ,CAACC,IAAT,GAAgB,SAAhB,GAA4B,SADnC;AAELvE,QAAAA,UAAU,EAAE;AAFP,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAlBF,CADF;AA4BD;AA/BH,CA3DiB,EA4FjB;AACE+D,EAAAA,KAAK,EAAE,WADT;AAEEI,EAAAA,MAAM,EAAE,kBAAuB;AAC7B,WACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAC/D,QAAAA,QAAQ,EAAE;AAAX,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAEE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACA,QAAAA,QAAQ,EAAE;AAAX,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,CADF;AAMD;AATH,CA5FiB,EAuGjB;AACE2D,EAAAA,KAAK,EAAE,OADT;AAEEI,EAAAA,MAAM,EAAE,kBAAuB;AAC7B,WACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAClE,QAAAA,KAAK,EAAE;AAAR,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACA,QAAAA,KAAK,EAAE;AAAR,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF,CADF;AAMD;AATH,CAvGiB,EAkHjB;AACE8D,EAAAA,KAAK,EAAE,aADT;AAEEI,EAAAA,MAAM,EAAE,kBAAuB;AAC7B,WACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAC/D,QAAAA,QAAQ,EAAE,EAAX;AAAeJ,QAAAA,UAAU,EAAE;AAA3B,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCADF,EAIE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACI,QAAAA,QAAQ,EAAE,EAAX;AAAeJ,QAAAA,UAAU,EAAE;AAA3B,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAJF,EAOE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACI,QAAAA,QAAQ,EAAE,EAAX;AAAeJ,QAAAA,UAAU,EAAE;AAA3B,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAPF,EAUE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACI,QAAAA,QAAQ,EAAE,EAAX;AAAeJ,QAAAA,UAAU,EAAE;AAA3B,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAVF,EAaE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACI,QAAAA,QAAQ,EAAE,EAAX;AAAeJ,QAAAA,UAAU,EAAE;AAA3B,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAbF,CADF;AAmBD;AAtBH,CAlHiB,EA0IjB;AACE+D,EAAAA,KAAK,EAAE,YADT;AAEEI,EAAAA,MAAM,EAAE,kBAAuB;AAC7B,WACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACK,QAAAA,SAAS,EAAE;AAAZ,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACA,QAAAA,SAAS,EAAE;AAAZ,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFF,CADF;AAMD;AATH,CA1IiB,EAqJjB;AACET,EAAAA,KAAK,EAAE,YADT;AAEEI,EAAAA,MAAM,EAAE,kBAAuB;AAC7B,WACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,UAAU,EAAE,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACe,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACnE,QAAAA,UAAU,EAAE;AAAb,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADf,4BADF,CADF;AAQD;AAXH,CArJiB,EAkKjB;AACE+D,EAAAA,KAAK,EAAE,iBADT;AAEEI,EAAAA,MAAM,EAAE,kBAAuB;AAC7B,WACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AACE,MAAA,KAAK,EAAE;AACLM,QAAAA,kBAAkB,EAAE,WADf;AAELC,QAAAA,mBAAmB,EAAE;AAFhB,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,EAQE,oBAAC,IAAD;AACE,MAAA,KAAK,EAAE;AACLD,QAAAA,kBAAkB,EAAE,WADf;AAELC,QAAAA,mBAAmB,EAAE,QAFhB;AAGLC,QAAAA,mBAAmB,EAAE;AAHhB,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CARF,EAgBE,oBAAC,IAAD;AACE,MAAA,KAAK,EAAE;AACLF,QAAAA,kBAAkB,EAAE,WADf;AAELC,QAAAA,mBAAmB,EAAE,QAFhB;AAGLC,QAAAA,mBAAmB,EAAE;AAHhB,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAhBF,EAwBE,oBAAC,IAAD;AACE,MAAA,KAAK,EAAE;AACLF,QAAAA,kBAAkB,EAAE,WADf;AAELC,QAAAA,mBAAmB,EAAE,QAFhB;AAGLC,QAAAA,mBAAmB,EAAE;AAHhB,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAxBF,EAgCE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACF,QAAAA,kBAAkB,EAAE;AAArB,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAhCF,EAiCE,oBAAC,IAAD;AACE,MAAA,KAAK,EAAE;AACLA,QAAAA,kBAAkB,EAAE,cADf;AAELC,QAAAA,mBAAmB,EAAE;AAFhB,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAjCF,EAwCE,oBAAC,IAAD;AACE,MAAA,KAAK,EAAE;AACLD,QAAAA,kBAAkB,EAAE,cADf;AAELC,QAAAA,mBAAmB,EAAE,QAFhB;AAGLC,QAAAA,mBAAmB,EAAE;AAHhB,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAxCF,EAgDE,oBAAC,IAAD;AACE,MAAA,KAAK,EAAE;AACLF,QAAAA,kBAAkB,EAAE,cADf;AAELC,QAAAA,mBAAmB,EAAE,QAFhB;AAGLC,QAAAA,mBAAmB,EAAE;AAHhB,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAhDF,EAwDE,oBAAC,IAAD;AACE,MAAA,KAAK,EAAE;AACLF,QAAAA,kBAAkB,EAAE,cADf;AAELC,QAAAA,mBAAmB,EAAE,QAFhB;AAGLC,QAAAA,mBAAmB,EAAE;AAHhB,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAxDF,EAgEE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACF,QAAAA,kBAAkB,EAAE;AAArB,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAhEF,CADF;AAsED;AAzEH,CAlKiB,EA6OjB;AACEV,EAAAA,KAAK,EAAE,QADT;AAEEC,EAAAA,WAAW,EAAG,6DACZ,sEADY,GAEZ,uEAJJ;AAKEG,EAAAA,MAAM,EAAE,kBAAuB;AAC7B,WACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAEE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACnE,QAAAA,UAAU,EAAE;AAAb,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACI,QAAAA,QAAQ,EAAE,EAAX;AAAeH,QAAAA,KAAK,EAAE;AAAtB,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCAFF,MAFF,MADF,EAYE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAC2E,QAAAA,OAAO,EAAE;AAAV,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAEE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACA,QAAAA,OAAO,EAAE;AAAV,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAEE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACpE,QAAAA,eAAe,EAAE;AAAlB,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CAFF,MAFF,MAFF,MAZF,EA2BE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACJ,QAAAA,QAAQ,EAAE;AAAX,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,CA3BF,CADF;AAiCD;AAvCH,CA7OiB,EAsRjB;AACE2D,EAAAA,KAAK,EAAE,YADT;AAEEI,EAAAA,MAAM,EAAE,kBAAuB;AAC7B,WACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCADF,EAEE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,uDACC,qEADD,GAEC,KAHJ,CAFF,EAOE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACtE,QAAAA,SAAS,EAAE;AAAZ,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oFAPF,EAWE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACA,QAAAA,SAAS,EAAE;AAAZ,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sFAXF,EAeE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACA,QAAAA,SAAS,EAAE;AAAZ,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uFAfF,EAmBE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACA,QAAAA,SAAS,EAAE;AAAZ,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAC+B,GAD/B,kKAnBF,CADF;AA2BD;AA9BH,CAtRiB,EAsTjB;AACEkE,EAAAA,KAAK,EAAE,gBADT;AAEEI,EAAAA,MAAM,EAAE,kBAAuB;AAC7B,WACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACU,QAAAA,aAAa,EAAE;AAAhB,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,EAEE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACA,QAAAA,aAAa,EAAE,CAAhB;AAAmBpE,QAAAA,SAAS,EAAE;AAA9B,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAFF,EAKE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACoE,QAAAA,aAAa,EAAE,CAAhB;AAAmBpE,QAAAA,SAAS,EAAE;AAA9B,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BALF,EAQE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACiB,QAAAA,aAAa,EAAE;AAAhB,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AACE,MAAA,KAAK,EAAE;AACLtB,QAAAA,QAAQ,EAAE,EADL;AAELyE,QAAAA,aAAa,EAAE,CAFV;AAGLrE,QAAAA,eAAe,EAAE,SAHZ;AAILC,QAAAA,SAAS,EAAE;AAJN,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCADF,CARF,EAmBE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACoE,QAAAA,aAAa,EAAE,CAAC,CAAjB;AAAoBpE,QAAAA,SAAS,EAAE;AAA/B,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAnBF,EAsBE,oBAAC,IAAD;AACE,MAAA,KAAK,EAAE;AACLoE,QAAAA,aAAa,EAAE,CADV;AAELrE,QAAAA,eAAe,EAAE,SAFZ;AAGLC,QAAAA,SAAS,EAAE;AAHN,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAOE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACoE,QAAAA,aAAa,EAAE,CAAhB;AAAmBrE,QAAAA,eAAe,EAAE;AAApC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAPF,EAUE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACqE,QAAAA,aAAa,EAAE,CAAhB;AAAmBrE,QAAAA,eAAe,EAAE;AAApC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAVF,CAtBF,CADF;AAuCD;AA1CH,CAtTiB,EAkWjB;AACEuD,EAAAA,KAAK,EAAE,QADT;AAEEI,EAAAA,MAAM,EAAE,kBAAuB;AAC7B,WACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACK,WADL,OACmB,QADnB,kCADF;AAKD;AARH,CAlWiB,EA4WjB;AACEJ,EAAAA,KAAK,EAAE,aADT;AAEEI,EAAAA,MAAM,EAAE,kBAAuB;AAC7B,WACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACW,QAAAA,UAAU,EAAE;AAAb,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sFADF,CADF;AAQD;AAXH,CA5WiB,EAyXjB;AACEf,EAAAA,KAAK,EAAE,YADT;AAEEC,EAAAA,WAAW,EAAE,kDAFf;AAGEG,EAAAA,MAAM,EAAE,kBAAuB;AAC7B,WAAO,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;AALH,CAzXiB,EAgYjB;AACEJ,EAAAA,KAAK,EAAE,qBADT;AAEEI,EAAAA,MAAM,EAAE,kBAA+B;AACrC,WAAO,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;AAJH,CAhYiB,EAsYjB;AACEJ,EAAAA,KAAK,EAAE,2BADT;AAEEC,EAAAA,WAAW,EAAE,uDAFf;AAGEG,EAAAA,MAAM,EAAE,kBAAuB;AAC7B,WACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAC3D,QAAAA,eAAe,EAAE;AAAlB,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAEE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACA,QAAAA,eAAe,EAAE;AAAlB,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,GADH,qBAGE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACA,QAAAA,eAAe,EAAE;AAAlB,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,GADH,sBAGE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,GADH,gCAGE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACA,QAAAA,eAAe,EAAE;AAAlB,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,GADH,6BAHF,CAHF,CAHF,CAFF,CADF;AAqBD;AAzBH,CAtYiB,EAiajB;AACEuD,EAAAA,KAAK,EAAE,yBADT;AAEEI,EAAAA,MAAM,EAAE,kBAAuB;AAC7B,WACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,aAAa,EAAE,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sFAEc,GAFd,qCADF,EAKE,oBAAC,IAAD;AAAM,MAAA,aAAa,EAAE,CAArB;AAAwB,MAAA,KAAK,EAAE;AAAC1D,QAAAA,SAAS,EAAE;AAAZ,OAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uFAEc,GAFd,sCALF,EASE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACA,QAAAA,SAAS,EAAE;AAAZ,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6FAEmB,GAFnB,kCATF,CADF;AAgBD;AAnBH,CAjaiB,EAsbjB;AACEsD,EAAAA,KAAK,EAAE,mDADT;AAEEI,EAAAA,MAAM,EAAE,kBAAuB;AAC7B,WACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAC8B,GAD9B,EAEE,oBAAC,IAAD;AACE,MAAA,oBAAoB,EAAE,KADxB;AAEE,MAAA,KAAK,EAAE;AACL3D,QAAAA,eAAe,EAAE,OADZ;AAELiE,QAAAA,kBAAkB,EAAE,WAFf;AAGLxE,QAAAA,KAAK,EAAE;AAHF,OAFT;AAOE,MAAA,OAAO,EAAE;AAAA,eAAM,IAAN;AAAA,OAPX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+IAFF,EAaU,GAbV,0EADF,CADF;AAqBD;AAxBH,CAtbiB,EAgdjB;AACE8D,EAAAA,KAAK,EAAE,4BADT;AAEEI,EAAAA,MAAM,EAAE,kBAAuB;AAC7B,WACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2LAGiD,GAHjD,EAIE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACnE,QAAAA,UAAU,EAAE;AAAb,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yDAJF,CADF,EASE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACS,QAAAA,SAAS,EAAE;AAAZ,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sEAC8D,GAD9D,uBAEoB,GAFpB,WAE8B,IAF9B,WATF,EAaE,oBAAC,IAAD;AAAM,MAAA,gBAAgB,EAAE,KAAxB;AAA+B,MAAA,KAAK,EAAE;AAACA,QAAAA,SAAS,EAAE,EAAZ;AAAgBL,QAAAA,QAAQ,EAAE;AAA1B,OAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAC4B,GAD5B,EAEE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACA,QAAAA,QAAQ,EAAE;AAAX,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8FAFF,CAbF,CADF;AAuBD;AA1BH,CAhdiB,EA4ejB;AACE2D,EAAAA,KAAK,EAAE,cADT;AAEEI,EAAAA,MAAM,EAAE;AAAA,WAAkB,oBAAC,cAAD,CAAgB,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAlB;AAAA;AAFV,CA5eiB,EAgfjB;AACEJ,EAAAA,KAAK,EAAE,qCADT;AAEEI,EAAAA,MAAM,EAAE;AAAA,WAAkB,oBAAC,cAAD,CAAgB,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAlB;AAAA;AAFV,CAhfiB,EAofjB;AACEJ,EAAAA,KAAK,EAAE,uBADT;AAEEI,EAAAA,MAAM,EAAE;AAAA,WAAkB,oBAAC,cAAD,CAAgB,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAlB;AAAA;AAFV,CApfiB,EAwfjB;AACEJ,EAAAA,KAAK,EAAE,sBADT;AAEEI,EAAAA,MAAM,EAAE;AAAA,WAAkB,oBAAC,cAAD,CAAgB,cAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAlB;AAAA;AAFV,CAxfiB,EA4fjB;AACEJ,EAAAA,KAAK,EAAE,6BADT;AAEEI,EAAAA,MAAM,EAAE;AAAA,WAAkB,oBAAC,cAAD,CAAgB,mBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAlB;AAAA;AAFV,CA5fiB,EAggBjB;AACEJ,EAAAA,KAAK,EAAE,aADT;AAEEI,EAAAA,MAAM,EAAE,kBAAuB;AAC7B,WACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AACE,MAAA,KAAK,EAAE;AACL/D,QAAAA,QAAQ,EAAE,EADL;AAEL2E,QAAAA,gBAAgB,EAAE;AAAC9C,UAAAA,KAAK,EAAE,CAAR;AAAWC,UAAAA,MAAM,EAAE;AAAnB,SAFb;AAGL8C,QAAAA,gBAAgB,EAAE,CAHb;AAILC,QAAAA,eAAe,EAAE;AAJZ,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,CADF;AAaD;AAhBH,CAhgBiB,EAkhBjB;AACElB,EAAAA,KAAK,EAAE,gBADT;AAEEI,EAAAA,MAAM,EAAE,kBAAuB;AAC7B,WACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,aAAa,EAAE,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uEADF,EAIE,oBAAC,IAAD;AAAM,MAAA,aAAa,EAAC,QAApB;AAA6B,MAAA,aAAa,EAAE,CAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0EAJF,EAOE,oBAAC,IAAD;AAAM,MAAA,aAAa,EAAC,MAApB;AAA2B,MAAA,aAAa,EAAE,CAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6EAPF,EAUE,oBAAC,IAAD;AAAM,MAAA,aAAa,EAAC,MAApB;AAA2B,MAAA,aAAa,EAAE,CAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4EAVF,CADF;AAgBD;AAnBH,CAlhBiB,EAuiBjB;AACEJ,EAAAA,KAAK,EAAE,eADT;AAEEI,EAAAA,MAAM,EAAE,kBAAuB;AAC7B,WACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACe,QAAAA,WAAW,EAAE,CAAC,YAAD;AAAd,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAuD,IAAvD,CADF,EAEE,oBAAC,IAAD;AACE,MAAA,KAAK,EAAE;AACLb,QAAAA,UAAU,EAAEC,QAAQ,CAACC,IAAT,GAAgB,OAAhB,GAA0B,cADjC;AAELW,QAAAA,WAAW,EAAE,CAAC,eAAD;AAFR,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAK4B,IAL5B,CAFF,EASE,oBAAC,IAAD;AACE,MAAA,KAAK,EAAE;AACLb,QAAAA,UAAU,EAAEC,QAAQ,CAACC,IAAT,GAAgB,OAAhB,GAA0B,cADjC;AAELW,QAAAA,WAAW,EAAE,CAAC,aAAD;AAFR,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAKyB,IALzB,CATF,EAgBE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACA,QAAAA,WAAW,EAAE,CAAC,cAAD;AAAd,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACe,IADf,UAEO,IAFP,UAGO,IAHP,CAhBF,EAqBE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACA,QAAAA,WAAW,EAAE,CAAC,mBAAD;AAAd,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BACoB,IADpB,UAEO,IAFP,UAGO,IAHP,CArBF,CADF;AA6BD;AAhCH,CAviBiB,EAykBjB;AACEnB,EAAAA,KAAK,EAAE,gBADT;AAEEI,EAAAA,MAAM,EAAE,kBAAuB;AAI7B,WACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEE,oBAAC,UAAD;AAAY,MAAA,KAAK,EAAE;AAACgB,QAAAA,WAAW,EAAE,KAAd;AAAqBC,QAAAA,WAAW,EAAE;AAAlC,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACD,QAAAA,WAAW,EAAE,MAAd;AAAsBC,QAAAA,WAAW,EAAE;AAAnC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACD,QAAAA,WAAW,EAAE,OAAd;AAAuBC,QAAAA,WAAW,EAAE;AAApC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAFF,EAKE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACD,QAAAA,WAAW,EAAE,QAAd;AAAwBC,QAAAA,WAAW,EAAE;AAArC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAEE,oBAAC,UAAD;AAAY,MAAA,KAAK,EAAE;AAACD,QAAAA,WAAW,EAAE,KAAd;AAAqBC,QAAAA,WAAW,EAAE;AAAlC,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACD,QAAAA,WAAW,EAAE,MAAd;AAAsBC,QAAAA,WAAW,EAAE;AAAnC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCADF,CAFF,CALF,CAFF,kCADF;AAoBD;AA1BH,CAzkBiB,EAqmBjB;AACErB,EAAAA,KAAK,EAAE,8BADT;AAEEI,EAAAA,MAAM,EAAE,kBAA+B;AACrC,WAAO,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;AAJH,CArmBiB,EA2mBjB;AACEJ,EAAAA,KAAK,EAAE,qBADT;AAEEI,EAAAA,MAAM,EAAE,kBAAuB;AAC7B,WAAO,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;AAJH,CA3mBiB,EAinBjB;AACEJ,EAAAA,KAAK,EAAE,qCADT;AAEEI,EAAAA,MAAM,EAAE,kBAAuB;AAC7B,WAAO,oBAAC,yBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;AAJH,CAjnBiB,EAunBjB;AACEJ,EAAAA,KAAK,EAAE,WADT;AAEEI,EAAAA,MAAM,EAAE,kBAAuB;AAC7B,WACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACkB,QAAAA,aAAa,EAAE;AAAhB,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCADF,EAIE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACA,QAAAA,aAAa,EAAE;AAAhB,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAJF,EAOE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACA,QAAAA,aAAa,EAAE;AAAhB,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAPF,EAUE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACA,QAAAA,aAAa,EAAE;AAAhB,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACS,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACA,QAAAA,aAAa,EAAE;AAAhB,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADT,EAEE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACA,QAAAA,aAAa,EAAE;AAAhB,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF,EAGE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACA,QAAAA,aAAa,EAAE;AAAhB,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAHF,CAVF,EAiBE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAEE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACA,QAAAA,aAAa,EAAE;AAAhB,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YACG,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADH,MAFF,CAjBF,EAuBE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAEE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACA,QAAAA,aAAa,EAAE;AAAhB,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YACG,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACA,QAAAA,aAAa,EAAE;AAAhB,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADH,MAFF,CAvBF,CADF;AAgCD;AAnCH,CAvnBiB,CAAnB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst React = require('react');\nconst TextAncestor = require('../../../../Libraries/Text/TextAncestor');\nconst TextInlineView = require('../../components/TextInlineView');\nconst TextLegend = require('../../components/TextLegend');\n\nconst {\n  Button,\n  LayoutAnimation,\n  Platform,\n  Text,\n  TextInput,\n  View,\n} = require('react-native');\n\n// TODO: Is there a cleaner way to flip the TextAncestor value to false? I\n//   suspect apps won't even be able to leverage this workaround because\n//   TextAncestor is not public.\nfunction InlineView(props) {\n  return (\n    <TextAncestor.Provider value={false}>\n      <View {...props} />\n    </TextAncestor.Provider>\n  );\n}\n\ntype TextAlignExampleRTLState = {|\n  isRTL: boolean,\n|};\n\nclass TextAlignRTLExample extends React.Component<*, TextAlignExampleRTLState> {\n  constructor(...args: Array<*>) {\n    super(...args);\n\n    this.state = {\n      isRTL: false,\n    };\n  }\n\n  render() {\n    const {isRTL} = this.state;\n    const toggleRTL = () => this.setState({isRTL: !isRTL});\n    return (\n      <View style={{direction: isRTL ? 'rtl' : 'ltr'}}>\n        <Text>auto (default) - english LTR</Text>\n        <Text>\n          {'\\u0623\\u062D\\u0628 \\u0627\\u0644\\u0644\\u063A\\u0629 ' +\n            '\\u0627\\u0644\\u0639\\u0631\\u0628\\u064A\\u0629 auto (default) - arabic RTL'}\n        </Text>\n        <Text style={{textAlign: 'left'}}>\n          left left left left left left left left left left left left left left\n          left\n        </Text>\n        <Text style={{textAlign: 'center'}}>\n          center center center center center center center center center center\n          center\n        </Text>\n        <Text style={{textAlign: 'right'}}>\n          right right right right right right right right right right right\n          right right\n        </Text>\n        <Text style={{textAlign: 'justify'}}>\n          justify: this text component{\"'\"}s contents are laid out with\n          \"textAlign: justify\" and as you can see all of the lines except the\n          last one span the available width of the parent container.\n        </Text>\n        <Button\n          onPress={toggleRTL}\n          title={`Switch to ${isRTL ? 'LTR' : 'RTL'}`}\n        />\n      </View>\n    );\n  }\n}\n\nclass Entity extends React.Component<$FlowFixMeProps> {\n  render() {\n    return (\n      <Text style={{fontWeight: '500', color: '#527fe4'}}>\n        {this.props.children}\n      </Text>\n    );\n  }\n}\n\nclass AttributeToggler extends React.Component<{...}, $FlowFixMeState> {\n  state = {fontWeight: 'bold', fontSize: 15};\n\n  toggleWeight = () => {\n    this.setState({\n      fontWeight: this.state.fontWeight === 'bold' ? 'normal' : 'bold',\n    });\n  };\n\n  increaseSize = () => {\n    this.setState({\n      fontSize: this.state.fontSize + 1,\n    });\n  };\n\n  render() {\n    const curStyle = {\n      fontWeight: this.state.fontWeight,\n      fontSize: this.state.fontSize,\n    };\n    return (\n      <View>\n        <Text style={curStyle}>\n          Tap the controls below to change attributes.\n        </Text>\n        <Text>\n          <Text>\n            See how it will even work on{' '}\n            <Text style={curStyle}>this nested text</Text>\n          </Text>\n        </Text>\n        <Text\n          style={{backgroundColor: '#ffaaaa', marginTop: 5}}\n          onPress={this.toggleWeight}>\n          Toggle Weight\n        </Text>\n        <Text\n          style={{backgroundColor: '#aaaaff', marginTop: 5}}\n          onPress={this.increaseSize}>\n          Increase Size\n        </Text>\n      </View>\n    );\n  }\n}\n\ntype AdjustingFontSizeProps = $ReadOnly<{||}>;\n\ntype AdjustingFontSizeState = {|\n  dynamicText: string,\n  shouldRender: boolean,\n|};\n\nclass AdjustingFontSize extends React.Component<\n  AdjustingFontSizeProps,\n  AdjustingFontSizeState,\n> {\n  state = {\n    dynamicText: '',\n    shouldRender: true,\n  };\n\n  reset = () => {\n    LayoutAnimation.easeInEaseOut();\n    this.setState({\n      shouldRender: false,\n    });\n    setTimeout(() => {\n      LayoutAnimation.easeInEaseOut();\n      this.setState({\n        dynamicText: '',\n        shouldRender: true,\n      });\n    }, 300);\n  };\n\n  addText = () => {\n    this.setState({\n      dynamicText:\n        this.state.dynamicText +\n        (Math.floor((Math.random() * 10) % 2) ? ' foo' : ' bar'),\n    });\n  };\n\n  removeText = () => {\n    this.setState({\n      dynamicText: this.state.dynamicText.slice(\n        0,\n        this.state.dynamicText.length - 4,\n      ),\n    });\n  };\n\n  render() {\n    if (!this.state.shouldRender) {\n      return <View />;\n    }\n    return (\n      <View>\n        <Text\n          ellipsizeMode=\"tail\"\n          numberOfLines={1}\n          style={{fontSize: 36, marginVertical: 6}}>\n          Truncated text is baaaaad.\n        </Text>\n        <Text\n          numberOfLines={1}\n          adjustsFontSizeToFit={true}\n          style={{fontSize: 40, marginVertical: 6}}>\n          Shrinking to fit available space is much better!\n        </Text>\n\n        <Text\n          adjustsFontSizeToFit={true}\n          numberOfLines={1}\n          style={{fontSize: 30, marginVertical: 6}}>\n          {'Add text to me to watch me shrink!' + ' ' + this.state.dynamicText}\n        </Text>\n\n        <Text\n          adjustsFontSizeToFit={true}\n          numberOfLines={4}\n          style={{fontSize: 20, marginVertical: 6}}>\n          {'Multiline text component shrinking is supported, watch as this reeeeaaaally loooooong teeeeeeext grooooows and then shriiiinks as you add text to me! ioahsdia soady auydoa aoisyd aosdy ' +\n            ' ' +\n            this.state.dynamicText}\n        </Text>\n\n        <Text\n          adjustsFontSizeToFit={true}\n          style={{fontSize: 20, marginVertical: 6, maxHeight: 50}}>\n          {'Text limited by height, watch as this reeeeaaaally loooooong teeeeeeext grooooows and then shriiiinks as you add text to me! ioahsdia soady auydoa aoisyd aosdy ' +\n            ' ' +\n            this.state.dynamicText}\n        </Text>\n\n        <Text\n          adjustsFontSizeToFit={true}\n          numberOfLines={1}\n          style={{marginVertical: 6}}>\n          <Text style={{fontSize: 14}}>\n            {'Differently sized nested elements will shrink together. '}\n          </Text>\n          <Text style={{fontSize: 20}}>\n            {'LARGE TEXT! ' + this.state.dynamicText}\n          </Text>\n        </Text>\n\n        <View\n          style={{\n            flexDirection: 'row',\n            justifyContent: 'space-around',\n            marginTop: 5,\n            marginVertical: 6,\n          }}>\n          <Text style={{backgroundColor: '#ffaaaa'}} onPress={this.reset}>\n            Reset\n          </Text>\n          <Text style={{backgroundColor: '#aaaaff'}} onPress={this.removeText}>\n            Remove Text\n          </Text>\n          <Text style={{backgroundColor: '#aaffaa'}} onPress={this.addText}>\n            Add Text\n          </Text>\n        </View>\n      </View>\n    );\n  }\n}\n\nclass TextBaseLineLayoutExample extends React.Component<*, *> {\n  render() {\n    const texts = [];\n    for (let i = 9; i >= 0; i--) {\n      texts.push(\n        <Text key={i} style={{fontSize: 8 + i * 5, backgroundColor: '#eee'}}>\n          {i}\n        </Text>,\n      );\n    }\n\n    const marker = (\n      <View style={{width: 20, height: 20, backgroundColor: 'gray'}} />\n    );\n    const subtitleStyle = {fontSize: 16, marginTop: 8, fontWeight: 'bold'};\n\n    return (\n      <View>\n        <Text style={subtitleStyle}>{'Nested <Text/>s:'}</Text>\n        <View style={{flexDirection: 'row', alignItems: 'baseline'}}>\n          {marker}\n          <Text>{texts}</Text>\n          {marker}\n        </View>\n\n        <Text style={subtitleStyle}>{'Array of <Text/>s in <View>:'}</Text>\n        <View style={{flexDirection: 'row', alignItems: 'baseline'}}>\n          {marker}\n          {texts}\n          {marker}\n        </View>\n\n        {/* iOS-only because it relies on inline views being able to size to content.\n         * Android's implementation requires that a width and height be specified\n         * on the inline view. */}\n        <Text style={subtitleStyle}>{'Interleaving <View> and <Text>:'}</Text>\n        <View style={{flexDirection: 'row', alignItems: 'baseline'}}>\n          {marker}\n          <Text selectable={true}>\n            Some text.\n            <View\n              style={{\n                flexDirection: 'row',\n                alignItems: 'baseline',\n                backgroundColor: '#eee',\n              }}>\n              {marker}\n              <Text>Text inside View.</Text>\n              {marker}\n            </View>\n          </Text>\n          {marker}\n        </View>\n\n        <Text style={subtitleStyle}>\n          {'Multi-line interleaved <View> and <Text>:'}\n        </Text>\n        <View style={{flexDirection: 'row', alignItems: 'baseline'}}>\n          <Text selectable={true}>\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris\n            venenatis,{' '}\n            <View\n              style={{\n                backgroundColor: 'yellow',\n              }}>\n              <Text>mauris eu commodo maximus</Text>\n            </View>{' '}\n            , ante arcu vestibulum ligula, et scelerisque diam.\n          </Text>\n        </View>\n\n        <Text style={subtitleStyle}>{'<TextInput/>:'}</Text>\n        <View style={{flexDirection: 'row', alignItems: 'baseline'}}>\n          {marker}\n          <TextInput style={{margin: 0, padding: 0}}>{texts}</TextInput>\n          {marker}\n        </View>\n\n        <Text style={subtitleStyle}>{'<TextInput multiline/>:'}</Text>\n        <View style={{flexDirection: 'row', alignItems: 'baseline'}}>\n          {marker}\n          <TextInput multiline={true} style={{margin: 0, padding: 0}}>\n            {texts}\n          </TextInput>\n          {marker}\n        </View>\n      </View>\n    );\n  }\n}\n\nclass TextRenderInfoExample extends React.Component<*, *> {\n  state = {\n    textMetrics: {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0,\n      capHeight: 0,\n      descender: 0,\n      ascender: 0,\n      xHeight: 0,\n    },\n    numberOfTextBlocks: 1,\n    fontSize: 14,\n  };\n\n  render() {\n    const topOfBox =\n      this.state.textMetrics.y +\n      this.state.textMetrics.height -\n      (this.state.textMetrics.descender + this.state.textMetrics.capHeight);\n    return (\n      <View>\n        <View>\n          <View\n            style={{\n              position: 'absolute',\n              left: this.state.textMetrics.x + this.state.textMetrics.width,\n              top: topOfBox,\n              width: 5,\n              height: Math.ceil(\n                this.state.textMetrics.capHeight -\n                  this.state.textMetrics.xHeight,\n              ),\n              backgroundColor: 'red',\n            }}\n          />\n          <View\n            style={{\n              position: 'absolute',\n              left: this.state.textMetrics.x + this.state.textMetrics.width,\n              top:\n                topOfBox +\n                (this.state.textMetrics.capHeight -\n                  this.state.textMetrics.xHeight),\n              width: 5,\n              height: Math.ceil(this.state.textMetrics.xHeight),\n              backgroundColor: 'green',\n            }}\n          />\n          <Text\n            style={{fontSize: this.state.fontSize}}\n            onTextLayout={event => {\n              const {lines} = event.nativeEvent;\n              if (lines.length > 0) {\n                this.setState({textMetrics: lines[lines.length - 1]});\n              }\n            }}>\n            {new Array(this.state.numberOfTextBlocks)\n              .fill('A tiny block of text.')\n              .join(' ')}\n          </Text>\n        </View>\n        <Text\n          onPress={() =>\n            this.setState({\n              numberOfTextBlocks: this.state.numberOfTextBlocks + 1,\n            })\n          }>\n          More text\n        </Text>\n        <Text\n          onPress={() => this.setState({fontSize: this.state.fontSize + 1})}>\n          Increase size\n        </Text>\n        <Text\n          onPress={() => this.setState({fontSize: this.state.fontSize - 1})}>\n          Decrease size\n        </Text>\n      </View>\n    );\n  }\n}\n\nclass TextWithCapBaseBox extends React.Component<*, *> {\n  state = {\n    textMetrics: {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0,\n      capHeight: 0,\n      descender: 0,\n      ascender: 0,\n      xHeight: 0,\n    },\n  };\n  render() {\n    return (\n      <Text\n        onTextLayout={event => {\n          const {lines} = event.nativeEvent;\n          if (lines.length > 0) {\n            this.setState({textMetrics: lines[0]});\n          }\n        }}\n        style={[\n          {\n            marginTop: Math.ceil(\n              -(\n                this.state.textMetrics.ascender -\n                this.state.textMetrics.capHeight\n              ),\n            ),\n            marginBottom: Math.ceil(-this.state.textMetrics.descender),\n          },\n          this.props.style,\n        ]}>\n        {this.props.children}\n      </Text>\n    );\n  }\n}\n\nexports.title = '<Text>';\nexports.description = 'Base component for rendering styled text.';\nexports.displayName = 'TextExample';\nexports.examples = [\n  {\n    title: 'Wrap',\n    render: function(): React.Node {\n      return (\n        <Text>\n          The text should wrap if it goes on multiple lines. See, this is going\n          to the next line.\n        </Text>\n      );\n    },\n  },\n  {\n    title: \"Substring Emoji (should only see 'test')\",\n    render: function(): React.Node {\n      return <Text>{'test🙃'.substring(0, 5)}</Text>;\n    },\n  },\n  {\n    title: 'Transparent Background Color',\n    render: function(): React.Node {\n      return (\n        <Text style={{backgroundColor: '#00000020', padding: 10}}>\n          Text in a gray box!\n          <Text style={{backgroundColor: 'red'}}>\n            Another text in a (inline) red box (which is inside the gray box).\n          </Text>\n        </Text>\n      );\n    },\n  },\n  {\n    title: 'Text metrics',\n    render: function(): React.Node {\n      return <TextRenderInfoExample />;\n    },\n  },\n  {\n    title: 'Text metrics legend',\n    render: (): React.Node => <TextLegend />,\n  },\n  {\n    title: 'Baseline capheight box',\n    render: (): React.Node => (\n      <View style={{backgroundColor: 'red'}}>\n        <TextWithCapBaseBox>Some example text.</TextWithCapBaseBox>\n      </View>\n    ),\n  },\n  {\n    title: 'Padding',\n    render: function(): React.Node {\n      return (\n        <Text style={{padding: 10}}>\n          This text is indented by 10px padding on all sides.\n        </Text>\n      );\n    },\n  },\n  {\n    title: 'Font Family',\n    render: function(): React.Node {\n      return (\n        <View>\n          <Text style={{fontFamily: Platform.isTV ? 'Times' : 'Cochin'}}>\n            Cochin\n          </Text>\n          <Text\n            style={{\n              fontFamily: Platform.isTV ? 'Times' : 'Cochin',\n              fontWeight: 'bold',\n            }}>\n            Cochin bold\n          </Text>\n          <Text style={{fontFamily: 'Helvetica'}}>Helvetica</Text>\n          <Text style={{fontFamily: 'Helvetica', fontWeight: 'bold'}}>\n            Helvetica bold\n          </Text>\n          <Text style={{fontFamily: Platform.isTV ? 'Courier' : 'Verdana'}}>\n            Verdana\n          </Text>\n          <Text\n            style={{\n              fontFamily: Platform.isTV ? 'Courier' : 'Verdana',\n              fontWeight: 'bold',\n            }}>\n            Verdana bold\n          </Text>\n        </View>\n      );\n    },\n  },\n  {\n    title: 'Font Size',\n    render: function(): React.Node {\n      return (\n        <View>\n          <Text style={{fontSize: 23}}>Size 23</Text>\n          <Text style={{fontSize: 8}}>Size 8</Text>\n        </View>\n      );\n    },\n  },\n  {\n    title: 'Color',\n    render: function(): React.Node {\n      return (\n        <View>\n          <Text style={{color: 'red'}}>Red color</Text>\n          <Text style={{color: 'blue'}}>Blue color</Text>\n        </View>\n      );\n    },\n  },\n  {\n    title: 'Font Weight',\n    render: function(): React.Node {\n      return (\n        <View>\n          <Text style={{fontSize: 20, fontWeight: '100'}}>\n            Move fast and be ultralight\n          </Text>\n          <Text style={{fontSize: 20, fontWeight: '200'}}>\n            Move fast and be light\n          </Text>\n          <Text style={{fontSize: 20, fontWeight: 'normal'}}>\n            Move fast and be normal\n          </Text>\n          <Text style={{fontSize: 20, fontWeight: 'bold'}}>\n            Move fast and be bold\n          </Text>\n          <Text style={{fontSize: 20, fontWeight: '900'}}>\n            Move fast and be ultrabold\n          </Text>\n        </View>\n      );\n    },\n  },\n  {\n    title: 'Font Style',\n    render: function(): React.Node {\n      return (\n        <View>\n          <Text style={{fontStyle: 'normal'}}>Normal text</Text>\n          <Text style={{fontStyle: 'italic'}}>Italic text</Text>\n        </View>\n      );\n    },\n  },\n  {\n    title: 'Selectable',\n    render: function(): React.Node {\n      return (\n        <View>\n          <Text selectable={true}>\n            This text is <Text style={{fontWeight: 'bold'}}>selectable</Text> if\n            you click-and-hold.\n          </Text>\n        </View>\n      );\n    },\n  },\n  {\n    title: 'Text Decoration',\n    render: function(): React.Node {\n      return (\n        <View>\n          <Text\n            style={{\n              textDecorationLine: 'underline',\n              textDecorationStyle: 'solid',\n            }}>\n            Solid underline\n          </Text>\n          <Text\n            style={{\n              textDecorationLine: 'underline',\n              textDecorationStyle: 'double',\n              textDecorationColor: '#ff0000',\n            }}>\n            Double underline with custom color\n          </Text>\n          <Text\n            style={{\n              textDecorationLine: 'underline',\n              textDecorationStyle: 'dashed',\n              textDecorationColor: '#9CDC40',\n            }}>\n            Dashed underline with custom color\n          </Text>\n          <Text\n            style={{\n              textDecorationLine: 'underline',\n              textDecorationStyle: 'dotted',\n              textDecorationColor: 'blue',\n            }}>\n            Dotted underline with custom color\n          </Text>\n          <Text style={{textDecorationLine: 'none'}}>None textDecoration</Text>\n          <Text\n            style={{\n              textDecorationLine: 'line-through',\n              textDecorationStyle: 'solid',\n            }}>\n            Solid line-through\n          </Text>\n          <Text\n            style={{\n              textDecorationLine: 'line-through',\n              textDecorationStyle: 'double',\n              textDecorationColor: '#ff0000',\n            }}>\n            Double line-through with custom color\n          </Text>\n          <Text\n            style={{\n              textDecorationLine: 'line-through',\n              textDecorationStyle: 'dashed',\n              textDecorationColor: '#9CDC40',\n            }}>\n            Dashed line-through with custom color\n          </Text>\n          <Text\n            style={{\n              textDecorationLine: 'line-through',\n              textDecorationStyle: 'dotted',\n              textDecorationColor: 'blue',\n            }}>\n            Dotted line-through with custom color\n          </Text>\n          <Text style={{textDecorationLine: 'underline line-through'}}>\n            Both underline and line-through\n          </Text>\n        </View>\n      );\n    },\n  },\n  {\n    title: 'Nested',\n    description: ('Nested text components will inherit the styles of their ' +\n      'parents (only backgroundColor is inherited from non-Text parents).  ' +\n      '<Text> only supports other <Text> and raw text (strings) as children.': string),\n    render: function(): React.Node {\n      return (\n        <View>\n          <Text>\n            (Normal text,\n            <Text style={{fontWeight: 'bold'}}>\n              (and bold\n              <Text style={{fontSize: 11, color: '#527fe4'}}>\n                (and tiny inherited bold blue)\n              </Text>\n              )\n            </Text>\n            )\n          </Text>\n          <Text style={{opacity: 0.7}}>\n            (opacity\n            <Text>\n              (is inherited\n              <Text style={{opacity: 0.7}}>\n                (and accumulated\n                <Text style={{backgroundColor: '#ffaaaa'}}>\n                  (and also applies to the background)\n                </Text>\n                )\n              </Text>\n              )\n            </Text>\n            )\n          </Text>\n          <Text style={{fontSize: 12}}>\n            <Entity>Entity Name</Entity>\n          </Text>\n        </View>\n      );\n    },\n  },\n  {\n    title: 'Text Align',\n    render: function(): React.Node {\n      return (\n        <View>\n          <Text>auto (default) - english LTR</Text>\n          <Text>\n            {'\\u0623\\u062D\\u0628 \\u0627\\u0644\\u0644\\u063A\\u0629 ' +\n              '\\u0627\\u0644\\u0639\\u0631\\u0628\\u064A\\u0629 auto (default) - arabic ' +\n              'RTL'}\n          </Text>\n          <Text style={{textAlign: 'left'}}>\n            left left left left left left left left left left left left left\n            left left\n          </Text>\n          <Text style={{textAlign: 'center'}}>\n            center center center center center center center center center\n            center center\n          </Text>\n          <Text style={{textAlign: 'right'}}>\n            right right right right right right right right right right right\n            right right\n          </Text>\n          <Text style={{textAlign: 'justify'}}>\n            justify: this text component{\"'\"}s contents are laid out with\n            \"textAlign: justify\" and as you can see all of the lines except the\n            last one span the available width of the parent container.\n          </Text>\n        </View>\n      );\n    },\n  },\n  {\n    title: 'Letter Spacing',\n    render: function(): React.Node {\n      return (\n        <View>\n          <Text style={{letterSpacing: 0}}>letterSpacing = 0</Text>\n          <Text style={{letterSpacing: 2, marginTop: 5}}>\n            letterSpacing = 2\n          </Text>\n          <Text style={{letterSpacing: 9, marginTop: 5}}>\n            letterSpacing = 9\n          </Text>\n          <View style={{flexDirection: 'row'}}>\n            <Text\n              style={{\n                fontSize: 12,\n                letterSpacing: 2,\n                backgroundColor: 'fuchsia',\n                marginTop: 5,\n              }}>\n              With size and background color\n            </Text>\n          </View>\n          <Text style={{letterSpacing: -1, marginTop: 5}}>\n            letterSpacing = -1\n          </Text>\n          <Text\n            style={{\n              letterSpacing: 3,\n              backgroundColor: '#dddddd',\n              marginTop: 5,\n            }}>\n            [letterSpacing = 3]\n            <Text style={{letterSpacing: 0, backgroundColor: '#bbbbbb'}}>\n              [Nested letterSpacing = 0]\n            </Text>\n            <Text style={{letterSpacing: 6, backgroundColor: '#eeeeee'}}>\n              [Nested letterSpacing = 6]\n            </Text>\n          </Text>\n        </View>\n      );\n    },\n  },\n  {\n    title: 'Spaces',\n    render: function(): React.Node {\n      return (\n        <Text>\n          A {'generated'} {'string'} and some &nbsp;&nbsp;&nbsp; spaces\n        </Text>\n      );\n    },\n  },\n  {\n    title: 'Line Height',\n    render: function(): React.Node {\n      return (\n        <Text>\n          <Text style={{lineHeight: 35}}>\n            A lot of space between the lines of this long passage that should\n            wrap once.\n          </Text>\n        </Text>\n      );\n    },\n  },\n  {\n    title: 'Empty Text',\n    description: \"It's ok to have Text with zero or null children.\",\n    render: function(): React.Node {\n      return <Text />;\n    },\n  },\n  {\n    title: 'Toggling Attributes',\n    render: function(): React.Element<any> {\n      return <AttributeToggler />;\n    },\n  },\n  {\n    title: 'backgroundColor attribute',\n    description: 'backgroundColor is inherited from all types of views.',\n    render: function(): React.Node {\n      return (\n        <Text style={{backgroundColor: 'yellow'}}>\n          Yellow container background,\n          <Text style={{backgroundColor: '#ffaaaa'}}>\n            {' '}\n            red background,\n            <Text style={{backgroundColor: '#aaaaff'}}>\n              {' '}\n              blue background,\n              <Text>\n                {' '}\n                inherited blue background,\n                <Text style={{backgroundColor: '#aaffaa'}}>\n                  {' '}\n                  nested green background.\n                </Text>\n              </Text>\n            </Text>\n          </Text>\n        </Text>\n      );\n    },\n  },\n  {\n    title: 'numberOfLines attribute',\n    render: function(): React.Node {\n      return (\n        <View>\n          <Text numberOfLines={1}>\n            Maximum of one line, no matter how much I write here. If I keep\n            writing, it{\"'\"}ll just truncate after one line.\n          </Text>\n          <Text numberOfLines={2} style={{marginTop: 20}}>\n            Maximum of two lines, no matter how much I write here. If I keep\n            writing, it{\"'\"}ll just truncate after two lines.\n          </Text>\n          <Text style={{marginTop: 20}}>\n            No maximum lines specified, no matter how much I write here. If I\n            keep writing, it{\"'\"}ll just keep going and going.\n          </Text>\n        </View>\n      );\n    },\n  },\n  {\n    title: 'Text highlighting (tap the link to see highlight)',\n    render: function(): React.Node {\n      return (\n        <View>\n          <Text>\n            Lorem ipsum dolor sit amet,{' '}\n            <Text\n              suppressHighlighting={false}\n              style={{\n                backgroundColor: 'white',\n                textDecorationLine: 'underline',\n                color: 'blue',\n              }}\n              onPress={() => null}>\n              consectetur adipiscing elit, sed do eiusmod tempor incididunt ut\n              labore et dolore magna aliqua. Ut enim ad minim veniam, quis\n              nostrud\n            </Text>{' '}\n            exercitation ullamco laboris nisi ut aliquip ex ea commodo\n            consequat.\n          </Text>\n        </View>\n      );\n    },\n  },\n  {\n    title: 'allowFontScaling attribute',\n    render: function(): React.Node {\n      return (\n        <View>\n          <Text>\n            By default, text will respect Text Size accessibility setting on\n            iOS. It means that all font sizes will be increased or decreased\n            depending on the value of Text Size setting in{' '}\n            <Text style={{fontWeight: 'bold'}}>\n              Settings.app - Display & Brightness - Text Size\n            </Text>\n          </Text>\n          <Text style={{marginTop: 10}}>\n            You can disable scaling for your Text component by passing {'\"'}\n            allowFontScaling={'{'}false{'}\"'} prop.\n          </Text>\n          <Text allowFontScaling={false} style={{marginTop: 20, fontSize: 15}}>\n            This text will not scale.{' '}\n            <Text style={{fontSize: 15}}>\n              This text also won't scale because it inherits \"allowFontScaling\"\n              from its parent.\n            </Text>\n          </Text>\n        </View>\n      );\n    },\n  },\n  {\n    title: 'Inline views',\n    render: (): React.Node => <TextInlineView.Basic />,\n  },\n  {\n    title: 'Inline image/view clipped by <Text>',\n    render: (): React.Node => <TextInlineView.ClippedByText />,\n  },\n  {\n    title: 'Relayout inline image',\n    render: (): React.Node => <TextInlineView.ChangeImageSize />,\n  },\n  {\n    title: 'Relayout inline view',\n    render: (): React.Node => <TextInlineView.ChangeViewSize />,\n  },\n  {\n    title: 'Relayout nested inline view',\n    render: (): React.Node => <TextInlineView.ChangeInnerViewSize />,\n  },\n  {\n    title: 'Text shadow',\n    render: function(): React.Node {\n      return (\n        <View>\n          <Text\n            style={{\n              fontSize: 20,\n              textShadowOffset: {width: 2, height: 2},\n              textShadowRadius: 1,\n              textShadowColor: '#00cccc',\n            }}>\n            Demo text shadow\n          </Text>\n        </View>\n      );\n    },\n  },\n  {\n    title: 'Ellipsize mode',\n    render: function(): React.Node {\n      return (\n        <View>\n          <Text numberOfLines={1}>\n            This very long text should be truncated with dots in the end.\n          </Text>\n          <Text ellipsizeMode=\"middle\" numberOfLines={1}>\n            This very long text should be truncated with dots in the middle.\n          </Text>\n          <Text ellipsizeMode=\"head\" numberOfLines={1}>\n            This very long text should be truncated with dots in the beginning.\n          </Text>\n          <Text ellipsizeMode=\"clip\" numberOfLines={1}>\n            This very looooooooooooooooooooooooooooong text should be clipped.\n          </Text>\n        </View>\n      );\n    },\n  },\n  {\n    title: 'Font variants',\n    render: function(): React.Node {\n      return (\n        <View>\n          <Text style={{fontVariant: ['small-caps']}}>Small Caps{'\\n'}</Text>\n          <Text\n            style={{\n              fontFamily: Platform.isTV ? 'Times' : 'Hoefler Text',\n              fontVariant: ['oldstyle-nums'],\n            }}>\n            Old Style nums 0123456789{'\\n'}\n          </Text>\n          <Text\n            style={{\n              fontFamily: Platform.isTV ? 'Times' : 'Hoefler Text',\n              fontVariant: ['lining-nums'],\n            }}>\n            Lining nums 0123456789{'\\n'}\n          </Text>\n          <Text style={{fontVariant: ['tabular-nums']}}>\n            Tabular nums{'\\n'}\n            1111{'\\n'}\n            2222{'\\n'}\n          </Text>\n          <Text style={{fontVariant: ['proportional-nums']}}>\n            Proportional nums{'\\n'}\n            1111{'\\n'}\n            2222{'\\n'}\n          </Text>\n        </View>\n      );\n    },\n  },\n  {\n    title: 'Nested content',\n    render: function(): React.Node {\n      // iOS-only because it relies on inline views being able to size to content.\n      // Android's implementation requires that a width and height be specified\n      // on the inline view.\n      return (\n        <Text>\n          This text has a view\n          <InlineView style={{borderColor: 'red', borderWidth: 1}}>\n            <Text style={{borderColor: 'blue', borderWidth: 1}}>which has</Text>\n            <Text style={{borderColor: 'green', borderWidth: 1}}>\n              another text inside.\n            </Text>\n            <Text style={{borderColor: 'yellow', borderWidth: 1}}>\n              And moreover, it has another view\n              <InlineView style={{borderColor: 'red', borderWidth: 1}}>\n                <Text style={{borderColor: 'blue', borderWidth: 1}}>\n                  with another text inside!\n                </Text>\n              </InlineView>\n            </Text>\n          </InlineView>\n          Because we need to go deeper.\n        </Text>\n      );\n    },\n  },\n  {\n    title: 'Dynamic Font Size Adjustment',\n    render: function(): React.Element<any> {\n      return <AdjustingFontSize />;\n    },\n  },\n  {\n    title: 'Text Align with RTL',\n    render: function(): React.Node {\n      return <TextAlignRTLExample />;\n    },\n  },\n  {\n    title: \"Text `alignItems: 'baseline'` style\",\n    render: function(): React.Node {\n      return <TextBaseLineLayoutExample />;\n    },\n  },\n  {\n    title: 'Transform',\n    render: function(): React.Node {\n      return (\n        <View>\n          <Text style={{textTransform: 'uppercase'}}>\n            This text should be uppercased.\n          </Text>\n          <Text style={{textTransform: 'lowercase'}}>\n            This TEXT SHOULD be lowercased.\n          </Text>\n          <Text style={{textTransform: 'capitalize'}}>\n            This text should be CAPITALIZED.\n          </Text>\n          <Text style={{textTransform: 'capitalize'}}>\n            Mixed: <Text style={{textTransform: 'uppercase'}}>uppercase </Text>\n            <Text style={{textTransform: 'lowercase'}}>LoWeRcAsE </Text>\n            <Text style={{textTransform: 'capitalize'}}>\n              capitalize each word\n            </Text>\n          </Text>\n          <Text>\n            Should be \"ABC\":\n            <Text style={{textTransform: 'uppercase'}}>\n              a<Text>b</Text>c\n            </Text>\n          </Text>\n          <Text>\n            Should be \"AbC\":\n            <Text style={{textTransform: 'uppercase'}}>\n              a<Text style={{textTransform: 'none'}}>b</Text>c\n            </Text>\n          </Text>\n        </View>\n      );\n    },\n  },\n];\n"]},"metadata":{},"sourceType":"script"}