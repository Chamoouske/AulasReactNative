{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _assertThisInitialized = require(\"@babel/runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nvar _jsxFileName = \"/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/ReactAndroid/src/androidTest/js/AnimatedTransformTestModule.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar React = require('react');\n\nvar NativeModules = require(\"react-native-web/dist/exports/NativeModules\").default;\n\nvar StyleSheet = require(\"react-native-web/dist/exports/StyleSheet\").default;\n\nvar Text = require(\"react-native-web/dist/exports/Text\").default;\n\nvar TouchableOpacity = require(\"react-native-web/dist/exports/TouchableOpacity\").default;\n\nvar View = require(\"react-native-web/dist/exports/View\").default;\n\nvar BatchedBridge = require('react-native/Libraries/BatchedBridge/BatchedBridge');\n\nvar RecordingModule = NativeModules.Recording;\nvar styles = StyleSheet.create({\n  base: {\n    width: 200,\n    height: 200,\n    backgroundColor: 'red',\n    transform: [{\n      rotate: '0deg'\n    }]\n  },\n  transformed: {\n    transform: [{\n      rotate: '45deg'\n    }]\n  }\n});\n\nvar AnimatedTransformTestApp = function (_React$Component) {\n  _inherits(AnimatedTransformTestApp, _React$Component);\n\n  var _super = _createSuper(AnimatedTransformTestApp);\n\n  function AnimatedTransformTestApp(props) {\n    var _this;\n\n    _classCallCheck(this, AnimatedTransformTestApp);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      flag: false\n    };\n    _this.toggle = _this.toggle.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(AnimatedTransformTestApp, [{\n    key: \"toggle\",\n    value: function toggle() {\n      this.setState({\n        flag: !this.state.flag\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      RecordingModule.record('render');\n      return React.createElement(View, {\n        style: StyleSheet.absoluteFill,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 7\n        }\n      }, React.createElement(TouchableOpacity, {\n        onPress: this.toggle,\n        testID: \"TouchableOpacity\",\n        style: [styles.base, this.state.flag ? styles.transformed : null],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 9\n        }\n      }, React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }\n      }, \"TouchableOpacity\")));\n    }\n  }]);\n\n  return AnimatedTransformTestApp;\n}(React.Component);\n\nvar AnimatedTransformTestModule = {\n  AnimatedTransformTestApp: AnimatedTransformTestApp\n};\nBatchedBridge.registerCallableModule('AnimatedTransformTestModule', AnimatedTransformTestModule);\nmodule.exports = AnimatedTransformTestModule;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/ReactAndroid/src/androidTest/js/AnimatedTransformTestModule.js"],"names":["React","require","BatchedBridge","RecordingModule","NativeModules","Recording","styles","StyleSheet","create","base","width","height","backgroundColor","transform","rotate","transformed","AnimatedTransformTestApp","props","state","flag","toggle","bind","setState","record","absoluteFill","Component","AnimatedTransformTestModule","registerCallableModule","module","exports"],"mappings":"AASA;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;;;;;;;;;;;AAQA,IAAMC,aAAa,GAAGD,OAAO,CAAC,oDAAD,CAA7B;;IAEkBE,e,GAAmBC,a,CAA9BC,S;AAEP,IAAMC,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC/BC,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAE,GADH;AAEJC,IAAAA,MAAM,EAAE,GAFJ;AAGJC,IAAAA,eAAe,EAAE,KAHb;AAIJC,IAAAA,SAAS,EAAE,CAAC;AAACC,MAAAA,MAAM,EAAE;AAAT,KAAD;AAJP,GADyB;AAO/BC,EAAAA,WAAW,EAAE;AACXF,IAAAA,SAAS,EAAE,CAAC;AAACC,MAAAA,MAAM,EAAE;AAAT,KAAD;AADA;AAPkB,CAAlB,CAAf;;IAmBME,wB;;;;;AACJ,oCAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;AADiB,UAKnBC,KALmB,GAKX;AACNC,MAAAA,IAAI,EAAE;AADA,KALW;AAEjB,UAAKC,MAAL,GAAc,MAAKA,MAAL,CAAYC,IAAZ,+BAAd;AAFiB;AAGlB;;;;WAMD,kBAAS;AACP,WAAKC,QAAL,CAAc;AACZH,QAAAA,IAAI,EAAE,CAAC,KAAKD,KAAL,CAAWC;AADN,OAAd;AAGD;;;WAED,kBAAS;AAEPhB,MAAAA,eAAe,CAACoB,MAAhB,CAAuB,QAAvB;AAEA,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEhB,UAAU,CAACiB,YAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,gBAAD;AACE,QAAA,OAAO,EAAE,KAAKJ,MADhB;AAEE,QAAA,MAAM,EAAC,kBAFT;AAGE,QAAA,KAAK,EAAE,CAACd,MAAM,CAACG,IAAR,EAAc,KAAKS,KAAL,CAAWC,IAAX,GAAkBb,MAAM,CAACS,WAAzB,GAAuC,IAArD,CAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAJF,CADF,CADF;AAUD;;;;EA9BoCf,KAAK,CAACyB,S;;AAiC7C,IAAIC,2BAA2B,GAAG;AAChCV,EAAAA,wBAAwB,EAAEA;AADM,CAAlC;AAIAd,aAAa,CAACyB,sBAAd,CACE,6BADF,EAEED,2BAFF;AAKAE,MAAM,CAACC,OAAP,GAAiBH,2BAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\n'use strict';\n\nconst React = require('react');\nconst {\n  NativeModules,\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  View,\n} = require('react-native');\nconst BatchedBridge = require('react-native/Libraries/BatchedBridge/BatchedBridge');\n\nconst {Recording: RecordingModule} = NativeModules;\n\nconst styles = StyleSheet.create({\n  base: {\n    width: 200,\n    height: 200,\n    backgroundColor: 'red',\n    transform: [{rotate: '0deg'}],\n  },\n  transformed: {\n    transform: [{rotate: '45deg'}],\n  },\n});\n\n/**\n * This app presents a TouchableOpacity which was the simplest way to\n * demonstrate this issue. Tapping the TouchableOpacity causes an animated\n * transform to be created for the rotation property. Since the property isn't\n * animated itself, it comes through as a static property, but static properties\n * can't currently handle strings which causes a string->double cast exception.\n */\nclass AnimatedTransformTestApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.toggle = this.toggle.bind(this);\n  }\n\n  state = {\n    flag: false,\n  };\n\n  toggle() {\n    this.setState({\n      flag: !this.state.flag,\n    });\n  }\n\n  render() {\n    // Using this to verify if its fixed.\n    RecordingModule.record('render');\n\n    return (\n      <View style={StyleSheet.absoluteFill}>\n        <TouchableOpacity\n          onPress={this.toggle}\n          testID=\"TouchableOpacity\"\n          style={[styles.base, this.state.flag ? styles.transformed : null]}>\n          <Text>TouchableOpacity</Text>\n        </TouchableOpacity>\n      </View>\n    );\n  }\n}\n\nvar AnimatedTransformTestModule = {\n  AnimatedTransformTestApp: AnimatedTransformTestApp,\n};\n\nBatchedBridge.registerCallableModule(\n  'AnimatedTransformTestModule',\n  AnimatedTransformTestModule,\n);\n\nmodule.exports = AnimatedTransformTestModule;\n"]},"metadata":{},"sourceType":"script"}