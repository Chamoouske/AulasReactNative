{"ast":null,"code":"'use strict';\n\nimport infoLog from \"../infoLog\";\nimport performanceNow from 'fbjs/lib/performanceNow';\nvar JSEventLoopWatchdog = {\n  getStats: function getStats() {\n    return {\n      stallCount: stallCount,\n      totalStallTime: totalStallTime,\n      longestStall: longestStall,\n      acceptableBusyTime: acceptableBusyTime\n    };\n  },\n  reset: function reset() {\n    infoLog('JSEventLoopWatchdog: reset');\n    totalStallTime = 0;\n    stallCount = 0;\n    longestStall = 0;\n    lastInterval = performanceNow();\n  },\n  addHandler: function addHandler(handler) {\n    handlers.push(handler);\n  },\n  install: function install(_ref) {\n    var thresholdMS = _ref.thresholdMS;\n    acceptableBusyTime = thresholdMS;\n\n    if (installed) {\n      return;\n    }\n\n    installed = true;\n    lastInterval = performanceNow();\n\n    function iteration() {\n      var now = performanceNow();\n      var busyTime = now - lastInterval;\n\n      if (busyTime >= thresholdMS) {\n        var stallTime = busyTime - thresholdMS;\n        stallCount++;\n        totalStallTime += stallTime;\n        longestStall = Math.max(longestStall, stallTime);\n        var msg = \"JSEventLoopWatchdog: JS thread busy for \" + busyTime + \"ms. \" + (totalStallTime + \"ms in \" + stallCount + \" stalls so far. \");\n        handlers.forEach(function (handler) {\n          msg += handler.onStall({\n            lastInterval: lastInterval,\n            busyTime: busyTime\n          }) || '';\n        });\n        infoLog(msg);\n      }\n\n      handlers.forEach(function (handler) {\n        handler.onIterate && handler.onIterate();\n      });\n      lastInterval = now;\n      setTimeout(iteration, thresholdMS / 5);\n    }\n\n    iteration();\n  }\n};\nvar acceptableBusyTime = 0;\nvar installed = false;\nvar totalStallTime = 0;\nvar stallCount = 0;\nvar longestStall = 0;\nvar lastInterval = 0;\nvar handlers = [];\nexport default JSEventLoopWatchdog;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native-web/src/vendor/react-native/JSEventLoopWatchdog/index.js"],"names":["infoLog","performanceNow","JSEventLoopWatchdog","getStats","stallCount","totalStallTime","longestStall","acceptableBusyTime","reset","lastInterval","addHandler","handler","handlers","push","install","thresholdMS","installed","iteration","now","busyTime","stallTime","Math","max","msg","forEach","onStall","onIterate","setTimeout"],"mappings":"AAUA;;AAEA,OAAOA,OAAP;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AAmBA,IAAMC,mBAAmB,GAAG;AAC1BC,EAAAA,QAAQ,EAAE,oBAAmB;AAC3B,WAAO;AAACC,MAAAA,UAAU,EAAVA,UAAD;AAAaC,MAAAA,cAAc,EAAdA,cAAb;AAA6BC,MAAAA,YAAY,EAAZA,YAA7B;AAA2CC,MAAAA,kBAAkB,EAAlBA;AAA3C,KAAP;AACD,GAHyB;AAI1BC,EAAAA,KAAK,EAAE,iBAAW;AAChBR,IAAAA,OAAO,CAAC,4BAAD,CAAP;AACAK,IAAAA,cAAc,GAAG,CAAjB;AACAD,IAAAA,UAAU,GAAG,CAAb;AACAE,IAAAA,YAAY,GAAG,CAAf;AACAG,IAAAA,YAAY,GAAGR,cAAc,EAA7B;AACD,GAVyB;AAW1BS,EAAAA,UAAU,EAAE,oBAASC,OAAT,EAA2B;AACrCC,IAAAA,QAAQ,CAACC,IAAT,CAAcF,OAAd;AACD,GAbyB;AAc1BG,EAAAA,OAAO,EAAE,uBAA+C;AAAA,QAArCC,WAAqC,QAArCA,WAAqC;AACtDR,IAAAA,kBAAkB,GAAGQ,WAArB;;AACA,QAAIC,SAAJ,EAAe;AACb;AACD;;AACDA,IAAAA,SAAS,GAAG,IAAZ;AACAP,IAAAA,YAAY,GAAGR,cAAc,EAA7B;;AACA,aAASgB,SAAT,GAAqB;AACnB,UAAMC,GAAG,GAAGjB,cAAc,EAA1B;AACA,UAAMkB,QAAQ,GAAGD,GAAG,GAAGT,YAAvB;;AACA,UAAIU,QAAQ,IAAIJ,WAAhB,EAA6B;AAC3B,YAAMK,SAAS,GAAGD,QAAQ,GAAGJ,WAA7B;AACAX,QAAAA,UAAU;AACVC,QAAAA,cAAc,IAAIe,SAAlB;AACAd,QAAAA,YAAY,GAAGe,IAAI,CAACC,GAAL,CAAShB,YAAT,EAAuBc,SAAvB,CAAf;AACA,YAAIG,GAAG,GACL,6CAA2CJ,QAA3C,aACGd,cADH,cAC0BD,UAD1B,sBADF;AAGAQ,QAAAA,QAAQ,CAACY,OAAT,CAAiB,UAAAb,OAAO,EAAI;AAC1BY,UAAAA,GAAG,IAAIZ,OAAO,CAACc,OAAR,CAAgB;AAAChB,YAAAA,YAAY,EAAZA,YAAD;AAAeU,YAAAA,QAAQ,EAARA;AAAf,WAAhB,KAA6C,EAApD;AACD,SAFD;AAGAnB,QAAAA,OAAO,CAACuB,GAAD,CAAP;AACD;;AACDX,MAAAA,QAAQ,CAACY,OAAT,CAAiB,UAAAb,OAAO,EAAI;AAC1BA,QAAAA,OAAO,CAACe,SAAR,IAAqBf,OAAO,CAACe,SAAR,EAArB;AACD,OAFD;AAGAjB,MAAAA,YAAY,GAAGS,GAAf;AACAS,MAAAA,UAAU,CAACV,SAAD,EAAYF,WAAW,GAAG,CAA1B,CAAV;AACD;;AACDE,IAAAA,SAAS;AACV;AA5CyB,CAA5B;AA+CA,IAAIV,kBAAkB,GAAG,CAAzB;AACA,IAAIS,SAAS,GAAG,KAAhB;AACA,IAAIX,cAAc,GAAG,CAArB;AACA,IAAID,UAAU,GAAG,CAAjB;AACA,IAAIE,YAAY,GAAG,CAAnB;AACA,IAAIG,YAAY,GAAG,CAAnB;AACA,IAAMG,QAAwB,GAAG,EAAjC;AAEA,eAAeV,mBAAf","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nimport infoLog from '../infoLog';\nimport performanceNow from 'fbjs/lib/performanceNow';\n\ntype Handler = {\n  onIterate?: () => void,\n  onStall: (params: {lastInterval: number, busyTime: number}) => ?string,\n};\n\n/**\n * A utility for tracking stalls in the JS event loop that prevent timers and\n * other events from being processed in a timely manner.\n *\n * The \"stall\" time is defined as the amount of time in access of the acceptable\n * threshold, which is typically around 100-200ms. So if the treshold is set to\n * 100 and a timer fires 150 ms later than it was scheduled because the event\n * loop was tied up, that would be considered a 50ms stall.\n *\n * By default, logs stall events to the console when installed. Can also be\n * queried with `getStats`.\n */\nconst JSEventLoopWatchdog = {\n  getStats: function(): Object {\n    return {stallCount, totalStallTime, longestStall, acceptableBusyTime};\n  },\n  reset: function() {\n    infoLog('JSEventLoopWatchdog: reset');\n    totalStallTime = 0;\n    stallCount = 0;\n    longestStall = 0;\n    lastInterval = performanceNow();\n  },\n  addHandler: function(handler: Handler) {\n    handlers.push(handler);\n  },\n  install: function({thresholdMS}: {thresholdMS: number}) {\n    acceptableBusyTime = thresholdMS;\n    if (installed) {\n      return;\n    }\n    installed = true;\n    lastInterval = performanceNow();\n    function iteration() {\n      const now = performanceNow();\n      const busyTime = now - lastInterval;\n      if (busyTime >= thresholdMS) {\n        const stallTime = busyTime - thresholdMS;\n        stallCount++;\n        totalStallTime += stallTime;\n        longestStall = Math.max(longestStall, stallTime);\n        let msg =\n          `JSEventLoopWatchdog: JS thread busy for ${busyTime}ms. ` +\n          `${totalStallTime}ms in ${stallCount} stalls so far. `;\n        handlers.forEach(handler => {\n          msg += handler.onStall({lastInterval, busyTime}) || '';\n        });\n        infoLog(msg);\n      }\n      handlers.forEach(handler => {\n        handler.onIterate && handler.onIterate();\n      });\n      lastInterval = now;\n      setTimeout(iteration, thresholdMS / 5);\n    }\n    iteration();\n  },\n};\n\nlet acceptableBusyTime = 0;\nlet installed = false;\nlet totalStallTime = 0;\nlet stallCount = 0;\nlet longestStall = 0;\nlet lastInterval = 0;\nconst handlers: Array<Handler> = [];\n\nexport default JSEventLoopWatchdog;\n"]},"metadata":{},"sourceType":"module"}