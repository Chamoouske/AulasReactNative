{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nvar _jsxFileName = \"/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/IntegrationTests/GlobalEvalWithSourceUrlTest.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar React = require('react');\n\nvar ReactNative = require(\"react-native-web/dist/index\");\n\nvar parseErrorStack = require('react-native/Libraries/Core/Devtools/parseErrorStack');\n\nvar View = ReactNative.View;\nvar TestModule = ReactNative.NativeModules.TestModule;\n\nvar GlobalEvalWithSourceUrlTest = function (_React$Component) {\n  _inherits(GlobalEvalWithSourceUrlTest, _React$Component);\n\n  var _super = _createSuper(GlobalEvalWithSourceUrlTest);\n\n  function GlobalEvalWithSourceUrlTest() {\n    _classCallCheck(this, GlobalEvalWithSourceUrlTest);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(GlobalEvalWithSourceUrlTest, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (typeof global.globalEvalWithSourceUrl !== 'function') {\n        throw new Error('Expected to find globalEvalWithSourceUrl function on global object but found ' + typeof global.globalEvalWithSourceUrl);\n      }\n\n      var value = global.globalEvalWithSourceUrl('42');\n\n      if (value !== 42) {\n        throw new Error('Expected globalEvalWithSourceUrl(expression) to return a value');\n      }\n\n      var syntaxError;\n\n      try {\n        global.globalEvalWithSourceUrl('{');\n      } catch (e) {\n        syntaxError = e;\n      }\n\n      if (!syntaxError) {\n        throw new Error('Expected globalEvalWithSourceUrl to throw on a syntax error');\n      }\n\n      if (!(syntaxError instanceof SyntaxError)) {\n        throw new Error('Expected globalEvalWithSourceUrl to throw SyntaxError on a syntax error');\n      }\n\n      var url = 'http://example.com/foo.js';\n      var error;\n\n      try {\n        global.globalEvalWithSourceUrl('throw new Error()', url);\n      } catch (e) {\n        error = e;\n      }\n\n      if (!error) {\n        throw new Error('Expected globalEvalWithSourceUrl to throw an Error object');\n      }\n\n      var parsedStack = parseErrorStack(error);\n\n      if (parsedStack[0].file !== url) {\n        throw new Error(\"Expected first eval stack frame to be in \" + url + \" but found \" + String(parsedStack[0].file));\n      }\n\n      TestModule.markTestCompleted();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 12\n        }\n      });\n    }\n  }]);\n\n  return GlobalEvalWithSourceUrlTest;\n}(React.Component);\n\nGlobalEvalWithSourceUrlTest.displayName = 'GlobalEvalWithSourceUrlTest';\nmodule.exports = GlobalEvalWithSourceUrlTest;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/IntegrationTests/GlobalEvalWithSourceUrlTest.js"],"names":["React","require","parseErrorStack","View","ReactNative","TestModule","NativeModules","GlobalEvalWithSourceUrlTest","global","globalEvalWithSourceUrl","Error","value","syntaxError","e","SyntaxError","url","error","parsedStack","file","String","markTestCompleted","Component","displayName","module","exports"],"mappings":"AAUA;;;;;;;;;;;;;;;;;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;;;AAEA,IAAMC,eAAe,GAAGD,OAAO,CAAC,sDAAD,CAA/B;;IACOE,I,GAAQC,W,CAARD,I;IAEAE,U,GAAcD,WAAW,CAACE,a,CAA1BD,U;;IAEDE,2B;;;;;;;;;;;;;WACJ,6BAAoB;AAClB,UAAI,OAAOC,MAAM,CAACC,uBAAd,KAA0C,UAA9C,EAA0D;AACxD,cAAM,IAAIC,KAAJ,CACJ,kFACE,OAAOF,MAAM,CAACC,uBAFZ,CAAN;AAID;;AACD,UAAME,KAAK,GAAGH,MAAM,CAACC,uBAAP,CAA+B,IAA/B,CAAd;;AACA,UAAIE,KAAK,KAAK,EAAd,EAAkB;AAChB,cAAM,IAAID,KAAJ,CACJ,gEADI,CAAN;AAGD;;AACD,UAAIE,WAAJ;;AACA,UAAI;AACFJ,QAAAA,MAAM,CAACC,uBAAP,CAA+B,GAA/B;AACD,OAFD,CAEE,OAAOI,CAAP,EAAU;AACVD,QAAAA,WAAW,GAAGC,CAAd;AACD;;AACD,UAAI,CAACD,WAAL,EAAkB;AAChB,cAAM,IAAIF,KAAJ,CACJ,6DADI,CAAN;AAGD;;AACD,UAAI,EAAEE,WAAW,YAAYE,WAAzB,CAAJ,EAA2C;AACzC,cAAM,IAAIJ,KAAJ,CACJ,yEADI,CAAN;AAGD;;AACD,UAAMK,GAAG,GAAG,2BAAZ;AACA,UAAIC,KAAJ;;AACA,UAAI;AACFR,QAAAA,MAAM,CAACC,uBAAP,CAA+B,mBAA/B,EAAoDM,GAApD;AACD,OAFD,CAEE,OAAOF,CAAP,EAAU;AACVG,QAAAA,KAAK,GAAGH,CAAR;AACD;;AACD,UAAI,CAACG,KAAL,EAAY;AACV,cAAM,IAAIN,KAAJ,CACJ,2DADI,CAAN;AAGD;;AACD,UAAMO,WAAW,GAAGf,eAAe,CAACc,KAAD,CAAnC;;AACA,UAAIC,WAAW,CAAC,CAAD,CAAX,CAAeC,IAAf,KAAwBH,GAA5B,EAAiC;AAC/B,cAAM,IAAIL,KAAJ,+CACwCK,GADxC,mBACyDI,MAAM,CACjEF,WAAW,CAAC,CAAD,CAAX,CAAeC,IADkD,CAD/D,CAAN;AAKD;;AACDb,MAAAA,UAAU,CAACe,iBAAX;AACD;;;WAED,kBAAqB;AACnB,aAAO,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;;;EAvDuCpB,KAAK,CAACqB,S;;AA0DhDd,2BAA2B,CAACe,WAA5B,GAA0C,6BAA1C;AAEAC,MAAM,CAACC,OAAP,GAAiBjB,2BAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nconst React = require('react');\nconst ReactNative = require('react-native');\nconst parseErrorStack = require('react-native/Libraries/Core/Devtools/parseErrorStack');\nconst {View} = ReactNative;\n\nconst {TestModule} = ReactNative.NativeModules;\n\nclass GlobalEvalWithSourceUrlTest extends React.Component<{...}> {\n  componentDidMount() {\n    if (typeof global.globalEvalWithSourceUrl !== 'function') {\n      throw new Error(\n        'Expected to find globalEvalWithSourceUrl function on global object but found ' +\n          typeof global.globalEvalWithSourceUrl,\n      );\n    }\n    const value = global.globalEvalWithSourceUrl('42');\n    if (value !== 42) {\n      throw new Error(\n        'Expected globalEvalWithSourceUrl(expression) to return a value',\n      );\n    }\n    let syntaxError;\n    try {\n      global.globalEvalWithSourceUrl('{');\n    } catch (e) {\n      syntaxError = e;\n    }\n    if (!syntaxError) {\n      throw new Error(\n        'Expected globalEvalWithSourceUrl to throw on a syntax error',\n      );\n    }\n    if (!(syntaxError instanceof SyntaxError)) {\n      throw new Error(\n        'Expected globalEvalWithSourceUrl to throw SyntaxError on a syntax error',\n      );\n    }\n    const url = 'http://example.com/foo.js';\n    let error;\n    try {\n      global.globalEvalWithSourceUrl('throw new Error()', url);\n    } catch (e) {\n      error = e;\n    }\n    if (!error) {\n      throw new Error(\n        'Expected globalEvalWithSourceUrl to throw an Error object',\n      );\n    }\n    const parsedStack = parseErrorStack(error);\n    if (parsedStack[0].file !== url) {\n      throw new Error(\n        `Expected first eval stack frame to be in ${url} but found ${String(\n          parsedStack[0].file,\n        )}`,\n      );\n    }\n    TestModule.markTestCompleted();\n  }\n\n  render(): React.Node {\n    return <View />;\n  }\n}\n\nGlobalEvalWithSourceUrlTest.displayName = 'GlobalEvalWithSourceUrlTest';\n\nmodule.exports = GlobalEvalWithSourceUrlTest;\n"]},"metadata":{},"sourceType":"script"}