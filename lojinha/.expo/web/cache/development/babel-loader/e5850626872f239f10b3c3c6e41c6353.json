{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nvar _extends = require(\"@babel/runtime/helpers/extends\");\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nvar _jsxFileName = \"/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/RNTester/js/examples/TextInput/TextInputExample.android.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar React = require('react');\n\nvar Text = require(\"react-native-web/dist/exports/Text\").default;\n\nvar TextInput = require(\"react-native-web/dist/exports/TextInput\").default;\n\nvar View = require(\"react-native-web/dist/exports/View\").default;\n\nvar StyleSheet = require(\"react-native-web/dist/exports/StyleSheet\").default;\n\nvar Switch = require(\"react-native-web/dist/exports/Switch\").default;\n\nvar TextInputSharedExamples = require(\"./TextInputSharedExamples.js\");\n\nvar ToggleDefaultPaddingExample = function (_React$Component) {\n  _inherits(ToggleDefaultPaddingExample, _React$Component);\n\n  var _super = _createSuper(ToggleDefaultPaddingExample);\n\n  function ToggleDefaultPaddingExample(props) {\n    var _this;\n\n    _classCallCheck(this, ToggleDefaultPaddingExample);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      hasPadding: false\n    };\n    return _this;\n  }\n\n  _createClass(ToggleDefaultPaddingExample, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 7\n        }\n      }, React.createElement(TextInput, {\n        style: this.state.hasPadding ? {\n          padding: 0\n        } : null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 9\n        }\n      }), React.createElement(Text, {\n        onPress: function onPress() {\n          return _this2.setState({\n            hasPadding: !_this2.state.hasPadding\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 9\n        }\n      }, \"Toggle padding\"));\n    }\n  }]);\n\n  return ToggleDefaultPaddingExample;\n}(React.Component);\n\nvar AutogrowingTextInputExample = function (_React$Component2) {\n  _inherits(AutogrowingTextInputExample, _React$Component2);\n\n  var _super2 = _createSuper(AutogrowingTextInputExample);\n\n  function AutogrowingTextInputExample(props) {\n    var _this3;\n\n    _classCallCheck(this, AutogrowingTextInputExample);\n\n    _this3 = _super2.call(this, props);\n    _this3.state = {\n      width: 100,\n      multiline: true,\n      text: '',\n      contentSize: {\n        width: 0,\n        height: 0\n      }\n    };\n    return _this3;\n  }\n\n  _createClass(AutogrowingTextInputExample, [{\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(props) {\n      this.setState({\n        multiline: props.multiline\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var _this$props = this.props,\n          style = _this$props.style,\n          multiline = _this$props.multiline,\n          props = _objectWithoutProperties(_this$props, [\"style\", \"multiline\"]);\n\n      return React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 7\n        }\n      }, React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 9\n        }\n      }, \"Width:\"), React.createElement(Slider, {\n        value: 100,\n        minimumValue: 0,\n        maximumValue: 100,\n        step: 10,\n        onValueChange: function onValueChange(value) {\n          return _this4.setState({\n            width: value\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 9\n        }\n      }), React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 9\n        }\n      }, \"Multiline:\"), React.createElement(Switch, {\n        value: this.state.multiline,\n        onValueChange: function onValueChange(value) {\n          return _this4.setState({\n            multiline: value\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 9\n        }\n      }), React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 9\n        }\n      }, \"TextInput:\"), React.createElement(TextInput, _extends({\n        multiline: this.state.multiline,\n        style: [style, {\n          width: this.state.width + '%'\n        }],\n        onChangeText: function onChangeText(value) {\n          return _this4.setState({\n            text: value\n          });\n        },\n        onContentSizeChange: function onContentSizeChange(event) {\n          return _this4.setState({\n            contentSize: event.nativeEvent.contentSize\n          });\n        }\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 9\n        }\n      })), React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 9\n        }\n      }, \"Plain text value representation:\"), React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 9\n        }\n      }, this.state.text), React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 9\n        }\n      }, \"Content Size: \", JSON.stringify(this.state.contentSize)));\n    }\n  }]);\n\n  return AutogrowingTextInputExample;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  multiline: {\n    height: 60,\n    fontSize: 16\n  },\n  singleLine: {\n    fontSize: 16\n  },\n  singleLineWithHeightTextInput: {\n    height: 30\n  }\n});\nexports.title = '<TextInput>';\nexports.description = 'Single and multi-line text inputs.';\nexports.examples = [].concat(_toConsumableArray(TextInputSharedExamples), [{\n  title: 'Colors and text inputs',\n  render: function render() {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }\n    }, React.createElement(TextInput, {\n      style: [styles.singleLine],\n      defaultValue: \"Default color text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }\n    }), React.createElement(TextInput, {\n      style: [styles.singleLine, {\n        color: 'green'\n      }],\n      defaultValue: \"Green Text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 11\n      }\n    }), React.createElement(TextInput, {\n      placeholder: \"Default placeholder text color\",\n      style: styles.singleLine,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 11\n      }\n    }), React.createElement(TextInput, {\n      placeholder: \"Red placeholder text color\",\n      placeholderTextColor: \"red\",\n      style: styles.singleLine,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }\n    }), React.createElement(TextInput, {\n      placeholder: \"Default underline color\",\n      style: styles.singleLine,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 11\n      }\n    }), React.createElement(TextInput, {\n      placeholder: \"Blue underline color\",\n      style: styles.singleLine,\n      underlineColorAndroid: \"blue\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }\n    }), React.createElement(TextInput, {\n      defaultValue: \"Same BackgroundColor as View \",\n      style: [styles.singleLine, {\n        backgroundColor: 'rgba(100, 100, 100, 0.3)'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }\n    }, React.createElement(Text, {\n      style: {\n        backgroundColor: 'rgba(100, 100, 100, 0.3)'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 13\n      }\n    }, \"Darker backgroundColor\")), React.createElement(TextInput, {\n      defaultValue: \"Highlight Color is red\",\n      selectionColor: 'red',\n      style: styles.singleLine,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 11\n      }\n    }));\n  }\n}, {\n  title: 'Text input, themes and heights',\n  render: function render() {\n    return React.createElement(TextInput, {\n      placeholder: \"If you set height, beware of padding set from themes\",\n      style: [styles.singleLineWithHeightTextInput],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }\n    });\n  }\n}, {\n  title: 'letterSpacing',\n  render: function render() {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }\n    }, React.createElement(TextInput, {\n      style: [styles.singleLine, {\n        letterSpacing: 0\n      }],\n      placeholder: \"letterSpacing = 0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 11\n      }\n    }), React.createElement(TextInput, {\n      style: [styles.singleLine, {\n        letterSpacing: 2\n      }],\n      placeholder: \"letterSpacing = 2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 11\n      }\n    }), React.createElement(TextInput, {\n      style: [styles.singleLine, {\n        letterSpacing: 9\n      }],\n      placeholder: \"letterSpacing = 9\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 11\n      }\n    }), React.createElement(TextInput, {\n      style: [styles.singleLine, {\n        letterSpacing: -1\n      }],\n      placeholder: \"letterSpacing = -1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 11\n      }\n    }));\n  }\n}, {\n  title: 'Passwords',\n  render: function render() {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }\n    }, React.createElement(TextInput, {\n      defaultValue: \"iloveturtles\",\n      secureTextEntry: true,\n      style: styles.singleLine,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 11\n      }\n    }), React.createElement(TextInput, {\n      secureTextEntry: true,\n      style: [styles.singleLine, {\n        color: 'red'\n      }],\n      placeholder: \"color is supported too\",\n      placeholderTextColor: \"red\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 11\n      }\n    }));\n  }\n}, {\n  title: 'Editable',\n  render: function render() {\n    return React.createElement(TextInput, {\n      defaultValue: \"Can't touch this! (>'-')> ^(' - ')^ <('-'<) (>'-')> ^(' - ')^\",\n      editable: false,\n      style: styles.singleLine,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }\n    });\n  }\n}, {\n  title: 'Multiline',\n  render: function render() {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 9\n      }\n    }, React.createElement(TextInput, {\n      autoCorrect: true,\n      placeholder: \"multiline, aligned top-left\",\n      placeholderTextColor: \"red\",\n      multiline: true,\n      style: [styles.multiline, {\n        textAlign: 'left',\n        textAlignVertical: 'top'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 11\n      }\n    }), React.createElement(TextInput, {\n      autoCorrect: true,\n      placeholder: \"multiline, aligned center\",\n      placeholderTextColor: \"green\",\n      multiline: true,\n      style: [styles.multiline, {\n        textAlign: 'center',\n        textAlignVertical: 'center'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 11\n      }\n    }), React.createElement(TextInput, {\n      autoCorrect: true,\n      multiline: true,\n      style: [styles.multiline, {\n        color: 'blue'\n      }, {\n        textAlign: 'right',\n        textAlignVertical: 'bottom'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 11\n      }\n    }, React.createElement(Text, {\n      style: styles.multiline,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 13\n      }\n    }, \"multiline with children, aligned bottom-right\")));\n  }\n}, {\n  title: 'Fixed number of lines',\n  platform: 'android',\n  render: function render() {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 9\n      }\n    }, React.createElement(TextInput, {\n      numberOfLines: 2,\n      multiline: true,\n      placeholder: \"Two line input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 11\n      }\n    }), React.createElement(TextInput, {\n      numberOfLines: 5,\n      multiline: true,\n      placeholder: \"Five line input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 11\n      }\n    }));\n  }\n}, {\n  title: 'Auto-expanding',\n  render: function render() {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 9\n      }\n    }, React.createElement(AutogrowingTextInputExample, {\n      enablesReturnKeyAutomatically: true,\n      returnKeyType: \"done\",\n      multiline: true,\n      style: {\n        maxHeight: 400,\n        minHeight: 20,\n        backgroundColor: '#eeeeee'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 11\n      }\n    }, \"generic generic generic\", React.createElement(Text, {\n      style: {\n        fontSize: 6,\n        color: 'red'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 13\n      }\n    }, \"small small small small small small\"), React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 13\n      }\n    }, \"regular regular\"), React.createElement(Text, {\n      style: {\n        fontSize: 30,\n        color: 'green'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 13\n      }\n    }, \"huge huge huge huge huge\"), \"generic generic generic\"));\n  }\n}, {\n  title: 'Return key',\n  render: function render() {\n    var _this5 = this;\n\n    var returnKeyTypes = ['none', 'go', 'search', 'send', 'done', 'previous', 'next'];\n    var returnKeyLabels = ['Compile', 'React Native'];\n    var examples = returnKeyTypes.map(function (type) {\n      return React.createElement(TextInput, {\n        key: type,\n        returnKeyType: type,\n        placeholder: 'returnKeyType: ' + type,\n        style: styles.singleLine,\n        __self: _this5,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 11\n        }\n      });\n    });\n    var types = returnKeyLabels.map(function (type) {\n      return React.createElement(TextInput, {\n        key: type,\n        returnKeyLabel: type,\n        placeholder: 'returnKeyLabel: ' + type,\n        style: styles.singleLine,\n        __self: _this5,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 11\n        }\n      });\n    });\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 9\n      }\n    }, examples, types);\n  }\n}, {\n  title: 'Inline Images',\n  render: function render() {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 9\n      }\n    }, React.createElement(TextInput, {\n      inlineImageLeft: \"ic_menu_black_24dp\",\n      placeholder: \"This has drawableLeft set\",\n      style: styles.singleLine,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 11\n      }\n    }), React.createElement(TextInput, {\n      inlineImageLeft: \"ic_menu_black_24dp\",\n      inlineImagePadding: 30,\n      placeholder: \"This has drawableLeft and drawablePadding set\",\n      style: styles.singleLine,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 11\n      }\n    }), React.createElement(TextInput, {\n      placeholder: \"This does not have drawable props set\",\n      style: styles.singleLine,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 11\n      }\n    }));\n  }\n}, {\n  title: 'Toggle Default Padding',\n  render: function render() {\n    return React.createElement(ToggleDefaultPaddingExample, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 14\n      }\n    });\n  }\n}]);","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/RNTester/js/examples/TextInput/TextInputExample.android.js"],"names":["React","require","TextInputSharedExamples","ToggleDefaultPaddingExample","props","state","hasPadding","padding","setState","Component","AutogrowingTextInputExample","width","multiline","text","contentSize","height","style","value","event","nativeEvent","JSON","stringify","styles","StyleSheet","create","fontSize","singleLine","singleLineWithHeightTextInput","exports","title","description","examples","render","color","backgroundColor","letterSpacing","textAlign","textAlignVertical","platform","maxHeight","minHeight","returnKeyTypes","returnKeyLabels","map","type","types"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst React = require('react');\n\nconst {\n  Text,\n  TextInput,\n  View,\n  StyleSheet,\n  Slider,\n  Switch,\n} = require('react-native');\n\nconst TextInputSharedExamples = require('./TextInputSharedExamples.js');\n\nimport type {RNTesterExampleModuleItem} from '../../types/RNTesterTypes';\n\nclass ToggleDefaultPaddingExample extends React.Component<\n  $FlowFixMeProps,\n  $FlowFixMeState,\n> {\n  constructor(props) {\n    super(props);\n    this.state = {hasPadding: false};\n  }\n  render() {\n    return (\n      <View>\n        <TextInput style={this.state.hasPadding ? {padding: 0} : null} />\n        <Text\n          onPress={() => this.setState({hasPadding: !this.state.hasPadding})}>\n          Toggle padding\n        </Text>\n      </View>\n    );\n  }\n}\n\nclass AutogrowingTextInputExample extends React.Component<{...}> {\n  constructor(props) {\n    super(props);\n\n    /* $FlowFixMe(>=0.78.0 site=react_native_android_fb) This issue was found\n     * when making Flow check .android.js files. */\n    this.state = {\n      width: 100,\n      multiline: true,\n      text: '',\n      contentSize: {\n        width: 0,\n        height: 0,\n      },\n    };\n  }\n\n  UNSAFE_componentWillReceiveProps(props) {\n    /* $FlowFixMe(>=0.78.0 site=react_native_android_fb) This issue was found\n     * when making Flow check .android.js files. */\n    this.setState({\n      /* $FlowFixMe(>=0.78.0 site=react_native_android_fb) This issue was found\n       * when making Flow check .android.js files. */\n      multiline: props.multiline,\n    });\n  }\n\n  render() {\n    /* $FlowFixMe(>=0.78.0 site=react_native_android_fb) This issue was found\n     * when making Flow check .android.js files. */\n    const {style, multiline, ...props} = this.props;\n    return (\n      <View>\n        <Text>Width:</Text>\n        <Slider\n          value={100}\n          minimumValue={0}\n          maximumValue={100}\n          step={10}\n          /* $FlowFixMe(>=0.78.0 site=react_native_android_fb) This issue was\n           * found when making Flow check .android.js files. */\n          onValueChange={value => this.setState({width: value})}\n        />\n        <Text>Multiline:</Text>\n        <Switch\n          /* $FlowFixMe(>=0.78.0 site=react_native_android_fb) This issue was\n           * found when making Flow check .android.js files. */\n          value={this.state.multiline}\n          /* $FlowFixMe(>=0.78.0 site=react_native_android_fb) This issue was\n           * found when making Flow check .android.js files. */\n          onValueChange={value => this.setState({multiline: value})}\n        />\n        <Text>TextInput:</Text>\n        {/* $FlowFixMe(>=0.122.0 site=react_native_android_fb) This comment\n         * suppresses an error found when Flow v0.122.0 was deployed. To see\n         * the error, delete this comment and run Flow. */}\n        <TextInput\n          /* $FlowFixMe(>=0.78.0 site=react_native_android_fb) This issue was\n           * found when making Flow check .android.js files. */\n          multiline={this.state.multiline}\n          /* $FlowFixMe(>=0.78.0 site=react_native_android_fb) This issue was\n           * found when making Flow check .android.js files. */\n          style={[style, {width: this.state.width + '%'}]}\n          /* $FlowFixMe(>=0.78.0 site=react_native_android_fb) This issue was\n           * found when making Flow check .android.js files. */\n          onChangeText={value => this.setState({text: value})}\n          onContentSizeChange={event =>\n            /* $FlowFixMe(>=0.78.0 site=react_native_android_fb) This issue was\n             * found when making Flow check .android.js files. */\n            this.setState({contentSize: event.nativeEvent.contentSize})\n          }\n          {...props}\n        />\n        <Text>Plain text value representation:</Text>\n        {/* $FlowFixMe(>=0.78.0 site=react_native_android_fb) This issue was\n         * found when making Flow check .android.js files. */}\n        <Text>{this.state.text}</Text>\n        {/* $FlowFixMe(>=0.78.0 site=react_native_android_fb) This issue was\n         * found when making Flow check .android.js files. */}\n        <Text>Content Size: {JSON.stringify(this.state.contentSize)}</Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  multiline: {\n    height: 60,\n    fontSize: 16,\n  },\n  singleLine: {\n    fontSize: 16,\n  },\n  singleLineWithHeightTextInput: {\n    height: 30,\n  },\n});\n\nexports.title = '<TextInput>';\nexports.description = 'Single and multi-line text inputs.';\nexports.examples = ([\n  ...TextInputSharedExamples,\n  {\n    title: 'Colors and text inputs',\n    render: function(): React.Node {\n      return (\n        <View>\n          <TextInput\n            style={[styles.singleLine]}\n            defaultValue=\"Default color text\"\n          />\n          <TextInput\n            style={[styles.singleLine, {color: 'green'}]}\n            defaultValue=\"Green Text\"\n          />\n          <TextInput\n            placeholder=\"Default placeholder text color\"\n            style={styles.singleLine}\n          />\n          <TextInput\n            placeholder=\"Red placeholder text color\"\n            placeholderTextColor=\"red\"\n            style={styles.singleLine}\n          />\n          <TextInput\n            placeholder=\"Default underline color\"\n            style={styles.singleLine}\n          />\n          <TextInput\n            placeholder=\"Blue underline color\"\n            style={styles.singleLine}\n            underlineColorAndroid=\"blue\"\n          />\n          <TextInput\n            defaultValue=\"Same BackgroundColor as View \"\n            style={[\n              styles.singleLine,\n              {backgroundColor: 'rgba(100, 100, 100, 0.3)'},\n            ]}>\n            <Text style={{backgroundColor: 'rgba(100, 100, 100, 0.3)'}}>\n              Darker backgroundColor\n            </Text>\n          </TextInput>\n          <TextInput\n            defaultValue=\"Highlight Color is red\"\n            selectionColor={'red'}\n            style={styles.singleLine}\n          />\n        </View>\n      );\n    },\n  },\n  {\n    title: 'Text input, themes and heights',\n    render: function(): React.Node {\n      return (\n        <TextInput\n          placeholder=\"If you set height, beware of padding set from themes\"\n          style={[styles.singleLineWithHeightTextInput]}\n        />\n      );\n    },\n  },\n  {\n    title: 'letterSpacing',\n    render: function(): React.Node {\n      return (\n        <View>\n          <TextInput\n            style={[styles.singleLine, {letterSpacing: 0}]}\n            placeholder=\"letterSpacing = 0\"\n          />\n          <TextInput\n            style={[styles.singleLine, {letterSpacing: 2}]}\n            placeholder=\"letterSpacing = 2\"\n          />\n          <TextInput\n            style={[styles.singleLine, {letterSpacing: 9}]}\n            placeholder=\"letterSpacing = 9\"\n          />\n          <TextInput\n            style={[styles.singleLine, {letterSpacing: -1}]}\n            placeholder=\"letterSpacing = -1\"\n          />\n        </View>\n      );\n    },\n  },\n  {\n    title: 'Passwords',\n    render: function(): React.Node {\n      return (\n        <View>\n          <TextInput\n            defaultValue=\"iloveturtles\"\n            secureTextEntry={true}\n            style={styles.singleLine}\n          />\n          <TextInput\n            secureTextEntry={true}\n            style={[styles.singleLine, {color: 'red'}]}\n            placeholder=\"color is supported too\"\n            placeholderTextColor=\"red\"\n          />\n        </View>\n      );\n    },\n  },\n  {\n    title: 'Editable',\n    render: function(): React.Node {\n      return (\n        <TextInput\n          defaultValue=\"Can't touch this! (>'-')> ^(' - ')^ <('-'<) (>'-')> ^(' - ')^\"\n          editable={false}\n          style={styles.singleLine}\n        />\n      );\n    },\n  },\n  {\n    title: 'Multiline',\n    render: function(): React.Node {\n      return (\n        <View>\n          <TextInput\n            autoCorrect={true}\n            placeholder=\"multiline, aligned top-left\"\n            placeholderTextColor=\"red\"\n            multiline={true}\n            style={[\n              styles.multiline,\n              {textAlign: 'left', textAlignVertical: 'top'},\n            ]}\n          />\n          <TextInput\n            autoCorrect={true}\n            placeholder=\"multiline, aligned center\"\n            placeholderTextColor=\"green\"\n            multiline={true}\n            style={[\n              styles.multiline,\n              {textAlign: 'center', textAlignVertical: 'center'},\n            ]}\n          />\n          <TextInput\n            autoCorrect={true}\n            multiline={true}\n            style={[\n              styles.multiline,\n              {color: 'blue'},\n              {textAlign: 'right', textAlignVertical: 'bottom'},\n            ]}>\n            <Text style={styles.multiline}>\n              multiline with children, aligned bottom-right\n            </Text>\n          </TextInput>\n        </View>\n      );\n    },\n  },\n  {\n    title: 'Fixed number of lines',\n    platform: 'android',\n    render: function(): React.Node {\n      return (\n        <View>\n          <TextInput\n            numberOfLines={2}\n            multiline={true}\n            placeholder=\"Two line input\"\n          />\n          <TextInput\n            numberOfLines={5}\n            multiline={true}\n            placeholder=\"Five line input\"\n          />\n        </View>\n      );\n    },\n  },\n  {\n    title: 'Auto-expanding',\n    render: function(): React.Node {\n      return (\n        <View>\n          <AutogrowingTextInputExample\n            enablesReturnKeyAutomatically={true}\n            returnKeyType=\"done\"\n            multiline={true}\n            style={{maxHeight: 400, minHeight: 20, backgroundColor: '#eeeeee'}}>\n            generic generic generic\n            <Text style={{fontSize: 6, color: 'red'}}>\n              small small small small small small\n            </Text>\n            <Text>regular regular</Text>\n            <Text style={{fontSize: 30, color: 'green'}}>\n              huge huge huge huge huge\n            </Text>\n            generic generic generic\n          </AutogrowingTextInputExample>\n        </View>\n      );\n    },\n  },\n  {\n    title: 'Return key',\n    render: function(): React.Node {\n      const returnKeyTypes = [\n        'none',\n        'go',\n        'search',\n        'send',\n        'done',\n        'previous',\n        'next',\n      ];\n      const returnKeyLabels = ['Compile', 'React Native'];\n      const examples = returnKeyTypes.map(type => {\n        return (\n          <TextInput\n            key={type}\n            returnKeyType={type}\n            placeholder={'returnKeyType: ' + type}\n            style={styles.singleLine}\n          />\n        );\n      });\n      const types = returnKeyLabels.map(type => {\n        return (\n          <TextInput\n            key={type}\n            returnKeyLabel={type}\n            placeholder={'returnKeyLabel: ' + type}\n            style={styles.singleLine}\n          />\n        );\n      });\n      return (\n        <View>\n          {examples}\n          {types}\n        </View>\n      );\n    },\n  },\n  {\n    title: 'Inline Images',\n    render: function(): React.Node {\n      return (\n        <View>\n          <TextInput\n            inlineImageLeft=\"ic_menu_black_24dp\"\n            placeholder=\"This has drawableLeft set\"\n            style={styles.singleLine}\n          />\n          <TextInput\n            inlineImageLeft=\"ic_menu_black_24dp\"\n            inlineImagePadding={30}\n            placeholder=\"This has drawableLeft and drawablePadding set\"\n            style={styles.singleLine}\n          />\n          <TextInput\n            placeholder=\"This does not have drawable props set\"\n            style={styles.singleLine}\n          />\n        </View>\n      );\n    },\n  },\n  {\n    title: 'Toggle Default Padding',\n    render: function(): React.Node {\n      return <ToggleDefaultPaddingExample />;\n    },\n  },\n]: Array<RNTesterExampleModuleItem>);\n"]},"metadata":{},"sourceType":"script"}