{"ast":null,"code":"import { XcodeProject } from 'xcode';\nimport { AndroidManifest } from \"./android/Manifest\";\nimport { ExpoPlist, InfoPlist } from \"./ios/IosConfig.types\";\nexport { XcodeProject, InfoPlist, ExpoPlist, AndroidManifest };","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@expo/config-plugins/build/Plugin.types.d.ts"],"names":["XcodeProject","AndroidManifest","ExpoPlist","InfoPlist"],"mappings":"AAEA,SAASA,YAAT,QAA6B,OAA7B;AACA,SAASC,eAAT;AAGA,SAASC,SAAT,EAAoBC,SAApB;AA4FA,SAASH,YAAT,EAAuBG,SAAvB,EAAkCD,SAAlC,EAA6CD,eAA7C","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport { JSONObject } from '@expo/json-file';\nimport { XcodeProject } from 'xcode';\nimport { AndroidManifest } from './android/Manifest';\nimport * as AndroidPaths from './android/Paths';\nimport { ResourceXML } from './android/Resources';\nimport { ExpoPlist, InfoPlist } from './ios/IosConfig.types';\ndeclare type OptionalPromise<T> = Promise<T> | T;\ndeclare type Plist = JSONObject;\nexport interface ModProps<T = any> {\n    /**\n     * Project root directory for the universal app.\n     */\n    readonly projectRoot: string;\n    /**\n     * Project root for the specific platform.\n     */\n    readonly platformProjectRoot: string;\n    /**\n     * Name of the mod.\n     */\n    readonly modName: string;\n    /**\n     * Name of the platform used in the mods config.\n     */\n    readonly platform: ModPlatform;\n    /**\n     * [iOS]: The path component used for querying project files.\n     *\n     * @example projectRoot/ios/[projectName]/\n     */\n    readonly projectName?: string;\n    nextMod?: Mod<T>;\n}\nexport interface ExportedConfig extends ExpoConfig {\n    mods?: ModConfig | null;\n}\nexport interface ExportedConfigWithProps<Data = any> extends ExpoConfig {\n    /**\n     * The Object representation of a complex file type.\n     */\n    modResults: Data;\n    modRequest: ModProps<Data>;\n}\nexport declare type ConfigPlugin<Props = void> = (config: ExpoConfig, props: Props) => ExpoConfig;\nexport declare type StaticPlugin<T = any> = [string | ConfigPlugin<T>, T];\nexport declare type Mod<Props = any> = (config: ExportedConfigWithProps<Props>) => OptionalPromise<ExportedConfigWithProps<Props>>;\nexport interface ModConfig {\n    android?: {\n        /**\n         * Modify the `android/app/src/main/AndroidManifest.xml` as JSON (parsed with [`xml2js`](https://www.npmjs.com/package/xml2js)).\n         */\n        manifest?: Mod<AndroidManifest>;\n        /**\n         * Modify the `android/app/src/main/res/values/strings.xml` as JSON (parsed with [`xml2js`](https://www.npmjs.com/package/xml2js)).\n         */\n        strings?: Mod<ResourceXML>;\n        /**\n         * Modify the `android/app/src/main/<package>/MainActivity.java` as a string.\n         */\n        mainActivity?: Mod<AndroidPaths.ApplicationProjectFile>;\n        /**\n         * Modify the `android/app/build.gradle` as a string.\n         */\n        appBuildGradle?: Mod<AndroidPaths.GradleProjectFile>;\n        /**\n         * Modify the `android/build.gradle` as a string.\n         */\n        projectBuildGradle?: Mod<AndroidPaths.GradleProjectFile>;\n        /**\n         * Modify the `android/settings.gradle` as a string.\n         */\n        settingsGradle?: Mod<AndroidPaths.GradleProjectFile>;\n    };\n    ios?: {\n        /**\n         * Modify the `ios/<name>/Info.plist` as JSON (parsed with [`@expo/plist`](https://www.npmjs.com/package/@expo/plist)).\n         */\n        infoPlist?: Mod<InfoPlist>;\n        /**\n         * Modify the `ios/<name>/<product-name>.entitlements` as JSON (parsed with [`@expo/plist`](https://www.npmjs.com/package/@expo/plist)).\n         */\n        entitlements?: Mod<Plist>;\n        /**\n         * Modify the `ios/<name>/Expo.plist` as JSON (Expo updates config for iOS) (parsed with [`@expo/plist`](https://www.npmjs.com/package/@expo/plist)).\n         */\n        expoPlist?: Mod<Plist>;\n        /**\n         * Modify the `ios/<name>.xcodeproj` as an `XcodeProject` (parsed with [`xcode`](https://www.npmjs.com/package/xcode))\n         */\n        xcodeproj?: Mod<XcodeProject>;\n        /**\n         * Modify the `ios/<name>/AppDelegate.m` as a string (dangerous)\n         */\n        appDelegate?: Mod<XcodeProject>;\n    };\n}\nexport declare type ModPlatform = keyof ModConfig;\nexport { XcodeProject, InfoPlist, ExpoPlist, AndroidManifest };\n"]},"metadata":{},"sourceType":"module"}