{"ast":null,"code":"\"use strict\";\n\nvar _extends = require(\"@babel/runtime/helpers/extends\");\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ios_plugins_1 = require(\"../plugins/ios-plugins\");\n\nexports.withAdMob = ios_plugins_1.createInfoPlistPlugin(setAdMobConfig, 'withAdMob');\n\nfunction getGoogleMobileAdsAppId(config) {\n  var _a, _b, _c;\n\n  return (_c = (_b = (_a = config.ios) === null || _a === void 0 ? void 0 : _a.config) === null || _b === void 0 ? void 0 : _b.googleMobileAdsAppId) !== null && _c !== void 0 ? _c : null;\n}\n\nexports.getGoogleMobileAdsAppId = getGoogleMobileAdsAppId;\n\nfunction setGoogleMobileAdsAppId(config, _a) {\n  var GADApplicationIdentifier = _a.GADApplicationIdentifier,\n      infoPlist = __rest(_a, [\"GADApplicationIdentifier\"]);\n\n  var appId = getGoogleMobileAdsAppId(config);\n\n  if (appId === null) {\n    return infoPlist;\n  }\n\n  return _extends(_extends({}, infoPlist), {\n    GADApplicationIdentifier: appId\n  });\n}\n\nexports.setGoogleMobileAdsAppId = setGoogleMobileAdsAppId;\n\nfunction setAdMobConfig(config, infoPlist) {\n  infoPlist = setGoogleMobileAdsAppId(config, infoPlist);\n  return infoPlist;\n}","map":{"version":3,"sources":["../../src/ios/AdMob.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAEA,IAAA,aAAA,GAAA,OAAA,0BAAA;;AAGa,OAAA,CAAA,SAAA,GAAY,aAAA,CAAA,qBAAA,CAAsB,cAAtB,EAAsC,WAAtC,CAAZ;;AASb,SAAgB,uBAAhB,CAAwC,MAAxC,EAAuE;;;AACrE,SAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAO,MAAM,CAAC,GAAd,MAAiB,IAAjB,IAAiB,EAAA,KAAA,KAAA,CAAjB,GAAiB,KAAA,CAAjB,GAAiB,EAAA,CAAE,MAAnB,MAAyB,IAAzB,IAAyB,EAAA,KAAA,KAAA,CAAzB,GAAyB,KAAA,CAAzB,GAAyB,EAAA,CAAE,oBAA3B,MAA+C,IAA/C,IAA+C,EAAA,KAAA,KAAA,CAA/C,GAA+C,EAA/C,GAAmD,IAAnD;AACD;;AAFD,OAAA,CAAA,uBAAA,GAAA,uBAAA;;AAIA,SAAgB,uBAAhB,CACE,MADF,EAEE,EAFF,EAEuD;AAArD,MAAE,wBAAF,GAA0B,EAA1B,CAAE,wBAAF;AAAA,MAA4B,SAA5B,GAA4B,MAAA,CAAA,EAAA,EAAA,CAAA,0BAAA,CAAA,CAA5B;;AAEA,MAAM,KAAK,GAAG,uBAAuB,CAAC,MAAD,CAArC;;AAEA,MAAI,KAAK,KAAK,IAAd,EAAoB;AAClB,WAAO,SAAP;AACD;;AAED,SAAA,SAAA,SAAA,EAAA,EACK,SADL,CAAA,EACc;AACZ,IAAA,wBAAwB,EAAE;AADd,GADd,CAAA;AAID;;AAdD,OAAA,CAAA,uBAAA,GAAA,uBAAA;;AAgBA,SAAS,cAAT,CAAwB,MAAxB,EAAyD,SAAzD,EAA6E;AAC3E,EAAA,SAAS,GAAG,uBAAuB,CAAC,MAAD,EAAS,SAAT,CAAnC;AACA,SAAO,SAAP;AACD","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { createInfoPlistPlugin } from '../plugins/ios-plugins';\nimport { InfoPlist } from './IosConfig.types';\n\nexport const withAdMob = createInfoPlistPlugin(setAdMobConfig, 'withAdMob');\n\n// NOTE(brentvatne): if the developer has installed the google ads sdk and does\n// not provide an app id their app will crash. Standalone apps get around this by\n// providing some default value, we will instead here assume that the user can\n// do the right thing if they have installed the package. This is a slight discrepancy\n// that arises in ejecting because it's possible for the package to be installed and\n// not crashing in the managed workflow, then you eject and the app crashes because\n// you don't have an id to fall back to.\nexport function getGoogleMobileAdsAppId(config: Pick<ExpoConfig, 'ios'>) {\n  return config.ios?.config?.googleMobileAdsAppId ?? null;\n}\n\nexport function setGoogleMobileAdsAppId(\n  config: Pick<ExpoConfig, 'ios'>,\n  { GADApplicationIdentifier, ...infoPlist }: InfoPlist\n): InfoPlist {\n  const appId = getGoogleMobileAdsAppId(config);\n\n  if (appId === null) {\n    return infoPlist;\n  }\n\n  return {\n    ...infoPlist,\n    GADApplicationIdentifier: appId,\n  };\n}\n\nfunction setAdMobConfig(config: Pick<ExpoConfig, 'ios'>, infoPlist: InfoPlist): InfoPlist {\n  infoPlist = setGoogleMobileAdsAppId(config, infoPlist);\n  return infoPlist;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}