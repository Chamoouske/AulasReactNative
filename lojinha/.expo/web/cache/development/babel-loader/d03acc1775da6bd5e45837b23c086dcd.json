{"ast":null,"code":"'use strict';\n\nvar template = \"\\n/**\\n * Copyright (c) Facebook, Inc. and its affiliates.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n */\\n\\n#pragma once\\n\\n::_IMPORTS_::#include <react/components/::_LIBRARY_::/Props.h>\\n#include <react/components/view/ConcreteViewShadowNode.h>\\n\\nnamespace facebook {\\nnamespace react {\\n\\n::_COMPONENT_CLASSES_::\\n\\n} // namespace react\\n} // namespace facebook\\n\";\nvar componentTemplate = \"\\nextern const char ::_CLASSNAME_::ComponentName[];\\n\\n/*\\n * `ShadowNode` for <::_CLASSNAME_::> component.\\n */\\nusing ::_CLASSNAME_::ShadowNode = ConcreteViewShadowNode<\\n    ::_CLASSNAME_::ComponentName,\\n    ::_CLASSNAME_::Props::_EVENT_EMITTER_::>;\\n\".trim();\nmodule.exports = {\n  generate: function generate(libraryName, schema, moduleSpecName) {\n    var fileName = 'ShadowNodes.h';\n    var hasAnyEvents = false;\n    var moduleResults = Object.keys(schema.modules).map(function (moduleName) {\n      var components = schema.modules[moduleName].components;\n\n      if (components == null) {\n        return null;\n      }\n\n      return Object.keys(components).map(function (componentName) {\n        var component = components[componentName];\n\n        if (component.interfaceOnly === true) {\n          return;\n        }\n\n        var hasEvents = component.events.length > 0;\n\n        if (hasEvents) {\n          hasAnyEvents = true;\n        }\n\n        var eventEmitter = hasEvents ? \",\\n\" + componentName + \"EventEmitter\" : '';\n        var replacedTemplate = componentTemplate.replace(/::_CLASSNAME_::/g, componentName).replace('::_EVENT_EMITTER_::', eventEmitter);\n        return replacedTemplate;\n      }).join('\\n\\n');\n    }).filter(Boolean).join('\\n\\n');\n    var eventEmitterImport = \"#include <react/components/\" + libraryName + \"/EventEmitters.h>\\n\";\n    var replacedTemplate = template.replace(/::_COMPONENT_CLASSES_::/g, moduleResults).replace('::_LIBRARY_::', libraryName).replace('::_IMPORTS_::', hasAnyEvents ? eventEmitterImport : '');\n    return new Map([[fileName, replacedTemplate]]);\n  }\n};","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/packages/react-native-codegen/src/generators/components/GenerateShadowNodeH.js"],"names":["template","componentTemplate","trim","module","exports","generate","libraryName","schema","moduleSpecName","fileName","hasAnyEvents","moduleResults","Object","keys","modules","map","moduleName","components","componentName","component","interfaceOnly","hasEvents","events","length","eventEmitter","replacedTemplate","replace","join","filter","Boolean","eventEmitterImport","Map"],"mappings":"AAUA;;AAOA,IAAMA,QAAQ,8cAAd;AAsBA,IAAMC,iBAAiB,GAAG,kQASxBC,IATwB,EAA1B;AAWAC,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,QADe,oBAEbC,WAFa,EAGbC,MAHa,EAIbC,cAJa,EAKA;AACb,QAAMC,QAAQ,GAAG,eAAjB;AAEA,QAAIC,YAAY,GAAG,KAAnB;AAEA,QAAMC,aAAa,GAAGC,MAAM,CAACC,IAAP,CAAYN,MAAM,CAACO,OAAnB,EACnBC,GADmB,CACf,UAAAC,UAAU,EAAI;AACjB,UAAMC,UAAU,GAAGV,MAAM,CAACO,OAAP,CAAeE,UAAf,EAA2BC,UAA9C;;AAEA,UAAIA,UAAU,IAAI,IAAlB,EAAwB;AACtB,eAAO,IAAP;AACD;;AAED,aAAOL,MAAM,CAACC,IAAP,CAAYI,UAAZ,EACJF,GADI,CACA,UAAAG,aAAa,EAAI;AACpB,YAAMC,SAAS,GAAGF,UAAU,CAACC,aAAD,CAA5B;;AACA,YAAIC,SAAS,CAACC,aAAV,KAA4B,IAAhC,EAAsC;AACpC;AACD;;AAED,YAAMC,SAAS,GAAGF,SAAS,CAACG,MAAV,CAAiBC,MAAjB,GAA0B,CAA5C;;AAEA,YAAIF,SAAJ,EAAe;AACbX,UAAAA,YAAY,GAAG,IAAf;AACD;;AAED,YAAMc,YAAY,GAAGH,SAAS,WACpBH,aADoB,oBAE1B,EAFJ;AAIA,YAAMO,gBAAgB,GAAGxB,iBAAiB,CACvCyB,OADsB,CACd,kBADc,EACMR,aADN,EAEtBQ,OAFsB,CAEd,qBAFc,EAESF,YAFT,CAAzB;AAIA,eAAOC,gBAAP;AACD,OAtBI,EAuBJE,IAvBI,CAuBC,MAvBD,CAAP;AAwBD,KAhCmB,EAiCnBC,MAjCmB,CAiCZC,OAjCY,EAkCnBF,IAlCmB,CAkCd,MAlCc,CAAtB;AAoCA,QAAMG,kBAAkB,mCAAiCxB,WAAjC,wBAAxB;AAEA,QAAMmB,gBAAgB,GAAGzB,QAAQ,CAC9B0B,OADsB,CACd,0BADc,EACcf,aADd,EAEtBe,OAFsB,CAEd,eAFc,EAEGpB,WAFH,EAGtBoB,OAHsB,CAGd,eAHc,EAGGhB,YAAY,GAAGoB,kBAAH,GAAwB,EAHvC,CAAzB;AAKA,WAAO,IAAIC,GAAJ,CAAQ,CAAC,CAACtB,QAAD,EAAWgB,gBAAX,CAAD,CAAR,CAAP;AACD;AAtDc,CAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\n'use strict';\n\nimport type {SchemaType} from '../../CodegenSchema';\n\n// File path -> contents\ntype FilesOutput = Map<string, string>;\n\nconst template = `\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n#pragma once\n\n::_IMPORTS_::#include <react/components/::_LIBRARY_::/Props.h>\n#include <react/components/view/ConcreteViewShadowNode.h>\n\nnamespace facebook {\nnamespace react {\n\n::_COMPONENT_CLASSES_::\n\n} // namespace react\n} // namespace facebook\n`;\n\nconst componentTemplate = `\nextern const char ::_CLASSNAME_::ComponentName[];\n\n/*\n * \\`ShadowNode\\` for <::_CLASSNAME_::> component.\n */\nusing ::_CLASSNAME_::ShadowNode = ConcreteViewShadowNode<\n    ::_CLASSNAME_::ComponentName,\n    ::_CLASSNAME_::Props::_EVENT_EMITTER_::>;\n`.trim();\n\nmodule.exports = {\n  generate(\n    libraryName: string,\n    schema: SchemaType,\n    moduleSpecName: string,\n  ): FilesOutput {\n    const fileName = 'ShadowNodes.h';\n\n    let hasAnyEvents = false;\n\n    const moduleResults = Object.keys(schema.modules)\n      .map(moduleName => {\n        const components = schema.modules[moduleName].components;\n        // No components in this module\n        if (components == null) {\n          return null;\n        }\n\n        return Object.keys(components)\n          .map(componentName => {\n            const component = components[componentName];\n            if (component.interfaceOnly === true) {\n              return;\n            }\n\n            const hasEvents = component.events.length > 0;\n\n            if (hasEvents) {\n              hasAnyEvents = true;\n            }\n\n            const eventEmitter = hasEvents\n              ? `,\\n${componentName}EventEmitter`\n              : '';\n\n            const replacedTemplate = componentTemplate\n              .replace(/::_CLASSNAME_::/g, componentName)\n              .replace('::_EVENT_EMITTER_::', eventEmitter);\n\n            return replacedTemplate;\n          })\n          .join('\\n\\n');\n      })\n      .filter(Boolean)\n      .join('\\n\\n');\n\n    const eventEmitterImport = `#include <react/components/${libraryName}/EventEmitters.h>\\n`;\n\n    const replacedTemplate = template\n      .replace(/::_COMPONENT_CLASSES_::/g, moduleResults)\n      .replace('::_LIBRARY_::', libraryName)\n      .replace('::_IMPORTS_::', hasAnyEvents ? eventEmitterImport : '');\n\n    return new Map([[fileName, replacedTemplate]]);\n  },\n};\n"]},"metadata":{},"sourceType":"script"}