{"ast":null,"code":"import { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\n\nfunction isScreenReaderEnabled() {\n  return new Promise(function (resolve, reject) {\n    resolve(true);\n  });\n}\n\nvar prefersReducedMotionMedia = canUseDOM ? window.matchMedia('(prefers-reduced-motion: reduce)') : null;\n\nfunction isReduceMotionEnabled() {\n  return new Promise(function (resolve, reject) {\n    resolve(prefersReducedMotionMedia ? prefersReducedMotionMedia.matches : true);\n  });\n}\n\nvar handlers = {};\nvar AccessibilityInfo = {\n  isScreenReaderEnabled: isScreenReaderEnabled,\n  isReduceMotionEnabled: isReduceMotionEnabled,\n  fetch: isScreenReaderEnabled,\n  addEventListener: function addEventListener(eventName, handler) {\n    if (eventName === 'reduceMotionChanged') {\n      if (!prefersReducedMotionMedia) {\n        return;\n      }\n\n      var listener = function listener(event) {\n        handler(event.matches);\n      };\n\n      prefersReducedMotionMedia.addEventListener('change', listener);\n      handlers[handler] = listener;\n    }\n\n    return {\n      remove: function remove() {\n        return AccessibilityInfo.removeEventListener(eventName, handler);\n      }\n    };\n  },\n  setAccessibilityFocus: function setAccessibilityFocus(reactTag) {},\n  announceForAccessibility: function announceForAccessibility(announcement) {},\n  removeEventListener: function removeEventListener(eventName, handler) {\n    if (eventName === 'reduceMotionChanged') {\n      var listener = handlers[handler];\n\n      if (!listener || !prefersReducedMotionMedia) {\n        return;\n      }\n\n      prefersReducedMotionMedia.removeEventListener('change', listener);\n    }\n\n    return;\n  }\n};\nexport default AccessibilityInfo;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native-web/src/exports/AccessibilityInfo/index.js"],"names":["canUseDOM","isScreenReaderEnabled","Promise","resolve","reject","prefersReducedMotionMedia","window","matchMedia","isReduceMotionEnabled","matches","handlers","AccessibilityInfo","fetch","addEventListener","eventName","handler","listener","event","remove","removeEventListener","setAccessibilityFocus","reactTag","announceForAccessibility","announcement"],"mappings":"AASA,SAASA,SAAT,QAA0B,+BAA1B;;AAEA,SAASC,qBAAT,GAA6C;AAC3C,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCD,IAAAA,OAAO,CAAC,IAAD,CAAP;AACD,GAFM,CAAP;AAGD;;AAED,IAAME,yBAAyB,GAAGL,SAAS,GACvCM,MAAM,CAACC,UAAP,CAAkB,kCAAlB,CADuC,GAEvC,IAFJ;;AAGA,SAASC,qBAAT,GAA6C;AAC3C,SAAO,IAAIN,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCD,IAAAA,OAAO,CAACE,yBAAyB,GAAGA,yBAAyB,CAACI,OAA7B,GAAuC,IAAjE,CAAP;AACD,GAFM,CAAP;AAGD;;AAED,IAAMC,QAAQ,GAAG,EAAjB;AAEA,IAAMC,iBAAiB,GAAG;AAOxBV,EAAAA,qBAAqB,EAArBA,qBAPwB;AAexBO,EAAAA,qBAAqB,EAArBA,qBAfwB;AAoBxBI,EAAAA,KAAK,EAAEX,qBApBiB;AAyBxBY,EAAAA,gBAAgB,EAAE,0BAASC,SAAT,EAA4BC,OAA5B,EAAuD;AACvE,QAAID,SAAS,KAAK,qBAAlB,EAAyC;AACvC,UAAI,CAACT,yBAAL,EAAgC;AAC9B;AACD;;AAED,UAAMW,QAAQ,GAAG,SAAXA,QAAW,CAAAC,KAAK,EAAI;AACxBF,QAAAA,OAAO,CAACE,KAAK,CAACR,OAAP,CAAP;AACD,OAFD;;AAGAJ,MAAAA,yBAAyB,CAACQ,gBAA1B,CAA2C,QAA3C,EAAqDG,QAArD;AACAN,MAAAA,QAAQ,CAACK,OAAD,CAAR,GAAoBC,QAApB;AACD;;AAED,WAAO;AACLE,MAAAA,MAAM,EAAE;AAAA,eAAMP,iBAAiB,CAACQ,mBAAlB,CAAsCL,SAAtC,EAAiDC,OAAjD,CAAN;AAAA;AADH,KAAP;AAGD,GAzCuB;AA8CxBK,EAAAA,qBAAqB,EAAE,+BAASC,QAAT,EAAiC,CAAE,CA9ClC;AAmDxBC,EAAAA,wBAAwB,EAAE,kCAASC,YAAT,EAAqC,CAAE,CAnDzC;AAwDxBJ,EAAAA,mBAAmB,EAAE,6BAASL,SAAT,EAA4BC,OAA5B,EAAqD;AACxE,QAAID,SAAS,KAAK,qBAAlB,EAAyC;AACvC,UAAME,QAAQ,GAAGN,QAAQ,CAACK,OAAD,CAAzB;;AACA,UAAI,CAACC,QAAD,IAAa,CAACX,yBAAlB,EAA6C;AAC3C;AACD;;AAEDA,MAAAA,yBAAyB,CAACc,mBAA1B,CAA8C,QAA9C,EAAwDH,QAAxD;AACD;;AAED;AACD;AAnEuB,CAA1B;AAsEA,eAAeL,iBAAf","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\n\nfunction isScreenReaderEnabled(): Promise<*> {\n  return new Promise((resolve, reject) => {\n    resolve(true);\n  });\n}\n\nconst prefersReducedMotionMedia = canUseDOM\n  ? window.matchMedia('(prefers-reduced-motion: reduce)')\n  : null;\nfunction isReduceMotionEnabled(): Promise<*> {\n  return new Promise((resolve, reject) => {\n    resolve(prefersReducedMotionMedia ? prefersReducedMotionMedia.matches : true);\n  });\n}\n\nconst handlers = {};\n\nconst AccessibilityInfo = {\n  /**\n   * Query whether a screen reader is currently enabled.\n   *\n   * Returns a promise which resolves to a boolean.\n   * The result is `true` when a screen reader is enabled and `false` otherwise.\n   */\n  isScreenReaderEnabled,\n\n  /**\n   * Query whether the user prefers reduced motion.\n   *\n   * Returns a promise which resolves to a boolean.\n   * The result is `true` when a screen reader is enabled and `false` otherwise.\n   */\n  isReduceMotionEnabled,\n\n  /**\n   * Deprecated\n   */\n  fetch: isScreenReaderEnabled,\n\n  /**\n   * Add an event handler. Supported events: reduceMotionChanged\n   */\n  addEventListener: function(eventName: string, handler: Function): Object {\n    if (eventName === 'reduceMotionChanged') {\n      if (!prefersReducedMotionMedia) {\n        return;\n      }\n\n      const listener = event => {\n        handler(event.matches);\n      };\n      prefersReducedMotionMedia.addEventListener('change', listener);\n      handlers[handler] = listener;\n    }\n\n    return {\n      remove: () => AccessibilityInfo.removeEventListener(eventName, handler)\n    };\n  },\n\n  /**\n   * Set accessibility focus to a react component.\n   */\n  setAccessibilityFocus: function(reactTag: number): void {},\n\n  /**\n   * Post a string to be announced by the screen reader.\n   */\n  announceForAccessibility: function(announcement: string): void {},\n\n  /**\n   * Remove an event handler.\n   */\n  removeEventListener: function(eventName: string, handler: Function): void {\n    if (eventName === 'reduceMotionChanged') {\n      const listener = handlers[handler];\n      if (!listener || !prefersReducedMotionMedia) {\n        return;\n      }\n\n      prefersReducedMotionMedia.removeEventListener('change', listener);\n    }\n\n    return;\n  }\n};\n\nexport default AccessibilityInfo;\n"]},"metadata":{},"sourceType":"module"}