{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar fs_extra_1 = __importDefault(require(\"fs-extra\"));\n\nvar path_1 = require(\"path\");\n\nvar android_plugins_1 = require(\"../plugins/android-plugins\");\n\nvar core_plugins_1 = require(\"../plugins/core-plugins\");\n\nvar WarningAggregator = __importStar(require(\"../utils/warnings\"));\n\nvar DEFAULT_TARGET_PATH = './android/app/google-services.json';\nvar googleServicesClassPath = 'com.google.gms:google-services';\nvar googleServicesPlugin = 'com.google.gms.google-services';\nvar googleServicesVersion = '4.3.3';\n\nexports.withClassPath = function (config) {\n  return android_plugins_1.withProjectBuildGradle(config, function (config) {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = setClassPath(config, config.modResults.contents);\n    } else {\n      WarningAggregator.addWarningAndroid('android-google-services', \"Cannot automatically configure project build.gradle if it's not groovy\");\n    }\n\n    return config;\n  });\n};\n\nexports.withApplyPlugin = function (config) {\n  return android_plugins_1.withAppBuildGradle(config, function (config) {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = applyPlugin(config, config.modResults.contents);\n    } else {\n      WarningAggregator.addWarningAndroid('android-google-services', \"Cannot automatically configure app build.gradle if it's not groovy\");\n    }\n\n    return config;\n  });\n};\n\nexports.withGoogleServicesFile = function (config) {\n  return core_plugins_1.withDangerousMod(config, ['android', function _callee(config) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(setGoogleServicesFile(config, config.modRequest.projectRoot));\n\n          case 2:\n            return _context.abrupt(\"return\", config);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }]);\n};\n\nfunction getGoogleServicesFilePath(config) {\n  var _a, _b;\n\n  return (_b = (_a = config.android) === null || _a === void 0 ? void 0 : _a.googleServicesFile) !== null && _b !== void 0 ? _b : null;\n}\n\nexports.getGoogleServicesFilePath = getGoogleServicesFilePath;\n\nfunction setGoogleServicesFile(config, projectRoot) {\n  var targetPath,\n      partialSourcePath,\n      completeSourcePath,\n      destinationPath,\n      _args2 = arguments;\n  return _regeneratorRuntime.async(function setGoogleServicesFile$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          targetPath = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : DEFAULT_TARGET_PATH;\n          partialSourcePath = getGoogleServicesFilePath(config);\n\n          if (partialSourcePath) {\n            _context2.next = 4;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", false);\n\n        case 4:\n          completeSourcePath = path_1.resolve(projectRoot, partialSourcePath);\n          destinationPath = path_1.resolve(projectRoot, targetPath);\n          _context2.prev = 6;\n          _context2.next = 9;\n          return _regeneratorRuntime.awrap(fs_extra_1.default.copy(completeSourcePath, destinationPath));\n\n        case 9:\n          _context2.next = 14;\n          break;\n\n        case 11:\n          _context2.prev = 11;\n          _context2.t0 = _context2[\"catch\"](6);\n          throw new Error(\"Cannot copy google-services.json from \" + completeSourcePath + \" to \" + destinationPath + \". Please make sure the source and destination paths exist.\");\n\n        case 14:\n          return _context2.abrupt(\"return\", true);\n\n        case 15:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[6, 11]], Promise);\n}\n\nexports.setGoogleServicesFile = setGoogleServicesFile;\n\nfunction setClassPath(config, buildGradle) {\n  var googleServicesFile = getGoogleServicesFilePath(config);\n\n  if (!googleServicesFile) {\n    return buildGradle;\n  }\n\n  if (buildGradle.includes(googleServicesClassPath)) {\n    return buildGradle;\n  }\n\n  return buildGradle.replace(/dependencies\\s?{/, \"dependencies {\\n        classpath '\" + googleServicesClassPath + \":\" + googleServicesVersion + \"'\");\n}\n\nexports.setClassPath = setClassPath;\n\nfunction applyPlugin(config, appBuildGradle) {\n  var googleServicesFile = getGoogleServicesFilePath(config);\n\n  if (!googleServicesFile) {\n    return appBuildGradle;\n  }\n\n  var pattern = new RegExp(\"apply\\\\s+plugin:\\\\s+['\\\"]\" + googleServicesPlugin + \"['\\\"]\");\n\n  if (appBuildGradle.match(pattern)) {\n    return appBuildGradle;\n  }\n\n  return appBuildGradle + (\"\\napply plugin: '\" + googleServicesPlugin + \"'\");\n}\n\nexports.applyPlugin = applyPlugin;","map":{"version":3,"sources":["../../src/android/GoogleServices.ts"],"names":[],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport fs from 'fs-extra';\nimport { resolve } from 'path';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withAppBuildGradle, withProjectBuildGradle } from '../plugins/android-plugins';\nimport { withDangerousMod } from '../plugins/core-plugins';\nimport * as WarningAggregator from '../utils/warnings';\n\nconst DEFAULT_TARGET_PATH = './android/app/google-services.json';\n\nconst googleServicesClassPath = 'com.google.gms:google-services';\nconst googleServicesPlugin = 'com.google.gms.google-services';\n\n// NOTE(brentvatne): This may be annoying to keep up to date...\nconst googleServicesVersion = '4.3.3';\n\nexport const withClassPath: ConfigPlugin = config => {\n  return withProjectBuildGradle(config, config => {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = setClassPath(config, config.modResults.contents);\n    } else {\n      WarningAggregator.addWarningAndroid(\n        'android-google-services',\n        `Cannot automatically configure project build.gradle if it's not groovy`\n      );\n    }\n    return config;\n  });\n};\n\nexport const withApplyPlugin: ConfigPlugin = config => {\n  return withAppBuildGradle(config, config => {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = applyPlugin(config, config.modResults.contents);\n    } else {\n      WarningAggregator.addWarningAndroid(\n        'android-google-services',\n        `Cannot automatically configure app build.gradle if it's not groovy`\n      );\n    }\n    return config;\n  });\n};\n\n/**\n * Add `google-services.json` to project\n */\nexport const withGoogleServicesFile: ConfigPlugin = config => {\n  return withDangerousMod(config, [\n    'android',\n    async config => {\n      await setGoogleServicesFile(config, config.modRequest.projectRoot);\n      return config;\n    },\n  ]);\n};\n\nexport function getGoogleServicesFilePath(config: Pick<ExpoConfig, 'android'>) {\n  return config.android?.googleServicesFile ?? null;\n}\n\nexport async function setGoogleServicesFile(\n  config: Pick<ExpoConfig, 'android'>,\n  projectRoot: string,\n  targetPath: string = DEFAULT_TARGET_PATH\n) {\n  const partialSourcePath = getGoogleServicesFilePath(config);\n  if (!partialSourcePath) {\n    return false;\n  }\n\n  const completeSourcePath = resolve(projectRoot, partialSourcePath);\n  const destinationPath = resolve(projectRoot, targetPath);\n\n  try {\n    await fs.copy(completeSourcePath, destinationPath);\n  } catch (e) {\n    throw new Error(\n      `Cannot copy google-services.json from ${completeSourcePath} to ${destinationPath}. Please make sure the source and destination paths exist.`\n    );\n  }\n  return true;\n}\n\n/**\n * Adding the Google Services plugin\n * NOTE(brentvatne): string replacement is a fragile approach! we need a\n * better solution than this.\n */\nexport function setClassPath(config: Pick<ExpoConfig, 'android'>, buildGradle: string) {\n  const googleServicesFile = getGoogleServicesFilePath(config);\n  if (!googleServicesFile) {\n    return buildGradle;\n  }\n\n  if (buildGradle.includes(googleServicesClassPath)) {\n    return buildGradle;\n  }\n\n  //\n  return buildGradle.replace(\n    /dependencies\\s?{/,\n    `dependencies {\n        classpath '${googleServicesClassPath}:${googleServicesVersion}'`\n  );\n}\n\nexport function applyPlugin(config: Pick<ExpoConfig, 'android'>, appBuildGradle: string) {\n  const googleServicesFile = getGoogleServicesFilePath(config);\n  if (!googleServicesFile) {\n    return appBuildGradle;\n  }\n\n  // Make sure the project does not have the plugin already\n  const pattern = new RegExp(`apply\\\\s+plugin:\\\\s+['\"]${googleServicesPlugin}['\"]`);\n  if (appBuildGradle.match(pattern)) {\n    return appBuildGradle;\n  }\n\n  // Add it to the end of the file\n  return appBuildGradle + `\\napply plugin: '${googleServicesPlugin}'`;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}