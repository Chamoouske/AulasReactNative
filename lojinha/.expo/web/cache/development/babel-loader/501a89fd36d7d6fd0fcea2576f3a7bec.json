{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport \"./polyfillNextTick\";\nimport customOpenDatabase from '@expo/websql/custom';\nimport { NativeModulesProxy } from '@unimodules/core';\nimport zipObject from 'lodash/zipObject';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar ExponentSQLite = NativeModulesProxy.ExponentSQLite;\n\nvar SQLiteDatabase = function () {\n  function SQLiteDatabase(name) {\n    _classCallCheck(this, SQLiteDatabase);\n\n    this._closed = false;\n    this._name = name;\n  }\n\n  _createClass(SQLiteDatabase, [{\n    key: \"exec\",\n    value: function exec(queries, readOnly, callback) {\n      if (this._closed) {\n        throw new Error(\"The SQLite database is closed\");\n      }\n\n      ExponentSQLite.exec(this._name, queries.map(_serializeQuery), readOnly).then(function (nativeResultSets) {\n        callback(null, nativeResultSets.map(_deserializeResultSet));\n      }, function (error) {\n        callback(error instanceof Error ? error : new Error(error));\n      });\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      this._closed = true;\n      ExponentSQLite.close(this._name);\n    }\n  }]);\n\n  return SQLiteDatabase;\n}();\n\nfunction _serializeQuery(query) {\n  return [query.sql, Platform.OS === 'android' ? query.args.map(_escapeBlob) : query.args];\n}\n\nfunction _deserializeResultSet(nativeResult) {\n  var _nativeResult = _slicedToArray(nativeResult, 5),\n      errorMessage = _nativeResult[0],\n      insertId = _nativeResult[1],\n      rowsAffected = _nativeResult[2],\n      columns = _nativeResult[3],\n      rows = _nativeResult[4];\n\n  if (errorMessage !== null) {\n    return {\n      error: new Error(errorMessage)\n    };\n  }\n\n  return {\n    insertId: insertId,\n    rowsAffected: rowsAffected,\n    rows: rows.map(function (row) {\n      return zipObject(columns, row);\n    })\n  };\n}\n\nfunction _escapeBlob(data) {\n  if (typeof data === 'string') {\n    return data.replace(/\\u0002/g, \"\\x02\\x02\").replace(/\\u0001/g, \"\\x01\\x02\").replace(/\\u0000/g, \"\\x01\\x01\");\n  } else {\n    return data;\n  }\n}\n\nvar _openExpoSQLiteDatabase = customOpenDatabase(SQLiteDatabase);\n\nfunction addExecMethod(db) {\n  db.exec = function (queries, readOnly, callback) {\n    db._db.exec(queries, readOnly, callback);\n  };\n\n  return db;\n}\n\nexport function openDatabase(name) {\n  var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '1.0';\n  var description = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : name;\n  var size = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  var callback = arguments.length > 4 ? arguments[4] : undefined;\n\n  if (name === undefined) {\n    throw new TypeError(\"The database name must not be undefined\");\n  }\n\n  var db = _openExpoSQLiteDatabase(name, version, description, size, callback);\n\n  var dbWithExec = addExecMethod(db);\n  return dbWithExec;\n}","map":{"version":3,"sources":["../src/SQLite.ts"],"names":[],"mappings":"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","sourcesContent":["import './polyfillNextTick';\n\nimport customOpenDatabase from '@expo/websql/custom';\nimport { NativeModulesProxy } from '@unimodules/core';\nimport zipObject from 'lodash/zipObject';\nimport { Platform } from 'react-native';\n\nimport { Query, SQLiteCallback, ResultSet, ResultSetError, WebSQLDatabase } from './SQLite.types';\n\nconst { ExponentSQLite } = NativeModulesProxy;\n\nclass SQLiteDatabase {\n  _name: string;\n  _closed: boolean = false;\n\n  constructor(name: string) {\n    this._name = name;\n  }\n\n  exec(queries: Query[], readOnly: boolean, callback: SQLiteCallback): void {\n    if (this._closed) {\n      throw new Error(`The SQLite database is closed`);\n    }\n\n    ExponentSQLite.exec(this._name, queries.map(_serializeQuery), readOnly).then(\n      nativeResultSets => {\n        callback(null, nativeResultSets.map(_deserializeResultSet));\n      },\n      error => {\n        // TODO: make the native API consistently reject with an error, not a string or other type\n        callback(error instanceof Error ? error : new Error(error));\n      }\n    );\n  }\n\n  close() {\n    this._closed = true;\n    ExponentSQLite.close(this._name);\n  }\n}\n\nfunction _serializeQuery(query: Query): [string, unknown[]] {\n  return [query.sql, Platform.OS === 'android' ? query.args.map(_escapeBlob) : query.args];\n}\n\nfunction _deserializeResultSet(nativeResult): ResultSet | ResultSetError {\n  const [errorMessage, insertId, rowsAffected, columns, rows] = nativeResult;\n  // TODO: send more structured error information from the native module so we can better construct\n  // a SQLException object\n  if (errorMessage !== null) {\n    return { error: new Error(errorMessage) } as ResultSetError;\n  }\n\n  return {\n    insertId,\n    rowsAffected,\n    rows: rows.map(row => zipObject(columns, row)),\n  };\n}\n\nfunction _escapeBlob<T>(data: T): T {\n  if (typeof data === 'string') {\n    /* eslint-disable no-control-regex */\n    return data\n      .replace(/\\u0002/g, '\\u0002\\u0002')\n      .replace(/\\u0001/g, '\\u0001\\u0002')\n      .replace(/\\u0000/g, '\\u0001\\u0001') as any;\n    /* eslint-enable no-control-regex */\n  } else {\n    return data;\n  }\n}\n\nconst _openExpoSQLiteDatabase = customOpenDatabase(SQLiteDatabase);\n\nfunction addExecMethod(db: any): WebSQLDatabase {\n  db.exec = (queries: Query[], readOnly: boolean, callback: SQLiteCallback): void => {\n    db._db.exec(queries, readOnly, callback);\n  };\n  return db;\n}\n\nexport function openDatabase(\n  name: string,\n  version: string = '1.0',\n  description: string = name,\n  size: number = 1,\n  callback?: (db: WebSQLDatabase) => void\n): WebSQLDatabase {\n  if (name === undefined) {\n    throw new TypeError(`The database name must not be undefined`);\n  }\n  const db = _openExpoSQLiteDatabase(name, version, description, size, callback);\n  const dbWithExec = addExecMethod(db);\n  return dbWithExec;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}