{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar fs_extra_1 = __importDefault(require(\"fs-extra\"));\n\nvar path_1 = __importDefault(require(\"path\"));\n\nvar pngjs_1 = require(\"pngjs\");\n\nvar Contents_json_1 = require(\"./Contents.json\");\n\nvar PNG_FILENAME = 'background.png';\nvar DARK_PNG_FILENAME = 'dark_background.png';\nvar IMAGESET_PATH = 'Images.xcassets/SplashScreenBackground.imageset';\nvar CONTENTS_PATH = IMAGESET_PATH + \"/Contents.json\";\nvar PNG_PATH = IMAGESET_PATH + \"/\" + PNG_FILENAME;\nvar DARK_PNG_PATH = IMAGESET_PATH + \"/\" + DARK_PNG_FILENAME;\n\nfunction createContentsJsonFile(iosProjectPath, imageSetPath, darkModeEnabled) {\n  return _regeneratorRuntime.async(function createContentsJsonFile$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fs_extra_1.default.mkdirp(path_1.default.resolve(iosProjectPath, IMAGESET_PATH)));\n\n        case 2:\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(Contents_json_1.writeContentsJsonFile(path_1.default.resolve(iosProjectPath, CONTENTS_PATH), PNG_FILENAME, darkModeEnabled ? DARK_PNG_FILENAME : undefined));\n\n        case 4:\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(fs_extra_1.default.mkdirp(imageSetPath));\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction createPngFile(filePath, color) {\n  var png, _color, r, g, b, a, bitmap, buffer;\n\n  return _regeneratorRuntime.async(function createPngFile$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          png = new pngjs_1.PNG({\n            width: 1,\n            height: 1,\n            bitDepth: 8,\n            colorType: 6,\n            inputColorType: 6,\n            inputHasAlpha: true\n          });\n          _color = _slicedToArray(color, 4), r = _color[0], g = _color[1], b = _color[2], a = _color[3];\n          bitmap = new Uint8Array([r, g, b, a * 255]);\n          buffer = Buffer.from(bitmap);\n          png.data = buffer;\n          return _context2.abrupt(\"return\", new Promise(function (resolve) {\n            png.pack().pipe(fs_extra_1.default.createWriteStream(filePath)).on('finish', resolve);\n          }));\n\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction createFiles(iosProjectPath, color, darkModeColor) {\n  return _regeneratorRuntime.async(function createFiles$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(createPngFile(path_1.default.resolve(iosProjectPath, PNG_PATH), color));\n\n        case 2:\n          if (!darkModeColor) {\n            _context3.next = 5;\n            break;\n          }\n\n          _context3.next = 5;\n          return _regeneratorRuntime.awrap(createPngFile(path_1.default.resolve(iosProjectPath, DARK_PNG_PATH), darkModeColor));\n\n        case 5:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction configureAssets(iosProjectPath, config) {\n  var _a, backgroundColor, darkModeBackgroundColor, imageSetPath;\n\n  return _regeneratorRuntime.async(function configureAssets$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          backgroundColor = config.backgroundColor;\n          darkModeBackgroundColor = (_a = config.darkMode) === null || _a === void 0 ? void 0 : _a.backgroundColor;\n          imageSetPath = path_1.default.resolve(iosProjectPath, IMAGESET_PATH);\n          _context4.next = 5;\n          return _regeneratorRuntime.awrap(fs_extra_1.default.pathExists(imageSetPath));\n\n        case 5:\n          if (!_context4.sent) {\n            _context4.next = 8;\n            break;\n          }\n\n          _context4.next = 8;\n          return _regeneratorRuntime.awrap(fs_extra_1.default.remove(imageSetPath));\n\n        case 8:\n          _context4.next = 10;\n          return _regeneratorRuntime.awrap(createContentsJsonFile(iosProjectPath, imageSetPath, !!darkModeBackgroundColor));\n\n        case 10:\n          _context4.next = 12;\n          return _regeneratorRuntime.awrap(createFiles(iosProjectPath, backgroundColor, darkModeBackgroundColor));\n\n        case 12:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.default = configureAssets;","map":{"version":3,"sources":["../../src/ios/BackgroundAsset.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,IAAA,UAAA,GAAA,eAAA,CAAA,OAAA,CAAA,UAAA,CAAA,CAAA;;AACA,IAAA,MAAA,GAAA,eAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AAGA,IAAA,eAAA,GAAA,OAAA,mBAAA;;AAEA,IAAM,YAAY,GAAG,gBAArB;AACA,IAAM,iBAAiB,GAAG,qBAA1B;AAEA,IAAM,aAAa,GAAG,iDAAtB;AACA,IAAM,aAAa,GAAM,aAAN,mBAAnB;AACA,IAAM,QAAQ,GAAM,aAAN,SAAuB,YAArC;AACA,IAAM,aAAa,GAAM,aAAN,SAAuB,iBAA1C;;AAEA,SAAe,sBAAf,CACE,cADF,EAEE,YAFF,EAGE,eAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAKQ,UAAA,CAAA,OAAA,CAAG,MAAH,CAAU,MAAA,CAAA,OAAA,CAAK,OAAL,CAAa,cAAb,EAA6B,aAA7B,CAAV,CALR;;AAAA;AAAA;AAAA,2CAOQ,eAAA,CAAA,qBAAA,CACJ,MAAA,CAAA,OAAA,CAAK,OAAL,CAAa,cAAb,EAA6B,aAA7B,CADI,EAEJ,YAFI,EAGJ,eAAe,GAAG,iBAAH,GAAuB,SAHlC,CAPR;;AAAA;AAAA;AAAA,2CAaQ,UAAA,CAAA,OAAA,CAAG,MAAH,CAAU,YAAV,CAbR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAe,aAAf,CAA6B,QAA7B,EAA+C,KAA/C;AAAA;;AAAA;AAAA;AAAA;AAAA;AACQ,UAAA,GADR,GACc,IAAI,OAAA,CAAA,GAAJ,CAAQ;AAClB,YAAA,KAAK,EAAE,CADW;AAElB,YAAA,MAAM,EAAE,CAFU;AAGlB,YAAA,QAAQ,EAAE,CAHQ;AAIlB,YAAA,SAAS,EAAE,CAJO;AAKlB,YAAA,cAAc,EAAE,CALE;AAMlB,YAAA,aAAa,EAAE;AANG,WAAR,CADd;AAAA,kCASuB,KATvB,MASS,CATT,cASY,CATZ,cASe,CATf,cASkB,CATlB;AAUQ,UAAA,MAVR,GAUiB,IAAI,UAAJ,CAAe,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAC,GAAG,GAAd,CAAf,CAVjB;AAWQ,UAAA,MAXR,GAWiB,MAAM,CAAC,IAAP,CAAY,MAAZ,CAXjB;AAYE,UAAA,GAAG,CAAC,IAAJ,GAAW,MAAX;AAZF,4CAcS,IAAI,OAAJ,CAAY,UAAA,OAAO,EAAG;AAC3B,YAAA,GAAG,CAAC,IAAJ,GAAW,IAAX,CAAgB,UAAA,CAAA,OAAA,CAAG,iBAAH,CAAqB,QAArB,CAAhB,EAAgD,EAAhD,CAAmD,QAAnD,EAA6D,OAA7D;AACD,WAFM,CAdT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmBA,SAAe,WAAf,CAA2B,cAA3B,EAAmD,KAAnD,EAAiE,aAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACQ,aAAa,CAAC,MAAA,CAAA,OAAA,CAAK,OAAL,CAAa,cAAb,EAA6B,QAA7B,CAAD,EAAyC,KAAzC,CADrB;;AAAA;AAAA,eAEM,aAFN;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAGU,aAAa,CAAC,MAAA,CAAA,OAAA,CAAK,OAAL,CAAa,cAAb,EAA6B,aAA7B,CAAD,EAA8C,aAA9C,CAHvB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUe,SAAe,eAAf,CACb,cADa,EAEb,MAFa;AAAA;;AAAA;AAAA;AAAA;AAAA;AASP,UAAA,eATO,GASW,MAAM,CAAC,eATlB;AAUP,UAAA,uBAVO,GAUgB,CAAA,EAAA,GAAG,MAAM,CAAC,QAAV,MAAkB,IAAlB,IAAkB,EAAA,KAAA,KAAA,CAAlB,GAAkB,KAAA,CAAlB,GAAkB,EAAA,CAAE,eAVpC;AAYP,UAAA,YAZO,GAYQ,MAAA,CAAA,OAAA,CAAK,OAAL,CAAa,cAAb,EAA6B,aAA7B,CAZR;AAAA;AAAA,2CAeH,UAAA,CAAA,OAAA,CAAG,UAAH,CAAc,YAAd,CAfG;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAgBL,UAAA,CAAA,OAAA,CAAG,MAAH,CAAU,YAAV,CAhBK;;AAAA;AAAA;AAAA,2CAmBP,sBAAsB,CAAC,cAAD,EAAiB,YAAjB,EAA+B,CAAC,CAAC,uBAAjC,CAnBf;;AAAA;AAAA;AAAA,2CAoBP,WAAW,CAAC,cAAD,EAAiB,eAAjB,EAAkC,uBAAlC,CApBJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAf,OAAA,CAAA,OAAA,GAAA,eAAA","sourcesContent":["import fs from 'fs-extra';\nimport path from 'path';\nimport { PNG } from 'pngjs';\n\nimport { Color } from '../SplashScreenConfig';\nimport { writeContentsJsonFile } from './Contents.json';\n\nconst PNG_FILENAME = 'background.png';\nconst DARK_PNG_FILENAME = 'dark_background.png';\n\nconst IMAGESET_PATH = 'Images.xcassets/SplashScreenBackground.imageset';\nconst CONTENTS_PATH = `${IMAGESET_PATH}/Contents.json`;\nconst PNG_PATH = `${IMAGESET_PATH}/${PNG_FILENAME}`;\nconst DARK_PNG_PATH = `${IMAGESET_PATH}/${DARK_PNG_FILENAME}`;\n\nasync function createContentsJsonFile(\n  iosProjectPath: string,\n  imageSetPath: string,\n  darkModeEnabled: boolean\n) {\n  await fs.mkdirp(path.resolve(iosProjectPath, IMAGESET_PATH));\n\n  await writeContentsJsonFile(\n    path.resolve(iosProjectPath, CONTENTS_PATH),\n    PNG_FILENAME,\n    darkModeEnabled ? DARK_PNG_FILENAME : undefined\n  );\n\n  await fs.mkdirp(imageSetPath);\n}\n\nasync function createPngFile(filePath: string, color: Color) {\n  const png = new PNG({\n    width: 1,\n    height: 1,\n    bitDepth: 8,\n    colorType: 6,\n    inputColorType: 6,\n    inputHasAlpha: true,\n  });\n  const [r, g, b, a] = color;\n  const bitmap = new Uint8Array([r, g, b, a * 255]);\n  const buffer = Buffer.from(bitmap);\n  png.data = buffer;\n\n  return new Promise(resolve => {\n    png.pack().pipe(fs.createWriteStream(filePath)).on('finish', resolve);\n  });\n}\n\nasync function createFiles(iosProjectPath: string, color: Color, darkModeColor?: Color) {\n  await createPngFile(path.resolve(iosProjectPath, PNG_PATH), color);\n  if (darkModeColor) {\n    await createPngFile(path.resolve(iosProjectPath, DARK_PNG_PATH), darkModeColor);\n  }\n}\n\n/**\n * Creates imageset containing solid color image that is used as a background for Splash Screen.\n */\nexport default async function configureAssets(\n  iosProjectPath: string,\n  config: {\n    backgroundColor: Color;\n    darkMode?: {\n      backgroundColor?: Color;\n    };\n  }\n) {\n  const backgroundColor = config.backgroundColor;\n  const darkModeBackgroundColor = config.darkMode?.backgroundColor;\n\n  const imageSetPath = path.resolve(iosProjectPath, IMAGESET_PATH);\n\n  // ensure old SplashScreenBackground imageSet is removed\n  if (await fs.pathExists(imageSetPath)) {\n    await fs.remove(imageSetPath);\n  }\n\n  await createContentsJsonFile(iosProjectPath, imageSetPath, !!darkModeBackgroundColor);\n  await createFiles(iosProjectPath, backgroundColor, darkModeBackgroundColor);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}