{"ast":null,"code":"\"use strict\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar android_plugins_1 = require(\"../plugins/android-plugins\");\n\nvar WarningAggregator = __importStar(require(\"../utils/warnings\"));\n\nvar Manifest_1 = require(\"./Manifest\");\n\nexports.CONFIG_CHANGES_ATTRIBUTE = 'android:configChanges';\nexports.ON_CONFIGURATION_CHANGED = \"\\npublic class MainActivity extends ReactActivity {\\n\\n    // Added automatically by Expo Config\\n    @Override\\n    public void onConfigurationChanged(Configuration newConfig) {\\n        super.onConfigurationChanged(newConfig);\\n        Intent intent = new Intent(\\\"onConfigurationChanged\\\");\\n        intent.putExtra(\\\"newConfig\\\", newConfig);\\n        sendBroadcast(intent);\\n    }\\n\";\nexports.withUiModeManifest = android_plugins_1.createAndroidManifestPlugin(setUiModeAndroidManifest, 'withUiModeManifest');\n\nexports.withUiModeMainActivity = function (config) {\n  return android_plugins_1.withMainActivity(config, function (config) {\n    if (config.modResults.language === 'java') {\n      config.modResults.contents = addOnConfigurationChangedMainActivity(config, config.modResults.contents);\n    } else {\n      WarningAggregator.addWarningAndroid('android-userInterfaceStyle', \"Cannot automatically configure MainActivity if it's not java\");\n    }\n\n    return config;\n  });\n};\n\nfunction getUserInterfaceStyle(config) {\n  var _a, _b, _c;\n\n  return (_c = (_b = (_a = config.android) === null || _a === void 0 ? void 0 : _a.userInterfaceStyle) !== null && _b !== void 0 ? _b : config.userInterfaceStyle) !== null && _c !== void 0 ? _c : null;\n}\n\nexports.getUserInterfaceStyle = getUserInterfaceStyle;\n\nfunction setUiModeAndroidManifest(config, androidManifest) {\n  var userInterfaceStyle = getUserInterfaceStyle(config);\n\n  if (!userInterfaceStyle) {\n    return androidManifest;\n  }\n\n  var mainActivity = Manifest_1.getMainActivityOrThrow(androidManifest);\n  mainActivity.$[exports.CONFIG_CHANGES_ATTRIBUTE] = 'keyboard|keyboardHidden|orientation|screenSize|uiMode';\n  return androidManifest;\n}\n\nexports.setUiModeAndroidManifest = setUiModeAndroidManifest;\n\nfunction addOnConfigurationChangedMainActivity(config, mainActivity) {\n  var _a;\n\n  var userInterfaceStyle = getUserInterfaceStyle(config);\n\n  if (!userInterfaceStyle) {\n    return mainActivity;\n  }\n\n  if ((_a = mainActivity.match(\"onConfigurationChanged\")) === null || _a === void 0 ? void 0 : _a.length) {\n    return mainActivity;\n  }\n\n  var MainActivityWithImports = addJavaImports(mainActivity, ['android.content.Intent', 'android.content.res.Configuration']);\n  var pattern = new RegExp(\"public class MainActivity extends ReactActivity {\");\n  return MainActivityWithImports.replace(pattern, exports.ON_CONFIGURATION_CHANGED);\n}\n\nexports.addOnConfigurationChangedMainActivity = addOnConfigurationChangedMainActivity;\n\nfunction addJavaImports(javaSource, javaImports) {\n  var lines = javaSource.split('\\n');\n  var lineIndexWithPackageDeclaration = lines.findIndex(function (line) {\n    return line.match(/^package .*;$/);\n  });\n\n  for (var _iterator = _createForOfIteratorHelperLoose(javaImports), _step; !(_step = _iterator()).done;) {\n    var javaImport = _step.value;\n\n    if (!javaSource.includes(javaImport)) {\n      var importStatement = \"import \" + javaImport + \";\";\n      lines.splice(lineIndexWithPackageDeclaration + 1, 0, importStatement);\n    }\n  }\n\n  return lines.join('\\n');\n}","map":{"version":3,"sources":["../../src/android/UserInterfaceStyle.ts"],"names":[],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { createAndroidManifestPlugin, withMainActivity } from '../plugins/android-plugins';\nimport * as WarningAggregator from '../utils/warnings';\nimport { AndroidManifest, getMainActivityOrThrow } from './Manifest';\n\nexport const CONFIG_CHANGES_ATTRIBUTE = 'android:configChanges';\n\nexport const ON_CONFIGURATION_CHANGED = `\npublic class MainActivity extends ReactActivity {\n\n    // Added automatically by Expo Config\n    @Override\n    public void onConfigurationChanged(Configuration newConfig) {\n        super.onConfigurationChanged(newConfig);\n        Intent intent = new Intent(\"onConfigurationChanged\");\n        intent.putExtra(\"newConfig\", newConfig);\n        sendBroadcast(intent);\n    }\n`;\n\nexport const withUiModeManifest = createAndroidManifestPlugin(\n  setUiModeAndroidManifest,\n  'withUiModeManifest'\n);\n\nexport const withUiModeMainActivity: ConfigPlugin = config => {\n  return withMainActivity(config, config => {\n    if (config.modResults.language === 'java') {\n      config.modResults.contents = addOnConfigurationChangedMainActivity(\n        config,\n        config.modResults.contents\n      );\n    } else {\n      WarningAggregator.addWarningAndroid(\n        'android-userInterfaceStyle',\n        `Cannot automatically configure MainActivity if it's not java`\n      );\n    }\n    return config;\n  });\n};\n\nexport function getUserInterfaceStyle(\n  config: Pick<ExpoConfig, 'android' | 'userInterfaceStyle'>\n): string | null {\n  return config.android?.userInterfaceStyle ?? config.userInterfaceStyle ?? null;\n}\n\nexport function setUiModeAndroidManifest(\n  config: Pick<ExpoConfig, 'android' | 'userInterfaceStyle'>,\n  androidManifest: AndroidManifest\n) {\n  const userInterfaceStyle = getUserInterfaceStyle(config);\n  // TODO: Remove this if we decide to remove any uiMode configuration when not specified\n  if (!userInterfaceStyle) {\n    return androidManifest;\n  }\n\n  const mainActivity = getMainActivityOrThrow(androidManifest);\n  mainActivity.$[CONFIG_CHANGES_ATTRIBUTE] =\n    'keyboard|keyboardHidden|orientation|screenSize|uiMode';\n\n  return androidManifest;\n}\n\nexport function addOnConfigurationChangedMainActivity(\n  config: Pick<ExpoConfig, 'android' | 'userInterfaceStyle'>,\n  mainActivity: string\n): string {\n  const userInterfaceStyle = getUserInterfaceStyle(config);\n  if (!userInterfaceStyle) {\n    return mainActivity;\n  }\n\n  // Cruzan: this is not ideal, but I'm not sure of a better way to handle writing to MainActivity.java\n  if (mainActivity.match(`onConfigurationChanged`)?.length) {\n    return mainActivity;\n  }\n\n  const MainActivityWithImports = addJavaImports(mainActivity, [\n    'android.content.Intent',\n    'android.content.res.Configuration',\n  ]);\n\n  const pattern = new RegExp(`public class MainActivity extends ReactActivity {`);\n  return MainActivityWithImports.replace(pattern, ON_CONFIGURATION_CHANGED);\n}\n\n// TODO: we should have a generic utility for doing this\nfunction addJavaImports(javaSource: string, javaImports: string[]): string {\n  const lines = javaSource.split('\\n');\n  const lineIndexWithPackageDeclaration = lines.findIndex(line => line.match(/^package .*;$/));\n  for (const javaImport of javaImports) {\n    if (!javaSource.includes(javaImport)) {\n      const importStatement = `import ${javaImport};`;\n      lines.splice(lineIndexWithPackageDeclaration + 1, 0, importStatement);\n    }\n  }\n  return lines.join('\\n');\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}