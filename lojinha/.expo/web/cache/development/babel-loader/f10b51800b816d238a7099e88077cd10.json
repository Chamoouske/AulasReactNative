{"ast":null,"code":"\"use strict\";\n\nvar _extends = require(\"@babel/runtime/helpers/extends\");\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar fs_extra_1 = __importDefault(require(\"fs-extra\"));\n\nvar path_1 = __importDefault(require(\"path\"));\n\nvar ios_plugins_1 = require(\"../plugins/ios-plugins\");\n\nvar Paths_1 = require(\"./Paths\");\n\nvar Scheme_1 = require(\"./Scheme\");\n\nvar Xcodeproj_1 = require(\"./utils/Xcodeproj\");\n\nexports.withGoogle = ios_plugins_1.createInfoPlistPlugin(setGoogleConfig, 'withGoogle');\n\nexports.withGoogleServicesFile = function (config) {\n  return ios_plugins_1.withXcodeProject(config, function (config) {\n    config.modResults = setGoogleServicesFile(config, {\n      projectRoot: config.modRequest.projectRoot,\n      project: config.modResults\n    });\n    return config;\n  });\n};\n\nfunction getGoogleMapsApiKey(config) {\n  var _a, _b, _c;\n\n  return (_c = (_b = (_a = config.ios) === null || _a === void 0 ? void 0 : _a.config) === null || _b === void 0 ? void 0 : _b.googleMapsApiKey) !== null && _c !== void 0 ? _c : null;\n}\n\nexports.getGoogleMapsApiKey = getGoogleMapsApiKey;\n\nfunction getGoogleSignInReservedClientId(config) {\n  var _a, _b, _c, _d;\n\n  return (_d = (_c = (_b = (_a = config.ios) === null || _a === void 0 ? void 0 : _a.config) === null || _b === void 0 ? void 0 : _b.googleSignIn) === null || _c === void 0 ? void 0 : _c.reservedClientId) !== null && _d !== void 0 ? _d : null;\n}\n\nexports.getGoogleSignInReservedClientId = getGoogleSignInReservedClientId;\n\nfunction getGoogleServicesFile(config) {\n  var _a, _b;\n\n  return (_b = (_a = config.ios) === null || _a === void 0 ? void 0 : _a.googleServicesFile) !== null && _b !== void 0 ? _b : null;\n}\n\nexports.getGoogleServicesFile = getGoogleServicesFile;\n\nfunction setGoogleMapsApiKey(config, _a) {\n  var GMSApiKey = _a.GMSApiKey,\n      infoPlist = __rest(_a, [\"GMSApiKey\"]);\n\n  var apiKey = getGoogleMapsApiKey(config);\n\n  if (apiKey === null) {\n    return infoPlist;\n  }\n\n  return _extends(_extends({}, infoPlist), {\n    GMSApiKey: apiKey\n  });\n}\n\nexports.setGoogleMapsApiKey = setGoogleMapsApiKey;\n\nfunction setGoogleSignInReservedClientId(config, infoPlist) {\n  var reservedClientId = getGoogleSignInReservedClientId(config);\n\n  if (reservedClientId === null) {\n    return infoPlist;\n  }\n\n  return Scheme_1.appendScheme(reservedClientId, infoPlist);\n}\n\nexports.setGoogleSignInReservedClientId = setGoogleSignInReservedClientId;\n\nfunction setGoogleConfig(config, infoPlist) {\n  infoPlist = setGoogleMapsApiKey(config, infoPlist);\n  infoPlist = setGoogleSignInReservedClientId(config, infoPlist);\n  return infoPlist;\n}\n\nexports.setGoogleConfig = setGoogleConfig;\n\nfunction setGoogleServicesFile(config, _ref) {\n  var projectRoot = _ref.projectRoot,\n      project = _ref.project;\n  var googleServicesFileRelativePath = getGoogleServicesFile(config);\n\n  if (googleServicesFileRelativePath === null) {\n    return project;\n  }\n\n  var googleServiceFilePath = path_1.default.resolve(projectRoot, googleServicesFileRelativePath);\n  fs_extra_1.default.copyFileSync(googleServiceFilePath, path_1.default.join(Paths_1.getSourceRoot(projectRoot), 'GoogleService-Info.plist'));\n  var projectName = Xcodeproj_1.getProjectName(projectRoot);\n  var plistFilePath = projectName + \"/GoogleService-Info.plist\";\n\n  if (!project.hasFile(plistFilePath)) {\n    project = Xcodeproj_1.addResourceFileToGroup(plistFilePath, projectName, project);\n  }\n\n  return project;\n}\n\nexports.setGoogleServicesFile = setGoogleServicesFile;","map":{"version":3,"sources":["../../src/ios/Google.ts"],"names":[],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport { XcodeProject } from 'xcode';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { createInfoPlistPlugin, withXcodeProject } from '../plugins/ios-plugins';\nimport { InfoPlist } from './IosConfig.types';\nimport { getSourceRoot } from './Paths';\nimport { appendScheme } from './Scheme';\nimport { addResourceFileToGroup, getProjectName } from './utils/Xcodeproj';\n\nexport const withGoogle = createInfoPlistPlugin(setGoogleConfig, 'withGoogle');\n\nexport const withGoogleServicesFile: ConfigPlugin = config => {\n  return withXcodeProject(config, config => {\n    config.modResults = setGoogleServicesFile(config, {\n      projectRoot: config.modRequest.projectRoot,\n      project: config.modResults,\n    });\n    return config;\n  });\n};\n\nexport function getGoogleMapsApiKey(config: Pick<ExpoConfig, 'ios'>) {\n  return config.ios?.config?.googleMapsApiKey ?? null;\n}\n\nexport function getGoogleSignInReservedClientId(config: Pick<ExpoConfig, 'ios'>) {\n  return config.ios?.config?.googleSignIn?.reservedClientId ?? null;\n}\n\nexport function getGoogleServicesFile(config: Pick<ExpoConfig, 'ios'>) {\n  return config.ios?.googleServicesFile ?? null;\n}\n\nexport function setGoogleMapsApiKey(\n  config: Pick<ExpoConfig, 'ios'>,\n  { GMSApiKey, ...infoPlist }: InfoPlist\n): InfoPlist {\n  const apiKey = getGoogleMapsApiKey(config);\n\n  if (apiKey === null) {\n    return infoPlist;\n  }\n\n  return {\n    ...infoPlist,\n    GMSApiKey: apiKey,\n  };\n}\n\nexport function setGoogleSignInReservedClientId(\n  config: Pick<ExpoConfig, 'ios'>,\n  infoPlist: InfoPlist\n): InfoPlist {\n  const reservedClientId = getGoogleSignInReservedClientId(config);\n\n  if (reservedClientId === null) {\n    return infoPlist;\n  }\n\n  return appendScheme(reservedClientId, infoPlist);\n}\n\nexport function setGoogleConfig(config: Pick<ExpoConfig, 'ios'>, infoPlist: InfoPlist): InfoPlist {\n  infoPlist = setGoogleMapsApiKey(config, infoPlist);\n  infoPlist = setGoogleSignInReservedClientId(config, infoPlist);\n  return infoPlist;\n}\n\nexport function setGoogleServicesFile(\n  config: Pick<ExpoConfig, 'ios'>,\n  { projectRoot, project }: { project: XcodeProject; projectRoot: string }\n): XcodeProject {\n  const googleServicesFileRelativePath = getGoogleServicesFile(config);\n  if (googleServicesFileRelativePath === null) {\n    return project;\n  }\n\n  const googleServiceFilePath = path.resolve(projectRoot, googleServicesFileRelativePath);\n  fs.copyFileSync(\n    googleServiceFilePath,\n    path.join(getSourceRoot(projectRoot), 'GoogleService-Info.plist')\n  );\n\n  const projectName = getProjectName(projectRoot);\n  const plistFilePath = `${projectName}/GoogleService-Info.plist`;\n  if (!project.hasFile(plistFilePath)) {\n    project = addResourceFileToGroup(plistFilePath, projectName, project);\n  }\n  return project;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}