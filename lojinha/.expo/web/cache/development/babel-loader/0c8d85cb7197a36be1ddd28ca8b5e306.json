{"ast":null,"code":"import { PermissionStatus } from 'unimodules-permissions-interface';\nimport { LocationAccuracy, LocationActivityType, LocationGeofencingEventType, LocationGeofencingRegionState } from \"./Location.types\";\nimport { LocationEventEmitter } from \"./LocationEventEmitter\";\nimport { setGoogleApiKey } from \"./LocationGoogleGeocoding\";\nimport { _getCurrentWatchId } from \"./LocationSubscribers\";\nexport { LocationEventEmitter as EventEmitter, _getCurrentWatchId };\nexport { LocationAccuracy as Accuracy, LocationActivityType as ActivityType, LocationGeofencingEventType as GeofencingEventType, LocationGeofencingRegionState as GeofencingRegionState, PermissionStatus, setGoogleApiKey };\nexport { installWebGeolocationPolyfill } from \"./GeolocationPolyfill\";\nexport * from \"./Location.types\";","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/expo-location/build/Location.d.ts"],"names":["PermissionStatus","LocationAccuracy","LocationActivityType","LocationGeofencingEventType","LocationGeofencingRegionState","LocationEventEmitter","setGoogleApiKey","_getCurrentWatchId","EventEmitter","Accuracy","ActivityType","GeofencingEventType","GeofencingRegionState","installWebGeolocationPolyfill"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,kCAAjC;AACA,SAASC,gBAAT,EAA0TC,oBAA1T,EAAgVC,2BAAhV,EAA6WC,6BAA7W;AACA,SAASC,oBAAT;AACA,SAASC,eAAT;AACA,SAASC,kBAAT;AAiEA,SAASF,oBAAoB,IAAIG,YAAjC,EAA+CD,kBAA/C;AACA,SAASN,gBAAgB,IAAIQ,QAA7B,EAAuCP,oBAAoB,IAAIQ,YAA/D,EAA6EP,2BAA2B,IAAIQ,mBAA5G,EAAiIP,6BAA6B,IAAIQ,qBAAlK,EAAyLZ,gBAAzL,EAA2MM,eAA3M;AACA,SAASO,6BAAT;AACA","sourcesContent":["import { PermissionStatus } from 'unimodules-permissions-interface';\nimport { LocationAccuracy, LocationCallback, LocationGeocodedAddress, LocationGeocodedLocation, LocationHeadingCallback, LocationHeadingObject, LocationLastKnownOptions, LocationObject, LocationOptions, LocationPermissionResponse, LocationProviderStatus, LocationRegion, LocationSubscription, LocationTaskOptions, LocationActivityType, LocationGeofencingEventType, LocationGeofencingRegionState, LocationGeocodingOptions } from './Location.types';\nimport { LocationEventEmitter } from './LocationEventEmitter';\nimport { setGoogleApiKey } from './LocationGoogleGeocoding';\nimport { _getCurrentWatchId } from './LocationSubscribers';\nexport declare function getProviderStatusAsync(): Promise<LocationProviderStatus>;\nexport declare function enableNetworkProviderAsync(): Promise<void>;\n/**\n * Requests for one-time delivery of the user's current location.\n * Depending on given `accuracy` option it may take some time to resolve,\n * especially when you're inside a building.\n */\nexport declare function getCurrentPositionAsync(options?: LocationOptions): Promise<LocationObject>;\n/**\n * Gets the last known position of the device or `null` if it's not available\n * or doesn't match given requirements such as maximum age or required accuracy.\n * It's considered to be faster than `getCurrentPositionAsync` as it doesn't request for the current location.\n */\nexport declare function getLastKnownPositionAsync(options?: LocationLastKnownOptions): Promise<LocationObject | null>;\n/**\n * Starts watching for location changes.\n * Given callback will be called once the new location is available.\n */\nexport declare function watchPositionAsync(options: LocationOptions, callback: LocationCallback): Promise<{\n    remove(): void;\n}>;\n/**\n * Resolves to an object with current heading details.\n * To simplify, it calls `watchHeadingAsync` and waits for a couple of updates\n * and returns the one that is accurate enough.\n */\nexport declare function getHeadingAsync(): Promise<LocationHeadingObject>;\n/**\n * Starts watching for heading changes.\n * Given callback will be called once the new heading is available.\n */\nexport declare function watchHeadingAsync(callback: LocationHeadingCallback): Promise<LocationSubscription>;\n/**\n * Geocodes given address to an array of latitude-longitude coordinates.\n */\nexport declare function geocodeAsync(address: string, options?: LocationGeocodingOptions): Promise<LocationGeocodedLocation[]>;\n/**\n * The opposite behavior of `geocodeAsync` â€” translates location coordinates to an array of addresses.\n */\nexport declare function reverseGeocodeAsync(location: Pick<LocationGeocodedLocation, 'latitude' | 'longitude'>, options?: LocationGeocodingOptions): Promise<LocationGeocodedAddress[]>;\n/**\n * Gets the current state of location permissions.\n */\nexport declare function getPermissionsAsync(): Promise<LocationPermissionResponse>;\n/**\n * Requests the user to grant location permissions.\n */\nexport declare function requestPermissionsAsync(): Promise<LocationPermissionResponse>;\n/**\n * Returns `true` if the device has location services enabled or `false` otherwise.\n */\nexport declare function hasServicesEnabledAsync(): Promise<boolean>;\nexport declare function isBackgroundLocationAvailableAsync(): Promise<boolean>;\nexport declare function startLocationUpdatesAsync(taskName: string, options?: LocationTaskOptions): Promise<void>;\nexport declare function stopLocationUpdatesAsync(taskName: string): Promise<void>;\nexport declare function hasStartedLocationUpdatesAsync(taskName: string): Promise<boolean>;\nexport declare function startGeofencingAsync(taskName: string, regions?: LocationRegion[]): Promise<void>;\nexport declare function stopGeofencingAsync(taskName: string): Promise<void>;\nexport declare function hasStartedGeofencingAsync(taskName: string): Promise<boolean>;\n/**\n * @deprecated\n * Deprecated as of SDK39 in favour of `setGoogleApiKey`.\n */\nexport declare function setApiKey(apiKey: string): void;\nexport { LocationEventEmitter as EventEmitter, _getCurrentWatchId };\nexport { LocationAccuracy as Accuracy, LocationActivityType as ActivityType, LocationGeofencingEventType as GeofencingEventType, LocationGeofencingRegionState as GeofencingRegionState, PermissionStatus, setGoogleApiKey, };\nexport { installWebGeolocationPolyfill } from './GeolocationPolyfill';\nexport * from './Location.types';\n"]},"metadata":{},"sourceType":"module"}