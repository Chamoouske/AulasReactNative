{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _require = require(\"../e2e-helpers\"),\n    openComponentWithLabel = _require.openComponentWithLabel,\n    openExampleWithTitle = _require.openExampleWithTitle;\n\ndescribe('Touchable', function () {\n  beforeAll(function _callee() {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(device.reloadReactNative());\n\n          case 2:\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(openComponentWithLabel('<Touchable*', '<Touchable*> and onPress Touchable and onPress examples.'));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  });\n  it('Touchable Highlight should be tappable', function _callee2() {\n    var buttonID, button2ID, consoleID;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(openExampleWithTitle('<TouchableHighlight>'));\n\n          case 2:\n            buttonID = 'touchable_highlight_image_button';\n            button2ID = 'touchable_highlight_text_button';\n            consoleID = 'touchable_highlight_console';\n            _context2.next = 7;\n            return _regeneratorRuntime.awrap(element(by.id(buttonID)).tap());\n\n          case 7:\n            _context2.next = 9;\n            return _regeneratorRuntime.awrap(expect(element(by.id(consoleID))).toHaveText('TouchableHighlight onPress'));\n\n          case 9:\n            _context2.next = 11;\n            return _regeneratorRuntime.awrap(element(by.id(buttonID)).tap());\n\n          case 11:\n            _context2.next = 13;\n            return _regeneratorRuntime.awrap(expect(element(by.id(consoleID))).toHaveText('2x TouchableHighlight onPress'));\n\n          case 13:\n            _context2.next = 15;\n            return _regeneratorRuntime.awrap(element(by.id(button2ID)).tap());\n\n          case 15:\n            _context2.next = 17;\n            return _regeneratorRuntime.awrap(expect(element(by.id(consoleID))).toHaveText('3x TouchableHighlight onPress'));\n\n          case 17:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  });\n  it('Touchable Without Feedback should be tappable', function _callee3() {\n    var buttonID, consoleID;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(openExampleWithTitle('<TouchableWithoutFeedback>'));\n\n          case 2:\n            buttonID = 'touchable_without_feedback_button';\n            consoleID = 'touchable_without_feedback_console';\n            _context3.next = 6;\n            return _regeneratorRuntime.awrap(element(by.id(buttonID)).tap());\n\n          case 6:\n            _context3.next = 8;\n            return _regeneratorRuntime.awrap(expect(element(by.id(consoleID))).toHaveText('TouchableWithoutFeedback onPress'));\n\n          case 8:\n            _context3.next = 10;\n            return _regeneratorRuntime.awrap(element(by.id(buttonID)).tap());\n\n          case 10:\n            _context3.next = 12;\n            return _regeneratorRuntime.awrap(expect(element(by.id(consoleID))).toHaveText('2x TouchableWithoutFeedback onPress'));\n\n          case 12:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  });\n  it('Text should be tappable', function _callee4() {\n    var buttonID, consoleID;\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return _regeneratorRuntime.awrap(openExampleWithTitle('<Text onPress={fn}> with highlight'));\n\n          case 2:\n            buttonID = 'tappable_text';\n            consoleID = 'tappable_text_console';\n            _context4.next = 6;\n            return _regeneratorRuntime.awrap(element(by.id(buttonID)).tap());\n\n          case 6:\n            _context4.next = 8;\n            return _regeneratorRuntime.awrap(expect(element(by.id(consoleID))).toHaveText('text onPress'));\n\n          case 8:\n            _context4.next = 10;\n            return _regeneratorRuntime.awrap(element(by.id(buttonID)).tap());\n\n          case 10:\n            _context4.next = 12;\n            return _regeneratorRuntime.awrap(expect(element(by.id(consoleID))).toHaveText('2x text onPress'));\n\n          case 12:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  });\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/RNTester/e2e/__tests__/Touchable-test.js"],"names":["require","openComponentWithLabel","openExampleWithTitle","describe","beforeAll","device","reloadReactNative","it","buttonID","button2ID","consoleID","element","by","id","tap","expect","toHaveText"],"mappings":";;eAcIA,OAAO,kB;IAFTC,sB,YAAAA,sB;IACAC,oB,YAAAA,oB;;AAGFC,QAAQ,CAAC,WAAD,EAAc,YAAM;AAC1BC,EAAAA,SAAS,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACFC,MAAM,CAACC,iBAAP,EADE;;AAAA;AAAA;AAAA,6CAEFL,sBAAsB,CAC1B,aAD0B,EAE1B,0DAF0B,CAFpB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,CAAT;AAQAM,EAAAA,EAAE,CAAC,wCAAD,EAA2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACrCL,oBAAoB,CAAC,sBAAD,CADiB;;AAAA;AAErCM,YAAAA,QAFqC,GAE1B,kCAF0B;AAGrCC,YAAAA,SAHqC,GAGzB,iCAHyB;AAIrCC,YAAAA,SAJqC,GAIzB,6BAJyB;AAAA;AAAA,6CAMrCC,OAAO,CAACC,EAAE,CAACC,EAAH,CAAML,QAAN,CAAD,CAAP,CAAyBM,GAAzB,EANqC;;AAAA;AAAA;AAAA,6CAOrCC,MAAM,CAACJ,OAAO,CAACC,EAAE,CAACC,EAAH,CAAMH,SAAN,CAAD,CAAR,CAAN,CAAkCM,UAAlC,CACJ,4BADI,CAPqC;;AAAA;AAAA;AAAA,6CAWrCL,OAAO,CAACC,EAAE,CAACC,EAAH,CAAML,QAAN,CAAD,CAAP,CAAyBM,GAAzB,EAXqC;;AAAA;AAAA;AAAA,6CAYrCC,MAAM,CAACJ,OAAO,CAACC,EAAE,CAACC,EAAH,CAAMH,SAAN,CAAD,CAAR,CAAN,CAAkCM,UAAlC,CACJ,+BADI,CAZqC;;AAAA;AAAA;AAAA,6CAgBrCL,OAAO,CAACC,EAAE,CAACC,EAAH,CAAMJ,SAAN,CAAD,CAAP,CAA0BK,GAA1B,EAhBqC;;AAAA;AAAA;AAAA,6CAiBrCC,MAAM,CAACJ,OAAO,CAACC,EAAE,CAACC,EAAH,CAAMH,SAAN,CAAD,CAAR,CAAN,CAAkCM,UAAlC,CACJ,+BADI,CAjBqC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA3C,CAAF;AAsBAT,EAAAA,EAAE,CAAC,+CAAD,EAAkD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAC5CL,oBAAoB,CAAC,4BAAD,CADwB;;AAAA;AAG5CM,YAAAA,QAH4C,GAGjC,mCAHiC;AAI5CE,YAAAA,SAJ4C,GAIhC,oCAJgC;AAAA;AAAA,6CAM5CC,OAAO,CAACC,EAAE,CAACC,EAAH,CAAML,QAAN,CAAD,CAAP,CAAyBM,GAAzB,EAN4C;;AAAA;AAAA;AAAA,6CAO5CC,MAAM,CAACJ,OAAO,CAACC,EAAE,CAACC,EAAH,CAAMH,SAAN,CAAD,CAAR,CAAN,CAAkCM,UAAlC,CACJ,kCADI,CAP4C;;AAAA;AAAA;AAAA,6CAW5CL,OAAO,CAACC,EAAE,CAACC,EAAH,CAAML,QAAN,CAAD,CAAP,CAAyBM,GAAzB,EAX4C;;AAAA;AAAA;AAAA,6CAY5CC,MAAM,CAACJ,OAAO,CAACC,EAAE,CAACC,EAAH,CAAMH,SAAN,CAAD,CAAR,CAAN,CAAkCM,UAAlC,CACJ,qCADI,CAZ4C;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlD,CAAF;AAiBAT,EAAAA,EAAE,CAAC,yBAAD,EAA4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACtBL,oBAAoB,CAAC,oCAAD,CADE;;AAAA;AAGtBM,YAAAA,QAHsB,GAGX,eAHW;AAItBE,YAAAA,SAJsB,GAIV,uBAJU;AAAA;AAAA,6CAMtBC,OAAO,CAACC,EAAE,CAACC,EAAH,CAAML,QAAN,CAAD,CAAP,CAAyBM,GAAzB,EANsB;;AAAA;AAAA;AAAA,6CAOtBC,MAAM,CAACJ,OAAO,CAACC,EAAE,CAACC,EAAH,CAAMH,SAAN,CAAD,CAAR,CAAN,CAAkCM,UAAlC,CAA6C,cAA7C,CAPsB;;AAAA;AAAA;AAAA,6CAStBL,OAAO,CAACC,EAAE,CAACC,EAAH,CAAML,QAAN,CAAD,CAAP,CAAyBM,GAAzB,EATsB;;AAAA;AAAA;AAAA,6CAUtBC,MAAM,CAACJ,OAAO,CAACC,EAAE,CAACC,EAAH,CAAMH,SAAN,CAAD,CAAR,CAAN,CAAkCM,UAAlC,CAA6C,iBAA7C,CAVsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA5B,CAAF;AAYD,CA5DO,CAAR","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+react_native\n * @format\n */\n\n/* global device, element, by, expect */\nconst {\n  openComponentWithLabel,\n  openExampleWithTitle,\n} = require('../e2e-helpers');\n\ndescribe('Touchable', () => {\n  beforeAll(async () => {\n    await device.reloadReactNative();\n    await openComponentWithLabel(\n      '<Touchable*',\n      '<Touchable*> and onPress Touchable and onPress examples.',\n    );\n  });\n\n  it('Touchable Highlight should be tappable', async () => {\n    await openExampleWithTitle('<TouchableHighlight>');\n    const buttonID = 'touchable_highlight_image_button';\n    const button2ID = 'touchable_highlight_text_button';\n    const consoleID = 'touchable_highlight_console';\n\n    await element(by.id(buttonID)).tap();\n    await expect(element(by.id(consoleID))).toHaveText(\n      'TouchableHighlight onPress',\n    );\n\n    await element(by.id(buttonID)).tap();\n    await expect(element(by.id(consoleID))).toHaveText(\n      '2x TouchableHighlight onPress',\n    );\n\n    await element(by.id(button2ID)).tap();\n    await expect(element(by.id(consoleID))).toHaveText(\n      '3x TouchableHighlight onPress',\n    );\n  });\n\n  it('Touchable Without Feedback should be tappable', async () => {\n    await openExampleWithTitle('<TouchableWithoutFeedback>');\n\n    const buttonID = 'touchable_without_feedback_button';\n    const consoleID = 'touchable_without_feedback_console';\n\n    await element(by.id(buttonID)).tap();\n    await expect(element(by.id(consoleID))).toHaveText(\n      'TouchableWithoutFeedback onPress',\n    );\n\n    await element(by.id(buttonID)).tap();\n    await expect(element(by.id(consoleID))).toHaveText(\n      '2x TouchableWithoutFeedback onPress',\n    );\n  });\n\n  it('Text should be tappable', async () => {\n    await openExampleWithTitle('<Text onPress={fn}> with highlight');\n\n    const buttonID = 'tappable_text';\n    const consoleID = 'tappable_text_console';\n\n    await element(by.id(buttonID)).tap();\n    await expect(element(by.id(consoleID))).toHaveText('text onPress');\n\n    await element(by.id(buttonID)).tap();\n    await expect(element(by.id(consoleID))).toHaveText('2x text onPress');\n  });\n});\n"]},"metadata":{},"sourceType":"script"}