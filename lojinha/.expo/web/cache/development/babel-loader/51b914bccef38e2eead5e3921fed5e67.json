{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar detox = require('detox');\n\nvar config = require(\"../../package.json\").detox;\n\nvar adapter = require('detox/runners/jest/adapter');\n\njest.setTimeout(120000);\njasmine.getEnv().addReporter(adapter);\nbeforeAll(function _callee() {\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(detox.init(config, {\n            launchApp: false\n          }));\n\n        case 2:\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(device.launchApp({\n            launchArgs: {\n              newInstance: true\n            },\n            permissions: {\n              notifications: 'YES',\n              camera: 'YES',\n              medialibrary: 'YES',\n              photos: 'YES',\n              microphone: 'YES'\n            }\n          }));\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n});\nbeforeEach(function _callee2() {\n  return _regeneratorRuntime.async(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(adapter.beforeEach());\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n});\nafterAll(function _callee3() {\n  return _regeneratorRuntime.async(function _callee3$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(adapter.afterAll());\n\n        case 2:\n          _context3.next = 4;\n          return _regeneratorRuntime.awrap(detox.cleanup());\n\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n});\nprocess.on('unhandledRejection', function (reason, p) {\n  console.log('Unhandled Rejection at: Promise', p, 'reason:', reason);\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/RNTester/e2e/test-init.js"],"names":["detox","require","config","adapter","jest","setTimeout","jasmine","getEnv","addReporter","beforeAll","init","launchApp","device","launchArgs","newInstance","permissions","notifications","camera","medialibrary","photos","microphone","beforeEach","afterAll","cleanup","process","on","reason","p","console","log"],"mappings":";;AAYA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMC,MAAM,GAAGD,OAAO,sBAAP,CAA8BD,KAA7C;;AACA,IAAMG,OAAO,GAAGF,OAAO,CAAC,4BAAD,CAAvB;;AACAG,IAAI,CAACC,UAAL,CAAgB,MAAhB;AACAC,OAAO,CAACC,MAAR,GAAiBC,WAAjB,CAA6BL,OAA7B;AAEAM,SAAS,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACFT,KAAK,CAACU,IAAN,CAAWR,MAAX,EAAmB;AAACS,YAAAA,SAAS,EAAE;AAAZ,WAAnB,CADE;;AAAA;AAAA;AAAA,2CAEFC,MAAM,CAACD,SAAP,CAAiB;AACrBE,YAAAA,UAAU,EAAE;AACVC,cAAAA,WAAW,EAAE;AADH,aADS;AAOrBC,YAAAA,WAAW,EAAE;AACXC,cAAAA,aAAa,EAAE,KADJ;AAEXC,cAAAA,MAAM,EAAE,KAFG;AAGXC,cAAAA,YAAY,EAAE,KAHH;AAIXC,cAAAA,MAAM,EAAE,KAJG;AAKXC,cAAAA,UAAU,EAAE;AALD;AAPQ,WAAjB,CAFE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAD,CAAT;AAmBAC,UAAU,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACHlB,OAAO,CAACkB,UAAR,EADG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAD,CAAV;AAIAC,QAAQ,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACDnB,OAAO,CAACmB,QAAR,EADC;;AAAA;AAAA;AAAA,2CAEDtB,KAAK,CAACuB,OAAN,EAFC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAD,CAAR;AAKAC,OAAO,CAACC,EAAR,CAAW,oBAAX,EAAiC,UAACC,MAAD,EAASC,CAAT,EAAe;AAC9CC,EAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ,EAA+CF,CAA/C,EAAkD,SAAlD,EAA6DD,MAA7D;AACD,CAFD","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\n/* eslint-env jasmine */\n/* global device */\n\nconst detox = require('detox');\nconst config = require('../../package.json').detox;\nconst adapter = require('detox/runners/jest/adapter');\njest.setTimeout(120000);\njasmine.getEnv().addReporter(adapter);\n\nbeforeAll(async () => {\n  await detox.init(config, {launchApp: false});\n  await device.launchApp({\n    launchArgs: {\n      newInstance: true,\n      // see https://github.com/wix/Detox/blob/master/docs/Troubleshooting.Synchronization.md\n      // and uncomment below if app fails to launch\n      // detoxPrintBusyIdleResources: 'YES',\n    },\n    permissions: {\n      notifications: 'YES',\n      camera: 'YES',\n      medialibrary: 'YES',\n      photos: 'YES',\n      microphone: 'YES',\n    },\n  });\n});\n\nbeforeEach(async function() {\n  await adapter.beforeEach();\n});\n\nafterAll(async () => {\n  await adapter.afterAll();\n  await detox.cleanup();\n});\n\nprocess.on('unhandledRejection', (reason, p) => {\n  console.log('Unhandled Rejection at: Promise', p, 'reason:', reason);\n});\n"]},"metadata":{},"sourceType":"script"}