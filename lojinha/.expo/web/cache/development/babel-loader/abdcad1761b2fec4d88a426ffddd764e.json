{"ast":null,"code":"'use strict';\n\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _this3 = this,\n    _jsxFileName = \"/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native-web/src/exports/Touchable/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport AccessibilityUtil from \"../../modules/AccessibilityUtil\";\nimport BoundingDimensions from \"./BoundingDimensions\";\nimport findNodeHandle from \"../findNodeHandle\";\nimport normalizeColor from 'normalize-css-color';\nimport Position from \"./Position\";\nimport React from 'react';\nimport UIManager from \"../UIManager\";\nimport View from \"../View\";\n\nvar extractSingleTouch = function extractSingleTouch(nativeEvent) {\n  var touches = nativeEvent.touches;\n  var changedTouches = nativeEvent.changedTouches;\n  var hasTouches = touches && touches.length > 0;\n  var hasChangedTouches = changedTouches && changedTouches.length > 0;\n  return !hasTouches && hasChangedTouches ? changedTouches[0] : hasTouches ? touches[0] : nativeEvent;\n};\n\nvar States = {\n  NOT_RESPONDER: 'NOT_RESPONDER',\n  RESPONDER_INACTIVE_PRESS_IN: 'RESPONDER_INACTIVE_PRESS_IN',\n  RESPONDER_INACTIVE_PRESS_OUT: 'RESPONDER_INACTIVE_PRESS_OUT',\n  RESPONDER_ACTIVE_PRESS_IN: 'RESPONDER_ACTIVE_PRESS_IN',\n  RESPONDER_ACTIVE_PRESS_OUT: 'RESPONDER_ACTIVE_PRESS_OUT',\n  RESPONDER_ACTIVE_LONG_PRESS_IN: 'RESPONDER_ACTIVE_LONG_PRESS_IN',\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: 'RESPONDER_ACTIVE_LONG_PRESS_OUT',\n  ERROR: 'ERROR'\n};\nvar baseStatesConditions = {\n  NOT_RESPONDER: false,\n  RESPONDER_INACTIVE_PRESS_IN: false,\n  RESPONDER_INACTIVE_PRESS_OUT: false,\n  RESPONDER_ACTIVE_PRESS_IN: false,\n  RESPONDER_ACTIVE_PRESS_OUT: false,\n  RESPONDER_ACTIVE_LONG_PRESS_IN: false,\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: false,\n  ERROR: false\n};\n\nvar IsActive = _objectSpread(_objectSpread({}, baseStatesConditions), {}, {\n  RESPONDER_ACTIVE_PRESS_OUT: true,\n  RESPONDER_ACTIVE_PRESS_IN: true\n});\n\nvar IsPressingIn = _objectSpread(_objectSpread({}, baseStatesConditions), {}, {\n  RESPONDER_INACTIVE_PRESS_IN: true,\n  RESPONDER_ACTIVE_PRESS_IN: true,\n  RESPONDER_ACTIVE_LONG_PRESS_IN: true\n});\n\nvar IsLongPressingIn = _objectSpread(_objectSpread({}, baseStatesConditions), {}, {\n  RESPONDER_ACTIVE_LONG_PRESS_IN: true\n});\n\nvar Signals = {\n  DELAY: 'DELAY',\n  RESPONDER_GRANT: 'RESPONDER_GRANT',\n  RESPONDER_RELEASE: 'RESPONDER_RELEASE',\n  RESPONDER_TERMINATED: 'RESPONDER_TERMINATED',\n  ENTER_PRESS_RECT: 'ENTER_PRESS_RECT',\n  LEAVE_PRESS_RECT: 'LEAVE_PRESS_RECT',\n  LONG_PRESS_DETECTED: 'LONG_PRESS_DETECTED'\n};\nvar Transitions = {\n  NOT_RESPONDER: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,\n    RESPONDER_RELEASE: States.ERROR,\n    RESPONDER_TERMINATED: States.ERROR,\n    ENTER_PRESS_RECT: States.ERROR,\n    LEAVE_PRESS_RECT: States.ERROR,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_INACTIVE_PRESS_IN: {\n    DELAY: States.RESPONDER_ACTIVE_PRESS_IN,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_INACTIVE_PRESS_OUT: {\n    DELAY: States.RESPONDER_ACTIVE_PRESS_OUT,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_ACTIVE_PRESS_IN: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN\n  },\n  RESPONDER_ACTIVE_PRESS_OUT: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_IN: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  error: {\n    DELAY: States.NOT_RESPONDER,\n    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.NOT_RESPONDER,\n    LEAVE_PRESS_RECT: States.NOT_RESPONDER,\n    LONG_PRESS_DETECTED: States.NOT_RESPONDER\n  }\n};\nvar HIGHLIGHT_DELAY_MS = 130;\nvar PRESS_EXPAND_PX = 20;\nvar LONG_PRESS_THRESHOLD = 500;\nvar LONG_PRESS_DELAY_MS = LONG_PRESS_THRESHOLD - HIGHLIGHT_DELAY_MS;\nvar LONG_PRESS_ALLOWED_MOVEMENT = 10;\nvar TouchableMixin = {\n  componentDidMount: function componentDidMount() {\n    var _this = this;\n\n    this._touchableNode = findNodeHandle(this);\n\n    if (this._touchableNode && this._touchableNode.addEventListener) {\n      this._touchableBlurListener = function (e) {\n        if (_this._isTouchableKeyboardActive) {\n          if (_this.state.touchable.touchState && _this.state.touchable.touchState !== States.NOT_RESPONDER) {\n            _this.touchableHandleResponderTerminate({\n              nativeEvent: e\n            });\n          }\n\n          _this._isTouchableKeyboardActive = false;\n        }\n      };\n\n      this._touchableNode.addEventListener('blur', this._touchableBlurListener);\n    }\n  },\n  componentWillUnmount: function componentWillUnmount() {\n    if (this._touchableNode && this._touchableNode.addEventListener) {\n      this._touchableNode.removeEventListener('blur', this._touchableBlurListener);\n    }\n\n    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);\n    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);\n    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);\n  },\n  touchableGetInitialState: function touchableGetInitialState() {\n    return {\n      touchable: {\n        touchState: undefined,\n        responderID: null\n      }\n    };\n  },\n  touchableHandleResponderTerminationRequest: function touchableHandleResponderTerminationRequest() {\n    return !this.props.rejectResponderTermination;\n  },\n  touchableHandleStartShouldSetResponder: function touchableHandleStartShouldSetResponder() {\n    return !this.props.disabled;\n  },\n  touchableLongPressCancelsPress: function touchableLongPressCancelsPress() {\n    return true;\n  },\n  touchableHandleResponderGrant: function touchableHandleResponderGrant(e) {\n    var dispatchID = e.currentTarget;\n    e.persist();\n    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);\n    this.pressOutDelayTimeout = null;\n    this.state.touchable.touchState = States.NOT_RESPONDER;\n    this.state.touchable.responderID = dispatchID;\n\n    this._receiveSignal(Signals.RESPONDER_GRANT, e);\n\n    var delayMS = this.touchableGetHighlightDelayMS !== undefined ? Math.max(this.touchableGetHighlightDelayMS(), 0) : HIGHLIGHT_DELAY_MS;\n    delayMS = isNaN(delayMS) ? HIGHLIGHT_DELAY_MS : delayMS;\n\n    if (delayMS !== 0) {\n      this.touchableDelayTimeout = setTimeout(this._handleDelay.bind(this, e), delayMS);\n    } else {\n      this._handleDelay(e);\n    }\n\n    var longDelayMS = this.touchableGetLongPressDelayMS !== undefined ? Math.max(this.touchableGetLongPressDelayMS(), 10) : LONG_PRESS_DELAY_MS;\n    longDelayMS = isNaN(longDelayMS) ? LONG_PRESS_DELAY_MS : longDelayMS;\n    this.longPressDelayTimeout = setTimeout(this._handleLongDelay.bind(this, e), longDelayMS + delayMS);\n  },\n  touchableHandleResponderRelease: function touchableHandleResponderRelease(e) {\n    this.pressInLocation = null;\n\n    this._receiveSignal(Signals.RESPONDER_RELEASE, e);\n  },\n  touchableHandleResponderTerminate: function touchableHandleResponderTerminate(e) {\n    this.pressInLocation = null;\n\n    this._receiveSignal(Signals.RESPONDER_TERMINATED, e);\n  },\n  touchableHandleResponderMove: function touchableHandleResponderMove(e) {\n    if (!this.state.touchable.positionOnActivate) {\n      return;\n    }\n\n    var positionOnActivate = this.state.touchable.positionOnActivate;\n    var dimensionsOnActivate = this.state.touchable.dimensionsOnActivate;\n    var pressRectOffset = this.touchableGetPressRectOffset ? this.touchableGetPressRectOffset() : {\n      left: PRESS_EXPAND_PX,\n      right: PRESS_EXPAND_PX,\n      top: PRESS_EXPAND_PX,\n      bottom: PRESS_EXPAND_PX\n    };\n    var pressExpandLeft = pressRectOffset.left;\n    var pressExpandTop = pressRectOffset.top;\n    var pressExpandRight = pressRectOffset.right;\n    var pressExpandBottom = pressRectOffset.bottom;\n    var hitSlop = this.touchableGetHitSlop ? this.touchableGetHitSlop() : null;\n\n    if (hitSlop) {\n      pressExpandLeft += hitSlop.left || 0;\n      pressExpandTop += hitSlop.top || 0;\n      pressExpandRight += hitSlop.right || 0;\n      pressExpandBottom += hitSlop.bottom || 0;\n    }\n\n    var touch = extractSingleTouch(e.nativeEvent);\n    var pageX = touch && touch.pageX;\n    var pageY = touch && touch.pageY;\n\n    if (this.pressInLocation) {\n      var movedDistance = this._getDistanceBetweenPoints(pageX, pageY, this.pressInLocation.pageX, this.pressInLocation.pageY);\n\n      if (movedDistance > LONG_PRESS_ALLOWED_MOVEMENT) {\n        this._cancelLongPressDelayTimeout();\n      }\n    }\n\n    var isTouchWithinActive = pageX > positionOnActivate.left - pressExpandLeft && pageY > positionOnActivate.top - pressExpandTop && pageX < positionOnActivate.left + dimensionsOnActivate.width + pressExpandRight && pageY < positionOnActivate.top + dimensionsOnActivate.height + pressExpandBottom;\n\n    if (isTouchWithinActive) {\n      var prevState = this.state.touchable.touchState;\n\n      this._receiveSignal(Signals.ENTER_PRESS_RECT, e);\n\n      var curState = this.state.touchable.touchState;\n\n      if (curState === States.RESPONDER_INACTIVE_PRESS_IN && prevState !== States.RESPONDER_INACTIVE_PRESS_IN) {\n        this._cancelLongPressDelayTimeout();\n      }\n    } else {\n      this._cancelLongPressDelayTimeout();\n\n      this._receiveSignal(Signals.LEAVE_PRESS_RECT, e);\n    }\n  },\n  touchableHandleFocus: function touchableHandleFocus(e) {\n    this.props.onFocus && this.props.onFocus(e);\n  },\n  touchableHandleBlur: function touchableHandleBlur(e) {\n    this.props.onBlur && this.props.onBlur(e);\n  },\n  _remeasureMetricsOnActivation: function _remeasureMetricsOnActivation() {\n    var tag = this.state.touchable.responderID;\n\n    if (tag == null) {\n      return;\n    }\n\n    UIManager.measure(tag, this._handleQueryLayout);\n  },\n  _handleQueryLayout: function _handleQueryLayout(l, t, w, h, globalX, globalY) {\n    if (!l && !t && !w && !h && !globalX && !globalY) {\n      return;\n    }\n\n    this.state.touchable.positionOnActivate && Position.release(this.state.touchable.positionOnActivate);\n    this.state.touchable.dimensionsOnActivate && BoundingDimensions.release(this.state.touchable.dimensionsOnActivate);\n    this.state.touchable.positionOnActivate = Position.getPooled(globalX, globalY);\n    this.state.touchable.dimensionsOnActivate = BoundingDimensions.getPooled(w, h);\n  },\n  _handleDelay: function _handleDelay(e) {\n    this.touchableDelayTimeout = null;\n\n    this._receiveSignal(Signals.DELAY, e);\n  },\n  _handleLongDelay: function _handleLongDelay(e) {\n    this.longPressDelayTimeout = null;\n    var curState = this.state.touchable.touchState;\n\n    if (curState !== States.RESPONDER_ACTIVE_PRESS_IN && curState !== States.RESPONDER_ACTIVE_LONG_PRESS_IN) {\n      console.error('Attempted to transition from state `' + curState + '` to `' + States.RESPONDER_ACTIVE_LONG_PRESS_IN + '`, which is not supported. This is ' + 'most likely due to `Touchable.longPressDelayTimeout` not being cancelled.');\n    } else {\n      this._receiveSignal(Signals.LONG_PRESS_DETECTED, e);\n    }\n  },\n  _receiveSignal: function _receiveSignal(signal, e) {\n    var responderID = this.state.touchable.responderID;\n    var curState = this.state.touchable.touchState;\n    var nextState = Transitions[curState] && Transitions[curState][signal];\n\n    if (!responderID && signal === Signals.RESPONDER_RELEASE) {\n      return;\n    }\n\n    if (!nextState) {\n      throw new Error('Unrecognized signal `' + signal + '` or state `' + curState + '` for Touchable responder `' + responderID + '`');\n    }\n\n    if (nextState === States.ERROR) {\n      throw new Error('Touchable cannot transition from `' + curState + '` to `' + signal + '` for responder `' + responderID + '`');\n    }\n\n    if (curState !== nextState) {\n      this._performSideEffectsForTransition(curState, nextState, signal, e);\n\n      this.state.touchable.touchState = nextState;\n    }\n  },\n  _cancelLongPressDelayTimeout: function _cancelLongPressDelayTimeout() {\n    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);\n    this.longPressDelayTimeout = null;\n  },\n  _isHighlight: function _isHighlight(state) {\n    return state === States.RESPONDER_ACTIVE_PRESS_IN || state === States.RESPONDER_ACTIVE_LONG_PRESS_IN;\n  },\n  _savePressInLocation: function _savePressInLocation(e) {\n    var touch = extractSingleTouch(e.nativeEvent);\n    var pageX = touch && touch.pageX;\n    var pageY = touch && touch.pageY;\n    var locationX = touch && touch.locationX;\n    var locationY = touch && touch.locationY;\n    this.pressInLocation = {\n      pageX: pageX,\n      pageY: pageY,\n      locationX: locationX,\n      locationY: locationY\n    };\n  },\n  _getDistanceBetweenPoints: function _getDistanceBetweenPoints(aX, aY, bX, bY) {\n    var deltaX = aX - bX;\n    var deltaY = aY - bY;\n    return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n  },\n  _performSideEffectsForTransition: function _performSideEffectsForTransition(curState, nextState, signal, e) {\n    var curIsHighlight = this._isHighlight(curState);\n\n    var newIsHighlight = this._isHighlight(nextState);\n\n    var isFinalSignal = signal === Signals.RESPONDER_TERMINATED || signal === Signals.RESPONDER_RELEASE;\n\n    if (isFinalSignal) {\n      this._cancelLongPressDelayTimeout();\n    }\n\n    var isInitialTransition = curState === States.NOT_RESPONDER && nextState === States.RESPONDER_INACTIVE_PRESS_IN;\n    var isActiveTransition = !IsActive[curState] && IsActive[nextState];\n\n    if (isInitialTransition || isActiveTransition) {\n      this._remeasureMetricsOnActivation();\n    }\n\n    if (IsPressingIn[curState] && signal === Signals.LONG_PRESS_DETECTED) {\n      this.touchableHandleLongPress && this.touchableHandleLongPress(e);\n    }\n\n    if (newIsHighlight && !curIsHighlight) {\n      this._startHighlight(e);\n    } else if (!newIsHighlight && curIsHighlight) {\n      this._endHighlight(e);\n    }\n\n    if (IsPressingIn[curState] && signal === Signals.RESPONDER_RELEASE) {\n      var hasLongPressHandler = !!this.props.onLongPress;\n      var pressIsLongButStillCallOnPress = IsLongPressingIn[curState] && (!hasLongPressHandler || !this.touchableLongPressCancelsPress());\n      var shouldInvokePress = !IsLongPressingIn[curState] || pressIsLongButStillCallOnPress;\n\n      if (shouldInvokePress && this.touchableHandlePress) {\n        if (!newIsHighlight && !curIsHighlight) {\n          this._startHighlight(e);\n\n          this._endHighlight(e);\n        }\n\n        this.touchableHandlePress(e);\n      }\n    }\n\n    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);\n    this.touchableDelayTimeout = null;\n  },\n  _playTouchSound: function _playTouchSound() {\n    UIManager.playTouchSound();\n  },\n  _startHighlight: function _startHighlight(e) {\n    this._savePressInLocation(e);\n\n    this.touchableHandleActivePressIn && this.touchableHandleActivePressIn(e);\n  },\n  _endHighlight: function _endHighlight(e) {\n    var _this2 = this;\n\n    if (this.touchableHandleActivePressOut) {\n      if (this.touchableGetPressOutDelayMS && this.touchableGetPressOutDelayMS()) {\n        this.pressOutDelayTimeout = setTimeout(function () {\n          _this2.touchableHandleActivePressOut(e);\n        }, this.touchableGetPressOutDelayMS());\n      } else {\n        this.touchableHandleActivePressOut(e);\n      }\n    }\n  },\n  touchableHandleKeyEvent: function touchableHandleKeyEvent(e) {\n    var type = e.type,\n        key = e.key;\n\n    if (key === 'Enter' || key === ' ') {\n      if (type === 'keydown') {\n        if (!this._isTouchableKeyboardActive) {\n          if (!this.state.touchable.touchState || this.state.touchable.touchState === States.NOT_RESPONDER) {\n            this.touchableHandleResponderGrant(e);\n            this._isTouchableKeyboardActive = true;\n          }\n        }\n      } else if (type === 'keyup') {\n        if (this._isTouchableKeyboardActive) {\n          if (this.state.touchable.touchState && this.state.touchable.touchState !== States.NOT_RESPONDER) {\n            this.touchableHandleResponderRelease(e);\n            this._isTouchableKeyboardActive = false;\n          }\n        }\n      }\n\n      e.stopPropagation();\n\n      if (!(key === 'Enter' && AccessibilityUtil.propsToAriaRole(this.props) === 'link')) {\n        e.preventDefault();\n      }\n    }\n  },\n  withoutDefaultFocusAndBlur: {}\n};\n\nvar touchableHandleFocus = TouchableMixin.touchableHandleFocus,\n    touchableHandleBlur = TouchableMixin.touchableHandleBlur,\n    TouchableMixinWithoutDefaultFocusAndBlur = _objectWithoutProperties(TouchableMixin, [\"touchableHandleFocus\", \"touchableHandleBlur\"]);\n\nTouchableMixin.withoutDefaultFocusAndBlur = TouchableMixinWithoutDefaultFocusAndBlur;\nvar Touchable = {\n  Mixin: TouchableMixin,\n  TOUCH_TARGET_DEBUG: false,\n  renderDebugView: function renderDebugView(_ref) {\n    var color = _ref.color,\n        hitSlop = _ref.hitSlop;\n\n    if (!Touchable.TOUCH_TARGET_DEBUG) {\n      return null;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      throw Error('Touchable.TOUCH_TARGET_DEBUG should not be enabled in prod!');\n    }\n\n    var debugHitSlopStyle = {};\n    hitSlop = hitSlop || {\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0\n    };\n\n    for (var key in hitSlop) {\n      debugHitSlopStyle[key] = -hitSlop[key];\n    }\n\n    var normalizedColor = normalizeColor(color);\n\n    if (typeof normalizedColor !== 'number') {\n      return null;\n    }\n\n    var hexColor = '#' + ('00000000' + normalizedColor.toString(16)).substr(-8);\n    return React.createElement(View, {\n      pointerEvents: \"none\",\n      style: _objectSpread({\n        position: 'absolute',\n        borderColor: hexColor.slice(0, -2) + '55',\n        borderWidth: 1,\n        borderStyle: 'dashed',\n        backgroundColor: hexColor.slice(0, -2) + '0F'\n      }, debugHitSlopStyle),\n      __self: _this3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 949,\n        columnNumber: 7\n      }\n    });\n  }\n};\nexport default Touchable;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native-web/src/exports/Touchable/index.js"],"names":["AccessibilityUtil","BoundingDimensions","findNodeHandle","normalizeColor","Position","React","UIManager","View","extractSingleTouch","nativeEvent","touches","changedTouches","hasTouches","length","hasChangedTouches","States","NOT_RESPONDER","RESPONDER_INACTIVE_PRESS_IN","RESPONDER_INACTIVE_PRESS_OUT","RESPONDER_ACTIVE_PRESS_IN","RESPONDER_ACTIVE_PRESS_OUT","RESPONDER_ACTIVE_LONG_PRESS_IN","RESPONDER_ACTIVE_LONG_PRESS_OUT","ERROR","baseStatesConditions","IsActive","IsPressingIn","IsLongPressingIn","Signals","DELAY","RESPONDER_GRANT","RESPONDER_RELEASE","RESPONDER_TERMINATED","ENTER_PRESS_RECT","LEAVE_PRESS_RECT","LONG_PRESS_DETECTED","Transitions","error","HIGHLIGHT_DELAY_MS","PRESS_EXPAND_PX","LONG_PRESS_THRESHOLD","LONG_PRESS_DELAY_MS","LONG_PRESS_ALLOWED_MOVEMENT","TouchableMixin","componentDidMount","_touchableNode","addEventListener","_touchableBlurListener","e","_isTouchableKeyboardActive","state","touchable","touchState","touchableHandleResponderTerminate","componentWillUnmount","removeEventListener","touchableDelayTimeout","clearTimeout","longPressDelayTimeout","pressOutDelayTimeout","touchableGetInitialState","undefined","responderID","touchableHandleResponderTerminationRequest","props","rejectResponderTermination","touchableHandleStartShouldSetResponder","disabled","touchableLongPressCancelsPress","touchableHandleResponderGrant","dispatchID","currentTarget","persist","_receiveSignal","delayMS","touchableGetHighlightDelayMS","Math","max","isNaN","setTimeout","_handleDelay","bind","longDelayMS","touchableGetLongPressDelayMS","_handleLongDelay","touchableHandleResponderRelease","pressInLocation","touchableHandleResponderMove","positionOnActivate","dimensionsOnActivate","pressRectOffset","touchableGetPressRectOffset","left","right","top","bottom","pressExpandLeft","pressExpandTop","pressExpandRight","pressExpandBottom","hitSlop","touchableGetHitSlop","touch","pageX","pageY","movedDistance","_getDistanceBetweenPoints","_cancelLongPressDelayTimeout","isTouchWithinActive","width","height","prevState","curState","touchableHandleFocus","onFocus","touchableHandleBlur","onBlur","_remeasureMetricsOnActivation","tag","measure","_handleQueryLayout","l","t","w","h","globalX","globalY","release","getPooled","console","signal","nextState","Error","_performSideEffectsForTransition","_isHighlight","_savePressInLocation","locationX","locationY","aX","aY","bX","bY","deltaX","deltaY","sqrt","curIsHighlight","newIsHighlight","isFinalSignal","isInitialTransition","isActiveTransition","touchableHandleLongPress","_startHighlight","_endHighlight","hasLongPressHandler","onLongPress","pressIsLongButStillCallOnPress","shouldInvokePress","touchableHandlePress","_playTouchSound","playTouchSound","touchableHandleActivePressIn","touchableHandleActivePressOut","touchableGetPressOutDelayMS","touchableHandleKeyEvent","type","key","stopPropagation","propsToAriaRole","preventDefault","withoutDefaultFocusAndBlur","TouchableMixinWithoutDefaultFocusAndBlur","Touchable","Mixin","TOUCH_TARGET_DEBUG","renderDebugView","color","process","env","NODE_ENV","debugHitSlopStyle","normalizedColor","hexColor","toString","substr","position","borderColor","slice","borderWidth","borderStyle","backgroundColor"],"mappings":"AAUA;;;;;;;;;;;;AAEA,OAAOA,iBAAP;AACA,OAAOC,kBAAP;AACA,OAAOC,cAAP;AACA,OAAOC,cAAP,MAA2B,qBAA3B;AACA,OAAOC,QAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP;AACA,OAAOC,IAAP;;AAMA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,WAAW,EAAI;AACxC,MAAMC,OAAO,GAAGD,WAAW,CAACC,OAA5B;AACA,MAAMC,cAAc,GAAGF,WAAW,CAACE,cAAnC;AACA,MAAMC,UAAU,GAAGF,OAAO,IAAIA,OAAO,CAACG,MAAR,GAAiB,CAA/C;AACA,MAAMC,iBAAiB,GAAGH,cAAc,IAAIA,cAAc,CAACE,MAAf,GAAwB,CAApE;AAEA,SAAO,CAACD,UAAD,IAAeE,iBAAf,GACHH,cAAc,CAAC,CAAD,CADX,GAEHC,UAAU,GACVF,OAAO,CAAC,CAAD,CADG,GAEVD,WAJJ;AAKD,CAXD;;AAsGA,IAAMM,MAAM,GAAG;AACbC,EAAAA,aAAa,EAAE,eADF;AAEbC,EAAAA,2BAA2B,EAAE,6BAFhB;AAGbC,EAAAA,4BAA4B,EAAE,8BAHjB;AAIbC,EAAAA,yBAAyB,EAAE,2BAJd;AAKbC,EAAAA,0BAA0B,EAAE,4BALf;AAMbC,EAAAA,8BAA8B,EAAE,gCANnB;AAObC,EAAAA,+BAA+B,EAAE,iCAPpB;AAQbC,EAAAA,KAAK,EAAE;AARM,CAAf;AAyBA,IAAMC,oBAAoB,GAAG;AAC3BR,EAAAA,aAAa,EAAE,KADY;AAE3BC,EAAAA,2BAA2B,EAAE,KAFF;AAG3BC,EAAAA,4BAA4B,EAAE,KAHH;AAI3BC,EAAAA,yBAAyB,EAAE,KAJA;AAK3BC,EAAAA,0BAA0B,EAAE,KALD;AAM3BC,EAAAA,8BAA8B,EAAE,KANL;AAO3BC,EAAAA,+BAA+B,EAAE,KAPN;AAQ3BC,EAAAA,KAAK,EAAE;AARoB,CAA7B;;AAWA,IAAME,QAAQ,mCACTD,oBADS;AAEZJ,EAAAA,0BAA0B,EAAE,IAFhB;AAGZD,EAAAA,yBAAyB,EAAE;AAHf,EAAd;;AAUA,IAAMO,YAAY,mCACbF,oBADa;AAEhBP,EAAAA,2BAA2B,EAAE,IAFb;AAGhBE,EAAAA,yBAAyB,EAAE,IAHX;AAIhBE,EAAAA,8BAA8B,EAAE;AAJhB,EAAlB;;AAOA,IAAMM,gBAAgB,mCACjBH,oBADiB;AAEpBH,EAAAA,8BAA8B,EAAE;AAFZ,EAAtB;;AAQA,IAAMO,OAAO,GAAG;AACdC,EAAAA,KAAK,EAAE,OADO;AAEdC,EAAAA,eAAe,EAAE,iBAFH;AAGdC,EAAAA,iBAAiB,EAAE,mBAHL;AAIdC,EAAAA,oBAAoB,EAAE,sBAJR;AAKdC,EAAAA,gBAAgB,EAAE,kBALJ;AAMdC,EAAAA,gBAAgB,EAAE,kBANJ;AAOdC,EAAAA,mBAAmB,EAAE;AAPP,CAAhB;AAsBA,IAAMC,WAAW,GAAG;AAClBpB,EAAAA,aAAa,EAAE;AACba,IAAAA,KAAK,EAAEd,MAAM,CAACQ,KADD;AAEbO,IAAAA,eAAe,EAAEf,MAAM,CAACE,2BAFX;AAGbc,IAAAA,iBAAiB,EAAEhB,MAAM,CAACQ,KAHb;AAIbS,IAAAA,oBAAoB,EAAEjB,MAAM,CAACQ,KAJhB;AAKbU,IAAAA,gBAAgB,EAAElB,MAAM,CAACQ,KALZ;AAMbW,IAAAA,gBAAgB,EAAEnB,MAAM,CAACQ,KANZ;AAObY,IAAAA,mBAAmB,EAAEpB,MAAM,CAACQ;AAPf,GADG;AAUlBN,EAAAA,2BAA2B,EAAE;AAC3BY,IAAAA,KAAK,EAAEd,MAAM,CAACI,yBADa;AAE3BW,IAAAA,eAAe,EAAEf,MAAM,CAACQ,KAFG;AAG3BQ,IAAAA,iBAAiB,EAAEhB,MAAM,CAACC,aAHC;AAI3BgB,IAAAA,oBAAoB,EAAEjB,MAAM,CAACC,aAJF;AAK3BiB,IAAAA,gBAAgB,EAAElB,MAAM,CAACE,2BALE;AAM3BiB,IAAAA,gBAAgB,EAAEnB,MAAM,CAACG,4BANE;AAO3BiB,IAAAA,mBAAmB,EAAEpB,MAAM,CAACQ;AAPD,GAVX;AAmBlBL,EAAAA,4BAA4B,EAAE;AAC5BW,IAAAA,KAAK,EAAEd,MAAM,CAACK,0BADc;AAE5BU,IAAAA,eAAe,EAAEf,MAAM,CAACQ,KAFI;AAG5BQ,IAAAA,iBAAiB,EAAEhB,MAAM,CAACC,aAHE;AAI5BgB,IAAAA,oBAAoB,EAAEjB,MAAM,CAACC,aAJD;AAK5BiB,IAAAA,gBAAgB,EAAElB,MAAM,CAACE,2BALG;AAM5BiB,IAAAA,gBAAgB,EAAEnB,MAAM,CAACG,4BANG;AAO5BiB,IAAAA,mBAAmB,EAAEpB,MAAM,CAACQ;AAPA,GAnBZ;AA4BlBJ,EAAAA,yBAAyB,EAAE;AACzBU,IAAAA,KAAK,EAAEd,MAAM,CAACQ,KADW;AAEzBO,IAAAA,eAAe,EAAEf,MAAM,CAACQ,KAFC;AAGzBQ,IAAAA,iBAAiB,EAAEhB,MAAM,CAACC,aAHD;AAIzBgB,IAAAA,oBAAoB,EAAEjB,MAAM,CAACC,aAJJ;AAKzBiB,IAAAA,gBAAgB,EAAElB,MAAM,CAACI,yBALA;AAMzBe,IAAAA,gBAAgB,EAAEnB,MAAM,CAACK,0BANA;AAOzBe,IAAAA,mBAAmB,EAAEpB,MAAM,CAACM;AAPH,GA5BT;AAqClBD,EAAAA,0BAA0B,EAAE;AAC1BS,IAAAA,KAAK,EAAEd,MAAM,CAACQ,KADY;AAE1BO,IAAAA,eAAe,EAAEf,MAAM,CAACQ,KAFE;AAG1BQ,IAAAA,iBAAiB,EAAEhB,MAAM,CAACC,aAHA;AAI1BgB,IAAAA,oBAAoB,EAAEjB,MAAM,CAACC,aAJH;AAK1BiB,IAAAA,gBAAgB,EAAElB,MAAM,CAACI,yBALC;AAM1Be,IAAAA,gBAAgB,EAAEnB,MAAM,CAACK,0BANC;AAO1Be,IAAAA,mBAAmB,EAAEpB,MAAM,CAACQ;AAPF,GArCV;AA8ClBF,EAAAA,8BAA8B,EAAE;AAC9BQ,IAAAA,KAAK,EAAEd,MAAM,CAACQ,KADgB;AAE9BO,IAAAA,eAAe,EAAEf,MAAM,CAACQ,KAFM;AAG9BQ,IAAAA,iBAAiB,EAAEhB,MAAM,CAACC,aAHI;AAI9BgB,IAAAA,oBAAoB,EAAEjB,MAAM,CAACC,aAJC;AAK9BiB,IAAAA,gBAAgB,EAAElB,MAAM,CAACM,8BALK;AAM9Ba,IAAAA,gBAAgB,EAAEnB,MAAM,CAACO,+BANK;AAO9Ba,IAAAA,mBAAmB,EAAEpB,MAAM,CAACM;AAPE,GA9Cd;AAuDlBC,EAAAA,+BAA+B,EAAE;AAC/BO,IAAAA,KAAK,EAAEd,MAAM,CAACQ,KADiB;AAE/BO,IAAAA,eAAe,EAAEf,MAAM,CAACQ,KAFO;AAG/BQ,IAAAA,iBAAiB,EAAEhB,MAAM,CAACC,aAHK;AAI/BgB,IAAAA,oBAAoB,EAAEjB,MAAM,CAACC,aAJE;AAK/BiB,IAAAA,gBAAgB,EAAElB,MAAM,CAACM,8BALM;AAM/Ba,IAAAA,gBAAgB,EAAEnB,MAAM,CAACO,+BANM;AAO/Ba,IAAAA,mBAAmB,EAAEpB,MAAM,CAACQ;AAPG,GAvDf;AAgElBc,EAAAA,KAAK,EAAE;AACLR,IAAAA,KAAK,EAAEd,MAAM,CAACC,aADT;AAELc,IAAAA,eAAe,EAAEf,MAAM,CAACE,2BAFnB;AAGLc,IAAAA,iBAAiB,EAAEhB,MAAM,CAACC,aAHrB;AAILgB,IAAAA,oBAAoB,EAAEjB,MAAM,CAACC,aAJxB;AAKLiB,IAAAA,gBAAgB,EAAElB,MAAM,CAACC,aALpB;AAMLkB,IAAAA,gBAAgB,EAAEnB,MAAM,CAACC,aANpB;AAOLmB,IAAAA,mBAAmB,EAAEpB,MAAM,CAACC;AAPvB;AAhEW,CAApB;AA8EA,IAAMsB,kBAAkB,GAAG,GAA3B;AAEA,IAAMC,eAAe,GAAG,EAAxB;AAEA,IAAMC,oBAAoB,GAAG,GAA7B;AAEA,IAAMC,mBAAmB,GAAGD,oBAAoB,GAAGF,kBAAnD;AAEA,IAAMI,2BAA2B,GAAG,EAApC;AAoEA,IAAMC,cAAc,GAAG;AAErBC,EAAAA,iBAAiB,EAAE,6BAAW;AAAA;;AAC5B,SAAKC,cAAL,GAAsB3C,cAAc,CAAC,IAAD,CAApC;;AACA,QAAI,KAAK2C,cAAL,IAAuB,KAAKA,cAAL,CAAoBC,gBAA/C,EAAiE;AAC/D,WAAKC,sBAAL,GAA8B,UAAAC,CAAC,EAAI;AACjC,YAAI,KAAI,CAACC,0BAAT,EAAqC;AACnC,cACE,KAAI,CAACC,KAAL,CAAWC,SAAX,CAAqBC,UAArB,IACA,KAAI,CAACF,KAAL,CAAWC,SAAX,CAAqBC,UAArB,KAAoCrC,MAAM,CAACC,aAF7C,EAGE;AACA,YAAA,KAAI,CAACqC,iCAAL,CAAuC;AAAE5C,cAAAA,WAAW,EAAEuC;AAAf,aAAvC;AACD;;AACD,UAAA,KAAI,CAACC,0BAAL,GAAkC,KAAlC;AACD;AACF,OAVD;;AAWA,WAAKJ,cAAL,CAAoBC,gBAApB,CAAqC,MAArC,EAA6C,KAAKC,sBAAlD;AACD;AACF,GAlBoB;AAuBrBO,EAAAA,oBAAoB,EAAE,gCAAW;AAC/B,QAAI,KAAKT,cAAL,IAAuB,KAAKA,cAAL,CAAoBC,gBAA/C,EAAiE;AAC/D,WAAKD,cAAL,CAAoBU,mBAApB,CAAwC,MAAxC,EAAgD,KAAKR,sBAArD;AACD;;AACD,SAAKS,qBAAL,IAA8BC,YAAY,CAAC,KAAKD,qBAAN,CAA1C;AACA,SAAKE,qBAAL,IAA8BD,YAAY,CAAC,KAAKC,qBAAN,CAA1C;AACA,SAAKC,oBAAL,IAA6BF,YAAY,CAAC,KAAKE,oBAAN,CAAzC;AACD,GA9BoB;AAuCrBC,EAAAA,wBAAwB,EAAE,oCAAW;AACnC,WAAO;AACLT,MAAAA,SAAS,EAAE;AAAEC,QAAAA,UAAU,EAAES,SAAd;AAAyBC,QAAAA,WAAW,EAAE;AAAtC;AADN,KAAP;AAGD,GA3CoB;AAiDrBC,EAAAA,0CAA0C,EAAE,sDAAW;AACrD,WAAO,CAAC,KAAKC,KAAL,CAAWC,0BAAnB;AACD,GAnDoB;AAwDrBC,EAAAA,sCAAsC,EAAE,kDAAW;AACjD,WAAO,CAAC,KAAKF,KAAL,CAAWG,QAAnB;AACD,GA1DoB;AA+DrBC,EAAAA,8BAA8B,EAAE,0CAAW;AACzC,WAAO,IAAP;AACD,GAjEoB;AAwErBC,EAAAA,6BAA6B,EAAE,uCAASrB,CAAT,EAAwB;AACrD,QAAMsB,UAAU,GAAGtB,CAAC,CAACuB,aAArB;AAIAvB,IAAAA,CAAC,CAACwB,OAAF;AAEA,SAAKb,oBAAL,IAA6BF,YAAY,CAAC,KAAKE,oBAAN,CAAzC;AACA,SAAKA,oBAAL,GAA4B,IAA5B;AAEA,SAAKT,KAAL,CAAWC,SAAX,CAAqBC,UAArB,GAAkCrC,MAAM,CAACC,aAAzC;AACA,SAAKkC,KAAL,CAAWC,SAAX,CAAqBW,WAArB,GAAmCQ,UAAnC;;AACA,SAAKG,cAAL,CAAoB7C,OAAO,CAACE,eAA5B,EAA6CkB,CAA7C;;AACA,QAAI0B,OAAO,GACT,KAAKC,4BAAL,KAAsCd,SAAtC,GACIe,IAAI,CAACC,GAAL,CAAS,KAAKF,4BAAL,EAAT,EAA8C,CAA9C,CADJ,GAEIrC,kBAHN;AAIAoC,IAAAA,OAAO,GAAGI,KAAK,CAACJ,OAAD,CAAL,GAAiBpC,kBAAjB,GAAsCoC,OAAhD;;AACA,QAAIA,OAAO,KAAK,CAAhB,EAAmB;AACjB,WAAKlB,qBAAL,GAA6BuB,UAAU,CAAC,KAAKC,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,EAA6BjC,CAA7B,CAAD,EAAkC0B,OAAlC,CAAvC;AACD,KAFD,MAEO;AACL,WAAKM,YAAL,CAAkBhC,CAAlB;AACD;;AAED,QAAIkC,WAAW,GACb,KAAKC,4BAAL,KAAsCtB,SAAtC,GACIe,IAAI,CAACC,GAAL,CAAS,KAAKM,4BAAL,EAAT,EAA8C,EAA9C,CADJ,GAEI1C,mBAHN;AAIAyC,IAAAA,WAAW,GAAGJ,KAAK,CAACI,WAAD,CAAL,GAAqBzC,mBAArB,GAA2CyC,WAAzD;AACA,SAAKxB,qBAAL,GAA6BqB,UAAU,CACrC,KAAKK,gBAAL,CAAsBH,IAAtB,CAA2B,IAA3B,EAAiCjC,CAAjC,CADqC,EAErCkC,WAAW,GAAGR,OAFuB,CAAvC;AAID,GAzGoB;AA8GrBW,EAAAA,+BAA+B,EAAE,yCAASrC,CAAT,EAAwB;AACvD,SAAKsC,eAAL,GAAuB,IAAvB;;AACA,SAAKb,cAAL,CAAoB7C,OAAO,CAACG,iBAA5B,EAA+CiB,CAA/C;AACD,GAjHoB;AAsHrBK,EAAAA,iCAAiC,EAAE,2CAASL,CAAT,EAAwB;AACzD,SAAKsC,eAAL,GAAuB,IAAvB;;AACA,SAAKb,cAAL,CAAoB7C,OAAO,CAACI,oBAA5B,EAAkDgB,CAAlD;AACD,GAzHoB;AA8HrBuC,EAAAA,4BAA4B,EAAE,sCAASvC,CAAT,EAAwB;AAEpD,QAAI,CAAC,KAAKE,KAAL,CAAWC,SAAX,CAAqBqC,kBAA1B,EAA8C;AAC5C;AACD;;AAED,QAAMA,kBAAkB,GAAG,KAAKtC,KAAL,CAAWC,SAAX,CAAqBqC,kBAAhD;AACA,QAAMC,oBAAoB,GAAG,KAAKvC,KAAL,CAAWC,SAAX,CAAqBsC,oBAAlD;AACA,QAAMC,eAAe,GAAG,KAAKC,2BAAL,GACpB,KAAKA,2BAAL,EADoB,GAEpB;AACEC,MAAAA,IAAI,EAAErD,eADR;AAEEsD,MAAAA,KAAK,EAAEtD,eAFT;AAGEuD,MAAAA,GAAG,EAAEvD,eAHP;AAIEwD,MAAAA,MAAM,EAAExD;AAJV,KAFJ;AASA,QAAIyD,eAAe,GAAGN,eAAe,CAACE,IAAtC;AACA,QAAIK,cAAc,GAAGP,eAAe,CAACI,GAArC;AACA,QAAII,gBAAgB,GAAGR,eAAe,CAACG,KAAvC;AACA,QAAIM,iBAAiB,GAAGT,eAAe,CAACK,MAAxC;AAEA,QAAMK,OAAO,GAAG,KAAKC,mBAAL,GAA2B,KAAKA,mBAAL,EAA3B,GAAwD,IAAxE;;AAEA,QAAID,OAAJ,EAAa;AACXJ,MAAAA,eAAe,IAAII,OAAO,CAACR,IAAR,IAAgB,CAAnC;AACAK,MAAAA,cAAc,IAAIG,OAAO,CAACN,GAAR,IAAe,CAAjC;AACAI,MAAAA,gBAAgB,IAAIE,OAAO,CAACP,KAAR,IAAiB,CAArC;AACAM,MAAAA,iBAAiB,IAAIC,OAAO,CAACL,MAAR,IAAkB,CAAvC;AACD;;AAED,QAAMO,KAAK,GAAG9F,kBAAkB,CAACwC,CAAC,CAACvC,WAAH,CAAhC;AACA,QAAM8F,KAAK,GAAGD,KAAK,IAAIA,KAAK,CAACC,KAA7B;AACA,QAAMC,KAAK,GAAGF,KAAK,IAAIA,KAAK,CAACE,KAA7B;;AAEA,QAAI,KAAKlB,eAAT,EAA0B;AACxB,UAAMmB,aAAa,GAAG,KAAKC,yBAAL,CACpBH,KADoB,EAEpBC,KAFoB,EAGpB,KAAKlB,eAAL,CAAqBiB,KAHD,EAIpB,KAAKjB,eAAL,CAAqBkB,KAJD,CAAtB;;AAMA,UAAIC,aAAa,GAAG/D,2BAApB,EAAiD;AAC/C,aAAKiE,4BAAL;AACD;AACF;;AAED,QAAMC,mBAAmB,GACvBL,KAAK,GAAGf,kBAAkB,CAACI,IAAnB,GAA0BI,eAAlC,IACAQ,KAAK,GAAGhB,kBAAkB,CAACM,GAAnB,GAAyBG,cADjC,IAEAM,KAAK,GAAGf,kBAAkB,CAACI,IAAnB,GAA0BH,oBAAoB,CAACoB,KAA/C,GAAuDX,gBAF/D,IAGAM,KAAK,GAAGhB,kBAAkB,CAACM,GAAnB,GAAyBL,oBAAoB,CAACqB,MAA9C,GAAuDX,iBAJjE;;AAKA,QAAIS,mBAAJ,EAAyB;AACvB,UAAMG,SAAS,GAAG,KAAK7D,KAAL,CAAWC,SAAX,CAAqBC,UAAvC;;AACA,WAAKqB,cAAL,CAAoB7C,OAAO,CAACK,gBAA5B,EAA8Ce,CAA9C;;AACA,UAAMgE,QAAQ,GAAG,KAAK9D,KAAL,CAAWC,SAAX,CAAqBC,UAAtC;;AACA,UACE4D,QAAQ,KAAKjG,MAAM,CAACE,2BAApB,IACA8F,SAAS,KAAKhG,MAAM,CAACE,2BAFvB,EAGE;AAEA,aAAK0F,4BAAL;AACD;AACF,KAXD,MAWO;AACL,WAAKA,4BAAL;;AACA,WAAKlC,cAAL,CAAoB7C,OAAO,CAACM,gBAA5B,EAA8Cc,CAA9C;AACD;AACF,GAjMoB;AA2MrBiE,EAAAA,oBAAoB,EAAE,8BAASjE,CAAT,EAAmB;AACvC,SAAKgB,KAAL,CAAWkD,OAAX,IAAsB,KAAKlD,KAAL,CAAWkD,OAAX,CAAmBlE,CAAnB,CAAtB;AACD,GA7MoB;AAuNrBmE,EAAAA,mBAAmB,EAAE,6BAASnE,CAAT,EAAmB;AACtC,SAAKgB,KAAL,CAAWoD,MAAX,IAAqB,KAAKpD,KAAL,CAAWoD,MAAX,CAAkBpE,CAAlB,CAArB;AACD,GAzNoB;AAuSrBqE,EAAAA,6BAA6B,EAAE,yCAAW;AACxC,QAAMC,GAAG,GAAG,KAAKpE,KAAL,CAAWC,SAAX,CAAqBW,WAAjC;;AACA,QAAIwD,GAAG,IAAI,IAAX,EAAiB;AACf;AACD;;AAEDhH,IAAAA,SAAS,CAACiH,OAAV,CAAkBD,GAAlB,EAAuB,KAAKE,kBAA5B;AACD,GA9SoB;AAgTrBA,EAAAA,kBAAkB,EAAE,4BAClBC,CADkB,EAElBC,CAFkB,EAGlBC,CAHkB,EAIlBC,CAJkB,EAKlBC,OALkB,EAMlBC,OANkB,EAOlB;AAEA,QAAI,CAACL,CAAD,IAAM,CAACC,CAAP,IAAY,CAACC,CAAb,IAAkB,CAACC,CAAnB,IAAwB,CAACC,OAAzB,IAAoC,CAACC,OAAzC,EAAkD;AAChD;AACD;;AACD,SAAK5E,KAAL,CAAWC,SAAX,CAAqBqC,kBAArB,IACEpF,QAAQ,CAAC2H,OAAT,CAAiB,KAAK7E,KAAL,CAAWC,SAAX,CAAqBqC,kBAAtC,CADF;AAEA,SAAKtC,KAAL,CAAWC,SAAX,CAAqBsC,oBAArB,IAEExF,kBAAkB,CAAC8H,OAAnB,CAA2B,KAAK7E,KAAL,CAAWC,SAAX,CAAqBsC,oBAAhD,CAFF;AAGA,SAAKvC,KAAL,CAAWC,SAAX,CAAqBqC,kBAArB,GAA0CpF,QAAQ,CAAC4H,SAAT,CAAmBH,OAAnB,EAA4BC,OAA5B,CAA1C;AAEA,SAAK5E,KAAL,CAAWC,SAAX,CAAqBsC,oBAArB,GAA4CxF,kBAAkB,CAAC+H,SAAnB,CAA6BL,CAA7B,EAAgCC,CAAhC,CAA5C;AACD,GApUoB;AAsUrB5C,EAAAA,YAAY,EAAE,sBAAShC,CAAT,EAAwB;AACpC,SAAKQ,qBAAL,GAA6B,IAA7B;;AACA,SAAKiB,cAAL,CAAoB7C,OAAO,CAACC,KAA5B,EAAmCmB,CAAnC;AACD,GAzUoB;AA2UrBoC,EAAAA,gBAAgB,EAAE,0BAASpC,CAAT,EAAwB;AACxC,SAAKU,qBAAL,GAA6B,IAA7B;AACA,QAAMsD,QAAQ,GAAG,KAAK9D,KAAL,CAAWC,SAAX,CAAqBC,UAAtC;;AACA,QACE4D,QAAQ,KAAKjG,MAAM,CAACI,yBAApB,IACA6F,QAAQ,KAAKjG,MAAM,CAACM,8BAFtB,EAGE;AACA4G,MAAAA,OAAO,CAAC5F,KAAR,CACE,yCACE2E,QADF,GAEE,QAFF,GAGEjG,MAAM,CAACM,8BAHT,GAIE,qCAJF,GAKE,2EANJ;AAQD,KAZD,MAYO;AACL,WAAKoD,cAAL,CAAoB7C,OAAO,CAACO,mBAA5B,EAAiDa,CAAjD;AACD;AACF,GA7VoB;AAuWrByB,EAAAA,cAAc,EAAE,wBAASyD,MAAT,EAAyBlF,CAAzB,EAAwC;AACtD,QAAMc,WAAW,GAAG,KAAKZ,KAAL,CAAWC,SAAX,CAAqBW,WAAzC;AACA,QAAMkD,QAAQ,GAAG,KAAK9D,KAAL,CAAWC,SAAX,CAAqBC,UAAtC;AACA,QAAM+E,SAAS,GAAG/F,WAAW,CAAC4E,QAAD,CAAX,IAAyB5E,WAAW,CAAC4E,QAAD,CAAX,CAAsBkB,MAAtB,CAA3C;;AACA,QAAI,CAACpE,WAAD,IAAgBoE,MAAM,KAAKtG,OAAO,CAACG,iBAAvC,EAA0D;AACxD;AACD;;AACD,QAAI,CAACoG,SAAL,EAAgB;AACd,YAAM,IAAIC,KAAJ,CACJ,0BACEF,MADF,GAEE,cAFF,GAGElB,QAHF,GAIE,6BAJF,GAKElD,WALF,GAME,GAPE,CAAN;AASD;;AACD,QAAIqE,SAAS,KAAKpH,MAAM,CAACQ,KAAzB,EAAgC;AAC9B,YAAM,IAAI6G,KAAJ,CACJ,uCACEpB,QADF,GAEE,QAFF,GAGEkB,MAHF,GAIE,mBAJF,GAKEpE,WALF,GAME,GAPE,CAAN;AASD;;AACD,QAAIkD,QAAQ,KAAKmB,SAAjB,EAA4B;AAC1B,WAAKE,gCAAL,CAAsCrB,QAAtC,EAAgDmB,SAAhD,EAA2DD,MAA3D,EAAmElF,CAAnE;;AACA,WAAKE,KAAL,CAAWC,SAAX,CAAqBC,UAArB,GAAkC+E,SAAlC;AACD;AACF,GAxYoB;AA0YrBxB,EAAAA,4BAA4B,EAAE,wCAAW;AACvC,SAAKjD,qBAAL,IAA8BD,YAAY,CAAC,KAAKC,qBAAN,CAA1C;AACA,SAAKA,qBAAL,GAA6B,IAA7B;AACD,GA7YoB;AA+YrB4E,EAAAA,YAAY,EAAE,sBAASpF,KAAT,EAAuB;AACnC,WACEA,KAAK,KAAKnC,MAAM,CAACI,yBAAjB,IAA8C+B,KAAK,KAAKnC,MAAM,CAACM,8BADjE;AAGD,GAnZoB;AAqZrBkH,EAAAA,oBAAoB,EAAE,8BAASvF,CAAT,EAAwB;AAC5C,QAAMsD,KAAK,GAAG9F,kBAAkB,CAACwC,CAAC,CAACvC,WAAH,CAAhC;AACA,QAAM8F,KAAK,GAAGD,KAAK,IAAIA,KAAK,CAACC,KAA7B;AACA,QAAMC,KAAK,GAAGF,KAAK,IAAIA,KAAK,CAACE,KAA7B;AACA,QAAMgC,SAAS,GAAGlC,KAAK,IAAIA,KAAK,CAACkC,SAAjC;AACA,QAAMC,SAAS,GAAGnC,KAAK,IAAIA,KAAK,CAACmC,SAAjC;AACA,SAAKnD,eAAL,GAAuB;AAAEiB,MAAAA,KAAK,EAALA,KAAF;AAASC,MAAAA,KAAK,EAALA,KAAT;AAAgBgC,MAAAA,SAAS,EAATA,SAAhB;AAA2BC,MAAAA,SAAS,EAATA;AAA3B,KAAvB;AACD,GA5ZoB;AA8ZrB/B,EAAAA,yBAAyB,EAAE,mCAASgC,EAAT,EAAqBC,EAArB,EAAiCC,EAAjC,EAA6CC,EAA7C,EAAyD;AAClF,QAAMC,MAAM,GAAGJ,EAAE,GAAGE,EAApB;AACA,QAAMG,MAAM,GAAGJ,EAAE,GAAGE,EAApB;AACA,WAAOjE,IAAI,CAACoE,IAAL,CAAUF,MAAM,GAAGA,MAAT,GAAkBC,MAAM,GAAGA,MAArC,CAAP;AACD,GAlaoB;AA+arBV,EAAAA,gCAAgC,EAAE,0CAChCrB,QADgC,EAEhCmB,SAFgC,EAGhCD,MAHgC,EAIhClF,CAJgC,EAKhC;AACA,QAAMiG,cAAc,GAAG,KAAKX,YAAL,CAAkBtB,QAAlB,CAAvB;;AACA,QAAMkC,cAAc,GAAG,KAAKZ,YAAL,CAAkBH,SAAlB,CAAvB;;AAEA,QAAMgB,aAAa,GACjBjB,MAAM,KAAKtG,OAAO,CAACI,oBAAnB,IAA2CkG,MAAM,KAAKtG,OAAO,CAACG,iBADhE;;AAGA,QAAIoH,aAAJ,EAAmB;AACjB,WAAKxC,4BAAL;AACD;;AAED,QAAMyC,mBAAmB,GACvBpC,QAAQ,KAAKjG,MAAM,CAACC,aAApB,IAAqCmH,SAAS,KAAKpH,MAAM,CAACE,2BAD5D;AAGA,QAAMoI,kBAAkB,GAAG,CAAC5H,QAAQ,CAACuF,QAAD,CAAT,IAAuBvF,QAAQ,CAAC0G,SAAD,CAA1D;;AACA,QAAIiB,mBAAmB,IAAIC,kBAA3B,EAA+C;AAC7C,WAAKhC,6BAAL;AACD;;AAED,QAAI3F,YAAY,CAACsF,QAAD,CAAZ,IAA0BkB,MAAM,KAAKtG,OAAO,CAACO,mBAAjD,EAAsE;AACpE,WAAKmH,wBAAL,IAAiC,KAAKA,wBAAL,CAA8BtG,CAA9B,CAAjC;AACD;;AAED,QAAIkG,cAAc,IAAI,CAACD,cAAvB,EAAuC;AACrC,WAAKM,eAAL,CAAqBvG,CAArB;AACD,KAFD,MAEO,IAAI,CAACkG,cAAD,IAAmBD,cAAvB,EAAuC;AAC5C,WAAKO,aAAL,CAAmBxG,CAAnB;AACD;;AAED,QAAItB,YAAY,CAACsF,QAAD,CAAZ,IAA0BkB,MAAM,KAAKtG,OAAO,CAACG,iBAAjD,EAAoE;AAClE,UAAM0H,mBAAmB,GAAG,CAAC,CAAC,KAAKzF,KAAL,CAAW0F,WAAzC;AACA,UAAMC,8BAA8B,GAClChI,gBAAgB,CAACqF,QAAD,CAAhB,KACC,CAACyC,mBAAD,IAAwB,CAAC,KAAKrF,8BAAL,EAD1B,CADF;AAIA,UAAMwF,iBAAiB,GAAG,CAACjI,gBAAgB,CAACqF,QAAD,CAAjB,IAA+B2C,8BAAzD;;AACA,UAAIC,iBAAiB,IAAI,KAAKC,oBAA9B,EAAoD;AAClD,YAAI,CAACX,cAAD,IAAmB,CAACD,cAAxB,EAAwC;AAEtC,eAAKM,eAAL,CAAqBvG,CAArB;;AACA,eAAKwG,aAAL,CAAmBxG,CAAnB;AACD;;AACD,aAAK6G,oBAAL,CAA0B7G,CAA1B;AACD;AACF;;AAED,SAAKQ,qBAAL,IAA8BC,YAAY,CAAC,KAAKD,qBAAN,CAA1C;AACA,SAAKA,qBAAL,GAA6B,IAA7B;AACD,GApeoB;AAserBsG,EAAAA,eAAe,EAAE,2BAAW;AAC1BxJ,IAAAA,SAAS,CAACyJ,cAAV;AACD,GAxeoB;AA0erBR,EAAAA,eAAe,EAAE,yBAASvG,CAAT,EAAwB;AACvC,SAAKuF,oBAAL,CAA0BvF,CAA1B;;AACA,SAAKgH,4BAAL,IAAqC,KAAKA,4BAAL,CAAkChH,CAAlC,CAArC;AACD,GA7eoB;AA+erBwG,EAAAA,aAAa,EAAE,uBAASxG,CAAT,EAAwB;AAAA;;AACrC,QAAI,KAAKiH,6BAAT,EAAwC;AACtC,UAAI,KAAKC,2BAAL,IAAoC,KAAKA,2BAAL,EAAxC,EAA4E;AAC1E,aAAKvG,oBAAL,GAA4BoB,UAAU,CAAC,YAAM;AAC3C,UAAA,MAAI,CAACkF,6BAAL,CAAmCjH,CAAnC;AACD,SAFqC,EAEnC,KAAKkH,2BAAL,EAFmC,CAAtC;AAGD,OAJD,MAIO;AACL,aAAKD,6BAAL,CAAmCjH,CAAnC;AACD;AACF;AACF,GAzfoB;AA6frBmH,EAAAA,uBAAuB,EAAE,iCAASnH,CAAT,EAAmB;AAAA,QAClCoH,IADkC,GACpBpH,CADoB,CAClCoH,IADkC;AAAA,QAC5BC,GAD4B,GACpBrH,CADoB,CAC5BqH,GAD4B;;AAE1C,QAAIA,GAAG,KAAK,OAAR,IAAmBA,GAAG,KAAK,GAA/B,EAAoC;AAClC,UAAID,IAAI,KAAK,SAAb,EAAwB;AACtB,YAAI,CAAC,KAAKnH,0BAAV,EAAsC;AACpC,cACE,CAAC,KAAKC,KAAL,CAAWC,SAAX,CAAqBC,UAAtB,IACA,KAAKF,KAAL,CAAWC,SAAX,CAAqBC,UAArB,KAAoCrC,MAAM,CAACC,aAF7C,EAGE;AACA,iBAAKqD,6BAAL,CAAmCrB,CAAnC;AACA,iBAAKC,0BAAL,GAAkC,IAAlC;AACD;AACF;AACF,OAVD,MAUO,IAAImH,IAAI,KAAK,OAAb,EAAsB;AAC3B,YAAI,KAAKnH,0BAAT,EAAqC;AACnC,cACE,KAAKC,KAAL,CAAWC,SAAX,CAAqBC,UAArB,IACA,KAAKF,KAAL,CAAWC,SAAX,CAAqBC,UAArB,KAAoCrC,MAAM,CAACC,aAF7C,EAGE;AACA,iBAAKqE,+BAAL,CAAqCrC,CAArC;AACA,iBAAKC,0BAAL,GAAkC,KAAlC;AACD;AACF;AACF;;AACDD,MAAAA,CAAC,CAACsH,eAAF;;AAGA,UAAI,EAAED,GAAG,KAAK,OAAR,IAAmBrK,iBAAiB,CAACuK,eAAlB,CAAkC,KAAKvG,KAAvC,MAAkD,MAAvE,CAAJ,EAAoF;AAClFhB,QAAAA,CAAC,CAACwH,cAAF;AACD;AACF;AACF,GA5hBoB;AA8hBrBC,EAAAA,0BAA0B,EAAE;AA9hBP,CAAvB;;IAyiBExD,oB,GAIEtE,c,CAJFsE,oB;IAEAE,mB,GAEExE,c,CAFFwE,mB;IACGuD,wC,4BACD/H,c;;AACJA,cAAc,CAAC8H,0BAAf,GAA4CC,wCAA5C;AAEA,IAAMC,SAAS,GAAG;AAChBC,EAAAA,KAAK,EAAEjI,cADS;AAEhBkI,EAAAA,kBAAkB,EAAE,KAFJ;AAMhBC,EAAAA,eAAe,EAAE,+BAA6E;AAAA,QAA1EC,KAA0E,QAA1EA,KAA0E;AAAA,QAAnE3E,OAAmE,QAAnEA,OAAmE;;AAC5F,QAAI,CAACuE,SAAS,CAACE,kBAAf,EAAmC;AACjC,aAAO,IAAP;AACD;;AACD,QAAIG,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,YAAM9C,KAAK,CAAC,6DAAD,CAAX;AACD;;AACD,QAAM+C,iBAAiB,GAAG,EAA1B;AACA/E,IAAAA,OAAO,GAAGA,OAAO,IAAI;AAAEN,MAAAA,GAAG,EAAE,CAAP;AAAUC,MAAAA,MAAM,EAAE,CAAlB;AAAqBH,MAAAA,IAAI,EAAE,CAA3B;AAA8BC,MAAAA,KAAK,EAAE;AAArC,KAArB;;AACA,SAAK,IAAMwE,GAAX,IAAkBjE,OAAlB,EAA2B;AACzB+E,MAAAA,iBAAiB,CAACd,GAAD,CAAjB,GAAyB,CAACjE,OAAO,CAACiE,GAAD,CAAjC;AACD;;AACD,QAAMe,eAAe,GAAGjL,cAAc,CAAC4K,KAAD,CAAtC;;AACA,QAAI,OAAOK,eAAP,KAA2B,QAA/B,EAAyC;AACvC,aAAO,IAAP;AACD;;AACD,QAAMC,QAAQ,GAAG,MAAM,CAAC,aAAaD,eAAe,CAACE,QAAhB,CAAyB,EAAzB,CAAd,EAA4CC,MAA5C,CAAmD,CAAC,CAApD,CAAvB;AACA,WACE,oBAAC,IAAD;AACE,MAAA,aAAa,EAAC,MADhB;AAEE,MAAA,KAAK;AACHC,QAAAA,QAAQ,EAAE,UADP;AAEHC,QAAAA,WAAW,EAAEJ,QAAQ,CAACK,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAnB,IAAwB,IAFlC;AAGHC,QAAAA,WAAW,EAAE,CAHV;AAIHC,QAAAA,WAAW,EAAE,QAJV;AAKHC,QAAAA,eAAe,EAAER,QAAQ,CAACK,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAnB,IAAwB;AALtC,SAMAP,iBANA,CAFP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAaD;AApCe,CAAlB;AAuCA,eAAeR,SAAf","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nimport AccessibilityUtil from '../../modules/AccessibilityUtil';\nimport BoundingDimensions from './BoundingDimensions';\nimport findNodeHandle from '../findNodeHandle';\nimport normalizeColor from 'normalize-css-color';\nimport Position from './Position';\nimport React from 'react';\nimport UIManager from '../UIManager';\nimport View from '../View';\n\ntype Event = Object;\ntype PressEvent = Object;\ntype EdgeInsetsProp = Object;\n\nconst extractSingleTouch = nativeEvent => {\n  const touches = nativeEvent.touches;\n  const changedTouches = nativeEvent.changedTouches;\n  const hasTouches = touches && touches.length > 0;\n  const hasChangedTouches = changedTouches && changedTouches.length > 0;\n\n  return !hasTouches && hasChangedTouches\n    ? changedTouches[0]\n    : hasTouches\n    ? touches[0]\n    : nativeEvent;\n};\n\n/**\n * `Touchable`: Taps done right.\n *\n * You hook your `ResponderEventPlugin` events into `Touchable`. `Touchable`\n * will measure time/geometry and tells you when to give feedback to the user.\n *\n * ====================== Touchable Tutorial ===============================\n * The `Touchable` mixin helps you handle the \"press\" interaction. It analyzes\n * the geometry of elements, and observes when another responder (scroll view\n * etc) has stolen the touch lock. It notifies your component when it should\n * give feedback to the user. (bouncing/highlighting/unhighlighting).\n *\n * - When a touch was activated (typically you highlight)\n * - When a touch was deactivated (typically you unhighlight)\n * - When a touch was \"pressed\" - a touch ended while still within the geometry\n *   of the element, and no other element (like scroller) has \"stolen\" touch\n *   lock (\"responder\") (Typically you bounce the element).\n *\n * A good tap interaction isn't as simple as you might think. There should be a\n * slight delay before showing a highlight when starting a touch. If a\n * subsequent touch move exceeds the boundary of the element, it should\n * unhighlight, but if that same touch is brought back within the boundary, it\n * should rehighlight again. A touch can move in and out of that boundary\n * several times, each time toggling highlighting, but a \"press\" is only\n * triggered if that touch ends while within the element's boundary and no\n * scroller (or anything else) has stolen the lock on touches.\n *\n * To create a new type of component that handles interaction using the\n * `Touchable` mixin, do the following:\n *\n * - Initialize the `Touchable` state.\n *\n *   getInitialState: function() {\n *     return merge(this.touchableGetInitialState(), yourComponentState);\n *   }\n *\n * - Choose the rendered component who's touches should start the interactive\n *   sequence. On that rendered node, forward all `Touchable` responder\n *   handlers. You can choose any rendered node you like. Choose a node whose\n *   hit target you'd like to instigate the interaction sequence:\n *\n *   // In render function:\n *   return (\n *     <View\n *       onStartShouldSetResponder={this.touchableHandleStartShouldSetResponder}\n *       onResponderTerminationRequest={this.touchableHandleResponderTerminationRequest}\n *       onResponderGrant={this.touchableHandleResponderGrant}\n *       onResponderMove={this.touchableHandleResponderMove}\n *       onResponderRelease={this.touchableHandleResponderRelease}\n *       onResponderTerminate={this.touchableHandleResponderTerminate}>\n *       <View>\n *         Even though the hit detection/interactions are triggered by the\n *         wrapping (typically larger) node, we usually end up implementing\n *         custom logic that highlights this inner one.\n *       </View>\n *     </View>\n *   );\n *\n * - You may set up your own handlers for each of these events, so long as you\n *   also invoke the `touchable*` handlers inside of your custom handler.\n *\n * - Implement the handlers on your component class in order to provide\n *   feedback to the user. See documentation for each of these class methods\n *   that you should implement.\n *\n *   touchableHandlePress: function() {\n *      this.performBounceAnimation();  // or whatever you want to do.\n *   },\n *   touchableHandleActivePressIn: function() {\n *     this.beginHighlighting(...);  // Whatever you like to convey activation\n *   },\n *   touchableHandleActivePressOut: function() {\n *     this.endHighlighting(...);  // Whatever you like to convey deactivation\n *   },\n *\n * - There are more advanced methods you can implement (see documentation below):\n *   touchableGetHighlightDelayMS: function() {\n *     return 20;\n *   }\n *   // In practice, *always* use a predeclared constant (conserve memory).\n *   touchableGetPressRectOffset: function() {\n *     return {top: 20, left: 20, right: 20, bottom: 100};\n *   }\n */\n\n/**\n * Touchable states.\n */\n\nconst States = {\n  NOT_RESPONDER: 'NOT_RESPONDER', // Not the responder\n  RESPONDER_INACTIVE_PRESS_IN: 'RESPONDER_INACTIVE_PRESS_IN', // Responder, inactive, in the `PressRect`\n  RESPONDER_INACTIVE_PRESS_OUT: 'RESPONDER_INACTIVE_PRESS_OUT', // Responder, inactive, out of `PressRect`\n  RESPONDER_ACTIVE_PRESS_IN: 'RESPONDER_ACTIVE_PRESS_IN', // Responder, active, in the `PressRect`\n  RESPONDER_ACTIVE_PRESS_OUT: 'RESPONDER_ACTIVE_PRESS_OUT', // Responder, active, out of `PressRect`\n  RESPONDER_ACTIVE_LONG_PRESS_IN: 'RESPONDER_ACTIVE_LONG_PRESS_IN', // Responder, active, in the `PressRect`, after long press threshold\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: 'RESPONDER_ACTIVE_LONG_PRESS_OUT', // Responder, active, out of `PressRect`, after long press threshold\n  ERROR: 'ERROR'\n};\n\ntype State =\n  | typeof States.NOT_RESPONDER\n  | typeof States.RESPONDER_INACTIVE_PRESS_IN\n  | typeof States.RESPONDER_INACTIVE_PRESS_OUT\n  | typeof States.RESPONDER_ACTIVE_PRESS_IN\n  | typeof States.RESPONDER_ACTIVE_PRESS_OUT\n  | typeof States.RESPONDER_ACTIVE_LONG_PRESS_IN\n  | typeof States.RESPONDER_ACTIVE_LONG_PRESS_OUT\n  | typeof States.ERROR;\n\n/*\n * Quick lookup map for states that are considered to be \"active\"\n */\n\nconst baseStatesConditions = {\n  NOT_RESPONDER: false,\n  RESPONDER_INACTIVE_PRESS_IN: false,\n  RESPONDER_INACTIVE_PRESS_OUT: false,\n  RESPONDER_ACTIVE_PRESS_IN: false,\n  RESPONDER_ACTIVE_PRESS_OUT: false,\n  RESPONDER_ACTIVE_LONG_PRESS_IN: false,\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: false,\n  ERROR: false\n};\n\nconst IsActive = {\n  ...baseStatesConditions,\n  RESPONDER_ACTIVE_PRESS_OUT: true,\n  RESPONDER_ACTIVE_PRESS_IN: true\n};\n\n/**\n * Quick lookup for states that are considered to be \"pressing\" and are\n * therefore eligible to result in a \"selection\" if the press stops.\n */\nconst IsPressingIn = {\n  ...baseStatesConditions,\n  RESPONDER_INACTIVE_PRESS_IN: true,\n  RESPONDER_ACTIVE_PRESS_IN: true,\n  RESPONDER_ACTIVE_LONG_PRESS_IN: true\n};\n\nconst IsLongPressingIn = {\n  ...baseStatesConditions,\n  RESPONDER_ACTIVE_LONG_PRESS_IN: true\n};\n\n/**\n * Inputs to the state machine.\n */\nconst Signals = {\n  DELAY: 'DELAY',\n  RESPONDER_GRANT: 'RESPONDER_GRANT',\n  RESPONDER_RELEASE: 'RESPONDER_RELEASE',\n  RESPONDER_TERMINATED: 'RESPONDER_TERMINATED',\n  ENTER_PRESS_RECT: 'ENTER_PRESS_RECT',\n  LEAVE_PRESS_RECT: 'LEAVE_PRESS_RECT',\n  LONG_PRESS_DETECTED: 'LONG_PRESS_DETECTED'\n};\n\ntype Signal =\n  | typeof Signals.DELAY\n  | typeof Signals.RESPONDER_GRANT\n  | typeof Signals.RESPONDER_RELEASE\n  | typeof Signals.RESPONDER_TERMINATED\n  | typeof Signals.ENTER_PRESS_RECT\n  | typeof Signals.LEAVE_PRESS_RECT\n  | typeof Signals.LONG_PRESS_DETECTED;\n\n/**\n * Mapping from States x Signals => States\n */\nconst Transitions = {\n  NOT_RESPONDER: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,\n    RESPONDER_RELEASE: States.ERROR,\n    RESPONDER_TERMINATED: States.ERROR,\n    ENTER_PRESS_RECT: States.ERROR,\n    LEAVE_PRESS_RECT: States.ERROR,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_INACTIVE_PRESS_IN: {\n    DELAY: States.RESPONDER_ACTIVE_PRESS_IN,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_INACTIVE_PRESS_OUT: {\n    DELAY: States.RESPONDER_ACTIVE_PRESS_OUT,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_ACTIVE_PRESS_IN: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN\n  },\n  RESPONDER_ACTIVE_PRESS_OUT: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_IN: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  error: {\n    DELAY: States.NOT_RESPONDER,\n    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.NOT_RESPONDER,\n    LEAVE_PRESS_RECT: States.NOT_RESPONDER,\n    LONG_PRESS_DETECTED: States.NOT_RESPONDER\n  }\n};\n\n// ==== Typical Constants for integrating into UI components ====\n// var HIT_EXPAND_PX = 20;\n// var HIT_VERT_OFFSET_PX = 10;\nconst HIGHLIGHT_DELAY_MS = 130;\n\nconst PRESS_EXPAND_PX = 20;\n\nconst LONG_PRESS_THRESHOLD = 500;\n\nconst LONG_PRESS_DELAY_MS = LONG_PRESS_THRESHOLD - HIGHLIGHT_DELAY_MS;\n\nconst LONG_PRESS_ALLOWED_MOVEMENT = 10;\n\n// Default amount \"active\" region protrudes beyond box\n\n/**\n * By convention, methods prefixed with underscores are meant to be @private,\n * and not @protected. Mixers shouldn't access them - not even to provide them\n * as callback handlers.\n *\n *\n * ========== Geometry =========\n * `Touchable` only assumes that there exists a `HitRect` node. The `PressRect`\n * is an abstract box that is extended beyond the `HitRect`.\n *\n *  +--------------------------+\n *  |                          | - \"Start\" events in `HitRect` cause `HitRect`\n *  |  +--------------------+  |   to become the responder.\n *  |  |  +--------------+  |  | - `HitRect` is typically expanded around\n *  |  |  |              |  |  |   the `VisualRect`, but shifted downward.\n *  |  |  |  VisualRect  |  |  | - After pressing down, after some delay,\n *  |  |  |              |  |  |   and before letting up, the Visual React\n *  |  |  +--------------+  |  |   will become \"active\". This makes it eligible\n *  |  |     HitRect        |  |   for being highlighted (so long as the\n *  |  +--------------------+  |   press remains in the `PressRect`).\n *  |        PressRect     o   |\n *  +----------------------|---+\n *           Out Region    |\n *                         +-----+ This gap between the `HitRect` and\n *                                 `PressRect` allows a touch to move far away\n *                                 from the original hit rect, and remain\n *                                 highlighted, and eligible for a \"Press\".\n *                                 Customize this via\n *                                 `touchableGetPressRectOffset()`.\n *\n *\n *\n * ======= State Machine =======\n *\n * +-------------+ <---+ RESPONDER_RELEASE\n * |NOT_RESPONDER|\n * +-------------+ <---+ RESPONDER_TERMINATED\n *     +\n *     | RESPONDER_GRANT (HitRect)\n *     v\n * +---------------------------+  DELAY   +-------------------------+  T + DELAY     +------------------------------+\n * |RESPONDER_INACTIVE_PRESS_IN|+-------->|RESPONDER_ACTIVE_PRESS_IN| +------------> |RESPONDER_ACTIVE_LONG_PRESS_IN|\n * +---------------------------+          +-------------------------+                +------------------------------+\n *     +            ^                         +           ^                                 +           ^\n *     |LEAVE_      |ENTER_                   |LEAVE_     |ENTER_                           |LEAVE_     |ENTER_\n *     |PRESS_RECT  |PRESS_RECT               |PRESS_RECT |PRESS_RECT                       |PRESS_RECT |PRESS_RECT\n *     |            |                         |           |                                 |           |\n *     v            +                         v           +                                 v           +\n * +----------------------------+  DELAY  +--------------------------+               +-------------------------------+\n * |RESPONDER_INACTIVE_PRESS_OUT|+------->|RESPONDER_ACTIVE_PRESS_OUT|               |RESPONDER_ACTIVE_LONG_PRESS_OUT|\n * +----------------------------+         +--------------------------+               +-------------------------------+\n *\n * T + DELAY => LONG_PRESS_DELAY_MS + DELAY\n *\n * Not drawn are the side effects of each transition. The most important side\n * effect is the `touchableHandlePress` abstract method invocation that occurs\n * when a responder is released while in either of the \"Press\" states.\n *\n * The other important side effects are the highlight abstract method\n * invocations (internal callbacks) to be implemented by the mixer.\n *\n *\n * @lends Touchable.prototype\n */\nconst TouchableMixin = {\n  // HACK (part 1): basic support for touchable interactions using a keyboard\n  componentDidMount: function() {\n    this._touchableNode = findNodeHandle(this);\n    if (this._touchableNode && this._touchableNode.addEventListener) {\n      this._touchableBlurListener = e => {\n        if (this._isTouchableKeyboardActive) {\n          if (\n            this.state.touchable.touchState &&\n            this.state.touchable.touchState !== States.NOT_RESPONDER\n          ) {\n            this.touchableHandleResponderTerminate({ nativeEvent: e });\n          }\n          this._isTouchableKeyboardActive = false;\n        }\n      };\n      this._touchableNode.addEventListener('blur', this._touchableBlurListener);\n    }\n  },\n\n  /**\n   * Clear all timeouts on unmount\n   */\n  componentWillUnmount: function() {\n    if (this._touchableNode && this._touchableNode.addEventListener) {\n      this._touchableNode.removeEventListener('blur', this._touchableBlurListener);\n    }\n    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);\n    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);\n    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);\n  },\n\n  /**\n   * It's prefer that mixins determine state in this way, having the class\n   * explicitly mix the state in the one and only `getInitialState` method.\n   *\n   * @return {object} State object to be placed inside of\n   * `this.state.touchable`.\n   */\n  touchableGetInitialState: function() {\n    return {\n      touchable: { touchState: undefined, responderID: null }\n    };\n  },\n\n  // ==== Hooks to Gesture Responder system ====\n  /**\n   * Must return true if embedded in a native platform scroll view.\n   */\n  touchableHandleResponderTerminationRequest: function() {\n    return !this.props.rejectResponderTermination;\n  },\n\n  /**\n   * Must return true to start the process of `Touchable`.\n   */\n  touchableHandleStartShouldSetResponder: function() {\n    return !this.props.disabled;\n  },\n\n  /**\n   * Return true to cancel press on long press.\n   */\n  touchableLongPressCancelsPress: function() {\n    return true;\n  },\n\n  /**\n   * Place as callback for a DOM element's `onResponderGrant` event.\n   * @param {SyntheticEvent} e Synthetic event from event system.\n   *\n   */\n  touchableHandleResponderGrant: function(e: PressEvent) {\n    const dispatchID = e.currentTarget;\n    // Since e is used in a callback invoked on another event loop\n    // (as in setTimeout etc), we need to call e.persist() on the\n    // event to make sure it doesn't get reused in the event object pool.\n    e.persist();\n\n    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);\n    this.pressOutDelayTimeout = null;\n\n    this.state.touchable.touchState = States.NOT_RESPONDER;\n    this.state.touchable.responderID = dispatchID;\n    this._receiveSignal(Signals.RESPONDER_GRANT, e);\n    let delayMS =\n      this.touchableGetHighlightDelayMS !== undefined\n        ? Math.max(this.touchableGetHighlightDelayMS(), 0)\n        : HIGHLIGHT_DELAY_MS;\n    delayMS = isNaN(delayMS) ? HIGHLIGHT_DELAY_MS : delayMS;\n    if (delayMS !== 0) {\n      this.touchableDelayTimeout = setTimeout(this._handleDelay.bind(this, e), delayMS);\n    } else {\n      this._handleDelay(e);\n    }\n\n    let longDelayMS =\n      this.touchableGetLongPressDelayMS !== undefined\n        ? Math.max(this.touchableGetLongPressDelayMS(), 10)\n        : LONG_PRESS_DELAY_MS;\n    longDelayMS = isNaN(longDelayMS) ? LONG_PRESS_DELAY_MS : longDelayMS;\n    this.longPressDelayTimeout = setTimeout(\n      this._handleLongDelay.bind(this, e),\n      longDelayMS + delayMS\n    );\n  },\n\n  /**\n   * Place as callback for a DOM element's `onResponderRelease` event.\n   */\n  touchableHandleResponderRelease: function(e: PressEvent) {\n    this.pressInLocation = null;\n    this._receiveSignal(Signals.RESPONDER_RELEASE, e);\n  },\n\n  /**\n   * Place as callback for a DOM element's `onResponderTerminate` event.\n   */\n  touchableHandleResponderTerminate: function(e: PressEvent) {\n    this.pressInLocation = null;\n    this._receiveSignal(Signals.RESPONDER_TERMINATED, e);\n  },\n\n  /**\n   * Place as callback for a DOM element's `onResponderMove` event.\n   */\n  touchableHandleResponderMove: function(e: PressEvent) {\n    // Measurement may not have returned yet.\n    if (!this.state.touchable.positionOnActivate) {\n      return;\n    }\n\n    const positionOnActivate = this.state.touchable.positionOnActivate;\n    const dimensionsOnActivate = this.state.touchable.dimensionsOnActivate;\n    const pressRectOffset = this.touchableGetPressRectOffset\n      ? this.touchableGetPressRectOffset()\n      : {\n          left: PRESS_EXPAND_PX,\n          right: PRESS_EXPAND_PX,\n          top: PRESS_EXPAND_PX,\n          bottom: PRESS_EXPAND_PX\n        };\n\n    let pressExpandLeft = pressRectOffset.left;\n    let pressExpandTop = pressRectOffset.top;\n    let pressExpandRight = pressRectOffset.right;\n    let pressExpandBottom = pressRectOffset.bottom;\n\n    const hitSlop = this.touchableGetHitSlop ? this.touchableGetHitSlop() : null;\n\n    if (hitSlop) {\n      pressExpandLeft += hitSlop.left || 0;\n      pressExpandTop += hitSlop.top || 0;\n      pressExpandRight += hitSlop.right || 0;\n      pressExpandBottom += hitSlop.bottom || 0;\n    }\n\n    const touch = extractSingleTouch(e.nativeEvent);\n    const pageX = touch && touch.pageX;\n    const pageY = touch && touch.pageY;\n\n    if (this.pressInLocation) {\n      const movedDistance = this._getDistanceBetweenPoints(\n        pageX,\n        pageY,\n        this.pressInLocation.pageX,\n        this.pressInLocation.pageY\n      );\n      if (movedDistance > LONG_PRESS_ALLOWED_MOVEMENT) {\n        this._cancelLongPressDelayTimeout();\n      }\n    }\n\n    const isTouchWithinActive =\n      pageX > positionOnActivate.left - pressExpandLeft &&\n      pageY > positionOnActivate.top - pressExpandTop &&\n      pageX < positionOnActivate.left + dimensionsOnActivate.width + pressExpandRight &&\n      pageY < positionOnActivate.top + dimensionsOnActivate.height + pressExpandBottom;\n    if (isTouchWithinActive) {\n      const prevState = this.state.touchable.touchState;\n      this._receiveSignal(Signals.ENTER_PRESS_RECT, e);\n      const curState = this.state.touchable.touchState;\n      if (\n        curState === States.RESPONDER_INACTIVE_PRESS_IN &&\n        prevState !== States.RESPONDER_INACTIVE_PRESS_IN\n      ) {\n        // fix for t7967420\n        this._cancelLongPressDelayTimeout();\n      }\n    } else {\n      this._cancelLongPressDelayTimeout();\n      this._receiveSignal(Signals.LEAVE_PRESS_RECT, e);\n    }\n  },\n\n  /**\n   * Invoked when the item receives focus. Mixers might override this to\n   * visually distinguish the `VisualRect` so that the user knows that it\n   * currently has the focus. Most platforms only support a single element being\n   * focused at a time, in which case there may have been a previously focused\n   * element that was blurred just prior to this. This can be overridden when\n   * using `Touchable.Mixin.withoutDefaultFocusAndBlur`.\n   */\n  touchableHandleFocus: function(e: Event) {\n    this.props.onFocus && this.props.onFocus(e);\n  },\n\n  /**\n   * Invoked when the item loses focus. Mixers might override this to\n   * visually distinguish the `VisualRect` so that the user knows that it\n   * no longer has focus. Most platforms only support a single element being\n   * focused at a time, in which case the focus may have moved to another.\n   * This can be overridden when using\n   * `Touchable.Mixin.withoutDefaultFocusAndBlur`.\n   */\n  touchableHandleBlur: function(e: Event) {\n    this.props.onBlur && this.props.onBlur(e);\n  },\n\n  // ==== Abstract Application Callbacks ====\n\n  /**\n   * Invoked when the item should be highlighted. Mixers should implement this\n   * to visually distinguish the `VisualRect` so that the user knows that\n   * releasing a touch will result in a \"selection\" (analog to click).\n   *\n   * @abstract\n   * touchableHandleActivePressIn: function,\n   */\n\n  /**\n   * Invoked when the item is \"active\" (in that it is still eligible to become\n   * a \"select\") but the touch has left the `PressRect`. Usually the mixer will\n   * want to unhighlight the `VisualRect`. If the user (while pressing) moves\n   * back into the `PressRect` `touchableHandleActivePressIn` will be invoked\n   * again and the mixer should probably highlight the `VisualRect` again. This\n   * event will not fire on an `touchEnd/mouseUp` event, only move events while\n   * the user is depressing the mouse/touch.\n   *\n   * @abstract\n   * touchableHandleActivePressOut: function\n   */\n\n  /**\n   * Invoked when the item is \"selected\" - meaning the interaction ended by\n   * letting up while the item was either in the state\n   * `RESPONDER_ACTIVE_PRESS_IN` or `RESPONDER_INACTIVE_PRESS_IN`.\n   *\n   * @abstract\n   * touchableHandlePress: function\n   */\n\n  /**\n   * Invoked when the item is long pressed - meaning the interaction ended by\n   * letting up while the item was in `RESPONDER_ACTIVE_LONG_PRESS_IN`. If\n   * `touchableHandleLongPress` is *not* provided, `touchableHandlePress` will\n   * be called as it normally is. If `touchableHandleLongPress` is provided, by\n   * default any `touchableHandlePress` callback will not be invoked. To\n   * override this default behavior, override `touchableLongPressCancelsPress`\n   * to return false. As a result, `touchableHandlePress` will be called when\n   * lifting up, even if `touchableHandleLongPress` has also been called.\n   *\n   * @abstract\n   * touchableHandleLongPress: function\n   */\n\n  /**\n   * Returns the number of millis to wait before triggering a highlight.\n   *\n   * @abstract\n   * touchableGetHighlightDelayMS: function\n   */\n\n  /**\n   * Returns the amount to extend the `HitRect` into the `PressRect`. Positive\n   * numbers mean the size expands outwards.\n   *\n   * @abstract\n   * touchableGetPressRectOffset: function\n   */\n\n  // ==== Internal Logic ====\n\n  /**\n   * Measures the `HitRect` node on activation. The Bounding rectangle is with\n   * respect to viewport - not page, so adding the `pageXOffset/pageYOffset`\n   * should result in points that are in the same coordinate system as an\n   * event's `globalX/globalY` data values.\n   *\n   * - Consider caching this for the lifetime of the component, or possibly\n   *   being able to share this cache between any `ScrollMap` view.\n   *\n   * @sideeffects\n   * @private\n   */\n  _remeasureMetricsOnActivation: function() {\n    const tag = this.state.touchable.responderID;\n    if (tag == null) {\n      return;\n    }\n\n    UIManager.measure(tag, this._handleQueryLayout);\n  },\n\n  _handleQueryLayout: function(\n    l: number,\n    t: number,\n    w: number,\n    h: number,\n    globalX: number,\n    globalY: number\n  ) {\n    //don't do anything UIManager failed to measure node\n    if (!l && !t && !w && !h && !globalX && !globalY) {\n      return;\n    }\n    this.state.touchable.positionOnActivate &&\n      Position.release(this.state.touchable.positionOnActivate);\n    this.state.touchable.dimensionsOnActivate &&\n      // $FlowFixMe\n      BoundingDimensions.release(this.state.touchable.dimensionsOnActivate);\n    this.state.touchable.positionOnActivate = Position.getPooled(globalX, globalY);\n    // $FlowFixMe\n    this.state.touchable.dimensionsOnActivate = BoundingDimensions.getPooled(w, h);\n  },\n\n  _handleDelay: function(e: PressEvent) {\n    this.touchableDelayTimeout = null;\n    this._receiveSignal(Signals.DELAY, e);\n  },\n\n  _handleLongDelay: function(e: PressEvent) {\n    this.longPressDelayTimeout = null;\n    const curState = this.state.touchable.touchState;\n    if (\n      curState !== States.RESPONDER_ACTIVE_PRESS_IN &&\n      curState !== States.RESPONDER_ACTIVE_LONG_PRESS_IN\n    ) {\n      console.error(\n        'Attempted to transition from state `' +\n          curState +\n          '` to `' +\n          States.RESPONDER_ACTIVE_LONG_PRESS_IN +\n          '`, which is not supported. This is ' +\n          'most likely due to `Touchable.longPressDelayTimeout` not being cancelled.'\n      );\n    } else {\n      this._receiveSignal(Signals.LONG_PRESS_DETECTED, e);\n    }\n  },\n\n  /**\n   * Receives a state machine signal, performs side effects of the transition\n   * and stores the new state. Validates the transition as well.\n   *\n   * @param {Signals} signal State machine signal.\n   * @throws Error if invalid state transition or unrecognized signal.\n   * @sideeffects\n   */\n  _receiveSignal: function(signal: Signal, e: PressEvent) {\n    const responderID = this.state.touchable.responderID;\n    const curState = this.state.touchable.touchState;\n    const nextState = Transitions[curState] && Transitions[curState][signal];\n    if (!responderID && signal === Signals.RESPONDER_RELEASE) {\n      return;\n    }\n    if (!nextState) {\n      throw new Error(\n        'Unrecognized signal `' +\n          signal +\n          '` or state `' +\n          curState +\n          '` for Touchable responder `' +\n          responderID +\n          '`'\n      );\n    }\n    if (nextState === States.ERROR) {\n      throw new Error(\n        'Touchable cannot transition from `' +\n          curState +\n          '` to `' +\n          signal +\n          '` for responder `' +\n          responderID +\n          '`'\n      );\n    }\n    if (curState !== nextState) {\n      this._performSideEffectsForTransition(curState, nextState, signal, e);\n      this.state.touchable.touchState = nextState;\n    }\n  },\n\n  _cancelLongPressDelayTimeout: function() {\n    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);\n    this.longPressDelayTimeout = null;\n  },\n\n  _isHighlight: function(state: State) {\n    return (\n      state === States.RESPONDER_ACTIVE_PRESS_IN || state === States.RESPONDER_ACTIVE_LONG_PRESS_IN\n    );\n  },\n\n  _savePressInLocation: function(e: PressEvent) {\n    const touch = extractSingleTouch(e.nativeEvent);\n    const pageX = touch && touch.pageX;\n    const pageY = touch && touch.pageY;\n    const locationX = touch && touch.locationX;\n    const locationY = touch && touch.locationY;\n    this.pressInLocation = { pageX, pageY, locationX, locationY };\n  },\n\n  _getDistanceBetweenPoints: function(aX: number, aY: number, bX: number, bY: number) {\n    const deltaX = aX - bX;\n    const deltaY = aY - bY;\n    return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n  },\n\n  /**\n   * Will perform a transition between touchable states, and identify any\n   * highlighting or unhighlighting that must be performed for this particular\n   * transition.\n   *\n   * @param {States} curState Current Touchable state.\n   * @param {States} nextState Next Touchable state.\n   * @param {Signal} signal Signal that triggered the transition.\n   * @param {Event} e Native event.\n   * @sideeffects\n   */\n  _performSideEffectsForTransition: function(\n    curState: State,\n    nextState: State,\n    signal: Signal,\n    e: PressEvent\n  ) {\n    const curIsHighlight = this._isHighlight(curState);\n    const newIsHighlight = this._isHighlight(nextState);\n\n    const isFinalSignal =\n      signal === Signals.RESPONDER_TERMINATED || signal === Signals.RESPONDER_RELEASE;\n\n    if (isFinalSignal) {\n      this._cancelLongPressDelayTimeout();\n    }\n\n    const isInitialTransition =\n      curState === States.NOT_RESPONDER && nextState === States.RESPONDER_INACTIVE_PRESS_IN;\n\n    const isActiveTransition = !IsActive[curState] && IsActive[nextState];\n    if (isInitialTransition || isActiveTransition) {\n      this._remeasureMetricsOnActivation();\n    }\n\n    if (IsPressingIn[curState] && signal === Signals.LONG_PRESS_DETECTED) {\n      this.touchableHandleLongPress && this.touchableHandleLongPress(e);\n    }\n\n    if (newIsHighlight && !curIsHighlight) {\n      this._startHighlight(e);\n    } else if (!newIsHighlight && curIsHighlight) {\n      this._endHighlight(e);\n    }\n\n    if (IsPressingIn[curState] && signal === Signals.RESPONDER_RELEASE) {\n      const hasLongPressHandler = !!this.props.onLongPress;\n      const pressIsLongButStillCallOnPress =\n        IsLongPressingIn[curState] && // We *are* long pressing.. // But either has no long handler\n        (!hasLongPressHandler || !this.touchableLongPressCancelsPress()); // or we're told to ignore it.\n\n      const shouldInvokePress = !IsLongPressingIn[curState] || pressIsLongButStillCallOnPress;\n      if (shouldInvokePress && this.touchableHandlePress) {\n        if (!newIsHighlight && !curIsHighlight) {\n          // we never highlighted because of delay, but we should highlight now\n          this._startHighlight(e);\n          this._endHighlight(e);\n        }\n        this.touchableHandlePress(e);\n      }\n    }\n\n    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);\n    this.touchableDelayTimeout = null;\n  },\n\n  _playTouchSound: function() {\n    UIManager.playTouchSound();\n  },\n\n  _startHighlight: function(e: PressEvent) {\n    this._savePressInLocation(e);\n    this.touchableHandleActivePressIn && this.touchableHandleActivePressIn(e);\n  },\n\n  _endHighlight: function(e: PressEvent) {\n    if (this.touchableHandleActivePressOut) {\n      if (this.touchableGetPressOutDelayMS && this.touchableGetPressOutDelayMS()) {\n        this.pressOutDelayTimeout = setTimeout(() => {\n          this.touchableHandleActivePressOut(e);\n        }, this.touchableGetPressOutDelayMS());\n      } else {\n        this.touchableHandleActivePressOut(e);\n      }\n    }\n  },\n\n  // HACK (part 2): basic support for touchable interactions using a keyboard (including\n  // delays and longPress)\n  touchableHandleKeyEvent: function(e: Event) {\n    const { type, key } = e;\n    if (key === 'Enter' || key === ' ') {\n      if (type === 'keydown') {\n        if (!this._isTouchableKeyboardActive) {\n          if (\n            !this.state.touchable.touchState ||\n            this.state.touchable.touchState === States.NOT_RESPONDER\n          ) {\n            this.touchableHandleResponderGrant(e);\n            this._isTouchableKeyboardActive = true;\n          }\n        }\n      } else if (type === 'keyup') {\n        if (this._isTouchableKeyboardActive) {\n          if (\n            this.state.touchable.touchState &&\n            this.state.touchable.touchState !== States.NOT_RESPONDER\n          ) {\n            this.touchableHandleResponderRelease(e);\n            this._isTouchableKeyboardActive = false;\n          }\n        }\n      }\n      e.stopPropagation();\n      // prevent the default behaviour unless the Touchable functions as a link\n      // and Enter is pressed\n      if (!(key === 'Enter' && AccessibilityUtil.propsToAriaRole(this.props) === 'link')) {\n        e.preventDefault();\n      }\n    }\n  },\n\n  withoutDefaultFocusAndBlur: {}\n};\n\n/**\n * Provide an optional version of the mixin where `touchableHandleFocus` and\n * `touchableHandleBlur` can be overridden. This allows appropriate defaults to\n * be set on TV platforms, without breaking existing implementations of\n * `Touchable`.\n */\nconst {\n  // eslint-disable-next-line no-unused-vars\n  touchableHandleFocus,\n  // eslint-disable-next-line no-unused-vars\n  touchableHandleBlur,\n  ...TouchableMixinWithoutDefaultFocusAndBlur\n} = TouchableMixin;\nTouchableMixin.withoutDefaultFocusAndBlur = TouchableMixinWithoutDefaultFocusAndBlur;\n\nconst Touchable = {\n  Mixin: TouchableMixin,\n  TOUCH_TARGET_DEBUG: false, // Highlights all touchable targets. Toggle with Inspector.\n  /**\n   * Renders a debugging overlay to visualize touch target with hitSlop (might not work on Android).\n   */\n  renderDebugView: ({ color, hitSlop }: { color: string | number, hitSlop: EdgeInsetsProp }) => {\n    if (!Touchable.TOUCH_TARGET_DEBUG) {\n      return null;\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      throw Error('Touchable.TOUCH_TARGET_DEBUG should not be enabled in prod!');\n    }\n    const debugHitSlopStyle = {};\n    hitSlop = hitSlop || { top: 0, bottom: 0, left: 0, right: 0 };\n    for (const key in hitSlop) {\n      debugHitSlopStyle[key] = -hitSlop[key];\n    }\n    const normalizedColor = normalizeColor(color);\n    if (typeof normalizedColor !== 'number') {\n      return null;\n    }\n    const hexColor = '#' + ('00000000' + normalizedColor.toString(16)).substr(-8);\n    return (\n      <View\n        pointerEvents=\"none\"\n        style={{\n          position: 'absolute',\n          borderColor: hexColor.slice(0, -2) + '55', // More opaque\n          borderWidth: 1,\n          borderStyle: 'dashed',\n          backgroundColor: hexColor.slice(0, -2) + '0F', // Less opaque\n          ...debugHitSlopStyle\n        }}\n      />\n    );\n  }\n};\n\nexport default Touchable;\n"]},"metadata":{},"sourceType":"module"}