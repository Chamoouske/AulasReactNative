{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native-web/src/exports/ProgressBar/index.js\";\n\nimport StyleSheet from \"../StyleSheet\";\nimport View from \"../View\";\nimport React, { forwardRef, useEffect, useRef } from 'react';\nvar ProgressBar = forwardRef(function (props, ref) {\n  var _props$color = props.color,\n      color = _props$color === void 0 ? '#1976D2' : _props$color,\n      _props$indeterminate = props.indeterminate,\n      indeterminate = _props$indeterminate === void 0 ? false : _props$indeterminate,\n      _props$progress = props.progress,\n      progress = _props$progress === void 0 ? 0 : _props$progress,\n      _props$trackColor = props.trackColor,\n      trackColor = _props$trackColor === void 0 ? 'transparent' : _props$trackColor,\n      style = props.style,\n      other = _objectWithoutProperties(props, [\"color\", \"indeterminate\", \"progress\", \"trackColor\", \"style\"]);\n\n  var percentageProgress = progress * 100;\n  var progressRef = useRef(null);\n  useEffect(function () {\n    var width = indeterminate ? '25%' : percentageProgress + \"%\";\n\n    if (progressRef.current != null) {\n      progressRef.current.setNativeProps({\n        style: {\n          width: width\n        }\n      });\n    }\n  }, [indeterminate, percentageProgress, progressRef]);\n  return React.createElement(View, _extends({}, other, {\n    accessibilityRole: \"progressbar\",\n    accessibilityValue: {\n      max: 100,\n      min: 0,\n      now: indeterminate ? null : percentageProgress\n    },\n    ref: ref,\n    style: [styles.track, style, {\n      backgroundColor: trackColor\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }), React.createElement(View, {\n    ref: progressRef,\n    style: [styles.progress, indeterminate && styles.animation, {\n      backgroundColor: color\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }));\n});\nProgressBar.displayName = 'ProgressBar';\nvar styles = StyleSheet.create({\n  track: {\n    height: 5,\n    overflow: 'hidden',\n    userSelect: 'none',\n    zIndex: 0\n  },\n  progress: {\n    height: '100%',\n    zIndex: -1\n  },\n  animation: {\n    animationDuration: '1s',\n    animationKeyframes: [{\n      '0%': {\n        transform: [{\n          translateX: '-100%'\n        }]\n      },\n      '100%': {\n        transform: [{\n          translateX: '400%'\n        }]\n      }\n    }],\n    animationTimingFunction: 'linear',\n    animationIterationCount: 'infinite'\n  }\n});\nexport default ProgressBar;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native-web/src/exports/ProgressBar/index.js"],"names":["StyleSheet","View","React","forwardRef","useEffect","useRef","ProgressBar","props","ref","color","indeterminate","progress","trackColor","style","other","percentageProgress","progressRef","width","current","setNativeProps","max","min","now","styles","track","backgroundColor","animation","displayName","create","height","overflow","userSelect","zIndex","animationDuration","animationKeyframes","transform","translateX","animationTimingFunction","animationIterationCount"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type { ColorValue } from '../../types';\nimport type { ViewProps } from '../View';\n\nimport StyleSheet from '../StyleSheet';\nimport View from '../View';\nimport React, { forwardRef, useEffect, useRef } from 'react';\n\ntype ProgressBarProps = {\n  ...ViewProps,\n  color?: ColorValue,\n  indeterminate?: boolean,\n  progress?: number,\n  trackColor?: ColorValue\n};\n\nconst ProgressBar = forwardRef<ProgressBarProps, *>((props, ref) => {\n  const {\n    color = '#1976D2',\n    indeterminate = false,\n    progress = 0,\n    trackColor = 'transparent',\n    style,\n    ...other\n  } = props;\n\n  const percentageProgress = progress * 100;\n\n  const progressRef = useRef(null);\n  useEffect(() => {\n    const width = indeterminate ? '25%' : `${percentageProgress}%`;\n    if (progressRef.current != null) {\n      progressRef.current.setNativeProps({\n        style: { width }\n      });\n    }\n  }, [indeterminate, percentageProgress, progressRef]);\n\n  return (\n    <View\n      {...other}\n      accessibilityRole=\"progressbar\"\n      accessibilityValue={{\n        max: 100,\n        min: 0,\n        now: indeterminate ? null : percentageProgress\n      }}\n      ref={ref}\n      style={[styles.track, style, { backgroundColor: trackColor }]}\n    >\n      <View\n        ref={progressRef}\n        style={[styles.progress, indeterminate && styles.animation, { backgroundColor: color }]}\n      />\n    </View>\n  );\n});\n\nProgressBar.displayName = 'ProgressBar';\n\nconst styles = StyleSheet.create({\n  track: {\n    height: 5,\n    overflow: 'hidden',\n    userSelect: 'none',\n    zIndex: 0\n  },\n  progress: {\n    height: '100%',\n    zIndex: -1\n  },\n  animation: {\n    animationDuration: '1s',\n    animationKeyframes: [\n      {\n        '0%': { transform: [{ translateX: '-100%' }] },\n        '100%': { transform: [{ translateX: '400%' }] }\n      }\n    ],\n    animationTimingFunction: 'linear',\n    animationIterationCount: 'infinite'\n  }\n});\n\nexport default ProgressBar;\n"]},"metadata":{},"sourceType":"module"}