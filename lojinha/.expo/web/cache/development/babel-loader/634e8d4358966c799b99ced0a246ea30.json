{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _versionRanges = _interopRequireDefault(require(\"../versionRanges\"));\n\nvar _checkInstallation = require(\"../checkInstallation\");\n\nvar _common = require(\"./common\");\n\nvar _environmentVariables = require(\"../../../tools/windows/environmentVariables\");\n\nfunction _path() {\n  var data = require(\"path\");\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _executeWinCommand = require(\"../../../tools/windows/executeWinCommand\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar _default = {\n  label: 'Python',\n  getDiagnostics: function getDiagnostics(_ref) {\n    var Languages;\n    return _regeneratorRuntime.async(function getDiagnostics$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            Languages = _ref.Languages;\n            return _context.abrupt(\"return\", {\n              needsToBeFixed: (0, _checkInstallation.doesSoftwareNeedToBeFixed)({\n                version: typeof Languages.Python === 'string' ? Languages.Python : Languages.Python.version,\n                versionRange: _versionRanges.default.PYTHON\n              }),\n              version: typeof Languages.Python === 'string' ? Languages.Python : Languages.Python.version,\n              versionRange: _versionRanges.default.PYTHON\n            });\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  win32AutomaticFix: function win32AutomaticFix(_ref2) {\n    var loader, arch, installerUrl, installPath, installer, command;\n    return _regeneratorRuntime.async(function win32AutomaticFix$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            loader = _ref2.loader;\n            _context2.prev = 1;\n            arch = process.arch === 'x64' ? 'amd64.' : '';\n            installerUrl = \"https://www.python.org/ftp/python/2.7.9/python-2.7.9.\" + arch + \"msi\";\n            installPath = (0, _path().join)(process.env.LOCALAPPDATA || '', 'python2');\n            loader.start(\"Downloading Python installer from \\\"\" + installerUrl + \"\\\"\");\n            _context2.next = 8;\n            return _regeneratorRuntime.awrap((0, _cliTools().fetchToTemp)(installerUrl));\n\n          case 8:\n            installer = _context2.sent;\n            loader.text = \"Installing Python in \\\"\" + installPath + \"\\\"\";\n            command = \"msiexec.exe /i \\\"\" + installer + \"\\\" TARGETDIR=\\\"\" + installPath + \"\\\" /qn /L*P \\\"python-log.txt\\\"\";\n            _context2.next = 13;\n            return _regeneratorRuntime.awrap((0, _executeWinCommand.executeCommand)(command));\n\n          case 13:\n            loader.text = 'Updating environment variables';\n            _context2.next = 16;\n            return _regeneratorRuntime.awrap((0, _environmentVariables.updateEnvironment)('PATH', installPath));\n\n          case 16:\n            _context2.next = 18;\n            return _regeneratorRuntime.awrap((0, _environmentVariables.updateEnvironment)('PATH', (0, _path().join)(installPath, 'scripts')));\n\n          case 18:\n            loader.succeed('Python installed successfully');\n            _context2.next = 24;\n            break;\n\n          case 21:\n            _context2.prev = 21;\n            _context2.t0 = _context2[\"catch\"](1);\n            loader.fail(_context2.t0);\n\n          case 24:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[1, 21]], Promise);\n  },\n  runAutomaticFix: function runAutomaticFix() {\n    return _regeneratorRuntime.async(function runAutomaticFix$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            (0, _common.logManualInstallation)({\n              healthcheck: 'Python',\n              url: 'https://www.python.org/downloads/'\n            });\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};\nexports.default = _default;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli/build/commands/doctor/healthchecks/python.js"],"names":["Object","defineProperty","exports","value","default","_cliTools","data","require","_versionRanges","_interopRequireDefault","_checkInstallation","_common","_environmentVariables","_path","_executeWinCommand","obj","__esModule","_default","label","getDiagnostics","Languages","needsToBeFixed","doesSoftwareNeedToBeFixed","version","Python","versionRange","PYTHON","win32AutomaticFix","loader","arch","process","installerUrl","installPath","join","env","LOCALAPPDATA","start","fetchToTemp","installer","text","command","executeCommand","updateEnvironment","succeed","fail","runAutomaticFix","logManualInstallation","healthcheck","url"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _versionRanges = _interopRequireDefault(require(\"../versionRanges\"));\n\nvar _checkInstallation = require(\"../checkInstallation\");\n\nvar _common = require(\"./common\");\n\nvar _environmentVariables = require(\"../../../tools/windows/environmentVariables\");\n\nfunction _path() {\n  const data = require(\"path\");\n\n  _path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _executeWinCommand = require(\"../../../tools/windows/executeWinCommand\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _default = {\n  label: 'Python',\n  getDiagnostics: async ({\n    Languages\n  }) => ({\n    needsToBeFixed: (0, _checkInstallation.doesSoftwareNeedToBeFixed)({\n      version: typeof Languages.Python === 'string' ? Languages.Python : Languages.Python.version,\n      versionRange: _versionRanges.default.PYTHON\n    }),\n    version: typeof Languages.Python === 'string' ? Languages.Python : Languages.Python.version,\n    versionRange: _versionRanges.default.PYTHON\n  }),\n  win32AutomaticFix: async ({\n    loader\n  }) => {\n    try {\n      const arch = process.arch === 'x64' ? 'amd64.' : '';\n      const installerUrl = `https://www.python.org/ftp/python/2.7.9/python-2.7.9.${arch}msi`;\n      const installPath = (0, _path().join)(process.env.LOCALAPPDATA || '', 'python2');\n      loader.start(`Downloading Python installer from \"${installerUrl}\"`);\n      const installer = await (0, _cliTools().fetchToTemp)(installerUrl);\n      loader.text = `Installing Python in \"${installPath}\"`;\n      const command = `msiexec.exe /i \"${installer}\" TARGETDIR=\"${installPath}\" /qn /L*P \"python-log.txt\"`;\n      await (0, _executeWinCommand.executeCommand)(command);\n      loader.text = 'Updating environment variables';\n      await (0, _environmentVariables.updateEnvironment)('PATH', installPath);\n      await (0, _environmentVariables.updateEnvironment)('PATH', (0, _path().join)(installPath, 'scripts'));\n      loader.succeed('Python installed successfully');\n    } catch (e) {\n      loader.fail(e);\n    }\n  },\n  runAutomaticFix: async () => {\n    /**\n     * Python is only needed on Windows so this method should never be called.\n     * Leaving it in case that changes and as an example of how to have a\n     * fallback.\n     */\n    (0, _common.logManualInstallation)({\n      healthcheck: 'Python',\n      url: 'https://www.python.org/downloads/'\n    });\n  }\n};\nexports.default = _default;\n\n//# sourceMappingURL=python.js.map"]},"metadata":{},"sourceType":"script"}