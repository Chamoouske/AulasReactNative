{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _readline() {\n  var data = _interopRequireDefault(require(\"readline\"));\n\n  _readline = function _readline() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _hookStdout = _interopRequireDefault(require(\"../../tools/hookStdout\"));\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction printWatchModeInstructions() {\n  _cliTools().logger.log('\\n\\nTo reload the app press \"r\"\\nTo open developer menu press \"d\"');\n}\n\nfunction enableWatchMode(messageSocket) {\n  if (!process.stdin.setRawMode) {\n    _cliTools().logger.debug('Watch mode is not supported in this environment');\n\n    return;\n  }\n\n  _readline().default.emitKeypressEvents(process.stdin);\n\n  process.stdin.setRawMode(true);\n  var restore = (0, _hookStdout.default)(function (output) {\n    if (output.includes('Learn once, write anywhere')) {\n      printWatchModeInstructions();\n      restore();\n    }\n  });\n  process.stdin.on('keypress', function (_key, data) {\n    var ctrl = data.ctrl,\n        name = data.name;\n\n    if (ctrl === true) {\n      switch (name) {\n        case 'c':\n          process.exit();\n          break;\n\n        case 'z':\n          process.emit('SIGTSTP');\n          break;\n      }\n    } else if (name === 'r') {\n      messageSocket.broadcast('reload', null);\n\n      _cliTools().logger.info('Reloading app...');\n    } else if (name === 'd') {\n      messageSocket.broadcast('devMenu', null);\n\n      _cliTools().logger.info('Opening developer menu...');\n    }\n  });\n}\n\nvar _default = enableWatchMode;\nexports.default = _default;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli/build/commands/start/watchMode.js"],"names":["Object","defineProperty","exports","value","default","_readline","data","_interopRequireDefault","require","_hookStdout","_cliTools","obj","__esModule","printWatchModeInstructions","logger","log","enableWatchMode","messageSocket","process","stdin","setRawMode","debug","emitKeypressEvents","restore","output","includes","on","_key","ctrl","name","exit","emit","broadcast","info","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,SAASC,SAAT,GAAqB;AACnB,MAAMC,IAAI,GAAGC,sBAAsB,CAACC,OAAO,CAAC,UAAD,CAAR,CAAnC;;AAEAH,EAAAA,SAAS,GAAG,qBAAY;AACtB,WAAOC,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,IAAIG,WAAW,GAAGF,sBAAsB,CAACC,OAAO,0BAAR,CAAxC;;AAEA,SAASE,SAAT,GAAqB;AACnB,MAAMJ,IAAI,GAAGE,OAAO,CAAC,mCAAD,CAApB;;AAEAE,EAAAA,SAAS,GAAG,qBAAY;AACtB,WAAOJ,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,SAASC,sBAAT,CAAgCI,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEP,IAAAA,OAAO,EAAEO;AAAX,GAArC;AAAwD;;AAE/F,SAASE,0BAAT,GAAsC;AACpCH,EAAAA,SAAS,GAAGI,MAAZ,CAAmBC,GAAnB,CAAuB,mEAAvB;AACD;;AAED,SAASC,eAAT,CAAyBC,aAAzB,EAAwC;AAItC,MAAI,CAACC,OAAO,CAACC,KAAR,CAAcC,UAAnB,EAA+B;AAC7BV,IAAAA,SAAS,GAAGI,MAAZ,CAAmBO,KAAnB,CAAyB,iDAAzB;;AAEA;AACD;;AAEDhB,EAAAA,SAAS,GAAGD,OAAZ,CAAoBkB,kBAApB,CAAuCJ,OAAO,CAACC,KAA/C;;AAEAD,EAAAA,OAAO,CAACC,KAAR,CAAcC,UAAd,CAAyB,IAAzB;AAIA,MAAMG,OAAO,GAAG,CAAC,GAAGd,WAAW,CAACL,OAAhB,EAAyB,UAAAoB,MAAM,EAAI;AACjD,QAAIA,MAAM,CAACC,QAAP,CAAgB,4BAAhB,CAAJ,EAAmD;AACjDZ,MAAAA,0BAA0B;AAC1BU,MAAAA,OAAO;AACR;AACF,GALe,CAAhB;AAMAL,EAAAA,OAAO,CAACC,KAAR,CAAcO,EAAd,CAAiB,UAAjB,EAA6B,UAACC,IAAD,EAAOrB,IAAP,EAAgB;AAAA,QAEzCsB,IAFyC,GAIvCtB,IAJuC,CAEzCsB,IAFyC;AAAA,QAGzCC,IAHyC,GAIvCvB,IAJuC,CAGzCuB,IAHyC;;AAM3C,QAAID,IAAI,KAAK,IAAb,EAAmB;AACjB,cAAQC,IAAR;AACE,aAAK,GAAL;AACEX,UAAAA,OAAO,CAACY,IAAR;AACA;;AAEF,aAAK,GAAL;AACEZ,UAAAA,OAAO,CAACa,IAAR,CAAa,SAAb;AACA;AAPJ;AASD,KAVD,MAUO,IAAIF,IAAI,KAAK,GAAb,EAAkB;AACvBZ,MAAAA,aAAa,CAACe,SAAd,CAAwB,QAAxB,EAAkC,IAAlC;;AAEAtB,MAAAA,SAAS,GAAGI,MAAZ,CAAmBmB,IAAnB,CAAwB,kBAAxB;AACD,KAJM,MAIA,IAAIJ,IAAI,KAAK,GAAb,EAAkB;AACvBZ,MAAAA,aAAa,CAACe,SAAd,CAAwB,SAAxB,EAAmC,IAAnC;;AAEAtB,MAAAA,SAAS,GAAGI,MAAZ,CAAmBmB,IAAnB,CAAwB,2BAAxB;AACD;AACF,GAzBD;AA0BD;;AAED,IAAIC,QAAQ,GAAGlB,eAAf;AACAd,OAAO,CAACE,OAAR,GAAkB8B,QAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _readline() {\n  const data = _interopRequireDefault(require(\"readline\"));\n\n  _readline = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _hookStdout = _interopRequireDefault(require(\"../../tools/hookStdout\"));\n\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction printWatchModeInstructions() {\n  _cliTools().logger.log('\\n\\nTo reload the app press \"r\"\\nTo open developer menu press \"d\"');\n}\n\nfunction enableWatchMode(messageSocket) {\n  // We need to set this to true to catch key presses individually.\n  // As a result we have to implement our own method for exiting\n  // and other commands (e.g. ctrl+c & ctrl+z)\n  if (!process.stdin.setRawMode) {\n    _cliTools().logger.debug('Watch mode is not supported in this environment');\n\n    return;\n  }\n\n  _readline().default.emitKeypressEvents(process.stdin);\n\n  process.stdin.setRawMode(true); // We have no way of knowing when the dependency graph is done loading\n  // except by hooking into stdout itself. We want to print instructions\n  // right after its done loading.\n\n  const restore = (0, _hookStdout.default)(output => {\n    if (output.includes('Learn once, write anywhere')) {\n      printWatchModeInstructions();\n      restore();\n    }\n  });\n  process.stdin.on('keypress', (_key, data) => {\n    const {\n      ctrl,\n      name\n    } = data;\n\n    if (ctrl === true) {\n      switch (name) {\n        case 'c':\n          process.exit();\n          break;\n\n        case 'z':\n          process.emit('SIGTSTP');\n          break;\n      }\n    } else if (name === 'r') {\n      messageSocket.broadcast('reload', null);\n\n      _cliTools().logger.info('Reloading app...');\n    } else if (name === 'd') {\n      messageSocket.broadcast('devMenu', null);\n\n      _cliTools().logger.info('Opening developer menu...');\n    }\n  });\n}\n\nvar _default = enableWatchMode;\nexports.default = _default;\n\n//# sourceMappingURL=watchMode.js.map"]},"metadata":{},"sourceType":"script"}