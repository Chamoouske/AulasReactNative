{"ast":null,"code":"#!/usr/bin/env node\n'use strict';\n\nvar WebSocket = require('ws');\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nconsole.log(\"Test server for WebSocketExample\\n\\nThis will send each incoming message right back to the other side.\\nRestart with the '--binary' command line flag to have it respond with an\\nArrayBuffer instead of a string.\\n\");\nvar respondWithBinary = process.argv.indexOf('--binary') !== -1;\nvar server = new WebSocket.Server({\n  port: 5555\n});\nserver.on('connection', function (ws) {\n  ws.on('message', function (message) {\n    console.log('Received message:', message);\n\n    if (respondWithBinary) {\n      message = Buffer.from(message);\n    }\n\n    if (message === 'getImage') {\n      message = fs.readFileSync(path.resolve(__dirname, 'flux@3x.png'));\n    }\n\n    console.log('Replying with:', message);\n    ws.send(message);\n  });\n  console.log('Incoming connection!');\n  ws.send('Why hello there!');\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/RNTester/js/examples/WebSocket/websocket_test_server.js"],"names":["WebSocket","require","fs","path","console","log","respondWithBinary","process","argv","indexOf","server","Server","port","on","ws","message","Buffer","from","readFileSync","resolve","__dirname","send"],"mappings":"AAAA;AAWA;;AAIA,IAAMA,SAAS,GAAGC,OAAO,CAAC,IAAD,CAAzB;;AAEA,IAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;;AACA,IAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AAEAG,OAAO,CAACC,GAAR;AAQA,IAAMC,iBAAiB,GAAGC,OAAO,CAACC,IAAR,CAAaC,OAAb,CAAqB,UAArB,MAAqC,CAAC,CAAhE;AACA,IAAMC,MAAM,GAAG,IAAIV,SAAS,CAACW,MAAd,CAAqB;AAACC,EAAAA,IAAI,EAAE;AAAP,CAArB,CAAf;AACAF,MAAM,CAACG,EAAP,CAAU,YAAV,EAAwB,UAAAC,EAAE,EAAI;AAC5BA,EAAAA,EAAE,CAACD,EAAH,CAAM,SAAN,EAAiB,UAAAE,OAAO,EAAI;AAC1BX,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCU,OAAjC;;AACA,QAAIT,iBAAJ,EAAuB;AACrBS,MAAAA,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAYF,OAAZ,CAAV;AACD;;AACD,QAAIA,OAAO,KAAK,UAAhB,EAA4B;AAC1BA,MAAAA,OAAO,GAAGb,EAAE,CAACgB,YAAH,CAAgBf,IAAI,CAACgB,OAAL,CAAaC,SAAb,EAAwB,aAAxB,CAAhB,CAAV;AACD;;AACDhB,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BU,OAA9B;AACAD,IAAAA,EAAE,CAACO,IAAH,CAAQN,OAAR;AACD,GAVD;AAYAX,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACAS,EAAAA,EAAE,CAACO,IAAH,CAAQ,kBAAR;AACD,CAfD","sourcesContent":["#!/usr/bin/env node\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\n/* eslint-env node */\n\nconst WebSocket = require('ws');\n\nconst fs = require('fs');\nconst path = require('path');\n\nconsole.log(`\\\nTest server for WebSocketExample\n\nThis will send each incoming message right back to the other side.\nRestart with the '--binary' command line flag to have it respond with an\nArrayBuffer instead of a string.\n`);\n\nconst respondWithBinary = process.argv.indexOf('--binary') !== -1;\nconst server = new WebSocket.Server({port: 5555});\nserver.on('connection', ws => {\n  ws.on('message', message => {\n    console.log('Received message:', message);\n    if (respondWithBinary) {\n      message = Buffer.from(message);\n    }\n    if (message === 'getImage') {\n      message = fs.readFileSync(path.resolve(__dirname, 'flux@3x.png'));\n    }\n    console.log('Replying with:', message);\n    ws.send(message);\n  });\n\n  console.log('Incoming connection!');\n  ws.send('Why hello there!');\n});\n"]},"metadata":{},"sourceType":"script"}