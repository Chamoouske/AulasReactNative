{"ast":null,"code":"'use strict';\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar capturedErrorDefaults = {\n  componentName: 'A',\n  componentStack: '\\n  in A\\n  in B\\n  in C',\n  errorBoundary: null,\n  errorBoundaryFound: false,\n  errorBoundaryName: null,\n  willRetry: false\n};\ndescribe('ExceptionsManager', function () {\n  var ReactFiberErrorDialog, ExceptionsManager, NativeExceptionsManager, nativeReportException;\n  beforeEach(function () {\n    jest.resetModules();\n    jest.mock(\"../NativeExceptionsManager\", function () {\n      return {\n        default: {\n          reportException: jest.fn(),\n          updateExceptionMessage: function updateExceptionMessage() {}\n        }\n      };\n    });\n    jest.mock(\"../Devtools/symbolicateStackTrace\", function () {\n      return function symbolicateStackTrace(stack) {\n        return _regeneratorRuntime.async(function symbolicateStackTrace$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", {\n                  stack: stack\n                });\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      };\n    });\n    jest.spyOn(console, 'error').mockImplementation(function () {});\n    ReactFiberErrorDialog = require(\"../ReactFiberErrorDialog\");\n    NativeExceptionsManager = require(\"../NativeExceptionsManager\").default;\n    nativeReportException = NativeExceptionsManager.reportException;\n    ExceptionsManager = require(\"../ExceptionsManager\");\n  });\n  afterEach(function () {\n    jest.restoreAllMocks();\n  });\n  describe('ReactFiberErrorDialog.showErrorDialog', function () {\n    test('forwards error instance to reportException', function () {\n      var error = new ReferenceError('Some error happened');\n      var message = error.message,\n          name = error.name;\n      var logToConsoleInReact = ReactFiberErrorDialog.showErrorDialog(_objectSpread(_objectSpread({}, capturedErrorDefaults), {}, {\n        error: error\n      }));\n      expect(nativeReportException.mock.calls.length).toBe(1);\n      var exceptionData = nativeReportException.mock.calls[0][0];\n      var formattedMessage = 'ReferenceError: ' + message + '\\n\\n' + 'This error is located at:' + capturedErrorDefaults.componentStack;\n      expect(exceptionData.message).toBe(formattedMessage);\n      expect(exceptionData.originalMessage).toBe(message);\n      expect(exceptionData.name).toBe(name);\n      expect(exceptionData.componentStack).toBe(capturedErrorDefaults.componentStack);\n      expect(getLineFromFrame(exceptionData.stack[0])).toBe(\"const error = new ReferenceError('Some error happened');\");\n      expect(exceptionData.isFatal).toBe(false);\n      expect(logToConsoleInReact).toBe(false);\n      expect(console.error).toBeCalledWith(formattedMessage);\n    });\n    test('does not pop frames off the stack with framesToPop', function () {\n      function createError() {\n        var error = new Error('Some error happened');\n        error.framesToPop = 1;\n        return error;\n      }\n\n      var error = createError();\n      ReactFiberErrorDialog.showErrorDialog(_objectSpread(_objectSpread({}, capturedErrorDefaults), {}, {\n        error: error\n      }));\n      expect(nativeReportException.mock.calls.length).toBe(1);\n      var exceptionData = nativeReportException.mock.calls[0][0];\n      expect(getLineFromFrame(exceptionData.stack[0])).toBe(\"const error = new Error('Some error happened');\");\n    });\n    test('adds the JS engine to the message', function () {\n      var error = new Error('Some error happened');\n      error.jsEngine = 'hermes';\n      var message = error.message,\n          jsEngine = error.jsEngine;\n      ReactFiberErrorDialog.showErrorDialog(_objectSpread(_objectSpread({}, capturedErrorDefaults), {}, {\n        error: error\n      }));\n      expect(nativeReportException.mock.calls.length).toBe(1);\n      var exceptionData = nativeReportException.mock.calls[0][0];\n      expect(exceptionData.message).toBe('Error: ' + message + '\\n\\n' + 'This error is located at:' + capturedErrorDefaults.componentStack + ', js engine: ' + jsEngine);\n      expect(console.error).toBeCalledWith('Error: ' + message + '\\n\\n' + 'This error is located at:' + capturedErrorDefaults.componentStack + ', js engine: ' + jsEngine);\n    });\n    test('wraps string in an Error and sends to handleException', function () {\n      var message = 'Some error happened';\n      var logToConsoleInReact = ReactFiberErrorDialog.showErrorDialog(_objectSpread(_objectSpread({}, capturedErrorDefaults), {}, {\n        error: message\n      }));\n      expect(nativeReportException.mock.calls.length).toBe(1);\n      var exceptionData = nativeReportException.mock.calls[0][0];\n      var formattedMessage = message + '\\n\\n' + 'This error is located at:' + capturedErrorDefaults.componentStack;\n      expect(exceptionData.message).toBe(formattedMessage);\n      expect(exceptionData.originalMessage).toBe(message);\n      expect(exceptionData.componentStack).toBe(capturedErrorDefaults.componentStack);\n      expect(exceptionData.stack[0].file).toMatch(/ReactFiberErrorDialog\\.js$/);\n      expect(exceptionData.isFatal).toBe(false);\n      expect(logToConsoleInReact).toBe(false);\n      expect(console.error).toBeCalledWith(formattedMessage);\n    });\n    test('reports \"Unspecified error\" if error is null', function () {\n      var logToConsoleInReact = ReactFiberErrorDialog.showErrorDialog(_objectSpread(_objectSpread({}, capturedErrorDefaults), {}, {\n        error: null\n      }));\n      expect(nativeReportException.mock.calls.length).toBe(1);\n      var exceptionData = nativeReportException.mock.calls[0][0];\n      var formattedMessage = 'Unspecified error' + '\\n\\n' + 'This error is located at:' + capturedErrorDefaults.componentStack;\n      expect(exceptionData.message).toBe(formattedMessage);\n      expect(exceptionData.originalMessage).toBe('Unspecified error');\n      expect(exceptionData.name).toBe(null);\n      expect(exceptionData.componentStack).toBe(capturedErrorDefaults.componentStack);\n      expect(exceptionData.stack[0].file).toMatch(/ReactFiberErrorDialog\\.js$/);\n      expect(exceptionData.isFatal).toBe(false);\n      expect(logToConsoleInReact).toBe(false);\n      expect(console.error).toBeCalledWith(formattedMessage);\n    });\n    test('works with a frozen error object', function () {\n      var error = Object.freeze(new Error('Some error happened'));\n      ReactFiberErrorDialog.showErrorDialog(_objectSpread(_objectSpread({}, capturedErrorDefaults), {}, {\n        error: error\n      }));\n      expect(nativeReportException.mock.calls.length).toBe(1);\n      var exceptionData = nativeReportException.mock.calls[0][0];\n      expect(getLineFromFrame(exceptionData.stack[0])).toBe(\"const error = Object.freeze(new Error('Some error happened'));\");\n    });\n    test('does not mutate the message', function () {\n      var error = new ReferenceError('Some error happened');\n      var message = error.message;\n      ReactFiberErrorDialog.showErrorDialog(_objectSpread(_objectSpread({}, capturedErrorDefaults), {}, {\n        error: error\n      }));\n      expect(nativeReportException).toHaveBeenCalled();\n      expect(error.message).toBe(message);\n    });\n    test('can safely process the same error multiple times', function () {\n      var error = new ReferenceError('Some error happened');\n      var message = error.message;\n      var componentStacks = ['\\n  in A\\n  in B\\n  in C', '\\n  in X\\n  in Y\\n  in Z'];\n\n      for (var _i = 0, _componentStacks = componentStacks; _i < _componentStacks.length; _i++) {\n        var componentStack = _componentStacks[_i];\n        nativeReportException.mockClear();\n        var formattedMessage = 'ReferenceError: ' + message + '\\n\\n' + 'This error is located at:' + componentStack;\n        var logToConsoleInReact = ReactFiberErrorDialog.showErrorDialog(_objectSpread(_objectSpread({}, capturedErrorDefaults), {}, {\n          componentStack: componentStack,\n          error: error\n        }));\n        expect(nativeReportException.mock.calls.length).toBe(1);\n        var exceptionData = nativeReportException.mock.calls[0][0];\n        expect(exceptionData.message).toBe(formattedMessage);\n        expect(exceptionData.originalMessage).toBe(message);\n        expect(exceptionData.componentStack).toBe(componentStack);\n        expect(getLineFromFrame(exceptionData.stack[0])).toBe(\"const error = new ReferenceError('Some error happened');\");\n        expect(exceptionData.isFatal).toBe(false);\n        expect(logToConsoleInReact).toBe(false);\n        expect(console.error).toBeCalledWith(formattedMessage);\n      }\n    });\n  });\n  describe('console.error handler', function () {\n    var mockError;\n    beforeEach(function () {\n      mockError = console.error;\n      ExceptionsManager.installConsoleErrorReporter();\n    });\n    afterEach(function () {\n      console.error = console._errorOriginal;\n      delete console._errorOriginal;\n      delete console.reportErrorsAsExceptions;\n    });\n    test('logging an Error', function () {\n      var error = new Error('Some error happened');\n      var message = error.message,\n          name = error.name;\n      console.error(error);\n      expect(nativeReportException.mock.calls.length).toBe(1);\n      var exceptionData = nativeReportException.mock.calls[0][0];\n      var formattedMessage = 'Error: ' + message;\n      expect(exceptionData.message).toBe(formattedMessage);\n      expect(exceptionData.originalMessage).toBe(message);\n      expect(exceptionData.name).toBe(name);\n      expect(getLineFromFrame(exceptionData.stack[0])).toBe(\"const error = new Error('Some error happened');\");\n      expect(exceptionData.isFatal).toBe(false);\n      expect(mockError.mock.calls[0]).toHaveLength(1);\n      expect(mockError.mock.calls[0][0]).toBeInstanceOf(Error);\n      expect(mockError.mock.calls[0][0].toString()).toBe(formattedMessage);\n    });\n    test('logging a string', function () {\n      var message = 'Some error happened';\n      console.error(message);\n      expect(nativeReportException.mock.calls.length).toBe(1);\n      var exceptionData = nativeReportException.mock.calls[0][0];\n      expect(exceptionData.message).toBe('console.error: Some error happened');\n      expect(exceptionData.originalMessage).toBe('Some error happened');\n      expect(exceptionData.name).toBe('console.error');\n      expect(getLineFromFrame(getFirstFrameInThisFile(exceptionData.stack))).toBe('console.error(message);');\n      expect(exceptionData.isFatal).toBe(false);\n      expect(mockError.mock.calls[0]).toEqual([message]);\n    });\n    test('logging arbitrary arguments', function () {\n      var _console;\n\n      var args = [42, true, Symbol(), {\n        x: undefined,\n        y: null\n      }];\n\n      (_console = console).error.apply(_console, args);\n\n      expect(nativeReportException.mock.calls.length).toBe(1);\n      var exceptionData = nativeReportException.mock.calls[0][0];\n      expect(exceptionData.message).toBe('console.error: 42 true [\"symbol\" failed to stringify] {\"y\":null}');\n      expect(exceptionData.originalMessage).toBe('42 true [\"symbol\" failed to stringify] {\"y\":null}');\n      expect(exceptionData.name).toBe('console.error');\n      expect(getLineFromFrame(getFirstFrameInThisFile(exceptionData.stack))).toBe('console.error(...args);');\n      expect(exceptionData.isFatal).toBe(false);\n      expect(mockError).toHaveBeenCalledTimes(1);\n      expect(mockError.mock.calls[0]).toHaveLength(args.length);\n\n      for (var i = 0; i < args.length; ++i) {\n        expect(mockError.mock.calls[0][i]).toBe(args[i]);\n      }\n    });\n    test('logging a warning', function () {\n      var message = 'Warning: Some mild issue happened';\n      console.error(message);\n      expect(nativeReportException).not.toHaveBeenCalled();\n      expect(mockError.mock.calls[0]).toEqual([message]);\n    });\n    test('logging a warning with more arguments', function () {\n      var _console2;\n\n      var args = ['Warning: Some mild issue happened', 42];\n\n      (_console2 = console).error.apply(_console2, args);\n\n      expect(nativeReportException).not.toHaveBeenCalled();\n      expect(mockError.mock.calls[0]).toEqual(args);\n    });\n    test('reportErrorsAsExceptions = false', function () {\n      console.reportErrorsAsExceptions = false;\n      var message = 'Some error happened';\n      console.error(message);\n      expect(nativeReportException).not.toHaveBeenCalled();\n      expect(mockError.mock.calls[0]).toEqual([message]);\n    });\n    test('does not pop frames off the stack with framesToPop', function () {\n      function createError() {\n        var error = new Error('Some error happened');\n        error.framesToPop = 1;\n        return error;\n      }\n\n      var error = createError();\n      console.error(error);\n      expect(nativeReportException.mock.calls.length).toBe(1);\n      var exceptionData = nativeReportException.mock.calls[0][0];\n      expect(getLineFromFrame(exceptionData.stack[0])).toBe(\"const error = new Error('Some error happened');\");\n    });\n  });\n  describe('handleException', function () {\n    test('handling a fatal Error', function () {\n      var error = new Error('Some error happened');\n      var message = error.message;\n      ExceptionsManager.handleException(error, true);\n      expect(nativeReportException.mock.calls.length).toBe(1);\n      var exceptionData = nativeReportException.mock.calls[0][0];\n      var formattedMessage = 'Error: ' + message;\n      expect(exceptionData.message).toBe(formattedMessage);\n      expect(exceptionData.originalMessage).toBe(message);\n      expect(exceptionData.name).toBe('Error');\n      expect(getLineFromFrame(exceptionData.stack[0])).toBe(\"const error = new Error('Some error happened');\");\n      expect(exceptionData.isFatal).toBe(true);\n      expect(console.error.mock.calls[0]).toHaveLength(1);\n      expect(console.error.mock.calls[0][0]).toBe(formattedMessage);\n    });\n    test('handling a non-fatal Error', function () {\n      var error = new Error('Some error happened');\n      var message = error.message;\n      ExceptionsManager.handleException(error, false);\n      expect(nativeReportException.mock.calls.length).toBe(1);\n      var exceptionData = nativeReportException.mock.calls[0][0];\n      var formattedMessage = 'Error: ' + message;\n      expect(exceptionData.message).toBe(formattedMessage);\n      expect(exceptionData.originalMessage).toBe(message);\n      expect(exceptionData.name).toBe('Error');\n      expect(getLineFromFrame(exceptionData.stack[0])).toBe(\"const error = new Error('Some error happened');\");\n      expect(exceptionData.isFatal).toBe(false);\n      expect(console.error.mock.calls[0]).toHaveLength(1);\n      expect(console.error.mock.calls[0][0]).toBe(formattedMessage);\n    });\n    test('handling a thrown string', function () {\n      var message = 'Some error happened';\n      ExceptionsManager.handleException(message, true);\n      expect(nativeReportException.mock.calls.length).toBe(1);\n      var exceptionData = nativeReportException.mock.calls[0][0];\n      expect(exceptionData.message).toBe(message);\n      expect(exceptionData.originalMessage).toBe(null);\n      expect(exceptionData.name).toBe(null);\n      expect(exceptionData.stack[0].file).toMatch(/ExceptionsManager\\.js$/);\n      expect(exceptionData.isFatal).toBe(true);\n      expect(console.error.mock.calls[0]).toEqual([message]);\n    });\n    test('does not pop frames off the stack with framesToPop', function () {\n      function createError() {\n        var error = new Error('Some error happened');\n        error.framesToPop = 1;\n        return error;\n      }\n\n      var error = createError();\n      ExceptionsManager.handleException(error, true);\n      expect(nativeReportException.mock.calls.length).toBe(1);\n      var exceptionData = nativeReportException.mock.calls[0][0];\n      expect(getLineFromFrame(exceptionData.stack[0])).toBe(\"const error = new Error('Some error happened');\");\n    });\n  });\n  describe('unstable_setExceptionDecorator', function () {\n    var mockError;\n    beforeEach(function () {\n      mockError = console.error;\n      ExceptionsManager.installConsoleErrorReporter();\n    });\n    afterEach(function () {\n      console.error = console._errorOriginal;\n      delete console._errorOriginal;\n      delete console.reportErrorsAsExceptions;\n    });\n    test('modifying the exception data', function () {\n      var error = new Error('Some error happened');\n      var decorator = jest.fn().mockImplementation(function (data) {\n        return _objectSpread(_objectSpread({}, data), {}, {\n          message: 'decorated: ' + data.message\n        });\n      });\n      ExceptionsManager.handleException(error, true);\n      ExceptionsManager.unstable_setExceptionDecorator(decorator);\n      ExceptionsManager.handleException(error, true);\n      expect(nativeReportException.mock.calls.length).toBe(2);\n      expect(decorator.mock.calls.length).toBe(1);\n      var withoutDecoratorInstalled = nativeReportException.mock.calls[0][0];\n      var afterDecorator = nativeReportException.mock.calls[1][0];\n      var beforeDecorator = decorator.mock.calls[0][0];\n      expect(afterDecorator.id).toEqual(beforeDecorator.id);\n      delete withoutDecoratorInstalled.id;\n      delete beforeDecorator.id;\n      delete afterDecorator.id;\n      expect(withoutDecoratorInstalled).toEqual(beforeDecorator);\n      expect(afterDecorator).toEqual(_objectSpread(_objectSpread({}, beforeDecorator), {}, {\n        message: 'decorated: ' + beforeDecorator.message\n      }));\n    });\n    test('clearing a decorator', function () {\n      var error = new Error('Some error happened');\n      var decorator = jest.fn().mockImplementation(function (data) {\n        return _objectSpread(_objectSpread({}, data), {}, {\n          message: 'decorated: ' + data.message\n        });\n      });\n      ExceptionsManager.unstable_setExceptionDecorator(decorator);\n      ExceptionsManager.unstable_setExceptionDecorator(null);\n      ExceptionsManager.handleException(error, true);\n      expect(decorator).not.toHaveBeenCalled();\n      expect(nativeReportException).toHaveBeenCalled();\n    });\n    test('prevents decorator recursion from error handler', function () {\n      var error = new Error('Some error happened');\n      var decorator = jest.fn().mockImplementation(function (data) {\n        console.error('Logging an error within the decorator');\n        return _objectSpread(_objectSpread({}, data), {}, {\n          message: 'decorated: ' + data.message\n        });\n      });\n      ExceptionsManager.unstable_setExceptionDecorator(decorator);\n      ExceptionsManager.handleException(error, true);\n      expect(nativeReportException).toHaveBeenCalledTimes(1);\n      expect(nativeReportException.mock.calls[0][0].message).toMatch(/decorated: .*Some error happened/);\n      expect(mockError).toHaveBeenCalledTimes(2);\n      expect(mockError.mock.calls[0][0]).toMatch(/Logging an error within the decorator/);\n      expect(mockError.mock.calls[1][0]).toMatch(/decorated: .*Some error happened/);\n    });\n    test('prevents decorator recursion from console.error', function () {\n      var error = new Error('Some error happened');\n      var decorator = jest.fn().mockImplementation(function (data) {\n        console.error('Logging an error within the decorator');\n        return _objectSpread(_objectSpread({}, data), {}, {\n          message: 'decorated: ' + data.message\n        });\n      });\n      ExceptionsManager.unstable_setExceptionDecorator(decorator);\n      console.error(error);\n      expect(nativeReportException).toHaveBeenCalledTimes(2);\n      expect(nativeReportException.mock.calls[0][0].message).toMatch(/Logging an error within the decorator/);\n      expect(nativeReportException.mock.calls[1][0].message).toMatch(/decorated: .*Some error happened/);\n      expect(mockError).toHaveBeenCalledTimes(2);\n      expect(mockError.mock.calls[0][0].toString()).toMatch(/Error: Some error happened/);\n      expect(mockError.mock.calls[1][0]).toMatch(/Logging an error within the decorator/);\n    });\n    test('can handle throwing decorators recursion when exception is thrown', function () {\n      var error = new Error('Some error happened');\n      var decorator = jest.fn().mockImplementation(function (data) {\n        throw new Error('Throwing an error within the decorator');\n      });\n      ExceptionsManager.unstable_setExceptionDecorator(decorator);\n      ExceptionsManager.handleException(error, true);\n      expect(nativeReportException).toHaveBeenCalledTimes(1);\n      expect(nativeReportException.mock.calls[0][0].message).toMatch(/Error: Some error happened/);\n      expect(mockError).toHaveBeenCalledTimes(1);\n      expect(mockError.mock.calls[0][0]).toMatch(/Error: Some error happened/);\n    });\n    test('can handle throwing decorators recursion when exception is logged', function () {\n      var error = new Error('Some error happened');\n      var decorator = jest.fn().mockImplementation(function (data) {\n        throw new Error('Throwing an error within the decorator');\n      });\n      ExceptionsManager.unstable_setExceptionDecorator(decorator);\n      console.error(error);\n      expect(nativeReportException).toHaveBeenCalledTimes(1);\n      expect(nativeReportException.mock.calls[0][0].message).toMatch(/Error: Some error happened/);\n      expect(mockError).toHaveBeenCalledTimes(1);\n      expect(mockError.mock.calls[0][0].toString()).toMatch(/Error: Some error happened/);\n    });\n  });\n});\nvar linesByFile = new Map();\n\nfunction getLineFromFrame(_ref) {\n  var lineNumber = _ref.lineNumber,\n      file = _ref.file;\n\n  if (file == null) {\n    return null;\n  }\n\n  var cleanedFile = cleanFileName(file);\n  var lines = linesByFile.get(cleanedFile) || fs.readFileSync(cleanedFile, 'utf8').split('\\n');\n\n  if (!linesByFile.has(cleanedFile)) {\n    linesByFile.set(cleanedFile, lines);\n  }\n\n  return (lines[lineNumber - 1] || '').trim();\n}\n\nfunction getFirstFrameInThisFile(stack) {\n  return stack.find(function (_ref2) {\n    var file = _ref2.file;\n    return file.endsWith(path.basename(module.filename));\n  });\n}\n\nfunction cleanFileName(file) {\n  return file.replace(/^.+? \\((?=\\/)/, '');\n}","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Core/__tests__/ExceptionsManager-test.js"],"names":["fs","require","path","capturedErrorDefaults","componentName","componentStack","errorBoundary","errorBoundaryFound","errorBoundaryName","willRetry","describe","ReactFiberErrorDialog","ExceptionsManager","NativeExceptionsManager","nativeReportException","beforeEach","jest","resetModules","mock","default","reportException","fn","updateExceptionMessage","symbolicateStackTrace","stack","spyOn","console","mockImplementation","afterEach","restoreAllMocks","test","error","ReferenceError","message","name","logToConsoleInReact","showErrorDialog","expect","calls","length","toBe","exceptionData","formattedMessage","originalMessage","getLineFromFrame","isFatal","toBeCalledWith","createError","Error","framesToPop","jsEngine","file","toMatch","Object","freeze","toHaveBeenCalled","componentStacks","mockClear","mockError","installConsoleErrorReporter","_errorOriginal","reportErrorsAsExceptions","toHaveLength","toBeInstanceOf","toString","getFirstFrameInThisFile","toEqual","args","Symbol","x","undefined","y","toHaveBeenCalledTimes","i","not","handleException","decorator","data","unstable_setExceptionDecorator","withoutDecoratorInstalled","afterDecorator","beforeDecorator","id","linesByFile","Map","lineNumber","cleanedFile","cleanFileName","lines","get","readFileSync","split","has","set","trim","find","endsWith","basename","module","filename","replace"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @emails oncall+react_native\n */\n\n'use strict';\n\nconst fs = require('fs');\nconst path = require('path');\n\nconst capturedErrorDefaults = {\n  componentName: 'A',\n  componentStack: '\\n  in A\\n  in B\\n  in C',\n  errorBoundary: null,\n  errorBoundaryFound: false,\n  errorBoundaryName: null,\n  willRetry: false,\n};\n\ndescribe('ExceptionsManager', () => {\n  let ReactFiberErrorDialog,\n    ExceptionsManager,\n    NativeExceptionsManager,\n    nativeReportException;\n  beforeEach(() => {\n    jest.resetModules();\n    jest.mock('../NativeExceptionsManager', () => {\n      return {\n        default: {\n          reportException: jest.fn(),\n          // Used to show symbolicated messages, not part of this test.\n          updateExceptionMessage: () => {},\n        },\n      };\n    });\n    // Make symbolication a no-op.\n    jest.mock(\n      '../Devtools/symbolicateStackTrace',\n      () =>\n        async function symbolicateStackTrace(stack) {\n          return {stack};\n        },\n    );\n    jest.spyOn(console, 'error').mockImplementation(() => {});\n    ReactFiberErrorDialog = require('../ReactFiberErrorDialog');\n    NativeExceptionsManager = require('../NativeExceptionsManager').default;\n    nativeReportException = NativeExceptionsManager.reportException;\n    ExceptionsManager = require('../ExceptionsManager');\n  });\n\n  afterEach(() => {\n    jest.restoreAllMocks();\n  });\n\n  describe('ReactFiberErrorDialog.showErrorDialog', () => {\n    test('forwards error instance to reportException', () => {\n      const error = new ReferenceError('Some error happened');\n      // Copy all the data we care about before any possible mutation.\n      const {message, name} = error;\n\n      const logToConsoleInReact = ReactFiberErrorDialog.showErrorDialog({\n        ...capturedErrorDefaults,\n        error,\n      });\n\n      expect(nativeReportException.mock.calls.length).toBe(1);\n      const exceptionData = nativeReportException.mock.calls[0][0];\n      const formattedMessage =\n        'ReferenceError: ' +\n        message +\n        '\\n\\n' +\n        'This error is located at:' +\n        capturedErrorDefaults.componentStack;\n      expect(exceptionData.message).toBe(formattedMessage);\n      expect(exceptionData.originalMessage).toBe(message);\n      expect(exceptionData.name).toBe(name);\n      expect(exceptionData.componentStack).toBe(\n        capturedErrorDefaults.componentStack,\n      );\n      expect(getLineFromFrame(exceptionData.stack[0])).toBe(\n        \"const error = new ReferenceError('Some error happened');\",\n      );\n      expect(exceptionData.isFatal).toBe(false);\n      expect(logToConsoleInReact).toBe(false);\n      expect(console.error).toBeCalledWith(formattedMessage);\n    });\n\n    test('does not pop frames off the stack with framesToPop', () => {\n      function createError() {\n        const error = new Error('Some error happened');\n        error.framesToPop = 1;\n        return error;\n      }\n      const error = createError();\n\n      ReactFiberErrorDialog.showErrorDialog({\n        ...capturedErrorDefaults,\n        error,\n      });\n\n      expect(nativeReportException.mock.calls.length).toBe(1);\n      const exceptionData = nativeReportException.mock.calls[0][0];\n      expect(getLineFromFrame(exceptionData.stack[0])).toBe(\n        \"const error = new Error('Some error happened');\",\n      );\n    });\n\n    test('adds the JS engine to the message', () => {\n      const error = new Error('Some error happened');\n      error.jsEngine = 'hermes';\n      // Copy all the data we care about before any possible mutation.\n      const {message, jsEngine} = error;\n\n      ReactFiberErrorDialog.showErrorDialog({\n        ...capturedErrorDefaults,\n        error,\n      });\n\n      expect(nativeReportException.mock.calls.length).toBe(1);\n      const exceptionData = nativeReportException.mock.calls[0][0];\n      expect(exceptionData.message).toBe(\n        'Error: ' +\n          message +\n          '\\n\\n' +\n          'This error is located at:' +\n          capturedErrorDefaults.componentStack +\n          ', js engine: ' +\n          jsEngine,\n      );\n      expect(console.error).toBeCalledWith(\n        'Error: ' +\n          message +\n          '\\n\\n' +\n          'This error is located at:' +\n          capturedErrorDefaults.componentStack +\n          ', js engine: ' +\n          jsEngine,\n      );\n    });\n\n    test('wraps string in an Error and sends to handleException', () => {\n      const message = 'Some error happened';\n\n      const logToConsoleInReact = ReactFiberErrorDialog.showErrorDialog({\n        ...capturedErrorDefaults,\n        error: message,\n      });\n\n      expect(nativeReportException.mock.calls.length).toBe(1);\n      const exceptionData = nativeReportException.mock.calls[0][0];\n      const formattedMessage =\n        message +\n        '\\n\\n' +\n        'This error is located at:' +\n        capturedErrorDefaults.componentStack;\n      expect(exceptionData.message).toBe(formattedMessage);\n      expect(exceptionData.originalMessage).toBe(message);\n      expect(exceptionData.componentStack).toBe(\n        capturedErrorDefaults.componentStack,\n      );\n      expect(exceptionData.stack[0].file).toMatch(/ReactFiberErrorDialog\\.js$/);\n      expect(exceptionData.isFatal).toBe(false);\n      expect(logToConsoleInReact).toBe(false);\n      expect(console.error).toBeCalledWith(formattedMessage);\n    });\n\n    test('reports \"Unspecified error\" if error is null', () => {\n      const logToConsoleInReact = ReactFiberErrorDialog.showErrorDialog({\n        ...capturedErrorDefaults,\n        error: null,\n      });\n\n      expect(nativeReportException.mock.calls.length).toBe(1);\n      const exceptionData = nativeReportException.mock.calls[0][0];\n      const formattedMessage =\n        'Unspecified error' +\n        '\\n\\n' +\n        'This error is located at:' +\n        capturedErrorDefaults.componentStack;\n      expect(exceptionData.message).toBe(formattedMessage);\n      expect(exceptionData.originalMessage).toBe('Unspecified error');\n      expect(exceptionData.name).toBe(null);\n      expect(exceptionData.componentStack).toBe(\n        capturedErrorDefaults.componentStack,\n      );\n      expect(exceptionData.stack[0].file).toMatch(/ReactFiberErrorDialog\\.js$/);\n      expect(exceptionData.isFatal).toBe(false);\n      expect(logToConsoleInReact).toBe(false);\n      expect(console.error).toBeCalledWith(formattedMessage);\n    });\n\n    test('works with a frozen error object', () => {\n      const error = Object.freeze(new Error('Some error happened'));\n\n      ReactFiberErrorDialog.showErrorDialog({\n        ...capturedErrorDefaults,\n        error,\n      });\n\n      expect(nativeReportException.mock.calls.length).toBe(1);\n      const exceptionData = nativeReportException.mock.calls[0][0];\n      expect(getLineFromFrame(exceptionData.stack[0])).toBe(\n        \"const error = Object.freeze(new Error('Some error happened'));\",\n      );\n    });\n\n    test('does not mutate the message', () => {\n      const error = new ReferenceError('Some error happened');\n      const {message} = error;\n\n      ReactFiberErrorDialog.showErrorDialog({\n        ...capturedErrorDefaults,\n        error,\n      });\n\n      expect(nativeReportException).toHaveBeenCalled();\n      expect(error.message).toBe(message);\n    });\n\n    test('can safely process the same error multiple times', () => {\n      const error = new ReferenceError('Some error happened');\n      // Copy all the data we care about before any possible mutation.\n      const {message} = error;\n      const componentStacks = [\n        '\\n  in A\\n  in B\\n  in C',\n        '\\n  in X\\n  in Y\\n  in Z',\n      ];\n      for (const componentStack of componentStacks) {\n        nativeReportException.mockClear();\n        const formattedMessage =\n          'ReferenceError: ' +\n          message +\n          '\\n\\n' +\n          'This error is located at:' +\n          componentStack;\n        const logToConsoleInReact = ReactFiberErrorDialog.showErrorDialog({\n          ...capturedErrorDefaults,\n          componentStack,\n          error,\n        });\n\n        expect(nativeReportException.mock.calls.length).toBe(1);\n        const exceptionData = nativeReportException.mock.calls[0][0];\n        expect(exceptionData.message).toBe(formattedMessage);\n        expect(exceptionData.originalMessage).toBe(message);\n        expect(exceptionData.componentStack).toBe(componentStack);\n        expect(getLineFromFrame(exceptionData.stack[0])).toBe(\n          \"const error = new ReferenceError('Some error happened');\",\n        );\n        expect(exceptionData.isFatal).toBe(false);\n        expect(logToConsoleInReact).toBe(false);\n        expect(console.error).toBeCalledWith(formattedMessage);\n      }\n    });\n  });\n\n  describe('console.error handler', () => {\n    let mockError;\n    beforeEach(() => {\n      // NOTE: We initialise a fresh mock every time using spyOn, above.\n      // We can't use `console._errorOriginal` for this, because that's a bound\n      // (=wrapped) version of the mock and Jest does not approve.\n      mockError = console.error;\n      ExceptionsManager.installConsoleErrorReporter();\n    });\n\n    afterEach(() => {\n      // There is no uninstallConsoleErrorReporter. Do this so the next install\n      // works.\n      console.error = console._errorOriginal;\n      delete console._errorOriginal;\n      delete console.reportErrorsAsExceptions;\n    });\n\n    test('logging an Error', () => {\n      const error = new Error('Some error happened');\n      const {message, name} = error;\n\n      console.error(error);\n\n      expect(nativeReportException.mock.calls.length).toBe(1);\n      const exceptionData = nativeReportException.mock.calls[0][0];\n      const formattedMessage = 'Error: ' + message;\n      expect(exceptionData.message).toBe(formattedMessage);\n      expect(exceptionData.originalMessage).toBe(message);\n      expect(exceptionData.name).toBe(name);\n      expect(getLineFromFrame(exceptionData.stack[0])).toBe(\n        \"const error = new Error('Some error happened');\",\n      );\n      expect(exceptionData.isFatal).toBe(false);\n      expect(mockError.mock.calls[0]).toHaveLength(1);\n      expect(mockError.mock.calls[0][0]).toBeInstanceOf(Error);\n      expect(mockError.mock.calls[0][0].toString()).toBe(formattedMessage);\n    });\n\n    test('logging a string', () => {\n      const message = 'Some error happened';\n\n      console.error(message);\n\n      expect(nativeReportException.mock.calls.length).toBe(1);\n      const exceptionData = nativeReportException.mock.calls[0][0];\n      expect(exceptionData.message).toBe('console.error: Some error happened');\n      expect(exceptionData.originalMessage).toBe('Some error happened');\n      expect(exceptionData.name).toBe('console.error');\n      expect(\n        getLineFromFrame(getFirstFrameInThisFile(exceptionData.stack)),\n      ).toBe('console.error(message);');\n      expect(exceptionData.isFatal).toBe(false);\n      expect(mockError.mock.calls[0]).toEqual([message]);\n    });\n\n    test('logging arbitrary arguments', () => {\n      const args = [42, true, Symbol(), {x: undefined, y: null}];\n\n      console.error(...args);\n\n      expect(nativeReportException.mock.calls.length).toBe(1);\n      const exceptionData = nativeReportException.mock.calls[0][0];\n      expect(exceptionData.message).toBe(\n        'console.error: 42 true [\"symbol\" failed to stringify] {\"y\":null}',\n      );\n      expect(exceptionData.originalMessage).toBe(\n        '42 true [\"symbol\" failed to stringify] {\"y\":null}',\n      );\n      expect(exceptionData.name).toBe('console.error');\n      expect(\n        getLineFromFrame(getFirstFrameInThisFile(exceptionData.stack)),\n      ).toBe('console.error(...args);');\n      expect(exceptionData.isFatal).toBe(false);\n\n      expect(mockError).toHaveBeenCalledTimes(1);\n      // Shallowly compare the mock call arguments with `args`\n      expect(mockError.mock.calls[0]).toHaveLength(args.length);\n      for (let i = 0; i < args.length; ++i) {\n        expect(mockError.mock.calls[0][i]).toBe(args[i]);\n      }\n    });\n\n    test('logging a warning', () => {\n      const message = 'Warning: Some mild issue happened';\n\n      console.error(message);\n\n      expect(nativeReportException).not.toHaveBeenCalled();\n      expect(mockError.mock.calls[0]).toEqual([message]);\n    });\n\n    test('logging a warning with more arguments', () => {\n      const args = ['Warning: Some mild issue happened', 42];\n\n      console.error(...args);\n\n      expect(nativeReportException).not.toHaveBeenCalled();\n      expect(mockError.mock.calls[0]).toEqual(args);\n    });\n\n    test('reportErrorsAsExceptions = false', () => {\n      console.reportErrorsAsExceptions = false;\n      const message = 'Some error happened';\n\n      console.error(message);\n\n      expect(nativeReportException).not.toHaveBeenCalled();\n      expect(mockError.mock.calls[0]).toEqual([message]);\n    });\n\n    test('does not pop frames off the stack with framesToPop', () => {\n      function createError() {\n        const error = new Error('Some error happened');\n        error.framesToPop = 1;\n        return error;\n      }\n      const error = createError();\n\n      console.error(error);\n\n      expect(nativeReportException.mock.calls.length).toBe(1);\n      const exceptionData = nativeReportException.mock.calls[0][0];\n      expect(getLineFromFrame(exceptionData.stack[0])).toBe(\n        \"const error = new Error('Some error happened');\",\n      );\n    });\n  });\n\n  describe('handleException', () => {\n    test('handling a fatal Error', () => {\n      const error = new Error('Some error happened');\n      const {message} = error;\n\n      ExceptionsManager.handleException(error, true);\n\n      expect(nativeReportException.mock.calls.length).toBe(1);\n      const exceptionData = nativeReportException.mock.calls[0][0];\n      const formattedMessage = 'Error: ' + message;\n      expect(exceptionData.message).toBe(formattedMessage);\n      expect(exceptionData.originalMessage).toBe(message);\n      expect(exceptionData.name).toBe('Error');\n      expect(getLineFromFrame(exceptionData.stack[0])).toBe(\n        \"const error = new Error('Some error happened');\",\n      );\n      expect(exceptionData.isFatal).toBe(true);\n      expect(console.error.mock.calls[0]).toHaveLength(1);\n      expect(console.error.mock.calls[0][0]).toBe(formattedMessage);\n    });\n\n    test('handling a non-fatal Error', () => {\n      const error = new Error('Some error happened');\n      const {message} = error;\n\n      ExceptionsManager.handleException(error, false);\n\n      expect(nativeReportException.mock.calls.length).toBe(1);\n      const exceptionData = nativeReportException.mock.calls[0][0];\n      const formattedMessage = 'Error: ' + message;\n      expect(exceptionData.message).toBe(formattedMessage);\n      expect(exceptionData.originalMessage).toBe(message);\n      expect(exceptionData.name).toBe('Error');\n      expect(getLineFromFrame(exceptionData.stack[0])).toBe(\n        \"const error = new Error('Some error happened');\",\n      );\n      expect(exceptionData.isFatal).toBe(false);\n      expect(console.error.mock.calls[0]).toHaveLength(1);\n      expect(console.error.mock.calls[0][0]).toBe(formattedMessage);\n    });\n\n    test('handling a thrown string', () => {\n      const message = 'Some error happened';\n\n      ExceptionsManager.handleException(message, true);\n\n      expect(nativeReportException.mock.calls.length).toBe(1);\n      const exceptionData = nativeReportException.mock.calls[0][0];\n      expect(exceptionData.message).toBe(message);\n      expect(exceptionData.originalMessage).toBe(null);\n      expect(exceptionData.name).toBe(null);\n      expect(exceptionData.stack[0].file).toMatch(/ExceptionsManager\\.js$/);\n      expect(exceptionData.isFatal).toBe(true);\n      expect(console.error.mock.calls[0]).toEqual([message]);\n    });\n\n    test('does not pop frames off the stack with framesToPop', () => {\n      function createError() {\n        const error = new Error('Some error happened');\n        error.framesToPop = 1;\n        return error;\n      }\n      const error = createError();\n\n      ExceptionsManager.handleException(error, true);\n\n      expect(nativeReportException.mock.calls.length).toBe(1);\n      const exceptionData = nativeReportException.mock.calls[0][0];\n      expect(getLineFromFrame(exceptionData.stack[0])).toBe(\n        \"const error = new Error('Some error happened');\",\n      );\n    });\n  });\n\n  describe('unstable_setExceptionDecorator', () => {\n    let mockError;\n    beforeEach(() => {\n      // NOTE: We initialise a fresh mock every time using spyOn, above.\n      // We can't use `console._errorOriginal` for this, because that's a bound\n      // (=wrapped) version of the mock and Jest does not approve.\n      mockError = console.error;\n      ExceptionsManager.installConsoleErrorReporter();\n    });\n\n    afterEach(() => {\n      // There is no uninstallConsoleErrorReporter. Do this so the next install\n      // works.\n      console.error = console._errorOriginal;\n      delete console._errorOriginal;\n      delete console.reportErrorsAsExceptions;\n    });\n\n    test('modifying the exception data', () => {\n      const error = new Error('Some error happened');\n      const decorator = jest.fn().mockImplementation(data => ({\n        ...data,\n        message: 'decorated: ' + data.message,\n      }));\n\n      // Report the same exception with and without the decorator\n      ExceptionsManager.handleException(error, true);\n      ExceptionsManager.unstable_setExceptionDecorator(decorator);\n      ExceptionsManager.handleException(error, true);\n\n      expect(nativeReportException.mock.calls.length).toBe(2);\n      expect(decorator.mock.calls.length).toBe(1);\n\n      const withoutDecoratorInstalled = nativeReportException.mock.calls[0][0];\n      const afterDecorator = nativeReportException.mock.calls[1][0];\n      const beforeDecorator = decorator.mock.calls[0][0];\n\n      expect(afterDecorator.id).toEqual(beforeDecorator.id);\n\n      // id will change between successive exceptions\n      delete withoutDecoratorInstalled.id;\n      delete beforeDecorator.id;\n      delete afterDecorator.id;\n\n      expect(withoutDecoratorInstalled).toEqual(beforeDecorator);\n      expect(afterDecorator).toEqual({\n        ...beforeDecorator,\n        message: 'decorated: ' + beforeDecorator.message,\n      });\n    });\n\n    test('clearing a decorator', () => {\n      const error = new Error('Some error happened');\n      const decorator = jest.fn().mockImplementation(data => ({\n        ...data,\n        message: 'decorated: ' + data.message,\n      }));\n\n      ExceptionsManager.unstable_setExceptionDecorator(decorator);\n      ExceptionsManager.unstable_setExceptionDecorator(null);\n      ExceptionsManager.handleException(error, true);\n\n      expect(decorator).not.toHaveBeenCalled();\n      expect(nativeReportException).toHaveBeenCalled();\n    });\n\n    test('prevents decorator recursion from error handler', () => {\n      const error = new Error('Some error happened');\n      const decorator = jest.fn().mockImplementation(data => {\n        console.error('Logging an error within the decorator');\n        return {\n          ...data,\n          message: 'decorated: ' + data.message,\n        };\n      });\n\n      ExceptionsManager.unstable_setExceptionDecorator(decorator);\n      ExceptionsManager.handleException(error, true);\n\n      expect(nativeReportException).toHaveBeenCalledTimes(1);\n      expect(nativeReportException.mock.calls[0][0].message).toMatch(\n        /decorated: .*Some error happened/,\n      );\n      expect(mockError).toHaveBeenCalledTimes(2);\n      expect(mockError.mock.calls[0][0]).toMatch(\n        /Logging an error within the decorator/,\n      );\n      expect(mockError.mock.calls[1][0]).toMatch(\n        /decorated: .*Some error happened/,\n      );\n    });\n\n    test('prevents decorator recursion from console.error', () => {\n      const error = new Error('Some error happened');\n      const decorator = jest.fn().mockImplementation(data => {\n        console.error('Logging an error within the decorator');\n        return {\n          ...data,\n          message: 'decorated: ' + data.message,\n        };\n      });\n\n      ExceptionsManager.unstable_setExceptionDecorator(decorator);\n      console.error(error);\n\n      expect(nativeReportException).toHaveBeenCalledTimes(2);\n      expect(nativeReportException.mock.calls[0][0].message).toMatch(\n        /Logging an error within the decorator/,\n      );\n      expect(nativeReportException.mock.calls[1][0].message).toMatch(\n        /decorated: .*Some error happened/,\n      );\n      expect(mockError).toHaveBeenCalledTimes(2);\n      // console.error calls are chained without exception pre-processing, so decorator doesn't apply\n      expect(mockError.mock.calls[0][0].toString()).toMatch(\n        /Error: Some error happened/,\n      );\n      expect(mockError.mock.calls[1][0]).toMatch(\n        /Logging an error within the decorator/,\n      );\n    });\n\n    test('can handle throwing decorators recursion when exception is thrown', () => {\n      const error = new Error('Some error happened');\n      const decorator = jest.fn().mockImplementation(data => {\n        throw new Error('Throwing an error within the decorator');\n      });\n\n      ExceptionsManager.unstable_setExceptionDecorator(decorator);\n      ExceptionsManager.handleException(error, true);\n\n      expect(nativeReportException).toHaveBeenCalledTimes(1);\n      // Exceptions in decorators are ignored and the decorator is not applied\n      expect(nativeReportException.mock.calls[0][0].message).toMatch(\n        /Error: Some error happened/,\n      );\n      expect(mockError).toHaveBeenCalledTimes(1);\n      expect(mockError.mock.calls[0][0]).toMatch(/Error: Some error happened/);\n    });\n\n    test('can handle throwing decorators recursion when exception is logged', () => {\n      const error = new Error('Some error happened');\n      const decorator = jest.fn().mockImplementation(data => {\n        throw new Error('Throwing an error within the decorator');\n      });\n\n      ExceptionsManager.unstable_setExceptionDecorator(decorator);\n      console.error(error);\n\n      expect(nativeReportException).toHaveBeenCalledTimes(1);\n      // Exceptions in decorators are ignored and the decorator is not applied\n      expect(nativeReportException.mock.calls[0][0].message).toMatch(\n        /Error: Some error happened/,\n      );\n      expect(mockError).toHaveBeenCalledTimes(1);\n      expect(mockError.mock.calls[0][0].toString()).toMatch(\n        /Error: Some error happened/,\n      );\n    });\n  });\n});\n\nconst linesByFile = new Map();\n\nfunction getLineFromFrame({lineNumber /* 1-based */, file}) {\n  if (file == null) {\n    return null;\n  }\n  const cleanedFile = cleanFileName(file);\n  const lines =\n    linesByFile.get(cleanedFile) ||\n    fs.readFileSync(cleanedFile, 'utf8').split('\\n');\n  if (!linesByFile.has(cleanedFile)) {\n    linesByFile.set(cleanedFile, lines);\n  }\n  return (lines[lineNumber - 1] || '').trim();\n}\n\nfunction getFirstFrameInThisFile(stack) {\n  return stack.find(({file}) => file.endsWith(path.basename(module.filename)));\n}\n\n// Works around a parseErrorStack bug involving `new X` stack frames.\nfunction cleanFileName(file) {\n  return file.replace(/^.+? \\((?=\\/)/, '');\n}\n"]},"metadata":{},"sourceType":"script"}