{"ast":null,"code":"export {};","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/expo-file-system/build/FileSystem.types.d.ts"],"names":[],"mappings":"AAmHA","sourcesContent":["export declare enum FileSystemSessionType {\n    BACKGROUND = 0,\n    FOREGROUND = 1\n}\nexport declare enum FileSystemUploadType {\n    BINARY_CONTENT = 0,\n    MULTIPART = 1\n}\nexport declare type DownloadOptions = {\n    md5?: boolean;\n    cache?: boolean;\n    headers?: Record<string, string>;\n    sessionType?: FileSystemSessionType;\n};\nexport declare type FileSystemHttpResult = {\n    headers: Record<string, string>;\n    status: number;\n    mimeType: string | null;\n};\nexport declare type FileSystemDownloadResult = FileSystemHttpResult & {\n    uri: string;\n    md5?: string;\n};\n/**\n * @deprecated Use `FileSystemDownloadResult` instead.\n */\nexport declare type DownloadResult = FileSystemDownloadResult;\nexport declare type FileSystemUploadOptions = ({\n    uploadType?: FileSystemUploadType.BINARY_CONTENT;\n} | {\n    uploadType: FileSystemUploadType.MULTIPART;\n    fieldName?: string;\n    mimeType?: string;\n    parameters?: Record<string, string>;\n}) & {\n    headers?: Record<string, string>;\n    httpMethod?: FileSystemAcceptedUploadHttpMethod;\n    sessionType?: FileSystemSessionType;\n};\nexport declare type FileSystemUploadResult = FileSystemHttpResult & {\n    body: string;\n};\nexport declare type DownloadProgressCallback = (data: DownloadProgressData) => void;\nexport declare type DownloadProgressData = {\n    totalBytesWritten: number;\n    totalBytesExpectedToWrite: number;\n};\nexport declare type DownloadPauseState = {\n    url: string;\n    fileUri: string;\n    options: DownloadOptions;\n    resumeData?: string;\n};\nexport declare type FileInfo = {\n    exists: true;\n    uri: string;\n    size: number;\n    isDirectory: boolean;\n    modificationTime: number;\n    md5?: string;\n} | {\n    exists: false;\n    uri: string;\n    size: undefined;\n    isDirectory: false;\n    modificationTime: undefined;\n    md5: undefined;\n};\nexport declare enum EncodingType {\n    UTF8 = \"utf8\",\n    Base64 = \"base64\"\n}\nexport declare type FileSystemAcceptedUploadHttpMethod = 'POST' | 'PUT' | 'PATCH';\nexport declare type ReadingOptions = {\n    encoding?: EncodingType | 'utf8' | 'base64';\n    position?: number;\n    length?: number;\n};\nexport declare type WritingOptions = {\n    encoding?: EncodingType | 'utf8' | 'base64';\n};\nexport declare type ProgressEvent = {\n    uuid: string;\n    data: {\n        totalBytesWritten: number;\n        totalBytesExpectedToWrite: number;\n    };\n};\ndeclare type PlatformMethod = (...args: any[]) => Promise<any>;\nexport interface ExponentFileSystemModule {\n    readonly name: 'ExponentFileSystem';\n    readonly documentDirectory: string | null;\n    readonly cacheDirectory: string | null;\n    readonly bundledAssets: string | null;\n    readonly bundleDirectory: string | null;\n    readonly getInfoAsync?: PlatformMethod;\n    readonly readAsStringAsync?: PlatformMethod;\n    readonly writeAsStringAsync?: PlatformMethod;\n    readonly deleteAsync?: PlatformMethod;\n    readonly moveAsync?: PlatformMethod;\n    readonly copyAsync?: PlatformMethod;\n    readonly makeDirectoryAsync?: PlatformMethod;\n    readonly readDirectoryAsync?: PlatformMethod;\n    readonly downloadAsync?: PlatformMethod;\n    readonly uploadAsync?: PlatformMethod;\n    readonly downloadResumableStartAsync?: PlatformMethod;\n    readonly downloadResumablePauseAsync?: PlatformMethod;\n    readonly getContentUriAsync?: PlatformMethod;\n    readonly getFreeDiskStorageAsync?: PlatformMethod;\n    readonly getTotalDiskCapacityAsync?: PlatformMethod;\n    startObserving?: () => void;\n    stopObserving?: () => void;\n    addListener: (eventName: string) => void;\n    removeListeners: (count: number) => void;\n}\nexport {};\n"]},"metadata":{},"sourceType":"module"}