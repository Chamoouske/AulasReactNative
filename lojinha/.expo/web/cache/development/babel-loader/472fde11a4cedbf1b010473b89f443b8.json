{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.writeContentsJsonFile = void 0;\n\nvar fs_extra_1 = __importDefault(require(\"fs-extra\"));\n\nfunction writeContentsJsonFile(contentsJsonFilePath, filename, darkModeFilename) {\n  var images, contentsJson;\n  return _regeneratorRuntime.async(function writeContentsJsonFile$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          images = [{\n            idiom: 'universal',\n            filename: filename,\n            scale: '1x'\n          }, {\n            appearances: [{\n              appearance: 'luminosity',\n              value: 'dark'\n            }],\n            idiom: 'universal',\n            filename: darkModeFilename,\n            scale: '1x'\n          }, {\n            idiom: 'universal',\n            scale: '2x'\n          }, {\n            appearances: [{\n              appearance: 'luminosity',\n              value: 'dark'\n            }],\n            idiom: 'universal',\n            scale: '2x'\n          }, {\n            idiom: 'universal',\n            scale: '3x'\n          }, {\n            appearances: [{\n              appearance: 'luminosity',\n              value: 'dark'\n            }],\n            idiom: 'universal',\n            scale: '3x'\n          }].filter(function (el) {\n            var _a, _b;\n\n            return ((_b = (_a = el.appearances) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.value) === 'dark' ? Boolean(darkModeFilename) : true;\n          });\n          contentsJson = {\n            images: images,\n            info: {\n              version: 1,\n              author: 'xcode'\n            }\n          };\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(fs_extra_1.default.writeFile(contentsJsonFilePath, JSON.stringify(contentsJson, null, 2)));\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.writeContentsJsonFile = writeContentsJsonFile;","map":{"version":3,"sources":["../../src/ios/Contents.json.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,IAAA,UAAA,GAAA,eAAA,CAAA,OAAA,CAAA,UAAA,CAAA,CAAA;;AAEO,SAAe,qBAAf,CACL,oBADK,EAEL,QAFK,EAGL,gBAHK;AAAA;AAAA;AAAA;AAAA;AAAA;AAKC,UAAA,MALD,GAaC,CACJ;AACE,YAAA,KAAK,EAAE,WADT;AAEE,YAAA,QAAQ,EAAR,QAFF;AAGE,YAAA,KAAK,EAAE;AAHT,WADI,EAMJ;AACE,YAAA,WAAW,EAAE,CACX;AACE,cAAA,UAAU,EAAE,YADd;AAEE,cAAA,KAAK,EAAE;AAFT,aADW,CADf;AAOE,YAAA,KAAK,EAAE,WAPT;AAQE,YAAA,QAAQ,EAAE,gBARZ;AASE,YAAA,KAAK,EAAE;AATT,WANI,EAiBJ;AACE,YAAA,KAAK,EAAE,WADT;AAEE,YAAA,KAAK,EAAE;AAFT,WAjBI,EAqBJ;AACE,YAAA,WAAW,EAAE,CACX;AACE,cAAA,UAAU,EAAE,YADd;AAEE,cAAA,KAAK,EAAE;AAFT,aADW,CADf;AAOE,YAAA,KAAK,EAAE,WAPT;AAQE,YAAA,KAAK,EAAE;AART,WArBI,EA+BJ;AACE,YAAA,KAAK,EAAE,WADT;AAEE,YAAA,KAAK,EAAE;AAFT,WA/BI,EAmCJ;AACE,YAAA,WAAW,EAAE,CACX;AACE,cAAA,UAAU,EAAE,YADd;AAEE,cAAA,KAAK,EAAE;AAFT,aADW,CADf;AAOE,YAAA,KAAK,EAAE,WAPT;AAQE,YAAA,KAAK,EAAE;AART,WAnCI,EA6CJ,MA7CI,CA6CG,UAAA,EAAE,EAAG;AAAA,gBAAA,EAAA,EAAA,EAAA;;AAAC,mBAAC,CAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,EAAE,CAAC,WAAH,MAAc,IAAd,IAAc,EAAA,KAAA,KAAA,CAAd,GAAc,KAAA,CAAd,GAAc,EAAA,CAAG,CAAH,CAAd,MAAkB,IAAlB,IAAkB,EAAA,KAAA,KAAA,CAAlB,GAAkB,KAAA,CAAlB,GAAkB,EAAA,CAAG,KAArB,MAA+B,MAA/B,GAAwC,OAAO,CAAC,gBAAD,CAA/C,GAAoE,IAArE;AAA0E,WA7CnF,CAbD;AA4DC,UAAA,YA5DD,GA4DgB;AACnB,YAAA,MAAM,EAAN,MADmB;AAEnB,YAAA,IAAI,EAAE;AACJ,cAAA,OAAO,EAAE,CADL;AAEJ,cAAA,MAAM,EAAE;AAFJ;AAFa,WA5DhB;AAAA;AAAA,2CAoEC,UAAA,CAAA,OAAA,CAAG,SAAH,CAAa,oBAAb,EAAmC,IAAI,CAAC,SAAL,CAAe,YAAf,EAA6B,IAA7B,EAAmC,CAAnC,CAAnC,CApED;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAP,OAAA,CAAA,qBAAA,GAAA,qBAAA","sourcesContent":["import fs from 'fs-extra';\n\nexport async function writeContentsJsonFile(\n  contentsJsonFilePath: string,\n  filename: string,\n  darkModeFilename?: string\n) {\n  const images: {\n    idiom: 'universal';\n    filename?: string;\n    scale: '1x' | '2x' | '3x';\n    appearances?: {\n      appearance: 'luminosity';\n      value: 'dark';\n    }[];\n  }[] = [\n    {\n      idiom: 'universal' as const,\n      filename,\n      scale: '1x' as const,\n    },\n    {\n      appearances: [\n        {\n          appearance: 'luminosity' as const,\n          value: 'dark' as const,\n        },\n      ],\n      idiom: 'universal' as const,\n      filename: darkModeFilename,\n      scale: '1x' as const,\n    },\n    {\n      idiom: 'universal' as const,\n      scale: '2x' as const,\n    },\n    {\n      appearances: [\n        {\n          appearance: 'luminosity' as const,\n          value: 'dark' as const,\n        },\n      ],\n      idiom: 'universal' as const,\n      scale: '2x' as const,\n    },\n    {\n      idiom: 'universal' as const,\n      scale: '3x' as const,\n    },\n    {\n      appearances: [\n        {\n          appearance: 'luminosity' as const,\n          value: 'dark' as const,\n        },\n      ],\n      idiom: 'universal' as const,\n      scale: '3x' as const,\n    },\n  ].filter(el => (el.appearances?.[0]?.value === 'dark' ? Boolean(darkModeFilename) : true));\n\n  const contentsJson = {\n    images,\n    info: {\n      version: 1,\n      author: 'xcode',\n    },\n  };\n\n  await fs.writeFile(contentsJsonFilePath, JSON.stringify(contentsJson, null, 2));\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}