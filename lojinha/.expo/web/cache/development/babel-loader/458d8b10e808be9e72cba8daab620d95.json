{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _minimist() {\n  var data = _interopRequireDefault(require(\"minimist\"));\n\n  _minimist = function _minimist() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _process() {\n  var data = _interopRequireDefault(require(\"process\"));\n\n  _process = function _process() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _printRunInstructions = _interopRequireDefault(require(\"./printRunInstructions\"));\n\nvar _templates = require(\"../../tools/generator/templates\");\n\nvar PackageManager = _interopRequireWildcard(require(\"../../tools/packageManager\"));\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _installPods = _interopRequireDefault(require(\"../../tools/installPods\"));\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction initCompat(projectDir, argsOrName) {\n  var args, newProjectName, options;\n  return _regeneratorRuntime.async(function initCompat$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          args = Array.isArray(argsOrName) ? argsOrName : [argsOrName].concat(_process().default.argv.slice(4));\n\n          if (!(!args || args.length === 0)) {\n            _context.next = 4;\n            break;\n          }\n\n          _cliTools().logger.error('react-native init requires a project name.');\n\n          return _context.abrupt(\"return\");\n\n        case 4:\n          newProjectName = args[0];\n          options = (0, _minimist().default)(args);\n\n          _cliTools().logger.info(\"Setting up new React Native app in \" + projectDir);\n\n          _context.next = 9;\n          return _regeneratorRuntime.awrap(generateProject(projectDir, newProjectName, options));\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction generateProject(destinationRoot, newProjectName, options) {\n  var pkgJson, reactVersion;\n  return _regeneratorRuntime.async(function generateProject$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          pkgJson = require('react-native/package.json');\n          reactVersion = pkgJson.peerDependencies.react;\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap((0, _templates.createProjectFromTemplate)(destinationRoot, newProjectName, options.template));\n\n        case 4:\n          _cliTools().logger.info('Adding required dependencies');\n\n          _context2.next = 7;\n          return _regeneratorRuntime.awrap(PackageManager.install([\"react@\" + reactVersion], {\n            root: destinationRoot\n          }));\n\n        case 7:\n          _cliTools().logger.info('Adding required dev dependencies');\n\n          _context2.next = 10;\n          return _regeneratorRuntime.awrap(PackageManager.installDev(['@babel/core', '@babel/runtime', '@react-native-community/eslint-config', 'eslint', 'jest', 'babel-jest', 'metro-react-native-babel-preset', \"react-test-renderer@\" + reactVersion], {\n            root: destinationRoot\n          }));\n\n        case 10:\n          addJestToPackageJson(destinationRoot);\n\n          if (!(_process().default.platform === 'darwin')) {\n            _context2.next = 15;\n            break;\n          }\n\n          _cliTools().logger.info('Installing required CocoaPods dependencies');\n\n          _context2.next = 15;\n          return _regeneratorRuntime.awrap((0, _installPods.default)({\n            projectName: newProjectName\n          }));\n\n        case 15:\n          (0, _printRunInstructions.default)(destinationRoot, newProjectName);\n\n        case 16:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction addJestToPackageJson(destinationRoot) {\n  var packageJSONPath = _path().default.join(destinationRoot, 'package.json');\n\n  var packageJSON = JSON.parse(_fs().default.readFileSync(packageJSONPath).toString());\n  packageJSON.scripts.test = 'jest';\n  packageJSON.scripts.lint = 'eslint .';\n  packageJSON.jest = {\n    preset: 'react-native'\n  };\n\n  _fs().default.writeFileSync(packageJSONPath, JSON.stringify(packageJSON, null, 2) + \"\\n\");\n}\n\nvar _default = initCompat;\nexports.default = _default;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli/build/commands/init/initCompat.js"],"names":["Object","defineProperty","exports","value","default","_fs","data","_interopRequireDefault","require","_minimist","_path","_process","_printRunInstructions","_templates","PackageManager","_interopRequireWildcard","_cliTools","_installPods","_getRequireWildcardCache","WeakMap","cache","obj","__esModule","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","initCompat","projectDir","argsOrName","args","Array","isArray","concat","argv","slice","length","logger","error","newProjectName","options","info","generateProject","destinationRoot","pkgJson","reactVersion","peerDependencies","react","createProjectFromTemplate","template","install","root","installDev","addJestToPackageJson","platform","projectName","packageJSONPath","join","packageJSON","JSON","parse","readFileSync","toString","scripts","test","lint","jest","preset","writeFileSync","stringify","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _fs() {\n  const data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _minimist() {\n  const data = _interopRequireDefault(require(\"minimist\"));\n\n  _minimist = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  const data = _interopRequireDefault(require(\"path\"));\n\n  _path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _process() {\n  const data = _interopRequireDefault(require(\"process\"));\n\n  _process = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _printRunInstructions = _interopRequireDefault(require(\"./printRunInstructions\"));\n\nvar _templates = require(\"../../tools/generator/templates\");\n\nvar PackageManager = _interopRequireWildcard(require(\"../../tools/packageManager\"));\n\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _installPods = _interopRequireDefault(require(\"../../tools/installPods\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * Creates the template for a React Native project given the provided\n * parameters:\n * @param projectDir Templates will be copied here.\n * @param argsOrName Project name or full list of custom arguments\n *                   for the generator.\n * @param options Command line options passed from the react-native-cli directly.\n *                E.g. `{ version: '0.43.0', template: 'navigation' }`\n */\nasync function initCompat(projectDir, argsOrName) {\n  const args = Array.isArray(argsOrName) ? argsOrName // argsOrName was e.g. ['AwesomeApp', '--verbose']\n  : [argsOrName].concat(_process().default.argv.slice(4)); // argsOrName was e.g. 'AwesomeApp'\n  // args array is e.g. ['AwesomeApp', '--verbose', '--template', 'navigation']\n\n  if (!args || args.length === 0) {\n    _cliTools().logger.error('react-native init requires a project name.');\n\n    return;\n  }\n\n  const newProjectName = args[0];\n  const options = (0, _minimist().default)(args);\n\n  _cliTools().logger.info(`Setting up new React Native app in ${projectDir}`);\n\n  await generateProject(projectDir, newProjectName, options);\n}\n/**\n * Generates a new React Native project based on the template.\n * @param Absolute path at which the project folder should be created.\n * @param options Command line arguments parsed by minimist.\n */\n\n\nasync function generateProject(destinationRoot, newProjectName, options) {\n  const pkgJson = require('react-native/package.json');\n\n  const reactVersion = pkgJson.peerDependencies.react;\n  await (0, _templates.createProjectFromTemplate)(destinationRoot, newProjectName, options.template);\n\n  _cliTools().logger.info('Adding required dependencies');\n\n  await PackageManager.install([`react@${reactVersion}`], {\n    root: destinationRoot\n  });\n\n  _cliTools().logger.info('Adding required dev dependencies');\n\n  await PackageManager.installDev(['@babel/core', '@babel/runtime', '@react-native-community/eslint-config', 'eslint', 'jest', 'babel-jest', 'metro-react-native-babel-preset', `react-test-renderer@${reactVersion}`], {\n    root: destinationRoot\n  });\n  addJestToPackageJson(destinationRoot);\n\n  if (_process().default.platform === 'darwin') {\n    _cliTools().logger.info('Installing required CocoaPods dependencies');\n\n    await (0, _installPods.default)({\n      projectName: newProjectName\n    });\n  }\n\n  (0, _printRunInstructions.default)(destinationRoot, newProjectName);\n}\n/**\n * Add Jest-related stuff to package.json, which was created by the react-native-cli.\n */\n\n\nfunction addJestToPackageJson(destinationRoot) {\n  const packageJSONPath = _path().default.join(destinationRoot, 'package.json');\n\n  const packageJSON = JSON.parse(_fs().default.readFileSync(packageJSONPath).toString());\n  packageJSON.scripts.test = 'jest';\n  packageJSON.scripts.lint = 'eslint .';\n  packageJSON.jest = {\n    preset: 'react-native'\n  };\n\n  _fs().default.writeFileSync(packageJSONPath, `${JSON.stringify(packageJSON, null, 2)}\\n`);\n}\n\nvar _default = initCompat;\nexports.default = _default;\n\n//# sourceMappingURL=initCompat.js.map"]},"metadata":{},"sourceType":"script"}