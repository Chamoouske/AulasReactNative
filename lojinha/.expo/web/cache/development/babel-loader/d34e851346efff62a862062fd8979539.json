{"ast":null,"code":"\"use strict\";\n\nvar _extends = require(\"@babel/runtime/helpers/extends\");\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ios_plugins_1 = require(\"../plugins/ios-plugins\");\n\nexports.withScheme = ios_plugins_1.createInfoPlistPlugin(setScheme, 'withScheme');\n\nfunction getScheme(config) {\n  if (Array.isArray(config.scheme)) {\n    var validate = function validate(value) {\n      return typeof value === 'string';\n    };\n\n    return config.scheme.filter(validate);\n  } else if (typeof config.scheme === 'string') {\n    return [config.scheme];\n  }\n\n  return [];\n}\n\nexports.getScheme = getScheme;\n\nfunction setScheme(config, infoPlist) {\n  var _a, _b;\n\n  var scheme = [].concat(_toConsumableArray(getScheme(config)), _toConsumableArray(getScheme((_a = config.ios) !== null && _a !== void 0 ? _a : {})));\n\n  if ((_b = config.ios) === null || _b === void 0 ? void 0 : _b.bundleIdentifier) {\n    scheme.push(config.ios.bundleIdentifier);\n  }\n\n  if (scheme.length === 0) {\n    return infoPlist;\n  }\n\n  return _extends(_extends({}, infoPlist), {\n    CFBundleURLTypes: [{\n      CFBundleURLSchemes: scheme\n    }]\n  });\n}\n\nexports.setScheme = setScheme;\n\nfunction appendScheme(scheme, infoPlist) {\n  if (!scheme) {\n    return infoPlist;\n  }\n\n  var existingSchemes = infoPlist.CFBundleURLTypes;\n  return _extends(_extends({}, infoPlist), {\n    CFBundleURLTypes: [].concat(_toConsumableArray(existingSchemes !== null && existingSchemes !== void 0 ? existingSchemes : []), [{\n      CFBundleURLSchemes: [scheme]\n    }])\n  });\n}\n\nexports.appendScheme = appendScheme;\n\nfunction removeScheme(scheme, infoPlist) {\n  if (!scheme) {\n    return infoPlist;\n  }\n\n  if (!infoPlist.CFBundleURLTypes) {\n    return infoPlist;\n  }\n\n  infoPlist.CFBundleURLTypes = infoPlist.CFBundleURLTypes.map(function (bundleUrlType) {\n    var index = bundleUrlType.CFBundleURLSchemes.indexOf(scheme);\n\n    if (index > -1) {\n      bundleUrlType.CFBundleURLSchemes.splice(index, 1);\n\n      if (bundleUrlType.CFBundleURLSchemes.length === 0) {\n        return undefined;\n      }\n    }\n\n    return bundleUrlType;\n  }).filter(Boolean);\n  return infoPlist;\n}\n\nexports.removeScheme = removeScheme;\n\nfunction hasScheme(scheme, infoPlist) {\n  var existingSchemes = infoPlist.CFBundleURLTypes;\n  if (!Array.isArray(existingSchemes)) return false;\n  return existingSchemes.some(function (_ref) {\n    var schemes = _ref.CFBundleURLSchemes;\n    return schemes.includes(scheme);\n  });\n}\n\nexports.hasScheme = hasScheme;\n\nfunction getSchemesFromPlist(infoPlist) {\n  if (Array.isArray(infoPlist.CFBundleURLTypes)) {\n    return infoPlist.CFBundleURLTypes.reduce(function (schemes, _ref2) {\n      var CFBundleURLSchemes = _ref2.CFBundleURLSchemes;\n\n      if (Array.isArray(CFBundleURLSchemes)) {\n        return [].concat(_toConsumableArray(schemes), _toConsumableArray(CFBundleURLSchemes));\n      }\n\n      return schemes;\n    }, []);\n  }\n\n  return [];\n}\n\nexports.getSchemesFromPlist = getSchemesFromPlist;","map":{"version":3,"sources":["../../src/ios/Scheme.ts"],"names":[],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { createInfoPlistPlugin } from '../plugins/ios-plugins';\nimport { InfoPlist, URLScheme } from './IosConfig.types';\n\nexport const withScheme = createInfoPlistPlugin(setScheme, 'withScheme');\n\nexport function getScheme(config: { scheme?: string | string[] }): string[] {\n  if (Array.isArray(config.scheme)) {\n    const validate = (value: any): value is string => {\n      return typeof value === 'string';\n    };\n    return config.scheme.filter<string>(validate);\n  } else if (typeof config.scheme === 'string') {\n    return [config.scheme];\n  }\n  return [];\n}\n\nexport function setScheme(\n  config: Partial<Pick<ExpoConfig, 'scheme' | 'ios'>>,\n  infoPlist: InfoPlist\n): InfoPlist {\n  const scheme = [\n    ...getScheme(config),\n    // @ts-ignore: TODO: ios.scheme is an unreleased -- harder to add to turtle v1.\n    ...getScheme(config.ios ?? {}),\n  ];\n  // Add the bundle identifier to the list of schemes for easier Google auth and parity with Turtle v1.\n  if (config.ios?.bundleIdentifier) {\n    scheme.push(config.ios.bundleIdentifier);\n  }\n  if (scheme.length === 0) {\n    return infoPlist;\n  }\n\n  return {\n    ...infoPlist,\n    CFBundleURLTypes: [{ CFBundleURLSchemes: scheme }],\n  };\n}\n\n// TODO: update this to be idempotent!\nexport function appendScheme(scheme: string | null, infoPlist: InfoPlist): InfoPlist {\n  if (!scheme) {\n    return infoPlist;\n  }\n\n  const existingSchemes = infoPlist.CFBundleURLTypes;\n\n  return {\n    ...infoPlist,\n    CFBundleURLTypes: [\n      ...(existingSchemes ?? []),\n      {\n        CFBundleURLSchemes: [scheme],\n      },\n    ],\n  };\n}\n\nexport function removeScheme(scheme: string | null, infoPlist: InfoPlist): InfoPlist {\n  if (!scheme) {\n    return infoPlist;\n  }\n\n  // No need to remove if we don't have any\n  if (!infoPlist.CFBundleURLTypes) {\n    return infoPlist;\n  }\n\n  infoPlist.CFBundleURLTypes = infoPlist.CFBundleURLTypes.map(bundleUrlType => {\n    const index = bundleUrlType.CFBundleURLSchemes.indexOf(scheme);\n    if (index > -1) {\n      bundleUrlType.CFBundleURLSchemes.splice(index, 1);\n      if (bundleUrlType.CFBundleURLSchemes.length === 0) {\n        return undefined;\n      }\n    }\n    return bundleUrlType;\n  }).filter(Boolean) as URLScheme[];\n\n  return infoPlist;\n}\n\nexport function hasScheme(scheme: string, infoPlist: InfoPlist): boolean {\n  const existingSchemes = infoPlist.CFBundleURLTypes;\n\n  if (!Array.isArray(existingSchemes)) return false;\n\n  return existingSchemes.some(({ CFBundleURLSchemes: schemes }: any) => schemes.includes(scheme));\n}\n\nexport function getSchemesFromPlist(infoPlist: InfoPlist): string[] {\n  if (Array.isArray(infoPlist.CFBundleURLTypes)) {\n    return infoPlist.CFBundleURLTypes.reduce<string[]>((schemes, { CFBundleURLSchemes }) => {\n      if (Array.isArray(CFBundleURLSchemes)) {\n        return [...schemes, ...CFBundleURLSchemes];\n      }\n      return schemes;\n    }, []);\n  }\n  return [];\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}