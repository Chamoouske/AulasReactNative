{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.promptCocoaPodsInstallationQuestion = promptCocoaPodsInstallationQuestion;\nexports.runSudo = runSudo;\nexports.installCocoaPods = installCocoaPods;\nexports.default = void 0;\n\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _execa() {\n  var data = _interopRequireDefault(require(\"execa\"));\n\n  _execa = function _execa() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _inquirer() {\n  var data = _interopRequireDefault(require(\"inquirer\"));\n\n  _inquirer = function _inquirer() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _loader = require(\"./loader\");\n\nfunction _sudoPrompt() {\n  var data = _interopRequireDefault(require(\"sudo-prompt\"));\n\n  _sudoPrompt = function _sudoPrompt() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _brewInstall = require(\"./brewInstall\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction runPodInstall(loader, projectName) {\n  var shouldHandleRepoUpdate,\n      stderr,\n      _args = arguments;\n  return _regeneratorRuntime.async(function runPodInstall$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          shouldHandleRepoUpdate = _args.length > 2 && _args[2] !== undefined ? _args[2] : true;\n          _context.prev = 1;\n          loader.start(\"Installing CocoaPods dependencies \" + _chalk().default.dim('(this may take a few minutes)'));\n          _context.next = 5;\n          return _regeneratorRuntime.awrap((0, _execa().default)('pod', ['install']));\n\n        case 5:\n          _context.next = 19;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](1);\n          stderr = _context.t0.stderr || _context.t0.stdout;\n\n          if (!(stderr.includes('pod repo update') && shouldHandleRepoUpdate)) {\n            _context.next = 17;\n            break;\n          }\n\n          _context.next = 13;\n          return _regeneratorRuntime.awrap(runPodUpdate(loader));\n\n        case 13:\n          _context.next = 15;\n          return _regeneratorRuntime.awrap(runPodInstall(loader, projectName, false));\n\n        case 15:\n          _context.next = 19;\n          break;\n\n        case 17:\n          loader.fail();\n          throw new Error(\"Failed to install CocoaPods dependencies for iOS project, which is required by this template.\\nPlease try again manually: \\\"cd ./\" + projectName + \"/ios && pod install\\\".\\nCocoaPods documentation: \" + _chalk().default.dim.underline('https://cocoapods.org/'));\n\n        case 19:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[1, 7]], Promise);\n}\n\nfunction runPodUpdate(loader) {\n  return _regeneratorRuntime.async(function runPodUpdate$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          loader.start(\"Updating CocoaPods repositories \" + _chalk().default.dim('(this may take a few minutes)'));\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap((0, _execa().default)('pod', ['repo', 'update']));\n\n        case 4:\n          _context2.next = 11;\n          break;\n\n        case 6:\n          _context2.prev = 6;\n          _context2.t0 = _context2[\"catch\"](0);\n\n          _cliTools().logger.log(_context2.t0.stderr || _context2.t0.stdout);\n\n          loader.fail();\n          throw new Error(\"Failed to update CocoaPods repositories for iOS project.\\nPlease try again manually: \\\"pod repo update\\\".\\nCocoaPods documentation: \" + _chalk().default.dim.underline('https://cocoapods.org/'));\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 6]], Promise);\n}\n\nfunction runSudo(command) {\n  return new Promise(function (resolve, reject) {\n    _sudoPrompt().default.exec(command, {\n      name: 'React Native CLI'\n    }, function (error) {\n      if (error) {\n        reject(error);\n      }\n\n      resolve();\n    });\n  });\n}\n\nfunction promptCocoaPodsInstallationQuestion() {\n  var promptQuestion, installWithGem, installWithHomebrew, _await$_inquirer$defa, shouldInstallCocoaPods, shouldInstallWithGem;\n\n  return _regeneratorRuntime.async(function promptCocoaPodsInstallationQuestion$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          promptQuestion = \"CocoaPods \" + _chalk().default.dim.underline('(https://cocoapods.org/)') + \" \" + _chalk().default.reset.bold('is not installed. CocoaPods is necessary for the iOS project to run correctly. Do you want to install it?');\n          installWithGem = 'Yes, with gem (may require sudo)';\n          installWithHomebrew = 'Yes, with Homebrew';\n          _context3.next = 5;\n          return _regeneratorRuntime.awrap(_inquirer().default.prompt([{\n            type: 'list',\n            name: 'shouldInstallCocoaPods',\n            message: promptQuestion,\n            choices: [installWithGem, installWithHomebrew]\n          }]));\n\n        case 5:\n          _await$_inquirer$defa = _context3.sent;\n          shouldInstallCocoaPods = _await$_inquirer$defa.shouldInstallCocoaPods;\n          shouldInstallWithGem = shouldInstallCocoaPods === installWithGem;\n          return _context3.abrupt(\"return\", {\n            installMethod: shouldInstallWithGem ? 'gem' : 'homebrew',\n            promptQuestion: \"? \" + promptQuestion + \" \" + (shouldInstallWithGem ? installWithGem : installWithHomebrew)\n          });\n\n        case 9:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction installCocoaPodsWithGem() {\n  var options;\n  return _regeneratorRuntime.async(function installCocoaPodsWithGem$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          options = ['install', 'cocoapods', '--no-document'];\n          _context4.prev = 1;\n          _context4.next = 4;\n          return _regeneratorRuntime.awrap((0, _execa().default)('gem', options));\n\n        case 4:\n          _context4.next = 10;\n          break;\n\n        case 6:\n          _context4.prev = 6;\n          _context4.t0 = _context4[\"catch\"](1);\n          _context4.next = 10;\n          return _regeneratorRuntime.awrap(runSudo(\"gem \" + options.join(' ')));\n\n        case 10:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, [[1, 6]], Promise);\n}\n\nfunction installCocoaPods(loader) {\n  var _await$promptCocoaPod, installMethod;\n\n  return _regeneratorRuntime.async(function installCocoaPods$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          loader.stop();\n          _context5.next = 3;\n          return _regeneratorRuntime.awrap(promptCocoaPodsInstallationQuestion());\n\n        case 3:\n          _await$promptCocoaPod = _context5.sent;\n          installMethod = _await$promptCocoaPod.installMethod;\n\n          if (!(installMethod === 'gem')) {\n            _context5.next = 18;\n            break;\n          }\n\n          loader.start('Installing CocoaPods');\n          _context5.prev = 7;\n          _context5.next = 10;\n          return _regeneratorRuntime.awrap(installCocoaPodsWithGem());\n\n        case 10:\n          return _context5.abrupt(\"return\", loader.succeed());\n\n        case 13:\n          _context5.prev = 13;\n          _context5.t0 = _context5[\"catch\"](7);\n          loader.fail();\n\n          _cliTools().logger.error(_context5.t0.stderr);\n\n          throw new Error(\"An error occured while trying to install CocoaPods, which is required by this template.\\nPlease try again manually: sudo gem install cocoapods.\\nCocoaPods documentation: \" + _chalk().default.dim.underline('https://cocoapods.org/'));\n\n        case 18:\n          if (!(installMethod === 'homebrew')) {\n            _context5.next = 22;\n            break;\n          }\n\n          _context5.next = 21;\n          return _regeneratorRuntime.awrap((0, _brewInstall.brewInstall)({\n            pkg: 'cocoapods',\n            label: 'Installing CocoaPods',\n            loader: loader\n          }));\n\n        case 21:\n          return _context5.abrupt(\"return\", _context5.sent);\n\n        case 22:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, [[7, 13]], Promise);\n}\n\nfunction installPods(_ref) {\n  var projectName, loader, hasPods;\n  return _regeneratorRuntime.async(function installPods$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          projectName = _ref.projectName, loader = _ref.loader;\n          loader = loader || new _loader.NoopLoader();\n          _context6.prev = 2;\n\n          if (_fs().default.existsSync('ios')) {\n            _context6.next = 5;\n            break;\n          }\n\n          return _context6.abrupt(\"return\");\n\n        case 5:\n          process.chdir('ios');\n          hasPods = _fs().default.existsSync('Podfile');\n\n          if (hasPods) {\n            _context6.next = 9;\n            break;\n          }\n\n          return _context6.abrupt(\"return\");\n\n        case 9:\n          _context6.prev = 9;\n          _context6.next = 12;\n          return _regeneratorRuntime.awrap((0, _execa().default)('pod', ['--version']));\n\n        case 12:\n          _context6.next = 19;\n          break;\n\n        case 14:\n          _context6.prev = 14;\n          _context6.t0 = _context6[\"catch\"](9);\n          loader.info();\n          _context6.next = 19;\n          return _regeneratorRuntime.awrap(installCocoaPods(loader));\n\n        case 19:\n          _context6.next = 21;\n          return _regeneratorRuntime.awrap(runPodInstall(loader, projectName));\n\n        case 21:\n          _context6.next = 26;\n          break;\n\n        case 23:\n          _context6.prev = 23;\n          _context6.t1 = _context6[\"catch\"](2);\n          throw _context6.t1;\n\n        case 26:\n          _context6.prev = 26;\n          process.chdir('..');\n          return _context6.finish(26);\n\n        case 29:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, [[2, 23, 26, 29], [9, 14]], Promise);\n}\n\nvar _default = installPods;\nexports.default = _default;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli/build/tools/installPods.js"],"names":["Object","defineProperty","exports","value","promptCocoaPodsInstallationQuestion","runSudo","installCocoaPods","default","_fs","data","_interopRequireDefault","require","_execa","_chalk","_inquirer","_cliTools","_loader","_sudoPrompt","_brewInstall","obj","__esModule","runPodInstall","loader","projectName","shouldHandleRepoUpdate","start","dim","stderr","stdout","includes","runPodUpdate","fail","Error","underline","logger","log","command","Promise","resolve","reject","exec","name","error","promptQuestion","reset","bold","installWithGem","installWithHomebrew","prompt","type","message","choices","shouldInstallCocoaPods","shouldInstallWithGem","installMethod","installCocoaPodsWithGem","options","join","stop","succeed","brewInstall","pkg","label","installPods","NoopLoader","existsSync","process","chdir","hasPods","info","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.promptCocoaPodsInstallationQuestion = promptCocoaPodsInstallationQuestion;\nexports.runSudo = runSudo;\nexports.installCocoaPods = installCocoaPods;\nexports.default = void 0;\n\nfunction _fs() {\n  const data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _execa() {\n  const data = _interopRequireDefault(require(\"execa\"));\n\n  _execa = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require(\"chalk\"));\n\n  _chalk = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _inquirer() {\n  const data = _interopRequireDefault(require(\"inquirer\"));\n\n  _inquirer = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _loader = require(\"./loader\");\n\nfunction _sudoPrompt() {\n  const data = _interopRequireDefault(require(\"sudo-prompt\"));\n\n  _sudoPrompt = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _brewInstall = require(\"./brewInstall\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// @ts-ignore untyped\n// @ts-ignore untyped\nasync function runPodInstall(loader, projectName, shouldHandleRepoUpdate = true) {\n  try {\n    loader.start(`Installing CocoaPods dependencies ${_chalk().default.dim('(this may take a few minutes)')}`);\n    await (0, _execa().default)('pod', ['install']);\n  } catch (error) {\n    // \"pod\" command outputs errors to stdout (at least some of them)\n    const stderr = error.stderr || error.stdout;\n    /**\n     * If CocoaPods failed due to repo being out of date, it will\n     * include the update command in the error message.\n     *\n     * `shouldHandleRepoUpdate` will be set to `false` to\n     * prevent infinite loop (unlikely scenario)\n     */\n\n    if (stderr.includes('pod repo update') && shouldHandleRepoUpdate) {\n      await runPodUpdate(loader);\n      await runPodInstall(loader, projectName, false);\n    } else {\n      loader.fail();\n      throw new Error(`Failed to install CocoaPods dependencies for iOS project, which is required by this template.\\nPlease try again manually: \"cd ./${projectName}/ios && pod install\".\\nCocoaPods documentation: ${_chalk().default.dim.underline('https://cocoapods.org/')}`);\n    }\n  }\n}\n\nasync function runPodUpdate(loader) {\n  try {\n    loader.start(`Updating CocoaPods repositories ${_chalk().default.dim('(this may take a few minutes)')}`);\n    await (0, _execa().default)('pod', ['repo', 'update']);\n  } catch (error) {\n    // \"pod\" command outputs errors to stdout (at least some of them)\n    _cliTools().logger.log(error.stderr || error.stdout);\n\n    loader.fail();\n    throw new Error(`Failed to update CocoaPods repositories for iOS project.\\nPlease try again manually: \"pod repo update\".\\nCocoaPods documentation: ${_chalk().default.dim.underline('https://cocoapods.org/')}`);\n  }\n}\n\nfunction runSudo(command) {\n  return new Promise((resolve, reject) => {\n    _sudoPrompt().default.exec(command, {\n      name: 'React Native CLI'\n    }, error => {\n      if (error) {\n        reject(error);\n      }\n\n      resolve();\n    });\n  });\n}\n\nasync function promptCocoaPodsInstallationQuestion() {\n  const promptQuestion = `CocoaPods ${_chalk().default.dim.underline('(https://cocoapods.org/)')} ${_chalk().default.reset.bold('is not installed. CocoaPods is necessary for the iOS project to run correctly. Do you want to install it?')}`;\n  const installWithGem = 'Yes, with gem (may require sudo)';\n  const installWithHomebrew = 'Yes, with Homebrew';\n  const {\n    shouldInstallCocoaPods\n  } = await _inquirer().default.prompt([{\n    type: 'list',\n    name: 'shouldInstallCocoaPods',\n    message: promptQuestion,\n    choices: [installWithGem, installWithHomebrew]\n  }]);\n  const shouldInstallWithGem = shouldInstallCocoaPods === installWithGem;\n  return {\n    installMethod: shouldInstallWithGem ? 'gem' : 'homebrew',\n    // This is used for removing the message in `doctor` after it's answered\n    promptQuestion: `? ${promptQuestion} ${shouldInstallWithGem ? installWithGem : installWithHomebrew}`\n  };\n}\n\nasync function installCocoaPodsWithGem() {\n  const options = ['install', 'cocoapods', '--no-document'];\n\n  try {\n    // First attempt to install `cocoapods`\n    await (0, _execa().default)('gem', options);\n  } catch (_error) {\n    // If that doesn't work then try with sudo\n    await runSudo(`gem ${options.join(' ')}`);\n  }\n}\n\nasync function installCocoaPods(loader) {\n  loader.stop();\n  const {\n    installMethod\n  } = await promptCocoaPodsInstallationQuestion();\n\n  if (installMethod === 'gem') {\n    loader.start('Installing CocoaPods');\n\n    try {\n      await installCocoaPodsWithGem();\n      return loader.succeed();\n    } catch (error) {\n      loader.fail();\n\n      _cliTools().logger.error(error.stderr);\n\n      throw new Error(`An error occured while trying to install CocoaPods, which is required by this template.\\nPlease try again manually: sudo gem install cocoapods.\\nCocoaPods documentation: ${_chalk().default.dim.underline('https://cocoapods.org/')}`);\n    }\n  }\n\n  if (installMethod === 'homebrew') {\n    return await (0, _brewInstall.brewInstall)({\n      pkg: 'cocoapods',\n      label: 'Installing CocoaPods',\n      loader\n    });\n  }\n}\n\nasync function installPods({\n  projectName,\n  loader\n}) {\n  loader = loader || new _loader.NoopLoader();\n\n  try {\n    if (!_fs().default.existsSync('ios')) {\n      return;\n    }\n\n    process.chdir('ios');\n\n    const hasPods = _fs().default.existsSync('Podfile');\n\n    if (!hasPods) {\n      return;\n    }\n\n    try {\n      // Check if \"pod\" is available and usable. It happens that there are\n      // multiple versions of \"pod\" command and even though it's there, it exits\n      // with a failure\n      await (0, _execa().default)('pod', ['--version']);\n    } catch (e) {\n      loader.info();\n      await installCocoaPods(loader);\n    }\n\n    await runPodInstall(loader, projectName);\n  } catch (error) {\n    throw error;\n  } finally {\n    process.chdir('..');\n  }\n}\n\nvar _default = installPods;\nexports.default = _default;\n\n//# sourceMappingURL=installPods.js.map"]},"metadata":{},"sourceType":"script"}