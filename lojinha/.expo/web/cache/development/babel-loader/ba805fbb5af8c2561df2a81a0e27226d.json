{"ast":null,"code":"\"use strict\";\n\nvar _extends = require(\"@babel/runtime/helpers/extends\");\n\nfunction peg$subclass(child, parent) {\n  function ctor() {\n    this.constructor = child;\n  }\n\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message = message;\n  this.expected = expected;\n  this.found = found;\n  this.location = location;\n  this.name = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function (expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n    literal: function literal(expectation) {\n      return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n    },\n    \"class\": function _class(expectation) {\n      var escapedParts = \"\",\n          i;\n\n      for (i = 0; i < expectation.parts.length; i++) {\n        escapedParts += expectation.parts[i] instanceof Array ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1]) : classEscape(expectation.parts[i]);\n      }\n\n      return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n    },\n    any: function any(expectation) {\n      return \"any character\";\n    },\n    end: function end(expectation) {\n      return \"end of input\";\n    },\n    other: function other(expectation) {\n      return expectation.description;\n    }\n  };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"').replace(/\\0/g, '\\\\0').replace(/\\t/g, '\\\\t').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/[\\x00-\\x0F]/g, function (ch) {\n      return '\\\\x0' + hex(ch);\n    }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) {\n      return '\\\\x' + hex(ch);\n    });\n  }\n\n  function classEscape(s) {\n    return s.replace(/\\\\/g, '\\\\\\\\').replace(/\\]/g, '\\\\]').replace(/\\^/g, '\\\\^').replace(/-/g, '\\\\-').replace(/\\0/g, '\\\\0').replace(/\\t/g, '\\\\t').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/[\\x00-\\x0F]/g, function (ch) {\n      return '\\\\x0' + hex(ch);\n    }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) {\n      return '\\\\x' + hex(ch);\n    });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n        i,\n        j;\n\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \") + \", or \" + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n\n  var peg$FAILED = {},\n      peg$startRuleFunctions = {\n    Project: peg$parseProject\n  },\n      peg$startRuleFunction = peg$parseProject,\n      peg$c0 = function peg$c0(headComment, obj) {\n    var proj = Object.create(null);\n    proj.project = obj;\n\n    if (headComment) {\n      proj.headComment = headComment;\n    }\n\n    return proj;\n  },\n      peg$c1 = \"{\",\n      peg$c2 = peg$literalExpectation(\"{\", false),\n      peg$c3 = \"}\",\n      peg$c4 = peg$literalExpectation(\"}\", false),\n      peg$c5 = function peg$c5(obj) {\n    return obj;\n  },\n      peg$c6 = function peg$c6() {\n    return Object.create(null);\n  },\n      peg$c7 = function peg$c7(list) {\n    var returnObject = list[0][0];\n\n    for (var i = 1; i < list.length; i++) {\n      var another = list[i][0];\n      returnObject = _extends(returnObject, another);\n    }\n\n    return returnObject;\n  },\n      peg$c8 = \"=\",\n      peg$c9 = peg$literalExpectation(\"=\", false),\n      peg$c10 = \";\",\n      peg$c11 = peg$literalExpectation(\";\", false),\n      peg$c12 = function peg$c12(id, val) {\n    var result = Object.create(null);\n    result[id] = val;\n    return result;\n  },\n      peg$c13 = function peg$c13(commentedId, val) {\n    var result = Object.create(null),\n        commentKey = commentedId.id + '_comment';\n    result[commentedId.id] = val;\n    result[commentKey] = commentedId[commentKey];\n    return result;\n  },\n      peg$c14 = function peg$c14(id, commentedVal) {\n    var result = Object.create(null);\n    result[id] = commentedVal.value;\n    result[id + \"_comment\"] = commentedVal.comment;\n    return result;\n  },\n      peg$c15 = function peg$c15(id, comment) {\n    var result = Object.create(null);\n    result.id = id;\n    result[id + \"_comment\"] = comment.trim();\n    return result;\n  },\n      peg$c16 = function peg$c16(literal, comment) {\n    var result = Object.create(null);\n    result.comment = comment.trim();\n    result.value = literal.trim();\n    return result;\n  },\n      peg$c17 = /^[^*]/,\n      peg$c18 = peg$classExpectation([\"*\"], true, false),\n      peg$c19 = function peg$c19(body) {\n    return body.join('');\n  },\n      peg$c20 = \"/*\",\n      peg$c21 = peg$literalExpectation(\"/*\", false),\n      peg$c22 = \"*/\",\n      peg$c23 = peg$literalExpectation(\"*/\", false),\n      peg$c24 = function peg$c24(begin, fields) {\n    var section = Object.create(null);\n    section[begin.name] = fields;\n    return section;\n  },\n      peg$c25 = \"/* Begin \",\n      peg$c26 = peg$literalExpectation(\"/* Begin \", false),\n      peg$c27 = \" section */\",\n      peg$c28 = peg$literalExpectation(\" section */\", false),\n      peg$c29 = function peg$c29(sectionName) {\n    return {\n      name: sectionName\n    };\n  },\n      peg$c30 = \"/* End \",\n      peg$c31 = peg$literalExpectation(\"/* End \", false),\n      peg$c32 = \"(\",\n      peg$c33 = peg$literalExpectation(\"(\", false),\n      peg$c34 = \")\",\n      peg$c35 = peg$literalExpectation(\")\", false),\n      peg$c36 = function peg$c36(arr) {\n    return arr;\n  },\n      peg$c37 = function peg$c37() {\n    return [];\n  },\n      peg$c38 = function peg$c38(head, tail) {\n    if (tail) {\n      tail.unshift(head);\n      return tail;\n    } else {\n      return [head];\n    }\n  },\n      peg$c39 = function peg$c39(val) {\n    return val;\n  },\n      peg$c40 = function peg$c40(val, comment) {\n    var result = Object.create(null);\n    result.value = val.trim();\n    result.comment = comment.trim();\n    return result;\n  },\n      peg$c41 = \",\",\n      peg$c42 = peg$literalExpectation(\",\", false),\n      peg$c43 = /^[A-Za-z0-9_.]/,\n      peg$c44 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"0\", \"9\"], \"_\", \".\"], false, false),\n      peg$c45 = function peg$c45(id) {\n    return id.join('');\n  },\n      peg$c46 = \".\",\n      peg$c47 = peg$literalExpectation(\".\", false),\n      peg$c48 = function peg$c48(decimal) {\n    return decimal.join('');\n  },\n      peg$c49 = function peg$c49(number) {\n    return parseInt(number.join(''), 10);\n  },\n      peg$c50 = function peg$c50(str) {\n    return '\"' + str + '\"';\n  },\n      peg$c51 = function peg$c51(str) {\n    return str.join('');\n  },\n      peg$c52 = peg$anyExpectation(),\n      peg$c53 = function peg$c53(char) {\n    return char;\n  },\n      peg$c54 = \"\\\\\",\n      peg$c55 = peg$literalExpectation(\"\\\\\", false),\n      peg$c56 = function peg$c56() {\n    return '\\\\\"';\n  },\n      peg$c57 = function peg$c57(literal) {\n    return literal.join('');\n  },\n      peg$c58 = /^[^;,\\n]/,\n      peg$c59 = peg$classExpectation([\";\", \",\", \"\\n\"], true, false),\n      peg$c60 = \"//\",\n      peg$c61 = peg$literalExpectation(\"//\", false),\n      peg$c62 = function peg$c62(contents) {\n    return contents;\n  },\n      peg$c63 = function peg$c63(contents) {\n    return contents.join('');\n  },\n      peg$c64 = /^[0-9]/,\n      peg$c65 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n      peg$c66 = /^[A-Za-z]/,\n      peg$c67 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"]], false, false),\n      peg$c68 = \"\\\"\",\n      peg$c69 = peg$literalExpectation(\"\\\"\", false),\n      peg$c70 = peg$otherExpectation(\"whitespace\"),\n      peg$c71 = /^[\\t ]/,\n      peg$c72 = peg$classExpectation([\"\\t\", \" \"], false, false),\n      peg$c73 = /^[\\n\\r]/,\n      peg$c74 = peg$classExpectation([\"\\n\", \"\\r\"], false, false),\n      peg$currPos = 0,\n      peg$savedPos = 0,\n      peg$posDetailsCache = [{\n    line: 1,\n    column: 1\n  }],\n      peg$maxFailPos = 0,\n      peg$maxFailExpected = [],\n      peg$silentFails = 0,\n      peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);\n    throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location);\n  }\n\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return {\n      type: \"literal\",\n      text: text,\n      ignoreCase: ignoreCase\n    };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return {\n      type: \"class\",\n      parts: parts,\n      inverted: inverted,\n      ignoreCase: ignoreCase\n    };\n  }\n\n  function peg$anyExpectation() {\n    return {\n      type: \"any\"\n    };\n  }\n\n  function peg$endExpectation() {\n    return {\n      type: \"end\"\n    };\n  }\n\n  function peg$otherExpectation(description) {\n    return {\n      type: \"other\",\n      description: description\n    };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos],\n        p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line: details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails = peg$computePosDetails(endPos);\n    return {\n      start: {\n        offset: startPos,\n        line: startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line: endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) {\n      return;\n    }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected, found), expected, found, location);\n  }\n\n  function peg$parseProject() {\n    var s0, s1, s2, s3, s4, s5, s6;\n    s0 = peg$currPos;\n    s1 = peg$parseSingleLineComment();\n\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseInlineComment();\n\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseObject();\n\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseNewLine();\n\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c0(s1, s4);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseObject() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 123) {\n      s1 = peg$c1;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c2);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseAssignmentList();\n\n      if (s2 === peg$FAILED) {\n        s2 = peg$parseEmptyBody();\n      }\n\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 125) {\n          s3 = peg$c3;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c4);\n          }\n        }\n\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c5(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseEmptyBody() {\n    var s0, s1;\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c6();\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parseAssignmentList() {\n    var s0, s1, s2, s3, s4, s5;\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parseAssignment();\n\n      if (s4 === peg$FAILED) {\n        s4 = peg$parseDelimitedSection();\n      }\n\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parse_();\n\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parseAssignment();\n\n          if (s4 === peg$FAILED) {\n            s4 = peg$parseDelimitedSection();\n          }\n\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse_();\n\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c7(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseAssignment() {\n    var s0;\n    s0 = peg$parseSimpleAssignment();\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseCommentedAssignment();\n    }\n\n    return s0;\n  }\n\n  function peg$parseSimpleAssignment() {\n    var s0, s1, s2, s3, s4, s5, s6;\n    s0 = peg$currPos;\n    s1 = peg$parseIdentifier();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 61) {\n          s3 = peg$c8;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c9);\n          }\n        }\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseValue();\n\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 59) {\n                s6 = peg$c10;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c11);\n                }\n              }\n\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c12(s1, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseCommentedAssignment() {\n    var s0, s1, s2, s3, s4, s5, s6;\n    s0 = peg$currPos;\n    s1 = peg$parseCommentedIdentifier();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 61) {\n          s3 = peg$c8;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c9);\n          }\n        }\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseValue();\n\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 59) {\n                s6 = peg$c10;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c11);\n                }\n              }\n\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c13(s1, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseIdentifier();\n\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 61) {\n            s3 = peg$c8;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c9);\n            }\n          }\n\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseCommentedValue();\n\n              if (s5 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 59) {\n                  s6 = peg$c10;\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c11);\n                  }\n                }\n\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c14(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseCommentedIdentifier() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n    s1 = peg$parseIdentifier();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseInlineComment();\n\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c15(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseCommentedValue() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n    s1 = peg$parseValue();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseInlineComment();\n\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c16(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseInlineComment() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n    s1 = peg$parseInlineCommentOpen();\n\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n\n      if (peg$c17.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c18);\n        }\n      }\n\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n\n          if (peg$c17.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c18);\n            }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseInlineCommentClose();\n\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c19(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseInlineCommentOpen() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c20) {\n      s0 = peg$c20;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c21);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseInlineCommentClose() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c22) {\n      s0 = peg$c22;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c23);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseDelimitedSection() {\n    var s0, s1, s2, s3, s4, s5;\n    s0 = peg$currPos;\n    s1 = peg$parseDelimitedSectionBegin();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseAssignmentList();\n\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseEmptyBody();\n        }\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseDelimitedSectionEnd();\n\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c24(s1, s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseDelimitedSectionBegin() {\n    var s0, s1, s2, s3, s4;\n    s0 = peg$currPos;\n\n    if (input.substr(peg$currPos, 9) === peg$c25) {\n      s1 = peg$c25;\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c26);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseIdentifier();\n\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 11) === peg$c27) {\n          s3 = peg$c27;\n          peg$currPos += 11;\n        } else {\n          s3 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c28);\n          }\n        }\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseNewLine();\n\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c29(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseDelimitedSectionEnd() {\n    var s0, s1, s2, s3, s4;\n    s0 = peg$currPos;\n\n    if (input.substr(peg$currPos, 7) === peg$c30) {\n      s1 = peg$c30;\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c31);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseIdentifier();\n\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 11) === peg$c27) {\n          s3 = peg$c27;\n          peg$currPos += 11;\n        } else {\n          s3 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c28);\n          }\n        }\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseNewLine();\n\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c29(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseArray() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 40) {\n      s1 = peg$c32;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c33);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseArrayBody();\n\n      if (s2 === peg$FAILED) {\n        s2 = peg$parseEmptyArray();\n      }\n\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 41) {\n          s3 = peg$c34;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c35);\n          }\n        }\n\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c36(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseEmptyArray() {\n    var s0, s1;\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c37();\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parseArrayBody() {\n    var s0, s1, s2, s3, s4, s5;\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseArrayEntry();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseArrayBody();\n\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse_();\n\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c38(s2, s4);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseArrayEntry() {\n    var s0;\n    s0 = peg$parseSimpleArrayEntry();\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseCommentedArrayEntry();\n    }\n\n    return s0;\n  }\n\n  function peg$parseSimpleArrayEntry() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n    s1 = peg$parseValue();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseEndArrayEntry();\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c39(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseCommentedArrayEntry() {\n    var s0, s1, s2, s3, s4;\n    s0 = peg$currPos;\n    s1 = peg$parseValue();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseInlineComment();\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseEndArrayEntry();\n\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c40(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseEndArrayEntry() {\n    var s0, s1, s2, s3;\n\n    if (input.charCodeAt(peg$currPos) === 44) {\n      s0 = peg$c41;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c42);\n      }\n    }\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parse_();\n\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        peg$silentFails++;\n\n        if (input.charCodeAt(peg$currPos) === 41) {\n          s3 = peg$c34;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c35);\n          }\n        }\n\n        peg$silentFails--;\n\n        if (s3 !== peg$FAILED) {\n          peg$currPos = s2;\n          s2 = void 0;\n        } else {\n          s2 = peg$FAILED;\n        }\n\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseIdentifier() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n    s1 = [];\n\n    if (peg$c43.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c44);\n      }\n    }\n\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n\n        if (peg$c43.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c44);\n          }\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c45(s1);\n    }\n\n    s0 = s1;\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseQuotedString();\n    }\n\n    return s0;\n  }\n\n  function peg$parseValue() {\n    var s0;\n    s0 = peg$parseObject();\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseArray();\n\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseNumberValue();\n\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseStringValue();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseNumberValue() {\n    var s0;\n    s0 = peg$parseDecimalValue();\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseIntegerValue();\n    }\n\n    return s0;\n  }\n\n  function peg$parseDecimalValue() {\n    var s0, s1, s2, s3, s4;\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseIntegerValue();\n\n    if (s2 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 46) {\n        s3 = peg$c46;\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c47);\n        }\n      }\n\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseIntegerValue();\n\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c48(s1);\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parseIntegerValue() {\n    var s0, s1, s2, s3, s4;\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    peg$silentFails++;\n    s2 = peg$parseAlpha();\n    peg$silentFails--;\n\n    if (s2 === peg$FAILED) {\n      s1 = void 0;\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parseDigit();\n\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parseDigit();\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseNonTerminator();\n        peg$silentFails--;\n\n        if (s4 === peg$FAILED) {\n          s3 = void 0;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c49(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseStringValue() {\n    var s0;\n    s0 = peg$parseQuotedString();\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseLiteralString();\n    }\n\n    return s0;\n  }\n\n  function peg$parseQuotedString() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n    s1 = peg$parseDoubleQuote();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseQuotedBody();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseDoubleQuote();\n\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c50(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseQuotedBody() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parseNonQuote();\n\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parseNonQuote();\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c51(s1);\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parseNonQuote() {\n    var s0, s1, s2;\n    s0 = peg$parseEscapedQuote();\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      peg$silentFails++;\n      s2 = peg$parseDoubleQuote();\n      peg$silentFails--;\n\n      if (s2 === peg$FAILED) {\n        s1 = void 0;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n\n      if (s1 !== peg$FAILED) {\n        if (input.length > peg$currPos) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c52);\n          }\n        }\n\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c53(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEscapedQuote() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 92) {\n      s1 = peg$c54;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c55);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseDoubleQuote();\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c56();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseLiteralString() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parseLiteralChar();\n\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parseLiteralChar();\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c57(s1);\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parseLiteralChar() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    peg$silentFails++;\n    s2 = peg$parseInlineCommentOpen();\n    peg$silentFails--;\n\n    if (s2 === peg$FAILED) {\n      s1 = void 0;\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseLineTerminator();\n      peg$silentFails--;\n\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseNonTerminator();\n\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c53(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseNonTerminator() {\n    var s0;\n\n    if (peg$c58.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c59);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSingleLineComment() {\n    var s0, s1, s2, s3, s4;\n    s0 = peg$currPos;\n\n    if (input.substr(peg$currPos, 2) === peg$c60) {\n      s1 = peg$c60;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c61);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseOneLineString();\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseNewLine();\n\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c62(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseOneLineString() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parseNonLine();\n\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      s2 = peg$parseNonLine();\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c63(s1);\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parseDigit() {\n    var s0;\n\n    if (peg$c64.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c65);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseAlpha() {\n    var s0;\n\n    if (peg$c66.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c67);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseDoubleQuote() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 34) {\n      s0 = peg$c68;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c69);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parse_() {\n    var s0, s1;\n    peg$silentFails++;\n    s0 = [];\n    s1 = peg$parsewhitespace();\n\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      s1 = peg$parsewhitespace();\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c70);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhitespace() {\n    var s0;\n    s0 = peg$parseNewLine();\n\n    if (s0 === peg$FAILED) {\n      if (peg$c71.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c72);\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseNonLine() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    peg$silentFails++;\n    s2 = peg$parseNewLine();\n    peg$silentFails--;\n\n    if (s2 === peg$FAILED) {\n      s1 = void 0;\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseChar();\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c53(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseLineTerminator() {\n    var s0;\n    s0 = peg$parseNewLine();\n\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 59) {\n        s0 = peg$c10;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c11);\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseNewLine() {\n    var s0;\n\n    if (peg$c73.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c74);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseChar() {\n    var s0;\n\n    if (input.length > peg$currPos) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c52);\n      }\n    }\n\n    return s0;\n  }\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));\n  }\n}\n\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse: peg$parse\n};","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@expo/configure-splash-screen/node_modules/xcode/lib/parser/pbxproj.js"],"names":["peg$subclass","child","parent","ctor","constructor","prototype","peg$SyntaxError","message","expected","found","location","name","Error","captureStackTrace","buildMessage","DESCRIBE_EXPECTATION_FNS","literal","expectation","literalEscape","text","escapedParts","i","parts","length","Array","classEscape","inverted","any","end","other","description","hex","ch","charCodeAt","toString","toUpperCase","s","replace","describeExpectation","type","describeExpected","descriptions","j","sort","slice","join","describeFound","peg$parse","input","options","peg$FAILED","peg$startRuleFunctions","Project","peg$parseProject","peg$startRuleFunction","peg$c0","headComment","obj","proj","Object","create","project","peg$c1","peg$c2","peg$literalExpectation","peg$c3","peg$c4","peg$c5","peg$c6","peg$c7","list","returnObject","another","peg$c8","peg$c9","peg$c10","peg$c11","peg$c12","id","val","result","peg$c13","commentedId","commentKey","peg$c14","commentedVal","value","comment","peg$c15","trim","peg$c16","peg$c17","peg$c18","peg$classExpectation","peg$c19","body","peg$c20","peg$c21","peg$c22","peg$c23","peg$c24","begin","fields","section","peg$c25","peg$c26","peg$c27","peg$c28","peg$c29","sectionName","peg$c30","peg$c31","peg$c32","peg$c33","peg$c34","peg$c35","peg$c36","arr","peg$c37","peg$c38","head","tail","unshift","peg$c39","peg$c40","peg$c41","peg$c42","peg$c43","peg$c44","peg$c45","peg$c46","peg$c47","peg$c48","decimal","peg$c49","number","parseInt","peg$c50","str","peg$c51","peg$c52","peg$anyExpectation","peg$c53","char","peg$c54","peg$c55","peg$c56","peg$c57","peg$c58","peg$c59","peg$c60","peg$c61","peg$c62","contents","peg$c63","peg$c64","peg$c65","peg$c66","peg$c67","peg$c68","peg$c69","peg$c70","peg$otherExpectation","peg$c71","peg$c72","peg$c73","peg$c74","peg$currPos","peg$savedPos","peg$posDetailsCache","line","column","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","peg$result","startRule","substring","peg$computeLocation","peg$buildStructuredError","error","peg$buildSimpleError","ignoreCase","peg$endExpectation","peg$computePosDetails","pos","details","p","startPos","endPos","startPosDetails","endPosDetails","start","offset","peg$fail","push","s0","s1","s2","s3","s4","s5","s6","peg$parseSingleLineComment","peg$parseInlineComment","peg$parse_","peg$parseObject","peg$parseNewLine","peg$parseAssignmentList","peg$parseEmptyBody","peg$parseAssignment","peg$parseDelimitedSection","peg$parseSimpleAssignment","peg$parseCommentedAssignment","peg$parseIdentifier","peg$parseValue","peg$parseCommentedIdentifier","peg$parseCommentedValue","peg$parseInlineCommentOpen","test","charAt","peg$parseInlineCommentClose","substr","peg$parseDelimitedSectionBegin","peg$parseDelimitedSectionEnd","peg$parseArray","peg$parseArrayBody","peg$parseEmptyArray","peg$parseArrayEntry","peg$parseSimpleArrayEntry","peg$parseCommentedArrayEntry","peg$parseEndArrayEntry","peg$parseQuotedString","peg$parseNumberValue","peg$parseStringValue","peg$parseDecimalValue","peg$parseIntegerValue","peg$parseAlpha","peg$parseDigit","peg$parseNonTerminator","peg$parseLiteralString","peg$parseDoubleQuote","peg$parseQuotedBody","peg$parseNonQuote","peg$parseEscapedQuote","peg$parseLiteralChar","peg$parseLineTerminator","peg$parseOneLineString","peg$parseNonLine","peg$parsewhitespace","peg$parseChar","module","exports","SyntaxError","parse"],"mappings":"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","sourcesContent":["/**\n Licensed to the Apache Software Foundation (ASF) under one\n or more contributor license agreements.  See the NOTICE file\n distributed with this work for additional information\n regarding copyright ownership.  The ASF licenses this file\n to you under the Apache License, Version 2.0 (the\n 'License'); you may not use this file except in compliance\n with the License.  You may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\n Unless required by applicable law or agreed to in writing,\n software distributed under the License is distributed on an\n 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n KIND, either express or implied.  See the License for the\n specific language governing permissions and limitations\n under the License.\n */\n\n/*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n\n\"use strict\";\n\nfunction peg$subclass(child, parent) {\n  function ctor() { this.constructor = child; }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message  = message;\n  this.expected = expected;\n  this.found    = found;\n  this.location = location;\n  this.name     = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function(expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n        },\n\n        \"class\": function(expectation) {\n          var escapedParts = \"\",\n              i;\n\n          for (i = 0; i < expectation.parts.length; i++) {\n            escapedParts += expectation.parts[i] instanceof Array\n              ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\n              : classEscape(expectation.parts[i]);\n          }\n\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n        },\n\n        any: function(expectation) {\n          return \"any character\";\n        },\n\n        end: function(expectation) {\n          return \"end of input\";\n        },\n\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\"/g,  '\\\\\"')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\\]/g, '\\\\]')\n      .replace(/\\^/g, '\\\\^')\n      .replace(/-/g,  '\\\\-')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n        i, j;\n\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n\n  var peg$FAILED = {},\n\n      peg$startRuleFunctions = { Project: peg$parseProject },\n      peg$startRuleFunction  = peg$parseProject,\n\n      peg$c0 = function(headComment, obj) {\n              var proj = Object.create(null)\n              proj.project = obj\n\n              if (headComment) {\n                  proj.headComment = headComment\n              }\n\n              return proj;\n          },\n      peg$c1 = \"{\",\n      peg$c2 = peg$literalExpectation(\"{\", false),\n      peg$c3 = \"}\",\n      peg$c4 = peg$literalExpectation(\"}\", false),\n      peg$c5 = function(obj) { return obj },\n      peg$c6 = function() { return Object.create(null) },\n      peg$c7 = function(list) {\n              var returnObject = list[0][0];\n              for(var i = 1; i < list.length; i++){\n                  var another = list[i][0];\n                  returnObject = Object.assign(returnObject, another);\n              }\n              return returnObject;\n          },\n      peg$c8 = \"=\",\n      peg$c9 = peg$literalExpectation(\"=\", false),\n      peg$c10 = \";\",\n      peg$c11 = peg$literalExpectation(\";\", false),\n      peg$c12 = function(id, val) {\n            var result = Object.create(null);\n            result[id] = val\n            return result\n          },\n      peg$c13 = function(commentedId, val) {\n              var result = Object.create(null),\n                  commentKey = commentedId.id + '_comment';\n\n              result[commentedId.id] = val;\n              result[commentKey] = commentedId[commentKey];\n              return result;\n\n          },\n      peg$c14 = function(id, commentedVal) {\n              var result = Object.create(null);\n              result[id] = commentedVal.value;\n              result[id + \"_comment\"] = commentedVal.comment;\n              return result;\n          },\n      peg$c15 = function(id, comment) {\n              var result = Object.create(null);\n              result.id = id;\n              result[id + \"_comment\"] = comment.trim();\n              return result\n          },\n      peg$c16 = function(literal, comment) {\n              var result = Object.create(null)\n              result.comment = comment.trim();\n              result.value = literal.trim();\n              return result;\n          },\n      peg$c17 = /^[^*]/,\n      peg$c18 = peg$classExpectation([\"*\"], true, false),\n      peg$c19 = function(body) { return body.join('') },\n      peg$c20 = \"/*\",\n      peg$c21 = peg$literalExpectation(\"/*\", false),\n      peg$c22 = \"*/\",\n      peg$c23 = peg$literalExpectation(\"*/\", false),\n      peg$c24 = function(begin, fields) {\n              var section = Object.create(null);\n              section[begin.name] = fields\n\n              return section\n          },\n      peg$c25 = \"/* Begin \",\n      peg$c26 = peg$literalExpectation(\"/* Begin \", false),\n      peg$c27 = \" section */\",\n      peg$c28 = peg$literalExpectation(\" section */\", false),\n      peg$c29 = function(sectionName) { return { name: sectionName } },\n      peg$c30 = \"/* End \",\n      peg$c31 = peg$literalExpectation(\"/* End \", false),\n      peg$c32 = \"(\",\n      peg$c33 = peg$literalExpectation(\"(\", false),\n      peg$c34 = \")\",\n      peg$c35 = peg$literalExpectation(\")\", false),\n      peg$c36 = function(arr) { return arr },\n      peg$c37 = function() { return [] },\n      peg$c38 = function(head, tail) {\n              if (tail) {\n                  tail.unshift(head);\n                  return tail;\n              } else {\n                  return [head];\n              }\n          },\n      peg$c39 = function(val) { return val },\n      peg$c40 = function(val, comment) {\n              var result = Object.create(null);\n              result.value = val.trim();\n              result.comment = comment.trim();\n              return result;\n          },\n      peg$c41 = \",\",\n      peg$c42 = peg$literalExpectation(\",\", false),\n      peg$c43 = /^[A-Za-z0-9_.]/,\n      peg$c44 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"0\", \"9\"], \"_\", \".\"], false, false),\n      peg$c45 = function(id) { return id.join('') },\n      peg$c46 = \".\",\n      peg$c47 = peg$literalExpectation(\".\", false),\n      peg$c48 = function(decimal) {\n              // store decimals as strings\n              // as JS doesn't differentiate bw strings and numbers\n              return decimal.join('')\n          },\n      peg$c49 = function(number) { return parseInt(number.join(''), 10) },\n      peg$c50 = function(str) { return '\"' + str + '\"' },\n      peg$c51 = function(str) { return str.join('') },\n      peg$c52 = peg$anyExpectation(),\n      peg$c53 = function(char) { return char },\n      peg$c54 = \"\\\\\",\n      peg$c55 = peg$literalExpectation(\"\\\\\", false),\n      peg$c56 = function() { return '\\\\\"' },\n      peg$c57 = function(literal) { return literal.join('') },\n      peg$c58 = /^[^;,\\n]/,\n      peg$c59 = peg$classExpectation([\";\", \",\", \"\\n\"], true, false),\n      peg$c60 = \"//\",\n      peg$c61 = peg$literalExpectation(\"//\", false),\n      peg$c62 = function(contents) { return contents },\n      peg$c63 = function(contents) { return contents.join('') },\n      peg$c64 = /^[0-9]/,\n      peg$c65 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n      peg$c66 = /^[A-Za-z]/,\n      peg$c67 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"]], false, false),\n      peg$c68 = \"\\\"\",\n      peg$c69 = peg$literalExpectation(\"\\\"\", false),\n      peg$c70 = peg$otherExpectation(\"whitespace\"),\n      peg$c71 = /^[\\t ]/,\n      peg$c72 = peg$classExpectation([\"\\t\", \" \"], false, false),\n      peg$c73 = /^[\\n\\r]/,\n      peg$c74 = peg$classExpectation([\"\\n\", \"\\r\"], false, false),\n\n      peg$currPos          = 0,\n      peg$savedPos         = 0,\n      peg$posDetailsCache  = [{ line: 1, column: 1 }],\n      peg$maxFailPos       = 0,\n      peg$maxFailExpected  = [],\n      peg$silentFails      = 0,\n\n      peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos], p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line:   details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails   = peg$computePosDetails(endPos);\n\n    return {\n      start: {\n        offset: startPos,\n        line:   startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line:   endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parseProject() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseSingleLineComment();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseInlineComment();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseObject();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseNewLine();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c0(s1, s4);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseObject() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 123) {\n      s1 = peg$c1;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c2); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseAssignmentList();\n      if (s2 === peg$FAILED) {\n        s2 = peg$parseEmptyBody();\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 125) {\n          s3 = peg$c3;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c4); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c5(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseEmptyBody() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c6();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseAssignmentList() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parseAssignment();\n      if (s4 === peg$FAILED) {\n        s4 = peg$parseDelimitedSection();\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parse_();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parseAssignment();\n          if (s4 === peg$FAILED) {\n            s4 = peg$parseDelimitedSection();\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse_();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c7(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseAssignment() {\n    var s0;\n\n    s0 = peg$parseSimpleAssignment();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseCommentedAssignment();\n    }\n\n    return s0;\n  }\n\n  function peg$parseSimpleAssignment() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseIdentifier();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 61) {\n          s3 = peg$c8;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c9); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseValue();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 59) {\n                s6 = peg$c10;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c11); }\n              }\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c12(s1, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseCommentedAssignment() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseCommentedIdentifier();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 61) {\n          s3 = peg$c8;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c9); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseValue();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 59) {\n                s6 = peg$c10;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c11); }\n              }\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c13(s1, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseIdentifier();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 61) {\n            s3 = peg$c8;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c9); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseCommentedValue();\n              if (s5 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 59) {\n                  s6 = peg$c10;\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c11); }\n                }\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c14(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseCommentedIdentifier() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseIdentifier();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseInlineComment();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c15(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseCommentedValue() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseValue();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseInlineComment();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c16(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseInlineComment() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseInlineCommentOpen();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c17.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c18); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c17.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c18); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseInlineCommentClose();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c19(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseInlineCommentOpen() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c20) {\n      s0 = peg$c20;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c21); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseInlineCommentClose() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c22) {\n      s0 = peg$c22;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c23); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseDelimitedSection() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseDelimitedSectionBegin();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseAssignmentList();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseEmptyBody();\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseDelimitedSectionEnd();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c24(s1, s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseDelimitedSectionBegin() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9) === peg$c25) {\n      s1 = peg$c25;\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c26); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseIdentifier();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 11) === peg$c27) {\n          s3 = peg$c27;\n          peg$currPos += 11;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c28); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseNewLine();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c29(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseDelimitedSectionEnd() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7) === peg$c30) {\n      s1 = peg$c30;\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c31); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseIdentifier();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 11) === peg$c27) {\n          s3 = peg$c27;\n          peg$currPos += 11;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c28); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseNewLine();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c29(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseArray() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 40) {\n      s1 = peg$c32;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c33); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseArrayBody();\n      if (s2 === peg$FAILED) {\n        s2 = peg$parseEmptyArray();\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 41) {\n          s3 = peg$c34;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c35); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c36(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseEmptyArray() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c37();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseArrayBody() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseArrayEntry();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseArrayBody();\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse_();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c38(s2, s4);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseArrayEntry() {\n    var s0;\n\n    s0 = peg$parseSimpleArrayEntry();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseCommentedArrayEntry();\n    }\n\n    return s0;\n  }\n\n  function peg$parseSimpleArrayEntry() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseValue();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseEndArrayEntry();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c39(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseCommentedArrayEntry() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parseValue();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseInlineComment();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseEndArrayEntry();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c40(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseEndArrayEntry() {\n    var s0, s1, s2, s3;\n\n    if (input.charCodeAt(peg$currPos) === 44) {\n      s0 = peg$c41;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c42); }\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parse_();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        peg$silentFails++;\n        if (input.charCodeAt(peg$currPos) === 41) {\n          s3 = peg$c34;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c35); }\n        }\n        peg$silentFails--;\n        if (s3 !== peg$FAILED) {\n          peg$currPos = s2;\n          s2 = void 0;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseIdentifier() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = [];\n    if (peg$c43.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c44); }\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        if (peg$c43.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c44); }\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c45(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseQuotedString();\n    }\n\n    return s0;\n  }\n\n  function peg$parseValue() {\n    var s0;\n\n    s0 = peg$parseObject();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseArray();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseNumberValue();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseStringValue();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseNumberValue() {\n    var s0;\n\n    s0 = peg$parseDecimalValue();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseIntegerValue();\n    }\n\n    return s0;\n  }\n\n  function peg$parseDecimalValue() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseIntegerValue();\n    if (s2 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 46) {\n        s3 = peg$c46;\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c47); }\n      }\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseIntegerValue();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c48(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseIntegerValue() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    peg$silentFails++;\n    s2 = peg$parseAlpha();\n    peg$silentFails--;\n    if (s2 === peg$FAILED) {\n      s1 = void 0;\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parseDigit();\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parseDigit();\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseNonTerminator();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = void 0;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c49(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseStringValue() {\n    var s0;\n\n    s0 = peg$parseQuotedString();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseLiteralString();\n    }\n\n    return s0;\n  }\n\n  function peg$parseQuotedString() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseDoubleQuote();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseQuotedBody();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseDoubleQuote();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c50(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseQuotedBody() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parseNonQuote();\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parseNonQuote();\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c51(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseNonQuote() {\n    var s0, s1, s2;\n\n    s0 = peg$parseEscapedQuote();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      peg$silentFails++;\n      s2 = peg$parseDoubleQuote();\n      peg$silentFails--;\n      if (s2 === peg$FAILED) {\n        s1 = void 0;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        if (input.length > peg$currPos) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c52); }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c53(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEscapedQuote() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 92) {\n      s1 = peg$c54;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c55); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseDoubleQuote();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c56();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseLiteralString() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parseLiteralChar();\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parseLiteralChar();\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c57(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseLiteralChar() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    peg$silentFails++;\n    s2 = peg$parseInlineCommentOpen();\n    peg$silentFails--;\n    if (s2 === peg$FAILED) {\n      s1 = void 0;\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseLineTerminator();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseNonTerminator();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c53(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseNonTerminator() {\n    var s0;\n\n    if (peg$c58.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c59); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSingleLineComment() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c60) {\n      s1 = peg$c60;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c61); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseOneLineString();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseNewLine();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c62(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseOneLineString() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parseNonLine();\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      s2 = peg$parseNonLine();\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c63(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseDigit() {\n    var s0;\n\n    if (peg$c64.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c65); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseAlpha() {\n    var s0;\n\n    if (peg$c66.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c67); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseDoubleQuote() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 34) {\n      s0 = peg$c68;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c69); }\n    }\n\n    return s0;\n  }\n\n  function peg$parse_() {\n    var s0, s1;\n\n    peg$silentFails++;\n    s0 = [];\n    s1 = peg$parsewhitespace();\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      s1 = peg$parsewhitespace();\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c70); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhitespace() {\n    var s0;\n\n    s0 = peg$parseNewLine();\n    if (s0 === peg$FAILED) {\n      if (peg$c71.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c72); }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseNonLine() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    peg$silentFails++;\n    s2 = peg$parseNewLine();\n    peg$silentFails--;\n    if (s2 === peg$FAILED) {\n      s1 = void 0;\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseChar();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c53(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseLineTerminator() {\n    var s0;\n\n    s0 = peg$parseNewLine();\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 59) {\n        s0 = peg$c10;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c11); }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseNewLine() {\n    var s0;\n\n    if (peg$c73.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c74); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseChar() {\n    var s0;\n\n    if (input.length > peg$currPos) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c52); }\n    }\n\n    return s0;\n  }\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse:       peg$parse\n};\n"]},"metadata":{},"sourceType":"script"}