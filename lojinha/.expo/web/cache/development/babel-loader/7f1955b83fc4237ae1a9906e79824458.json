{"ast":null,"code":"\"use strict\";\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar AndroidConfig = __importStar(require(\"../android\"));\n\nvar IOSConfig = __importStar(require(\"../ios\"));\n\nvar core_plugins_1 = require(\"./core-plugins\");\n\nvar expo_ads_admob_1 = __importDefault(require(\"./unversioned/expo-ads-admob\"));\n\nvar expo_apple_authentication_1 = __importDefault(require(\"./unversioned/expo-apple-authentication\"));\n\nvar expo_branch_1 = __importDefault(require(\"./unversioned/expo-branch\"));\n\nvar expo_document_picker_1 = __importDefault(require(\"./unversioned/expo-document-picker\"));\n\nvar expo_facebook_1 = __importDefault(require(\"./unversioned/expo-facebook\"));\n\nvar expo_notifications_1 = __importDefault(require(\"./unversioned/expo-notifications\"));\n\nvar expo_splash_screen_1 = __importDefault(require(\"./unversioned/expo-splash-screen\"));\n\nvar expo_updates_1 = __importDefault(require(\"./unversioned/expo-updates\"));\n\nexports.withExpoIOSPlugins = function (config, _ref) {\n  var bundleIdentifier = _ref.bundleIdentifier;\n  if (!config.ios) config.ios = {};\n  config.ios.bundleIdentifier = bundleIdentifier;\n  return core_plugins_1.withPlugins(config, [[IOSConfig.BundleIdentifier.withBundleIdentifier, {\n    bundleIdentifier: bundleIdentifier\n  }], IOSConfig.Google.withGoogle, IOSConfig.Name.withDisplayName, IOSConfig.Orientation.withOrientation, IOSConfig.RequiresFullScreen.withRequiresFullScreen, IOSConfig.Scheme.withScheme, IOSConfig.UserInterfaceStyle.withUserInterfaceStyle, IOSConfig.UsesNonExemptEncryption.withUsesNonExemptEncryption, IOSConfig.Version.withBuildNumber, IOSConfig.Version.withVersion, IOSConfig.Google.withGoogleServicesFile, IOSConfig.Entitlements.withAccessesContactNotes, IOSConfig.Entitlements.withAssociatedDomains, IOSConfig.DeviceFamily.withDeviceFamily, IOSConfig.Locales.withLocales, IOSConfig.Icons.withIcons]);\n};\n\nexports.withExpoAndroidPlugins = function (config, props) {\n  if (!config.android) config.android = {};\n  config.android.package = props.package;\n  return core_plugins_1.withPlugins(config, [AndroidConfig.Name.withNameSettingsGradle, AndroidConfig.GoogleServices.withClassPath, AndroidConfig.GoogleServices.withApplyPlugin, AndroidConfig.Package.withPackageGradle, AndroidConfig.Version.withVersion, AndroidConfig.Package.withPackageManifest, AndroidConfig.AllowBackup.withAllowBackup, AndroidConfig.Scheme.withScheme, AndroidConfig.Orientation.withOrientation, AndroidConfig.Permissions.withPermissions, AndroidConfig.UserInterfaceStyle.withUiModeManifest, AndroidConfig.GoogleMapsApiKey.withGoogleMapsApiKey, AndroidConfig.IntentFilters.withAndroidIntentFilters, AndroidConfig.UserInterfaceStyle.withUiModeMainActivity, AndroidConfig.Name.withName, AndroidConfig.GoogleServices.withGoogleServicesFile, AndroidConfig.RootViewBackgroundColor.withRootViewBackgroundColor, AndroidConfig.NavigationBar.withNavigationBar, AndroidConfig.StatusBar.withStatusBar, AndroidConfig.PrimaryColor.withPrimaryColor, AndroidConfig.Icon.withIcons, AndroidConfig.Package.withPackageRefactor]);\n};\n\nexports.withExpoVersionedSDKPlugins = function (config, _ref2) {\n  var expoUsername = _ref2.expoUsername;\n  return core_plugins_1.withPlugins(config, [expo_ads_admob_1.default, expo_apple_authentication_1.default, expo_notifications_1.default, [expo_updates_1.default, {\n    expoUsername: expoUsername\n  }], expo_branch_1.default, expo_document_picker_1.default, expo_facebook_1.default, expo_splash_screen_1.default]);\n};","map":{"version":3,"sources":["../../src/plugins/expo-plugins.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * These are the versioned first-party plugins with some of the future third-party plugins mixed in for legacy support.\n */\nimport { ConfigPlugin } from '../Plugin.types';\nimport * as AndroidConfig from '../android';\nimport * as IOSConfig from '../ios';\nimport { withPlugins } from './core-plugins';\nimport withAdMob from './unversioned/expo-ads-admob';\nimport withAppleAuthentication from './unversioned/expo-apple-authentication';\nimport withBranch from './unversioned/expo-branch';\nimport withDocumentPicker from './unversioned/expo-document-picker';\nimport withFacebook from './unversioned/expo-facebook';\nimport withNotifications from './unversioned/expo-notifications';\nimport withSplashScreen from './unversioned/expo-splash-screen';\nimport withUpdates from './unversioned/expo-updates';\n\n/**\n * Config plugin to apply all of the custom Expo iOS config plugins we support by default.\n * TODO: In the future most of this should go into versioned packages like expo-facebook, expo-updates, etc...\n */\nexport const withExpoIOSPlugins: ConfigPlugin<{\n  bundleIdentifier: string;\n}> = (config, { bundleIdentifier }) => {\n  // Set the bundle ID ahead of time.\n  if (!config.ios) config.ios = {};\n  config.ios.bundleIdentifier = bundleIdentifier;\n\n  return withPlugins(config, [\n    [IOSConfig.BundleIdentifier.withBundleIdentifier, { bundleIdentifier }],\n    IOSConfig.Google.withGoogle,\n    IOSConfig.Name.withDisplayName,\n    // IOSConfig.Name.withName,\n    IOSConfig.Orientation.withOrientation,\n    IOSConfig.RequiresFullScreen.withRequiresFullScreen,\n    IOSConfig.Scheme.withScheme,\n    IOSConfig.UserInterfaceStyle.withUserInterfaceStyle,\n    IOSConfig.UsesNonExemptEncryption.withUsesNonExemptEncryption,\n    IOSConfig.Version.withBuildNumber,\n    IOSConfig.Version.withVersion,\n    IOSConfig.Google.withGoogleServicesFile,\n    // Entitlements\n    IOSConfig.Entitlements.withAccessesContactNotes,\n    IOSConfig.Entitlements.withAssociatedDomains,\n    // XcodeProject\n    IOSConfig.DeviceFamily.withDeviceFamily,\n    IOSConfig.Locales.withLocales,\n    // Dangerous\n    IOSConfig.Icons.withIcons,\n  ]);\n};\n\n/**\n * Config plugin to apply all of the custom Expo Android config plugins we support by default.\n * TODO: In the future most of this should go into versioned packages like expo-facebook, expo-updates, etc...\n */\nexport const withExpoAndroidPlugins: ConfigPlugin<{\n  package: string;\n}> = (config, props) => {\n  // Set the package name ahead of time.\n  if (!config.android) config.android = {};\n  config.android.package = props.package;\n\n  return withPlugins(config, [\n    // settings.gradle\n    AndroidConfig.Name.withNameSettingsGradle,\n\n    // project build.gradle\n    AndroidConfig.GoogleServices.withClassPath,\n\n    // app/build.gradle\n    AndroidConfig.GoogleServices.withApplyPlugin,\n    AndroidConfig.Package.withPackageGradle,\n    AndroidConfig.Version.withVersion,\n\n    // AndroidManifest.xml\n    AndroidConfig.Package.withPackageManifest,\n    AndroidConfig.AllowBackup.withAllowBackup,\n    AndroidConfig.Scheme.withScheme,\n    AndroidConfig.Orientation.withOrientation,\n    AndroidConfig.Permissions.withPermissions,\n    AndroidConfig.UserInterfaceStyle.withUiModeManifest,\n    AndroidConfig.GoogleMapsApiKey.withGoogleMapsApiKey,\n    AndroidConfig.IntentFilters.withAndroidIntentFilters,\n\n    // MainActivity.*\n    AndroidConfig.UserInterfaceStyle.withUiModeMainActivity,\n\n    // strings.xml\n    AndroidConfig.Name.withName,\n\n    // Dangerous -- these plugins run in reverse order.\n    AndroidConfig.GoogleServices.withGoogleServicesFile,\n\n    // Modify colors.xml and styles.xml\n    AndroidConfig.RootViewBackgroundColor.withRootViewBackgroundColor,\n    AndroidConfig.NavigationBar.withNavigationBar,\n    AndroidConfig.StatusBar.withStatusBar,\n    AndroidConfig.PrimaryColor.withPrimaryColor,\n\n    AndroidConfig.Icon.withIcons,\n    // If we renamed the package, we should also move it around and rename it in source files\n    // Added last to ensure this plugin runs first. Out of tree solutions will mistakenly resolve the package incorrectly otherwise.\n    AndroidConfig.Package.withPackageRefactor,\n  ]);\n};\n\nexport const withExpoVersionedSDKPlugins: ConfigPlugin<{ expoUsername: string | null }> = (\n  config,\n  { expoUsername }\n) => {\n  return withPlugins(config, [\n    withAdMob,\n    withAppleAuthentication,\n    withNotifications,\n    [withUpdates, { expoUsername }],\n    withBranch,\n    withDocumentPicker,\n    withFacebook,\n    withSplashScreen,\n  ]);\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}