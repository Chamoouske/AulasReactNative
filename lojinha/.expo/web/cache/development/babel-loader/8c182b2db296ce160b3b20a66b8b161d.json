{"ast":null,"code":"'use strict';\n\nimport _extends from \"@babel/runtime/helpers/extends\";\n\nvar RCTDeviceEventEmitter = require(\"../EventEmitter/RCTDeviceEventEmitter\");\n\nvar invariant = require('invariant');\n\nimport NativeSettingsManager from \"./NativeSettingsManager\";\nvar subscriptions = [];\nvar Settings = {\n  _settings: NativeSettingsManager && NativeSettingsManager.getConstants().settings,\n  get: function get(key) {\n    return this._settings[key];\n  },\n  set: function set(settings) {\n    this._settings = _extends(this._settings, settings);\n    NativeSettingsManager.setValues(settings);\n  },\n  watchKeys: function watchKeys(keys, callback) {\n    if (typeof keys === 'string') {\n      keys = [keys];\n    }\n\n    invariant(Array.isArray(keys), 'keys should be a string or array of strings');\n    var sid = subscriptions.length;\n    subscriptions.push({\n      keys: keys,\n      callback: callback\n    });\n    return sid;\n  },\n  clearWatch: function clearWatch(watchId) {\n    if (watchId < subscriptions.length) {\n      subscriptions[watchId] = {\n        keys: [],\n        callback: null\n      };\n    }\n  },\n  _sendObservations: function _sendObservations(body) {\n    var _this = this;\n\n    Object.keys(body).forEach(function (key) {\n      var newValue = body[key];\n      var didChange = _this._settings[key] !== newValue;\n      _this._settings[key] = newValue;\n\n      if (didChange) {\n        subscriptions.forEach(function (sub) {\n          if (sub.keys.indexOf(key) !== -1 && sub.callback) {\n            sub.callback();\n          }\n        });\n      }\n    });\n  }\n};\nRCTDeviceEventEmitter.addListener('settingsUpdated', Settings._sendObservations.bind(Settings));\nmodule.exports = Settings;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Settings/Settings.ios.js"],"names":["RCTDeviceEventEmitter","require","invariant","NativeSettingsManager","subscriptions","Settings","_settings","getConstants","settings","get","key","set","setValues","watchKeys","keys","callback","Array","isArray","sid","length","push","clearWatch","watchId","_sendObservations","body","Object","forEach","newValue","didChange","sub","indexOf","addListener","bind","module","exports"],"mappings":"AAUA;;;;AAEA,IAAMA,qBAAqB,GAAGC,OAAO,yCAArC;;AAEA,IAAMC,SAAS,GAAGD,OAAO,CAAC,WAAD,CAAzB;;AAEA,OAAOE,qBAAP;AAEA,IAAMC,aAIJ,GAAG,EAJL;AAMA,IAAMC,QAAQ,GAAG;AACfC,EAAAA,SAAS,EAAGH,qBAAqB,IAC/BA,qBAAqB,CAACI,YAAtB,GAAqCC,QAFxB;AAIfC,EAAAA,GAJe,eAIXC,GAJW,EAIS;AACtB,WAAO,KAAKJ,SAAL,CAAeI,GAAf,CAAP;AACD,GANc;AAQfC,EAAAA,GARe,eAQXH,QARW,EAQO;AACpB,SAAKF,SAAL,GAAiB,SAAc,KAAKA,SAAnB,EAA8BE,QAA9B,CAAjB;AACAL,IAAAA,qBAAqB,CAACS,SAAtB,CAAgCJ,QAAhC;AACD,GAXc;AAafK,EAAAA,SAbe,qBAaLC,IAbK,EAayBC,QAbzB,EAaqD;AAClE,QAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;AAC5BA,MAAAA,IAAI,GAAG,CAACA,IAAD,CAAP;AACD;;AAEDZ,IAAAA,SAAS,CACPc,KAAK,CAACC,OAAN,CAAcH,IAAd,CADO,EAEP,6CAFO,CAAT;AAKA,QAAMI,GAAG,GAAGd,aAAa,CAACe,MAA1B;AACAf,IAAAA,aAAa,CAACgB,IAAd,CAAmB;AAACN,MAAAA,IAAI,EAAEA,IAAP;AAAaC,MAAAA,QAAQ,EAAEA;AAAvB,KAAnB;AACA,WAAOG,GAAP;AACD,GA1Bc;AA4BfG,EAAAA,UA5Be,sBA4BJC,OA5BI,EA4Ba;AAC1B,QAAIA,OAAO,GAAGlB,aAAa,CAACe,MAA5B,EAAoC;AAClCf,MAAAA,aAAa,CAACkB,OAAD,CAAb,GAAyB;AAACR,QAAAA,IAAI,EAAE,EAAP;AAAWC,QAAAA,QAAQ,EAAE;AAArB,OAAzB;AACD;AACF,GAhCc;AAkCfQ,EAAAA,iBAlCe,6BAkCGC,IAlCH,EAkCiB;AAAA;;AAC9BC,IAAAA,MAAM,CAACX,IAAP,CAAYU,IAAZ,EAAkBE,OAAlB,CAA0B,UAAAhB,GAAG,EAAI;AAC/B,UAAMiB,QAAQ,GAAGH,IAAI,CAACd,GAAD,CAArB;AACA,UAAMkB,SAAS,GAAG,KAAI,CAACtB,SAAL,CAAeI,GAAf,MAAwBiB,QAA1C;AACA,MAAA,KAAI,CAACrB,SAAL,CAAeI,GAAf,IAAsBiB,QAAtB;;AAEA,UAAIC,SAAJ,EAAe;AACbxB,QAAAA,aAAa,CAACsB,OAAd,CAAsB,UAAAG,GAAG,EAAI;AAC3B,cAAIA,GAAG,CAACf,IAAJ,CAASgB,OAAT,CAAiBpB,GAAjB,MAA0B,CAAC,CAA3B,IAAgCmB,GAAG,CAACd,QAAxC,EAAkD;AAChDc,YAAAA,GAAG,CAACd,QAAJ;AACD;AACF,SAJD;AAKD;AACF,KAZD;AAaD;AAhDc,CAAjB;AAmDAf,qBAAqB,CAAC+B,WAAtB,CACE,iBADF,EAEE1B,QAAQ,CAACkB,iBAAT,CAA2BS,IAA3B,CAAgC3B,QAAhC,CAFF;AAKA4B,MAAM,CAACC,OAAP,GAAiB7B,QAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst RCTDeviceEventEmitter = require('../EventEmitter/RCTDeviceEventEmitter');\n\nconst invariant = require('invariant');\n\nimport NativeSettingsManager from './NativeSettingsManager';\n\nconst subscriptions: Array<{\n  keys: Array<string>,\n  callback: ?Function,\n  ...\n}> = [];\n\nconst Settings = {\n  _settings: (NativeSettingsManager &&\n    NativeSettingsManager.getConstants().settings: any),\n\n  get(key: string): mixed {\n    return this._settings[key];\n  },\n\n  set(settings: Object) {\n    this._settings = Object.assign(this._settings, settings);\n    NativeSettingsManager.setValues(settings);\n  },\n\n  watchKeys(keys: string | Array<string>, callback: Function): number {\n    if (typeof keys === 'string') {\n      keys = [keys];\n    }\n\n    invariant(\n      Array.isArray(keys),\n      'keys should be a string or array of strings',\n    );\n\n    const sid = subscriptions.length;\n    subscriptions.push({keys: keys, callback: callback});\n    return sid;\n  },\n\n  clearWatch(watchId: number) {\n    if (watchId < subscriptions.length) {\n      subscriptions[watchId] = {keys: [], callback: null};\n    }\n  },\n\n  _sendObservations(body: Object) {\n    Object.keys(body).forEach(key => {\n      const newValue = body[key];\n      const didChange = this._settings[key] !== newValue;\n      this._settings[key] = newValue;\n\n      if (didChange) {\n        subscriptions.forEach(sub => {\n          if (sub.keys.indexOf(key) !== -1 && sub.callback) {\n            sub.callback();\n          }\n        });\n      }\n    });\n  },\n};\n\nRCTDeviceEventEmitter.addListener(\n  'settingsUpdated',\n  Settings._sendObservations.bind(Settings),\n);\n\nmodule.exports = Settings;\n"]},"metadata":{},"sourceType":"module"}