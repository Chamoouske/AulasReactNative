{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar fs_extra_1 = __importDefault(require(\"fs-extra\"));\n\nvar path_1 = __importDefault(require(\"path\"));\n\nvar EasBuildGradleScript_1 = __importDefault(require(\"./EasBuildGradleScript\"));\n\nvar Paths = __importStar(require(\"./Paths\"));\n\nvar APPLY_EAS_GRADLE = 'apply from: \"./eas-build.gradle\"';\n\nfunction hasApplyLine(content, applyLine) {\n  return content.replace(/\\r\\n/g, '\\n').split('\\n').some(function (line) {\n    return line === applyLine || line === applyLine.replace(/\"/g, \"'\");\n  });\n}\n\nfunction getEasBuildGradlePath(projectRoot) {\n  return path_1.default.join(projectRoot, 'android', 'app', 'eas-build.gradle');\n}\n\nexports.getEasBuildGradlePath = getEasBuildGradlePath;\n\nfunction configureEasBuildAsync(projectRoot) {\n  var buildGradlePath, easGradlePath, buildGradleContent, hasEasGradleApply;\n  return _regeneratorRuntime.async(function configureEasBuildAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          buildGradlePath = Paths.getAppBuildGradle(projectRoot);\n          easGradlePath = getEasBuildGradlePath(projectRoot);\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(fs_extra_1.default.writeFile(easGradlePath, EasBuildGradleScript_1.default));\n\n        case 4:\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(fs_extra_1.default.readFile(path_1.default.join(buildGradlePath), 'utf8'));\n\n        case 6:\n          buildGradleContent = _context.sent;\n          hasEasGradleApply = hasApplyLine(buildGradleContent, APPLY_EAS_GRADLE);\n\n          if (hasEasGradleApply) {\n            _context.next = 11;\n            break;\n          }\n\n          _context.next = 11;\n          return _regeneratorRuntime.awrap(fs_extra_1.default.writeFile(buildGradlePath, buildGradleContent.trim() + \"\\n\" + APPLY_EAS_GRADLE + \"\\n\"));\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.configureEasBuildAsync = configureEasBuildAsync;\n\nfunction isEasBuildGradleConfiguredAsync(projectRoot) {\n  var buildGradlePath, easGradlePath, hasEasGradleFile, buildGradleContent, hasEasGradleApply;\n  return _regeneratorRuntime.async(function isEasBuildGradleConfiguredAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          buildGradlePath = Paths.getAppBuildGradle(projectRoot);\n          easGradlePath = getEasBuildGradlePath(projectRoot);\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(fs_extra_1.default.pathExists(easGradlePath));\n\n        case 4:\n          hasEasGradleFile = _context2.sent;\n          _context2.next = 7;\n          return _regeneratorRuntime.awrap(fs_extra_1.default.readFile(path_1.default.join(buildGradlePath), 'utf8'));\n\n        case 7:\n          buildGradleContent = _context2.sent;\n          hasEasGradleApply = hasApplyLine(buildGradleContent, APPLY_EAS_GRADLE);\n          return _context2.abrupt(\"return\", hasEasGradleApply && hasEasGradleFile);\n\n        case 10:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.isEasBuildGradleConfiguredAsync = isEasBuildGradleConfiguredAsync;","map":{"version":3,"sources":["../../src/android/EasBuild.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,UAAA,GAAA,eAAA,CAAA,OAAA,CAAA,UAAA,CAAA,CAAA;;AACA,IAAA,MAAA,GAAA,eAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;AAEA,IAAA,sBAAA,GAAA,eAAA,CAAA,OAAA,0BAAA,CAAA;;AACA,IAAA,KAAA,GAAA,YAAA,CAAA,OAAA,WAAA,CAAA;;AAEA,IAAM,gBAAgB,GAAG,kCAAzB;;AAEA,SAAS,YAAT,CAAsB,OAAtB,EAAuC,SAAvC,EAAwD;AACtD,SACE,OAAO,CACJ,OADH,CACW,OADX,EACoB,IADpB,EAEG,KAFH,CAES,IAFT,EAIG,IAJH,CAIQ,UAAA,IAAI;AAAA,WAAI,IAAI,KAAK,SAAT,IAAsB,IAAI,KAAK,SAAS,CAAC,OAAV,CAAkB,IAAlB,EAAwB,GAAxB,CAAnC;AAAA,GAJZ,CADF;AAOD;;AAED,SAAgB,qBAAhB,CAAsC,WAAtC,EAAyD;AACvD,SAAO,MAAA,CAAA,OAAA,CAAK,IAAL,CAAU,WAAV,EAAuB,SAAvB,EAAkC,KAAlC,EAAyC,kBAAzC,CAAP;AACD;;AAFD,OAAA,CAAA,qBAAA,GAAA,qBAAA;;AAIO,SAAe,sBAAf,CAAsC,WAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AACC,UAAA,eADD,GACmB,KAAK,CAAC,iBAAN,CAAwB,WAAxB,CADnB;AAEC,UAAA,aAFD,GAEiB,qBAAqB,CAAC,WAAD,CAFtC;AAAA;AAAA,2CAIC,UAAA,CAAA,OAAA,CAAG,SAAH,CAAa,aAAb,EAA4B,sBAAA,CAAA,OAA5B,CAJD;;AAAA;AAAA;AAAA,2CAM4B,UAAA,CAAA,OAAA,CAAG,QAAH,CAAY,MAAA,CAAA,OAAA,CAAK,IAAL,CAAU,eAAV,CAAZ,EAAwC,MAAxC,CAN5B;;AAAA;AAMC,UAAA,kBAND;AAQC,UAAA,iBARD,GAQqB,YAAY,CAAC,kBAAD,EAAqB,gBAArB,CARjC;;AAAA,cAUA,iBAVA;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAWG,UAAA,CAAA,OAAA,CAAG,SAAH,CAAa,eAAb,EAAiC,kBAAkB,CAAC,IAAnB,EAAjC,UAA+D,gBAA/D,QAXH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAP,OAAA,CAAA,sBAAA,GAAA,sBAAA;;AAeO,SAAe,+BAAf,CAA+C,WAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AACC,UAAA,eADD,GACmB,KAAK,CAAC,iBAAN,CAAwB,WAAxB,CADnB;AAEC,UAAA,aAFD,GAEiB,qBAAqB,CAAC,WAAD,CAFtC;AAAA;AAAA,2CAI0B,UAAA,CAAA,OAAA,CAAG,UAAH,CAAc,aAAd,CAJ1B;;AAAA;AAIC,UAAA,gBAJD;AAAA;AAAA,2CAM4B,UAAA,CAAA,OAAA,CAAG,QAAH,CAAY,MAAA,CAAA,OAAA,CAAK,IAAL,CAAU,eAAV,CAAZ,EAAwC,MAAxC,CAN5B;;AAAA;AAMC,UAAA,kBAND;AAOC,UAAA,iBAPD,GAOqB,YAAY,CAAC,kBAAD,EAAqB,gBAArB,CAPjC;AAAA,4CASE,iBAAiB,IAAI,gBATvB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAP,OAAA,CAAA,+BAAA,GAAA,+BAAA","sourcesContent":["import fs from 'fs-extra';\nimport path from 'path';\n\nimport gradleScript from './EasBuildGradleScript';\nimport * as Paths from './Paths';\n\nconst APPLY_EAS_GRADLE = 'apply from: \"./eas-build.gradle\"';\n\nfunction hasApplyLine(content: string, applyLine: string): boolean {\n  return (\n    content\n      .replace(/\\r\\n/g, '\\n')\n      .split('\\n')\n      // Check for both single and double quotes\n      .some(line => line === applyLine || line === applyLine.replace(/\"/g, \"'\"))\n  );\n}\n\nexport function getEasBuildGradlePath(projectRoot: string): string {\n  return path.join(projectRoot, 'android', 'app', 'eas-build.gradle');\n}\n\nexport async function configureEasBuildAsync(projectRoot: string): Promise<void> {\n  const buildGradlePath = Paths.getAppBuildGradle(projectRoot);\n  const easGradlePath = getEasBuildGradlePath(projectRoot);\n\n  await fs.writeFile(easGradlePath, gradleScript);\n\n  const buildGradleContent = await fs.readFile(path.join(buildGradlePath), 'utf8');\n\n  const hasEasGradleApply = hasApplyLine(buildGradleContent, APPLY_EAS_GRADLE);\n\n  if (!hasEasGradleApply) {\n    await fs.writeFile(buildGradlePath, `${buildGradleContent.trim()}\\n${APPLY_EAS_GRADLE}\\n`);\n  }\n}\n\nexport async function isEasBuildGradleConfiguredAsync(projectRoot: string): Promise<boolean> {\n  const buildGradlePath = Paths.getAppBuildGradle(projectRoot);\n  const easGradlePath = getEasBuildGradlePath(projectRoot);\n\n  const hasEasGradleFile = await fs.pathExists(easGradlePath);\n\n  const buildGradleContent = await fs.readFile(path.join(buildGradlePath), 'utf8');\n  const hasEasGradleApply = hasApplyLine(buildGradleContent, APPLY_EAS_GRADLE);\n\n  return hasEasGradleApply && hasEasGradleFile;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}