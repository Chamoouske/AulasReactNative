{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/expo-linear-gradient/src/NativeLinearGradient.web.tsx\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport normalizeColor from 'react-native-web/src/modules/normalizeColor';\nexport default function NativeLinearGradient(_ref) {\n  var colors = _ref.colors,\n      locations = _ref.locations,\n      startPoint = _ref.startPoint,\n      endPoint = _ref.endPoint,\n      props = _objectWithoutProperties(_ref, [\"colors\", \"locations\", \"startPoint\", \"endPoint\"]);\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      layout = _React$useState2[0],\n      setLayout = _React$useState2[1];\n\n  var _React$useState3 = React.useState([]),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      gradientColors = _React$useState4[0],\n      setGradientColors = _React$useState4[1];\n\n  var _React$useState5 = React.useState(0),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      pseudoAngle = _React$useState6[0],\n      setPseudoAngle = _React$useState6[1];\n\n  var _ref2 = layout != null ? layout : {},\n      _ref2$width = _ref2.width,\n      width = _ref2$width === void 0 ? 1 : _ref2$width,\n      _ref2$height = _ref2.height,\n      height = _ref2$height === void 0 ? 1 : _ref2$height;\n\n  React.useEffect(function () {\n    var getControlPoints = function getControlPoints() {\n      var correctedStartPoint = [0, 0];\n\n      if (Array.isArray(startPoint)) {\n        correctedStartPoint = [startPoint[0] != null ? startPoint[0] : 0.0, startPoint[1] != null ? startPoint[1] : 0.0];\n      }\n\n      var correctedEndPoint = [0.0, 1.0];\n\n      if (Array.isArray(endPoint)) {\n        correctedEndPoint = [endPoint[0] != null ? endPoint[0] : 0.0, endPoint[1] != null ? endPoint[1] : 1.0];\n      }\n\n      return [correctedStartPoint, correctedEndPoint];\n    };\n\n    var _getControlPoints = getControlPoints(),\n        _getControlPoints2 = _slicedToArray(_getControlPoints, 2),\n        start = _getControlPoints2[0],\n        end = _getControlPoints2[1];\n\n    start[0] *= width;\n    end[0] *= width;\n    start[1] *= height;\n    end[1] *= height;\n    var py = end[1] - start[1];\n    var px = end[0] - start[0];\n    setPseudoAngle(90 + Math.atan2(py, px) * 180 / Math.PI);\n  }, [width, height, startPoint, endPoint]);\n  React.useEffect(function () {\n    var nextGradientColors = colors.map(function (color, index) {\n      var hexColor = normalizeColor(color);\n      var output = hexColor;\n\n      if (locations && locations[index]) {\n        var location = Math.max(0, Math.min(1, locations[index]));\n        var percentage = location * 100;\n        output += \" \" + percentage + \"%\";\n      }\n\n      return output;\n    });\n    setGradientColors(nextGradientColors);\n  }, [colors, locations]);\n  var colorStyle = gradientColors.join(',');\n  var backgroundImage = \"linear-gradient(\" + pseudoAngle + \"deg, \" + colorStyle + \")\";\n  return React.createElement(View, _extends({}, props, {\n    style: [props.style, {\n      backgroundImage: backgroundImage\n    }],\n    onLayout: function onLayout(event) {\n      var _event$nativeEvent$la = event.nativeEvent.layout,\n          x = _event$nativeEvent$la.x,\n          y = _event$nativeEvent$la.y,\n          width = _event$nativeEvent$la.width,\n          height = _event$nativeEvent$la.height;\n      var oldLayout = layout != null ? layout : {\n        x: 0,\n        y: 0,\n        width: 1,\n        height: 1\n      };\n\n      if (x !== oldLayout.x || y !== oldLayout.y || width !== oldLayout.width || height !== oldLayout.height) {\n        setLayout({\n          x: x,\n          y: y,\n          width: width,\n          height: height\n        });\n      }\n\n      if (props.onLayout) {\n        props.onLayout(event);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }));\n}","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/expo-linear-gradient/src/NativeLinearGradient.web.tsx"],"names":["React","normalizeColor","NativeLinearGradient","colors","locations","startPoint","endPoint","props","useState","layout","setLayout","gradientColors","setGradientColors","pseudoAngle","setPseudoAngle","width","height","useEffect","getControlPoints","correctedStartPoint","Array","isArray","correctedEndPoint","start","end","py","px","Math","atan2","PI","nextGradientColors","map","color","index","hexColor","output","location","max","min","percentage","colorStyle","join","backgroundImage","style","event","nativeEvent","x","y","oldLayout","onLayout"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { LayoutRectangle, View } from 'react-native';\nimport normalizeColor from 'react-native-web/src/modules/normalizeColor';\n\nimport { NativeLinearGradientPoint, NativeLinearGradientProps } from './NativeLinearGradient.types';\n\nexport default function NativeLinearGradient({\n  colors,\n  locations,\n  startPoint,\n  endPoint,\n  ...props\n}: NativeLinearGradientProps): React.ReactElement {\n  const [layout, setLayout] = React.useState<LayoutRectangle | null>(null);\n  const [gradientColors, setGradientColors] = React.useState<string[]>([]);\n  const [pseudoAngle, setPseudoAngle] = React.useState<number>(0);\n\n  const { width = 1, height = 1 } = layout ?? {};\n  React.useEffect(() => {\n    const getControlPoints = (): NativeLinearGradientPoint[] => {\n      let correctedStartPoint: NativeLinearGradientPoint = [0, 0];\n      if (Array.isArray(startPoint)) {\n        correctedStartPoint = [\n          startPoint[0] != null ? startPoint[0] : 0.0,\n          startPoint[1] != null ? startPoint[1] : 0.0,\n        ];\n      }\n      let correctedEndPoint: NativeLinearGradientPoint = [0.0, 1.0];\n      if (Array.isArray(endPoint)) {\n        correctedEndPoint = [\n          endPoint[0] != null ? endPoint[0] : 0.0,\n          endPoint[1] != null ? endPoint[1] : 1.0,\n        ];\n      }\n      return [correctedStartPoint, correctedEndPoint];\n    };\n\n    const [start, end] = getControlPoints();\n    start[0] *= width;\n    end[0] *= width;\n    start[1] *= height;\n    end[1] *= height;\n    const py = end[1] - start[1];\n    const px = end[0] - start[0];\n\n    setPseudoAngle(90 + (Math.atan2(py, px) * 180) / Math.PI);\n  }, [width, height, startPoint, endPoint]);\n\n  React.useEffect(() => {\n    const nextGradientColors = colors.map((color: number, index: number): string => {\n      const hexColor = normalizeColor(color);\n      let output = hexColor;\n      if (locations && locations[index]) {\n        const location = Math.max(0, Math.min(1, locations[index]));\n        // Convert 0...1 to 0...100\n        const percentage = location * 100;\n        output += ` ${percentage}%`;\n      }\n      return output;\n    });\n\n    setGradientColors(nextGradientColors);\n  }, [colors, locations]);\n\n  const colorStyle = gradientColors.join(',');\n  const backgroundImage = `linear-gradient(${pseudoAngle}deg, ${colorStyle})`;\n  // TODO(Bacon): In the future we could consider adding `backgroundRepeat: \"no-repeat\"`. For more\n  // browser support.\n  return (\n    <View\n      {...props}\n      style={[\n        props.style,\n        // @ts-ignore: [ts] Property 'backgroundImage' does not exist on type 'ViewStyle'.\n        { backgroundImage },\n      ]}\n      onLayout={event => {\n        const { x, y, width, height } = event.nativeEvent.layout;\n        const oldLayout = layout ?? { x: 0, y: 0, width: 1, height: 1 };\n        // don't set new layout state unless the layout has actually changed\n        if (\n          x !== oldLayout.x ||\n          y !== oldLayout.y ||\n          width !== oldLayout.width ||\n          height !== oldLayout.height\n        ) {\n          setLayout({ x, y, width, height });\n        }\n\n        if (props.onLayout) {\n          props.onLayout(event);\n        }\n      }}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}