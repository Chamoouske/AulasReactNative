{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _execa() {\n  var data = _interopRequireDefault(require(\"execa\"));\n\n  _execa = function _execa() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _adb = _interopRequireDefault(require(\"./adb\"));\n\nvar _runOnAllDevices = _interopRequireDefault(require(\"./runOnAllDevices\"));\n\nvar _tryRunAdbReverse = _interopRequireDefault(require(\"./tryRunAdbReverse\"));\n\nvar _tryLaunchAppOnDevice = _interopRequireDefault(require(\"./tryLaunchAppOnDevice\"));\n\nvar _getAdbPath = _interopRequireDefault(require(\"./getAdbPath\"));\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _warnAboutManuallyLinkedLibs = _interopRequireDefault(require(\"../../link/warnAboutManuallyLinkedLibs\"));\n\nvar _getAndroidProject = require(\"../../utils/getAndroidProject\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction displayWarnings(config, args) {\n  (0, _warnAboutManuallyLinkedLibs.default)(config);\n\n  if (args.appFolder) {\n    _cliTools().logger.warn('Using deprecated \"--appFolder\" flag. Use \"project.android.appName\" in react-native.config.js instead.');\n  }\n\n  if (args.root) {\n    _cliTools().logger.warn('Using deprecated \"--root\" flag. App root is discovered automatically. Alternatively, set \"project.android.sourceDir\" in react-native.config.js.');\n  }\n}\n\nfunction runAndroid(_argv, config, args) {\n  var androidProject;\n  return _regeneratorRuntime.async(function runAndroid$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          displayWarnings(config, args);\n          androidProject = (0, _getAndroidProject.getAndroidProject)(config);\n\n          if (!args.jetifier) {\n            _context.next = 12;\n            break;\n          }\n\n          _cliTools().logger.info(\"Running \" + _chalk().default.bold('jetifier') + \" to migrate libraries to AndroidX. \" + _chalk().default.dim('You can disable it using \"--no-jetifier\" flag.'));\n\n          _context.prev = 4;\n          _context.next = 7;\n          return _regeneratorRuntime.awrap((0, _execa().default)(require.resolve('jetifier/bin/jetify'), {\n            stdio: 'inherit'\n          }));\n\n        case 7:\n          _context.next = 12;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](4);\n          throw new (_cliTools().CLIError)('Failed to run jetifier.', _context.t0);\n\n        case 12:\n          if (args.packager) {\n            _context.next = 14;\n            break;\n          }\n\n          return _context.abrupt(\"return\", buildAndRun(args, androidProject));\n\n        case 14:\n          return _context.abrupt(\"return\", (0, _cliTools().isPackagerRunning)(args.port).then(function (result) {\n            if (result === 'running') {\n              _cliTools().logger.info('JS server already running.');\n            } else if (result === 'unrecognized') {\n              _cliTools().logger.warn('JS server not recognized, continuing with build...');\n            } else {\n              _cliTools().logger.info('Starting JS server...');\n\n              try {\n                startServerInNewWindow(args.port, args.terminal, config.reactNativePath);\n              } catch (error) {\n                _cliTools().logger.warn(\"Failed to automatically start the packager server. Please run \\\"react-native start\\\" manually. Error details: \" + error.message);\n              }\n            }\n\n            return buildAndRun(args, androidProject);\n          }));\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[4, 9]], Promise);\n}\n\nfunction buildAndRun(args, androidProject) {\n  process.chdir(androidProject.sourceDir);\n  var cmd = process.platform.startsWith('win') ? 'gradlew.bat' : './gradlew';\n  var appFolder = args.appFolder;\n  var packageName = (0, _getAndroidProject.getPackageName)(androidProject, appFolder);\n  var adbPath = (0, _getAdbPath.default)();\n\n  if (args.deviceId) {\n    return runOnSpecificDevice(args, cmd, packageName, adbPath, androidProject);\n  } else {\n    return (0, _runOnAllDevices.default)(args, cmd, packageName, adbPath, androidProject);\n  }\n}\n\nfunction runOnSpecificDevice(args, gradlew, packageName, adbPath, androidProject) {\n  var devices = _adb.default.getDevices(adbPath);\n\n  var deviceId = args.deviceId;\n\n  if (devices.length > 0 && deviceId) {\n    if (devices.indexOf(deviceId) !== -1) {\n      buildApk(gradlew, androidProject.sourceDir);\n      installAndLaunchOnDevice(args, deviceId, packageName, adbPath, androidProject);\n    } else {\n      var _cliTools$logger;\n\n      (_cliTools$logger = _cliTools().logger).error.apply(_cliTools$logger, [\"Could not find device with the id: \\\"\" + deviceId + \"\\\". Please choose one of the following:\"].concat(_toConsumableArray(devices)));\n    }\n  } else {\n    _cliTools().logger.error('No Android device or emulator connected.');\n  }\n}\n\nfunction buildApk(gradlew, sourceDir) {\n  try {\n    var gradleArgs = ['build', '-x', 'lint'];\n\n    _cliTools().logger.info('Building the app...');\n\n    _cliTools().logger.debug(\"Running command \\\"\" + gradlew + \" \" + gradleArgs.join(' ') + \"\\\"\");\n\n    _execa().default.sync(gradlew, gradleArgs, {\n      stdio: 'inherit',\n      cwd: sourceDir\n    });\n  } catch (error) {\n    throw new (_cliTools().CLIError)('Failed to build the app.', error);\n  }\n}\n\nfunction tryInstallAppOnDevice(args, adbPath, device, androidProject) {\n  try {\n    var appName = androidProject.appName,\n        sourceDir = androidProject.sourceDir;\n    var appFolder = args.appFolder;\n    var variant = args.variant.toLowerCase();\n    var buildDirectory = sourceDir + \"/\" + appName + \"/build/outputs/apk/\" + variant;\n    var apkFile = getInstallApkName(appFolder || appName, adbPath, variant, device, buildDirectory);\n    var pathToApk = buildDirectory + \"/\" + apkFile;\n    var adbArgs = ['-s', device, 'install', '-r', '-d', pathToApk];\n\n    _cliTools().logger.info(\"Installing the app on the device \\\"\" + device + \"\\\"...\");\n\n    _cliTools().logger.debug(\"Running command \\\"cd android && adb -s \" + device + \" install -r -d \" + pathToApk + \"\\\"\");\n\n    _execa().default.sync(adbPath, adbArgs, {\n      stdio: 'inherit'\n    });\n  } catch (error) {\n    throw new (_cliTools().CLIError)('Failed to install the app on the device.', error);\n  }\n}\n\nfunction getInstallApkName(appName, adbPath, variant, device, buildDirectory) {\n  var availableCPUs = _adb.default.getAvailableCPUs(adbPath, device);\n\n  for (var _iterator = _createForOfIteratorHelperLoose(availableCPUs.concat('universal')), _step; !(_step = _iterator()).done;) {\n    var availableCPU = _step.value;\n\n    var _apkName = appName + \"-\" + availableCPU + \"-\" + variant + \".apk\";\n\n    if (_fs().default.existsSync(buildDirectory + \"/\" + _apkName)) {\n      return _apkName;\n    }\n  }\n\n  var apkName = appName + \"-\" + variant + \".apk\";\n\n  if (_fs().default.existsSync(buildDirectory + \"/\" + apkName)) {\n    return apkName;\n  }\n\n  throw new (_cliTools().CLIError)('Could not find the correct install APK file.');\n}\n\nfunction installAndLaunchOnDevice(args, selectedDevice, packageName, adbPath, androidProject) {\n  (0, _tryRunAdbReverse.default)(args.port, selectedDevice);\n  tryInstallAppOnDevice(args, adbPath, selectedDevice, androidProject);\n  (0, _tryLaunchAppOnDevice.default)(selectedDevice, packageName, adbPath, args);\n}\n\nfunction startServerInNewWindow(port, terminal, reactNativePath) {\n  var isWindows = /^win/.test(process.platform);\n  var scriptFile = isWindows ? 'launchPackager.bat' : 'launchPackager.command';\n  var packagerEnvFilename = isWindows ? '.packager.bat' : '.packager.env';\n  var portExportContent = isWindows ? \"set RCT_METRO_PORT=\" + port : \"export RCT_METRO_PORT=\" + port;\n\n  var launchPackagerScript = _path().default.join(reactNativePath, \"scripts/\" + scriptFile);\n\n  var scriptsDir = _path().default.dirname(launchPackagerScript);\n\n  var packagerEnvFile = _path().default.join(scriptsDir, packagerEnvFilename);\n\n  var procConfig = {\n    cwd: scriptsDir\n  };\n\n  _fs().default.writeFileSync(packagerEnvFile, portExportContent, {\n    encoding: 'utf8',\n    flag: 'w'\n  });\n\n  if (process.platform === 'darwin') {\n    try {\n      return _execa().default.sync('open', ['-a', terminal, launchPackagerScript], procConfig);\n    } catch (error) {\n      return _execa().default.sync('open', [launchPackagerScript], procConfig);\n    }\n  }\n\n  if (process.platform === 'linux') {\n    try {\n      return _execa().default.sync(terminal, ['-e', \"sh \" + launchPackagerScript], _objectSpread(_objectSpread({}, procConfig), {}, {\n        detached: true\n      }));\n    } catch (error) {\n      return _execa().default.sync('sh', [launchPackagerScript], procConfig);\n    }\n  }\n\n  if (/^win/.test(process.platform)) {\n    return (0, _execa().default)('cmd.exe', ['/C', launchPackagerScript], _objectSpread(_objectSpread({}, procConfig), {}, {\n      detached: true,\n      stdio: 'ignore'\n    }));\n  }\n\n  _cliTools().logger.error(\"Cannot start the packager. Unknown platform \" + process.platform);\n\n  return;\n}\n\nvar _default = {\n  name: 'run-android',\n  description: 'builds your app and starts it on a connected Android emulator or device',\n  func: runAndroid,\n  options: [{\n    name: '--root [string]',\n    description: '[DEPRECATED - root is discovered automatically] Override the root directory for the android build (which contains the android directory)',\n    default: ''\n  }, {\n    name: '--variant [string]',\n    description: \"Specify your app's build variant\",\n    default: 'debug'\n  }, {\n    name: '--appFolder [string]',\n    description: '[DEPRECATED – use \"project.android.appName\" in react-native.config.js] Specify a different application folder name for the android source. If not, we assume is \"app\"'\n  }, {\n    name: '--appId [string]',\n    description: 'Specify an applicationId to launch after build. If not specified, `package` from AndroidManifest.xml will be used.',\n    default: ''\n  }, {\n    name: '--appIdSuffix [string]',\n    description: 'Specify an applicationIdSuffix to launch after build.',\n    default: ''\n  }, {\n    name: '--main-activity [string]',\n    description: 'Name of the activity to start',\n    default: 'MainActivity'\n  }, {\n    name: '--deviceId [string]',\n    description: 'builds your app and starts it on a specific device/simulator with the ' + 'given device id (listed by running \"adb devices\" on the command line).'\n  }, {\n    name: '--no-packager',\n    description: 'Do not launch packager while building'\n  }, {\n    name: '--port [number]',\n    default: process.env.RCT_METRO_PORT || 8081,\n    parse: function parse(val) {\n      return Number(val);\n    }\n  }, {\n    name: '--terminal [string]',\n    description: 'Launches the Metro Bundler in a new window using the specified terminal path.',\n    default: (0, _cliTools().getDefaultUserTerminal)()\n  }, {\n    name: '--tasks [list]',\n    description: 'Run custom Gradle tasks. By default it\\'s \"installDebug\"',\n    parse: function parse(val) {\n      return val.split(',');\n    }\n  }, {\n    name: '--no-jetifier',\n    description: 'Do not run \"jetifier\" – the AndroidX transition tool. By default it runs before Gradle to ease working with libraries that don\\'t support AndroidX yet. See more at: https://www.npmjs.com/package/jetifier.',\n    default: false\n  }]\n};\nexports.default = _default;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/index.js"],"names":["Object","defineProperty","exports","value","default","_path","data","_interopRequireDefault","require","_execa","_chalk","_fs","_adb","_runOnAllDevices","_tryRunAdbReverse","_tryLaunchAppOnDevice","_getAdbPath","_cliTools","_warnAboutManuallyLinkedLibs","_getAndroidProject","obj","__esModule","displayWarnings","config","args","appFolder","logger","warn","root","runAndroid","_argv","androidProject","getAndroidProject","jetifier","info","bold","dim","resolve","stdio","CLIError","packager","buildAndRun","isPackagerRunning","port","then","result","startServerInNewWindow","terminal","reactNativePath","error","message","process","chdir","sourceDir","cmd","platform","startsWith","packageName","getPackageName","adbPath","deviceId","runOnSpecificDevice","gradlew","devices","getDevices","length","indexOf","buildApk","installAndLaunchOnDevice","gradleArgs","debug","join","sync","cwd","tryInstallAppOnDevice","device","appName","variant","toLowerCase","buildDirectory","apkFile","getInstallApkName","pathToApk","adbArgs","availableCPUs","getAvailableCPUs","concat","availableCPU","apkName","existsSync","selectedDevice","isWindows","test","scriptFile","packagerEnvFilename","portExportContent","launchPackagerScript","scriptsDir","dirname","packagerEnvFile","procConfig","writeFileSync","encoding","flag","detached","_default","name","description","func","options","env","RCT_METRO_PORT","parse","val","Number","getDefaultUserTerminal","split"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _path() {\n  const data = _interopRequireDefault(require(\"path\"));\n\n  _path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _execa() {\n  const data = _interopRequireDefault(require(\"execa\"));\n\n  _execa = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require(\"chalk\"));\n\n  _chalk = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _fs() {\n  const data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _adb = _interopRequireDefault(require(\"./adb\"));\n\nvar _runOnAllDevices = _interopRequireDefault(require(\"./runOnAllDevices\"));\n\nvar _tryRunAdbReverse = _interopRequireDefault(require(\"./tryRunAdbReverse\"));\n\nvar _tryLaunchAppOnDevice = _interopRequireDefault(require(\"./tryLaunchAppOnDevice\"));\n\nvar _getAdbPath = _interopRequireDefault(require(\"./getAdbPath\"));\n\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _warnAboutManuallyLinkedLibs = _interopRequireDefault(require(\"../../link/warnAboutManuallyLinkedLibs\"));\n\nvar _getAndroidProject = require(\"../../utils/getAndroidProject\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction displayWarnings(config, args) {\n  (0, _warnAboutManuallyLinkedLibs.default)(config);\n\n  if (args.appFolder) {\n    _cliTools().logger.warn('Using deprecated \"--appFolder\" flag. Use \"project.android.appName\" in react-native.config.js instead.');\n  }\n\n  if (args.root) {\n    _cliTools().logger.warn('Using deprecated \"--root\" flag. App root is discovered automatically. Alternatively, set \"project.android.sourceDir\" in react-native.config.js.');\n  }\n}\n\n/**\n * Starts the app on a connected Android emulator or device.\n */\nasync function runAndroid(_argv, config, args) {\n  displayWarnings(config, args);\n  const androidProject = (0, _getAndroidProject.getAndroidProject)(config);\n\n  if (args.jetifier) {\n    _cliTools().logger.info(`Running ${_chalk().default.bold('jetifier')} to migrate libraries to AndroidX. ${_chalk().default.dim('You can disable it using \"--no-jetifier\" flag.')}`);\n\n    try {\n      await (0, _execa().default)(require.resolve('jetifier/bin/jetify'), {\n        stdio: 'inherit'\n      });\n    } catch (error) {\n      throw new (_cliTools().CLIError)('Failed to run jetifier.', error);\n    }\n  }\n\n  if (!args.packager) {\n    return buildAndRun(args, androidProject);\n  }\n\n  return (0, _cliTools().isPackagerRunning)(args.port).then(result => {\n    if (result === 'running') {\n      _cliTools().logger.info('JS server already running.');\n    } else if (result === 'unrecognized') {\n      _cliTools().logger.warn('JS server not recognized, continuing with build...');\n    } else {\n      // result == 'not_running'\n      _cliTools().logger.info('Starting JS server...');\n\n      try {\n        startServerInNewWindow(args.port, args.terminal, config.reactNativePath);\n      } catch (error) {\n        _cliTools().logger.warn(`Failed to automatically start the packager server. Please run \"react-native start\" manually. Error details: ${error.message}`);\n      }\n    }\n\n    return buildAndRun(args, androidProject);\n  });\n} // Builds the app and runs it on a connected emulator / device.\n\n\nfunction buildAndRun(args, androidProject) {\n  process.chdir(androidProject.sourceDir);\n  const cmd = process.platform.startsWith('win') ? 'gradlew.bat' : './gradlew';\n  const {\n    appFolder\n  } = args;\n  const packageName = (0, _getAndroidProject.getPackageName)(androidProject, appFolder);\n  const adbPath = (0, _getAdbPath.default)();\n\n  if (args.deviceId) {\n    return runOnSpecificDevice(args, cmd, packageName, adbPath, androidProject);\n  } else {\n    return (0, _runOnAllDevices.default)(args, cmd, packageName, adbPath, androidProject);\n  }\n}\n\nfunction runOnSpecificDevice(args, gradlew, packageName, adbPath, androidProject) {\n  const devices = _adb.default.getDevices(adbPath);\n\n  const {\n    deviceId\n  } = args;\n\n  if (devices.length > 0 && deviceId) {\n    if (devices.indexOf(deviceId) !== -1) {\n      buildApk(gradlew, androidProject.sourceDir);\n      installAndLaunchOnDevice(args, deviceId, packageName, adbPath, androidProject);\n    } else {\n      _cliTools().logger.error(`Could not find device with the id: \"${deviceId}\". Please choose one of the following:`, ...devices);\n    }\n  } else {\n    _cliTools().logger.error('No Android device or emulator connected.');\n  }\n}\n\nfunction buildApk(gradlew, sourceDir) {\n  try {\n    // using '-x lint' in order to ignore linting errors while building the apk\n    const gradleArgs = ['build', '-x', 'lint'];\n\n    _cliTools().logger.info('Building the app...');\n\n    _cliTools().logger.debug(`Running command \"${gradlew} ${gradleArgs.join(' ')}\"`);\n\n    _execa().default.sync(gradlew, gradleArgs, {\n      stdio: 'inherit',\n      cwd: sourceDir\n    });\n  } catch (error) {\n    throw new (_cliTools().CLIError)('Failed to build the app.', error);\n  }\n}\n\nfunction tryInstallAppOnDevice(args, adbPath, device, androidProject) {\n  try {\n    // \"app\" is usually the default value for Android apps with only 1 app\n    const {\n      appName,\n      sourceDir\n    } = androidProject;\n    const {\n      appFolder\n    } = args;\n    const variant = args.variant.toLowerCase();\n    const buildDirectory = `${sourceDir}/${appName}/build/outputs/apk/${variant}`;\n    const apkFile = getInstallApkName(appFolder || appName, // TODO: remove appFolder\n    adbPath, variant, device, buildDirectory);\n    const pathToApk = `${buildDirectory}/${apkFile}`;\n    const adbArgs = ['-s', device, 'install', '-r', '-d', pathToApk];\n\n    _cliTools().logger.info(`Installing the app on the device \"${device}\"...`);\n\n    _cliTools().logger.debug(`Running command \"cd android && adb -s ${device} install -r -d ${pathToApk}\"`);\n\n    _execa().default.sync(adbPath, adbArgs, {\n      stdio: 'inherit'\n    });\n  } catch (error) {\n    throw new (_cliTools().CLIError)('Failed to install the app on the device.', error);\n  }\n}\n\nfunction getInstallApkName(appName, adbPath, variant, device, buildDirectory) {\n  const availableCPUs = _adb.default.getAvailableCPUs(adbPath, device); // check if there is an apk file like app-armeabi-v7a-debug.apk\n\n\n  for (const availableCPU of availableCPUs.concat('universal')) {\n    const apkName = `${appName}-${availableCPU}-${variant}.apk`;\n\n    if (_fs().default.existsSync(`${buildDirectory}/${apkName}`)) {\n      return apkName;\n    }\n  } // check if there is a default file like app-debug.apk\n\n\n  const apkName = `${appName}-${variant}.apk`;\n\n  if (_fs().default.existsSync(`${buildDirectory}/${apkName}`)) {\n    return apkName;\n  }\n\n  throw new (_cliTools().CLIError)('Could not find the correct install APK file.');\n}\n\nfunction installAndLaunchOnDevice(args, selectedDevice, packageName, adbPath, androidProject) {\n  (0, _tryRunAdbReverse.default)(args.port, selectedDevice);\n  tryInstallAppOnDevice(args, adbPath, selectedDevice, androidProject);\n  (0, _tryLaunchAppOnDevice.default)(selectedDevice, packageName, adbPath, args);\n}\n\nfunction startServerInNewWindow(port, terminal, reactNativePath) {\n  /**\n   * Set up OS-specific filenames and commands\n   */\n  const isWindows = /^win/.test(process.platform);\n  const scriptFile = isWindows ? 'launchPackager.bat' : 'launchPackager.command';\n  const packagerEnvFilename = isWindows ? '.packager.bat' : '.packager.env';\n  const portExportContent = isWindows ? `set RCT_METRO_PORT=${port}` : `export RCT_METRO_PORT=${port}`;\n  /**\n   * Set up the `.packager.(env|bat)` file to ensure the packager starts on the right port.\n   */\n\n  const launchPackagerScript = _path().default.join(reactNativePath, `scripts/${scriptFile}`);\n  /**\n   * Set up the `launchpackager.(command|bat)` file.\n   * It lives next to `.packager.(bat|env)`\n   */\n\n\n  const scriptsDir = _path().default.dirname(launchPackagerScript);\n\n  const packagerEnvFile = _path().default.join(scriptsDir, packagerEnvFilename);\n\n  const procConfig = {\n    cwd: scriptsDir\n  };\n  /**\n   * Ensure we overwrite file by passing the `w` flag\n   */\n\n  _fs().default.writeFileSync(packagerEnvFile, portExportContent, {\n    encoding: 'utf8',\n    flag: 'w'\n  });\n\n  if (process.platform === 'darwin') {\n    try {\n      return _execa().default.sync('open', ['-a', terminal, launchPackagerScript], procConfig);\n    } catch (error) {\n      return _execa().default.sync('open', [launchPackagerScript], procConfig);\n    }\n  }\n\n  if (process.platform === 'linux') {\n    try {\n      return _execa().default.sync(terminal, ['-e', `sh ${launchPackagerScript}`], { ...procConfig,\n        detached: true\n      });\n    } catch (error) {\n      // By default, the child shell process will be attached to the parent\n      return _execa().default.sync('sh', [launchPackagerScript], procConfig);\n    }\n  }\n\n  if (/^win/.test(process.platform)) {\n    // Awaiting this causes the CLI to hang indefinitely, so this must execute without await.\n    return (0, _execa().default)('cmd.exe', ['/C', launchPackagerScript], { ...procConfig,\n      detached: true,\n      stdio: 'ignore'\n    });\n  }\n\n  _cliTools().logger.error(`Cannot start the packager. Unknown platform ${process.platform}`);\n\n  return;\n}\n\nvar _default = {\n  name: 'run-android',\n  description: 'builds your app and starts it on a connected Android emulator or device',\n  func: runAndroid,\n  options: [{\n    name: '--root [string]',\n    description: '[DEPRECATED - root is discovered automatically] Override the root directory for the android build (which contains the android directory)',\n    default: ''\n  }, {\n    name: '--variant [string]',\n    description: \"Specify your app's build variant\",\n    default: 'debug'\n  }, {\n    name: '--appFolder [string]',\n    description: '[DEPRECATED – use \"project.android.appName\" in react-native.config.js] Specify a different application folder name for the android source. If not, we assume is \"app\"'\n  }, {\n    name: '--appId [string]',\n    description: 'Specify an applicationId to launch after build. If not specified, `package` from AndroidManifest.xml will be used.',\n    default: ''\n  }, {\n    name: '--appIdSuffix [string]',\n    description: 'Specify an applicationIdSuffix to launch after build.',\n    default: ''\n  }, {\n    name: '--main-activity [string]',\n    description: 'Name of the activity to start',\n    default: 'MainActivity'\n  }, {\n    name: '--deviceId [string]',\n    description: 'builds your app and starts it on a specific device/simulator with the ' + 'given device id (listed by running \"adb devices\" on the command line).'\n  }, {\n    name: '--no-packager',\n    description: 'Do not launch packager while building'\n  }, {\n    name: '--port [number]',\n    default: process.env.RCT_METRO_PORT || 8081,\n    parse: val => Number(val)\n  }, {\n    name: '--terminal [string]',\n    description: 'Launches the Metro Bundler in a new window using the specified terminal path.',\n    default: (0, _cliTools().getDefaultUserTerminal)()\n  }, {\n    name: '--tasks [list]',\n    description: 'Run custom Gradle tasks. By default it\\'s \"installDebug\"',\n    parse: val => val.split(',')\n  }, {\n    name: '--no-jetifier',\n    description: 'Do not run \"jetifier\" – the AndroidX transition tool. By default it runs before Gradle to ease working with libraries that don\\'t support AndroidX yet. See more at: https://www.npmjs.com/package/jetifier.',\n    default: false\n  }]\n};\nexports.default = _default;\n\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}