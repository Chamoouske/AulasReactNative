{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { EventEmitter, UnavailabilityError } from '@unimodules/core';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport uuidv4 from 'uuid/v4';\nimport ExponentFileSystem from \"./ExponentFileSystem\";\nimport { DownloadOptions, DownloadPauseState, DownloadProgressCallback, DownloadProgressData, DownloadResult, EncodingType, FileInfo, FileSystemAcceptedUploadHttpMethod, FileSystemDownloadResult, FileSystemSessionType, FileSystemUploadOptions, FileSystemUploadResult, FileSystemUploadType, ProgressEvent, ReadingOptions, WritingOptions } from \"./FileSystem.types\";\n\nif (!ExponentFileSystem) {\n  console.warn(\"No native ExponentFileSystem module found, are you sure the expo-file-system's module is linked properly?\");\n}\n\nvar _unused = new EventEmitter(ExponentFileSystem);\n\nexport { DownloadOptions, DownloadPauseState, DownloadProgressCallback, DownloadProgressData, DownloadResult, EncodingType, FileInfo, FileSystemDownloadResult, FileSystemAcceptedUploadHttpMethod, FileSystemSessionType, FileSystemUploadOptions, FileSystemUploadResult, FileSystemUploadType, ProgressEvent, ReadingOptions, WritingOptions };\n\nfunction normalizeEndingSlash(p) {\n  if (p != null) {\n    return p.replace(/\\/*$/, '') + '/';\n  }\n\n  return null;\n}\n\nexport var documentDirectory = normalizeEndingSlash(ExponentFileSystem.documentDirectory);\nexport var cacheDirectory = normalizeEndingSlash(ExponentFileSystem.cacheDirectory);\nvar bundledAssets = ExponentFileSystem.bundledAssets,\n    bundleDirectory = ExponentFileSystem.bundleDirectory;\nexport { bundledAssets, bundleDirectory };\nexport function getInfoAsync(fileUri) {\n  var options,\n      _args = arguments;\n  return _regeneratorRuntime.async(function getInfoAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n\n          if (ExponentFileSystem.getInfoAsync) {\n            _context.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-file-system', 'getInfoAsync');\n\n        case 3:\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.getInfoAsync(fileUri, options));\n\n        case 5:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function readAsStringAsync(fileUri, options) {\n  return _regeneratorRuntime.async(function readAsStringAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (ExponentFileSystem.readAsStringAsync) {\n            _context2.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-file-system', 'readAsStringAsync');\n\n        case 2:\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.readAsStringAsync(fileUri, options || {}));\n\n        case 4:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getContentUriAsync(fileUri) {\n  return _regeneratorRuntime.async(function getContentUriAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (!(Platform.OS === 'android')) {\n            _context3.next = 8;\n            break;\n          }\n\n          if (ExponentFileSystem.getContentUriAsync) {\n            _context3.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-file-system', 'getContentUriAsync');\n\n        case 3:\n          _context3.next = 5;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.getContentUriAsync(fileUri));\n\n        case 5:\n          return _context3.abrupt(\"return\", _context3.sent);\n\n        case 8:\n          return _context3.abrupt(\"return\", new Promise(function (resolve, reject) {\n            resolve(fileUri);\n          }));\n\n        case 9:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function writeAsStringAsync(fileUri, contents) {\n  var options,\n      _args4 = arguments;\n  return _regeneratorRuntime.async(function writeAsStringAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          options = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : {};\n\n          if (ExponentFileSystem.writeAsStringAsync) {\n            _context4.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-file-system', 'writeAsStringAsync');\n\n        case 3:\n          _context4.next = 5;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.writeAsStringAsync(fileUri, contents, options));\n\n        case 5:\n          return _context4.abrupt(\"return\", _context4.sent);\n\n        case 6:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function deleteAsync(fileUri) {\n  var options,\n      _args5 = arguments;\n  return _regeneratorRuntime.async(function deleteAsync$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          options = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : {};\n\n          if (ExponentFileSystem.deleteAsync) {\n            _context5.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-file-system', 'deleteAsync');\n\n        case 3:\n          _context5.next = 5;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.deleteAsync(fileUri, options));\n\n        case 5:\n          return _context5.abrupt(\"return\", _context5.sent);\n\n        case 6:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function deleteLegacyDocumentDirectoryAndroid() {\n  var legacyDocumentDirectory;\n  return _regeneratorRuntime.async(function deleteLegacyDocumentDirectoryAndroid$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          if (!(Platform.OS !== 'android' || documentDirectory == null)) {\n            _context6.next = 2;\n            break;\n          }\n\n          return _context6.abrupt(\"return\");\n\n        case 2:\n          legacyDocumentDirectory = documentDirectory + \"ExperienceData/\";\n          _context6.next = 5;\n          return _regeneratorRuntime.awrap(deleteAsync(legacyDocumentDirectory, {\n            idempotent: true\n          }));\n\n        case 5:\n          return _context6.abrupt(\"return\", _context6.sent);\n\n        case 6:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function moveAsync(options) {\n  return _regeneratorRuntime.async(function moveAsync$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          if (ExponentFileSystem.moveAsync) {\n            _context7.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-file-system', 'moveAsync');\n\n        case 2:\n          _context7.next = 4;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.moveAsync(options));\n\n        case 4:\n          return _context7.abrupt(\"return\", _context7.sent);\n\n        case 5:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function copyAsync(options) {\n  return _regeneratorRuntime.async(function copyAsync$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          if (ExponentFileSystem.copyAsync) {\n            _context8.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-file-system', 'copyAsync');\n\n        case 2:\n          _context8.next = 4;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.copyAsync(options));\n\n        case 4:\n          return _context8.abrupt(\"return\", _context8.sent);\n\n        case 5:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function makeDirectoryAsync(fileUri) {\n  var options,\n      _args9 = arguments;\n  return _regeneratorRuntime.async(function makeDirectoryAsync$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          options = _args9.length > 1 && _args9[1] !== undefined ? _args9[1] : {};\n\n          if (ExponentFileSystem.makeDirectoryAsync) {\n            _context9.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-file-system', 'makeDirectoryAsync');\n\n        case 3:\n          _context9.next = 5;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.makeDirectoryAsync(fileUri, options));\n\n        case 5:\n          return _context9.abrupt(\"return\", _context9.sent);\n\n        case 6:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function readDirectoryAsync(fileUri) {\n  return _regeneratorRuntime.async(function readDirectoryAsync$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          if (ExponentFileSystem.readDirectoryAsync) {\n            _context10.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-file-system', 'readDirectoryAsync');\n\n        case 2:\n          _context10.next = 4;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.readDirectoryAsync(fileUri, {}));\n\n        case 4:\n          return _context10.abrupt(\"return\", _context10.sent);\n\n        case 5:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getFreeDiskStorageAsync() {\n  return _regeneratorRuntime.async(function getFreeDiskStorageAsync$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          if (ExponentFileSystem.getFreeDiskStorageAsync) {\n            _context11.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-file-system', 'getFreeDiskStorageAsync');\n\n        case 2:\n          _context11.next = 4;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.getFreeDiskStorageAsync());\n\n        case 4:\n          return _context11.abrupt(\"return\", _context11.sent);\n\n        case 5:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getTotalDiskCapacityAsync() {\n  return _regeneratorRuntime.async(function getTotalDiskCapacityAsync$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          if (ExponentFileSystem.getTotalDiskCapacityAsync) {\n            _context12.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-file-system', 'getTotalDiskCapacityAsync');\n\n        case 2:\n          _context12.next = 4;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.getTotalDiskCapacityAsync());\n\n        case 4:\n          return _context12.abrupt(\"return\", _context12.sent);\n\n        case 5:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function downloadAsync(uri, fileUri) {\n  var options,\n      _args13 = arguments;\n  return _regeneratorRuntime.async(function downloadAsync$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          options = _args13.length > 2 && _args13[2] !== undefined ? _args13[2] : {};\n\n          if (ExponentFileSystem.downloadAsync) {\n            _context13.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-file-system', 'downloadAsync');\n\n        case 3:\n          _context13.next = 5;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.downloadAsync(uri, fileUri, _objectSpread({\n            sessionType: FileSystemSessionType.BACKGROUND\n          }, options)));\n\n        case 5:\n          return _context13.abrupt(\"return\", _context13.sent);\n\n        case 6:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function uploadAsync(url, fileUri) {\n  var options,\n      _args14 = arguments;\n  return _regeneratorRuntime.async(function uploadAsync$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          options = _args14.length > 2 && _args14[2] !== undefined ? _args14[2] : {};\n\n          if (ExponentFileSystem.uploadAsync) {\n            _context14.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-file-system', 'uploadAsync');\n\n        case 3:\n          _context14.next = 5;\n          return _regeneratorRuntime.awrap(ExponentFileSystem.uploadAsync(url, fileUri, _objectSpread(_objectSpread({\n            sessionType: FileSystemSessionType.BACKGROUND,\n            uploadType: FileSystemUploadType.BINARY_CONTENT\n          }, options), {}, {\n            httpMethod: (options.httpMethod || 'POST').toUpperCase()\n          })));\n\n        case 5:\n          return _context14.abrupt(\"return\", _context14.sent);\n\n        case 6:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function createDownloadResumable(uri, fileUri, options, callback, resumeData) {\n  return new DownloadResumable(uri, fileUri, options, callback, resumeData);\n}\nexport var DownloadResumable = function () {\n  function DownloadResumable(url, fileUri) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var callback = arguments.length > 3 ? arguments[3] : undefined;\n    var resumeData = arguments.length > 4 ? arguments[4] : undefined;\n\n    _classCallCheck(this, DownloadResumable);\n\n    this._uuid = uuidv4();\n    this._url = url;\n    this._fileUri = fileUri;\n    this._options = options;\n    this._resumeData = resumeData;\n    this._callback = callback;\n    this._subscription = null;\n    this._emitter = new EventEmitter(ExponentFileSystem);\n  }\n\n  _createClass(DownloadResumable, [{\n    key: \"downloadAsync\",\n    value: function downloadAsync() {\n      return _regeneratorRuntime.async(function downloadAsync$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              if (ExponentFileSystem.downloadResumableStartAsync) {\n                _context15.next = 2;\n                break;\n              }\n\n              throw new UnavailabilityError('expo-file-system', 'downloadResumableStartAsync');\n\n            case 2:\n              this._addSubscription();\n\n              _context15.next = 5;\n              return _regeneratorRuntime.awrap(ExponentFileSystem.downloadResumableStartAsync(this._url, this._fileUri, this._uuid, this._options, this._resumeData));\n\n            case 5:\n              return _context15.abrupt(\"return\", _context15.sent);\n\n            case 6:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"pauseAsync\",\n    value: function pauseAsync() {\n      var pauseResult;\n      return _regeneratorRuntime.async(function pauseAsync$(_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              if (ExponentFileSystem.downloadResumablePauseAsync) {\n                _context16.next = 2;\n                break;\n              }\n\n              throw new UnavailabilityError('expo-file-system', 'downloadResumablePauseAsync');\n\n            case 2:\n              _context16.next = 4;\n              return _regeneratorRuntime.awrap(ExponentFileSystem.downloadResumablePauseAsync(this._uuid));\n\n            case 4:\n              pauseResult = _context16.sent;\n\n              this._removeSubscription();\n\n              if (!pauseResult) {\n                _context16.next = 11;\n                break;\n              }\n\n              this._resumeData = pauseResult.resumeData;\n              return _context16.abrupt(\"return\", this.savable());\n\n            case 11:\n              throw new Error('Unable to generate a savable pause state');\n\n            case 12:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"resumeAsync\",\n    value: function resumeAsync() {\n      return _regeneratorRuntime.async(function resumeAsync$(_context17) {\n        while (1) {\n          switch (_context17.prev = _context17.next) {\n            case 0:\n              if (ExponentFileSystem.downloadResumableStartAsync) {\n                _context17.next = 2;\n                break;\n              }\n\n              throw new UnavailabilityError('expo-file-system', 'downloadResumableStartAsync');\n\n            case 2:\n              this._addSubscription();\n\n              _context17.next = 5;\n              return _regeneratorRuntime.awrap(ExponentFileSystem.downloadResumableStartAsync(this._url, this._fileUri, this._uuid, this._options, this._resumeData));\n\n            case 5:\n              return _context17.abrupt(\"return\", _context17.sent);\n\n            case 6:\n            case \"end\":\n              return _context17.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"savable\",\n    value: function savable() {\n      return {\n        url: this._url,\n        fileUri: this._fileUri,\n        options: this._options,\n        resumeData: this._resumeData\n      };\n    }\n  }, {\n    key: \"_addSubscription\",\n    value: function _addSubscription() {\n      var _this = this;\n\n      if (this._subscription) {\n        return;\n      }\n\n      this._subscription = this._emitter.addListener('expo-file-system.downloadProgress', function (event) {\n        if (event.uuid === _this._uuid) {\n          var callback = _this._callback;\n\n          if (callback) {\n            callback(event.data);\n          }\n        }\n      });\n    }\n  }, {\n    key: \"_removeSubscription\",\n    value: function _removeSubscription() {\n      if (!this._subscription) {\n        return;\n      }\n\n      this._emitter.removeSubscription(this._subscription);\n\n      this._subscription = null;\n    }\n  }]);\n\n  return DownloadResumable;\n}();","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/expo-file-system/src/FileSystem.ts"],"names":["EventEmitter","UnavailabilityError","uuidv4","ExponentFileSystem","DownloadOptions","DownloadPauseState","DownloadProgressCallback","DownloadProgressData","DownloadResult","EncodingType","FileInfo","FileSystemAcceptedUploadHttpMethod","FileSystemDownloadResult","FileSystemSessionType","FileSystemUploadOptions","FileSystemUploadResult","FileSystemUploadType","ProgressEvent","ReadingOptions","WritingOptions","console","warn","_unused","normalizeEndingSlash","p","replace","documentDirectory","cacheDirectory","bundledAssets","bundleDirectory","getInfoAsync","fileUri","options","readAsStringAsync","getContentUriAsync","Platform","OS","Promise","resolve","reject","writeAsStringAsync","contents","deleteAsync","deleteLegacyDocumentDirectoryAndroid","legacyDocumentDirectory","idempotent","moveAsync","copyAsync","makeDirectoryAsync","readDirectoryAsync","getFreeDiskStorageAsync","getTotalDiskCapacityAsync","downloadAsync","uri","sessionType","BACKGROUND","uploadAsync","url","uploadType","BINARY_CONTENT","httpMethod","toUpperCase","createDownloadResumable","callback","resumeData","DownloadResumable","_uuid","_url","_fileUri","_options","_resumeData","_callback","_subscription","_emitter","downloadResumableStartAsync","_addSubscription","downloadResumablePauseAsync","pauseResult","_removeSubscription","savable","Error","addListener","event","uuid","data","removeSubscription"],"mappings":"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","sourcesContent":["import { EventEmitter, Subscription, UnavailabilityError } from '@unimodules/core';\nimport { Platform } from 'react-native';\nimport uuidv4 from 'uuid/v4';\n\nimport ExponentFileSystem from './ExponentFileSystem';\nimport {\n  DownloadOptions,\n  DownloadPauseState,\n  DownloadProgressCallback,\n  DownloadProgressData,\n  DownloadResult,\n  EncodingType,\n  FileInfo,\n  FileSystemAcceptedUploadHttpMethod,\n  FileSystemDownloadResult,\n  FileSystemSessionType,\n  FileSystemUploadOptions,\n  FileSystemUploadResult,\n  FileSystemUploadType,\n  ProgressEvent,\n  ReadingOptions,\n  WritingOptions,\n} from './FileSystem.types';\n\nif (!ExponentFileSystem) {\n  console.warn(\n    \"No native ExponentFileSystem module found, are you sure the expo-file-system's module is linked properly?\"\n  );\n}\n// Prevent webpack from pruning this.\nconst _unused = new EventEmitter(ExponentFileSystem); // eslint-disable-line\n\nexport {\n  DownloadOptions,\n  DownloadPauseState,\n  DownloadProgressCallback,\n  DownloadProgressData,\n  DownloadResult,\n  EncodingType,\n  FileInfo,\n  FileSystemDownloadResult,\n  FileSystemAcceptedUploadHttpMethod,\n  FileSystemSessionType,\n  FileSystemUploadOptions,\n  FileSystemUploadResult,\n  FileSystemUploadType,\n  ProgressEvent,\n  ReadingOptions,\n  WritingOptions,\n};\n\nfunction normalizeEndingSlash(p: string | null): string | null {\n  if (p != null) {\n    return p.replace(/\\/*$/, '') + '/';\n  }\n  return null;\n}\n\nexport const documentDirectory = normalizeEndingSlash(ExponentFileSystem.documentDirectory);\nexport const cacheDirectory = normalizeEndingSlash(ExponentFileSystem.cacheDirectory);\n\nexport const { bundledAssets, bundleDirectory } = ExponentFileSystem;\n\nexport async function getInfoAsync(\n  fileUri: string,\n  options: { md5?: boolean; size?: boolean } = {}\n): Promise<FileInfo> {\n  if (!ExponentFileSystem.getInfoAsync) {\n    throw new UnavailabilityError('expo-file-system', 'getInfoAsync');\n  }\n  return await ExponentFileSystem.getInfoAsync(fileUri, options);\n}\n\nexport async function readAsStringAsync(\n  fileUri: string,\n  options?: ReadingOptions\n): Promise<string> {\n  if (!ExponentFileSystem.readAsStringAsync) {\n    throw new UnavailabilityError('expo-file-system', 'readAsStringAsync');\n  }\n  return await ExponentFileSystem.readAsStringAsync(fileUri, options || {});\n}\n\nexport async function getContentUriAsync(fileUri: string): Promise<string> {\n  if (Platform.OS === 'android') {\n    if (!ExponentFileSystem.getContentUriAsync) {\n      throw new UnavailabilityError('expo-file-system', 'getContentUriAsync');\n    }\n    return await ExponentFileSystem.getContentUriAsync(fileUri);\n  } else {\n    return new Promise(function(resolve, reject) {\n      resolve(fileUri);\n    });\n  }\n}\n\nexport async function writeAsStringAsync(\n  fileUri: string,\n  contents: string,\n  options: WritingOptions = {}\n): Promise<void> {\n  if (!ExponentFileSystem.writeAsStringAsync) {\n    throw new UnavailabilityError('expo-file-system', 'writeAsStringAsync');\n  }\n  return await ExponentFileSystem.writeAsStringAsync(fileUri, contents, options);\n}\n\nexport async function deleteAsync(\n  fileUri: string,\n  options: { idempotent?: boolean } = {}\n): Promise<void> {\n  if (!ExponentFileSystem.deleteAsync) {\n    throw new UnavailabilityError('expo-file-system', 'deleteAsync');\n  }\n  return await ExponentFileSystem.deleteAsync(fileUri, options);\n}\n\nexport async function deleteLegacyDocumentDirectoryAndroid(): Promise<void> {\n  if (Platform.OS !== 'android' || documentDirectory == null) {\n    return;\n  }\n  const legacyDocumentDirectory = `${documentDirectory}ExperienceData/`;\n  return await deleteAsync(legacyDocumentDirectory, { idempotent: true });\n}\n\nexport async function moveAsync(options: { from: string; to: string }): Promise<void> {\n  if (!ExponentFileSystem.moveAsync) {\n    throw new UnavailabilityError('expo-file-system', 'moveAsync');\n  }\n  return await ExponentFileSystem.moveAsync(options);\n}\n\nexport async function copyAsync(options: { from: string; to: string }): Promise<void> {\n  if (!ExponentFileSystem.copyAsync) {\n    throw new UnavailabilityError('expo-file-system', 'copyAsync');\n  }\n  return await ExponentFileSystem.copyAsync(options);\n}\n\nexport async function makeDirectoryAsync(\n  fileUri: string,\n  options: { intermediates?: boolean } = {}\n): Promise<void> {\n  if (!ExponentFileSystem.makeDirectoryAsync) {\n    throw new UnavailabilityError('expo-file-system', 'makeDirectoryAsync');\n  }\n  return await ExponentFileSystem.makeDirectoryAsync(fileUri, options);\n}\n\nexport async function readDirectoryAsync(fileUri: string): Promise<string[]> {\n  if (!ExponentFileSystem.readDirectoryAsync) {\n    throw new UnavailabilityError('expo-file-system', 'readDirectoryAsync');\n  }\n  return await ExponentFileSystem.readDirectoryAsync(fileUri, {});\n}\n\nexport async function getFreeDiskStorageAsync(): Promise<number> {\n  if (!ExponentFileSystem.getFreeDiskStorageAsync) {\n    throw new UnavailabilityError('expo-file-system', 'getFreeDiskStorageAsync');\n  }\n  return await ExponentFileSystem.getFreeDiskStorageAsync();\n}\n\nexport async function getTotalDiskCapacityAsync(): Promise<number> {\n  if (!ExponentFileSystem.getTotalDiskCapacityAsync) {\n    throw new UnavailabilityError('expo-file-system', 'getTotalDiskCapacityAsync');\n  }\n  return await ExponentFileSystem.getTotalDiskCapacityAsync();\n}\n\nexport async function downloadAsync(\n  uri: string,\n  fileUri: string,\n  options: DownloadOptions = {}\n): Promise<FileSystemDownloadResult> {\n  if (!ExponentFileSystem.downloadAsync) {\n    throw new UnavailabilityError('expo-file-system', 'downloadAsync');\n  }\n\n  return await ExponentFileSystem.downloadAsync(uri, fileUri, {\n    sessionType: FileSystemSessionType.BACKGROUND,\n    ...options,\n  });\n}\n\nexport async function uploadAsync(\n  url: string,\n  fileUri: string,\n  options: FileSystemUploadOptions = {}\n): Promise<FileSystemUploadResult> {\n  if (!ExponentFileSystem.uploadAsync) {\n    throw new UnavailabilityError('expo-file-system', 'uploadAsync');\n  }\n\n  return await ExponentFileSystem.uploadAsync(url, fileUri, {\n    sessionType: FileSystemSessionType.BACKGROUND,\n    uploadType: FileSystemUploadType.BINARY_CONTENT,\n    ...options,\n    httpMethod: (options.httpMethod || 'POST').toUpperCase(),\n  });\n}\n\nexport function createDownloadResumable(\n  uri: string,\n  fileUri: string,\n  options?: DownloadOptions,\n  callback?: DownloadProgressCallback,\n  resumeData?: string\n): DownloadResumable {\n  return new DownloadResumable(uri, fileUri, options, callback, resumeData);\n}\n\nexport class DownloadResumable {\n  _uuid: string;\n  _url: string;\n  _fileUri: string;\n  _options: DownloadOptions;\n  _resumeData?: string;\n  _callback?: DownloadProgressCallback;\n  _subscription?: Subscription | null;\n  _emitter: EventEmitter;\n\n  constructor(\n    url: string,\n    fileUri: string,\n    options: DownloadOptions = {},\n    callback?: DownloadProgressCallback,\n    resumeData?: string\n  ) {\n    this._uuid = uuidv4();\n    this._url = url;\n    this._fileUri = fileUri;\n    this._options = options;\n    this._resumeData = resumeData;\n    this._callback = callback;\n    this._subscription = null;\n    this._emitter = new EventEmitter(ExponentFileSystem);\n  }\n\n  async downloadAsync(): Promise<FileSystemDownloadResult | undefined> {\n    if (!ExponentFileSystem.downloadResumableStartAsync) {\n      throw new UnavailabilityError('expo-file-system', 'downloadResumableStartAsync');\n    }\n    this._addSubscription();\n    return await ExponentFileSystem.downloadResumableStartAsync(\n      this._url,\n      this._fileUri,\n      this._uuid,\n      this._options,\n      this._resumeData\n    );\n  }\n\n  async pauseAsync(): Promise<DownloadPauseState> {\n    if (!ExponentFileSystem.downloadResumablePauseAsync) {\n      throw new UnavailabilityError('expo-file-system', 'downloadResumablePauseAsync');\n    }\n    const pauseResult = await ExponentFileSystem.downloadResumablePauseAsync(this._uuid);\n    this._removeSubscription();\n    if (pauseResult) {\n      this._resumeData = pauseResult.resumeData;\n      return this.savable();\n    } else {\n      throw new Error('Unable to generate a savable pause state');\n    }\n  }\n\n  async resumeAsync(): Promise<FileSystemDownloadResult | undefined> {\n    if (!ExponentFileSystem.downloadResumableStartAsync) {\n      throw new UnavailabilityError('expo-file-system', 'downloadResumableStartAsync');\n    }\n    this._addSubscription();\n    return await ExponentFileSystem.downloadResumableStartAsync(\n      this._url,\n      this._fileUri,\n      this._uuid,\n      this._options,\n      this._resumeData\n    );\n  }\n\n  savable(): DownloadPauseState {\n    return {\n      url: this._url,\n      fileUri: this._fileUri,\n      options: this._options,\n      resumeData: this._resumeData,\n    };\n  }\n\n  _addSubscription(): void {\n    if (this._subscription) {\n      return;\n    }\n    this._subscription = this._emitter.addListener(\n      'expo-file-system.downloadProgress',\n      (event: ProgressEvent) => {\n        if (event.uuid === this._uuid) {\n          const callback = this._callback;\n          if (callback) {\n            callback(event.data);\n          }\n        }\n      }\n    );\n  }\n\n  _removeSubscription(): void {\n    if (!this._subscription) {\n      return;\n    }\n    this._emitter.removeSubscription(this._subscription);\n    this._subscription = null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}