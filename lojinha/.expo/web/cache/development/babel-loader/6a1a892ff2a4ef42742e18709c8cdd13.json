{"ast":null,"code":"'use strict';\n\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/RNTester/js/examples/Pressable/PressableExample.js\";\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport View from \"react-native-web/dist/exports/View\";\nvar useEffect = React.useEffect,\n    useRef = React.useRef,\n    useState = React.useState;\nvar forceTouchAvailable = Platform.OS === 'ios' && Platform.constants.forceTouchAvailable || false;\n\nfunction ContentPress() {\n  var _this = this;\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      timesPressed = _useState2[0],\n      setTimesPressed = _useState2[1];\n\n  var textLog = '';\n\n  if (timesPressed > 1) {\n    textLog = timesPressed + 'x onPress';\n  } else if (timesPressed > 0) {\n    textLog = 'onPress';\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(View, {\n    style: styles.row,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, React.createElement(Pressable, {\n    onPress: function onPress() {\n      setTimesPressed(function (current) {\n        return current + 1;\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, function (_ref) {\n    var pressed = _ref.pressed;\n    return React.createElement(Text, {\n      style: styles.text,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }\n    }, pressed ? 'Pressed!' : 'Press Me');\n  })), React.createElement(View, {\n    style: styles.logBox,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    testID: \"pressable_press_console\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, textLog)));\n}\n\nfunction TextOnPressBox() {\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      timesPressed = _useState4[0],\n      setTimesPressed = _useState4[1];\n\n  var textLog = '';\n\n  if (timesPressed > 1) {\n    textLog = timesPressed + 'x text onPress';\n  } else if (timesPressed > 0) {\n    textLog = 'text onPress';\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(Text, {\n    style: styles.textBlock,\n    testID: \"tappable_text\",\n    onPress: function onPress() {\n      setTimesPressed(function (prev) {\n        return prev + 1;\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, \"Text has built-in onPress handling\"), React.createElement(View, {\n    style: styles.logBox,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    testID: \"tappable_text_console\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, textLog)));\n}\n\nfunction PressableFeedbackEvents() {\n  var _this2 = this;\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      eventLog = _useState6[0],\n      setEventLog = _useState6[1];\n\n  function appendEvent(eventName) {\n    var limit = 6;\n    setEventLog(function (current) {\n      return [eventName].concat(current.slice(0, limit - 1));\n    });\n  }\n\n  return React.createElement(View, {\n    testID: \"pressable_feedback_events\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: [styles.row, styles.centered],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }, React.createElement(Pressable, {\n    style: styles.wrapper,\n    testID: \"pressable_feedback_events_button\",\n    accessibilityLabel: \"pressable feedback events\",\n    accessibilityRole: \"button\",\n    onPress: function onPress() {\n      return appendEvent('press');\n    },\n    onPressIn: function onPressIn() {\n      return appendEvent('pressIn');\n    },\n    onPressOut: function onPressOut() {\n      return appendEvent('pressOut');\n    },\n    onLongPress: function onLongPress() {\n      return appendEvent('longPress');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }, \"Press Me\"))), React.createElement(View, {\n    testID: \"pressable_feedback_events_console\",\n    style: styles.eventLogBox,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }, eventLog.map(function (e, ii) {\n    return React.createElement(Text, {\n      key: ii,\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }\n    }, e);\n  })));\n}\n\nfunction PressableDelayEvents() {\n  var _this3 = this;\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      eventLog = _useState8[0],\n      setEventLog = _useState8[1];\n\n  function appendEvent(eventName) {\n    var limit = 6;\n    var newEventLog = eventLog.slice(0, limit - 1);\n    newEventLog.unshift(eventName);\n    setEventLog(newEventLog);\n  }\n\n  return React.createElement(View, {\n    testID: \"pressable_delay_events\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: [styles.row, styles.centered],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }, React.createElement(Pressable, {\n    style: styles.wrapper,\n    testID: \"pressable_delay_events_button\",\n    onPress: function onPress() {\n      return appendEvent('press');\n    },\n    onPressIn: function onPressIn() {\n      return appendEvent('pressIn');\n    },\n    onPressOut: function onPressOut() {\n      return appendEvent('pressOut');\n    },\n    delayLongPress: 800,\n    onLongPress: function onLongPress() {\n      return appendEvent('longPress - 800ms delay');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 11\n    }\n  }, \"Press Me\"))), React.createElement(View, {\n    style: styles.eventLogBox,\n    testID: \"pressable_delay_events_console\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }\n  }, eventLog.map(function (e, ii) {\n    return React.createElement(Text, {\n      key: ii,\n      __self: _this3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }\n    }, e);\n  })));\n}\n\nfunction ForceTouchExample() {\n  var _useState9 = useState(0),\n      _useState10 = _slicedToArray(_useState9, 2),\n      force = _useState10[0],\n      setForce = _useState10[1];\n\n  var consoleText = forceTouchAvailable ? 'Force: ' + force.toFixed(3) : '3D Touch is not available on this device';\n  return React.createElement(View, {\n    testID: \"pressable_3dtouch_event\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.forceTouchBox,\n    testID: \"pressable_3dtouch_output\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }\n  }, consoleText)), React.createElement(View, {\n    style: [styles.row, styles.centered],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.wrapper,\n    testID: \"pressable_3dtouch_button\",\n    onStartShouldSetResponder: function onStartShouldSetResponder() {\n      return true;\n    },\n    onResponderMove: function onResponderMove(event) {\n      return setForce(event.nativeEvent.force);\n    },\n    onResponderRelease: function onResponderRelease(event) {\n      return setForce(0);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 11\n    }\n  }, \"Press Me\"))));\n}\n\nfunction PressableHitSlop() {\n  var _useState11 = useState(0),\n      _useState12 = _slicedToArray(_useState11, 2),\n      timesPressed = _useState12[0],\n      setTimesPressed = _useState12[1];\n\n  var log = '';\n\n  if (timesPressed > 1) {\n    log = timesPressed + 'x onPress';\n  } else if (timesPressed > 0) {\n    log = 'onPress';\n  }\n\n  return React.createElement(View, {\n    testID: \"pressable_hit_slop\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: [styles.row, styles.centered],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }\n  }, React.createElement(Pressable, {\n    onPress: function onPress() {\n      return setTimesPressed(function (num) {\n        return num + 1;\n      });\n    },\n    style: styles.hitSlopWrapper,\n    hitSlop: {\n      top: 30,\n      bottom: 30,\n      left: 60,\n      right: 60\n    },\n    testID: \"pressable_hit_slop_button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.hitSlopButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 11\n    }\n  }, \"Press Outside This View\"))), React.createElement(View, {\n    style: styles.logBox,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 9\n    }\n  }, log)));\n}\n\nfunction PressableNativeMethods() {\n  var _useState13 = useState(null),\n      _useState14 = _slicedToArray(_useState13, 2),\n      status = _useState14[0],\n      setStatus = _useState14[1];\n\n  var ref = useRef(null);\n  useEffect(function () {\n    setStatus(ref.current != null && typeof ref.current.measure === 'function');\n  }, []);\n  return React.createElement(React.Fragment, null, React.createElement(View, {\n    style: [styles.row, styles.block],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }\n  }, React.createElement(Pressable, {\n    ref: ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 11\n    }\n  })), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 9\n    }\n  }, status == null ? 'Missing Ref!' : status === true ? 'Native Methods Exist' : 'Native Methods Missing!')));\n}\n\nfunction PressableDisabled() {\n  return React.createElement(React.Fragment, null, React.createElement(Pressable, {\n    disabled: true,\n    style: [styles.row, styles.block],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.disabledButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 9\n    }\n  }, \"Disabled Pressable\")), React.createElement(Pressable, {\n    disabled: false,\n    style: function style(_ref2) {\n      var pressed = _ref2.pressed;\n      return [{\n        opacity: pressed ? 0.5 : 1\n      }, styles.row, styles.block];\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 9\n    }\n  }, \"Enabled Pressable\")));\n}\n\nvar styles = StyleSheet.create({\n  row: {\n    justifyContent: 'center',\n    flexDirection: 'row'\n  },\n  centered: {\n    justifyContent: 'center'\n  },\n  text: {\n    fontSize: 16\n  },\n  block: {\n    padding: 10\n  },\n  button: {\n    color: '#007AFF'\n  },\n  disabledButton: {\n    color: '#007AFF',\n    opacity: 0.5\n  },\n  hitSlopButton: {\n    color: 'white'\n  },\n  wrapper: {\n    borderRadius: 8\n  },\n  wrapperCustom: {\n    borderRadius: 8,\n    padding: 6\n  },\n  hitSlopWrapper: {\n    backgroundColor: 'red',\n    marginVertical: 30\n  },\n  logBox: {\n    padding: 20,\n    margin: 10,\n    borderWidth: StyleSheet.hairlineWidth,\n    borderColor: '#f0f0f0',\n    backgroundColor: '#f9f9f9'\n  },\n  eventLogBox: {\n    padding: 10,\n    margin: 10,\n    height: 120,\n    borderWidth: StyleSheet.hairlineWidth,\n    borderColor: '#f0f0f0',\n    backgroundColor: '#f9f9f9'\n  },\n  forceTouchBox: {\n    padding: 10,\n    margin: 10,\n    borderWidth: StyleSheet.hairlineWidth,\n    borderColor: '#f0f0f0',\n    backgroundColor: '#f9f9f9',\n    alignItems: 'center'\n  },\n  textBlock: {\n    fontWeight: '500',\n    color: 'blue'\n  }\n});\nexports.displayName = undefined;\nexports.description = 'Component for making views pressable.';\nexports.title = '<Pressable>';\nexports.examples = [{\n  title: 'Change content based on Press',\n  render: function render() {\n    return React.createElement(ContentPress, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 14\n      }\n    });\n  }\n}, {\n  title: 'Change style based on Press',\n  render: function render() {\n    return React.createElement(View, {\n      style: styles.row,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 9\n      }\n    }, React.createElement(Pressable, {\n      style: function style(_ref3) {\n        var pressed = _ref3.pressed;\n        return [{\n          backgroundColor: pressed ? 'rgb(210, 230, 255)' : 'white'\n        }, styles.wrapperCustom];\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 11\n      }\n    }, React.createElement(Text, {\n      style: styles.text,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 13\n      }\n    }, \"Press Me\")));\n  }\n}, {\n  title: 'Pressable feedback events',\n  description: '<Pressable> components accept onPress, onPressIn, ' + 'onPressOut, and onLongPress as props.',\n  render: function render() {\n    return React.createElement(PressableFeedbackEvents, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 14\n      }\n    });\n  }\n}, {\n  title: 'Pressable with Ripple and Animated child',\n  description: 'Pressable can have an AnimatedComponent as a direct child.',\n  platform: 'android',\n  render: function render() {\n    var mScale = new Animated.Value(1);\n    Animated.timing(mScale, {\n      toValue: 0.3,\n      duration: 1000,\n      useNativeDriver: false\n    }).start();\n    var style = {\n      backgroundColor: 'rgb(180, 64, 119)',\n      width: 200,\n      height: 100,\n      transform: [{\n        scale: mScale\n      }]\n    };\n    return React.createElement(View, {\n      style: styles.row,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 9\n      }\n    }, React.createElement(Pressable, {\n      android_ripple: {\n        color: 'green'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 11\n      }\n    }, React.createElement(Animated.View, {\n      style: style,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 13\n      }\n    })));\n  }\n}, {\n  title: 'Pressable with custom Ripple',\n  description: \"Pressable can specify ripple's radius and borderless params\",\n  platform: 'android',\n  render: function render() {\n    var nativeFeedbackButton = {\n      textAlign: 'center',\n      margin: 10\n    };\n    return React.createElement(View, {\n      style: [styles.row, {\n        justifyContent: 'space-around',\n        alignItems: 'center'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 9\n      }\n    }, React.createElement(Pressable, {\n      android_ripple: {\n        color: 'orange',\n        borderless: true,\n        radius: 30\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 11\n      }\n    }, React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 13\n      }\n    }, React.createElement(Text, {\n      style: [styles.button, nativeFeedbackButton],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 15\n      }\n    }, \"radius 30\"))), React.createElement(Pressable, {\n      android_ripple: {\n        borderless: true,\n        radius: 150\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 11\n      }\n    }, React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 13\n      }\n    }, React.createElement(Text, {\n      style: [styles.button, nativeFeedbackButton],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 15\n      }\n    }, \"radius 150\"))), React.createElement(Pressable, {\n      android_ripple: {\n        borderless: false,\n        radius: 70\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 11\n      }\n    }, React.createElement(View, {\n      style: styles.block,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 13\n      }\n    }, React.createElement(Text, {\n      style: [styles.button, nativeFeedbackButton],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 15\n      }\n    }, \"radius 70, with border\"))));\n  }\n}, {\n  title: '<Text onPress={fn}> with highlight',\n  render: function render() {\n    return React.createElement(TextOnPressBox, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 14\n      }\n    });\n  }\n}, {\n  title: 'Pressable delay for events',\n  description: '<Pressable> also accept delayPressIn, ' + 'delayPressOut, and delayLongPress as props. These props impact the ' + 'timing of feedback events.',\n  render: function render() {\n    return React.createElement(PressableDelayEvents, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 14\n      }\n    });\n  }\n}, {\n  title: '3D Touch / Force Touch',\n  description: 'iPhone 8 and 8 plus support 3D touch, which adds a force property to touches',\n  render: function render() {\n    return React.createElement(ForceTouchExample, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 14\n      }\n    });\n  },\n  platform: 'ios'\n}, {\n  title: 'Pressable Hit Slop',\n  description: '<Pressable> components accept hitSlop prop which extends the touch area ' + 'without changing the view bounds.',\n  render: function render() {\n    return React.createElement(PressableHitSlop, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 14\n      }\n    });\n  }\n}, {\n  title: 'Pressable Native Methods',\n  description: '<Pressable> components expose native methods like `measure`.',\n  render: function render() {\n    return React.createElement(PressableNativeMethods, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 14\n      }\n    });\n  }\n}, {\n  title: 'Disabled Pressable',\n  description: '<Pressable> components accept disabled prop which prevents ' + 'any interaction with component',\n  render: function render() {\n    return React.createElement(PressableDisabled, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 14\n      }\n    });\n  }\n}];","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/RNTester/js/examples/Pressable/PressableExample.js"],"names":["React","useEffect","useRef","useState","forceTouchAvailable","Platform","OS","constants","ContentPress","timesPressed","setTimesPressed","textLog","styles","row","current","pressed","text","logBox","TextOnPressBox","textBlock","prev","PressableFeedbackEvents","eventLog","setEventLog","appendEvent","eventName","limit","concat","slice","centered","wrapper","button","eventLogBox","map","e","ii","PressableDelayEvents","newEventLog","unshift","ForceTouchExample","force","setForce","consoleText","toFixed","forceTouchBox","event","nativeEvent","PressableHitSlop","log","num","hitSlopWrapper","top","bottom","left","right","hitSlopButton","PressableNativeMethods","status","setStatus","ref","measure","block","PressableDisabled","disabledButton","opacity","StyleSheet","create","justifyContent","flexDirection","fontSize","padding","color","borderRadius","wrapperCustom","backgroundColor","marginVertical","margin","borderWidth","hairlineWidth","borderColor","height","alignItems","fontWeight","exports","displayName","undefined","description","title","examples","render","platform","mScale","Animated","Value","timing","toValue","duration","useNativeDriver","start","style","width","transform","scale","nativeFeedbackButton","textAlign","borderless","radius"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nimport * as React from 'react';\nimport {\n  Animated,\n  Pressable,\n  StyleSheet,\n  Text,\n  Platform,\n  View,\n} from 'react-native';\n\nconst {useEffect, useRef, useState} = React;\n\nconst forceTouchAvailable =\n  (Platform.OS === 'ios' && Platform.constants.forceTouchAvailable) || false;\n\nfunction ContentPress() {\n  const [timesPressed, setTimesPressed] = useState(0);\n\n  let textLog = '';\n  if (timesPressed > 1) {\n    textLog = timesPressed + 'x onPress';\n  } else if (timesPressed > 0) {\n    textLog = 'onPress';\n  }\n\n  return (\n    <>\n      <View style={styles.row}>\n        <Pressable\n          onPress={() => {\n            setTimesPressed(current => current + 1);\n          }}>\n          {({pressed}) => (\n            <Text style={styles.text}>{pressed ? 'Pressed!' : 'Press Me'}</Text>\n          )}\n        </Pressable>\n      </View>\n      <View style={styles.logBox}>\n        <Text testID=\"pressable_press_console\">{textLog}</Text>\n      </View>\n    </>\n  );\n}\n\nfunction TextOnPressBox() {\n  const [timesPressed, setTimesPressed] = useState(0);\n\n  let textLog = '';\n  if (timesPressed > 1) {\n    textLog = timesPressed + 'x text onPress';\n  } else if (timesPressed > 0) {\n    textLog = 'text onPress';\n  }\n\n  return (\n    <>\n      <Text\n        style={styles.textBlock}\n        testID=\"tappable_text\"\n        onPress={() => {\n          setTimesPressed(prev => prev + 1);\n        }}>\n        Text has built-in onPress handling\n      </Text>\n      <View style={styles.logBox}>\n        <Text testID=\"tappable_text_console\">{textLog}</Text>\n      </View>\n    </>\n  );\n}\n\nfunction PressableFeedbackEvents() {\n  const [eventLog, setEventLog] = useState([]);\n\n  function appendEvent(eventName) {\n    const limit = 6;\n    setEventLog(current => {\n      return [eventName].concat(current.slice(0, limit - 1));\n    });\n  }\n\n  return (\n    <View testID=\"pressable_feedback_events\">\n      <View style={[styles.row, styles.centered]}>\n        <Pressable\n          style={styles.wrapper}\n          testID=\"pressable_feedback_events_button\"\n          accessibilityLabel=\"pressable feedback events\"\n          accessibilityRole=\"button\"\n          onPress={() => appendEvent('press')}\n          onPressIn={() => appendEvent('pressIn')}\n          onPressOut={() => appendEvent('pressOut')}\n          onLongPress={() => appendEvent('longPress')}>\n          <Text style={styles.button}>Press Me</Text>\n        </Pressable>\n      </View>\n      <View\n        testID=\"pressable_feedback_events_console\"\n        style={styles.eventLogBox}>\n        {eventLog.map((e, ii) => (\n          <Text key={ii}>{e}</Text>\n        ))}\n      </View>\n    </View>\n  );\n}\n\nfunction PressableDelayEvents() {\n  const [eventLog, setEventLog] = useState([]);\n\n  function appendEvent(eventName) {\n    const limit = 6;\n    const newEventLog = eventLog.slice(0, limit - 1);\n    newEventLog.unshift(eventName);\n    setEventLog(newEventLog);\n  }\n\n  return (\n    <View testID=\"pressable_delay_events\">\n      <View style={[styles.row, styles.centered]}>\n        <Pressable\n          style={styles.wrapper}\n          testID=\"pressable_delay_events_button\"\n          onPress={() => appendEvent('press')}\n          onPressIn={() => appendEvent('pressIn')}\n          onPressOut={() => appendEvent('pressOut')}\n          delayLongPress={800}\n          onLongPress={() => appendEvent('longPress - 800ms delay')}>\n          <Text style={styles.button}>Press Me</Text>\n        </Pressable>\n      </View>\n      <View style={styles.eventLogBox} testID=\"pressable_delay_events_console\">\n        {eventLog.map((e, ii) => (\n          <Text key={ii}>{e}</Text>\n        ))}\n      </View>\n    </View>\n  );\n}\n\nfunction ForceTouchExample() {\n  const [force, setForce] = useState(0);\n\n  const consoleText = forceTouchAvailable\n    ? 'Force: ' + force.toFixed(3)\n    : '3D Touch is not available on this device';\n\n  return (\n    <View testID=\"pressable_3dtouch_event\">\n      <View style={styles.forceTouchBox} testID=\"pressable_3dtouch_output\">\n        <Text>{consoleText}</Text>\n      </View>\n      <View style={[styles.row, styles.centered]}>\n        <View\n          style={styles.wrapper}\n          testID=\"pressable_3dtouch_button\"\n          onStartShouldSetResponder={() => true}\n          onResponderMove={event => setForce(event.nativeEvent.force)}\n          onResponderRelease={event => setForce(0)}>\n          <Text style={styles.button}>Press Me</Text>\n        </View>\n      </View>\n    </View>\n  );\n}\n\nfunction PressableHitSlop() {\n  const [timesPressed, setTimesPressed] = useState(0);\n\n  let log = '';\n  if (timesPressed > 1) {\n    log = timesPressed + 'x onPress';\n  } else if (timesPressed > 0) {\n    log = 'onPress';\n  }\n\n  return (\n    <View testID=\"pressable_hit_slop\">\n      <View style={[styles.row, styles.centered]}>\n        <Pressable\n          onPress={() => setTimesPressed(num => num + 1)}\n          style={styles.hitSlopWrapper}\n          hitSlop={{top: 30, bottom: 30, left: 60, right: 60}}\n          testID=\"pressable_hit_slop_button\">\n          <Text style={styles.hitSlopButton}>Press Outside This View</Text>\n        </Pressable>\n      </View>\n      <View style={styles.logBox}>\n        <Text>{log}</Text>\n      </View>\n    </View>\n  );\n}\n\nfunction PressableNativeMethods() {\n  const [status, setStatus] = useState<?boolean>(null);\n  const ref = useRef(null);\n\n  useEffect(() => {\n    setStatus(ref.current != null && typeof ref.current.measure === 'function');\n  }, []);\n\n  return (\n    <>\n      <View style={[styles.row, styles.block]}>\n        <Pressable ref={ref}>\n          <View />\n        </Pressable>\n        <Text>\n          {status == null\n            ? 'Missing Ref!'\n            : status === true\n            ? 'Native Methods Exist'\n            : 'Native Methods Missing!'}\n        </Text>\n      </View>\n    </>\n  );\n}\n\nfunction PressableDisabled() {\n  return (\n    <>\n      <Pressable disabled={true} style={[styles.row, styles.block]}>\n        <Text style={styles.disabledButton}>Disabled Pressable</Text>\n      </Pressable>\n\n      <Pressable\n        disabled={false}\n        style={({pressed}) => [\n          {opacity: pressed ? 0.5 : 1},\n          styles.row,\n          styles.block,\n        ]}>\n        <Text style={styles.button}>Enabled Pressable</Text>\n      </Pressable>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  row: {\n    justifyContent: 'center',\n    flexDirection: 'row',\n  },\n  centered: {\n    justifyContent: 'center',\n  },\n  text: {\n    fontSize: 16,\n  },\n  block: {\n    padding: 10,\n  },\n  button: {\n    color: '#007AFF',\n  },\n  disabledButton: {\n    color: '#007AFF',\n    opacity: 0.5,\n  },\n  hitSlopButton: {\n    color: 'white',\n  },\n  wrapper: {\n    borderRadius: 8,\n  },\n  wrapperCustom: {\n    borderRadius: 8,\n    padding: 6,\n  },\n  hitSlopWrapper: {\n    backgroundColor: 'red',\n    marginVertical: 30,\n  },\n  logBox: {\n    padding: 20,\n    margin: 10,\n    borderWidth: StyleSheet.hairlineWidth,\n    borderColor: '#f0f0f0',\n    backgroundColor: '#f9f9f9',\n  },\n  eventLogBox: {\n    padding: 10,\n    margin: 10,\n    height: 120,\n    borderWidth: StyleSheet.hairlineWidth,\n    borderColor: '#f0f0f0',\n    backgroundColor: '#f9f9f9',\n  },\n  forceTouchBox: {\n    padding: 10,\n    margin: 10,\n    borderWidth: StyleSheet.hairlineWidth,\n    borderColor: '#f0f0f0',\n    backgroundColor: '#f9f9f9',\n    alignItems: 'center',\n  },\n  textBlock: {\n    fontWeight: '500',\n    color: 'blue',\n  },\n});\n\nexports.displayName = (undefined: ?string);\nexports.description = 'Component for making views pressable.';\nexports.title = '<Pressable>';\nexports.examples = [\n  {\n    title: 'Change content based on Press',\n    render(): React.Node {\n      return <ContentPress />;\n    },\n  },\n  {\n    title: 'Change style based on Press',\n    render(): React.Node {\n      return (\n        <View style={styles.row}>\n          <Pressable\n            style={({pressed}) => [\n              {\n                backgroundColor: pressed ? 'rgb(210, 230, 255)' : 'white',\n              },\n              styles.wrapperCustom,\n            ]}>\n            <Text style={styles.text}>Press Me</Text>\n          </Pressable>\n        </View>\n      );\n    },\n  },\n  {\n    title: 'Pressable feedback events',\n    description: ('<Pressable> components accept onPress, onPressIn, ' +\n      'onPressOut, and onLongPress as props.': string),\n    render: function(): React.Node {\n      return <PressableFeedbackEvents />;\n    },\n  },\n  {\n    title: 'Pressable with Ripple and Animated child',\n    description: ('Pressable can have an AnimatedComponent as a direct child.': string),\n    platform: 'android',\n    render: function(): React.Node {\n      const mScale = new Animated.Value(1);\n      Animated.timing(mScale, {\n        toValue: 0.3,\n        duration: 1000,\n        useNativeDriver: false,\n      }).start();\n      const style = {\n        backgroundColor: 'rgb(180, 64, 119)',\n        width: 200,\n        height: 100,\n        transform: [{scale: mScale}],\n      };\n      return (\n        <View style={styles.row}>\n          <Pressable android_ripple={{color: 'green'}}>\n            <Animated.View style={style} />\n          </Pressable>\n        </View>\n      );\n    },\n  },\n  {\n    title: 'Pressable with custom Ripple',\n    description: (\"Pressable can specify ripple's radius and borderless params\": string),\n    platform: 'android',\n    render: function(): React.Node {\n      const nativeFeedbackButton = {\n        textAlign: 'center',\n        margin: 10,\n      };\n      return (\n        <View\n          style={[\n            styles.row,\n            {justifyContent: 'space-around', alignItems: 'center'},\n          ]}>\n          <Pressable\n            android_ripple={{color: 'orange', borderless: true, radius: 30}}>\n            <View>\n              <Text style={[styles.button, nativeFeedbackButton]}>\n                radius 30\n              </Text>\n            </View>\n          </Pressable>\n\n          <Pressable android_ripple={{borderless: true, radius: 150}}>\n            <View>\n              <Text style={[styles.button, nativeFeedbackButton]}>\n                radius 150\n              </Text>\n            </View>\n          </Pressable>\n\n          <Pressable android_ripple={{borderless: false, radius: 70}}>\n            <View style={styles.block}>\n              <Text style={[styles.button, nativeFeedbackButton]}>\n                radius 70, with border\n              </Text>\n            </View>\n          </Pressable>\n        </View>\n      );\n    },\n  },\n  {\n    title: '<Text onPress={fn}> with highlight',\n    render: function(): React.Node {\n      return <TextOnPressBox />;\n    },\n  },\n  {\n    title: 'Pressable delay for events',\n    description: ('<Pressable> also accept delayPressIn, ' +\n      'delayPressOut, and delayLongPress as props. These props impact the ' +\n      'timing of feedback events.': string),\n    render: function(): React.Node {\n      return <PressableDelayEvents />;\n    },\n  },\n  {\n    title: '3D Touch / Force Touch',\n    description:\n      'iPhone 8 and 8 plus support 3D touch, which adds a force property to touches',\n    render: function(): React.Node {\n      return <ForceTouchExample />;\n    },\n    platform: 'ios',\n  },\n  {\n    title: 'Pressable Hit Slop',\n    description: ('<Pressable> components accept hitSlop prop which extends the touch area ' +\n      'without changing the view bounds.': string),\n    render: function(): React.Node {\n      return <PressableHitSlop />;\n    },\n  },\n  {\n    title: 'Pressable Native Methods',\n    description: ('<Pressable> components expose native methods like `measure`.': string),\n    render: function(): React.Node {\n      return <PressableNativeMethods />;\n    },\n  },\n  {\n    title: 'Disabled Pressable',\n    description: ('<Pressable> components accept disabled prop which prevents ' +\n      'any interaction with component': string),\n    render: function(): React.Node {\n      return <PressableDisabled />;\n    },\n  },\n];\n"]},"metadata":{},"sourceType":"module"}