{"ast":null,"code":"#!/usr/bin/env node\n'use strict';\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nvar _require = require('metro-source-map'),\n    composeSourceMaps = _require.composeSourceMaps;\n\nvar fs = require('fs');\n\nvar argv = process.argv.slice(2);\nvar outputPath;\n\nfor (var i = 0; i < argv.length;) {\n  if (argv[i] === '-o') {\n    outputPath = argv[i + 1];\n    argv.splice(i, 2);\n    continue;\n  }\n\n  ++i;\n}\n\nif (!argv.length) {\n  process.stderr.write('Usage: node compose-source-maps.js <packager_sourcemap> <compiler_sourcemap> [-o output_file]\\n');\n  process.exitCode = -1;\n} else {\n  var _argv$splice = argv.splice(0, 2),\n      _argv$splice2 = _slicedToArray(_argv$splice, 2),\n      packagerSourcemapPath = _argv$splice2[0],\n      compilerSourcemapPath = _argv$splice2[1];\n\n  var packagerSourcemap = JSON.parse(fs.readFileSync(packagerSourcemapPath, 'utf8'));\n  var compilerSourcemap = JSON.parse(fs.readFileSync(compilerSourcemapPath, 'utf8'));\n\n  if (packagerSourcemap.x_facebook_offsets != null || compilerSourcemap.x_facebook_offsets != null) {\n    throw new Error('Random Access Bundle (RAM) format is not supported by this tool; ' + 'it cannot process the `x_facebook_offsets` field provided ' + 'in the base and/or target source map(s)');\n  }\n\n  if (compilerSourcemap.x_facebook_segments != null) {\n    throw new Error('This tool cannot process the `x_facebook_segments` field provided ' + 'in the target source map.');\n  }\n\n  var composedMapJSON = JSON.stringify(composeSourceMaps([packagerSourcemap, compilerSourcemap]));\n\n  if (outputPath) {\n    fs.writeFileSync(outputPath, composedMapJSON, 'utf8');\n  } else {\n    process.stdout.write();\n  }\n}","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/scripts/compose-source-maps.js"],"names":["require","composeSourceMaps","fs","argv","process","slice","outputPath","i","length","splice","stderr","write","exitCode","packagerSourcemapPath","compilerSourcemapPath","packagerSourcemap","JSON","parse","readFileSync","compilerSourcemap","x_facebook_offsets","Error","x_facebook_segments","composedMapJSON","stringify","writeFileSync","stdout"],"mappings":"AAAA;AAUA;;;;eAE4BA,OAAO,CAAC,kBAAD,C;IAA5BC,iB,YAAAA,iB;;AACP,IAAMC,EAAE,GAAGF,OAAO,CAAC,IAAD,CAAlB;;AAEA,IAAMG,IAAI,GAAGC,OAAO,CAACD,IAAR,CAAaE,KAAb,CAAmB,CAAnB,CAAb;AACA,IAAIC,UAAJ;;AACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAAI,CAACK,MAAzB,GAAkC;AAC9B,MAAIL,IAAI,CAACI,CAAD,CAAJ,KAAY,IAAhB,EAAsB;AACpBD,IAAAA,UAAU,GAAGH,IAAI,CAACI,CAAC,GAAG,CAAL,CAAjB;AACAJ,IAAAA,IAAI,CAACM,MAAL,CAAYF,CAAZ,EAAe,CAAf;AACA;AACD;;AACD,IAAEA,CAAF;AACH;;AACD,IAAI,CAACJ,IAAI,CAACK,MAAV,EAAkB;AAChBJ,EAAAA,OAAO,CAACM,MAAR,CAAeC,KAAf,CACE,iGADF;AAGAP,EAAAA,OAAO,CAACQ,QAAR,GAAmB,CAAC,CAApB;AACD,CALD,MAKO;AAAA,qBACkDT,IAAI,CAACM,MAAL,CAAY,CAAZ,EAAe,CAAf,CADlD;AAAA;AAAA,MACEI,qBADF;AAAA,MACyBC,qBADzB;;AAEL,MAAMC,iBAAiB,GAAGC,IAAI,CAACC,KAAL,CAAWf,EAAE,CAACgB,YAAH,CAAgBL,qBAAhB,EAAuC,MAAvC,CAAX,CAA1B;AACA,MAAMM,iBAAiB,GAAGH,IAAI,CAACC,KAAL,CACxBf,EAAE,CAACgB,YAAH,CAAgBJ,qBAAhB,EAAuC,MAAvC,CADwB,CAA1B;;AAIA,MACEC,iBAAiB,CAACK,kBAAlB,IAAwC,IAAxC,IACAD,iBAAiB,CAACC,kBAAlB,IAAwC,IAF1C,EAGE;AACA,UAAM,IAAIC,KAAJ,CACJ,sEACE,4DADF,GAEE,yCAHE,CAAN;AAKD;;AAED,MAAIF,iBAAiB,CAACG,mBAAlB,IAAyC,IAA7C,EAAmD;AACjD,UAAM,IAAID,KAAJ,CACJ,uEACE,2BAFE,CAAN;AAID;;AAED,MAAME,eAAe,GAAGP,IAAI,CAACQ,SAAL,CAAevB,iBAAiB,CAAC,CAACc,iBAAD,EAAoBI,iBAApB,CAAD,CAAhC,CAAxB;;AACA,MAAIb,UAAJ,EAAgB;AACdJ,IAAAA,EAAE,CAACuB,aAAH,CAAiBnB,UAAjB,EAA6BiB,eAA7B,EAA8C,MAA9C;AACD,GAFD,MAEO;AACLnB,IAAAA,OAAO,CAACsB,MAAR,CAAef,KAAf;AACD;AACF","sourcesContent":["#!/usr/bin/env node\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\n'use strict';\n\nconst {composeSourceMaps} = require('metro-source-map');\nconst fs = require('fs');\n\nconst argv = process.argv.slice(2);\nlet outputPath;\nfor (let i = 0; i < argv.length;) {\n    if (argv[i] === '-o') {\n      outputPath = argv[i + 1];\n      argv.splice(i, 2);\n      continue;\n    }\n    ++i;\n}\nif (!argv.length) {\n  process.stderr.write(\n    'Usage: node compose-source-maps.js <packager_sourcemap> <compiler_sourcemap> [-o output_file]\\n'\n  );\n  process.exitCode = -1;\n} else {\n  const [packagerSourcemapPath, compilerSourcemapPath] = argv.splice(0, 2);\n  const packagerSourcemap = JSON.parse(fs.readFileSync(packagerSourcemapPath, 'utf8'));\n  const compilerSourcemap = JSON.parse(\n    fs.readFileSync(compilerSourcemapPath, 'utf8'),\n  );\n\n  if (\n    packagerSourcemap.x_facebook_offsets != null ||\n    compilerSourcemap.x_facebook_offsets != null\n  ) {\n    throw new Error(\n      'Random Access Bundle (RAM) format is not supported by this tool; ' +\n        'it cannot process the `x_facebook_offsets` field provided ' +\n        'in the base and/or target source map(s)',\n    );\n  }\n\n  if (compilerSourcemap.x_facebook_segments != null) {\n    throw new Error(\n      'This tool cannot process the `x_facebook_segments` field provided ' +\n        'in the target source map.',\n    );\n  }\n\n  const composedMapJSON = JSON.stringify(composeSourceMaps([packagerSourcemap, compilerSourcemap]));\n  if (outputPath) {\n    fs.writeFileSync(outputPath, composedMapJSON, 'utf8');\n  } else {\n    process.stdout.write();\n  }\n}\n"]},"metadata":{},"sourceType":"script"}