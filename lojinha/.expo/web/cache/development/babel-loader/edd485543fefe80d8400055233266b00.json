{"ast":null,"code":"'use strict';\n\nvar parseErrorStack = require(\"../parseErrorStack\");\n\nfunction getFakeError() {\n  return new Error('Happy Cat');\n}\n\ndescribe('parseErrorStack', function () {\n  it('parses error stack', function () {\n    var stack = parseErrorStack(getFakeError());\n    expect(stack.length).toBeGreaterThan(0);\n    var firstFrame = stack[0];\n    expect(firstFrame.methodName).toEqual('getFakeError');\n    expect(firstFrame.file).toMatch(/parseErrorStack-test\\.js$/);\n  });\n  it('does not support framesToPop', function () {\n    function getWrappedError() {\n      var error = getFakeError();\n      error.framesToPop = 1;\n      return error;\n    }\n\n    var stack = parseErrorStack(getWrappedError());\n    expect(stack[0].methodName).toEqual('getFakeError');\n  });\n  it('ignores bad inputs', function () {\n    expect(parseErrorStack({})).toEqual([]);\n    expect(parseErrorStack(null)).toEqual([]);\n  });\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Core/Devtools/__tests__/parseErrorStack-test.js"],"names":["parseErrorStack","require","getFakeError","Error","describe","it","stack","expect","length","toBeGreaterThan","firstFrame","methodName","toEqual","file","toMatch","getWrappedError","error","framesToPop"],"mappings":"AAUA;;AAEA,IAAMA,eAAe,GAAGC,OAAO,sBAA/B;;AAEA,SAASC,YAAT,GAAwB;AACtB,SAAO,IAAIC,KAAJ,CAAU,WAAV,CAAP;AACD;;AAEDC,QAAQ,CAAC,iBAAD,EAAoB,YAAW;AACrCC,EAAAA,EAAE,CAAC,oBAAD,EAAuB,YAAW;AAClC,QAAMC,KAAK,GAAGN,eAAe,CAACE,YAAY,EAAb,CAA7B;AACAK,IAAAA,MAAM,CAACD,KAAK,CAACE,MAAP,CAAN,CAAqBC,eAArB,CAAqC,CAArC;AAEA,QAAMC,UAAU,GAAGJ,KAAK,CAAC,CAAD,CAAxB;AACAC,IAAAA,MAAM,CAACG,UAAU,CAACC,UAAZ,CAAN,CAA8BC,OAA9B,CAAsC,cAAtC;AACAL,IAAAA,MAAM,CAACG,UAAU,CAACG,IAAZ,CAAN,CAAwBC,OAAxB,CAAgC,2BAAhC;AACD,GAPC,CAAF;AASAT,EAAAA,EAAE,CAAC,8BAAD,EAAiC,YAAW;AAC5C,aAASU,eAAT,GAA2B;AACzB,UAAMC,KAAK,GAAGd,YAAY,EAA1B;AACAc,MAAAA,KAAK,CAACC,WAAN,GAAoB,CAApB;AACA,aAAOD,KAAP;AACD;;AAED,QAAMV,KAAK,GAAGN,eAAe,CAACe,eAAe,EAAhB,CAA7B;AACAR,IAAAA,MAAM,CAACD,KAAK,CAAC,CAAD,CAAL,CAASK,UAAV,CAAN,CAA4BC,OAA5B,CAAoC,cAApC;AACD,GATC,CAAF;AAWAP,EAAAA,EAAE,CAAC,oBAAD,EAAuB,YAAW;AAClCE,IAAAA,MAAM,CAACP,eAAe,CAAC,EAAD,CAAhB,CAAN,CAA4BY,OAA5B,CAAoC,EAApC;AACAL,IAAAA,MAAM,CAACP,eAAe,CAAC,IAAD,CAAhB,CAAN,CAA8BY,OAA9B,CAAsC,EAAtC;AACD,GAHC,CAAF;AAID,CAzBO,CAAR","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @emails oncall+react_native\n */\n\n'use strict';\n\nconst parseErrorStack = require('../parseErrorStack');\n\nfunction getFakeError() {\n  return new Error('Happy Cat');\n}\n\ndescribe('parseErrorStack', function() {\n  it('parses error stack', function() {\n    const stack = parseErrorStack(getFakeError());\n    expect(stack.length).toBeGreaterThan(0);\n\n    const firstFrame = stack[0];\n    expect(firstFrame.methodName).toEqual('getFakeError');\n    expect(firstFrame.file).toMatch(/parseErrorStack-test\\.js$/);\n  });\n\n  it('does not support framesToPop', function() {\n    function getWrappedError() {\n      const error = getFakeError();\n      error.framesToPop = 1;\n      return error;\n    }\n\n    const stack = parseErrorStack(getWrappedError());\n    expect(stack[0].methodName).toEqual('getFakeError');\n  });\n\n  it('ignores bad inputs', function() {\n    expect(parseErrorStack({})).toEqual([]);\n    expect(parseErrorStack(null)).toEqual([]);\n  });\n});\n"]},"metadata":{},"sourceType":"script"}