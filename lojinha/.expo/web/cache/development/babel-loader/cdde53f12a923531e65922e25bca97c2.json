{"ast":null,"code":"'use strict';\n\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { AnimatedEvent } from \"../AnimatedEvent\";\nimport AnimatedNode from \"./AnimatedNode\";\nimport AnimatedStyle from \"./AnimatedStyle\";\nimport NativeAnimatedHelper from \"../NativeAnimatedHelper\";\nimport findNodeHandle from \"../../../../exports/findNodeHandle\";\nimport invariant from 'fbjs/lib/invariant';\n\nvar AnimatedProps = function (_AnimatedNode) {\n  _inherits(AnimatedProps, _AnimatedNode);\n\n  var _super = _createSuper(AnimatedProps);\n\n  function AnimatedProps(props, callback) {\n    var _this;\n\n    _classCallCheck(this, AnimatedProps);\n\n    _this = _super.call(this);\n\n    if (props.style) {\n      props = _objectSpread(_objectSpread({}, props), {}, {\n        style: new AnimatedStyle(props.style)\n      });\n    }\n\n    _this._props = props;\n    _this._callback = callback;\n\n    _this.__attach();\n\n    return _this;\n  }\n\n  _createClass(AnimatedProps, [{\n    key: \"__getValue\",\n    value: function __getValue() {\n      var props = {};\n\n      for (var key in this._props) {\n        var value = this._props[key];\n\n        if (value instanceof AnimatedNode) {\n          if (!value.__isNative || value instanceof AnimatedStyle) {\n            props[key] = value.__getValue();\n          }\n        } else if (value instanceof AnimatedEvent) {\n          props[key] = value.__getHandler();\n        } else {\n          props[key] = value;\n        }\n      }\n\n      return props;\n    }\n  }, {\n    key: \"__getAnimatedValue\",\n    value: function __getAnimatedValue() {\n      var props = {};\n\n      for (var key in this._props) {\n        var value = this._props[key];\n\n        if (value instanceof AnimatedNode) {\n          props[key] = value.__getAnimatedValue();\n        }\n      }\n\n      return props;\n    }\n  }, {\n    key: \"__attach\",\n    value: function __attach() {\n      for (var key in this._props) {\n        var value = this._props[key];\n\n        if (value instanceof AnimatedNode) {\n          value.__addChild(this);\n        }\n      }\n    }\n  }, {\n    key: \"__detach\",\n    value: function __detach() {\n      if (this.__isNative && this._animatedView) {\n        this.__disconnectAnimatedView();\n      }\n\n      for (var key in this._props) {\n        var value = this._props[key];\n\n        if (value instanceof AnimatedNode) {\n          value.__removeChild(this);\n        }\n      }\n\n      _get(_getPrototypeOf(AnimatedProps.prototype), \"__detach\", this).call(this);\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      this._callback();\n    }\n  }, {\n    key: \"__makeNative\",\n    value: function __makeNative() {\n      if (!this.__isNative) {\n        this.__isNative = true;\n\n        for (var key in this._props) {\n          var value = this._props[key];\n\n          if (value instanceof AnimatedNode) {\n            value.__makeNative();\n          }\n        }\n\n        if (this._animatedView) {\n          this.__connectAnimatedView();\n        }\n      }\n    }\n  }, {\n    key: \"setNativeView\",\n    value: function setNativeView(animatedView) {\n      if (this._animatedView === animatedView) {\n        return;\n      }\n\n      this._animatedView = animatedView;\n\n      if (this.__isNative) {\n        this.__connectAnimatedView();\n      }\n    }\n  }, {\n    key: \"__connectAnimatedView\",\n    value: function __connectAnimatedView() {\n      invariant(this.__isNative, 'Expected node to be marked as \"native\"');\n      var nativeViewTag = findNodeHandle(this._animatedView);\n      invariant(nativeViewTag != null, 'Unable to locate attached view in the native tree');\n      NativeAnimatedHelper.API.connectAnimatedNodeToView(this.__getNativeTag(), nativeViewTag);\n    }\n  }, {\n    key: \"__disconnectAnimatedView\",\n    value: function __disconnectAnimatedView() {\n      invariant(this.__isNative, 'Expected node to be marked as \"native\"');\n      var nativeViewTag = findNodeHandle(this._animatedView);\n      invariant(nativeViewTag != null, 'Unable to locate attached view in the native tree');\n      NativeAnimatedHelper.API.disconnectAnimatedNodeFromView(this.__getNativeTag(), nativeViewTag);\n    }\n  }, {\n    key: \"__getNativeConfig\",\n    value: function __getNativeConfig() {\n      var propsConfig = {};\n\n      for (var propKey in this._props) {\n        var value = this._props[propKey];\n\n        if (value instanceof AnimatedNode) {\n          value.__makeNative();\n\n          propsConfig[propKey] = value.__getNativeTag();\n        }\n      }\n\n      return {\n        type: 'props',\n        props: propsConfig\n      };\n    }\n  }]);\n\n  return AnimatedProps;\n}(AnimatedNode);\n\nexport default AnimatedProps;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native-web/src/vendor/react-native/Animated/nodes/AnimatedProps.js"],"names":["AnimatedEvent","AnimatedNode","AnimatedStyle","NativeAnimatedHelper","findNodeHandle","invariant","AnimatedProps","props","callback","style","_props","_callback","__attach","key","value","__isNative","__getValue","__getHandler","__getAnimatedValue","__addChild","_animatedView","__disconnectAnimatedView","__removeChild","__makeNative","__connectAnimatedView","animatedView","nativeViewTag","API","connectAnimatedNodeToView","__getNativeTag","disconnectAnimatedNodeFromView","propsConfig","propKey","type"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nimport { AnimatedEvent } from '../AnimatedEvent';\nimport AnimatedNode from './AnimatedNode';\nimport AnimatedStyle from './AnimatedStyle';\nimport NativeAnimatedHelper from '../NativeAnimatedHelper';\nimport findNodeHandle from '../../../../exports/findNodeHandle';\n\nimport invariant from 'fbjs/lib/invariant';\n\nclass AnimatedProps extends AnimatedNode {\n  _props: Object;\n  _animatedView: any;\n  _callback: () => void;\n\n  constructor(props: Object, callback: () => void) {\n    super();\n    if (props.style) {\n      props = {\n        ...props,\n        style: new AnimatedStyle(props.style),\n      };\n    }\n    this._props = props;\n    this._callback = callback;\n    this.__attach();\n  }\n\n  __getValue(): Object {\n    const props = {};\n    for (const key in this._props) {\n      const value = this._props[key];\n      if (value instanceof AnimatedNode) {\n        if (!value.__isNative || value instanceof AnimatedStyle) {\n          // We cannot use value of natively driven nodes this way as the value we have access from\n          // JS may not be up to date.\n          props[key] = value.__getValue();\n        }\n      } else if (value instanceof AnimatedEvent) {\n        props[key] = value.__getHandler();\n      } else {\n        props[key] = value;\n      }\n    }\n    return props;\n  }\n\n  __getAnimatedValue(): Object {\n    const props = {};\n    for (const key in this._props) {\n      const value = this._props[key];\n      if (value instanceof AnimatedNode) {\n        props[key] = value.__getAnimatedValue();\n      }\n    }\n    return props;\n  }\n\n  __attach(): void {\n    for (const key in this._props) {\n      const value = this._props[key];\n      if (value instanceof AnimatedNode) {\n        value.__addChild(this);\n      }\n    }\n  }\n\n  __detach(): void {\n    if (this.__isNative && this._animatedView) {\n      this.__disconnectAnimatedView();\n    }\n    for (const key in this._props) {\n      const value = this._props[key];\n      if (value instanceof AnimatedNode) {\n        value.__removeChild(this);\n      }\n    }\n    super.__detach();\n  }\n\n  update(): void {\n    this._callback();\n  }\n\n  __makeNative(): void {\n    if (!this.__isNative) {\n      this.__isNative = true;\n      for (const key in this._props) {\n        const value = this._props[key];\n        if (value instanceof AnimatedNode) {\n          value.__makeNative();\n        }\n      }\n      if (this._animatedView) {\n        this.__connectAnimatedView();\n      }\n    }\n  }\n\n  setNativeView(animatedView: any): void {\n    if (this._animatedView === animatedView) {\n      return;\n    }\n    this._animatedView = animatedView;\n    if (this.__isNative) {\n      this.__connectAnimatedView();\n    }\n  }\n\n  __connectAnimatedView(): void {\n    invariant(this.__isNative, 'Expected node to be marked as \"native\"');\n    const nativeViewTag: ?number = findNodeHandle(\n      this._animatedView,\n    );\n    invariant(\n      nativeViewTag != null,\n      'Unable to locate attached view in the native tree',\n    );\n    NativeAnimatedHelper.API.connectAnimatedNodeToView(\n      this.__getNativeTag(),\n      nativeViewTag,\n    );\n  }\n\n  __disconnectAnimatedView(): void {\n    invariant(this.__isNative, 'Expected node to be marked as \"native\"');\n    const nativeViewTag: ?number = findNodeHandle(\n      this._animatedView,\n    );\n    invariant(\n      nativeViewTag != null,\n      'Unable to locate attached view in the native tree',\n    );\n    NativeAnimatedHelper.API.disconnectAnimatedNodeFromView(\n      this.__getNativeTag(),\n      nativeViewTag,\n    );\n  }\n\n  __getNativeConfig(): Object {\n    const propsConfig = {};\n    for (const propKey in this._props) {\n      const value = this._props[propKey];\n      if (value instanceof AnimatedNode) {\n        value.__makeNative();\n        propsConfig[propKey] = value.__getNativeTag();\n      }\n    }\n    return {\n      type: 'props',\n      props: propsConfig,\n    };\n  }\n}\n\nexport default AnimatedProps;\n"]},"metadata":{},"sourceType":"module"}