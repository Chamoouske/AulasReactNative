{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport \"./polyfillNextTick\";\nimport customOpenDatabase from '@expo/websql/custom';\nimport { NativeModulesProxy } from '@unimodules/core';\nimport zipObject from 'lodash/zipObject';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar ExponentSQLite = NativeModulesProxy.ExponentSQLite;\n\nvar SQLiteDatabase = function () {\n  function SQLiteDatabase(name) {\n    _classCallCheck(this, SQLiteDatabase);\n\n    this._closed = false;\n    this._name = name;\n  }\n\n  _createClass(SQLiteDatabase, [{\n    key: \"exec\",\n    value: function exec(queries, readOnly, callback) {\n      if (this._closed) {\n        throw new Error(\"The SQLite database is closed\");\n      }\n\n      ExponentSQLite.exec(this._name, queries.map(_serializeQuery), readOnly).then(function (nativeResultSets) {\n        callback(null, nativeResultSets.map(_deserializeResultSet));\n      }, function (error) {\n        callback(error instanceof Error ? error : new Error(error));\n      });\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      this._closed = true;\n      ExponentSQLite.close(this._name);\n    }\n  }]);\n\n  return SQLiteDatabase;\n}();\n\nfunction _serializeQuery(query) {\n  return [query.sql, Platform.OS === 'android' ? query.args.map(_escapeBlob) : query.args];\n}\n\nfunction _deserializeResultSet(nativeResult) {\n  var _nativeResult = _slicedToArray(nativeResult, 5),\n      errorMessage = _nativeResult[0],\n      insertId = _nativeResult[1],\n      rowsAffected = _nativeResult[2],\n      columns = _nativeResult[3],\n      rows = _nativeResult[4];\n\n  if (errorMessage !== null) {\n    return {\n      error: new Error(errorMessage)\n    };\n  }\n\n  return {\n    insertId: insertId,\n    rowsAffected: rowsAffected,\n    rows: rows.map(function (row) {\n      return zipObject(columns, row);\n    })\n  };\n}\n\nfunction _escapeBlob(data) {\n  if (typeof data === 'string') {\n    return data.replace(/\\u0002/g, \"\\x02\\x02\").replace(/\\u0001/g, \"\\x01\\x02\").replace(/\\u0000/g, \"\\x01\\x01\");\n  } else {\n    return data;\n  }\n}\n\nvar _openExpoSQLiteDatabase = customOpenDatabase(SQLiteDatabase);\n\nfunction addExecMethod(db) {\n  db.exec = function (queries, readOnly, callback) {\n    db._db.exec(queries, readOnly, callback);\n  };\n\n  return db;\n}\n\nexport function openDatabase(name) {\n  var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '1.0';\n  var description = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : name;\n  var size = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  var callback = arguments.length > 4 ? arguments[4] : undefined;\n\n  if (name === undefined) {\n    throw new TypeError(\"The database name must not be undefined\");\n  }\n\n  var db = _openExpoSQLiteDatabase(name, version, description, size, callback);\n\n  var dbWithExec = addExecMethod(db);\n  return dbWithExec;\n}","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/expo-sqlite/src/SQLite.ts"],"names":["customOpenDatabase","NativeModulesProxy","zipObject","ExponentSQLite","SQLiteDatabase","name","_closed","_name","queries","readOnly","callback","Error","exec","map","_serializeQuery","then","nativeResultSets","_deserializeResultSet","error","close","query","sql","Platform","OS","args","_escapeBlob","nativeResult","errorMessage","insertId","rowsAffected","columns","rows","row","data","replace","_openExpoSQLiteDatabase","addExecMethod","db","_db","openDatabase","version","description","size","undefined","TypeError","dbWithExec"],"mappings":"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","sourcesContent":["import './polyfillNextTick';\n\nimport customOpenDatabase from '@expo/websql/custom';\nimport { NativeModulesProxy } from '@unimodules/core';\nimport zipObject from 'lodash/zipObject';\nimport { Platform } from 'react-native';\n\nimport { Query, SQLiteCallback, ResultSet, ResultSetError, WebSQLDatabase } from './SQLite.types';\n\nconst { ExponentSQLite } = NativeModulesProxy;\n\nclass SQLiteDatabase {\n  _name: string;\n  _closed: boolean = false;\n\n  constructor(name: string) {\n    this._name = name;\n  }\n\n  exec(queries: Query[], readOnly: boolean, callback: SQLiteCallback): void {\n    if (this._closed) {\n      throw new Error(`The SQLite database is closed`);\n    }\n\n    ExponentSQLite.exec(this._name, queries.map(_serializeQuery), readOnly).then(\n      nativeResultSets => {\n        callback(null, nativeResultSets.map(_deserializeResultSet));\n      },\n      error => {\n        // TODO: make the native API consistently reject with an error, not a string or other type\n        callback(error instanceof Error ? error : new Error(error));\n      }\n    );\n  }\n\n  close() {\n    this._closed = true;\n    ExponentSQLite.close(this._name);\n  }\n}\n\nfunction _serializeQuery(query: Query): [string, unknown[]] {\n  return [query.sql, Platform.OS === 'android' ? query.args.map(_escapeBlob) : query.args];\n}\n\nfunction _deserializeResultSet(nativeResult): ResultSet | ResultSetError {\n  const [errorMessage, insertId, rowsAffected, columns, rows] = nativeResult;\n  // TODO: send more structured error information from the native module so we can better construct\n  // a SQLException object\n  if (errorMessage !== null) {\n    return { error: new Error(errorMessage) } as ResultSetError;\n  }\n\n  return {\n    insertId,\n    rowsAffected,\n    rows: rows.map(row => zipObject(columns, row)),\n  };\n}\n\nfunction _escapeBlob<T>(data: T): T {\n  if (typeof data === 'string') {\n    /* eslint-disable no-control-regex */\n    return data\n      .replace(/\\u0002/g, '\\u0002\\u0002')\n      .replace(/\\u0001/g, '\\u0001\\u0002')\n      .replace(/\\u0000/g, '\\u0001\\u0001') as any;\n    /* eslint-enable no-control-regex */\n  } else {\n    return data;\n  }\n}\n\nconst _openExpoSQLiteDatabase = customOpenDatabase(SQLiteDatabase);\n\nfunction addExecMethod(db: any): WebSQLDatabase {\n  db.exec = (queries: Query[], readOnly: boolean, callback: SQLiteCallback): void => {\n    db._db.exec(queries, readOnly, callback);\n  };\n  return db;\n}\n\nexport function openDatabase(\n  name: string,\n  version: string = '1.0',\n  description: string = name,\n  size: number = 1,\n  callback?: (db: WebSQLDatabase) => void\n): WebSQLDatabase {\n  if (name === undefined) {\n    throw new TypeError(`The database name must not be undefined`);\n  }\n  const db = _openExpoSQLiteDatabase(name, version, description, size, callback);\n  const dbWithExec = addExecMethod(db);\n  return dbWithExec;\n}\n"]},"metadata":{},"sourceType":"module"}