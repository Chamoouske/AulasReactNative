{"ast":null,"code":"'use strict';\n\nvar codegenNativeComponent = require(\"../codegenNativeComponent\").default;\n\nvar UIManager = require(\"react-native-web/dist/exports/UIManager\").default;\n\njest.unmock(\"../../ReactNative/requireNativeComponent\");\njest.mock(\"../../Renderer/shims/createReactNativeComponentClass\", function () {\n  return function (componentName) {\n    return componentName;\n  };\n});\njest.spyOn(UIManager, 'getViewManagerConfig').mockImplementation(function (componentName) {\n  return componentName.includes('ComponentNameDoesNotExist') ? false : true;\n});\ndescribe('codegenNativeComponent', function () {\n  it('should require component as is ', function () {\n    var component = codegenNativeComponent('ComponentName');\n    expect(component).toBe('ComponentName');\n  });\n  it('should require paperComponentName', function () {\n    var component = codegenNativeComponent('ComponentName', {\n      paperComponentName: 'PaperComponentName'\n    });\n    expect(component).toBe('PaperComponentName');\n  });\n  it('should fall back to requiring the deprecated paper component name', function () {\n    var component = codegenNativeComponent('ComponentNameDoesNotExist', {\n      paperComponentNameDeprecated: 'ComponentName'\n    });\n    expect(component).toBe('ComponentName');\n  });\n  it('should require the new component name', function () {\n    var component = codegenNativeComponent('ComponentName', {\n      paperComponentNameDeprecated: 'ComponentNameDoesNotExist'\n    });\n    expect(component).toBe('ComponentName');\n  });\n  it('should throw if neither component names exist', function () {\n    expect(function () {\n      return codegenNativeComponent('ComponentNameDoesNotExistOne', {\n        paperComponentNameDeprecated: 'ComponentNameDoesNotExistTwo'\n      });\n    }).toThrow('Failed to find native component for either ComponentNameDoesNotExistOne or ComponentNameDoesNotExistTwo');\n  });\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Utilities/__tests__/codegenNativeComponent-test.js"],"names":["codegenNativeComponent","require","default","jest","unmock","mock","componentName","spyOn","UIManager","mockImplementation","includes","describe","it","component","expect","toBe","paperComponentName","paperComponentNameDeprecated","toThrow"],"mappings":"AAUA;;AAEA,IAAMA,sBAAsB,GAAGC,OAAO,6BAAP,CAAqCC,OAApE;;;;AAOAC,IAAI,CAACC,MAAL;AACAD,IAAI,CAACE,IAAL,yDAEE;AAAA,SAAM,UAAAC,aAAa;AAAA,WAAIA,aAAJ;AAAA,GAAnB;AAAA,CAFF;AAIAH,IAAI,CACDI,KADH,CACSC,SADT,EACoB,sBADpB,EAEGC,kBAFH,CAEsB,UAAAH,aAAa;AAAA,SAC/BA,aAAa,CAACI,QAAd,CAAuB,2BAAvB,IAAsD,KAAtD,GAA8D,IAD/B;AAAA,CAFnC;AAMAC,QAAQ,CAAC,wBAAD,EAA2B,YAAM;AACvCC,EAAAA,EAAE,CAAC,iCAAD,EAAoC,YAAM;AAC1C,QAAMC,SAAS,GAAGb,sBAAsB,CAAC,eAAD,CAAxC;AACAc,IAAAA,MAAM,CAACD,SAAD,CAAN,CAAkBE,IAAlB,CAAuB,eAAvB;AACD,GAHC,CAAF;AAKAH,EAAAA,EAAE,CAAC,mCAAD,EAAsC,YAAM;AAC5C,QAAMC,SAAS,GAAGb,sBAAsB,CAAC,eAAD,EAAkB;AACxDgB,MAAAA,kBAAkB,EAAE;AADoC,KAAlB,CAAxC;AAGAF,IAAAA,MAAM,CAACD,SAAD,CAAN,CAAkBE,IAAlB,CAAuB,oBAAvB;AACD,GALC,CAAF;AAOAH,EAAAA,EAAE,CAAC,mEAAD,EAAsE,YAAM;AAC5E,QAAMC,SAAS,GAAGb,sBAAsB,CAAC,2BAAD,EAA8B;AACpEiB,MAAAA,4BAA4B,EAAE;AADsC,KAA9B,CAAxC;AAGAH,IAAAA,MAAM,CAACD,SAAD,CAAN,CAAkBE,IAAlB,CAAuB,eAAvB;AACD,GALC,CAAF;AAOAH,EAAAA,EAAE,CAAC,uCAAD,EAA0C,YAAM;AAChD,QAAMC,SAAS,GAAGb,sBAAsB,CAAC,eAAD,EAAkB;AACxDiB,MAAAA,4BAA4B,EAAE;AAD0B,KAAlB,CAAxC;AAGAH,IAAAA,MAAM,CAACD,SAAD,CAAN,CAAkBE,IAAlB,CAAuB,eAAvB;AACD,GALC,CAAF;AAOAH,EAAAA,EAAE,CAAC,+CAAD,EAAkD,YAAM;AACxDE,IAAAA,MAAM,CAAC;AAAA,aACLd,sBAAsB,CAAC,8BAAD,EAAiC;AACrDiB,QAAAA,4BAA4B,EAAE;AADuB,OAAjC,CADjB;AAAA,KAAD,CAAN,CAIEC,OAJF,CAKE,yGALF;AAOD,GARC,CAAF;AASD,CApCO,CAAR","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @emails oncall+react_native\n */\n\n'use strict';\n\nconst codegenNativeComponent = require('../codegenNativeComponent').default;\nconst {UIManager} = require('react-native');\n\n// We need to unmock requireNativeComponent since it's under test.\n// Instead, we mock the function it calls, createReactNativeComponentClass,\n// so that we don't run into issues populating the registry with the same\n// component names.\njest.unmock('../../ReactNative/requireNativeComponent');\njest.mock(\n  '../../Renderer/shims/createReactNativeComponentClass',\n  () => componentName => componentName,\n);\njest\n  .spyOn(UIManager, 'getViewManagerConfig')\n  .mockImplementation(componentName =>\n    componentName.includes('ComponentNameDoesNotExist') ? false : true,\n  );\n\ndescribe('codegenNativeComponent', () => {\n  it('should require component as is ', () => {\n    const component = codegenNativeComponent('ComponentName');\n    expect(component).toBe('ComponentName');\n  });\n\n  it('should require paperComponentName', () => {\n    const component = codegenNativeComponent('ComponentName', {\n      paperComponentName: 'PaperComponentName',\n    });\n    expect(component).toBe('PaperComponentName');\n  });\n\n  it('should fall back to requiring the deprecated paper component name', () => {\n    const component = codegenNativeComponent('ComponentNameDoesNotExist', {\n      paperComponentNameDeprecated: 'ComponentName',\n    });\n    expect(component).toBe('ComponentName');\n  });\n\n  it('should require the new component name', () => {\n    const component = codegenNativeComponent('ComponentName', {\n      paperComponentNameDeprecated: 'ComponentNameDoesNotExist',\n    });\n    expect(component).toBe('ComponentName');\n  });\n\n  it('should throw if neither component names exist', () => {\n    expect(() =>\n      codegenNativeComponent('ComponentNameDoesNotExistOne', {\n        paperComponentNameDeprecated: 'ComponentNameDoesNotExistTwo',\n      }),\n    ).toThrow(\n      'Failed to find native component for either ComponentNameDoesNotExistOne or ComponentNameDoesNotExistTwo',\n    );\n  });\n});\n"]},"metadata":{},"sourceType":"script"}