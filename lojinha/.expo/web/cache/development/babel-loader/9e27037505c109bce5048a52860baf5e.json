{"ast":null,"code":"'use strict';\n\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Components/CheckBox/CheckBox.android.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar React = require('react');\n\nvar StyleSheet = require(\"../../StyleSheet/StyleSheet\");\n\nvar invariant = require('invariant');\n\nvar processColor = require(\"../../StyleSheet/processColor\");\n\nvar nullthrows = require('nullthrows');\n\nvar setAndForwardRef = require(\"../../Utilities/setAndForwardRef\");\n\nimport AndroidCheckBoxNativeComponent, { Commands as AndroidCheckBoxCommands } from \"./AndroidCheckBoxNativeComponent\";\n\nvar CheckBox = function (_React$Component) {\n  _inherits(CheckBox, _React$Component);\n\n  var _super = _createSuper(CheckBox);\n\n  function CheckBox() {\n    var _this;\n\n    _classCallCheck(this, CheckBox);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this._nativeRef = null;\n    _this._setNativeRef = setAndForwardRef({\n      getForwardedRef: function getForwardedRef() {\n        return _this.props.forwardedRef;\n      },\n      setLocalRef: function setLocalRef(ref) {\n        _this._nativeRef = ref;\n      }\n    });\n\n    _this._onChange = function (event) {\n      var _this$props$value;\n\n      var value = (_this$props$value = _this.props.value) != null ? _this$props$value : false;\n      AndroidCheckBoxCommands.setNativeValue(nullthrows(_this._nativeRef), value);\n      _this.props.onChange && _this.props.onChange(event);\n      _this.props.onValueChange && _this.props.onValueChange(event.nativeEvent.value);\n    };\n\n    return _this;\n  }\n\n  _createClass(CheckBox, [{\n    key: \"_getTintColors\",\n    value: function _getTintColors(tintColors) {\n      if (tintColors) {\n        var processedTextColorTrue = processColor(tintColors.true);\n        invariant(processedTextColorTrue == null || typeof processedTextColorTrue === 'number', 'Unexpected color given for tintColors.true');\n        var processedTextColorFalse = processColor(tintColors.true);\n        invariant(processedTextColorFalse == null || typeof processedTextColorFalse === 'number', 'Unexpected color given for tintColors.false');\n        return {\n          true: processedTextColorTrue,\n          false: processedTextColorFalse\n        };\n      } else {\n        return undefined;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props$disabled, _this$props$value2;\n\n      var _this$props = this.props,\n          _ = _this$props.disabled,\n          __ = _this$props.value,\n          tintColors = _this$props.tintColors,\n          style = _this$props.style,\n          forwardedRef = _this$props.forwardedRef,\n          props = _objectWithoutProperties(_this$props, [\"disabled\", \"value\", \"tintColors\", \"style\", \"forwardedRef\"]);\n\n      var disabled = (_this$props$disabled = this.props.disabled) != null ? _this$props$disabled : false;\n      var value = (_this$props$value2 = this.props.value) != null ? _this$props$value2 : false;\n\n      var nativeProps = _objectSpread(_objectSpread({}, props), {}, {\n        onStartShouldSetResponder: function onStartShouldSetResponder() {\n          return true;\n        },\n        onResponderTerminationRequest: function onResponderTerminationRequest() {\n          return false;\n        },\n        enabled: !disabled,\n        on: value,\n        tintColors: this._getTintColors(tintColors),\n        style: [styles.rctCheckBox, style]\n      });\n\n      return React.createElement(AndroidCheckBoxNativeComponent, _extends({}, nativeProps, {\n        ref: this._setNativeRef,\n        onChange: this._onChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 7\n        }\n      }));\n    }\n  }]);\n\n  return CheckBox;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  rctCheckBox: {\n    height: 32,\n    width: 32\n  }\n});\nvar CheckBoxWithRef = React.forwardRef(function CheckBoxWithRef(props, ref) {\n  return React.createElement(CheckBox, _extends({}, props, {\n    forwardedRef: ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 10\n    }\n  }));\n});\nmodule.exports = CheckBoxWithRef;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Components/CheckBox/CheckBox.android.js"],"names":["React","require","StyleSheet","invariant","processColor","nullthrows","setAndForwardRef","AndroidCheckBoxNativeComponent","Commands","AndroidCheckBoxCommands","CheckBox","_nativeRef","_setNativeRef","getForwardedRef","props","forwardedRef","setLocalRef","ref","_onChange","event","value","setNativeValue","onChange","onValueChange","nativeEvent","tintColors","processedTextColorTrue","true","processedTextColorFalse","false","undefined","_","disabled","__","style","nativeProps","onStartShouldSetResponder","onResponderTerminationRequest","enabled","on","_getTintColors","styles","rctCheckBox","Component","create","height","width","CheckBoxWithRef","forwardRef","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nconst React = require('react');\nconst StyleSheet = require('../../StyleSheet/StyleSheet');\nconst invariant = require('invariant');\nconst processColor = require('../../StyleSheet/processColor');\n\nconst nullthrows = require('nullthrows');\nconst setAndForwardRef = require('../../Utilities/setAndForwardRef');\n\nimport AndroidCheckBoxNativeComponent, {\n  Commands as AndroidCheckBoxCommands,\n} from './AndroidCheckBoxNativeComponent';\n\nimport type {ViewProps} from '../View/ViewPropTypes';\nimport type {SyntheticEvent} from '../../Types/CoreEventTypes';\nimport type {ColorValue} from '../../StyleSheet/StyleSheetTypes';\n\ntype CheckBoxEvent = SyntheticEvent<\n  $ReadOnly<{|\n    target: number,\n    value: boolean,\n  |}>,\n>;\n\ntype CommonProps = $ReadOnly<{|\n  ...ViewProps,\n\n  /**\n   * Used in case the props change removes the component.\n   */\n  onChange?: ?(event: CheckBoxEvent) => mixed,\n\n  /**\n   * Invoked with the new value when the value changes.\n   */\n  onValueChange?: ?(value: boolean) => mixed,\n\n  /**\n   * Used to locate this view in end-to-end tests.\n   */\n  testID?: ?string,\n|}>;\n\ntype Props = $ReadOnly<{|\n  ...CommonProps,\n\n  /**\n   * The value of the checkbox.  If true the checkbox will be turned on.\n   * Default value is false.\n   */\n  value?: ?boolean,\n\n  /**\n   * If true the user won't be able to toggle the checkbox.\n   * Default value is false.\n   */\n  disabled?: ?boolean,\n\n  /**\n   * Used to get the ref for the native checkbox\n   */\n  forwardedRef?: ?React.Ref<typeof AndroidCheckBoxNativeComponent>,\n\n  /**\n   * Controls the colors the checkbox has in checked and unchecked states.\n   */\n  tintColors?: {|true?: ?ColorValue, false?: ?ColorValue|},\n|}>;\n\n/**\n * Renders a boolean input (Android only).\n *\n * This is a controlled component that requires an `onValueChange` callback that\n * updates the `value` prop in order for the component to reflect user actions.\n * If the `value` prop is not updated, the component will continue to render\n * the supplied `value` prop instead of the expected result of any user actions.\n *\n * ```\n * import React from 'react';\n * import { AppRegistry, StyleSheet, Text, View, CheckBox } from 'react-native';\n *\n * export default class App extends React.Component {\n *   constructor(props) {\n *     super(props);\n *     this.state = {\n *       checked: false\n *     }\n *   }\n *\n *   toggle() {\n *     this.setState(({checked}) => {\n *       return {\n *         checked: !checked\n *       };\n *     });\n *   }\n *\n *   render() {\n *     const {checked} = this.state;\n *     return (\n *       <View style={styles.container}>\n *         <Text>Checked</Text>\n *         <CheckBox value={checked} onChange={this.toggle.bind(this)} />\n *       </View>\n *     );\n *   }\n * }\n *\n * const styles = StyleSheet.create({\n *   container: {\n *     flex: 1,\n *     flexDirection: 'row',\n *     alignItems: 'center',\n *     justifyContent: 'center',\n *   },\n * });\n *\n * // skip this line if using Create React Native App\n * AppRegistry.registerComponent('App', () => App);\n * ```\n *\n * @keyword checkbox\n * @keyword toggle\n */\nclass CheckBox extends React.Component<Props> {\n  _nativeRef: ?React.ElementRef<typeof AndroidCheckBoxNativeComponent> = null;\n  _setNativeRef = setAndForwardRef({\n    getForwardedRef: () => this.props.forwardedRef,\n    setLocalRef: ref => {\n      this._nativeRef = ref;\n    },\n  });\n\n  _onChange = (event: CheckBoxEvent) => {\n    const value = this.props.value ?? false;\n    AndroidCheckBoxCommands.setNativeValue(nullthrows(this._nativeRef), value);\n    // Change the props after the native props are set in case the props\n    // change removes the component\n    this.props.onChange && this.props.onChange(event);\n    this.props.onValueChange &&\n      this.props.onValueChange(event.nativeEvent.value);\n  };\n\n  _getTintColors(tintColors) {\n    if (tintColors) {\n      const processedTextColorTrue = processColor(tintColors.true);\n      invariant(\n        processedTextColorTrue == null ||\n          typeof processedTextColorTrue === 'number',\n        'Unexpected color given for tintColors.true',\n      );\n      const processedTextColorFalse = processColor(tintColors.true);\n      invariant(\n        processedTextColorFalse == null ||\n          typeof processedTextColorFalse === 'number',\n        'Unexpected color given for tintColors.false',\n      );\n      return {\n        true: processedTextColorTrue,\n        false: processedTextColorFalse,\n      };\n    } else {\n      return undefined;\n    }\n  }\n\n  render() {\n    const {\n      disabled: _,\n      value: __,\n      tintColors,\n      style,\n      forwardedRef,\n      ...props\n    } = this.props;\n    const disabled = this.props.disabled ?? false;\n    const value = this.props.value ?? false;\n\n    const nativeProps = {\n      ...props,\n      onStartShouldSetResponder: () => true,\n      onResponderTerminationRequest: () => false,\n      enabled: !disabled,\n      on: value,\n      tintColors: this._getTintColors(tintColors),\n      style: [styles.rctCheckBox, style],\n    };\n    return (\n      <AndroidCheckBoxNativeComponent\n        {...nativeProps}\n        ref={this._setNativeRef}\n        onChange={this._onChange}\n      />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  rctCheckBox: {\n    height: 32,\n    width: 32,\n  },\n});\n\ntype CheckBoxType = React.AbstractComponent<\n  Props,\n  React.ElementRef<typeof AndroidCheckBoxNativeComponent>,\n>;\n\nconst CheckBoxWithRef = React.forwardRef<\n  Props,\n  React.ElementRef<typeof AndroidCheckBoxNativeComponent>,\n>(function CheckBoxWithRef(props, ref) {\n  return <CheckBox {...props} forwardedRef={ref} />;\n});\n\nmodule.exports = (CheckBoxWithRef: CheckBoxType);\n"]},"metadata":{},"sourceType":"module"}