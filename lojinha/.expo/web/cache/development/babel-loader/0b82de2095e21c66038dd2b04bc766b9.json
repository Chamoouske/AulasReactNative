{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar image_utils_1 = require(\"@expo/image-utils\");\n\nvar fs_extra_1 = __importDefault(require(\"fs-extra\"));\n\nvar path_1 = __importDefault(require(\"path\"));\n\nvar core_plugins_1 = require(\"../plugins/core-plugins\");\n\nvar XML_1 = require(\"../utils/XML\");\n\nvar Colors = __importStar(require(\"./Colors\"));\n\nvar Resources_1 = require(\"./Resources\");\n\nexports.dpiValues = {\n  mdpi: {\n    folderName: 'mipmap-mdpi',\n    scale: 1\n  },\n  hdpi: {\n    folderName: 'mipmap-hdpi',\n    scale: 1.5\n  },\n  xhdpi: {\n    folderName: 'mipmap-xhdpi',\n    scale: 2\n  },\n  xxhdpi: {\n    folderName: 'mipmap-xxhdpi',\n    scale: 3\n  },\n  xxxhdpi: {\n    folderName: 'mipmap-xxxhdpi',\n    scale: 4\n  }\n};\nvar BASELINE_PIXEL_SIZE = 48;\nexports.ANDROID_RES_PATH = 'android/app/src/main/res/';\nvar MIPMAP_ANYDPI_V26 = 'mipmap-anydpi-v26';\nvar ICON_BACKGROUND = 'iconBackground';\nvar IC_LAUNCHER_PNG = 'ic_launcher.png';\nvar IC_LAUNCHER_ROUND_PNG = 'ic_launcher_round.png';\nvar IC_LAUNCHER_BACKGROUND_PNG = 'ic_launcher_background.png';\nvar IC_LAUNCHER_FOREGROUND_PNG = 'ic_launcher_foreground.png';\nvar IC_LAUNCHER_XML = 'ic_launcher.xml';\nvar IC_LAUNCHER_ROUND_XML = 'ic_launcher_round.xml';\n\nexports.withIcons = function (config) {\n  return core_plugins_1.withDangerousMod(config, ['android', function _callee(config) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(setIconAsync(config, config.modRequest.projectRoot));\n\n          case 2:\n            return _context.abrupt(\"return\", config);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }]);\n};\n\nfunction getIcon(config) {\n  var _a;\n\n  return config.icon || ((_a = config.android) === null || _a === void 0 ? void 0 : _a.icon) || null;\n}\n\nexports.getIcon = getIcon;\n\nfunction getAdaptiveIcon(config) {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n\n  return {\n    foregroundImage: (_c = (_b = (_a = config.android) === null || _a === void 0 ? void 0 : _a.adaptiveIcon) === null || _b === void 0 ? void 0 : _b.foregroundImage) !== null && _c !== void 0 ? _c : null,\n    backgroundColor: (_f = (_e = (_d = config.android) === null || _d === void 0 ? void 0 : _d.adaptiveIcon) === null || _e === void 0 ? void 0 : _e.backgroundColor) !== null && _f !== void 0 ? _f : null,\n    backgroundImage: (_j = (_h = (_g = config.android) === null || _g === void 0 ? void 0 : _g.adaptiveIcon) === null || _h === void 0 ? void 0 : _h.backgroundImage) !== null && _j !== void 0 ? _j : null\n  };\n}\n\nexports.getAdaptiveIcon = getAdaptiveIcon;\n\nfunction setIconAsync(config, projectRoot) {\n  var _getAdaptiveIcon, foregroundImage, backgroundColor, backgroundImage, icon;\n\n  return _regeneratorRuntime.async(function setIconAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _getAdaptiveIcon = getAdaptiveIcon(config), foregroundImage = _getAdaptiveIcon.foregroundImage, backgroundColor = _getAdaptiveIcon.backgroundColor, backgroundImage = _getAdaptiveIcon.backgroundImage;\n          icon = foregroundImage !== null && foregroundImage !== void 0 ? foregroundImage : getIcon(config);\n\n          if (icon) {\n            _context2.next = 4;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", null);\n\n        case 4:\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(configureLegacyIconAsync(projectRoot, icon, backgroundImage, backgroundColor));\n\n        case 6:\n          _context2.next = 8;\n          return _regeneratorRuntime.awrap(configureAdaptiveIconAsync(projectRoot, icon, backgroundImage, backgroundColor !== null && backgroundColor !== void 0 ? backgroundColor : '#FFFFFF'));\n\n        case 8:\n          return _context2.abrupt(\"return\", true);\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.setIconAsync = setIconAsync;\n\nfunction configureLegacyIconAsync(projectRoot, icon, backgroundImage, backgroundColor) {\n  return _regeneratorRuntime.async(function configureLegacyIconAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return _regeneratorRuntime.awrap(Promise.all(Object.values(exports.dpiValues).map(function _callee2(_ref) {\n            var folderName, scale, dpiFolderPath, iconSizePx, squareIconImage, roundIconImage, squareBackgroundLayer, roundBackgroundLayer;\n            return _regeneratorRuntime.async(function _callee2$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    folderName = _ref.folderName, scale = _ref.scale;\n                    dpiFolderPath = path_1.default.resolve(projectRoot, exports.ANDROID_RES_PATH, folderName);\n                    iconSizePx = BASELINE_PIXEL_SIZE * scale;\n                    backgroundColor = backgroundImage ? 'transparent' : backgroundColor !== null && backgroundColor !== void 0 ? backgroundColor : 'transparent';\n                    _context3.next = 6;\n                    return _regeneratorRuntime.awrap(image_utils_1.generateImageAsync({\n                      projectRoot: projectRoot,\n                      cacheType: 'android-standard-square'\n                    }, {\n                      src: icon,\n                      width: iconSizePx,\n                      height: iconSizePx,\n                      resizeMode: 'cover',\n                      backgroundColor: backgroundColor\n                    }));\n\n                  case 6:\n                    squareIconImage = _context3.sent.source;\n                    _context3.next = 9;\n                    return _regeneratorRuntime.awrap(image_utils_1.generateImageAsync({\n                      projectRoot: projectRoot,\n                      cacheType: 'android-standard-circle'\n                    }, {\n                      src: icon,\n                      width: iconSizePx,\n                      height: iconSizePx,\n                      resizeMode: 'cover',\n                      backgroundColor: backgroundColor,\n                      borderRadius: iconSizePx / 2\n                    }));\n\n                  case 9:\n                    roundIconImage = _context3.sent.source;\n\n                    if (!backgroundImage) {\n                      _context3.next = 23;\n                      break;\n                    }\n\n                    _context3.next = 13;\n                    return _regeneratorRuntime.awrap(image_utils_1.generateImageAsync({\n                      projectRoot: projectRoot,\n                      cacheType: 'android-standard-square-background'\n                    }, {\n                      src: backgroundImage,\n                      width: iconSizePx,\n                      height: iconSizePx,\n                      resizeMode: 'cover',\n                      backgroundColor: 'transparent'\n                    }));\n\n                  case 13:\n                    squareBackgroundLayer = _context3.sent.source;\n                    _context3.next = 16;\n                    return _regeneratorRuntime.awrap(image_utils_1.generateImageAsync({\n                      projectRoot: projectRoot,\n                      cacheType: 'android-standard-round-background'\n                    }, {\n                      src: backgroundImage,\n                      width: iconSizePx,\n                      height: iconSizePx,\n                      resizeMode: 'cover',\n                      backgroundColor: 'transparent',\n                      borderRadius: iconSizePx / 2\n                    }));\n\n                  case 16:\n                    roundBackgroundLayer = _context3.sent.source;\n                    _context3.next = 19;\n                    return _regeneratorRuntime.awrap(image_utils_1.compositeImagesAsync({\n                      foreground: squareIconImage,\n                      background: squareBackgroundLayer\n                    }));\n\n                  case 19:\n                    squareIconImage = _context3.sent;\n                    _context3.next = 22;\n                    return _regeneratorRuntime.awrap(image_utils_1.compositeImagesAsync({\n                      foreground: roundIconImage,\n                      background: roundBackgroundLayer\n                    }));\n\n                  case 22:\n                    roundIconImage = _context3.sent;\n\n                  case 23:\n                    _context3.next = 25;\n                    return _regeneratorRuntime.awrap(fs_extra_1.default.ensureDir(dpiFolderPath));\n\n                  case 25:\n                    _context3.next = 27;\n                    return _regeneratorRuntime.awrap(fs_extra_1.default.writeFile(path_1.default.resolve(dpiFolderPath, IC_LAUNCHER_PNG), squareIconImage));\n\n                  case 27:\n                    _context3.next = 29;\n                    return _regeneratorRuntime.awrap(fs_extra_1.default.writeFile(path_1.default.resolve(dpiFolderPath, IC_LAUNCHER_ROUND_PNG), roundIconImage));\n\n                  case 29:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          })));\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction configureAdaptiveIconAsync(projectRoot, foregroundImage, backgroundImage, backgroundColor) {\n  var icLauncherXmlString;\n  return _regeneratorRuntime.async(function configureAdaptiveIconAsync$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return _regeneratorRuntime.awrap(setBackgroundColorAsync(projectRoot, backgroundColor));\n\n        case 2:\n          _context6.next = 4;\n          return _regeneratorRuntime.awrap(Promise.all(Object.values(exports.dpiValues).map(function _callee3(_ref2) {\n            var folderName, scale, dpiFolderPath, iconSizePx, adpativeIconForeground, adpativeIconBackground;\n            return _regeneratorRuntime.async(function _callee3$(_context5) {\n              while (1) {\n                switch (_context5.prev = _context5.next) {\n                  case 0:\n                    folderName = _ref2.folderName, scale = _ref2.scale;\n                    dpiFolderPath = path_1.default.resolve(projectRoot, exports.ANDROID_RES_PATH, folderName);\n                    iconSizePx = BASELINE_PIXEL_SIZE * scale;\n                    _context5.prev = 3;\n                    _context5.next = 6;\n                    return _regeneratorRuntime.awrap(image_utils_1.generateImageAsync({\n                      projectRoot: projectRoot,\n                      cacheType: 'android-adaptive-foreground'\n                    }, {\n                      src: foregroundImage,\n                      width: iconSizePx,\n                      height: iconSizePx,\n                      resizeMode: 'cover',\n                      backgroundColor: 'transparent'\n                    }));\n\n                  case 6:\n                    adpativeIconForeground = _context5.sent.source;\n                    _context5.next = 9;\n                    return _regeneratorRuntime.awrap(fs_extra_1.default.writeFile(path_1.default.resolve(dpiFolderPath, IC_LAUNCHER_FOREGROUND_PNG), adpativeIconForeground));\n\n                  case 9:\n                    if (!backgroundImage) {\n                      _context5.next = 17;\n                      break;\n                    }\n\n                    _context5.next = 12;\n                    return _regeneratorRuntime.awrap(image_utils_1.generateImageAsync({\n                      projectRoot: projectRoot,\n                      cacheType: 'android-adaptive-background'\n                    }, {\n                      src: backgroundImage,\n                      width: iconSizePx,\n                      height: iconSizePx,\n                      resizeMode: 'cover',\n                      backgroundColor: 'transparent'\n                    }));\n\n                  case 12:\n                    adpativeIconBackground = _context5.sent.source;\n                    _context5.next = 15;\n                    return _regeneratorRuntime.awrap(fs_extra_1.default.writeFile(path_1.default.resolve(dpiFolderPath, IC_LAUNCHER_BACKGROUND_PNG), adpativeIconBackground));\n\n                  case 15:\n                    _context5.next = 19;\n                    break;\n\n                  case 17:\n                    _context5.next = 19;\n                    return _regeneratorRuntime.awrap(removeBackgroundImageFilesAsync(projectRoot));\n\n                  case 19:\n                    _context5.next = 24;\n                    break;\n\n                  case 21:\n                    _context5.prev = 21;\n                    _context5.t0 = _context5[\"catch\"](3);\n                    throw new Error('Encountered an issue resizing adaptive app icon: ' + _context5.t0);\n\n                  case 24:\n                  case \"end\":\n                    return _context5.stop();\n                }\n              }\n            }, null, null, [[3, 21]], Promise);\n          })));\n\n        case 4:\n          icLauncherXmlString = exports.createAdaptiveIconXmlString(backgroundImage);\n          _context6.next = 7;\n          return _regeneratorRuntime.awrap(createAdaptiveIconXmlFiles(projectRoot, icLauncherXmlString));\n\n        case 7:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.configureAdaptiveIconAsync = configureAdaptiveIconAsync;\n\nfunction setBackgroundColorAsync(projectRoot, backgroundColor) {\n  var colorsXmlPath, colorsJson, colorItemToAdd;\n  return _regeneratorRuntime.async(function setBackgroundColorAsync$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return _regeneratorRuntime.awrap(Colors.getProjectColorsXMLPathAsync(projectRoot));\n\n        case 2:\n          colorsXmlPath = _context7.sent;\n          _context7.next = 5;\n          return _regeneratorRuntime.awrap(Resources_1.readResourcesXMLAsync({\n            path: colorsXmlPath\n          }));\n\n        case 5:\n          colorsJson = _context7.sent;\n\n          if (backgroundColor) {\n            colorItemToAdd = Resources_1.buildResourceItem({\n              name: ICON_BACKGROUND,\n              value: backgroundColor\n            });\n            colorsJson = Colors.setColorItem(colorItemToAdd, colorsJson);\n          } else {\n            colorsJson = Colors.removeColorItem(ICON_BACKGROUND, colorsJson);\n          }\n\n          _context7.next = 9;\n          return _regeneratorRuntime.awrap(XML_1.writeXMLAsync({\n            path: colorsXmlPath,\n            xml: colorsJson\n          }));\n\n        case 9:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.createAdaptiveIconXmlString = function (backgroundImage) {\n  var background = \"<background android:drawable=\\\"@color/iconBackground\\\"/>\";\n\n  if (backgroundImage) {\n    background = \"<background android:drawable=\\\"@mipmap/ic_launcher_background\\\"/>\";\n  }\n\n  return \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n<adaptive-icon xmlns:android=\\\"http://schemas.android.com/apk/res/android\\\">\\n    \" + background + \"\\n    <foreground android:drawable=\\\"@mipmap/ic_launcher_foreground\\\"/>\\n</adaptive-icon>\";\n};\n\nfunction createAdaptiveIconXmlFiles(projectRoot, icLauncherXmlString) {\n  var anyDpiV26Directory;\n  return _regeneratorRuntime.async(function createAdaptiveIconXmlFiles$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          anyDpiV26Directory = path_1.default.resolve(projectRoot, exports.ANDROID_RES_PATH, MIPMAP_ANYDPI_V26);\n          _context8.next = 3;\n          return _regeneratorRuntime.awrap(fs_extra_1.default.ensureDir(anyDpiV26Directory));\n\n        case 3:\n          _context8.next = 5;\n          return _regeneratorRuntime.awrap(fs_extra_1.default.writeFile(path_1.default.resolve(anyDpiV26Directory, IC_LAUNCHER_XML), icLauncherXmlString));\n\n        case 5:\n          _context8.next = 7;\n          return _regeneratorRuntime.awrap(fs_extra_1.default.writeFile(path_1.default.resolve(anyDpiV26Directory, IC_LAUNCHER_ROUND_XML), icLauncherXmlString));\n\n        case 7:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction removeBackgroundImageFilesAsync(projectRoot) {\n  return _regeneratorRuntime.async(function removeBackgroundImageFilesAsync$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return _regeneratorRuntime.awrap(Promise.all(Object.values(exports.dpiValues).map(function _callee4(_ref3) {\n            var folderName, dpiFolderPath;\n            return _regeneratorRuntime.async(function _callee4$(_context9) {\n              while (1) {\n                switch (_context9.prev = _context9.next) {\n                  case 0:\n                    folderName = _ref3.folderName;\n                    dpiFolderPath = path_1.default.resolve(projectRoot, exports.ANDROID_RES_PATH, folderName);\n                    _context9.next = 4;\n                    return _regeneratorRuntime.awrap(fs_extra_1.default.remove(path_1.default.resolve(dpiFolderPath, IC_LAUNCHER_BACKGROUND_PNG)));\n\n                  case 4:\n                  case \"end\":\n                    return _context9.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          })));\n\n        case 2:\n          return _context10.abrupt(\"return\", _context10.sent);\n\n        case 3:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../../src/android/Icon.ts"],"names":[],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport { compositeImagesAsync, generateImageAsync } from '@expo/image-utils';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withDangerousMod } from '../plugins/core-plugins';\nimport { writeXMLAsync } from '../utils/XML';\nimport * as Colors from './Colors';\nimport { buildResourceItem, readResourcesXMLAsync } from './Resources';\n\ntype DPIString = 'mdpi' | 'hdpi' | 'xhdpi' | 'xxhdpi' | 'xxxhdpi';\ntype dpiMap = Record<DPIString, { folderName: string; scale: number }>;\n\nexport const dpiValues: dpiMap = {\n  mdpi: { folderName: 'mipmap-mdpi', scale: 1 },\n  hdpi: { folderName: 'mipmap-hdpi', scale: 1.5 },\n  xhdpi: { folderName: 'mipmap-xhdpi', scale: 2 },\n  xxhdpi: { folderName: 'mipmap-xxhdpi', scale: 3 },\n  xxxhdpi: { folderName: 'mipmap-xxxhdpi', scale: 4 },\n};\nconst BASELINE_PIXEL_SIZE = 48;\nexport const ANDROID_RES_PATH = 'android/app/src/main/res/';\nconst MIPMAP_ANYDPI_V26 = 'mipmap-anydpi-v26';\nconst ICON_BACKGROUND = 'iconBackground';\nconst IC_LAUNCHER_PNG = 'ic_launcher.png';\nconst IC_LAUNCHER_ROUND_PNG = 'ic_launcher_round.png';\nconst IC_LAUNCHER_BACKGROUND_PNG = 'ic_launcher_background.png';\nconst IC_LAUNCHER_FOREGROUND_PNG = 'ic_launcher_foreground.png';\nconst IC_LAUNCHER_XML = 'ic_launcher.xml';\nconst IC_LAUNCHER_ROUND_XML = 'ic_launcher_round.xml';\n\nexport const withIcons: ConfigPlugin = config => {\n  return withDangerousMod(config, [\n    'android',\n    async config => {\n      await setIconAsync(config, config.modRequest.projectRoot);\n      return config;\n    },\n  ]);\n};\n\nexport function getIcon(config: ExpoConfig) {\n  return config.icon || config.android?.icon || null;\n}\n\nexport function getAdaptiveIcon(config: ExpoConfig) {\n  return {\n    foregroundImage: config.android?.adaptiveIcon?.foregroundImage ?? null,\n    backgroundColor: config.android?.adaptiveIcon?.backgroundColor ?? null,\n    backgroundImage: config.android?.adaptiveIcon?.backgroundImage ?? null,\n  };\n}\n\n/**\n * Resizes the user-provided icon to create a set of legacy icon files in\n * their respective \"mipmap\" directories for <= Android 7, and creates a set of adaptive\n * icon files for > Android 7 from the adaptive icon files (if provided).\n */\nexport async function setIconAsync(config: ExpoConfig, projectRoot: string) {\n  const { foregroundImage, backgroundColor, backgroundImage } = getAdaptiveIcon(config);\n  const icon = foregroundImage ?? getIcon(config);\n\n  if (!icon) {\n    return null;\n  }\n\n  await configureLegacyIconAsync(projectRoot, icon, backgroundImage, backgroundColor);\n\n  await configureAdaptiveIconAsync(\n    projectRoot,\n    icon,\n    backgroundImage,\n    backgroundColor ?? '#FFFFFF'\n  );\n\n  return true;\n}\n\n/**\n * Configures legacy icon files to be used on Android 7 and earlier. If adaptive icon configuration\n * was provided, we create a pseudo-adaptive icon by layering the provided files (or background\n * color if no backgroundImage is provided. If no backgroundImage and no backgroundColor are provided,\n * the background is set to transparent.)\n */\nasync function configureLegacyIconAsync(\n  projectRoot: string,\n  icon: string,\n  backgroundImage: string | null,\n  backgroundColor: string | null\n) {\n  await Promise.all(\n    Object.values(dpiValues).map(async ({ folderName, scale }) => {\n      const dpiFolderPath = path.resolve(projectRoot, ANDROID_RES_PATH, folderName);\n      const iconSizePx = BASELINE_PIXEL_SIZE * scale;\n\n      // backgroundImage overrides backgroundColor\n      backgroundColor = backgroundImage ? 'transparent' : backgroundColor ?? 'transparent';\n\n      let squareIconImage: Buffer = (\n        await generateImageAsync(\n          { projectRoot, cacheType: 'android-standard-square' },\n          {\n            src: icon,\n            width: iconSizePx,\n            height: iconSizePx,\n            resizeMode: 'cover',\n            backgroundColor,\n          }\n        )\n      ).source;\n      let roundIconImage: Buffer = (\n        await generateImageAsync(\n          { projectRoot, cacheType: 'android-standard-circle' },\n          {\n            src: icon,\n            width: iconSizePx,\n            height: iconSizePx,\n            resizeMode: 'cover',\n            backgroundColor,\n            borderRadius: iconSizePx / 2,\n          }\n        )\n      ).source;\n\n      if (backgroundImage) {\n        // Layer the buffers we just created on top of the background image that's provided\n        const squareBackgroundLayer = (\n          await generateImageAsync(\n            { projectRoot, cacheType: 'android-standard-square-background' },\n            {\n              src: backgroundImage,\n              width: iconSizePx,\n              height: iconSizePx,\n              resizeMode: 'cover',\n              backgroundColor: 'transparent',\n            }\n          )\n        ).source;\n        const roundBackgroundLayer = (\n          await generateImageAsync(\n            { projectRoot, cacheType: 'android-standard-round-background' },\n            {\n              src: backgroundImage,\n              width: iconSizePx,\n              height: iconSizePx,\n              resizeMode: 'cover',\n              backgroundColor: 'transparent',\n              borderRadius: iconSizePx / 2,\n            }\n          )\n        ).source;\n        squareIconImage = await compositeImagesAsync({\n          foreground: squareIconImage,\n          background: squareBackgroundLayer,\n        });\n        roundIconImage = await compositeImagesAsync({\n          foreground: roundIconImage,\n          background: roundBackgroundLayer,\n        });\n      }\n\n      await fs.ensureDir(dpiFolderPath);\n      await fs.writeFile(path.resolve(dpiFolderPath, IC_LAUNCHER_PNG), squareIconImage);\n      await fs.writeFile(path.resolve(dpiFolderPath, IC_LAUNCHER_ROUND_PNG), roundIconImage);\n    })\n  );\n}\n\n/**\n * Configures adaptive icon files to be used on Android 8 and up. A foreground image must be provided,\n * and will have a transparent background unless:\n * - A backgroundImage is provided, or\n * - A backgroundColor was specified\n */\nexport async function configureAdaptiveIconAsync(\n  projectRoot: string,\n  foregroundImage: string,\n  backgroundImage: string | null,\n  backgroundColor: string\n) {\n  await setBackgroundColorAsync(projectRoot, backgroundColor);\n\n  await Promise.all(\n    Object.values(dpiValues).map(async ({ folderName, scale }) => {\n      const dpiFolderPath = path.resolve(projectRoot, ANDROID_RES_PATH, folderName);\n      const iconSizePx = BASELINE_PIXEL_SIZE * scale;\n\n      try {\n        const adpativeIconForeground = (\n          await generateImageAsync(\n            { projectRoot, cacheType: 'android-adaptive-foreground' },\n            {\n              src: foregroundImage,\n              width: iconSizePx,\n              height: iconSizePx,\n              resizeMode: 'cover',\n              backgroundColor: 'transparent',\n            }\n          )\n        ).source;\n        await fs.writeFile(\n          path.resolve(dpiFolderPath, IC_LAUNCHER_FOREGROUND_PNG),\n          adpativeIconForeground\n        );\n\n        if (backgroundImage) {\n          const adpativeIconBackground = (\n            await generateImageAsync(\n              { projectRoot, cacheType: 'android-adaptive-background' },\n              {\n                src: backgroundImage,\n                width: iconSizePx,\n                height: iconSizePx,\n                resizeMode: 'cover',\n                backgroundColor: 'transparent',\n              }\n            )\n          ).source;\n          await fs.writeFile(\n            path.resolve(dpiFolderPath, IC_LAUNCHER_BACKGROUND_PNG),\n            adpativeIconBackground\n          );\n        } else {\n          // Remove any instances of ic_launcher_background.png that are there from previous icons\n          await removeBackgroundImageFilesAsync(projectRoot);\n        }\n      } catch (e) {\n        throw new Error('Encountered an issue resizing adaptive app icon: ' + e);\n      }\n    })\n  );\n\n  // create ic_launcher.xml and ic_launcher_round.xml\n  const icLauncherXmlString = createAdaptiveIconXmlString(backgroundImage);\n  await createAdaptiveIconXmlFiles(projectRoot, icLauncherXmlString);\n}\n\nasync function setBackgroundColorAsync(projectRoot: string, backgroundColor: string | null) {\n  const colorsXmlPath = await Colors.getProjectColorsXMLPathAsync(projectRoot);\n  let colorsJson = await readResourcesXMLAsync({ path: colorsXmlPath });\n  if (backgroundColor) {\n    const colorItemToAdd = buildResourceItem({ name: ICON_BACKGROUND, value: backgroundColor });\n    colorsJson = Colors.setColorItem(colorItemToAdd, colorsJson);\n  } else {\n    colorsJson = Colors.removeColorItem(ICON_BACKGROUND, colorsJson);\n  }\n\n  await writeXMLAsync({ path: colorsXmlPath, xml: colorsJson });\n}\n\nexport const createAdaptiveIconXmlString = (backgroundImage: string | null) => {\n  let background = `<background android:drawable=\"@color/iconBackground\"/>`;\n  if (backgroundImage) {\n    background = `<background android:drawable=\"@mipmap/ic_launcher_background\"/>`;\n  }\n\n  return `<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<adaptive-icon xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    ${background}\n    <foreground android:drawable=\"@mipmap/ic_launcher_foreground\"/>\n</adaptive-icon>`;\n};\n\nasync function createAdaptiveIconXmlFiles(projectRoot: string, icLauncherXmlString: string) {\n  const anyDpiV26Directory = path.resolve(projectRoot, ANDROID_RES_PATH, MIPMAP_ANYDPI_V26);\n  await fs.ensureDir(anyDpiV26Directory);\n  await fs.writeFile(path.resolve(anyDpiV26Directory, IC_LAUNCHER_XML), icLauncherXmlString);\n  await fs.writeFile(path.resolve(anyDpiV26Directory, IC_LAUNCHER_ROUND_XML), icLauncherXmlString);\n}\n\nasync function removeBackgroundImageFilesAsync(projectRoot: string) {\n  return await Promise.all(\n    Object.values(dpiValues).map(async ({ folderName }) => {\n      const dpiFolderPath = path.resolve(projectRoot, ANDROID_RES_PATH, folderName);\n      await fs.remove(path.resolve(dpiFolderPath, IC_LAUNCHER_BACKGROUND_PNG));\n    })\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}