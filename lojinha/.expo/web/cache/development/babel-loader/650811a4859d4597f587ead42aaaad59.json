{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = releaseChecker;\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _resolveNodeModuleDir = _interopRequireDefault(require(\"../config/resolveNodeModuleDir\"));\n\nvar _getLatestRelease = _interopRequireDefault(require(\"./getLatestRelease\"));\n\nvar _printNewRelease = _interopRequireDefault(require(\"./printNewRelease\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction releaseChecker(root) {\n  var _require, currentVersion, _require2, name, latestRelease;\n\n  return _regeneratorRuntime.async(function releaseChecker$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _require = require(_path().default.join((0, _resolveNodeModuleDir.default)(root, 'react-native'), 'package.json')), currentVersion = _require.version;\n          _require2 = require(_path().default.join(root, 'package.json')), name = _require2.name;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap((0, _getLatestRelease.default)(name, currentVersion));\n\n        case 5:\n          latestRelease = _context.sent;\n\n          if (latestRelease) {\n            (0, _printNewRelease.default)(name, latestRelease, currentVersion);\n          }\n\n          _context.next = 13;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n\n          _cliTools().logger.debug('Cannot detect current version of React Native, ' + 'skipping check for a newer release');\n\n          _cliTools().logger.debug(_context.t0);\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 9]], Promise);\n}","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli/build/tools/releaseChecker/index.js"],"names":["Object","defineProperty","exports","value","default","releaseChecker","_path","data","_interopRequireDefault","require","_cliTools","_resolveNodeModuleDir","_getLatestRelease","_printNewRelease","obj","__esModule","root","join","currentVersion","version","name","latestRelease","logger","debug"],"mappings":"AAAA;;;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,cAAlB;;AAEA,SAASC,KAAT,GAAiB;AACf,MAAMC,IAAI,GAAGC,sBAAsB,CAACC,OAAO,CAAC,MAAD,CAAR,CAAnC;;AAEAH,EAAAA,KAAK,GAAG,iBAAY;AAClB,WAAOC,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,SAASG,SAAT,GAAqB;AACnB,MAAMH,IAAI,GAAGE,OAAO,CAAC,mCAAD,CAApB;;AAEAC,EAAAA,SAAS,GAAG,qBAAY;AACtB,WAAOH,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,IAAII,qBAAqB,GAAGH,sBAAsB,CAACC,OAAO,kCAAR,CAAlD;;AAEA,IAAIG,iBAAiB,GAAGJ,sBAAsB,CAACC,OAAO,sBAAR,CAA9C;;AAEA,IAAII,gBAAgB,GAAGL,sBAAsB,CAACC,OAAO,qBAAR,CAA7C;;AAEA,SAASD,sBAAT,CAAgCM,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEV,IAAAA,OAAO,EAAEU;AAAX,GAArC;AAAwD;;AAG/F,SAAeT,cAAf,CAA8BW,IAA9B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAIQP,OAAO,CAACH,KAAK,GAAGF,OAAR,CAAgBa,IAAhB,CAAqB,CAAC,GAAGN,qBAAqB,CAACP,OAA1B,EAAmCY,IAAnC,EAAyC,cAAzC,CAArB,EAA+E,cAA/E,CAAD,CAJf,EAGeE,cAHf,YAGMC,OAHN;AAAA,sBAQQV,OAAO,CAACH,KAAK,GAAGF,OAAR,CAAgBa,IAAhB,CAAqBD,IAArB,EAA2B,cAA3B,CAAD,CARf,EAOMI,IAPN,aAOMA,IAPN;AAAA;AAAA,2CAUgC,CAAC,GAAGR,iBAAiB,CAACR,OAAtB,EAA+BgB,IAA/B,EAAqCF,cAArC,CAVhC;;AAAA;AAUUG,UAAAA,aAVV;;AAYI,cAAIA,aAAJ,EAAmB;AACjB,aAAC,GAAGR,gBAAgB,CAACT,OAArB,EAA8BgB,IAA9B,EAAoCC,aAApC,EAAmDH,cAAnD;AACD;;AAdL;AAAA;;AAAA;AAAA;AAAA;;AAkBIR,UAAAA,SAAS,GAAGY,MAAZ,CAAmBC,KAAnB,CAAyB,oDAAoD,oCAA7E;;AAEAb,UAAAA,SAAS,GAAGY,MAAZ,CAAmBC,KAAnB;;AApBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = releaseChecker;\n\nfunction _path() {\n  const data = _interopRequireDefault(require(\"path\"));\n\n  _path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _resolveNodeModuleDir = _interopRequireDefault(require(\"../config/resolveNodeModuleDir\"));\n\nvar _getLatestRelease = _interopRequireDefault(require(\"./getLatestRelease\"));\n\nvar _printNewRelease = _interopRequireDefault(require(\"./printNewRelease\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// @ts-ignore - JS file\nasync function releaseChecker(root) {\n  try {\n    const {\n      version: currentVersion\n    } = require(_path().default.join((0, _resolveNodeModuleDir.default)(root, 'react-native'), 'package.json'));\n\n    const {\n      name\n    } = require(_path().default.join(root, 'package.json'));\n\n    const latestRelease = await (0, _getLatestRelease.default)(name, currentVersion);\n\n    if (latestRelease) {\n      (0, _printNewRelease.default)(name, latestRelease, currentVersion);\n    }\n  } catch (e) {\n    // We let the flow continue as this component is not vital for the rest of\n    // the CLI.\n    _cliTools().logger.debug('Cannot detect current version of React Native, ' + 'skipping check for a newer release');\n\n    _cliTools().logger.debug(e);\n  }\n}\n\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}