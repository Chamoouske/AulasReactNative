{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar path_1 = __importDefault(require(\"path\"));\n\nvar constants_1 = require(\"../constants\");\n\nvar xml_manipulation_1 = require(\"../xml-manipulation\");\n\nvar DRAWABLE_XML_FILE_PATH = './res/drawable/splashscreen.xml';\n\nfunction configureDrawable(xml, resizeMode) {\n  var expected = {\n    elements: [{\n      idx: 0,\n      comment: \"\\n  This file was created by '@expo/configure-splash-screen' and some of it's content shouldn't be modified by hand\\n\"\n    }, {\n      name: 'layer-list',\n      attributes: {\n        'xmlns:android': 'http://schemas.android.com/apk/res/android'\n      },\n      elements: {\n        newValue: [{\n          name: 'item',\n          attributes: {\n            'android:drawable': '@color/splashscreen_background'\n          }\n        }].concat(resizeMode !== constants_1.SplashScreenImageResizeMode.NATIVE ? [] : [{\n          name: 'item',\n          elements: [{\n            name: 'bitmap',\n            attributes: {\n              'android:gravity': 'center',\n              'android:src': '@drawable/splashscreen_image'\n            }\n          }]\n        }])\n      }\n    }]\n  };\n  var result = xml_manipulation_1.mergeXmlElements(xml, expected);\n  return result;\n}\n\nfunction configureDrawableXml(androidMainPath) {\n  var config,\n      filePath,\n      xmlContent,\n      configuredXmlContent,\n      _args = arguments;\n  return _regeneratorRuntime.async(function configureDrawableXml$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          config = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n          filePath = path_1.default.resolve(androidMainPath, DRAWABLE_XML_FILE_PATH);\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(xml_manipulation_1.readXmlFile(filePath));\n\n        case 4:\n          xmlContent = _context.sent;\n          configuredXmlContent = configureDrawable(xmlContent, config.imageResizeMode);\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(xml_manipulation_1.writeXmlFile(filePath, configuredXmlContent));\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.default = configureDrawableXml;","map":{"version":3,"sources":["../../src/android/Drawable.xml.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,eAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;AAGA,IAAA,WAAA,GAAA,OAAA,gBAAA;;AACA,IAAA,kBAAA,GAAA,OAAA,uBAAA;;AAQA,IAAM,sBAAsB,GAAG,iCAA/B;;AAEA,SAAS,iBAAT,CAA2B,GAA3B,EAAyC,UAAzC,EAAqF;AACnF,MAAM,QAAQ,GAAyB;AACrC,IAAA,QAAQ,EAAE,CACR;AACE,MAAA,GAAG,EAAE,CADP;AAEE,MAAA,OAAO;AAFT,KADQ,EAKR;AACE,MAAA,IAAI,EAAE,YADR;AAEE,MAAA,UAAU,EAAE;AACV,yBAAiB;AADP,OAFd;AAKE,MAAA,QAAQ,EAAE;AACR,QAAA,QAAQ,EAAG,CACT;AACE,UAAA,IAAI,EAAE,MADR;AAEE,UAAA,UAAU,EAAE;AACV,gCAAoB;AADV;AAFd,SADS,EAOiB,MAPjB,CAQT,UAAU,KAAK,WAAA,CAAA,2BAAA,CAA4B,MAA3C,GACI,EADJ,GAEI,CACE;AACE,UAAA,IAAI,EAAE,MADR;AAEE,UAAA,QAAQ,EAAE,CACR;AACE,YAAA,IAAI,EAAE,QADR;AAEE,YAAA,UAAU,EAAE;AACV,iCAAmB,QADT;AAEV,6BAAe;AAFL;AAFd,WADQ;AAFZ,SADF,CAVK;AADH;AALZ,KALQ;AAD2B,GAAvC;AAyCA,MAAM,MAAM,GAAG,kBAAA,CAAA,gBAAA,CAAiB,GAAjB,EAAsB,QAAtB,CAAf;AACA,SAAO,MAAP;AACD;;AAKc,SAAe,oBAAf,CACb,eADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEb,UAAA,MAFa,2DAIT,EAJS;AAMP,UAAA,QANO,GAMI,MAAA,CAAA,OAAA,CAAK,OAAL,CAAa,eAAb,EAA8B,sBAA9B,CANJ;AAAA;AAAA,2CAOY,kBAAA,CAAA,WAAA,CAAY,QAAZ,CAPZ;;AAAA;AAOP,UAAA,UAPO;AAQP,UAAA,oBARO,GAQgB,iBAAiB,CAAC,UAAD,EAAa,MAAM,CAAC,eAApB,CARjC;AAAA;AAAA,2CASP,kBAAA,CAAA,YAAA,CAAa,QAAb,EAAuB,oBAAvB,CATO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAf,OAAA,CAAA,OAAA,GAAA,oBAAA","sourcesContent":["import path from 'path';\nimport { Element } from 'xml-js';\n\nimport { SplashScreenImageResizeMode, SplashScreenImageResizeModeType } from '../constants';\nimport {\n  mergeXmlElements,\n  readXmlFile,\n  writeXmlFile,\n  ExpectedElementsType,\n  ExpectedElementType,\n} from '../xml-manipulation';\n\nconst DRAWABLE_XML_FILE_PATH = './res/drawable/splashscreen.xml';\n\nfunction configureDrawable(xml: Element, resizeMode?: SplashScreenImageResizeModeType): Element {\n  const expected: ExpectedElementsType = {\n    elements: [\n      {\n        idx: 0,\n        comment: `\\n  This file was created by '@expo/configure-splash-screen' and some of it's content shouldn't be modified by hand\\n`,\n      },\n      {\n        name: 'layer-list',\n        attributes: {\n          'xmlns:android': 'http://schemas.android.com/apk/res/android',\n        },\n        elements: {\n          newValue: ([\n            {\n              name: 'item',\n              attributes: {\n                'android:drawable': '@color/splashscreen_background',\n              },\n            },\n          ] as ExpectedElementType[]).concat(\n            resizeMode !== SplashScreenImageResizeMode.NATIVE\n              ? []\n              : [\n                  {\n                    name: 'item',\n                    elements: [\n                      {\n                        name: 'bitmap',\n                        attributes: {\n                          'android:gravity': 'center',\n                          'android:src': '@drawable/splashscreen_image',\n                        },\n                      },\n                    ],\n                  },\n                ]\n          ),\n        },\n      },\n    ],\n  };\n  const result = mergeXmlElements(xml, expected);\n  return result;\n}\n\n/**\n * @param androidMainPath Path to the main directory containing code and resources in Android project. In general that would be `android/app/src/main`.\n */\nexport default async function configureDrawableXml(\n  androidMainPath: string,\n  config: {\n    imageResizeMode?: SplashScreenImageResizeModeType;\n  } = {}\n) {\n  const filePath = path.resolve(androidMainPath, DRAWABLE_XML_FILE_PATH);\n  const xmlContent = await readXmlFile(filePath);\n  const configuredXmlContent = configureDrawable(xmlContent, config.imageResizeMode);\n  await writeXmlFile(filePath, configuredXmlContent);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}