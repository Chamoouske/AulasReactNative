{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\njest.mock(\"../../../Core/Devtools/symbolicateStackTrace\");\n\nvar LogBoxSymbolication = require(\"../LogBoxSymbolication\");\n\nvar symbolicateStackTrace = require(\"../../../Core/Devtools/symbolicateStackTrace\");\n\nvar createStack = function createStack(methodNames) {\n  return methodNames.map(function (methodName) {\n    return {\n      column: null,\n      file: 'file://path/to/file.js',\n      lineNumber: 1,\n      methodName: methodName\n    };\n  });\n};\n\ndescribe('LogBoxSymbolication', function () {\n  beforeEach(function () {\n    jest.resetModules();\n    symbolicateStackTrace.mockImplementation(function _callee(stack) {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", stack);\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n  });\n  it('symbolicates different stacks', function () {\n    LogBoxSymbolication.symbolicate(createStack(['A', 'B', 'C']));\n    LogBoxSymbolication.symbolicate(createStack(['D', 'E', 'F']));\n    expect(symbolicateStackTrace.mock.calls.length).toBe(2);\n  });\n  it('batch symbolicates equivalent stacks', function () {\n    var stack = createStack(['A', 'B', 'C']);\n    LogBoxSymbolication.symbolicate(stack);\n    LogBoxSymbolication.symbolicate(stack);\n    expect(symbolicateStackTrace.mock.calls.length).toBe(1);\n  });\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/LogBox/Data/__tests__/LogBoxSymbolication-test.js"],"names":["jest","mock","LogBoxSymbolication","require","symbolicateStackTrace","createStack","methodNames","map","methodName","column","file","lineNumber","describe","beforeEach","resetModules","mockImplementation","stack","it","symbolicate","expect","calls","length","toBe"],"mappings":"AAWA;;;;AAIAA,IAAI,CAACC,IAAL;;AAEA,IAAMC,mBAAmB,GAAGC,OAAO,0BAAnC;;AAEA,IAAMC,qBAGL,GAAID,OAAO,gDAHZ;;AAKA,IAAME,WAAW,GAAG,SAAdA,WAAc,CAAAC,WAAW;AAAA,SAC7BA,WAAW,CAACC,GAAZ,CAAgB,UAAAC,UAAU;AAAA,WAAK;AAC7BC,MAAAA,MAAM,EAAE,IADqB;AAE7BC,MAAAA,IAAI,EAAE,wBAFuB;AAG7BC,MAAAA,UAAU,EAAE,CAHiB;AAI7BH,MAAAA,UAAU,EAAVA;AAJ6B,KAAL;AAAA,GAA1B,CAD6B;AAAA,CAA/B;;AAQAI,QAAQ,CAAC,qBAAD,EAAwB,YAAM;AACpCC,EAAAA,UAAU,CAAC,YAAM;AACfb,IAAAA,IAAI,CAACc,YAAL;AACAV,IAAAA,qBAAqB,CAACW,kBAAtB,CAAyC,iBAAMC,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA,+CAAeA,KAAf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAzC;AACD,GAHS,CAAV;AAKAC,EAAAA,EAAE,CAAC,+BAAD,EAAkC,YAAM;AACxCf,IAAAA,mBAAmB,CAACgB,WAApB,CAAgCb,WAAW,CAAC,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAD,CAA3C;AACAH,IAAAA,mBAAmB,CAACgB,WAApB,CAAgCb,WAAW,CAAC,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAD,CAA3C;AAEAc,IAAAA,MAAM,CAACf,qBAAqB,CAACH,IAAtB,CAA2BmB,KAA3B,CAAiCC,MAAlC,CAAN,CAAgDC,IAAhD,CAAqD,CAArD;AACD,GALC,CAAF;AAOAL,EAAAA,EAAE,CAAC,sCAAD,EAAyC,YAAM;AAC/C,QAAMD,KAAK,GAAGX,WAAW,CAAC,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAD,CAAzB;AACAH,IAAAA,mBAAmB,CAACgB,WAApB,CAAgCF,KAAhC;AACAd,IAAAA,mBAAmB,CAACgB,WAApB,CAAgCF,KAAhC;AAEAG,IAAAA,MAAM,CAACf,qBAAqB,CAACH,IAAtB,CAA2BmB,KAA3B,CAAiCC,MAAlC,CAAN,CAAgDC,IAAhD,CAAqD,CAArD;AACD,GANC,CAAF;AAOD,CApBO,CAAR","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+react_native\n * @format\n * @flow\n */\n\n'use strict';\n\nimport type {StackFrame} from '../../../Core/NativeExceptionsManager';\n\njest.mock('../../../Core/Devtools/symbolicateStackTrace');\n\nconst LogBoxSymbolication = require('../LogBoxSymbolication');\n\nconst symbolicateStackTrace: JestMockFn<\n  $ReadOnlyArray<Array<StackFrame>>,\n  Promise<Array<StackFrame>>,\n> = (require('../../../Core/Devtools/symbolicateStackTrace'): any);\n\nconst createStack = methodNames =>\n  methodNames.map(methodName => ({\n    column: null,\n    file: 'file://path/to/file.js',\n    lineNumber: 1,\n    methodName,\n  }));\n\ndescribe('LogBoxSymbolication', () => {\n  beforeEach(() => {\n    jest.resetModules();\n    symbolicateStackTrace.mockImplementation(async stack => stack);\n  });\n\n  it('symbolicates different stacks', () => {\n    LogBoxSymbolication.symbolicate(createStack(['A', 'B', 'C']));\n    LogBoxSymbolication.symbolicate(createStack(['D', 'E', 'F']));\n\n    expect(symbolicateStackTrace.mock.calls.length).toBe(2);\n  });\n\n  it('batch symbolicates equivalent stacks', () => {\n    const stack = createStack(['A', 'B', 'C']);\n    LogBoxSymbolication.symbolicate(stack);\n    LogBoxSymbolication.symbolicate(stack);\n\n    expect(symbolicateStackTrace.mock.calls.length).toBe(1);\n  });\n});\n"]},"metadata":{},"sourceType":"script"}