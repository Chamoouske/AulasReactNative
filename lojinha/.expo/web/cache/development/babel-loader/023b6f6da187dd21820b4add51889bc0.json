{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { CodedError, NativeModulesProxy } from '@unimodules/core';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { AndroidManifest, AppOwnership, Constants, ExecutionEnvironment, IOSManifest, NativeConstants, PlatformManifest, UserInterfaceIdiom, WebManifest } from \"./Constants.types\";\nimport ExponentConstants from \"./ExponentConstants\";\nexport { AndroidManifest, AppOwnership, Constants, ExecutionEnvironment, IOSManifest, NativeConstants, PlatformManifest, UserInterfaceIdiom, WebManifest };\n\nif (!ExponentConstants) {\n  console.warn(\"No native ExponentConstants module found, are you sure the expo-constants's module is linked properly?\");\n}\n\nvar manifest = null;\n\nif (NativeModulesProxy.ExpoUpdates) {\n  var updatesManifest;\n\n  if (NativeModulesProxy.ExpoUpdates.manifest) {\n    updatesManifest = NativeModulesProxy.ExpoUpdates.manifest;\n  } else if (NativeModulesProxy.ExpoUpdates.manifestString) {\n    updatesManifest = JSON.parse(NativeModulesProxy.ExpoUpdates.manifestString);\n  }\n\n  if (updatesManifest && Object.keys(updatesManifest).length > 0) {\n    manifest = updatesManifest;\n  }\n}\n\nif (!manifest && ExponentConstants && ExponentConstants.manifest) {\n  manifest = ExponentConstants.manifest;\n\n  if (typeof manifest === 'string') {\n    manifest = JSON.parse(manifest);\n  }\n}\n\nvar _ref = ExponentConstants || {},\n    name = _ref.name,\n    appOwnership = _ref.appOwnership,\n    nativeConstants = _objectWithoutProperties(_ref, [\"name\", \"appOwnership\"]);\n\nvar constants = _objectSpread(_objectSpread({}, nativeConstants), {}, {\n  appOwnership: appOwnership != null ? appOwnership : null,\n  deviceId: nativeConstants.installationId,\n  linkingUrl: nativeConstants.linkingUri\n});\n\nObject.defineProperties(constants, {\n  manifest: {\n    enumerable: true,\n    get: function get() {\n      if (!manifest) {\n        var invalidManifestType = manifest === null ? 'null' : 'undefined';\n\n        if (nativeConstants.executionEnvironment === ExecutionEnvironment.Bare && Platform.OS !== 'web') {\n          console.warn(\"Constants.manifest is \" + invalidManifestType + \" because the embedded app.config could not be read. Ensure that you have installed the expo-constants build scripts if you need to read from Constants.manifest.\");\n        } else if (nativeConstants.executionEnvironment === ExecutionEnvironment.StoreClient || nativeConstants.executionEnvironment === ExecutionEnvironment.Standalone) {\n          throw new CodedError('ERR_CONSTANTS_MANIFEST_UNAVAILABLE', \"Constants.manifest is \" + invalidManifestType + \", must be an object.\");\n        }\n      }\n\n      return manifest;\n    },\n    set: function set(value) {\n      manifest = value;\n    }\n  }\n});\nexport default constants;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/expo-constants/src/Constants.ts"],"names":["CodedError","NativeModulesProxy","AndroidManifest","AppOwnership","Constants","ExecutionEnvironment","IOSManifest","NativeConstants","PlatformManifest","UserInterfaceIdiom","WebManifest","ExponentConstants","console","warn","manifest","ExpoUpdates","updatesManifest","manifestString","JSON","parse","Object","keys","length","name","appOwnership","nativeConstants","constants","deviceId","installationId","linkingUrl","linkingUri","defineProperties","enumerable","get","invalidManifestType","executionEnvironment","Bare","Platform","OS","StoreClient","Standalone","set","value"],"mappings":";;;;;;;AAAA,SAASA,UAAT,EAAqBC,kBAArB,QAA+C,kBAA/C;;AAGA,SACEC,eADF,EAEEC,YAFF,EAGEC,SAHF,EAIEC,oBAJF,EAKEC,WALF,EAMEC,eANF,EAOEC,gBAPF,EAQEC,kBARF,EASEC,WATF;AAWA,OAAOC,iBAAP;AAEA,SACET,eADF,EAEEC,YAFF,EAGEC,SAHF,EAIEC,oBAJF,EAKEC,WALF,EAMEC,eANF,EAOEC,gBAPF,EAQEC,kBARF,EASEC,WATF;;AAYA,IAAI,CAACC,iBAAL,EAAwB;AACtBC,EAAAA,OAAO,CAACC,IAAR,CACE,wGADF;AAGD;;AAED,IAAIC,QAAQ,GAAG,IAAf;;AAEA,IAAIb,kBAAkB,CAACc,WAAvB,EAAoC;AAClC,MAAIC,eAAJ;;AACA,MAAIf,kBAAkB,CAACc,WAAnB,CAA+BD,QAAnC,EAA6C;AAC3CE,IAAAA,eAAe,GAAGf,kBAAkB,CAACc,WAAnB,CAA+BD,QAAjD;AACD,GAFD,MAEO,IAAIb,kBAAkB,CAACc,WAAnB,CAA+BE,cAAnC,EAAmD;AACxDD,IAAAA,eAAe,GAAGE,IAAI,CAACC,KAAL,CAAWlB,kBAAkB,CAACc,WAAnB,CAA+BE,cAA1C,CAAlB;AACD;;AACD,MAAID,eAAe,IAAII,MAAM,CAACC,IAAP,CAAYL,eAAZ,EAA6BM,MAA7B,GAAsC,CAA7D,EAAgE;AAC9DR,IAAAA,QAAQ,GAAGE,eAAX;AACD;AACF;;AAGD,IAAI,CAACF,QAAD,IAAaH,iBAAb,IAAkCA,iBAAiB,CAACG,QAAxD,EAAkE;AAChEA,EAAAA,QAAQ,GAAGH,iBAAiB,CAACG,QAA7B;;AAEA,MAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC;AAChCA,IAAAA,QAAQ,GAAGI,IAAI,CAACC,KAAL,CAAWL,QAAX,CAAX;AACD;AACF;;WAEmDH,iBAAiB,IAAI,E;IAAjEY,I,QAAAA,I;IAAMC,Y,QAAAA,Y;IAAiBC,e;;AAE/B,IAAMC,SAAS,mCACVD,eADU;AAGbD,EAAAA,YAAY,EAAEA,YAAF,WAAEA,YAAF,GAAkB,IAHjB;AAKbG,EAAAA,QAAQ,EAAEF,eAAe,CAACG,cALb;AAMbC,EAAAA,UAAU,EAAEJ,eAAe,CAACK;AANf,EAAf;;AASAV,MAAM,CAACW,gBAAP,CAAwBL,SAAxB,EAAmC;AACjCZ,EAAAA,QAAQ,EAAE;AACRkB,IAAAA,UAAU,EAAE,IADJ;AAERC,IAAAA,GAFQ,iBAEF;AACJ,UAAI,CAACnB,QAAL,EAAe;AACb,YAAMoB,mBAAmB,GAAGpB,QAAQ,KAAK,IAAb,GAAoB,MAApB,GAA6B,WAAzD;;AACA,YACEW,eAAe,CAACU,oBAAhB,KAAyC9B,oBAAoB,CAAC+B,IAA9D,IACAC,QAAQ,CAACC,EAAT,KAAgB,KAFlB,EAGE;AACA1B,UAAAA,OAAO,CAACC,IAAR,4BAC2BqB,mBAD3B;AAGD,SAPD,MAOO,IACLT,eAAe,CAACU,oBAAhB,KAAyC9B,oBAAoB,CAACkC,WAA9D,IACAd,eAAe,CAACU,oBAAhB,KAAyC9B,oBAAoB,CAACmC,UAFzD,EAGL;AAGA,gBAAM,IAAIxC,UAAJ,CACJ,oCADI,6BAEqBkC,mBAFrB,0BAAN;AAID;AACF;;AACD,aAAOpB,QAAP;AACD,KAzBO;AA2BR2B,IAAAA,GA3BQ,eA2BJC,KA3BI,EA2BG;AACT5B,MAAAA,QAAQ,GAAG4B,KAAX;AACD;AA7BO;AADuB,CAAnC;AAkCA,eAAehB,SAAf","sourcesContent":["import { CodedError, NativeModulesProxy } from '@unimodules/core';\nimport { Platform } from 'react-native';\n\nimport {\n  AndroidManifest,\n  AppOwnership,\n  Constants,\n  ExecutionEnvironment,\n  IOSManifest,\n  NativeConstants,\n  PlatformManifest,\n  UserInterfaceIdiom,\n  WebManifest,\n} from './Constants.types';\nimport ExponentConstants from './ExponentConstants';\n\nexport {\n  AndroidManifest,\n  AppOwnership,\n  Constants,\n  ExecutionEnvironment,\n  IOSManifest,\n  NativeConstants,\n  PlatformManifest,\n  UserInterfaceIdiom,\n  WebManifest,\n};\n\nif (!ExponentConstants) {\n  console.warn(\n    \"No native ExponentConstants module found, are you sure the expo-constants's module is linked properly?\"\n  );\n}\n\nlet manifest = null;\n// If expo-updates defines a non-empty manifest, prefer that one\nif (NativeModulesProxy.ExpoUpdates) {\n  let updatesManifest;\n  if (NativeModulesProxy.ExpoUpdates.manifest) {\n    updatesManifest = NativeModulesProxy.ExpoUpdates.manifest;\n  } else if (NativeModulesProxy.ExpoUpdates.manifestString) {\n    updatesManifest = JSON.parse(NativeModulesProxy.ExpoUpdates.manifestString);\n  }\n  if (updatesManifest && Object.keys(updatesManifest).length > 0) {\n    manifest = updatesManifest;\n  }\n}\n\n// Fall back to ExponentConstants.manifest if we don't have one from Updates\nif (!manifest && ExponentConstants && ExponentConstants.manifest) {\n  manifest = ExponentConstants.manifest;\n  // On Android we pass the manifest in JSON form so this step is necessary\n  if (typeof manifest === 'string') {\n    manifest = JSON.parse(manifest);\n  }\n}\n\nconst { name, appOwnership, ...nativeConstants } = (ExponentConstants || {}) as any;\n\nconst constants = {\n  ...nativeConstants,\n  // Ensure this is null in bare workflow\n  appOwnership: appOwnership ?? null,\n  // Legacy aliases\n  deviceId: nativeConstants.installationId,\n  linkingUrl: nativeConstants.linkingUri,\n};\n\nObject.defineProperties(constants, {\n  manifest: {\n    enumerable: true,\n    get() {\n      if (!manifest) {\n        const invalidManifestType = manifest === null ? 'null' : 'undefined';\n        if (\n          nativeConstants.executionEnvironment === ExecutionEnvironment.Bare &&\n          Platform.OS !== 'web'\n        ) {\n          console.warn(\n            `Constants.manifest is ${invalidManifestType} because the embedded app.config could not be read. Ensure that you have installed the expo-constants build scripts if you need to read from Constants.manifest.`\n          );\n        } else if (\n          nativeConstants.executionEnvironment === ExecutionEnvironment.StoreClient ||\n          nativeConstants.executionEnvironment === ExecutionEnvironment.Standalone\n        ) {\n          // If we somehow get here, this is a truly exceptional state to be in.\n          // Constants.manifest should *always* be defined in those contexts.\n          throw new CodedError(\n            'ERR_CONSTANTS_MANIFEST_UNAVAILABLE',\n            `Constants.manifest is ${invalidManifestType}, must be an object.`\n          );\n        }\n      }\n      return manifest;\n    },\n    // This setter is only useful to mock the value for tests\n    set(value) {\n      manifest = value;\n    },\n  },\n});\n\nexport default constants as Constants;\n"]},"metadata":{},"sourceType":"module"}