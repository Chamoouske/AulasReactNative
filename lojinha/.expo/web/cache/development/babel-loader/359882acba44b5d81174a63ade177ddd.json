{"ast":null,"code":"\"use strict\";\n\nvar _extends = require(\"@babel/runtime/helpers/extends\");\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ios_plugins_1 = require(\"../plugins/ios-plugins\");\n\nexports.withUserInterfaceStyle = ios_plugins_1.createInfoPlistPlugin(setUserInterfaceStyle, 'withUserInterfaceStyle');\n\nfunction getUserInterfaceStyle(config) {\n  var _a, _b, _c;\n\n  return (_c = (_b = (_a = config.ios) === null || _a === void 0 ? void 0 : _a.userInterfaceStyle) !== null && _b !== void 0 ? _b : config.userInterfaceStyle) !== null && _c !== void 0 ? _c : null;\n}\n\nexports.getUserInterfaceStyle = getUserInterfaceStyle;\n\nfunction setUserInterfaceStyle(config, _a) {\n  var UIUserInterfaceStyle = _a.UIUserInterfaceStyle,\n      infoPlist = __rest(_a, [\"UIUserInterfaceStyle\"]);\n\n  var userInterfaceStyle = getUserInterfaceStyle(config);\n  var style = mapUserInterfaceStyleForInfoPlist(userInterfaceStyle);\n\n  if (!style) {\n    return infoPlist;\n  }\n\n  return _extends(_extends({}, infoPlist), {\n    UIUserInterfaceStyle: style\n  });\n}\n\nexports.setUserInterfaceStyle = setUserInterfaceStyle;\n\nfunction mapUserInterfaceStyleForInfoPlist(userInterfaceStyle) {\n  switch (userInterfaceStyle) {\n    case 'light':\n      return 'Light';\n\n    case 'dark':\n      return 'Dark';\n\n    case 'automatic':\n      return 'Automatic';\n  }\n\n  return null;\n}","map":{"version":3,"sources":["../../src/ios/UserInterfaceStyle.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAEA,IAAA,aAAA,GAAA,OAAA,0BAAA;;AAGa,OAAA,CAAA,sBAAA,GAAyB,aAAA,CAAA,qBAAA,CACpC,qBADoC,EAEpC,wBAFoC,CAAzB;;AAKb,SAAgB,qBAAhB,CACE,MADF,EACwD;;;AAEtD,SAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAO,MAAM,CAAC,GAAd,MAAiB,IAAjB,IAAiB,EAAA,KAAA,KAAA,CAAjB,GAAiB,KAAA,CAAjB,GAAiB,EAAA,CAAE,kBAAnB,MAAqC,IAArC,IAAqC,EAAA,KAAA,KAAA,CAArC,GAAqC,EAArC,GAAyC,MAAM,CAAC,kBAAhD,MAAkE,IAAlE,IAAkE,EAAA,KAAA,KAAA,CAAlE,GAAkE,EAAlE,GAAsE,IAAtE;AACD;;AAJD,OAAA,CAAA,qBAAA,GAAA,qBAAA;;AAMA,SAAgB,qBAAhB,CACE,MADF,EAEE,EAFF,EAEmD;AAAjD,MAAE,oBAAF,GAAsB,EAAtB,CAAE,oBAAF;AAAA,MAAwB,SAAxB,GAAwB,MAAA,CAAA,EAAA,EAAA,CAAA,sBAAA,CAAA,CAAxB;;AAEA,MAAM,kBAAkB,GAAG,qBAAqB,CAAC,MAAD,CAAhD;AACA,MAAM,KAAK,GAAG,iCAAiC,CAAC,kBAAD,CAA/C;;AAEA,MAAI,CAAC,KAAL,EAAY;AACV,WAAO,SAAP;AACD;;AAED,SAAA,SAAA,SAAA,EAAA,EACK,SADL,CAAA,EACc;AACZ,IAAA,oBAAoB,EAAE;AADV,GADd,CAAA;AAID;;AAfD,OAAA,CAAA,qBAAA,GAAA,qBAAA;;AAiBA,SAAS,iCAAT,CACE,kBADF,EACmC;AAEjC,UAAQ,kBAAR;AACE,SAAK,OAAL;AACE,aAAO,OAAP;;AACF,SAAK,MAAL;AACE,aAAO,MAAP;;AACF,SAAK,WAAL;AACE,aAAO,WAAP;AANJ;;AASA,SAAO,IAAP;AACD","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { createInfoPlistPlugin } from '../plugins/ios-plugins';\nimport { InfoPlist, InterfaceStyle } from './IosConfig.types';\n\nexport const withUserInterfaceStyle = createInfoPlistPlugin(\n  setUserInterfaceStyle,\n  'withUserInterfaceStyle'\n);\n\nexport function getUserInterfaceStyle(\n  config: Pick<ExpoConfig, 'ios' | 'userInterfaceStyle'>\n): string | null {\n  return config.ios?.userInterfaceStyle ?? config.userInterfaceStyle ?? null;\n}\n\nexport function setUserInterfaceStyle(\n  config: Pick<ExpoConfig, 'ios' | 'userInterfaceStyle'>,\n  { UIUserInterfaceStyle, ...infoPlist }: InfoPlist\n): InfoPlist {\n  const userInterfaceStyle = getUserInterfaceStyle(config);\n  const style = mapUserInterfaceStyleForInfoPlist(userInterfaceStyle);\n\n  if (!style) {\n    return infoPlist;\n  }\n\n  return {\n    ...infoPlist,\n    UIUserInterfaceStyle: style,\n  };\n}\n\nfunction mapUserInterfaceStyleForInfoPlist(\n  userInterfaceStyle: string | null\n): InterfaceStyle | null {\n  switch (userInterfaceStyle) {\n    case 'light':\n      return 'Light';\n    case 'dark':\n      return 'Dark';\n    case 'automatic':\n      return 'Automatic';\n  }\n\n  return null;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}