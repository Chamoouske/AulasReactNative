{"ast":null,"code":"'use strict';\n\nvar JSEventLoopWatchdog = require(\"./JSEventLoopWatchdog\");\n\nvar MessageQueue = require(\"../BatchedBridge/MessageQueue\");\n\nvar infoLog = require(\"../Utilities/infoLog\");\n\nvar BridgeSpyStallHandler = {\n  register: function register() {\n    var spyBuffer = [];\n    MessageQueue.spy(function (data) {\n      spyBuffer.push(data);\n    });\n    var TO_JS = 0;\n    JSEventLoopWatchdog.addHandler({\n      onStall: function onStall() {\n        infoLog(spyBuffer.length + ' bridge messages during stall: ', spyBuffer.map(function (info) {\n          var args = '<args>';\n\n          try {\n            args = JSON.stringify(info.args);\n          } catch (e1) {\n            if (Array.isArray(info.args)) {\n              args = info.args.map(function (arg) {\n                try {\n                  return JSON.stringify(arg);\n                } catch (e2) {\n                  return '?';\n                }\n              });\n            } else {\n              args = 'keys:' + JSON.stringify(Object.keys(info.args));\n            }\n          }\n\n          return (info.type === TO_JS ? 'N->JS' : 'JS->N') + \" : \" + (\"\" + (info.module ? info.module + '.' : '') + info.method + \"(\" + JSON.stringify(args) + \")\");\n        }));\n      },\n      onIterate: function onIterate() {\n        spyBuffer = [];\n      }\n    });\n  }\n};\nmodule.exports = BridgeSpyStallHandler;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Interaction/BridgeSpyStallHandler.js"],"names":["JSEventLoopWatchdog","require","MessageQueue","infoLog","BridgeSpyStallHandler","register","spyBuffer","spy","data","push","TO_JS","addHandler","onStall","length","map","info","args","JSON","stringify","e1","Array","isArray","arg","e2","Object","keys","type","module","method","onIterate","exports"],"mappings":"AAUA;;AAEA,IAAMA,mBAAmB,GAAGC,OAAO,yBAAnC;;AACA,IAAMC,YAAY,GAAGD,OAAO,iCAA5B;;AAEA,IAAME,OAAO,GAAGF,OAAO,wBAAvB;;AAEA,IAAMG,qBAAqB,GAAG;AAC5BC,EAAAA,QAAQ,EAAE,oBAAW;AACnB,QAAIC,SAAS,GAAG,EAAhB;AACAJ,IAAAA,YAAY,CAACK,GAAb,CAAiB,UAAAC,IAAI,EAAI;AACvBF,MAAAA,SAAS,CAACG,IAAV,CAAeD,IAAf;AACD,KAFD;AAGA,QAAME,KAAK,GAAG,CAAd;AACAV,IAAAA,mBAAmB,CAACW,UAApB,CAA+B;AAC7BC,MAAAA,OAAO,EAAE,mBAAM;AACbT,QAAAA,OAAO,CACLG,SAAS,CAACO,MAAV,GAAmB,iCADd,EAELP,SAAS,CAACQ,GAAV,CAAc,UAAAC,IAAI,EAAI;AACpB,cAAIC,IAAI,GAAG,QAAX;;AACA,cAAI;AACFA,YAAAA,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAeH,IAAI,CAACC,IAApB,CAAP;AACD,WAFD,CAEE,OAAOG,EAAP,EAAW;AACX,gBAAIC,KAAK,CAACC,OAAN,CAAcN,IAAI,CAACC,IAAnB,CAAJ,EAA8B;AAC5BA,cAAAA,IAAI,GAAGD,IAAI,CAACC,IAAL,CAAUF,GAAV,CAAc,UAAAQ,GAAG,EAAI;AAC1B,oBAAI;AACF,yBAAOL,IAAI,CAACC,SAAL,CAAeI,GAAf,CAAP;AACD,iBAFD,CAEE,OAAOC,EAAP,EAAW;AACX,yBAAO,GAAP;AACD;AACF,eANM,CAAP;AAOD,aARD,MAQO;AACLP,cAAAA,IAAI,GAAG,UAAUC,IAAI,CAACC,SAAL,CAAeM,MAAM,CAACC,IAAP,CAAYV,IAAI,CAACC,IAAjB,CAAf,CAAjB;AACD;AACF;;AACD,iBACE,CAAGD,IAAI,CAACW,IAAL,KAAchB,KAAd,GAAsB,OAAtB,GAAgC,OAAnC,mBACGK,IAAI,CAACY,MAAL,GAAcZ,IAAI,CAACY,MAAL,GAAc,GAA5B,GAAkC,EADrC,IAEEZ,IAAI,CAACa,MAFP,SAGIX,IAAI,CAACC,SAAL,CAAeF,IAAf,CAHJ,OADF;AAMD,SAvBD,CAFK,CAAP;AA2BD,OA7B4B;AA8B7Ba,MAAAA,SAAS,EAAE,qBAAM;AACfvB,QAAAA,SAAS,GAAG,EAAZ;AACD;AAhC4B,KAA/B;AAkCD;AAzC2B,CAA9B;AA4CAqB,MAAM,CAACG,OAAP,GAAiB1B,qBAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst JSEventLoopWatchdog = require('./JSEventLoopWatchdog');\nconst MessageQueue = require('../BatchedBridge/MessageQueue');\n\nconst infoLog = require('../Utilities/infoLog');\n\nconst BridgeSpyStallHandler = {\n  register: function() {\n    let spyBuffer = [];\n    MessageQueue.spy(data => {\n      spyBuffer.push(data);\n    });\n    const TO_JS = 0;\n    JSEventLoopWatchdog.addHandler({\n      onStall: () => {\n        infoLog(\n          spyBuffer.length + ' bridge messages during stall: ',\n          spyBuffer.map(info => {\n            let args = '<args>';\n            try {\n              args = JSON.stringify(info.args);\n            } catch (e1) {\n              if (Array.isArray(info.args)) {\n                args = info.args.map(arg => {\n                  try {\n                    return JSON.stringify(arg);\n                  } catch (e2) {\n                    return '?';\n                  }\n                });\n              } else {\n                args = 'keys:' + JSON.stringify(Object.keys(info.args));\n              }\n            }\n            return (\n              `${info.type === TO_JS ? 'N->JS' : 'JS->N'} : ` +\n              `${info.module ? info.module + '.' : ''}${\n                info.method\n              }(${JSON.stringify(args)})`\n            );\n          }),\n        );\n      },\n      onIterate: () => {\n        spyBuffer = [];\n      },\n    });\n  },\n};\n\nmodule.exports = BridgeSpyStallHandler;\n"]},"metadata":{},"sourceType":"script"}