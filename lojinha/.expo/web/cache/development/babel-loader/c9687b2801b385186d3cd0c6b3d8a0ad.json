{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _child_process() {\n  var data = _interopRequireDefault(require(\"child_process\"));\n\n  _child_process = function _child_process() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _findXcodeProject = _interopRequireDefault(require(\"./findXcodeProject\"));\n\nvar _parseIOSDevicesList = _interopRequireDefault(require(\"./parseIOSDevicesList\"));\n\nvar _findMatchingSimulator = _interopRequireDefault(require(\"./findMatchingSimulator\"));\n\nvar _warnAboutManuallyLinkedLibs = _interopRequireDefault(require(\"../../link/warnAboutManuallyLinkedLibs\"));\n\nvar _warnAboutPodInstall = _interopRequireDefault(require(\"../../link/warnAboutPodInstall\"));\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _ora() {\n  var data = _interopRequireDefault(require(\"ora\"));\n\n  _ora = function _ora() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction runIOS(_, ctx, args) {\n  if (!_fs().default.existsSync(args.projectPath)) {\n    throw new (_cliTools().CLIError)('iOS project folder not found. Are you sure this is a React Native project?');\n  }\n\n  (0, _warnAboutManuallyLinkedLibs.default)(ctx);\n  (0, _warnAboutPodInstall.default)(ctx);\n  process.chdir(args.projectPath);\n  var xcodeProject = (0, _findXcodeProject.default)(_fs().default.readdirSync('.'));\n\n  if (!xcodeProject) {\n    throw new (_cliTools().CLIError)(\"Could not find Xcode project files in \\\"\" + args.projectPath + \"\\\" folder\");\n  }\n\n  var inferredSchemeName = _path().default.basename(xcodeProject.name, _path().default.extname(xcodeProject.name));\n\n  var scheme = args.scheme || inferredSchemeName;\n\n  _cliTools().logger.info(\"Found Xcode \" + (xcodeProject.isWorkspace ? 'workspace' : 'project') + \" \\\"\" + _chalk().default.bold(xcodeProject.name) + \"\\\"\");\n\n  if (!args.device && !args.udid) {\n    return runOnSimulator(xcodeProject, scheme, args);\n  }\n\n  if (args.device && args.udid) {\n    return _cliTools().logger.error('The `device` and `udid` options are mutually exclusive.');\n  }\n\n  var devices = (0, _parseIOSDevicesList.default)(_child_process().default.execFileSync('xcrun', ['instruments', '-s'], {\n    encoding: 'utf8'\n  }));\n\n  if (args.udid) {\n    var device = devices.find(function (d) {\n      return d.udid === args.udid;\n    });\n\n    if (!device) {\n      return _cliTools().logger.error(\"Could not find a device with udid: \\\"\" + _chalk().default.bold(args.udid) + \"\\\". \" + printFoundDevices(devices));\n    }\n\n    if (device.type === 'simulator') {\n      return runOnSimulator(xcodeProject, scheme, args);\n    } else {\n      return runOnDevice(device, scheme, xcodeProject, args);\n    }\n  } else {\n    var physicalDevices = devices.filter(function (d) {\n      return d.type !== 'simulator';\n    });\n\n    var _device = matchingDevice(physicalDevices, args.device);\n\n    if (_device) {\n      return runOnDevice(_device, scheme, xcodeProject, args);\n    }\n  }\n}\n\nfunction runOnSimulator(xcodeProject, scheme, args) {\n  var simulators, fallbackSimulators, selectedSimulator, activeDeveloperDir, appName, appPath, bundleID, result;\n  return _regeneratorRuntime.async(function runOnSimulator$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          simulators = JSON.parse(_child_process().default.execFileSync('xcrun', ['simctl', 'list', '--json', 'devices'], {\n            encoding: 'utf8'\n          }));\n          _context.next = 7;\n          break;\n\n        case 4:\n          _context.prev = 4;\n          _context.t0 = _context[\"catch\"](0);\n          throw new (_cliTools().CLIError)('Could not get the simulator list from Xcode. Please open Xcode and try running project directly from there to resolve the remaining issues.', _context.t0);\n\n        case 7:\n          fallbackSimulators = ['iPhone X', 'iPhone 8'];\n          selectedSimulator = fallbackSimulators.reduce(function (simulator, fallback) {\n            return simulator || (0, _findMatchingSimulator.default)(simulators, {\n              simulator: fallback\n            });\n          }, (0, _findMatchingSimulator.default)(simulators, args));\n\n          if (selectedSimulator) {\n            _context.next = 11;\n            break;\n          }\n\n          throw new (_cliTools().CLIError)(\"No simulator available with \" + (args.simulator ? \"name \\\"\" + args.simulator + \"\\\"\" : \"udid \\\"\" + args.udid + \"\\\"\"));\n\n        case 11:\n          activeDeveloperDir = _child_process().default.execFileSync('xcode-select', ['-p'], {\n            encoding: 'utf8'\n          }).trim();\n\n          _child_process().default.execFileSync('open', [activeDeveloperDir + \"/Applications/Simulator.app\", '--args', '-CurrentDeviceUDID', selectedSimulator.udid]);\n\n          if (!selectedSimulator.booted) {\n            bootSimulator(selectedSimulator);\n          }\n\n          _context.next = 16;\n          return _regeneratorRuntime.awrap(buildProject(xcodeProject, selectedSimulator.udid, scheme, args));\n\n        case 16:\n          appName = _context.sent;\n          appPath = getBuildPath(xcodeProject, args.configuration, appName, false, scheme);\n\n          _cliTools().logger.info(\"Installing \\\"\" + _chalk().default.bold(appPath) + \"\\\"\");\n\n          _child_process().default.spawnSync('xcrun', ['simctl', 'install', selectedSimulator.udid, appPath], {\n            stdio: 'inherit'\n          });\n\n          bundleID = _child_process().default.execFileSync('/usr/libexec/PlistBuddy', ['-c', 'Print:CFBundleIdentifier', _path().default.join(appPath, 'Info.plist')], {\n            encoding: 'utf8'\n          }).trim();\n\n          _cliTools().logger.info(\"Launching \\\"\" + _chalk().default.bold(bundleID) + \"\\\"\");\n\n          result = _child_process().default.spawnSync('xcrun', ['simctl', 'launch', selectedSimulator.udid, bundleID]);\n\n          if (result.status === 0) {\n            _cliTools().logger.success('Successfully launched the app on the simulator');\n          } else {\n            _cliTools().logger.error('Failed to launch the app on simulator', result.stderr);\n          }\n\n        case 24:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 4]], Promise);\n}\n\nfunction runOnDevice(selectedDevice, scheme, xcodeProject, args) {\n  var isIOSDeployInstalled, appName, iosDeployInstallArgs, iosDeployOutput;\n  return _regeneratorRuntime.async(function runOnDevice$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          isIOSDeployInstalled = _child_process().default.spawnSync('ios-deploy', ['--version'], {\n            encoding: 'utf8'\n          });\n\n          if (!isIOSDeployInstalled.error) {\n            _context2.next = 3;\n            break;\n          }\n\n          throw new (_cliTools().CLIError)(\"Failed to install the app on the device because we couldn't execute the \\\"ios-deploy\\\" command. Please install it by running \\\"\" + _chalk().default.bold('npm install -g ios-deploy') + \"\\\" and try again.\");\n\n        case 3:\n          _context2.next = 5;\n          return _regeneratorRuntime.awrap(buildProject(xcodeProject, selectedDevice.udid, scheme, args));\n\n        case 5:\n          appName = _context2.sent;\n          iosDeployInstallArgs = ['--bundle', getBuildPath(xcodeProject, args.configuration, appName, true, scheme), '--id', selectedDevice.udid, '--justlaunch'];\n\n          _cliTools().logger.info(\"Installing and launching your app on \" + selectedDevice.name);\n\n          iosDeployOutput = _child_process().default.spawnSync('ios-deploy', iosDeployInstallArgs, {\n            encoding: 'utf8'\n          });\n\n          if (!iosDeployOutput.error) {\n            _context2.next = 11;\n            break;\n          }\n\n          throw new (_cliTools().CLIError)(\"Failed to install the app on the device. We've encountered an error in \\\"ios-deploy\\\" command: \" + iosDeployOutput.error.message);\n\n        case 11:\n          return _context2.abrupt(\"return\", _cliTools().logger.success('Installed the app on the device.'));\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction buildProject(xcodeProject, udid, scheme, args) {\n  return new Promise(function (resolve, reject) {\n    var xcodebuildArgs = [xcodeProject.isWorkspace ? '-workspace' : '-project', xcodeProject.name, '-configuration', args.configuration, '-scheme', scheme, '-destination', \"id=\" + udid];\n    var loader = (0, _ora().default)();\n\n    _cliTools().logger.info(\"Building \" + _chalk().default.dim(\"(using \\\"xcodebuild \" + xcodebuildArgs.join(' ') + \"\\\")\"));\n\n    var xcpretty;\n\n    if (!args.verbose) {\n      xcpretty = xcprettyAvailable() && _child_process().default.spawn('xcpretty', [], {\n        stdio: ['pipe', process.stdout, process.stderr]\n      });\n    }\n\n    var buildProcess = _child_process().default.spawn('xcodebuild', xcodebuildArgs, getProcessOptions(args));\n\n    var buildOutput = '';\n    var errorOutput = '';\n    buildProcess.stdout.on('data', function (data) {\n      var stringData = data.toString();\n      buildOutput += stringData;\n\n      if (xcpretty) {\n        xcpretty.stdin.write(data);\n      } else {\n        if (_cliTools().logger.isVerbose()) {\n          _cliTools().logger.debug(stringData);\n        } else {\n          loader.start(\"Building the app\" + '.'.repeat(buildOutput.length % 10));\n        }\n      }\n    });\n    buildProcess.stderr.on('data', function (data) {\n      errorOutput += data;\n    });\n    buildProcess.on('close', function (code) {\n      if (xcpretty) {\n        xcpretty.stdin.end();\n      } else {\n        loader.stop();\n      }\n\n      if (code !== 0) {\n        reject(new (_cliTools().CLIError)(\"\\n            Failed to build iOS project.\\n\\n            We ran \\\"xcodebuild\\\" command but it exited with error code \" + code + \". To debug build\\n            logs further, consider building your app with Xcode.app, by opening\\n            \" + xcodeProject.name + \".\\n          \", buildOutput + '\\n' + errorOutput));\n        return;\n      }\n\n      _cliTools().logger.success('Successfully built the app');\n\n      resolve(getProductName(buildOutput) || scheme);\n    });\n  });\n}\n\nfunction bootSimulator(selectedSimulator) {\n  var simulatorFullName = formattedDeviceName(selectedSimulator);\n\n  _cliTools().logger.info(\"Launching \" + simulatorFullName);\n\n  try {\n    _child_process().default.spawnSync('xcrun', ['instruments', '-w', selectedSimulator.udid]);\n  } catch (_ignored) {}\n}\n\nfunction getTargetPaths(buildSettings) {\n  var settings = JSON.parse(buildSettings);\n\n  for (var i in settings) {\n    var wrapperExtension = settings[i].buildSettings.WRAPPER_EXTENSION;\n\n    if (wrapperExtension === 'app') {\n      return {\n        targetBuildDir: settings[i].buildSettings.TARGET_BUILD_DIR,\n        executableFolderPath: settings[i].buildSettings.EXECUTABLE_FOLDER_PATH\n      };\n    }\n  }\n\n  return {};\n}\n\nfunction getBuildPath(xcodeProject, configuration, appName, isDevice, scheme) {\n  var device;\n\n  if (isDevice) {\n    device = 'iphoneos';\n  } else if (appName.toLowerCase().includes('tvos')) {\n    device = 'appletvsimulator';\n  } else {\n    device = 'iphonesimulator';\n  }\n\n  var buildSettings = _child_process().default.execFileSync('xcodebuild', [xcodeProject.isWorkspace ? '-workspace' : '-project', xcodeProject.name, '-scheme', scheme, '-sdk', device, '-configuration', configuration, '-showBuildSettings', '-json'], {\n    encoding: 'utf8'\n  });\n\n  var _getTargetPaths = getTargetPaths(buildSettings),\n      targetBuildDir = _getTargetPaths.targetBuildDir,\n      executableFolderPath = _getTargetPaths.executableFolderPath;\n\n  if (!targetBuildDir) {\n    throw new (_cliTools().CLIError)('Failed to get the target build directory.');\n  }\n\n  if (!executableFolderPath) {\n    throw new (_cliTools().CLIError)('Failed to get the app name.');\n  }\n\n  return targetBuildDir + \"/\" + executableFolderPath;\n}\n\nfunction getProductName(buildOutput) {\n  var productNameMatch = /export FULL_PRODUCT_NAME=\"?(.+).app\"?$/m.exec(buildOutput);\n  return productNameMatch ? productNameMatch[1] : null;\n}\n\nfunction xcprettyAvailable() {\n  try {\n    _child_process().default.execSync('xcpretty --version', {\n      stdio: [0, 'pipe', 'ignore']\n    });\n  } catch (error) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction matchingDevice(devices, deviceName) {\n  if (deviceName === true) {\n    var firstIOSDevice = devices.find(function (d) {\n      return d.type === 'device';\n    });\n\n    if (firstIOSDevice) {\n      _cliTools().logger.info(\"Using first available device named \\\"\" + _chalk().default.bold(firstIOSDevice.name) + \"\\\" due to lack of name supplied.\");\n\n      return firstIOSDevice;\n    } else {\n      _cliTools().logger.error('No iOS devices connected.');\n\n      return undefined;\n    }\n  }\n\n  var deviceByName = devices.find(function (device) {\n    return device.name === deviceName || formattedDeviceName(device) === deviceName;\n  });\n\n  if (!deviceByName) {\n    _cliTools().logger.error(\"Could not find a device named: \\\"\" + _chalk().default.bold(String(deviceName)) + \"\\\". \" + printFoundDevices(devices));\n  }\n\n  return deviceByName;\n}\n\nfunction formattedDeviceName(simulator) {\n  return simulator.version ? simulator.name + \" (\" + simulator.version + \")\" : simulator.name;\n}\n\nfunction printFoundDevices(devices) {\n  return ['Available devices:'].concat(_toConsumableArray(devices.map(function (device) {\n    return \"  - \" + device.name + \" (\" + device.udid + \")\";\n  }))).join('\\n');\n}\n\nfunction getProcessOptions(_ref) {\n  var packager = _ref.packager,\n      terminal = _ref.terminal,\n      port = _ref.port;\n\n  if (packager) {\n    return {\n      env: _objectSpread(_objectSpread({}, process.env), {}, {\n        RCT_TERMINAL: terminal,\n        RCT_METRO_PORT: port.toString()\n      })\n    };\n  }\n\n  return {\n    env: _objectSpread(_objectSpread({}, process.env), {}, {\n      RCT_TERMINAL: terminal,\n      RCT_NO_LAUNCH_PACKAGER: 'true'\n    })\n  };\n}\n\nvar _default = {\n  name: 'run-ios',\n  description: 'builds your app and starts it on iOS simulator',\n  func: runIOS,\n  examples: [{\n    desc: 'Run on a different simulator, e.g. iPhone SE',\n    cmd: 'react-native run-ios --simulator \"iPhone SE\"'\n  }, {\n    desc: 'Pass a non-standard location of iOS directory',\n    cmd: 'react-native run-ios --project-path \"./app/ios\"'\n  }, {\n    desc: \"Run on a connected device, e.g. Max's iPhone\",\n    cmd: 'react-native run-ios --device \"Max\\'s iPhone\"'\n  }, {\n    desc: 'Run on the AppleTV simulator',\n    cmd: 'react-native run-ios --simulator \"Apple TV\"  --scheme \"helloworld-tvOS\"'\n  }],\n  options: [{\n    name: '--simulator [string]',\n    description: 'Explicitly set simulator to use. Optionally include iOS version between ' + 'parenthesis at the end to match an exact version: \"iPhone 6 (10.0)\"',\n    default: 'iPhone 11'\n  }, {\n    name: '--configuration [string]',\n    description: 'Explicitly set the scheme configuration to use',\n    default: 'Debug'\n  }, {\n    name: '--scheme [string]',\n    description: 'Explicitly set Xcode scheme to use'\n  }, {\n    name: '--project-path [string]',\n    description: 'Path relative to project root where the Xcode project ' + '(.xcodeproj) lives.',\n    default: 'ios'\n  }, {\n    name: '--device [string]',\n    description: 'Explicitly set device to use by name.  The value is not required if you have a single device connected.'\n  }, {\n    name: '--udid [string]',\n    description: 'Explicitly set device to use by udid'\n  }, {\n    name: '--no-packager',\n    description: 'Do not launch packager while building'\n  }, {\n    name: '--verbose',\n    description: 'Do not use xcpretty even if installed'\n  }, {\n    name: '--port [number]',\n    default: process.env.RCT_METRO_PORT || 8081,\n    parse: function parse(val) {\n      return Number(val);\n    }\n  }, {\n    name: '--terminal [string]',\n    description: 'Launches the Metro Bundler in a new window using the specified terminal path.',\n    default: _cliTools().getDefaultUserTerminal\n  }]\n};\nexports.default = _default;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli-platform-ios/build/commands/runIOS/index.js"],"names":["Object","defineProperty","exports","value","default","_child_process","data","_interopRequireDefault","require","_fs","_path","_chalk","_findXcodeProject","_parseIOSDevicesList","_findMatchingSimulator","_warnAboutManuallyLinkedLibs","_warnAboutPodInstall","_cliTools","_ora","obj","__esModule","runIOS","_","ctx","args","existsSync","projectPath","CLIError","process","chdir","xcodeProject","readdirSync","inferredSchemeName","basename","name","extname","scheme","logger","info","isWorkspace","bold","device","udid","runOnSimulator","error","devices","execFileSync","encoding","find","d","printFoundDevices","type","runOnDevice","physicalDevices","filter","matchingDevice","simulators","JSON","parse","fallbackSimulators","selectedSimulator","reduce","simulator","fallback","activeDeveloperDir","trim","booted","bootSimulator","buildProject","appName","appPath","getBuildPath","configuration","spawnSync","stdio","bundleID","join","result","status","success","stderr","selectedDevice","isIOSDeployInstalled","iosDeployInstallArgs","iosDeployOutput","message","Promise","resolve","reject","xcodebuildArgs","loader","dim","xcpretty","verbose","xcprettyAvailable","spawn","stdout","buildProcess","getProcessOptions","buildOutput","errorOutput","on","stringData","toString","stdin","write","isVerbose","debug","start","repeat","length","code","end","stop","getProductName","simulatorFullName","formattedDeviceName","_ignored","getTargetPaths","buildSettings","settings","i","wrapperExtension","WRAPPER_EXTENSION","targetBuildDir","TARGET_BUILD_DIR","executableFolderPath","EXECUTABLE_FOLDER_PATH","isDevice","toLowerCase","includes","productNameMatch","exec","execSync","deviceName","firstIOSDevice","undefined","deviceByName","String","version","map","packager","terminal","port","env","RCT_TERMINAL","RCT_METRO_PORT","RCT_NO_LAUNCH_PACKAGER","_default","description","func","examples","desc","cmd","options","val","Number","getDefaultUserTerminal"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _child_process() {\n  const data = _interopRequireDefault(require(\"child_process\"));\n\n  _child_process = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _fs() {\n  const data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  const data = _interopRequireDefault(require(\"path\"));\n\n  _path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require(\"chalk\"));\n\n  _chalk = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _findXcodeProject = _interopRequireDefault(require(\"./findXcodeProject\"));\n\nvar _parseIOSDevicesList = _interopRequireDefault(require(\"./parseIOSDevicesList\"));\n\nvar _findMatchingSimulator = _interopRequireDefault(require(\"./findMatchingSimulator\"));\n\nvar _warnAboutManuallyLinkedLibs = _interopRequireDefault(require(\"../../link/warnAboutManuallyLinkedLibs\"));\n\nvar _warnAboutPodInstall = _interopRequireDefault(require(\"../../link/warnAboutPodInstall\"));\n\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _ora() {\n  const data = _interopRequireDefault(require(\"ora\"));\n\n  _ora = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction runIOS(_, ctx, args) {\n  if (!_fs().default.existsSync(args.projectPath)) {\n    throw new (_cliTools().CLIError)('iOS project folder not found. Are you sure this is a React Native project?');\n  }\n\n  (0, _warnAboutManuallyLinkedLibs.default)(ctx);\n  (0, _warnAboutPodInstall.default)(ctx);\n  process.chdir(args.projectPath);\n  const xcodeProject = (0, _findXcodeProject.default)(_fs().default.readdirSync('.'));\n\n  if (!xcodeProject) {\n    throw new (_cliTools().CLIError)(`Could not find Xcode project files in \"${args.projectPath}\" folder`);\n  }\n\n  const inferredSchemeName = _path().default.basename(xcodeProject.name, _path().default.extname(xcodeProject.name));\n\n  const scheme = args.scheme || inferredSchemeName;\n\n  _cliTools().logger.info(`Found Xcode ${xcodeProject.isWorkspace ? 'workspace' : 'project'} \"${_chalk().default.bold(xcodeProject.name)}\"`); // No need to load all available devices\n\n\n  if (!args.device && !args.udid) {\n    return runOnSimulator(xcodeProject, scheme, args);\n  }\n\n  if (args.device && args.udid) {\n    return _cliTools().logger.error('The `device` and `udid` options are mutually exclusive.');\n  }\n\n  const devices = (0, _parseIOSDevicesList.default)(_child_process().default.execFileSync('xcrun', ['instruments', '-s'], {\n    encoding: 'utf8'\n  }));\n\n  if (args.udid) {\n    const device = devices.find(d => d.udid === args.udid);\n\n    if (!device) {\n      return _cliTools().logger.error(`Could not find a device with udid: \"${_chalk().default.bold(args.udid)}\". ${printFoundDevices(devices)}`);\n    }\n\n    if (device.type === 'simulator') {\n      return runOnSimulator(xcodeProject, scheme, args);\n    } else {\n      return runOnDevice(device, scheme, xcodeProject, args);\n    }\n  } else {\n    const physicalDevices = devices.filter(d => d.type !== 'simulator');\n    const device = matchingDevice(physicalDevices, args.device);\n\n    if (device) {\n      return runOnDevice(device, scheme, xcodeProject, args);\n    }\n  }\n}\n\nasync function runOnSimulator(xcodeProject, scheme, args) {\n  let simulators;\n\n  try {\n    simulators = JSON.parse(_child_process().default.execFileSync('xcrun', ['simctl', 'list', '--json', 'devices'], {\n      encoding: 'utf8'\n    }));\n  } catch (error) {\n    throw new (_cliTools().CLIError)('Could not get the simulator list from Xcode. Please open Xcode and try running project directly from there to resolve the remaining issues.', error);\n  }\n  /**\n   * If provided simulator does not exist, try simulators in following order\n   * - iPhone X\n   * - iPhone 8\n   */\n\n\n  const fallbackSimulators = ['iPhone X', 'iPhone 8'];\n  const selectedSimulator = fallbackSimulators.reduce((simulator, fallback) => {\n    return simulator || (0, _findMatchingSimulator.default)(simulators, {\n      simulator: fallback\n    });\n  }, (0, _findMatchingSimulator.default)(simulators, args));\n\n  if (!selectedSimulator) {\n    throw new (_cliTools().CLIError)(`No simulator available with ${args.simulator ? `name \"${args.simulator}\"` : `udid \"${args.udid}\"`}`);\n  }\n  /**\n   * Booting simulator through `xcrun simctl boot` will boot it in the `headless` mode\n   * (running in the background).\n   *\n   * In order for user to see the app and the simulator itself, we have to make sure\n   * that the Simulator.app is running.\n   *\n   * We also pass it `-CurrentDeviceUDID` so that when we launch it for the first time,\n   * it will not boot the \"default\" device, but the one we set. If the app is already running,\n   * this flag has no effect.\n   */\n\n\n  const activeDeveloperDir = _child_process().default.execFileSync('xcode-select', ['-p'], {\n    encoding: 'utf8'\n  }).trim();\n\n  _child_process().default.execFileSync('open', [`${activeDeveloperDir}/Applications/Simulator.app`, '--args', '-CurrentDeviceUDID', selectedSimulator.udid]);\n\n  if (!selectedSimulator.booted) {\n    bootSimulator(selectedSimulator);\n  }\n\n  const appName = await buildProject(xcodeProject, selectedSimulator.udid, scheme, args);\n  const appPath = getBuildPath(xcodeProject, args.configuration, appName, false, scheme);\n\n  _cliTools().logger.info(`Installing \"${_chalk().default.bold(appPath)}\"`);\n\n  _child_process().default.spawnSync('xcrun', ['simctl', 'install', selectedSimulator.udid, appPath], {\n    stdio: 'inherit'\n  });\n\n  const bundleID = _child_process().default.execFileSync('/usr/libexec/PlistBuddy', ['-c', 'Print:CFBundleIdentifier', _path().default.join(appPath, 'Info.plist')], {\n    encoding: 'utf8'\n  }).trim();\n\n  _cliTools().logger.info(`Launching \"${_chalk().default.bold(bundleID)}\"`);\n\n  const result = _child_process().default.spawnSync('xcrun', ['simctl', 'launch', selectedSimulator.udid, bundleID]);\n\n  if (result.status === 0) {\n    _cliTools().logger.success('Successfully launched the app on the simulator');\n  } else {\n    _cliTools().logger.error('Failed to launch the app on simulator', result.stderr);\n  }\n}\n\nasync function runOnDevice(selectedDevice, scheme, xcodeProject, args) {\n  const isIOSDeployInstalled = _child_process().default.spawnSync('ios-deploy', ['--version'], {\n    encoding: 'utf8'\n  });\n\n  if (isIOSDeployInstalled.error) {\n    throw new (_cliTools().CLIError)(`Failed to install the app on the device because we couldn't execute the \"ios-deploy\" command. Please install it by running \"${_chalk().default.bold('npm install -g ios-deploy')}\" and try again.`);\n  }\n\n  const appName = await buildProject(xcodeProject, selectedDevice.udid, scheme, args);\n  const iosDeployInstallArgs = ['--bundle', getBuildPath(xcodeProject, args.configuration, appName, true, scheme), '--id', selectedDevice.udid, '--justlaunch'];\n\n  _cliTools().logger.info(`Installing and launching your app on ${selectedDevice.name}`);\n\n  const iosDeployOutput = _child_process().default.spawnSync('ios-deploy', iosDeployInstallArgs, {\n    encoding: 'utf8'\n  });\n\n  if (iosDeployOutput.error) {\n    throw new (_cliTools().CLIError)(`Failed to install the app on the device. We've encountered an error in \"ios-deploy\" command: ${iosDeployOutput.error.message}`);\n  }\n\n  return _cliTools().logger.success('Installed the app on the device.');\n}\n\nfunction buildProject(xcodeProject, udid, scheme, args) {\n  return new Promise((resolve, reject) => {\n    const xcodebuildArgs = [xcodeProject.isWorkspace ? '-workspace' : '-project', xcodeProject.name, '-configuration', args.configuration, '-scheme', scheme, '-destination', `id=${udid}`];\n    const loader = (0, _ora().default)();\n\n    _cliTools().logger.info(`Building ${_chalk().default.dim(`(using \"xcodebuild ${xcodebuildArgs.join(' ')}\")`)}`);\n\n    let xcpretty;\n\n    if (!args.verbose) {\n      xcpretty = xcprettyAvailable() && _child_process().default.spawn('xcpretty', [], {\n        stdio: ['pipe', process.stdout, process.stderr]\n      });\n    }\n\n    const buildProcess = _child_process().default.spawn('xcodebuild', xcodebuildArgs, getProcessOptions(args));\n\n    let buildOutput = '';\n    let errorOutput = '';\n    buildProcess.stdout.on('data', data => {\n      const stringData = data.toString();\n      buildOutput += stringData;\n\n      if (xcpretty) {\n        xcpretty.stdin.write(data);\n      } else {\n        if (_cliTools().logger.isVerbose()) {\n          _cliTools().logger.debug(stringData);\n        } else {\n          loader.start(`Building the app${'.'.repeat(buildOutput.length % 10)}`);\n        }\n      }\n    });\n    buildProcess.stderr.on('data', data => {\n      errorOutput += data;\n    });\n    buildProcess.on('close', code => {\n      if (xcpretty) {\n        xcpretty.stdin.end();\n      } else {\n        loader.stop();\n      }\n\n      if (code !== 0) {\n        reject(new (_cliTools().CLIError)(`\n            Failed to build iOS project.\n\n            We ran \"xcodebuild\" command but it exited with error code ${code}. To debug build\n            logs further, consider building your app with Xcode.app, by opening\n            ${xcodeProject.name}.\n          `, buildOutput + '\\n' + errorOutput));\n        return;\n      }\n\n      _cliTools().logger.success('Successfully built the app');\n\n      resolve(getProductName(buildOutput) || scheme);\n    });\n  });\n}\n\nfunction bootSimulator(selectedSimulator) {\n  const simulatorFullName = formattedDeviceName(selectedSimulator);\n\n  _cliTools().logger.info(`Launching ${simulatorFullName}`);\n\n  try {\n    _child_process().default.spawnSync('xcrun', ['instruments', '-w', selectedSimulator.udid]);\n  } catch (_ignored) {// instruments always fail with 255 because it expects more arguments,\n    // but we want it to only launch the simulator\n  }\n}\n\nfunction getTargetPaths(buildSettings) {\n  const settings = JSON.parse(buildSettings); // Find app in all building settings - look for WRAPPER_EXTENSION: 'app',\n\n  for (const i in settings) {\n    const wrapperExtension = settings[i].buildSettings.WRAPPER_EXTENSION;\n\n    if (wrapperExtension === 'app') {\n      return {\n        targetBuildDir: settings[i].buildSettings.TARGET_BUILD_DIR,\n        executableFolderPath: settings[i].buildSettings.EXECUTABLE_FOLDER_PATH\n      };\n    }\n  }\n\n  return {};\n}\n\nfunction getBuildPath(xcodeProject, configuration, appName, isDevice, scheme) {\n  let device;\n\n  if (isDevice) {\n    device = 'iphoneos';\n  } else if (appName.toLowerCase().includes('tvos')) {\n    device = 'appletvsimulator';\n  } else {\n    device = 'iphonesimulator';\n  }\n\n  const buildSettings = _child_process().default.execFileSync('xcodebuild', [xcodeProject.isWorkspace ? '-workspace' : '-project', xcodeProject.name, '-scheme', scheme, '-sdk', device, '-configuration', configuration, '-showBuildSettings', '-json'], {\n    encoding: 'utf8'\n  });\n\n  const {\n    targetBuildDir,\n    executableFolderPath\n  } = getTargetPaths(buildSettings);\n\n  if (!targetBuildDir) {\n    throw new (_cliTools().CLIError)('Failed to get the target build directory.');\n  }\n\n  if (!executableFolderPath) {\n    throw new (_cliTools().CLIError)('Failed to get the app name.');\n  }\n\n  return `${targetBuildDir}/${executableFolderPath}`;\n}\n\nfunction getProductName(buildOutput) {\n  const productNameMatch = /export FULL_PRODUCT_NAME=\"?(.+).app\"?$/m.exec(buildOutput);\n  return productNameMatch ? productNameMatch[1] : null;\n}\n\nfunction xcprettyAvailable() {\n  try {\n    _child_process().default.execSync('xcpretty --version', {\n      stdio: [0, 'pipe', 'ignore']\n    });\n  } catch (error) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction matchingDevice(devices, deviceName) {\n  if (deviceName === true) {\n    const firstIOSDevice = devices.find(d => d.type === 'device');\n\n    if (firstIOSDevice) {\n      _cliTools().logger.info(`Using first available device named \"${_chalk().default.bold(firstIOSDevice.name)}\" due to lack of name supplied.`);\n\n      return firstIOSDevice;\n    } else {\n      _cliTools().logger.error('No iOS devices connected.');\n\n      return undefined;\n    }\n  }\n\n  const deviceByName = devices.find(device => device.name === deviceName || formattedDeviceName(device) === deviceName);\n\n  if (!deviceByName) {\n    _cliTools().logger.error(`Could not find a device named: \"${_chalk().default.bold(String(deviceName))}\". ${printFoundDevices(devices)}`);\n  }\n\n  return deviceByName;\n}\n\nfunction formattedDeviceName(simulator) {\n  return simulator.version ? `${simulator.name} (${simulator.version})` : simulator.name;\n}\n\nfunction printFoundDevices(devices) {\n  return ['Available devices:', ...devices.map(device => `  - ${device.name} (${device.udid})`)].join('\\n');\n}\n\nfunction getProcessOptions({\n  packager,\n  terminal,\n  port\n}) {\n  if (packager) {\n    return {\n      env: { ...process.env,\n        RCT_TERMINAL: terminal,\n        RCT_METRO_PORT: port.toString()\n      }\n    };\n  }\n\n  return {\n    env: { ...process.env,\n      RCT_TERMINAL: terminal,\n      RCT_NO_LAUNCH_PACKAGER: 'true'\n    }\n  };\n}\n\nvar _default = {\n  name: 'run-ios',\n  description: 'builds your app and starts it on iOS simulator',\n  func: runIOS,\n  examples: [{\n    desc: 'Run on a different simulator, e.g. iPhone SE',\n    cmd: 'react-native run-ios --simulator \"iPhone SE\"'\n  }, {\n    desc: 'Pass a non-standard location of iOS directory',\n    cmd: 'react-native run-ios --project-path \"./app/ios\"'\n  }, {\n    desc: \"Run on a connected device, e.g. Max's iPhone\",\n    cmd: 'react-native run-ios --device \"Max\\'s iPhone\"'\n  }, {\n    desc: 'Run on the AppleTV simulator',\n    cmd: 'react-native run-ios --simulator \"Apple TV\"  --scheme \"helloworld-tvOS\"'\n  }],\n  options: [{\n    name: '--simulator [string]',\n    description: 'Explicitly set simulator to use. Optionally include iOS version between ' + 'parenthesis at the end to match an exact version: \"iPhone 6 (10.0)\"',\n    default: 'iPhone 11'\n  }, {\n    name: '--configuration [string]',\n    description: 'Explicitly set the scheme configuration to use',\n    default: 'Debug'\n  }, {\n    name: '--scheme [string]',\n    description: 'Explicitly set Xcode scheme to use'\n  }, {\n    name: '--project-path [string]',\n    description: 'Path relative to project root where the Xcode project ' + '(.xcodeproj) lives.',\n    default: 'ios'\n  }, {\n    name: '--device [string]',\n    description: 'Explicitly set device to use by name.  The value is not required if you have a single device connected.'\n  }, {\n    name: '--udid [string]',\n    description: 'Explicitly set device to use by udid'\n  }, {\n    name: '--no-packager',\n    description: 'Do not launch packager while building'\n  }, {\n    name: '--verbose',\n    description: 'Do not use xcpretty even if installed'\n  }, {\n    name: '--port [number]',\n    default: process.env.RCT_METRO_PORT || 8081,\n    parse: val => Number(val)\n  }, {\n    name: '--terminal [string]',\n    description: 'Launches the Metro Bundler in a new window using the specified terminal path.',\n    default: _cliTools().getDefaultUserTerminal\n  }]\n};\nexports.default = _default;\n\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}