{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _extends = require(\"@babel/runtime/helpers/extends\");\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar plist_1 = __importDefault(require(\"@expo/plist\"));\n\nvar fs_extra_1 = require(\"fs-extra\");\n\nvar path_1 = __importDefault(require(\"path\"));\n\nvar android_1 = require(\"../android\");\n\nvar AndroidPaths = __importStar(require(\"../android/Paths\"));\n\nvar Resources_1 = require(\"../android/Resources\");\n\nvar Strings_1 = require(\"../android/Strings\");\n\nvar Entitlements_1 = require(\"../ios/Entitlements\");\n\nvar Paths_1 = require(\"../ios/Paths\");\n\nvar Xcodeproj_1 = require(\"../ios/utils/Xcodeproj\");\n\nvar XML_1 = require(\"../utils/XML\");\n\nvar errors_1 = require(\"../utils/errors\");\n\nvar WarningAggregator = __importStar(require(\"../utils/warnings\"));\n\nvar core_plugins_1 = require(\"./core-plugins\");\n\nfunction withBaseMods(config) {\n  config = applyIOSBaseMods(config);\n  config = applyAndroidBaseMods(config);\n  return config;\n}\n\nexports.withBaseMods = withBaseMods;\n\nfunction resolveModResults(results, platformName, modName) {\n  var ensuredResults = results;\n\n  if (!ensuredResults || typeof ensuredResults !== 'object' || !(ensuredResults === null || ensuredResults === void 0 ? void 0 : ensuredResults.mods)) {\n    throw new Error(\"Mod `mods.\" + platformName + \".\" + modName + \"` evaluated to an object that is not a valid project config. Instead got: \" + JSON.stringify(ensuredResults));\n  }\n\n  return ensuredResults;\n}\n\nexports.resolveModResults = resolveModResults;\n\nfunction applyAndroidBaseMods(config) {\n  config = withExpoDangerousBaseMod(config, 'android');\n  config = withAndroidStringsXMLBaseMod(config);\n  config = withAndroidManifestBaseMod(config);\n  config = withAndroidMainActivityBaseMod(config);\n  config = withAndroidSettingsGradleBaseMod(config);\n  config = withAndroidProjectBuildGradleBaseMod(config);\n  config = withAndroidAppBuildGradleBaseMod(config);\n  return config;\n}\n\nvar withAndroidManifestBaseMod = function withAndroidManifestBaseMod(config) {\n  return core_plugins_1.withInterceptedMod(config, {\n    platform: 'android',\n    mod: 'manifest',\n    skipEmptyMod: true,\n    action: function action(_a) {\n      var _b, nextMod, modRequest, config, results, filePath, modResults;\n\n      return _regeneratorRuntime.async(function action$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _b = _a.modRequest, nextMod = _b.nextMod, modRequest = __rest(_b, [\"nextMod\"]), config = __rest(_a, [\"modRequest\"]);\n              results = _extends(_extends({}, config), {\n                modRequest: modRequest\n              });\n              _context.prev = 2;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(AndroidPaths.getAndroidManifestAsync(modRequest.projectRoot));\n\n            case 5:\n              filePath = _context.sent;\n              _context.next = 8;\n              return _regeneratorRuntime.awrap(android_1.Manifest.readAndroidManifestAsync(filePath));\n\n            case 8:\n              modResults = _context.sent;\n              _context.next = 11;\n              return _regeneratorRuntime.awrap(nextMod(_extends(_extends({}, config), {\n                modResults: modResults,\n                modRequest: modRequest\n              })));\n\n            case 11:\n              results = _context.sent;\n              resolveModResults(results, modRequest.platform, modRequest.modName);\n              modResults = results.modResults;\n              _context.next = 16;\n              return _regeneratorRuntime.awrap(android_1.Manifest.writeAndroidManifestAsync(filePath, modResults));\n\n            case 16:\n              _context.next = 22;\n              break;\n\n            case 18:\n              _context.prev = 18;\n              _context.t0 = _context[\"catch\"](2);\n              console.error(\"AndroidManifest.xml mod error:\");\n              throw _context.t0;\n\n            case 22:\n              return _context.abrupt(\"return\", results);\n\n            case 23:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[2, 18]], Promise);\n    }\n  });\n};\n\nvar withAndroidStringsXMLBaseMod = function withAndroidStringsXMLBaseMod(config) {\n  return core_plugins_1.withInterceptedMod(config, {\n    platform: 'android',\n    mod: 'strings',\n    skipEmptyMod: true,\n    action: function action(_a) {\n      var _b, nextMod, modRequest, config, results, filePath, modResults;\n\n      return _regeneratorRuntime.async(function action$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _b = _a.modRequest, nextMod = _b.nextMod, modRequest = __rest(_b, [\"nextMod\"]), config = __rest(_a, [\"modRequest\"]);\n              results = _extends(_extends({}, config), {\n                modRequest: modRequest\n              });\n              _context2.prev = 2;\n              _context2.next = 5;\n              return _regeneratorRuntime.awrap(Strings_1.getProjectStringsXMLPathAsync(modRequest.projectRoot));\n\n            case 5:\n              filePath = _context2.sent;\n              _context2.next = 8;\n              return _regeneratorRuntime.awrap(Resources_1.readResourcesXMLAsync({\n                path: filePath\n              }));\n\n            case 8:\n              modResults = _context2.sent;\n              _context2.next = 11;\n              return _regeneratorRuntime.awrap(nextMod(_extends(_extends({}, config), {\n                modResults: modResults,\n                modRequest: modRequest\n              })));\n\n            case 11:\n              results = _context2.sent;\n              resolveModResults(results, modRequest.platform, modRequest.modName);\n              modResults = results.modResults;\n              _context2.next = 16;\n              return _regeneratorRuntime.awrap(XML_1.writeXMLAsync({\n                path: filePath,\n                xml: modResults\n              }));\n\n            case 16:\n              _context2.next = 22;\n              break;\n\n            case 18:\n              _context2.prev = 18;\n              _context2.t0 = _context2[\"catch\"](2);\n              console.error(\"strings.xml mod error:\");\n              throw _context2.t0;\n\n            case 22:\n              return _context2.abrupt(\"return\", results);\n\n            case 23:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[2, 18]], Promise);\n    }\n  });\n};\n\nvar withAndroidProjectBuildGradleBaseMod = function withAndroidProjectBuildGradleBaseMod(config) {\n  return core_plugins_1.withInterceptedMod(config, {\n    platform: 'android',\n    mod: 'projectBuildGradle',\n    skipEmptyMod: true,\n    action: function action(_a) {\n      var _b, nextMod, modRequest, config, results, modResults, filePath;\n\n      return _regeneratorRuntime.async(function action$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _b = _a.modRequest, nextMod = _b.nextMod, modRequest = __rest(_b, [\"nextMod\"]), config = __rest(_a, [\"modRequest\"]);\n              results = _extends(_extends({}, config), {\n                modRequest: modRequest\n              });\n              _context3.prev = 2;\n              _context3.next = 5;\n              return _regeneratorRuntime.awrap(AndroidPaths.getProjectBuildGradleAsync(modRequest.projectRoot));\n\n            case 5:\n              modResults = _context3.sent;\n              filePath = modResults.path;\n              _context3.next = 9;\n              return _regeneratorRuntime.awrap(nextMod(_extends(_extends({}, config), {\n                modResults: modResults,\n                modRequest: modRequest\n              })));\n\n            case 9:\n              results = _context3.sent;\n              resolveModResults(results, modRequest.platform, modRequest.modName);\n              modResults = results.modResults;\n              _context3.next = 14;\n              return _regeneratorRuntime.awrap(fs_extra_1.writeFile(filePath, modResults.contents));\n\n            case 14:\n              _context3.next = 20;\n              break;\n\n            case 16:\n              _context3.prev = 16;\n              _context3.t0 = _context3[\"catch\"](2);\n              console.error(\"android/build.gradle mod error:\");\n              throw _context3.t0;\n\n            case 20:\n              return _context3.abrupt(\"return\", results);\n\n            case 21:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, [[2, 16]], Promise);\n    }\n  });\n};\n\nvar withAndroidSettingsGradleBaseMod = function withAndroidSettingsGradleBaseMod(config) {\n  return core_plugins_1.withInterceptedMod(config, {\n    platform: 'android',\n    mod: 'settingsGradle',\n    skipEmptyMod: true,\n    action: function action(_a) {\n      var _b, nextMod, modRequest, config, results, modResults, filePath;\n\n      return _regeneratorRuntime.async(function action$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _b = _a.modRequest, nextMod = _b.nextMod, modRequest = __rest(_b, [\"nextMod\"]), config = __rest(_a, [\"modRequest\"]);\n              results = _extends(_extends({}, config), {\n                modRequest: modRequest\n              });\n              _context4.prev = 2;\n              _context4.next = 5;\n              return _regeneratorRuntime.awrap(AndroidPaths.getSettingsGradleAsync(modRequest.projectRoot));\n\n            case 5:\n              modResults = _context4.sent;\n              filePath = modResults.path;\n              _context4.next = 9;\n              return _regeneratorRuntime.awrap(nextMod(_extends(_extends({}, config), {\n                modResults: modResults,\n                modRequest: modRequest\n              })));\n\n            case 9:\n              results = _context4.sent;\n              resolveModResults(results, modRequest.platform, modRequest.modName);\n              modResults = results.modResults;\n              _context4.next = 14;\n              return _regeneratorRuntime.awrap(fs_extra_1.writeFile(filePath, modResults.contents));\n\n            case 14:\n              _context4.next = 20;\n              break;\n\n            case 16:\n              _context4.prev = 16;\n              _context4.t0 = _context4[\"catch\"](2);\n              console.error(\"android/settings.gradle mod error:\");\n              throw _context4.t0;\n\n            case 20:\n              return _context4.abrupt(\"return\", results);\n\n            case 21:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, [[2, 16]], Promise);\n    }\n  });\n};\n\nvar withAndroidAppBuildGradleBaseMod = function withAndroidAppBuildGradleBaseMod(config) {\n  return core_plugins_1.withInterceptedMod(config, {\n    platform: 'android',\n    mod: 'appBuildGradle',\n    skipEmptyMod: true,\n    action: function action(_a) {\n      var _b, nextMod, modRequest, config, results, modResults, filePath;\n\n      return _regeneratorRuntime.async(function action$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _b = _a.modRequest, nextMod = _b.nextMod, modRequest = __rest(_b, [\"nextMod\"]), config = __rest(_a, [\"modRequest\"]);\n              results = _extends(_extends({}, config), {\n                modRequest: modRequest\n              });\n              _context5.prev = 2;\n              _context5.next = 5;\n              return _regeneratorRuntime.awrap(AndroidPaths.getAppBuildGradleAsync(modRequest.projectRoot));\n\n            case 5:\n              modResults = _context5.sent;\n              filePath = modResults.path;\n              _context5.next = 9;\n              return _regeneratorRuntime.awrap(nextMod(_extends(_extends({}, config), {\n                modResults: modResults,\n                modRequest: modRequest\n              })));\n\n            case 9:\n              results = _context5.sent;\n              resolveModResults(results, modRequest.platform, modRequest.modName);\n              modResults = results.modResults;\n              _context5.next = 14;\n              return _regeneratorRuntime.awrap(fs_extra_1.writeFile(filePath, modResults.contents));\n\n            case 14:\n              _context5.next = 20;\n              break;\n\n            case 16:\n              _context5.prev = 16;\n              _context5.t0 = _context5[\"catch\"](2);\n              console.error(\"android/app/build.gradle mod error:\");\n              throw _context5.t0;\n\n            case 20:\n              return _context5.abrupt(\"return\", results);\n\n            case 21:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, null, [[2, 16]], Promise);\n    }\n  });\n};\n\nvar withAndroidMainActivityBaseMod = function withAndroidMainActivityBaseMod(config) {\n  return core_plugins_1.withInterceptedMod(config, {\n    platform: 'android',\n    mod: 'mainActivity',\n    skipEmptyMod: true,\n    action: function action(_a) {\n      var _b, nextMod, modRequest, config, results, modResults, filePath;\n\n      return _regeneratorRuntime.async(function action$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _b = _a.modRequest, nextMod = _b.nextMod, modRequest = __rest(_b, [\"nextMod\"]), config = __rest(_a, [\"modRequest\"]);\n              results = _extends(_extends({}, config), {\n                modRequest: modRequest\n              });\n              _context6.prev = 2;\n              _context6.next = 5;\n              return _regeneratorRuntime.awrap(AndroidPaths.getMainActivityAsync(modRequest.projectRoot));\n\n            case 5:\n              modResults = _context6.sent;\n              filePath = modResults.path;\n              _context6.next = 9;\n              return _regeneratorRuntime.awrap(nextMod(_extends(_extends({}, config), {\n                modResults: modResults,\n                modRequest: modRequest\n              })));\n\n            case 9:\n              results = _context6.sent;\n              resolveModResults(results, modRequest.platform, modRequest.modName);\n              modResults = results.modResults;\n              _context6.next = 14;\n              return _regeneratorRuntime.awrap(fs_extra_1.writeFile(filePath, modResults.contents));\n\n            case 14:\n              _context6.next = 20;\n              break;\n\n            case 16:\n              _context6.prev = 16;\n              _context6.t0 = _context6[\"catch\"](2);\n              console.error(\"MainActivity mod error:\");\n              throw _context6.t0;\n\n            case 20:\n              return _context6.abrupt(\"return\", results);\n\n            case 21:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, null, [[2, 16]], Promise);\n    }\n  });\n};\n\nfunction applyIOSBaseMods(config) {\n  config = withExpoDangerousBaseMod(config, 'ios');\n  config = withAppDelegateBaseMod(config);\n  config = withIosInfoPlistBaseMod(config);\n  config = withExpoPlistBaseMod(config);\n  config = withXcodeProjectBaseMod(config);\n  config = withEntitlementsBaseMod(config);\n  return config;\n}\n\nvar withExpoDangerousBaseMod = function withExpoDangerousBaseMod(config, platform) {\n  return core_plugins_1.withInterceptedMod(config, {\n    platform: platform,\n    mod: 'dangerous',\n    skipEmptyMod: true,\n    action: function action(_a) {\n      var _b, nextMod, modRequest, config, results;\n\n      return _regeneratorRuntime.async(function action$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _b = _a.modRequest, nextMod = _b.nextMod, modRequest = __rest(_b, [\"nextMod\"]), config = __rest(_a, [\"modRequest\"]);\n              _context7.next = 3;\n              return _regeneratorRuntime.awrap(nextMod(_extends(_extends({}, config), {\n                modRequest: modRequest\n              })));\n\n            case 3:\n              results = _context7.sent;\n              resolveModResults(results, modRequest.platform, modRequest.modName);\n              return _context7.abrupt(\"return\", results);\n\n            case 6:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  });\n};\n\nvar withAppDelegateBaseMod = function withAppDelegateBaseMod(config) {\n  return core_plugins_1.withInterceptedMod(config, {\n    platform: 'ios',\n    mod: 'appDelegate',\n    skipEmptyMod: true,\n    action: function action(_a) {\n      var _b, nextMod, modRequest, config, results, modResults, filePath;\n\n      return _regeneratorRuntime.async(function action$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _b = _a.modRequest, nextMod = _b.nextMod, modRequest = __rest(_b, [\"nextMod\"]), config = __rest(_a, [\"modRequest\"]);\n              results = _extends(_extends({}, config), {\n                modRequest: modRequest\n              });\n              _context8.prev = 2;\n              modResults = Paths_1.getAppDelegate(modRequest.projectRoot);\n              filePath = modResults.path;\n              _context8.next = 7;\n              return _regeneratorRuntime.awrap(nextMod(_extends(_extends({}, config), {\n                modResults: modResults,\n                modRequest: modRequest\n              })));\n\n            case 7:\n              results = _context8.sent;\n              resolveModResults(results, modRequest.platform, modRequest.modName);\n              modResults = results.modResults;\n              _context8.next = 12;\n              return _regeneratorRuntime.awrap(fs_extra_1.writeFile(filePath, modResults.contents));\n\n            case 12:\n              _context8.next = 18;\n              break;\n\n            case 14:\n              _context8.prev = 14;\n              _context8.t0 = _context8[\"catch\"](2);\n              console.error(\"AppDelegate mod error:\");\n              throw _context8.t0;\n\n            case 18:\n              return _context8.abrupt(\"return\", results);\n\n            case 19:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, null, null, [[2, 14]], Promise);\n    }\n  });\n};\n\nvar withExpoPlistBaseMod = function withExpoPlistBaseMod(config) {\n  return core_plugins_1.withInterceptedMod(config, {\n    platform: 'ios',\n    mod: 'expoPlist',\n    skipEmptyMod: true,\n    action: function action(_a) {\n      var _b, nextMod, modRequest, config, supportingDirectory, results, filePath, modResults;\n\n      return _regeneratorRuntime.async(function action$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _b = _a.modRequest, nextMod = _b.nextMod, modRequest = __rest(_b, [\"nextMod\"]), config = __rest(_a, [\"modRequest\"]);\n              supportingDirectory = path_1.default.join(modRequest.platformProjectRoot, modRequest.projectName, 'Supporting');\n              results = _extends(_extends({}, config), {\n                modRequest: modRequest\n              });\n              _context9.prev = 3;\n              filePath = path_1.default.resolve(supportingDirectory, 'Expo.plist');\n              _context9.t0 = plist_1.default;\n              _context9.next = 8;\n              return _regeneratorRuntime.awrap(fs_extra_1.readFile(filePath, 'utf8'));\n\n            case 8:\n              _context9.t1 = _context9.sent;\n              modResults = _context9.t0.parse.call(_context9.t0, _context9.t1);\n              _context9.next = 12;\n              return _regeneratorRuntime.awrap(nextMod(_extends(_extends({}, config), {\n                modResults: modResults,\n                modRequest: modRequest\n              })));\n\n            case 12:\n              results = _context9.sent;\n              resolveModResults(results, modRequest.platform, modRequest.modName);\n              modResults = results.modResults;\n              _context9.next = 17;\n              return _regeneratorRuntime.awrap(fs_extra_1.writeFile(filePath, plist_1.default.build(modResults)));\n\n            case 17:\n              _context9.next = 22;\n              break;\n\n            case 19:\n              _context9.prev = 19;\n              _context9.t2 = _context9[\"catch\"](3);\n              WarningAggregator.addWarningIOS('updates', 'Expo.plist configuration could not be applied. You will need to create Expo.plist if it does not exist and add Updates configuration manually.', 'https://docs.expo.io/bare/updating-your-app/#configuration-options');\n\n            case 22:\n              return _context9.abrupt(\"return\", results);\n\n            case 23:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, null, null, [[3, 19]], Promise);\n    }\n  });\n};\n\nvar withXcodeProjectBaseMod = function withXcodeProjectBaseMod(config) {\n  return core_plugins_1.withInterceptedMod(config, {\n    platform: 'ios',\n    mod: 'xcodeproj',\n    skipEmptyMod: true,\n    action: function action(_a) {\n      var _b, nextMod, modRequest, config, modResults, results, resultData;\n\n      return _regeneratorRuntime.async(function action$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _b = _a.modRequest, nextMod = _b.nextMod, modRequest = __rest(_b, [\"nextMod\"]), config = __rest(_a, [\"modRequest\"]);\n              modResults = Xcodeproj_1.getPbxproj(modRequest.projectRoot);\n              _context10.next = 4;\n              return _regeneratorRuntime.awrap(nextMod(_extends(_extends({}, config), {\n                modResults: modResults,\n                modRequest: modRequest\n              })));\n\n            case 4:\n              results = _context10.sent;\n              resolveModResults(results, modRequest.platform, modRequest.modName);\n              resultData = results.modResults;\n              _context10.next = 9;\n              return _regeneratorRuntime.awrap(fs_extra_1.writeFile(resultData.filepath, resultData.writeSync()));\n\n            case 9:\n              return _context10.abrupt(\"return\", results);\n\n            case 10:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  });\n};\n\nvar withIosInfoPlistBaseMod = function withIosInfoPlistBaseMod(config) {\n  return core_plugins_1.withInterceptedMod(config, {\n    platform: 'ios',\n    mod: 'infoPlist',\n    skipEmptyMod: true,\n    action: function action(_a) {\n      var _b, nextMod, modRequest, config, filePath, results, contents, data;\n\n      return _regeneratorRuntime.async(function action$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              _b = _a.modRequest, nextMod = _b.nextMod, modRequest = __rest(_b, [\"nextMod\"]), config = __rest(_a, [\"modRequest\"]);\n              filePath = Paths_1.getInfoPlistPath(modRequest.projectRoot);\n              results = _extends(_extends({}, config), {\n                modRequest: modRequest\n              });\n\n              if (!config.ios) {\n                config.ios = {};\n              }\n\n              if (!config.ios.infoPlist) {\n                config.ios.infoPlist = {};\n              }\n\n              _context11.next = 7;\n              return _regeneratorRuntime.awrap(fs_extra_1.readFile(filePath, 'utf8'));\n\n            case 7:\n              contents = _context11.sent;\n              errors_1.assert(contents, 'Info.plist is empty');\n              data = plist_1.default.parse(contents);\n              config.ios.infoPlist = _extends(_extends({}, data || {}), config.ios.infoPlist);\n              _context11.next = 13;\n              return _regeneratorRuntime.awrap(nextMod(_extends(_extends({}, config), {\n                modRequest: modRequest,\n                modResults: config.ios.infoPlist\n              })));\n\n            case 13:\n              results = _context11.sent;\n              resolveModResults(results, modRequest.platform, modRequest.modName);\n              data = results.modResults;\n              _context11.next = 18;\n              return _regeneratorRuntime.awrap(fs_extra_1.writeFile(filePath, plist_1.default.build(data)));\n\n            case 18:\n              return _context11.abrupt(\"return\", results);\n\n            case 19:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  });\n};\n\nvar withEntitlementsBaseMod = function withEntitlementsBaseMod(config) {\n  return core_plugins_1.withInterceptedMod(config, {\n    platform: 'ios',\n    mod: 'entitlements',\n    skipEmptyMod: true,\n    action: function action(_a) {\n      var _b, nextMod, modRequest, config, entitlementsPath, results, data;\n\n      return _regeneratorRuntime.async(function action$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              _b = _a.modRequest, nextMod = _b.nextMod, modRequest = __rest(_b, [\"nextMod\"]), config = __rest(_a, [\"modRequest\"]);\n              entitlementsPath = Entitlements_1.getEntitlementsPath(modRequest.projectRoot);\n              results = _extends(_extends({}, config), {\n                modRequest: modRequest\n              });\n              _context12.prev = 3;\n              _context12.t0 = plist_1.default;\n              _context12.next = 7;\n              return _regeneratorRuntime.awrap(fs_extra_1.readFile(entitlementsPath, 'utf8'));\n\n            case 7:\n              _context12.t1 = _context12.sent;\n              data = _context12.t0.parse.call(_context12.t0, _context12.t1);\n\n              if (!config.ios) {\n                config.ios = {};\n              }\n\n              if (!config.ios.entitlements) {\n                config.ios.entitlements = {};\n              }\n\n              config.ios.entitlements = _extends(_extends({}, data || {}), config.ios.entitlements);\n              _context12.next = 14;\n              return _regeneratorRuntime.awrap(nextMod(_extends(_extends({}, config), {\n                modRequest: modRequest,\n                modResults: config.ios.entitlements\n              })));\n\n            case 14:\n              results = _context12.sent;\n              resolveModResults(results, modRequest.platform, modRequest.modName);\n              _context12.next = 18;\n              return _regeneratorRuntime.awrap(fs_extra_1.writeFile(entitlementsPath, plist_1.default.build(results.modResults)));\n\n            case 18:\n              _context12.next = 24;\n              break;\n\n            case 20:\n              _context12.prev = 20;\n              _context12.t2 = _context12[\"catch\"](3);\n              console.error(path_1.default.basename(entitlementsPath) + \" mod error:\");\n              throw _context12.t2;\n\n            case 24:\n              return _context12.abrupt(\"return\", results);\n\n            case 25:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, null, null, [[3, 20]], Promise);\n    }\n  });\n};","map":{"version":3,"sources":["../../src/plugins/compiler-plugins.ts"],"names":[],"mappings":"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","sourcesContent":["import { JSONObject } from '@expo/json-file';\nimport plist from '@expo/plist';\nimport { readFile, writeFile } from 'fs-extra';\nimport path from 'path';\nimport { XcodeProject } from 'xcode';\n\nimport {\n  ConfigPlugin,\n  ExportedConfig,\n  ExportedConfigWithProps,\n  ModPlatform,\n} from '../Plugin.types';\nimport { Manifest } from '../android';\nimport { AndroidManifest } from '../android/Manifest';\nimport * as AndroidPaths from '../android/Paths';\nimport { readResourcesXMLAsync, ResourceXML } from '../android/Resources';\nimport { getProjectStringsXMLPathAsync } from '../android/Strings';\nimport { getEntitlementsPath } from '../ios/Entitlements';\nimport { InfoPlist } from '../ios/IosConfig.types';\nimport { AppDelegateProjectFile, getAppDelegate, getInfoPlistPath } from '../ios/Paths';\nimport { getPbxproj } from '../ios/utils/Xcodeproj';\nimport { writeXMLAsync } from '../utils/XML';\nimport { assert } from '../utils/errors';\nimport * as WarningAggregator from '../utils/warnings';\nimport { withInterceptedMod } from './core-plugins';\n\nexport function withBaseMods(config: ExportedConfig): ExportedConfig {\n  config = applyIOSBaseMods(config);\n  config = applyAndroidBaseMods(config);\n  return config;\n}\n\nexport function resolveModResults(results: any, platformName: string, modName: string) {\n  // If the results came from a mod, they'd be in the form of [config, data].\n  // Ensure the results are an array and omit the data since it should've been written by a data provider plugin.\n  const ensuredResults = results;\n\n  // Sanity check to help locate non compliant mods.\n  if (!ensuredResults || typeof ensuredResults !== 'object' || !ensuredResults?.mods) {\n    throw new Error(\n      `Mod \\`mods.${platformName}.${modName}\\` evaluated to an object that is not a valid project config. Instead got: ${JSON.stringify(\n        ensuredResults\n      )}`\n    );\n  }\n  return ensuredResults;\n}\n\nfunction applyAndroidBaseMods(config: ExportedConfig): ExportedConfig {\n  config = withExpoDangerousBaseMod(config, 'android');\n  config = withAndroidStringsXMLBaseMod(config);\n  config = withAndroidManifestBaseMod(config);\n  config = withAndroidMainActivityBaseMod(config);\n  config = withAndroidSettingsGradleBaseMod(config);\n  config = withAndroidProjectBuildGradleBaseMod(config);\n  config = withAndroidAppBuildGradleBaseMod(config);\n  return config;\n}\n\nconst withAndroidManifestBaseMod: ConfigPlugin = config => {\n  // Append a rule to supply AndroidManifest.xml data to mods on `mods.android.manifest`\n  return withInterceptedMod<AndroidManifest>(config, {\n    platform: 'android',\n    mod: 'manifest',\n    skipEmptyMod: true,\n    async action({ modRequest: { nextMod, ...modRequest }, ...config }) {\n      let results: ExportedConfigWithProps<AndroidManifest> = {\n        ...config,\n        modRequest,\n      };\n\n      try {\n        const filePath = await AndroidPaths.getAndroidManifestAsync(modRequest.projectRoot);\n        let modResults = await Manifest.readAndroidManifestAsync(filePath);\n\n        results = await nextMod!({\n          ...config,\n          modResults,\n          modRequest,\n        });\n        resolveModResults(results, modRequest.platform, modRequest.modName);\n        modResults = results.modResults;\n\n        await Manifest.writeAndroidManifestAsync(filePath, modResults);\n      } catch (error) {\n        console.error(`AndroidManifest.xml mod error:`);\n        throw error;\n      }\n      return results;\n    },\n  });\n};\n\nconst withAndroidStringsXMLBaseMod: ConfigPlugin = config => {\n  // Append a rule to supply strings.xml data to mods on `mods.android.strings`\n  return withInterceptedMod<ResourceXML>(config, {\n    platform: 'android',\n    mod: 'strings',\n    skipEmptyMod: true,\n    async action({ modRequest: { nextMod, ...modRequest }, ...config }) {\n      let results: ExportedConfigWithProps<ResourceXML> = {\n        ...config,\n        modRequest,\n      };\n\n      try {\n        const filePath = await getProjectStringsXMLPathAsync(modRequest.projectRoot);\n        let modResults = await readResourcesXMLAsync({ path: filePath });\n\n        results = await nextMod!({\n          ...config,\n          modResults,\n          modRequest,\n        });\n        resolveModResults(results, modRequest.platform, modRequest.modName);\n        modResults = results.modResults;\n\n        await writeXMLAsync({ path: filePath, xml: modResults });\n      } catch (error) {\n        console.error(`strings.xml mod error:`);\n        throw error;\n      }\n      return results;\n    },\n  });\n};\n\nconst withAndroidProjectBuildGradleBaseMod: ConfigPlugin = config => {\n  return withInterceptedMod<AndroidPaths.GradleProjectFile>(config, {\n    platform: 'android',\n    mod: 'projectBuildGradle',\n    skipEmptyMod: true,\n    async action({ modRequest: { nextMod, ...modRequest }, ...config }) {\n      let results: ExportedConfigWithProps<AndroidPaths.GradleProjectFile> = {\n        ...config,\n        modRequest,\n      };\n\n      try {\n        let modResults = await AndroidPaths.getProjectBuildGradleAsync(modRequest.projectRoot);\n        // Currently don't support changing the path or language\n        const filePath = modResults.path;\n\n        results = await nextMod!({\n          ...config,\n          modResults,\n          modRequest,\n        });\n        resolveModResults(results, modRequest.platform, modRequest.modName);\n        modResults = results.modResults;\n\n        await writeFile(filePath, modResults.contents);\n      } catch (error) {\n        console.error(`android/build.gradle mod error:`);\n        throw error;\n      }\n      return results;\n    },\n  });\n};\n\nconst withAndroidSettingsGradleBaseMod: ConfigPlugin = config => {\n  return withInterceptedMod<AndroidPaths.GradleProjectFile>(config, {\n    platform: 'android',\n    mod: 'settingsGradle',\n    skipEmptyMod: true,\n    async action({ modRequest: { nextMod, ...modRequest }, ...config }) {\n      let results: ExportedConfigWithProps<AndroidPaths.GradleProjectFile> = {\n        ...config,\n        modRequest,\n      };\n\n      try {\n        let modResults = await AndroidPaths.getSettingsGradleAsync(modRequest.projectRoot);\n        // Currently don't support changing the path or language\n        const filePath = modResults.path;\n\n        results = await nextMod!({\n          ...config,\n          modResults,\n          modRequest,\n        });\n        resolveModResults(results, modRequest.platform, modRequest.modName);\n        modResults = results.modResults;\n\n        await writeFile(filePath, modResults.contents);\n      } catch (error) {\n        console.error(`android/settings.gradle mod error:`);\n        throw error;\n      }\n      return results;\n    },\n  });\n};\n\nconst withAndroidAppBuildGradleBaseMod: ConfigPlugin = config => {\n  return withInterceptedMod<AndroidPaths.GradleProjectFile>(config, {\n    platform: 'android',\n    mod: 'appBuildGradle',\n    skipEmptyMod: true,\n    async action({ modRequest: { nextMod, ...modRequest }, ...config }) {\n      let results: ExportedConfigWithProps<AndroidPaths.GradleProjectFile> = {\n        ...config,\n        modRequest,\n      };\n\n      try {\n        let modResults = await AndroidPaths.getAppBuildGradleAsync(modRequest.projectRoot);\n        // Currently don't support changing the path or language\n        const filePath = modResults.path;\n\n        results = await nextMod!({\n          ...config,\n          modResults,\n          modRequest,\n        });\n        resolveModResults(results, modRequest.platform, modRequest.modName);\n        modResults = results.modResults;\n\n        await writeFile(filePath, modResults.contents);\n      } catch (error) {\n        console.error(`android/app/build.gradle mod error:`);\n        throw error;\n      }\n      return results;\n    },\n  });\n};\n\nconst withAndroidMainActivityBaseMod: ConfigPlugin = config => {\n  return withInterceptedMod<AndroidPaths.ApplicationProjectFile>(config, {\n    platform: 'android',\n    mod: 'mainActivity',\n    skipEmptyMod: true,\n    async action({ modRequest: { nextMod, ...modRequest }, ...config }) {\n      let results: ExportedConfigWithProps<AndroidPaths.ApplicationProjectFile> = {\n        ...config,\n        modRequest,\n      };\n\n      try {\n        let modResults = await AndroidPaths.getMainActivityAsync(modRequest.projectRoot);\n        // Currently don't support changing the path or language\n        const filePath = modResults.path;\n\n        results = await nextMod!({\n          ...config,\n          modResults,\n          modRequest,\n        });\n        resolveModResults(results, modRequest.platform, modRequest.modName);\n        modResults = results.modResults;\n\n        await writeFile(filePath, modResults.contents);\n      } catch (error) {\n        console.error(`MainActivity mod error:`);\n        throw error;\n      }\n      return results;\n    },\n  });\n};\n\nfunction applyIOSBaseMods(config: ExportedConfig): ExportedConfig {\n  config = withExpoDangerousBaseMod(config, 'ios');\n  config = withAppDelegateBaseMod(config);\n  config = withIosInfoPlistBaseMod(config);\n  config = withExpoPlistBaseMod(config);\n  config = withXcodeProjectBaseMod(config);\n  config = withEntitlementsBaseMod(config);\n\n  return config;\n}\n\nconst withExpoDangerousBaseMod: ConfigPlugin<ModPlatform> = (config, platform) => {\n  // Used for scheduling when dangerous mods run.\n  return withInterceptedMod<JSONObject>(config, {\n    platform,\n    mod: 'dangerous',\n    skipEmptyMod: true,\n    async action({ modRequest: { nextMod, ...modRequest }, ...config }) {\n      const results = await nextMod!({\n        ...config,\n        modRequest,\n      });\n      resolveModResults(results, modRequest.platform, modRequest.modName);\n      return results;\n    },\n  });\n};\n\nconst withAppDelegateBaseMod: ConfigPlugin = config => {\n  return withInterceptedMod<AppDelegateProjectFile>(config, {\n    platform: 'ios',\n    mod: 'appDelegate',\n    skipEmptyMod: true,\n    async action({ modRequest: { nextMod, ...modRequest }, ...config }) {\n      let results: ExportedConfigWithProps<AppDelegateProjectFile> = {\n        ...config,\n        modRequest,\n      };\n\n      try {\n        let modResults = getAppDelegate(modRequest.projectRoot);\n        // Currently don't support changing the path or language\n        const filePath = modResults.path;\n\n        results = await nextMod!({\n          ...config,\n          modResults,\n          modRequest,\n        });\n        resolveModResults(results, modRequest.platform, modRequest.modName);\n        modResults = results.modResults;\n\n        await writeFile(filePath, modResults.contents);\n      } catch (error) {\n        console.error(`AppDelegate mod error:`);\n        throw error;\n      }\n      return results;\n    },\n  });\n};\n\nconst withExpoPlistBaseMod: ConfigPlugin = config => {\n  // Append a rule to supply Expo.plist data to mods on `mods.ios.expoPlist`\n  return withInterceptedMod<JSONObject>(config, {\n    platform: 'ios',\n    mod: 'expoPlist',\n    skipEmptyMod: true,\n    async action({ modRequest: { nextMod, ...modRequest }, ...config }) {\n      const supportingDirectory = path.join(\n        modRequest.platformProjectRoot,\n        modRequest.projectName!,\n        'Supporting'\n      );\n\n      let results: ExportedConfigWithProps<JSONObject> = {\n        ...config,\n        modRequest,\n      };\n      try {\n        const filePath = path.resolve(supportingDirectory, 'Expo.plist');\n        let modResults = plist.parse(await readFile(filePath, 'utf8'));\n\n        // TODO: Fix type\n        results = await nextMod!({\n          ...config,\n          modResults,\n          modRequest,\n        });\n        resolveModResults(results, modRequest.platform, modRequest.modName);\n        modResults = results.modResults;\n\n        await writeFile(filePath, plist.build(modResults));\n      } catch (error) {\n        WarningAggregator.addWarningIOS(\n          'updates',\n          'Expo.plist configuration could not be applied. You will need to create Expo.plist if it does not exist and add Updates configuration manually.',\n          'https://docs.expo.io/bare/updating-your-app/#configuration-options'\n        );\n      }\n      return results;\n    },\n  });\n};\n\nconst withXcodeProjectBaseMod: ConfigPlugin = config => {\n  // Append a rule to supply .xcodeproj data to mods on `mods.ios.xcodeproj`\n  return withInterceptedMod<XcodeProject>(config, {\n    platform: 'ios',\n    mod: 'xcodeproj',\n    skipEmptyMod: true,\n    async action({ modRequest: { nextMod, ...modRequest }, ...config }) {\n      const modResults = getPbxproj(modRequest.projectRoot);\n      // TODO: Fix type\n      const results = await nextMod!({\n        ...config,\n        modResults,\n        modRequest,\n      });\n      resolveModResults(results, modRequest.platform, modRequest.modName);\n      const resultData = results.modResults;\n      await writeFile(resultData.filepath, resultData.writeSync());\n      return results;\n    },\n  });\n};\n\nconst withIosInfoPlistBaseMod: ConfigPlugin = config => {\n  // Append a rule to supply Info.plist data to mods on `mods.ios.infoPlist`\n  return withInterceptedMod<InfoPlist>(config, {\n    platform: 'ios',\n    mod: 'infoPlist',\n    skipEmptyMod: true,\n    async action({ modRequest: { nextMod, ...modRequest }, ...config }) {\n      const filePath = getInfoPlistPath(modRequest.projectRoot);\n\n      let results: ExportedConfigWithProps<JSONObject> = {\n        ...config,\n        modRequest,\n      };\n\n      // Apply all of the Info.plist values to the expo.ios.infoPlist object\n      // TODO: Remove this in favor of just overwriting the Info.plist with the Expo object. This will enable people to actually remove values.\n      if (!config.ios) {\n        config.ios = {};\n      }\n      if (!config.ios.infoPlist) {\n        config.ios.infoPlist = {};\n      }\n\n      const contents = await readFile(filePath, 'utf8');\n      assert(contents, 'Info.plist is empty');\n      let data = plist.parse(contents);\n\n      config.ios.infoPlist = {\n        ...(data || {}),\n        ...config.ios.infoPlist,\n      };\n      // TODO: Fix type\n      results = await nextMod!({\n        ...config,\n        modRequest,\n        modResults: config.ios.infoPlist as InfoPlist,\n      });\n      resolveModResults(results, modRequest.platform, modRequest.modName);\n      data = results.modResults;\n\n      await writeFile(filePath, plist.build(data));\n\n      return results;\n    },\n  });\n};\n\nconst withEntitlementsBaseMod: ConfigPlugin = config => {\n  // Append a rule to supply .entitlements data to mods on `mods.ios.entitlements`\n  return withInterceptedMod<JSONObject>(config, {\n    platform: 'ios',\n    mod: 'entitlements',\n    skipEmptyMod: true,\n    async action({ modRequest: { nextMod, ...modRequest }, ...config }) {\n      const entitlementsPath = getEntitlementsPath(modRequest.projectRoot);\n\n      let results: ExportedConfigWithProps<JSONObject> = {\n        ...config,\n        modRequest,\n      };\n\n      try {\n        const data = plist.parse(await readFile(entitlementsPath, 'utf8'));\n        // Apply all of the .entitlements values to the expo.ios.entitlements object\n        // TODO: Remove this in favor of just overwriting the .entitlements with the Expo object. This will enable people to actually remove values.\n        if (!config.ios) {\n          config.ios = {};\n        }\n        if (!config.ios.entitlements) {\n          config.ios.entitlements = {};\n        }\n\n        config.ios.entitlements = {\n          ...(data || {}),\n          ...config.ios.entitlements,\n        };\n\n        // TODO: Fix type\n        results = await nextMod!({\n          ...config,\n          modRequest,\n          modResults: config.ios.entitlements as JSONObject,\n        });\n        resolveModResults(results, modRequest.platform, modRequest.modName);\n        await writeFile(entitlementsPath, plist.build(results.modResults));\n      } catch (error) {\n        console.error(`${path.basename(entitlementsPath)} mod error:`);\n        throw error;\n      }\n      return results;\n    },\n  });\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}