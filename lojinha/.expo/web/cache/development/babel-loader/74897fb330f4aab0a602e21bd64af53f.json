{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar image_utils_1 = require(\"@expo/image-utils\");\n\nvar fs = __importStar(require(\"fs-extra\"));\n\nvar path_1 = require(\"path\");\n\nvar core_plugins_1 = require(\"../plugins/core-plugins\");\n\nvar WarningAggregator = __importStar(require(\"../utils/warnings\"));\n\nvar AssetContents_1 = require(\"./AssetContents\");\n\nvar Xcodeproj_1 = require(\"./utils/Xcodeproj\");\n\nexports.withIcons = function (config) {\n  return core_plugins_1.withDangerousMod(config, ['ios', function _callee(config) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(setIconsAsync(config, config.modRequest.projectRoot));\n\n          case 2:\n            return _context.abrupt(\"return\", config);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }]);\n};\n\nvar IMAGE_CACHE_NAME = 'icons';\nvar IMAGESET_PATH = 'Images.xcassets/AppIcon.appiconset';\nexports.ICON_CONTENTS = [{\n  idiom: 'iphone',\n  sizes: [{\n    size: 20,\n    scales: [2, 3]\n  }, {\n    size: 29,\n    scales: [1, 2, 3]\n  }, {\n    size: 40,\n    scales: [2, 3]\n  }, {\n    size: 60,\n    scales: [2, 3]\n  }]\n}, {\n  idiom: 'ipad',\n  sizes: [{\n    size: 20,\n    scales: [1, 2]\n  }, {\n    size: 29,\n    scales: [1, 2]\n  }, {\n    size: 40,\n    scales: [1, 2]\n  }, {\n    size: 76,\n    scales: [1, 2]\n  }, {\n    size: 83.5,\n    scales: [2]\n  }]\n}, {\n  idiom: 'ios-marketing',\n  sizes: [{\n    size: 1024,\n    scales: [1]\n  }]\n}];\n\nfunction getIcons(config) {\n  var _a;\n\n  return ((_a = config.ios) === null || _a === void 0 ? void 0 : _a.icon) || config.icon || null;\n}\n\nexports.getIcons = getIcons;\n\nfunction setIconsAsync(config, projectRoot) {\n  var icon, iosNamedProjectRoot, imagesJson, generatedIcons, _iterator, _step, platform, isMarketing, _iterator2, _step2, _ref, size, scales, _iterator3, _step3, scale, filename, iconSizePx, _await$image_utils_1$, source, assetPath;\n\n  return _regeneratorRuntime.async(function setIconsAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          icon = getIcons(config);\n\n          if (icon) {\n            _context2.next = 4;\n            break;\n          }\n\n          WarningAggregator.addWarningIOS('icon', 'This is the image that your app uses on your home screen, you will need to configure it manually.');\n          return _context2.abrupt(\"return\");\n\n        case 4:\n          iosNamedProjectRoot = getIosNamedProjectPath(projectRoot);\n          _context2.next = 7;\n          return _regeneratorRuntime.awrap(fs.ensureDir(path_1.join(iosNamedProjectRoot, IMAGESET_PATH)));\n\n        case 7:\n          imagesJson = [];\n          generatedIcons = {};\n          _iterator = _createForOfIteratorHelperLoose(exports.ICON_CONTENTS);\n\n        case 10:\n          if ((_step = _iterator()).done) {\n            _context2.next = 39;\n            break;\n          }\n\n          platform = _step.value;\n          isMarketing = platform.idiom === 'ios-marketing';\n          _iterator2 = _createForOfIteratorHelperLoose(platform.sizes);\n\n        case 14:\n          if ((_step2 = _iterator2()).done) {\n            _context2.next = 37;\n            break;\n          }\n\n          _ref = _step2.value;\n          size = _ref.size;\n          scales = _ref.scales;\n          _iterator3 = _createForOfIteratorHelperLoose(scales);\n\n        case 19:\n          if ((_step3 = _iterator3()).done) {\n            _context2.next = 35;\n            break;\n          }\n\n          scale = _step3.value;\n          filename = isMarketing ? 'ItunesArtwork@2x.png' : getAppleIconName(size, scale);\n\n          if (filename in generatedIcons) {\n            _context2.next = 32;\n            break;\n          }\n\n          iconSizePx = size * scale;\n          _context2.next = 26;\n          return _regeneratorRuntime.awrap(image_utils_1.generateImageAsync({\n            projectRoot: projectRoot,\n            cacheType: IMAGE_CACHE_NAME\n          }, {\n            src: icon,\n            name: filename,\n            width: iconSizePx,\n            height: iconSizePx,\n            removeTransparency: true,\n            resizeMode: 'cover',\n            backgroundColor: '#ffffff'\n          }));\n\n        case 26:\n          _await$image_utils_1$ = _context2.sent;\n          source = _await$image_utils_1$.source;\n          assetPath = path_1.join(iosNamedProjectRoot, IMAGESET_PATH, filename);\n          _context2.next = 31;\n          return _regeneratorRuntime.awrap(fs.writeFile(assetPath, source));\n\n        case 31:\n          generatedIcons[filename] = true;\n\n        case 32:\n          imagesJson.push({\n            idiom: platform.idiom,\n            size: size + \"x\" + size,\n            scale: scale + \"x\",\n            filename: filename\n          });\n\n        case 33:\n          _context2.next = 19;\n          break;\n\n        case 35:\n          _context2.next = 14;\n          break;\n\n        case 37:\n          _context2.next = 10;\n          break;\n\n        case 39:\n          _context2.next = 41;\n          return _regeneratorRuntime.awrap(AssetContents_1.writeContentsJsonAsync(path_1.join(iosNamedProjectRoot, IMAGESET_PATH), {\n            images: imagesJson\n          }));\n\n        case 41:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.setIconsAsync = setIconsAsync;\n\nfunction getIosNamedProjectPath(projectRoot) {\n  var projectName = Xcodeproj_1.getProjectName(projectRoot);\n  return path_1.join(projectRoot, 'ios', projectName);\n}\n\nfunction getAppleIconName(size, scale) {\n  return \"App-Icon-\" + size + \"x\" + size + \"@\" + scale + \"x.png\";\n}","map":{"version":3,"sources":["../../src/ios/Icons.ts"],"names":[],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport { generateImageAsync } from '@expo/image-utils';\nimport * as fs from 'fs-extra';\nimport { join } from 'path';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withDangerousMod } from '../plugins/core-plugins';\nimport * as WarningAggregator from '../utils/warnings';\nimport { ContentsJson, ContentsJsonImageIdiom, writeContentsJsonAsync } from './AssetContents';\nimport { getProjectName } from './utils/Xcodeproj';\n\nexport const withIcons: ConfigPlugin = config => {\n  return withDangerousMod(config, [\n    'ios',\n    async config => {\n      await setIconsAsync(config, config.modRequest.projectRoot);\n      return config;\n    },\n  ]);\n};\n\nconst IMAGE_CACHE_NAME = 'icons';\nconst IMAGESET_PATH = 'Images.xcassets/AppIcon.appiconset';\n\n// Hard-coding seemed like the clearest and safest way to implement the sizes.\nexport const ICON_CONTENTS: {\n  idiom: ContentsJsonImageIdiom;\n  sizes: { size: number; scales: (1 | 2 | 3)[] }[];\n}[] = [\n  {\n    idiom: 'iphone',\n    sizes: [\n      {\n        size: 20,\n        scales: [2, 3],\n      },\n      {\n        size: 29,\n        scales: [1, 2, 3],\n      },\n      {\n        size: 40,\n        scales: [2, 3],\n      },\n      {\n        size: 60,\n        scales: [2, 3],\n      },\n      // TODO: 76x76@2x seems unused now\n      // {\n      //   size: 76,\n      //   scales: [2],\n      // },\n    ],\n  },\n  {\n    idiom: 'ipad',\n    sizes: [\n      {\n        size: 20,\n        scales: [1, 2],\n      },\n      {\n        size: 29,\n        scales: [1, 2],\n      },\n      {\n        size: 40,\n        scales: [1, 2],\n      },\n      {\n        size: 76,\n        scales: [1, 2],\n      },\n      {\n        size: 83.5,\n        scales: [2],\n      },\n    ],\n  },\n  {\n    idiom: 'ios-marketing',\n    sizes: [\n      {\n        size: 1024,\n        scales: [1],\n      },\n    ],\n  },\n];\n\nexport function getIcons(config: Pick<ExpoConfig, 'icon' | 'ios'>): string | null {\n  // No support for empty strings.\n  return config.ios?.icon || config.icon || null;\n}\n\nexport async function setIconsAsync(config: ExpoConfig, projectRoot: string) {\n  const icon = getIcons(config);\n  if (!icon) {\n    WarningAggregator.addWarningIOS(\n      'icon',\n      'This is the image that your app uses on your home screen, you will need to configure it manually.'\n    );\n    return;\n  }\n\n  // Something like projectRoot/ios/MyApp/\n  const iosNamedProjectRoot = getIosNamedProjectPath(projectRoot);\n\n  // Ensure the Images.xcassets/AppIcon.appiconset path exists\n  await fs.ensureDir(join(iosNamedProjectRoot, IMAGESET_PATH));\n\n  // Store the image JSON data for assigning via the Contents.json\n  const imagesJson: ContentsJson['images'] = [];\n\n  // keep track of icons that have been generated so we can reuse them in the Contents.json\n  const generatedIcons: Record<string, boolean> = {};\n\n  for (const platform of ICON_CONTENTS) {\n    const isMarketing = platform.idiom === 'ios-marketing';\n    for (const { size, scales } of platform.sizes) {\n      for (const scale of scales) {\n        // The marketing icon is special because it makes no sense.\n        const filename = isMarketing ? 'ItunesArtwork@2x.png' : getAppleIconName(size, scale);\n        // Only create an image that hasn't already been generated.\n        if (!(filename in generatedIcons)) {\n          const iconSizePx = size * scale;\n\n          // Using this method will cache the images in `.expo` based on the properties used to generate them.\n          // this method also supports remote URLs and using the global sharp instance.\n          const { source } = await generateImageAsync(\n            { projectRoot, cacheType: IMAGE_CACHE_NAME },\n            {\n              src: icon,\n              name: filename,\n              width: iconSizePx,\n              height: iconSizePx,\n              removeTransparency: true,\n              // The icon should be square, but if it's not then it will be cropped.\n              resizeMode: 'cover',\n              // Force the background color to solid white to prevent any transparency.\n              // TODO: Maybe use a more adaptive option based on the icon color?\n              backgroundColor: '#ffffff',\n            }\n          );\n          // Write image buffer to the file system.\n          const assetPath = join(iosNamedProjectRoot, IMAGESET_PATH, filename);\n          await fs.writeFile(assetPath, source);\n          // Save a reference to the generated image so we don't create a duplicate.\n          generatedIcons[filename] = true;\n        }\n        imagesJson.push({\n          idiom: platform.idiom,\n          size: `${size}x${size}`,\n          // @ts-ignore: template types not supported in TS yet\n          scale: `${scale}x`,\n          filename,\n        });\n      }\n    }\n  }\n\n  // Finally, write the Config.json\n  await writeContentsJsonAsync(join(iosNamedProjectRoot, IMAGESET_PATH), { images: imagesJson });\n}\n\n/**\n * Return the project's named iOS path: ios/MyProject/\n *\n * @param projectRoot Expo project root path.\n */\nfunction getIosNamedProjectPath(projectRoot: string): string {\n  const projectName = getProjectName(projectRoot);\n  return join(projectRoot, 'ios', projectName);\n}\n\nfunction getAppleIconName(size: number, scale: number): string {\n  return `App-Icon-${size}x${size}@${scale}x.png`;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}