{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _semver() {\n  var data = _interopRequireDefault(require(\"semver\"));\n\n  _semver = function _semver() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _execa() {\n  var data = _interopRequireDefault(require(\"execa\"));\n\n  _execa = function _execa() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nvar PackageManager = _interopRequireWildcard(require(\"../../tools/packageManager\"));\n\nvar _installPods = _interopRequireDefault(require(\"../../tools/installPods\"));\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar webDiffUrl = 'https://react-native-community.github.io/upgrade-helper';\nvar rawDiffUrl = 'https://raw.githubusercontent.com/react-native-community/rn-diff-purge/diffs/diffs';\n\nvar isConnected = function isConnected(output) {\n  return !output.includes('the host is inaccessible');\n};\n\nvar checkForErrors = function checkForErrors(output) {\n  if (!output) {\n    return;\n  }\n\n  if (!isConnected(output)) {\n    throw new (_cliTools().CLIError)('Upgrade failed. You do not seem to have an internet connection.');\n  }\n\n  if (output.includes('npm ERR')) {\n    throw new (_cliTools().CLIError)(\"Upgrade failed with the following errors:\\n\" + output);\n  }\n\n  if (output.includes('npm WARN')) {\n    _cliTools().logger.warn(output);\n  }\n};\n\nvar getLatestRNVersion = function getLatestRNVersion() {\n  var _await, stdout, stderr;\n\n  return _regeneratorRuntime.async(function getLatestRNVersion$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _cliTools().logger.info('No version passed. Fetching latest...');\n\n          _context.next = 3;\n          return _regeneratorRuntime.awrap((0, _execa().default)('npm', ['info', 'react-native', 'version']));\n\n        case 3:\n          _await = _context.sent;\n          stdout = _await.stdout;\n          stderr = _await.stderr;\n          checkForErrors(stderr);\n          return _context.abrupt(\"return\", stdout);\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar getRNPeerDeps = function getRNPeerDeps(version) {\n  var _await2, stdout, stderr;\n\n  return _regeneratorRuntime.async(function getRNPeerDeps$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap((0, _execa().default)('npm', ['info', \"react-native@\" + version, 'peerDependencies', '--json']));\n\n        case 2:\n          _await2 = _context2.sent;\n          stdout = _await2.stdout;\n          stderr = _await2.stderr;\n          checkForErrors(stderr);\n          return _context2.abrupt(\"return\", JSON.parse(stdout));\n\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar getPatch = function getPatch(currentVersion, newVersion, config) {\n  var patch, _await3, data, patchWithRenamedProjects;\n\n  return _regeneratorRuntime.async(function getPatch$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _cliTools().logger.info(\"Fetching diff between v\" + currentVersion + \" and v\" + newVersion + \"...\");\n\n          _context3.prev = 1;\n          _context3.next = 4;\n          return _regeneratorRuntime.awrap((0, _cliTools().fetch)(rawDiffUrl + \"/\" + currentVersion + \"..\" + newVersion + \".diff\"));\n\n        case 4:\n          _await3 = _context3.sent;\n          data = _await3.data;\n          patch = data;\n          _context3.next = 15;\n          break;\n\n        case 9:\n          _context3.prev = 9;\n          _context3.t0 = _context3[\"catch\"](1);\n\n          _cliTools().logger.error(_context3.t0.message);\n\n          _cliTools().logger.error(\"Failed to fetch diff for react-native@\" + newVersion + \". Maybe it's not released yet?\");\n\n          _cliTools().logger.info(\"For available releases to diff see: \" + _chalk().default.underline.dim('https://github.com/react-native-community/rn-diff-purge#diff-table-full-table-here'));\n\n          return _context3.abrupt(\"return\", null);\n\n        case 15:\n          patchWithRenamedProjects = patch;\n          Object.keys(config.project).forEach(function (platform) {\n            if (!config.project[platform]) {\n              return;\n            }\n\n            if (platform === 'ios') {\n              patchWithRenamedProjects = patchWithRenamedProjects.replace(new RegExp('RnDiffApp', 'g'), config.project[platform].projectName.replace('.xcodeproj', ''));\n            } else if (platform === 'android') {\n              patchWithRenamedProjects = patchWithRenamedProjects.replace(new RegExp('com\\\\.rndiffapp', 'g'), config.project[platform].packageName).replace(new RegExp('com\\\\.rndiffapp'.split('.').join('/'), 'g'), config.project[platform].packageName.split('.').join('/'));\n            } else {\n              _cliTools().logger.warn(\"Unsupported platform: \\\"\" + platform + \"\\\". `upgrade` only supports iOS and Android.\");\n            }\n          });\n          return _context3.abrupt(\"return\", patchWithRenamedProjects);\n\n        case 18:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[1, 9]], Promise);\n};\n\nvar getVersionToUpgradeTo = function getVersionToUpgradeTo(argv, currentVersion, projectDir) {\n  var argVersion, semverCoercedVersion, newVersion, _require, version;\n\n  return _regeneratorRuntime.async(function getVersionToUpgradeTo$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          argVersion = argv[0];\n          semverCoercedVersion = _semver().default.coerce(argVersion);\n\n          if (!argVersion) {\n            _context4.next = 6;\n            break;\n          }\n\n          _context4.t0 = _semver().default.valid(argVersion) || (semverCoercedVersion ? semverCoercedVersion.version : null);\n          _context4.next = 9;\n          break;\n\n        case 6:\n          _context4.next = 8;\n          return _regeneratorRuntime.awrap(getLatestRNVersion());\n\n        case 8:\n          _context4.t0 = _context4.sent;\n\n        case 9:\n          newVersion = _context4.t0;\n\n          if (newVersion) {\n            _context4.next = 13;\n            break;\n          }\n\n          _cliTools().logger.error(\"Provided version \\\"\" + argv[0] + \"\\\" is not allowed. Please pass a valid semver version\");\n\n          return _context4.abrupt(\"return\", null);\n\n        case 13:\n          if (!_semver().default.gt(currentVersion, newVersion)) {\n            _context4.next = 16;\n            break;\n          }\n\n          _cliTools().logger.error(\"Trying to upgrade from newer version \\\"\" + currentVersion + \"\\\" to older \\\"\" + newVersion + \"\\\"\");\n\n          return _context4.abrupt(\"return\", null);\n\n        case 16:\n          if (!_semver().default.eq(currentVersion, newVersion)) {\n            _context4.next = 23;\n            break;\n          }\n\n          _require = require(_path().default.join(projectDir, 'package.json')), version = _require.dependencies['react-native'];\n\n          if (!_semver().default.satisfies(newVersion, version)) {\n            _context4.next = 21;\n            break;\n          }\n\n          _cliTools().logger.warn(\"Specified version \\\"\" + newVersion + \"\\\" is already installed in node_modules and it satisfies \\\"\" + version + \"\\\" semver range. No need to upgrade\");\n\n          return _context4.abrupt(\"return\", null);\n\n        case 21:\n          _cliTools().logger.error(\"Dependency mismatch. Specified version \\\"\" + newVersion + \"\\\" is already installed in node_modules and it doesn't satisfy \\\"\" + version + \"\\\" semver range of your \\\"react-native\\\" dependency. Please re-install your dependencies\");\n\n          return _context4.abrupt(\"return\", null);\n\n        case 23:\n          return _context4.abrupt(\"return\", newVersion);\n\n        case 24:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar installDeps = function installDeps(root, newVersion) {\n  var peerDeps, deps;\n  return _regeneratorRuntime.async(function installDeps$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _cliTools().logger.info(\"Installing \\\"react-native@\" + newVersion + \"\\\" and its peer dependencies...\");\n\n          _context5.next = 3;\n          return _regeneratorRuntime.awrap(getRNPeerDeps(newVersion));\n\n        case 3:\n          peerDeps = _context5.sent;\n          deps = [\"react-native@\" + newVersion].concat(_toConsumableArray(Object.keys(peerDeps).map(function (module) {\n            return module + \"@\" + peerDeps[module];\n          })));\n          _context5.next = 7;\n          return _regeneratorRuntime.awrap(PackageManager.install(deps, {\n            silent: true,\n            root: root\n          }));\n\n        case 7:\n          _context5.next = 9;\n          return _regeneratorRuntime.awrap((0, _execa().default)('git', ['add', 'package.json']));\n\n        case 9:\n          _context5.prev = 9;\n          _context5.next = 12;\n          return _regeneratorRuntime.awrap((0, _execa().default)('git', ['add', 'yarn.lock']));\n\n        case 12:\n          _context5.next = 16;\n          break;\n\n        case 14:\n          _context5.prev = 14;\n          _context5.t0 = _context5[\"catch\"](9);\n\n        case 16:\n          _context5.prev = 16;\n          _context5.next = 19;\n          return _regeneratorRuntime.awrap((0, _execa().default)('git', ['add', 'package-lock.json']));\n\n        case 19:\n          _context5.next = 23;\n          break;\n\n        case 21:\n          _context5.prev = 21;\n          _context5.t1 = _context5[\"catch\"](16);\n\n        case 23:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, [[9, 14], [16, 21]], Promise);\n};\n\nvar installCocoaPodsDeps = function installCocoaPodsDeps(projectDir) {\n  return _regeneratorRuntime.async(function installCocoaPodsDeps$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          if (!(process.platform === 'darwin')) {\n            _context6.next = 11;\n            break;\n          }\n\n          _context6.prev = 1;\n\n          _cliTools().logger.info(\"Installing CocoaPods dependencies \" + _chalk().default.dim('(this may take a few minutes)'));\n\n          _context6.next = 5;\n          return _regeneratorRuntime.awrap((0, _installPods.default)({\n            projectName: projectDir.split('/').pop() || ''\n          }));\n\n        case 5:\n          _context6.next = 11;\n          break;\n\n        case 7:\n          _context6.prev = 7;\n          _context6.t0 = _context6[\"catch\"](1);\n\n          if (_context6.t0.stderr) {\n            _cliTools().logger.debug(\"\\\"pod install\\\" or \\\"pod repo update\\\" failed. Error output:\\n\" + _context6.t0.stderr);\n          }\n\n          _cliTools().logger.error('Installation of CocoaPods dependencies failed. Try to install them manually by running \"pod install\" in \"ios\" directory after finishing upgrade');\n\n        case 11:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, [[1, 7]], Promise);\n};\n\nvar applyPatch = function applyPatch(currentVersion, newVersion, tmpPatchFile) {\n  var defaultExcludes, filesThatDontExist, filesThatFailedToApply, _await4, relativePathFromRoot, excludes, errorLines, _excludes;\n\n  return _regeneratorRuntime.async(function applyPatch$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          defaultExcludes = ['package.json'];\n          filesThatDontExist = [];\n          filesThatFailedToApply = [];\n          _context7.next = 5;\n          return _regeneratorRuntime.awrap((0, _execa().default)('git', ['rev-parse', '--show-prefix']));\n\n        case 5:\n          _await4 = _context7.sent;\n          relativePathFromRoot = _await4.stdout;\n          _context7.prev = 7;\n          _context7.prev = 8;\n          excludes = defaultExcludes.map(function (e) {\n            return \"--exclude=\" + _path().default.join(relativePathFromRoot, e);\n          });\n          _context7.next = 12;\n          return _regeneratorRuntime.awrap((0, _execa().default)('git', ['apply', '--binary', '--check', tmpPatchFile].concat(_toConsumableArray(excludes), ['-p2', '--3way', \"--directory=\" + relativePathFromRoot])));\n\n        case 12:\n          _cliTools().logger.info('Applying diff...');\n\n          _context7.next = 23;\n          break;\n\n        case 15:\n          _context7.prev = 15;\n          _context7.t0 = _context7[\"catch\"](8);\n          errorLines = _context7.t0.stderr.split('\\n');\n          filesThatDontExist = _toConsumableArray(errorLines.filter(function (x) {\n            return x.includes('does not exist in index');\n          }).map(function (x) {\n            return x.replace(/^error: (.*): does not exist in index$/, '$1');\n          })).filter(Boolean);\n          filesThatFailedToApply = errorLines.filter(function (x) {\n            return x.includes('patch does not apply');\n          }).map(function (x) {\n            return x.replace(/^error: (.*): patch does not apply$/, '$1');\n          }).filter(Boolean);\n\n          _cliTools().logger.info('Applying diff...');\n\n          _cliTools().logger.warn(\"Excluding files that exist in the template, but not in your project:\\n\" + filesThatDontExist.map(function (file) {\n            return \"  - \" + _chalk().default.bold(file);\n          }).join('\\n'));\n\n          if (filesThatFailedToApply.length) {\n            _cliTools().logger.error(\"Excluding files that failed to apply the diff:\\n\" + filesThatFailedToApply.map(function (file) {\n              return \"  - \" + _chalk().default.bold(file);\n            }).join('\\n') + \"\\nPlease make sure to check the actual changes after the upgrade command is finished.\\nYou can find them in our Upgrade Helper web app: \" + _chalk().default.underline.dim(webDiffUrl + \"/?from=\" + currentVersion + \"&to=\" + newVersion));\n          }\n\n        case 23:\n          _context7.prev = 23;\n          _excludes = [].concat(defaultExcludes, _toConsumableArray(filesThatDontExist), _toConsumableArray(filesThatFailedToApply)).map(function (e) {\n            return \"--exclude=\" + _path().default.join(relativePathFromRoot, e);\n          });\n          _context7.next = 27;\n          return _regeneratorRuntime.awrap((0, _execa().default)('git', ['apply', tmpPatchFile].concat(_toConsumableArray(_excludes), ['-p2', '--3way', \"--directory=\" + relativePathFromRoot])));\n\n        case 27:\n          return _context7.finish(23);\n\n        case 28:\n          _context7.next = 35;\n          break;\n\n        case 30:\n          _context7.prev = 30;\n          _context7.t1 = _context7[\"catch\"](7);\n\n          if (_context7.t1.stderr) {\n            _cliTools().logger.debug(\"\\\"git apply\\\" failed. Error output:\\n\" + _context7.t1.stderr);\n          }\n\n          _cliTools().logger.error('Automatically applying diff failed. We did our best to automatically upgrade as many files as possible');\n\n          return _context7.abrupt(\"return\", false);\n\n        case 35:\n          return _context7.abrupt(\"return\", true);\n\n        case 36:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, [[7, 30], [8, 15, 23, 28]], Promise);\n};\n\nfunction upgrade(argv, ctx) {\n  var tmpPatchFile, projectDir, _require2, currentVersion, newVersion, patch, patchSuccess, _await5, stdout;\n\n  return _regeneratorRuntime.async(function upgrade$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          tmpPatchFile = 'tmp-upgrade-rn.patch';\n          projectDir = ctx.root;\n          _require2 = require(_path().default.join(projectDir, 'node_modules/react-native/package.json')), currentVersion = _require2.version;\n          _context8.next = 5;\n          return _regeneratorRuntime.awrap(getVersionToUpgradeTo(argv, currentVersion, projectDir));\n\n        case 5:\n          newVersion = _context8.sent;\n\n          if (newVersion) {\n            _context8.next = 8;\n            break;\n          }\n\n          return _context8.abrupt(\"return\");\n\n        case 8:\n          _context8.next = 10;\n          return _regeneratorRuntime.awrap(getPatch(currentVersion, newVersion, ctx));\n\n        case 10:\n          patch = _context8.sent;\n\n          if (!(patch === null)) {\n            _context8.next = 13;\n            break;\n          }\n\n          return _context8.abrupt(\"return\");\n\n        case 13:\n          if (!(patch === '')) {\n            _context8.next = 21;\n            break;\n          }\n\n          _cliTools().logger.info('Diff has no changes to apply, proceeding further');\n\n          _context8.next = 17;\n          return _regeneratorRuntime.awrap(installDeps(projectDir, newVersion));\n\n        case 17:\n          _context8.next = 19;\n          return _regeneratorRuntime.awrap(installCocoaPodsDeps(projectDir));\n\n        case 19:\n          _cliTools().logger.success(\"Upgraded React Native to v\" + newVersion + \" \\uD83C\\uDF89. Now you can review and commit the changes\");\n\n          return _context8.abrupt(\"return\");\n\n        case 21:\n          _context8.prev = 21;\n\n          _fs().default.writeFileSync(tmpPatchFile, patch);\n\n          _context8.next = 25;\n          return _regeneratorRuntime.awrap(applyPatch(currentVersion, newVersion, tmpPatchFile));\n\n        case 25:\n          patchSuccess = _context8.sent;\n          _context8.next = 31;\n          break;\n\n        case 28:\n          _context8.prev = 28;\n          _context8.t0 = _context8[\"catch\"](21);\n          throw new Error(_context8.t0.stderr || _context8.t0);\n\n        case 31:\n          _context8.prev = 31;\n\n          try {\n            _fs().default.unlinkSync(tmpPatchFile);\n          } catch (e) {}\n\n          _context8.next = 35;\n          return _regeneratorRuntime.awrap((0, _execa().default)('git', ['status', '-s']));\n\n        case 35:\n          _await5 = _context8.sent;\n          stdout = _await5.stdout;\n\n          if (patchSuccess) {\n            _context8.next = 50;\n            break;\n          }\n\n          if (!stdout) {\n            _context8.next = 47;\n            break;\n          }\n\n          _cliTools().logger.warn('Continuing after failure. Some of the files are upgraded but you will need to deal with conflicts manually');\n\n          _context8.next = 42;\n          return _regeneratorRuntime.awrap(installDeps(projectDir, newVersion));\n\n        case 42:\n          _cliTools().logger.info('Running \"git status\" to check what changed...');\n\n          _context8.next = 45;\n          return _regeneratorRuntime.awrap((0, _execa().default)('git', ['status'], {\n            stdio: 'inherit'\n          }));\n\n        case 45:\n          _context8.next = 48;\n          break;\n\n        case 47:\n          _cliTools().logger.error('Patch failed to apply for unknown reason. Please fall back to manual way of upgrading');\n\n        case 48:\n          _context8.next = 57;\n          break;\n\n        case 50:\n          _context8.next = 52;\n          return _regeneratorRuntime.awrap(installDeps(projectDir, newVersion));\n\n        case 52:\n          _context8.next = 54;\n          return _regeneratorRuntime.awrap(installCocoaPodsDeps(projectDir));\n\n        case 54:\n          _cliTools().logger.info('Running \"git status\" to check what changed...');\n\n          _context8.next = 57;\n          return _regeneratorRuntime.awrap((0, _execa().default)('git', ['status'], {\n            stdio: 'inherit'\n          }));\n\n        case 57:\n          if (patchSuccess) {\n            _context8.next = 62;\n            break;\n          }\n\n          if (stdout) {\n            _cliTools().logger.warn('Please run \"git diff\" to review the conflicts and resolve them');\n          }\n\n          if (process.platform === 'darwin') {\n            _cliTools().logger.warn('After resolving conflicts don\\'t forget to run \"pod install\" inside \"ios\" directory');\n          }\n\n          _cliTools().logger.info(\"You may find these resources helpful:\\n\\u2022 Release notes: \" + _chalk().default.underline.dim(\"https://github.com/facebook/react-native/releases/tag/v\" + newVersion) + \"\\n\\u2022 Manual Upgrade Helper: \" + _chalk().default.underline.dim(webDiffUrl + \"/?from=\" + currentVersion + \"&to=\" + newVersion) + \"\\n\\u2022 Git diff: \" + _chalk().default.underline.dim(rawDiffUrl + \"/\" + currentVersion + \"..\" + newVersion + \".diff\"));\n\n          throw new (_cliTools().CLIError)('Upgrade failed. Please see the messages above for details');\n\n        case 62:\n          return _context8.finish(31);\n\n        case 63:\n          _cliTools().logger.success(\"Upgraded React Native to v\" + newVersion + \" \\uD83C\\uDF89. Now you can review and commit the changes\");\n\n        case 64:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, null, null, [[21, 28, 31, 63]], Promise);\n}\n\nvar upgradeCommand = {\n  name: 'upgrade [version]',\n  description: \"Upgrade your app's template files to the specified or latest npm version using `rn-diff-purge` project. Only valid semver versions are allowed.\",\n  func: upgrade\n};\nvar _default = upgradeCommand;\nexports.default = _default;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli/build/commands/upgrade/upgrade.js"],"names":["Object","defineProperty","exports","value","default","_path","data","_interopRequireDefault","require","_fs","_chalk","_semver","_execa","_cliTools","PackageManager","_interopRequireWildcard","_installPods","_getRequireWildcardCache","WeakMap","cache","obj","__esModule","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","webDiffUrl","rawDiffUrl","isConnected","output","includes","checkForErrors","CLIError","logger","warn","getLatestRNVersion","info","stdout","stderr","getRNPeerDeps","version","JSON","parse","getPatch","currentVersion","newVersion","config","fetch","patch","error","message","underline","dim","patchWithRenamedProjects","keys","project","forEach","platform","replace","RegExp","projectName","packageName","split","join","getVersionToUpgradeTo","argv","projectDir","argVersion","semverCoercedVersion","coerce","valid","gt","eq","dependencies","satisfies","installDeps","root","peerDeps","deps","map","module","install","silent","installCocoaPodsDeps","process","pop","debug","applyPatch","tmpPatchFile","defaultExcludes","filesThatDontExist","filesThatFailedToApply","relativePathFromRoot","excludes","e","errorLines","filter","x","Boolean","file","bold","length","upgrade","ctx","success","writeFileSync","patchSuccess","Error","unlinkSync","stdio","upgradeCommand","name","description","func","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _path() {\n  const data = _interopRequireDefault(require(\"path\"));\n\n  _path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _fs() {\n  const data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require(\"chalk\"));\n\n  _chalk = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _semver() {\n  const data = _interopRequireDefault(require(\"semver\"));\n\n  _semver = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _execa() {\n  const data = _interopRequireDefault(require(\"execa\"));\n\n  _execa = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar PackageManager = _interopRequireWildcard(require(\"../../tools/packageManager\"));\n\nvar _installPods = _interopRequireDefault(require(\"../../tools/installPods\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// https://react-native-community.github.io/upgrade-helper/?from=0.59.10&to=0.60.0-rc.3\nconst webDiffUrl = 'https://react-native-community.github.io/upgrade-helper';\nconst rawDiffUrl = 'https://raw.githubusercontent.com/react-native-community/rn-diff-purge/diffs/diffs';\n\nconst isConnected = output => {\n  // there is no reliable way of checking for internet connectivity, so we should just\n  // read the output from npm (to check for connectivity errors) which is faster and relatively more reliable.\n  return !output.includes('the host is inaccessible');\n};\n\nconst checkForErrors = output => {\n  if (!output) {\n    return;\n  }\n\n  if (!isConnected(output)) {\n    throw new (_cliTools().CLIError)('Upgrade failed. You do not seem to have an internet connection.');\n  }\n\n  if (output.includes('npm ERR')) {\n    throw new (_cliTools().CLIError)(`Upgrade failed with the following errors:\\n${output}`);\n  }\n\n  if (output.includes('npm WARN')) {\n    _cliTools().logger.warn(output);\n  }\n};\n\nconst getLatestRNVersion = async () => {\n  _cliTools().logger.info('No version passed. Fetching latest...');\n\n  const {\n    stdout,\n    stderr\n  } = await (0, _execa().default)('npm', ['info', 'react-native', 'version']);\n  checkForErrors(stderr);\n  return stdout;\n};\n\nconst getRNPeerDeps = async version => {\n  const {\n    stdout,\n    stderr\n  } = await (0, _execa().default)('npm', ['info', `react-native@${version}`, 'peerDependencies', '--json']);\n  checkForErrors(stderr);\n  return JSON.parse(stdout);\n};\n\nconst getPatch = async (currentVersion, newVersion, config) => {\n  let patch;\n\n  _cliTools().logger.info(`Fetching diff between v${currentVersion} and v${newVersion}...`);\n\n  try {\n    const {\n      data\n    } = await (0, _cliTools().fetch)(`${rawDiffUrl}/${currentVersion}..${newVersion}.diff`);\n    patch = data;\n  } catch (error) {\n    _cliTools().logger.error(error.message);\n\n    _cliTools().logger.error(`Failed to fetch diff for react-native@${newVersion}. Maybe it's not released yet?`);\n\n    _cliTools().logger.info(`For available releases to diff see: ${_chalk().default.underline.dim('https://github.com/react-native-community/rn-diff-purge#diff-table-full-table-here')}`);\n\n    return null;\n  }\n\n  let patchWithRenamedProjects = patch;\n  Object.keys(config.project).forEach(platform => {\n    if (!config.project[platform]) {\n      return;\n    }\n\n    if (platform === 'ios') {\n      patchWithRenamedProjects = patchWithRenamedProjects.replace(new RegExp('RnDiffApp', 'g'), config.project[platform].projectName.replace('.xcodeproj', ''));\n    } else if (platform === 'android') {\n      patchWithRenamedProjects = patchWithRenamedProjects.replace(new RegExp('com\\\\.rndiffapp', 'g'), config.project[platform].packageName).replace(new RegExp('com\\\\.rndiffapp'.split('.').join('/'), 'g'), config.project[platform].packageName.split('.').join('/'));\n    } else {\n      _cliTools().logger.warn(`Unsupported platform: \"${platform}\". \\`upgrade\\` only supports iOS and Android.`);\n    }\n  });\n  return patchWithRenamedProjects;\n};\n\nconst getVersionToUpgradeTo = async (argv, currentVersion, projectDir) => {\n  const argVersion = argv[0];\n\n  const semverCoercedVersion = _semver().default.coerce(argVersion);\n\n  const newVersion = argVersion ? _semver().default.valid(argVersion) || (semverCoercedVersion ? semverCoercedVersion.version : null) : await getLatestRNVersion();\n\n  if (!newVersion) {\n    _cliTools().logger.error(`Provided version \"${argv[0]}\" is not allowed. Please pass a valid semver version`);\n\n    return null;\n  }\n\n  if (_semver().default.gt(currentVersion, newVersion)) {\n    _cliTools().logger.error(`Trying to upgrade from newer version \"${currentVersion}\" to older \"${newVersion}\"`);\n\n    return null;\n  }\n\n  if (_semver().default.eq(currentVersion, newVersion)) {\n    const {\n      dependencies: {\n        'react-native': version\n      }\n    } = require(_path().default.join(projectDir, 'package.json'));\n\n    if (_semver().default.satisfies(newVersion, version)) {\n      _cliTools().logger.warn(`Specified version \"${newVersion}\" is already installed in node_modules and it satisfies \"${version}\" semver range. No need to upgrade`);\n\n      return null;\n    }\n\n    _cliTools().logger.error(`Dependency mismatch. Specified version \"${newVersion}\" is already installed in node_modules and it doesn't satisfy \"${version}\" semver range of your \"react-native\" dependency. Please re-install your dependencies`);\n\n    return null;\n  }\n\n  return newVersion;\n};\n\nconst installDeps = async (root, newVersion) => {\n  _cliTools().logger.info(`Installing \"react-native@${newVersion}\" and its peer dependencies...`);\n\n  const peerDeps = await getRNPeerDeps(newVersion);\n  const deps = [`react-native@${newVersion}`, ...Object.keys(peerDeps).map(module => `${module}@${peerDeps[module]}`)];\n  await PackageManager.install(deps, {\n    silent: true,\n    root\n  });\n  await (0, _execa().default)('git', ['add', 'package.json']);\n\n  try {\n    await (0, _execa().default)('git', ['add', 'yarn.lock']);\n  } catch (error) {// ignore\n  }\n\n  try {\n    await (0, _execa().default)('git', ['add', 'package-lock.json']);\n  } catch (error) {// ignore\n  }\n};\n\nconst installCocoaPodsDeps = async projectDir => {\n  if (process.platform === 'darwin') {\n    try {\n      _cliTools().logger.info(`Installing CocoaPods dependencies ${_chalk().default.dim('(this may take a few minutes)')}`);\n\n      await (0, _installPods.default)({\n        projectName: projectDir.split('/').pop() || ''\n      });\n    } catch (error) {\n      if (error.stderr) {\n        _cliTools().logger.debug(`\"pod install\" or \"pod repo update\" failed. Error output:\\n${error.stderr}`);\n      }\n\n      _cliTools().logger.error('Installation of CocoaPods dependencies failed. Try to install them manually by running \"pod install\" in \"ios\" directory after finishing upgrade');\n    }\n  }\n};\n\nconst applyPatch = async (currentVersion, newVersion, tmpPatchFile) => {\n  const defaultExcludes = ['package.json'];\n  let filesThatDontExist = [];\n  let filesThatFailedToApply = [];\n  const {\n    stdout: relativePathFromRoot\n  } = await (0, _execa().default)('git', ['rev-parse', '--show-prefix']);\n\n  try {\n    try {\n      const excludes = defaultExcludes.map(e => `--exclude=${_path().default.join(relativePathFromRoot, e)}`);\n      await (0, _execa().default)('git', ['apply', // According to git documentation, `--binary` flag is turned on by\n      // default. However it's necessary when running `git apply --check` to\n      // actually accept binary files, maybe a bug in git?\n      '--binary', '--check', tmpPatchFile, ...excludes, '-p2', '--3way', `--directory=${relativePathFromRoot}`]);\n\n      _cliTools().logger.info('Applying diff...');\n    } catch (error) {\n      const errorLines = error.stderr.split('\\n');\n      filesThatDontExist = [...errorLines.filter(x => x.includes('does not exist in index')).map(x => x.replace(/^error: (.*): does not exist in index$/, '$1'))].filter(Boolean);\n      filesThatFailedToApply = errorLines.filter(x => x.includes('patch does not apply')).map(x => x.replace(/^error: (.*): patch does not apply$/, '$1')).filter(Boolean);\n\n      _cliTools().logger.info('Applying diff...');\n\n      _cliTools().logger.warn(`Excluding files that exist in the template, but not in your project:\\n${filesThatDontExist.map(file => `  - ${_chalk().default.bold(file)}`).join('\\n')}`);\n\n      if (filesThatFailedToApply.length) {\n        _cliTools().logger.error(`Excluding files that failed to apply the diff:\\n${filesThatFailedToApply.map(file => `  - ${_chalk().default.bold(file)}`).join('\\n')}\\nPlease make sure to check the actual changes after the upgrade command is finished.\\nYou can find them in our Upgrade Helper web app: ${_chalk().default.underline.dim(`${webDiffUrl}/?from=${currentVersion}&to=${newVersion}`)}`);\n      }\n    } finally {\n      const excludes = [...defaultExcludes, ...filesThatDontExist, ...filesThatFailedToApply].map(e => `--exclude=${_path().default.join(relativePathFromRoot, e)}`);\n      await (0, _execa().default)('git', ['apply', tmpPatchFile, ...excludes, '-p2', '--3way', `--directory=${relativePathFromRoot}`]);\n    }\n  } catch (error) {\n    if (error.stderr) {\n      _cliTools().logger.debug(`\"git apply\" failed. Error output:\\n${error.stderr}`);\n    }\n\n    _cliTools().logger.error('Automatically applying diff failed. We did our best to automatically upgrade as many files as possible');\n\n    return false;\n  }\n\n  return true;\n};\n/**\n * Upgrade application to a new version of React Native.\n */\n\n\nasync function upgrade(argv, ctx) {\n  const tmpPatchFile = 'tmp-upgrade-rn.patch';\n  const projectDir = ctx.root;\n\n  const {\n    version: currentVersion\n  } = require(_path().default.join(projectDir, 'node_modules/react-native/package.json'));\n\n  const newVersion = await getVersionToUpgradeTo(argv, currentVersion, projectDir);\n\n  if (!newVersion) {\n    return;\n  }\n\n  const patch = await getPatch(currentVersion, newVersion, ctx);\n\n  if (patch === null) {\n    return;\n  }\n\n  if (patch === '') {\n    _cliTools().logger.info('Diff has no changes to apply, proceeding further');\n\n    await installDeps(projectDir, newVersion);\n    await installCocoaPodsDeps(projectDir);\n\n    _cliTools().logger.success(`Upgraded React Native to v${newVersion} 🎉. Now you can review and commit the changes`);\n\n    return;\n  }\n\n  let patchSuccess;\n\n  try {\n    _fs().default.writeFileSync(tmpPatchFile, patch);\n\n    patchSuccess = await applyPatch(currentVersion, newVersion, tmpPatchFile);\n  } catch (error) {\n    throw new Error(error.stderr || error);\n  } finally {\n    try {\n      _fs().default.unlinkSync(tmpPatchFile);\n    } catch (e) {// ignore\n    }\n\n    const {\n      stdout\n    } = await (0, _execa().default)('git', ['status', '-s']);\n\n    if (!patchSuccess) {\n      if (stdout) {\n        _cliTools().logger.warn('Continuing after failure. Some of the files are upgraded but you will need to deal with conflicts manually');\n\n        await installDeps(projectDir, newVersion);\n\n        _cliTools().logger.info('Running \"git status\" to check what changed...');\n\n        await (0, _execa().default)('git', ['status'], {\n          stdio: 'inherit'\n        });\n      } else {\n        _cliTools().logger.error('Patch failed to apply for unknown reason. Please fall back to manual way of upgrading');\n      }\n    } else {\n      await installDeps(projectDir, newVersion);\n      await installCocoaPodsDeps(projectDir);\n\n      _cliTools().logger.info('Running \"git status\" to check what changed...');\n\n      await (0, _execa().default)('git', ['status'], {\n        stdio: 'inherit'\n      });\n    }\n\n    if (!patchSuccess) {\n      if (stdout) {\n        _cliTools().logger.warn('Please run \"git diff\" to review the conflicts and resolve them');\n      }\n\n      if (process.platform === 'darwin') {\n        _cliTools().logger.warn('After resolving conflicts don\\'t forget to run \"pod install\" inside \"ios\" directory');\n      }\n\n      _cliTools().logger.info(`You may find these resources helpful:\n• Release notes: ${_chalk().default.underline.dim(`https://github.com/facebook/react-native/releases/tag/v${newVersion}`)}\n• Manual Upgrade Helper: ${_chalk().default.underline.dim(`${webDiffUrl}/?from=${currentVersion}&to=${newVersion}`)}\n• Git diff: ${_chalk().default.underline.dim(`${rawDiffUrl}/${currentVersion}..${newVersion}.diff`)}`);\n\n      throw new (_cliTools().CLIError)('Upgrade failed. Please see the messages above for details');\n    }\n  }\n\n  _cliTools().logger.success(`Upgraded React Native to v${newVersion} 🎉. Now you can review and commit the changes`);\n}\n\nconst upgradeCommand = {\n  name: 'upgrade [version]',\n  description: \"Upgrade your app's template files to the specified or latest npm version using `rn-diff-purge` project. Only valid semver versions are allowed.\",\n  func: upgrade\n};\nvar _default = upgradeCommand;\nexports.default = _default;\n\n//# sourceMappingURL=upgrade.js.map"]},"metadata":{},"sourceType":"script"}