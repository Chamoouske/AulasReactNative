{"ast":null,"code":"\"use strict\";\n\nvar _extends = require(\"@babel/runtime/helpers/extends\");\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ios_plugins_1 = require(\"../plugins/ios-plugins\");\n\nexports.withDisplayName = ios_plugins_1.createInfoPlistPlugin(setDisplayName, 'withDisplayName');\nexports.withName = ios_plugins_1.createInfoPlistPlugin(setName, 'withName');\n\nfunction getName(config) {\n  return typeof config.name === 'string' ? config.name : null;\n}\n\nexports.getName = getName;\n\nfunction setDisplayName(configOrName, _a) {\n  var CFBundleDisplayName = _a.CFBundleDisplayName,\n      infoPlist = __rest(_a, [\"CFBundleDisplayName\"]);\n\n  var name = null;\n\n  if (typeof configOrName === 'string') {\n    name = configOrName;\n  } else {\n    name = getName(configOrName);\n  }\n\n  if (!name) {\n    return infoPlist;\n  }\n\n  return _extends(_extends({}, infoPlist), {\n    CFBundleDisplayName: name\n  });\n}\n\nexports.setDisplayName = setDisplayName;\n\nfunction setName(config, _a) {\n  var CFBundleName = _a.CFBundleName,\n      infoPlist = __rest(_a, [\"CFBundleName\"]);\n\n  var name = getName(config);\n\n  if (!name) {\n    return infoPlist;\n  }\n\n  return _extends(_extends({}, infoPlist), {\n    CFBundleName: name\n  });\n}\n\nexports.setName = setName;","map":{"version":3,"sources":["../../src/ios/Name.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAEA,IAAA,aAAA,GAAA,OAAA,0BAAA;;AAGa,OAAA,CAAA,eAAA,GAAkB,aAAA,CAAA,qBAAA,CAAsB,cAAtB,EAAsC,iBAAtC,CAAlB;AAEA,OAAA,CAAA,QAAA,GAAW,aAAA,CAAA,qBAAA,CAAsB,OAAtB,EAA+B,UAA/B,CAAX;;AAEb,SAAgB,OAAhB,CAAwB,MAAxB,EAAwD;AACtD,SAAO,OAAO,MAAM,CAAC,IAAd,KAAuB,QAAvB,GAAkC,MAAM,CAAC,IAAzC,GAAgD,IAAvD;AACD;;AAFD,OAAA,CAAA,OAAA,GAAA,OAAA;;AAQA,SAAgB,cAAhB,CACE,YADF,EAEE,EAFF,EAEkD;AAAhD,MAAE,mBAAF,GAAqB,EAArB,CAAE,mBAAF;AAAA,MAAuB,SAAvB,GAAuB,MAAA,CAAA,EAAA,EAAA,CAAA,qBAAA,CAAA,CAAvB;;AAEA,MAAI,IAAI,GAAkB,IAA1B;;AACA,MAAI,OAAO,YAAP,KAAwB,QAA5B,EAAsC;AACpC,IAAA,IAAI,GAAG,YAAP;AACD,GAFD,MAEO;AACL,IAAA,IAAI,GAAG,OAAO,CAAC,YAAD,CAAd;AACD;;AAED,MAAI,CAAC,IAAL,EAAW;AACT,WAAO,SAAP;AACD;;AAED,SAAA,SAAA,SAAA,EAAA,EACK,SADL,CAAA,EACc;AACZ,IAAA,mBAAmB,EAAE;AADT,GADd,CAAA;AAID;;AAnBD,OAAA,CAAA,cAAA,GAAA,cAAA;;AAyBA,SAAgB,OAAhB,CACE,MADF,EAEE,EAFF,EAE2C;AAAzC,MAAE,YAAF,GAAc,EAAd,CAAE,YAAF;AAAA,MAAgB,SAAhB,GAAgB,MAAA,CAAA,EAAA,EAAA,CAAA,cAAA,CAAA,CAAhB;;AAEA,MAAM,IAAI,GAAG,OAAO,CAAC,MAAD,CAApB;;AAEA,MAAI,CAAC,IAAL,EAAW;AACT,WAAO,SAAP;AACD;;AAED,SAAA,SAAA,SAAA,EAAA,EACK,SADL,CAAA,EACc;AACZ,IAAA,YAAY,EAAE;AADF,GADd,CAAA;AAID;;AAdD,OAAA,CAAA,OAAA,GAAA,OAAA","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { createInfoPlistPlugin } from '../plugins/ios-plugins';\nimport { InfoPlist } from './IosConfig.types';\n\nexport const withDisplayName = createInfoPlistPlugin(setDisplayName, 'withDisplayName');\n\nexport const withName = createInfoPlistPlugin(setName, 'withName');\n\nexport function getName(config: Pick<ExpoConfig, 'name'>) {\n  return typeof config.name === 'string' ? config.name : null;\n}\n\n/**\n * CFBundleDisplayName is used for most things: the name on the home screen, in\n * notifications, and others.\n */\nexport function setDisplayName(\n  configOrName: Pick<ExpoConfig, 'name'> | string,\n  { CFBundleDisplayName, ...infoPlist }: InfoPlist\n): InfoPlist {\n  let name: string | null = null;\n  if (typeof configOrName === 'string') {\n    name = configOrName;\n  } else {\n    name = getName(configOrName);\n  }\n\n  if (!name) {\n    return infoPlist;\n  }\n\n  return {\n    ...infoPlist,\n    CFBundleDisplayName: name,\n  };\n}\n\n/**\n * CFBundleName is recommended to be 16 chars or less and is used in lists, eg:\n * sometimes on the App Store\n */\nexport function setName(\n  config: Pick<ExpoConfig, 'name'>,\n  { CFBundleName, ...infoPlist }: InfoPlist\n): InfoPlist {\n  const name = getName(config);\n\n  if (!name) {\n    return infoPlist;\n  }\n\n  return {\n    ...infoPlist,\n    CFBundleName: name,\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}