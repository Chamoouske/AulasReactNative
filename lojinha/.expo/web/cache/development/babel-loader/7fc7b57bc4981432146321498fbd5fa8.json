{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nvar _jsxFileName = \"/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/RNTester/js/examples/XHR/XHRExampleBinaryUpload.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar React = require('react');\n\nvar Alert = require(\"react-native-web/dist/exports/Alert\").default;\n\nvar Linking = require(\"react-native-web/dist/exports/Linking\").default;\n\nvar Picker = require(\"react-native-web/dist/exports/Picker\").default;\n\nvar StyleSheet = require(\"react-native-web/dist/exports/StyleSheet\").default;\n\nvar Text = require(\"react-native-web/dist/exports/Text\").default;\n\nvar TouchableHighlight = require(\"react-native-web/dist/exports/TouchableHighlight\").default;\n\nvar View = require(\"react-native-web/dist/exports/View\").default;\n\nvar BINARY_TYPES = {\n  String: String,\n  ArrayBuffer: ArrayBuffer,\n  Int8Array: Int8Array,\n  Uint8Array: Uint8Array,\n  Uint8ClampedArray: Uint8ClampedArray,\n  Int16Array: Int16Array,\n  Uint16Array: Uint16Array,\n  Int32Array: Int32Array,\n  Uint32Array: Uint32Array,\n  Float32Array: Float32Array,\n  Float64Array: Float64Array,\n  DataView: DataView\n};\nvar SAMPLE_TEXT = \"\\nI am the spirit that negates.\\nAnd rightly so, for all that comes to be\\nDeserves to perish wretchedly;\\n'Twere better nothing would begin.\\nThus everything that that your terms, sin,\\nDestruction, evil represent\\u2014\\nThat is my proper element.\\n\\n--Faust, JW Goethe\\n\";\n\nvar XHRExampleBinaryUpload = function (_React$Component) {\n  _inherits(XHRExampleBinaryUpload, _React$Component);\n\n  var _super = _createSuper(XHRExampleBinaryUpload);\n\n  function XHRExampleBinaryUpload() {\n    var _this;\n\n    _classCallCheck(this, XHRExampleBinaryUpload);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      type: 'Uint8Array'\n    };\n\n    _this._upload = function () {\n      var xhr = new XMLHttpRequest();\n      xhr.open('POST', 'http://posttestserver.com/post.php');\n\n      xhr.onload = function () {\n        return XHRExampleBinaryUpload.handlePostTestServerUpload(xhr);\n      };\n\n      xhr.setRequestHeader('Content-Type', 'text/plain');\n\n      if (_this.state.type === 'String') {\n        xhr.send(SAMPLE_TEXT);\n        return;\n      }\n\n      var arrayBuffer = new ArrayBuffer(256);\n      var asBytes = new Uint8Array(arrayBuffer);\n\n      for (var i = 0; i < SAMPLE_TEXT.length; i++) {\n        asBytes[i] = SAMPLE_TEXT.charCodeAt(i);\n      }\n\n      if (_this.state.type === 'ArrayBuffer') {\n        xhr.send(arrayBuffer);\n        return;\n      }\n\n      if (_this.state.type === 'Uint8Array') {\n        xhr.send(asBytes);\n        return;\n      }\n\n      var TypedArrayClass = BINARY_TYPES[_this.state.type];\n      xhr.send(new TypedArrayClass(arrayBuffer));\n    };\n\n    return _this;\n  }\n\n  _createClass(XHRExampleBinaryUpload, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 7\n        }\n      }, React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 9\n        }\n      }, \"Upload 255 bytes as...\"), React.createElement(Picker, {\n        selectedValue: this.state.type,\n        onValueChange: function onValueChange(type) {\n          return _this2.setState({\n            type: type\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 9\n        }\n      }, Object.keys(BINARY_TYPES).map(function (type) {\n        return React.createElement(Picker.Item, {\n          key: type,\n          label: type,\n          value: type,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }\n        });\n      })), React.createElement(View, {\n        style: styles.uploadButton,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 9\n        }\n      }, React.createElement(TouchableHighlight, {\n        onPress: this._upload,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }\n      }, React.createElement(View, {\n        style: styles.uploadButtonBox,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }\n      }, React.createElement(Text, {\n        style: styles.uploadButtonLabel,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 15\n        }\n      }, \"Upload\")))));\n    }\n  }], [{\n    key: \"handlePostTestServerUpload\",\n    value: function handlePostTestServerUpload(xhr) {\n      if (xhr.status !== 200) {\n        Alert.alert('Upload failed', 'Expected HTTP 200 OK response, got ' + xhr.status);\n        return;\n      }\n\n      if (!xhr.responseText) {\n        Alert.alert('Upload failed', 'No response payload.');\n        return;\n      }\n\n      var index = xhr.responseText.indexOf('http://www.posttestserver.com/');\n\n      if (index === -1) {\n        Alert.alert('Upload failed', 'Invalid response payload.');\n        return;\n      }\n\n      var url = xhr.responseText.slice(index).split('\\n')[0];\n      console.log('Upload successful: ' + url);\n      Linking.openURL(url);\n    }\n  }]);\n\n  return XHRExampleBinaryUpload;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  uploadButton: {\n    marginTop: 16\n  },\n  uploadButtonBox: {\n    flex: 1,\n    paddingVertical: 12,\n    alignItems: 'center',\n    backgroundColor: 'blue',\n    borderRadius: 4\n  },\n  uploadButtonLabel: {\n    color: 'white',\n    fontSize: 16,\n    fontWeight: '500'\n  }\n});\nmodule.exports = XHRExampleBinaryUpload;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/RNTester/js/examples/XHR/XHRExampleBinaryUpload.js"],"names":["React","require","BINARY_TYPES","String","ArrayBuffer","Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","DataView","SAMPLE_TEXT","XHRExampleBinaryUpload","state","type","_upload","xhr","XMLHttpRequest","open","onload","handlePostTestServerUpload","setRequestHeader","send","arrayBuffer","asBytes","i","length","charCodeAt","TypedArrayClass","setState","Object","keys","map","styles","uploadButton","uploadButtonBox","uploadButtonLabel","status","Alert","alert","responseText","index","indexOf","url","slice","split","console","log","Linking","openURL","Component","StyleSheet","create","marginTop","flex","paddingVertical","alignItems","backgroundColor","borderRadius","color","fontSize","fontWeight","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nconst React = require('react');\n\nconst {\n  Alert,\n  Linking,\n  Picker,\n  StyleSheet,\n  Text,\n  TouchableHighlight,\n  View,\n} = require('react-native');\n\nconst BINARY_TYPES = {\n  String,\n  ArrayBuffer,\n  Int8Array,\n  Uint8Array,\n  Uint8ClampedArray,\n  Int16Array,\n  Uint16Array,\n  Int32Array,\n  Uint32Array,\n  Float32Array,\n  Float64Array,\n  DataView,\n};\n\nconst SAMPLE_TEXT = `\nI am the spirit that negates.\nAnd rightly so, for all that comes to be\nDeserves to perish wretchedly;\n'Twere better nothing would begin.\nThus everything that that your terms, sin,\nDestruction, evil represent—\nThat is my proper element.\n\n--Faust, JW Goethe\n`;\n\nclass XHRExampleBinaryUpload extends React.Component<{...}, $FlowFixMeState> {\n  static handlePostTestServerUpload(xhr: XMLHttpRequest) {\n    if (xhr.status !== 200) {\n      Alert.alert(\n        'Upload failed',\n        'Expected HTTP 200 OK response, got ' + xhr.status,\n      );\n      return;\n    }\n    if (!xhr.responseText) {\n      Alert.alert('Upload failed', 'No response payload.');\n      return;\n    }\n    const index = xhr.responseText.indexOf('http://www.posttestserver.com/');\n    if (index === -1) {\n      Alert.alert('Upload failed', 'Invalid response payload.');\n      return;\n    }\n    const url = xhr.responseText.slice(index).split('\\n')[0];\n    console.log('Upload successful: ' + url);\n    Linking.openURL(url);\n  }\n\n  state: $FlowFixMe | {|type: $TEMPORARY$string<'Uint8Array'>|} = {\n    type: 'Uint8Array',\n  };\n\n  _upload = () => {\n    const xhr = new XMLHttpRequest();\n    xhr.open('POST', 'http://posttestserver.com/post.php');\n    xhr.onload = () => XHRExampleBinaryUpload.handlePostTestServerUpload(xhr);\n    xhr.setRequestHeader('Content-Type', 'text/plain');\n\n    if (this.state.type === 'String') {\n      xhr.send(SAMPLE_TEXT);\n      return;\n    }\n\n    const arrayBuffer = new ArrayBuffer(256);\n    const asBytes = new Uint8Array(arrayBuffer);\n    for (let i = 0; i < SAMPLE_TEXT.length; i++) {\n      asBytes[i] = SAMPLE_TEXT.charCodeAt(i);\n    }\n    if (this.state.type === 'ArrayBuffer') {\n      xhr.send(arrayBuffer);\n      return;\n    }\n    if (this.state.type === 'Uint8Array') {\n      xhr.send(asBytes);\n      return;\n    }\n\n    const TypedArrayClass = BINARY_TYPES[this.state.type];\n    xhr.send(new TypedArrayClass(arrayBuffer));\n  };\n\n  render(): React.Node {\n    return (\n      <View>\n        <Text>Upload 255 bytes as...</Text>\n        <Picker\n          selectedValue={this.state.type}\n          onValueChange={type => this.setState({type})}>\n          {Object.keys(BINARY_TYPES).map(type => (\n            <Picker.Item key={type} label={type} value={type} />\n          ))}\n        </Picker>\n        <View style={styles.uploadButton}>\n          <TouchableHighlight onPress={this._upload}>\n            <View style={styles.uploadButtonBox}>\n              <Text style={styles.uploadButtonLabel}>Upload</Text>\n            </View>\n          </TouchableHighlight>\n        </View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  uploadButton: {\n    marginTop: 16,\n  },\n  uploadButtonBox: {\n    flex: 1,\n    paddingVertical: 12,\n    alignItems: 'center',\n    backgroundColor: 'blue',\n    borderRadius: 4,\n  },\n  uploadButtonLabel: {\n    color: 'white',\n    fontSize: 16,\n    fontWeight: '500',\n  },\n});\n\nmodule.exports = XHRExampleBinaryUpload;\n"]},"metadata":{},"sourceType":"script"}