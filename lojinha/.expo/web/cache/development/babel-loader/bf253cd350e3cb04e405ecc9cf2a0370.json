{"ast":null,"code":"'use strict';\n\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native-web/src/exports/Pressable/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport { forwardRef, memo, useMemo, useState, useRef } from 'react';\nimport useMergeRefs from \"../../modules/useMergeRefs\";\nimport usePressEvents from \"../../hooks/usePressEvents\";\nimport View from \"../View\";\n\nfunction Pressable(props, forwardedRef) {\n  var accessible = props.accessible,\n      children = props.children,\n      delayLongPress = props.delayLongPress,\n      delayPressIn = props.delayPressIn,\n      delayPressOut = props.delayPressOut,\n      disabled = props.disabled,\n      focusable = props.focusable,\n      onBlur = props.onBlur,\n      onFocus = props.onFocus,\n      onLongPress = props.onLongPress,\n      onPress = props.onPress,\n      onPressMove = props.onPressMove,\n      onPressIn = props.onPressIn,\n      onPressOut = props.onPressOut,\n      style = props.style,\n      testOnly_pressed = props.testOnly_pressed,\n      rest = _objectWithoutProperties(props, [\"accessible\", \"children\", \"delayLongPress\", \"delayPressIn\", \"delayPressOut\", \"disabled\", \"focusable\", \"onBlur\", \"onFocus\", \"onLongPress\", \"onPress\", \"onPressMove\", \"onPressIn\", \"onPressOut\", \"style\", \"testOnly_pressed\"]);\n\n  var _useForceableState = useForceableState(false),\n      _useForceableState2 = _slicedToArray(_useForceableState, 2),\n      focused = _useForceableState2[0],\n      setFocused = _useForceableState2[1];\n\n  var _useForceableState3 = useForceableState(testOnly_pressed === true),\n      _useForceableState4 = _slicedToArray(_useForceableState3, 2),\n      pressed = _useForceableState4[0],\n      setPressed = _useForceableState4[1];\n\n  var hostRef = useRef(null);\n  var setRef = useMergeRefs(forwardedRef, hostRef);\n  var pressConfig = useMemo(function () {\n    return {\n      delayLongPress: delayLongPress,\n      delayPressStart: delayPressIn,\n      delayPressEnd: delayPressOut,\n      disabled: disabled,\n      onLongPress: onLongPress,\n      onPress: onPress,\n      onPressChange: setPressed,\n      onPressStart: onPressIn,\n      onPressMove: onPressMove,\n      onPressEnd: onPressOut\n    };\n  }, [delayLongPress, delayPressIn, delayPressOut, disabled, onLongPress, onPress, onPressIn, onPressMove, onPressOut, setPressed]);\n  var pressEventHandlers = usePressEvents(hostRef, pressConfig);\n\n  var accessibilityState = _objectSpread({\n    disabled: disabled\n  }, props.accessibilityState);\n\n  var interactionState = {\n    focused: focused,\n    pressed: pressed\n  };\n\n  function createFocusHandler(callback, value) {\n    return function (event) {\n      if (event.nativeEvent.target === hostRef.current) {\n        setFocused(value);\n\n        if (callback != null) {\n          callback(event);\n        }\n      }\n    };\n  }\n\n  return React.createElement(View, _extends({}, rest, pressEventHandlers, {\n    accessibilityState: accessibilityState,\n    accessible: accessible !== false,\n    focusable: focusable !== false,\n    onBlur: createFocusHandler(onBlur, false),\n    onFocus: createFocusHandler(onFocus, true),\n    ref: setRef,\n    style: typeof style === 'function' ? style(interactionState) : style,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 5\n    }\n  }), typeof children === 'function' ? children(interactionState) : children);\n}\n\nfunction useForceableState(forced) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      pressed = _useState2[0],\n      setPressed = _useState2[1];\n\n  return [pressed || forced, setPressed];\n}\n\nvar MemoedPressable = memo(forwardRef(Pressable));\nMemoedPressable.displayName = 'Pressable';\nexport default MemoedPressable;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native-web/src/exports/Pressable/index.js"],"names":["React","forwardRef","memo","useMemo","useState","useRef","useMergeRefs","usePressEvents","View","Pressable","props","forwardedRef","accessible","children","delayLongPress","delayPressIn","delayPressOut","disabled","focusable","onBlur","onFocus","onLongPress","onPress","onPressMove","onPressIn","onPressOut","style","testOnly_pressed","rest","useForceableState","focused","setFocused","pressed","setPressed","hostRef","setRef","pressConfig","delayPressStart","delayPressEnd","onPressChange","onPressStart","onPressEnd","pressEventHandlers","accessibilityState","interactionState","createFocusHandler","callback","value","event","nativeEvent","target","current","forced","MemoedPressable","displayName"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport type { PressResponderConfig } from '../../hooks/usePressEvents/PressResponder';\nimport type { ViewProps } from '../View';\n\nimport * as React from 'react';\nimport { forwardRef, memo, useMemo, useState, useRef } from 'react';\nimport useMergeRefs from '../../modules/useMergeRefs';\nimport usePressEvents from '../../hooks/usePressEvents';\nimport View from '../View';\n\nexport type StateCallbackType = $ReadOnly<{|\n  focused: boolean,\n  pressed: boolean\n|}>;\n\ntype ViewStyleProp = $PropertyType<ViewProps, 'style'>;\n\ntype Props = $ReadOnly<{|\n  accessibilityLabel?: $PropertyType<ViewProps, 'accessibilityLabel'>,\n  accessibilityLiveRegion?: $PropertyType<ViewProps, 'accessibilityLiveRegion'>,\n  accessibilityRole?: $PropertyType<ViewProps, 'accessibilityRole'>,\n  accessibilityState?: $PropertyType<ViewProps, 'accessibilityState'>,\n  accessibilityValue?: $PropertyType<ViewProps, 'accessibilityValue'>,\n  accessible?: $PropertyType<ViewProps, 'accessible'>,\n  focusable?: ?boolean,\n  importantForAccessibility?: $PropertyType<ViewProps, 'importantForAccessibility'>,\n  children: React.Node | ((state: StateCallbackType) => React.Node),\n  // Duration (in milliseconds) from `onPressIn` before `onLongPress` is called.\n  delayLongPress?: ?number,\n  // Duration (in milliseconds) from `onPressStart` is called after pointerdown\n  delayPressIn?: ?number,\n  // Duration (in milliseconds) from `onPressEnd` is called after pointerup.\n  delayPressOut?: ?number,\n  // Whether the press behavior is disabled.\n  disabled?: ?boolean,\n  // Called when the view blurs\n  onBlur?: $PropertyType<ViewProps, 'onBlur'>,\n  // Called when the view is focused\n  onFocus?: $PropertyType<ViewProps, 'onFocus'>,\n  // Called when this view's layout changes\n  onLayout?: $PropertyType<ViewProps, 'onLayout'>,\n  // Called when a long-tap gesture is detected.\n  onLongPress?: $PropertyType<PressResponderConfig, 'onLongPress'>,\n  // Called when a single tap gesture is detected.\n  onPress?: $PropertyType<PressResponderConfig, 'onPress'>,\n  // Called when a touch is engaged, before `onPress`.\n  onPressIn?: $PropertyType<PressResponderConfig, 'onPressStart'>,\n  // Called when a touch is moving, after `onPressIn`.\n  onPressMove?: $PropertyType<PressResponderConfig, 'onPressMove'>,\n  // Called when a touch is released, before `onPress`.\n  onPressOut?: $PropertyType<PressResponderConfig, 'onPressEnd'>,\n  style?: ViewStyleProp | ((state: StateCallbackType) => ViewStyleProp),\n  testID?: $PropertyType<ViewProps, 'testID'>,\n  /**\n   * Used only for documentation or testing (e.g. snapshot testing).\n   */\n  testOnly_pressed?: ?boolean\n|}>;\n\n/**\n * Component used to build display components that should respond to whether the\n * component is currently pressed or not.\n */\nfunction Pressable(props: Props, forwardedRef): React.Node {\n  const {\n    accessible,\n    children,\n    delayLongPress,\n    delayPressIn,\n    delayPressOut,\n    disabled,\n    focusable,\n    onBlur,\n    onFocus,\n    onLongPress,\n    onPress,\n    onPressMove,\n    onPressIn,\n    onPressOut,\n    style,\n    testOnly_pressed,\n    ...rest\n  } = props;\n\n  const [focused, setFocused] = useForceableState(false);\n  const [pressed, setPressed] = useForceableState(testOnly_pressed === true);\n\n  const hostRef = useRef(null);\n  const setRef = useMergeRefs(forwardedRef, hostRef);\n\n  const pressConfig = useMemo(\n    () => ({\n      delayLongPress,\n      delayPressStart: delayPressIn,\n      delayPressEnd: delayPressOut,\n      disabled,\n      onLongPress,\n      onPress,\n      onPressChange: setPressed,\n      onPressStart: onPressIn,\n      onPressMove,\n      onPressEnd: onPressOut\n    }),\n    [\n      delayLongPress,\n      delayPressIn,\n      delayPressOut,\n      disabled,\n      onLongPress,\n      onPress,\n      onPressIn,\n      onPressMove,\n      onPressOut,\n      setPressed\n    ]\n  );\n\n  const pressEventHandlers = usePressEvents(hostRef, pressConfig);\n\n  const accessibilityState = { disabled, ...props.accessibilityState };\n  const interactionState = { focused, pressed };\n\n  function createFocusHandler(callback, value) {\n    return function(event) {\n      if (event.nativeEvent.target === hostRef.current) {\n        setFocused(value);\n        if (callback != null) {\n          callback(event);\n        }\n      }\n    };\n  }\n\n  return (\n    <View\n      {...rest}\n      {...pressEventHandlers}\n      accessibilityState={accessibilityState}\n      accessible={accessible !== false}\n      focusable={focusable !== false}\n      onBlur={createFocusHandler(onBlur, false)}\n      onFocus={createFocusHandler(onFocus, true)}\n      ref={setRef}\n      style={typeof style === 'function' ? style(interactionState) : style}\n    >\n      {typeof children === 'function' ? children(interactionState) : children}\n    </View>\n  );\n}\n\nfunction useForceableState(forced: boolean): [boolean, (boolean) => void] {\n  const [pressed, setPressed] = useState(false);\n  return [pressed || forced, setPressed];\n}\n\nconst MemoedPressable = memo(forwardRef(Pressable));\nMemoedPressable.displayName = 'Pressable';\n\nexport default (MemoedPressable: React.AbstractComponent<Props, React.ElementRef<typeof View>>);\n"]},"metadata":{},"sourceType":"module"}