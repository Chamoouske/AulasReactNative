{"ast":null,"code":"'use strict';\n\nvar nullthrows = require('nullthrows');\n\nfunction getErrors(schema) {\n  var errors = new Set();\n  var componentModules = new Map();\n  Object.keys(schema.modules).forEach(function (moduleName) {\n    var module = schema.modules[moduleName];\n\n    if (module.components == null) {\n      return;\n    }\n\n    Object.keys(module.components).forEach(function (componentName) {\n      if (module.components == null) {\n        return;\n      }\n\n      if (!componentModules.has(componentName)) {\n        componentModules.set(componentName, []);\n      }\n\n      nullthrows(componentModules.get(componentName)).push(moduleName);\n    });\n  });\n  componentModules.forEach(function (modules, componentName) {\n    if (modules.length > 1) {\n      errors.add(\"Duplicate components found with name \" + componentName + \". Found in modules \" + modules.join(', '));\n    }\n  });\n  return Array.from(errors).sort();\n}\n\nfunction validate(schema) {\n  var errors = getErrors(schema);\n\n  if (errors.length !== 0) {\n    throw new Error('Errors found validating schema:\\n' + errors.join('\\n'));\n  }\n}\n\nmodule.exports = {\n  getErrors: getErrors,\n  validate: validate\n};","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/packages/react-native-codegen/src/SchemaValidator.js"],"names":["nullthrows","require","getErrors","schema","errors","Set","componentModules","Map","Object","keys","modules","forEach","moduleName","module","components","componentName","has","set","get","push","length","add","join","Array","from","sort","validate","Error","exports"],"mappings":"AAUA;;AAEA,IAAMA,UAAU,GAAGC,OAAO,CAAC,YAAD,CAA1B;;AAIA,SAASC,SAAT,CAAmBC,MAAnB,EAA+D;AAC7D,MAAMC,MAAM,GAAG,IAAIC,GAAJ,EAAf;AAGA,MAAMC,gBAA4C,GAAG,IAAIC,GAAJ,EAArD;AAEAC,EAAAA,MAAM,CAACC,IAAP,CAAYN,MAAM,CAACO,OAAnB,EAA4BC,OAA5B,CAAoC,UAAAC,UAAU,EAAI;AAChD,QAAMC,MAAM,GAAGV,MAAM,CAACO,OAAP,CAAeE,UAAf,CAAf;;AAEA,QAAIC,MAAM,CAACC,UAAP,IAAqB,IAAzB,EAA+B;AAC7B;AACD;;AAEDN,IAAAA,MAAM,CAACC,IAAP,CAAYI,MAAM,CAACC,UAAnB,EAA+BH,OAA/B,CAAuC,UAAAI,aAAa,EAAI;AACtD,UAAIF,MAAM,CAACC,UAAP,IAAqB,IAAzB,EAA+B;AAC7B;AACD;;AAED,UAAI,CAACR,gBAAgB,CAACU,GAAjB,CAAqBD,aAArB,CAAL,EAA0C;AACxCT,QAAAA,gBAAgB,CAACW,GAAjB,CAAqBF,aAArB,EAAoC,EAApC;AACD;;AAEDf,MAAAA,UAAU,CAACM,gBAAgB,CAACY,GAAjB,CAAqBH,aAArB,CAAD,CAAV,CAAgDI,IAAhD,CAAqDP,UAArD;AACD,KAVD;AAWD,GAlBD;AAoBAN,EAAAA,gBAAgB,CAACK,OAAjB,CAAyB,UAACD,OAAD,EAAUK,aAAV,EAA4B;AACnD,QAAIL,OAAO,CAACU,MAAR,GAAiB,CAArB,EAAwB;AACtBhB,MAAAA,MAAM,CAACiB,GAAP,2CAC0CN,aAD1C,2BAC6EL,OAAO,CAACY,IAAR,CACzE,IADyE,CAD7E;AAKD;AACF,GARD;AAUA,SAAOC,KAAK,CAACC,IAAN,CAAWpB,MAAX,EAAmBqB,IAAnB,EAAP;AACD;;AAED,SAASC,QAAT,CAAkBvB,MAAlB,EAAsC;AACpC,MAAMC,MAAM,GAAGF,SAAS,CAACC,MAAD,CAAxB;;AAEA,MAAIC,MAAM,CAACgB,MAAP,KAAkB,CAAtB,EAAyB;AACvB,UAAM,IAAIO,KAAJ,CAAU,sCAAsCvB,MAAM,CAACkB,IAAP,CAAY,IAAZ,CAAhD,CAAN;AACD;AACF;;AAEDT,MAAM,CAACe,OAAP,GAAiB;AACf1B,EAAAA,SAAS,EAATA,SADe;AAEfwB,EAAAA,QAAQ,EAARA;AAFe,CAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nconst nullthrows = require('nullthrows');\n\nimport type {SchemaType} from './CodegenSchema';\n\nfunction getErrors(schema: SchemaType): $ReadOnlyArray<string> {\n  const errors = new Set();\n\n  // Map of component name -> Array of module names\n  const componentModules: Map<string, Array<string>> = new Map();\n\n  Object.keys(schema.modules).forEach(moduleName => {\n    const module = schema.modules[moduleName];\n\n    if (module.components == null) {\n      return;\n    }\n\n    Object.keys(module.components).forEach(componentName => {\n      if (module.components == null) {\n        return;\n      }\n\n      if (!componentModules.has(componentName)) {\n        componentModules.set(componentName, []);\n      }\n\n      nullthrows(componentModules.get(componentName)).push(moduleName);\n    });\n  });\n\n  componentModules.forEach((modules, componentName) => {\n    if (modules.length > 1) {\n      errors.add(\n        `Duplicate components found with name ${componentName}. Found in modules ${modules.join(\n          ', ',\n        )}`,\n      );\n    }\n  });\n\n  return Array.from(errors).sort();\n}\n\nfunction validate(schema: SchemaType) {\n  const errors = getErrors(schema);\n\n  if (errors.length !== 0) {\n    throw new Error('Errors found validating schema:\\n' + errors.join('\\n'));\n  }\n}\n\nmodule.exports = {\n  getErrors,\n  validate,\n};\n"]},"metadata":{},"sourceType":"script"}