{"ast":null,"code":"'use strict';\n\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nvar _jsxFileName = \"/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Components/SegmentedControlIOS/SegmentedControlIOS.ios.js\",\n    _this2 = this;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport StyleSheet from \"../../StyleSheet/StyleSheet\";\nimport RCTSegmentedControlNativeComponent from \"./RCTSegmentedControlNativeComponent\";\n\nvar SegmentedControlIOS = function (_React$Component) {\n  _inherits(SegmentedControlIOS, _React$Component);\n\n  var _super = _createSuper(SegmentedControlIOS);\n\n  function SegmentedControlIOS() {\n    var _this;\n\n    _classCallCheck(this, SegmentedControlIOS);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this._onChange = function (event) {\n      _this.props.onChange && _this.props.onChange(event);\n      _this.props.onValueChange && _this.props.onValueChange(event.nativeEvent.value);\n    };\n\n    return _this;\n  }\n\n  _createClass(SegmentedControlIOS, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          forwardedRef = _this$props.forwardedRef,\n          onValueChange = _this$props.onValueChange,\n          style = _this$props.style,\n          props = _objectWithoutProperties(_this$props, [\"forwardedRef\", \"onValueChange\", \"style\"]);\n\n      return React.createElement(RCTSegmentedControlNativeComponent, _extends({}, props, {\n        ref: forwardedRef,\n        style: [styles.segmentedControl, style],\n        onChange: this._onChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 7\n        }\n      }));\n    }\n  }]);\n\n  return SegmentedControlIOS;\n}(React.Component);\n\nSegmentedControlIOS.defaultProps = {\n  values: [],\n  enabled: true\n};\nvar styles = StyleSheet.create({\n  segmentedControl: {\n    height: 28\n  }\n});\nvar SegmentedControlIOSWithRef = React.forwardRef(function (props, forwardedRef) {\n  return React.createElement(SegmentedControlIOS, _extends({}, props, {\n    forwardedRef: forwardedRef,\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 12\n    }\n  }));\n});\nmodule.exports = SegmentedControlIOSWithRef;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Components/SegmentedControlIOS/SegmentedControlIOS.ios.js"],"names":["React","StyleSheet","RCTSegmentedControlNativeComponent","SegmentedControlIOS","_onChange","event","props","onChange","onValueChange","nativeEvent","value","forwardedRef","style","styles","segmentedControl","Component","defaultProps","values","enabled","create","height","SegmentedControlIOSWithRef","forwardRef","module","exports"],"mappings":"AAUA;;;;;;;;;;;;;;;;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,UAAP;AAGA,OAAOC,kCAAP;;IA+DMC,mB;;;;;;;;;;;;;;;;UAMJC,S,GAAY,UAACC,KAAD,EAA0C;AACpD,YAAKC,KAAL,CAAWC,QAAX,IAAuB,MAAKD,KAAL,CAAWC,QAAX,CAAoBF,KAApB,CAAvB;AACA,YAAKC,KAAL,CAAWE,aAAX,IACE,MAAKF,KAAL,CAAWE,aAAX,CAAyBH,KAAK,CAACI,WAAN,CAAkBC,KAA3C,CADF;AAED,K;;;;;;;WAED,kBAAS;AAAA,wBACgD,KAAKJ,KADrD;AAAA,UACAK,YADA,eACAA,YADA;AAAA,UACcH,aADd,eACcA,aADd;AAAA,UAC6BI,KAD7B,eAC6BA,KAD7B;AAAA,UACuCN,KADvC;;AAEP,aACE,oBAAC,kCAAD,eACMA,KADN;AAEE,QAAA,GAAG,EAAEK,YAFP;AAGE,QAAA,KAAK,EAAE,CAACE,MAAM,CAACC,gBAAR,EAA0BF,KAA1B,CAHT;AAIE,QAAA,QAAQ,EAAE,KAAKR,SAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF;AAQD;;;;EAtB+BJ,KAAK,CAACe,S;;AAAlCZ,mB,CACGa,Y,GAAe;AACpBC,EAAAA,MAAM,EAAE,EADY;AAEpBC,EAAAA,OAAO,EAAE;AAFW,C;AAwBxB,IAAML,MAAM,GAAGZ,UAAU,CAACkB,MAAX,CAAkB;AAC/BL,EAAAA,gBAAgB,EAAE;AAChBM,IAAAA,MAAM,EAAE;AADQ;AADa,CAAlB,CAAf;AAMA,IAAMC,0BAA0B,GAAGrB,KAAK,CAACsB,UAAN,CACjC,UACEhB,KADF,EAEEK,YAFF,EAGK;AACH,SAAO,oBAAC,mBAAD,eAAyBL,KAAzB;AAAgC,IAAA,YAAY,EAAEK,YAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CANgC,CAAnC;AAYAY,MAAM,CAACC,OAAP,GAAkBH,0BAAlB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nimport * as React from 'react';\nimport StyleSheet from '../../StyleSheet/StyleSheet';\nimport type {OnChangeEvent} from './RCTSegmentedControlNativeComponent';\nimport type {ViewProps} from '../View/ViewPropTypes';\nimport RCTSegmentedControlNativeComponent from './RCTSegmentedControlNativeComponent';\nimport type {SyntheticEvent} from 'react-native/Libraries/Types/CoreEventTypes';\n\ntype SegmentedControlIOSProps = $ReadOnly<{|\n  ...ViewProps,\n  /**\n   * The labels for the control's segment buttons, in order.\n   */\n  values?: $ReadOnlyArray<string>,\n  /**\n   * The index in `props.values` of the segment to be (pre)selected.\n   */\n  selectedIndex?: ?number,\n  /**\n   * If false the user won't be able to interact with the control.\n   */\n  enabled?: boolean,\n  /**\n   * Accent color of the control.\n   */\n  tintColor?: ?string,\n  /**\n   * If true, then selecting a segment won't persist visually.\n   * The `onValueChange` callback will still work as expected.\n   */\n  momentary?: ?boolean,\n  /**\n   * Callback that is called when the user taps a segment\n   */\n  onChange?: ?(event: SyntheticEvent<OnChangeEvent>) => void,\n  /**\n   * Callback that is called when the user taps a segment;\n   * passes the segment's value as an argument\n   */\n  onValueChange?: ?(value: number) => mixed,\n|}>;\n\ntype Props = $ReadOnly<{|\n  ...SegmentedControlIOSProps,\n  forwardedRef: ?React.Ref<typeof RCTSegmentedControlNativeComponent>,\n|}>;\n\n/**\n * Use `SegmentedControlIOS` to render a UISegmentedControl iOS.\n *\n * #### Programmatically changing selected index\n *\n * The selected index can be changed on the fly by assigning the\n * selectedIndex prop to a state variable, then changing that variable.\n * Note that the state variable would need to be updated as the user\n * selects a value and changes the index, as shown in the example below.\n *\n * ````\n * <SegmentedControlIOS\n *   values={['One', 'Two']}\n *   selectedIndex={this.state.selectedIndex}\n *   onChange={(event) => {\n *     this.setState({selectedIndex: event.nativeEvent.selectedSegmentIndex});\n *   }}\n * />\n * ````\n */\n\nclass SegmentedControlIOS extends React.Component<Props> {\n  static defaultProps = {\n    values: [],\n    enabled: true,\n  };\n\n  _onChange = (event: SyntheticEvent<OnChangeEvent>) => {\n    this.props.onChange && this.props.onChange(event);\n    this.props.onValueChange &&\n      this.props.onValueChange(event.nativeEvent.value);\n  };\n\n  render() {\n    const {forwardedRef, onValueChange, style, ...props} = this.props;\n    return (\n      <RCTSegmentedControlNativeComponent\n        {...props}\n        ref={forwardedRef}\n        style={[styles.segmentedControl, style]}\n        onChange={this._onChange}\n      />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  segmentedControl: {\n    height: 28,\n  },\n});\n\nconst SegmentedControlIOSWithRef = React.forwardRef(\n  (\n    props: SegmentedControlIOSProps,\n    forwardedRef: ?React.Ref<typeof RCTSegmentedControlNativeComponent>,\n  ) => {\n    return <SegmentedControlIOS {...props} forwardedRef={forwardedRef} />;\n  },\n);\n\n/* $FlowFixMe(>=0.89.0 site=react_native_ios_fb) This comment suppresses an\n * error found when Flow v0.89 was deployed. To see the error, delete this\n * comment and run Flow. */\nmodule.exports = (SegmentedControlIOSWithRef: NativeSegmentedControlIOS);\n"]},"metadata":{},"sourceType":"module"}