{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Platform } from '@unimodules/core';\nimport ExpoLocation from \"./ExpoLocation\";\nimport { LocationAccuracy } from \"./Location.types\";\nimport { LocationSubscriber } from \"./LocationSubscribers\";\nexport function installWebGeolocationPolyfill() {\n  if (Platform.OS !== 'web') {\n    window.navigator.geolocation = {\n      getCurrentPosition: getCurrentPosition,\n      watchPosition: watchPosition,\n      clearWatch: clearWatch,\n      stopObserving: function stopObserving() {}\n    };\n  }\n}\n\nfunction convertGeolocationOptions(options) {\n  return {\n    accuracy: options.enableHighAccuracy ? LocationAccuracy.High : LocationAccuracy.Balanced\n  };\n}\n\nfunction getCurrentPosition(success) {\n  var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  _getCurrentPositionAsyncWrapper(success, error, options);\n}\n\nfunction _getCurrentPositionAsyncWrapper(success, error, options) {\n  var result;\n  return _regeneratorRuntime.async(function _getCurrentPositionAsyncWrapper$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(ExpoLocation.requestPermissionsAsync());\n\n        case 3:\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(ExpoLocation.getCurrentPositionAsync(convertGeolocationOptions(options)));\n\n        case 5:\n          result = _context.sent;\n          success(result);\n          _context.next = 12;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          error(_context.t0);\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 9]], Promise);\n}\n\nfunction watchPosition(success, error, options) {\n  var watchId = LocationSubscriber.registerCallback(success);\n  ExpoLocation.watchPositionImplAsync(watchId, options).catch(function (err) {\n    LocationSubscriber.unregisterCallback(watchId);\n    error({\n      watchId: watchId,\n      message: err.message,\n      code: err.code\n    });\n  });\n  return watchId;\n}\n\nfunction clearWatch(watchId) {\n  LocationSubscriber.unregisterCallback(watchId);\n}","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/expo-location/src/GeolocationPolyfill.ts"],"names":["Platform","ExpoLocation","LocationAccuracy","LocationSubscriber","installWebGeolocationPolyfill","OS","window","navigator","geolocation","getCurrentPosition","watchPosition","clearWatch","stopObserving","convertGeolocationOptions","options","accuracy","enableHighAccuracy","High","Balanced","success","error","_getCurrentPositionAsyncWrapper","requestPermissionsAsync","getCurrentPositionAsync","result","watchId","registerCallback","watchPositionImplAsync","catch","err","unregisterCallback","message","code"],"mappings":";AAAA,SAASA,QAAT,QAAyB,kBAAzB;AAEA,OAAOC,YAAP;AACA,SAAyBC,gBAAzB;AACA,SAASC,kBAAT;AASA,OAAO,SAASC,6BAAT,GAA+C;AACpD,MAAIJ,QAAQ,CAACK,EAAT,KAAgB,KAApB,EAA2B;AAIzBC,IAAAA,MAAM,CAACC,SAAP,CAAiBC,WAAjB,GAA+B;AAC7BC,MAAAA,kBAAkB,EAAlBA,kBAD6B;AAE7BC,MAAAA,aAAa,EAAbA,aAF6B;AAG7BC,MAAAA,UAAU,EAAVA,UAH6B;AAO7BC,MAAAA,aAAa,EAAE,yBAAM,CAAE;AAPM,KAA/B;AASD;AACF;;AAED,SAASC,yBAAT,CAAmCC,OAAnC,EAAiF;AAC/E,SAAO;AACLC,IAAAA,QAAQ,EAAED,OAAO,CAACE,kBAAR,GAA6Bd,gBAAgB,CAACe,IAA9C,GAAqDf,gBAAgB,CAACgB;AAD3E,GAAP;AAGD;;AAED,SAAST,kBAAT,CACEU,OADF,EAIQ;AAAA,MAFNC,KAEM,uEAF4B,YAAM,CAAE,CAEpC;AAAA,MADNN,OACM,uEADwB,EACxB;;AACNO,EAAAA,+BAA+B,CAACF,OAAD,EAAUC,KAAV,EAAiBN,OAAjB,CAA/B;AACD;;AAID,SAAeO,+BAAf,CACEF,OADF,EAEEC,KAFF,EAGEN,OAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAMUb,YAAY,CAACqB,uBAAb,EANV;;AAAA;AAAA;AAAA,2CAOyBrB,YAAY,CAACsB,uBAAb,CAAqCV,yBAAyB,CAACC,OAAD,CAA9D,CAPzB;;AAAA;AAOUU,UAAAA,MAPV;AAQIL,UAAAA,OAAO,CAACK,MAAD,CAAP;AARJ;AAAA;;AAAA;AAAA;AAAA;AAUIJ,UAAAA,KAAK,aAAL;;AAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAASV,aAAT,CACES,OADF,EAEEC,KAFF,EAGEN,OAHF,EAIE;AACA,MAAMW,OAAO,GAAGtB,kBAAkB,CAACuB,gBAAnB,CAAoCP,OAApC,CAAhB;AAEAlB,EAAAA,YAAY,CAAC0B,sBAAb,CAAoCF,OAApC,EAA6CX,OAA7C,EAAsDc,KAAtD,CAA4D,UAAAC,GAAG,EAAI;AACjE1B,IAAAA,kBAAkB,CAAC2B,kBAAnB,CAAsCL,OAAtC;AACAL,IAAAA,KAAK,CAAC;AAAEK,MAAAA,OAAO,EAAPA,OAAF;AAAWM,MAAAA,OAAO,EAAEF,GAAG,CAACE,OAAxB;AAAiCC,MAAAA,IAAI,EAAEH,GAAG,CAACG;AAA3C,KAAD,CAAL;AACD,GAHD;AAKA,SAAOP,OAAP;AACD;;AAGD,SAASd,UAAT,CAAoBc,OAApB,EAAqC;AACnCtB,EAAAA,kBAAkB,CAAC2B,kBAAnB,CAAsCL,OAAtC;AACD","sourcesContent":["import { Platform } from '@unimodules/core';\n\nimport ExpoLocation from './ExpoLocation';\nimport { LocationObject, LocationAccuracy, LocationOptions } from './Location.types';\nimport { LocationSubscriber } from './LocationSubscribers';\n\ntype GeolocationSuccessCallback = (data: LocationObject) => void;\ntype GeolocationErrorCallback = (error: any) => void;\n\ntype GeolocationOptions = {\n  enableHighAccuracy?: boolean;\n};\n\nexport function installWebGeolocationPolyfill(): void {\n  if (Platform.OS !== 'web') {\n    // Polyfill navigator.geolocation for interop with the core react-native and web API approach to\n    // geolocation\n    // @ts-ignore\n    window.navigator.geolocation = {\n      getCurrentPosition,\n      watchPosition,\n      clearWatch,\n\n      // We don't polyfill stopObserving, this is an internal method that probably should not even exist\n      // in react-native docs\n      stopObserving: () => {},\n    };\n  }\n}\n\nfunction convertGeolocationOptions(options: GeolocationOptions): LocationOptions {\n  return {\n    accuracy: options.enableHighAccuracy ? LocationAccuracy.High : LocationAccuracy.Balanced,\n  };\n}\n\nfunction getCurrentPosition(\n  success: GeolocationSuccessCallback,\n  error: GeolocationErrorCallback = () => {},\n  options: GeolocationOptions = {}\n): void {\n  _getCurrentPositionAsyncWrapper(success, error, options);\n}\n\n// This function exists to let us continue to return undefined from getCurrentPosition, while still\n// using async/await for the internal implementation of it\nasync function _getCurrentPositionAsyncWrapper(\n  success: GeolocationSuccessCallback,\n  error: GeolocationErrorCallback,\n  options: GeolocationOptions\n): Promise<any> {\n  try {\n    await ExpoLocation.requestPermissionsAsync();\n    const result = await ExpoLocation.getCurrentPositionAsync(convertGeolocationOptions(options));\n    success(result);\n  } catch (e) {\n    error(e);\n  }\n}\n\n// Polyfill: navigator.geolocation.watchPosition\nfunction watchPosition(\n  success: GeolocationSuccessCallback,\n  error: GeolocationErrorCallback,\n  options: GeolocationOptions\n) {\n  const watchId = LocationSubscriber.registerCallback(success);\n\n  ExpoLocation.watchPositionImplAsync(watchId, options).catch(err => {\n    LocationSubscriber.unregisterCallback(watchId);\n    error({ watchId, message: err.message, code: err.code });\n  });\n\n  return watchId;\n}\n\n// Polyfill: navigator.geolocation.clearWatch\nfunction clearWatch(watchId: number) {\n  LocationSubscriber.unregisterCallback(watchId);\n}\n"]},"metadata":{},"sourceType":"module"}