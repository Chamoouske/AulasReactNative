{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction getAndroidAssetSuffix(scale) {\n  switch (scale) {\n    case 0.75:\n      return 'ldpi';\n\n    case 1:\n      return 'mdpi';\n\n    case 1.5:\n      return 'hdpi';\n\n    case 2:\n      return 'xhdpi';\n\n    case 3:\n      return 'xxhdpi';\n\n    case 4:\n      return 'xxxhdpi';\n\n    default:\n      return '';\n  }\n}\n\nvar drawableFileTypes = new Set(['gif', 'jpeg', 'jpg', 'png', 'webp', 'xml']);\n\nfunction getAndroidResourceFolderName(asset, scale) {\n  if (!drawableFileTypes.has(asset.type)) {\n    return 'raw';\n  }\n\n  var suffix = getAndroidAssetSuffix(scale);\n\n  if (!suffix) {\n    throw new Error(\"Don't know which android drawable suffix to use for asset: \" + JSON.stringify(asset));\n  }\n\n  var androidFolder = \"drawable-\" + suffix;\n  return androidFolder;\n}\n\nfunction getAndroidResourceIdentifier(asset) {\n  var folderPath = getBasePath(asset);\n  return (folderPath + \"/\" + asset.name).toLowerCase().replace(/\\//g, '_').replace(/([^a-z0-9_])/g, '').replace(/^assets_/, '');\n}\n\nfunction getBasePath(asset) {\n  var basePath = asset.httpServerLocation;\n\n  if (basePath[0] === '/') {\n    basePath = basePath.substr(1);\n  }\n\n  return basePath;\n}\n\nvar _default = {\n  getAndroidAssetSuffix: getAndroidAssetSuffix,\n  getAndroidResourceFolderName: getAndroidResourceFolderName,\n  getAndroidResourceIdentifier: getAndroidResourceIdentifier,\n  getBasePath: getBasePath\n};\nexports.default = _default;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli/build/commands/bundle/assetPathUtils.js"],"names":["Object","defineProperty","exports","value","default","getAndroidAssetSuffix","scale","drawableFileTypes","Set","getAndroidResourceFolderName","asset","has","type","suffix","Error","JSON","stringify","androidFolder","getAndroidResourceIdentifier","folderPath","getBasePath","name","toLowerCase","replace","basePath","httpServerLocation","substr","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAcA,SAASC,qBAAT,CAA+BC,KAA/B,EAAsC;AACpC,UAAQA,KAAR;AACE,SAAK,IAAL;AACE,aAAO,MAAP;;AAEF,SAAK,CAAL;AACE,aAAO,MAAP;;AAEF,SAAK,GAAL;AACE,aAAO,MAAP;;AAEF,SAAK,CAAL;AACE,aAAO,OAAP;;AAEF,SAAK,CAAL;AACE,aAAO,QAAP;;AAEF,SAAK,CAAL;AACE,aAAO,SAAP;;AAEF;AACE,aAAO,EAAP;AApBJ;AAsBD;;AAGD,IAAMC,iBAAiB,GAAG,IAAIC,GAAJ,CAAQ,CAAC,KAAD,EAAQ,MAAR,EAAgB,KAAhB,EAAuB,KAAvB,EAA8B,MAA9B,EAAsC,KAAtC,CAAR,CAA1B;;AAEA,SAASC,4BAAT,CAAsCC,KAAtC,EAA6CJ,KAA7C,EAAoD;AAClD,MAAI,CAACC,iBAAiB,CAACI,GAAlB,CAAsBD,KAAK,CAACE,IAA5B,CAAL,EAAwC;AACtC,WAAO,KAAP;AACD;;AAED,MAAMC,MAAM,GAAGR,qBAAqB,CAACC,KAAD,CAApC;;AAEA,MAAI,CAACO,MAAL,EAAa;AACX,UAAM,IAAIC,KAAJ,iEAAwEC,IAAI,CAACC,SAAL,CAAeN,KAAf,CAAxE,CAAN;AACD;;AAED,MAAMO,aAAa,iBAAeJ,MAAlC;AACA,SAAOI,aAAP;AACD;;AAED,SAASC,4BAAT,CAAsCR,KAAtC,EAA6C;AAC3C,MAAMS,UAAU,GAAGC,WAAW,CAACV,KAAD,CAA9B;AACA,SAAO,CAAGS,UAAH,SAAiBT,KAAK,CAACW,IAAvB,EAA8BC,WAA9B,GAA4CC,OAA5C,CAAoD,KAApD,EAA2D,GAA3D,EACNA,OADM,CACE,eADF,EACmB,EADnB,EAENA,OAFM,CAEE,UAFF,EAEc,EAFd,CAAP;AAGD;;AAED,SAASH,WAAT,CAAqBV,KAArB,EAA4B;AAC1B,MAAIc,QAAQ,GAAGd,KAAK,CAACe,kBAArB;;AAEA,MAAID,QAAQ,CAAC,CAAD,CAAR,KAAgB,GAApB,EAAyB;AACvBA,IAAAA,QAAQ,GAAGA,QAAQ,CAACE,MAAT,CAAgB,CAAhB,CAAX;AACD;;AAED,SAAOF,QAAP;AACD;;AAED,IAAIG,QAAQ,GAAG;AACbtB,EAAAA,qBAAqB,EAArBA,qBADa;AAEbI,EAAAA,4BAA4B,EAA5BA,4BAFa;AAGbS,EAAAA,4BAA4B,EAA5BA,4BAHa;AAIbE,EAAAA,WAAW,EAAXA;AAJa,CAAf;AAMAlB,OAAO,CAACE,OAAR,GAAkBuB,QAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * FIXME: using number to represent discrete scale numbers is fragile in essence because of\n * floating point numbers imprecision.\n */\nfunction getAndroidAssetSuffix(scale) {\n  switch (scale) {\n    case 0.75:\n      return 'ldpi';\n\n    case 1:\n      return 'mdpi';\n\n    case 1.5:\n      return 'hdpi';\n\n    case 2:\n      return 'xhdpi';\n\n    case 3:\n      return 'xxhdpi';\n\n    case 4:\n      return 'xxxhdpi';\n\n    default:\n      return '';\n  }\n} // See https://developer.android.com/guide/topics/resources/drawable-resource.html\n\n\nconst drawableFileTypes = new Set(['gif', 'jpeg', 'jpg', 'png', 'webp', 'xml']);\n\nfunction getAndroidResourceFolderName(asset, scale) {\n  if (!drawableFileTypes.has(asset.type)) {\n    return 'raw';\n  }\n\n  const suffix = getAndroidAssetSuffix(scale);\n\n  if (!suffix) {\n    throw new Error(`Don't know which android drawable suffix to use for asset: ${JSON.stringify(asset)}`);\n  }\n\n  const androidFolder = `drawable-${suffix}`;\n  return androidFolder;\n}\n\nfunction getAndroidResourceIdentifier(asset) {\n  const folderPath = getBasePath(asset);\n  return `${folderPath}/${asset.name}`.toLowerCase().replace(/\\//g, '_') // Encode folder structure in file name\n  .replace(/([^a-z0-9_])/g, '') // Remove illegal chars\n  .replace(/^assets_/, ''); // Remove \"assets_\" prefix\n}\n\nfunction getBasePath(asset) {\n  let basePath = asset.httpServerLocation;\n\n  if (basePath[0] === '/') {\n    basePath = basePath.substr(1);\n  }\n\n  return basePath;\n}\n\nvar _default = {\n  getAndroidAssetSuffix,\n  getAndroidResourceFolderName,\n  getAndroidResourceIdentifier,\n  getBasePath\n};\nexports.default = _default;\n\n//# sourceMappingURL=assetPathUtils.js.map"]},"metadata":{},"sourceType":"script"}