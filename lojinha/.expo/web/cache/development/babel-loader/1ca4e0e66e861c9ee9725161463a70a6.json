{"ast":null,"code":"'use strict';\n\nvar BatchedBridge = require('react-native/Libraries/BatchedBridge/BatchedBridge');\n\nvar _require = require(\"./Asserts\"),\n    assertEquals = _require.assertEquals,\n    assertTrue = _require.assertTrue;\n\nfunction strictStringCompare(a, b) {\n  if (typeof a !== 'string' || typeof b !== 'string' || a.length !== b.length) {\n    return false;\n  }\n\n  for (var i = 0; i < a.length; i++) {\n    if (a.charCodeAt(i) !== b.charCodeAt(i)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction assertStrictStringEquals(a, b) {\n  assertTrue(strictStringCompare(a, b), 'Expected: ' + a + ', received: ' + b);\n}\n\nvar TestJavaToJSArgumentsModule = {\n  receiveBasicTypes: function receiveBasicTypes(str, dbl, bool, null_arg) {\n    assertEquals('foo', str);\n    assertEquals(3.14, dbl);\n    assertEquals(true, bool);\n    assertEquals(null, null_arg);\n  },\n  receiveArrayWithBasicTypes: function receiveArrayWithBasicTypes(arr) {\n    assertEquals(4, arr.length);\n    assertEquals('red panda', arr[0]);\n    assertEquals(1.19, arr[1]);\n    assertEquals(true, arr[2]);\n    assertEquals(null, arr[3]);\n  },\n  receiveNestedArray: function receiveNestedArray(arr) {\n    assertEquals(2, arr.length);\n    assertEquals('level1', arr[0]);\n    var arr2 = arr[1];\n    assertEquals('level2', arr2[0]);\n    var arr3 = arr2[1];\n    assertEquals('level3', arr3[0]);\n  },\n  receiveArrayWithMaps: function receiveArrayWithMaps(arr) {\n    assertEquals(2, arr.length);\n    var m1 = arr[0];\n    var m2 = arr[1];\n    assertEquals('m1v1', m1.m1k1);\n    assertEquals('m1v2', m1.m1k2);\n    assertEquals('m2v1', m2.m2k1);\n  },\n  receiveMapWithBasicTypes: function receiveMapWithBasicTypes(map) {\n    assertEquals('stringValue', map.stringKey);\n    assertEquals(3.14, map.doubleKey);\n    assertEquals(true, map.booleanKey);\n    assertEquals(null, map.nullKey);\n  },\n  receiveNestedMap: function receiveNestedMap(map) {\n    var nestedMap = map.nestedMap;\n    assertEquals('foxes', nestedMap.animals);\n  },\n  receiveMapWithArrays: function receiveMapWithArrays(map) {\n    var a1 = map.array1;\n    var a2 = map.array2;\n    assertEquals(3, a1.length);\n    assertEquals(2, a2.length);\n    assertEquals(3, a1[0]);\n    assertEquals(9, a2[1]);\n  },\n  receiveMapAndArrayWithNullValues: function receiveMapAndArrayWithNullValues(map, array) {\n    assertEquals(null, map.string);\n    assertEquals(null, map.array);\n    assertEquals(null, map.map);\n    assertEquals(null, array[0]);\n    assertEquals(null, array[1]);\n    assertEquals(null, array[2]);\n  },\n  receiveMapWithMultibyteUTF8CharacterString: function receiveMapWithMultibyteUTF8CharacterString(map) {\n    assertStrictStringEquals(\"\\xA2\", map['two-bytes']);\n    assertStrictStringEquals(\"\\u20AC\", map['three-bytes']);\n    assertStrictStringEquals(\"\\uD83D\\uDE1C\", map['four-bytes']);\n    assertStrictStringEquals(\"\\u017C\\xF3\\u0142\\u0107 g\\u0119\\u015Bl\\u0105 \\u6211 \\uD83D\\uDE0E ja\\u017A\\u0107\", map.mixed);\n  },\n  receiveArrayWithMultibyteUTF8CharacterString: function receiveArrayWithMultibyteUTF8CharacterString(array) {\n    assertTrue(true);\n    assertStrictStringEquals(\"\\xA2\", array[0]);\n    assertStrictStringEquals(\"\\u20AC\", array[1]);\n    assertStrictStringEquals(\"\\uD83D\\uDE1C\", array[2]);\n    assertStrictStringEquals(\"\\u017C\\xF3\\u0142\\u0107 g\\u0119\\u015Bl\\u0105 \\u6211 \\uD83D\\uDE0E ja\\u017A\\u0107\", array[3]);\n  }\n};\nBatchedBridge.registerCallableModule('TestJavaToJSArgumentsModule', TestJavaToJSArgumentsModule);\nmodule.exports = TestJavaToJSArgumentsModule;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/ReactAndroid/src/androidTest/js/TestJavaToJSArgumentsModule.js"],"names":["BatchedBridge","require","assertEquals","assertTrue","strictStringCompare","a","b","length","i","charCodeAt","assertStrictStringEquals","TestJavaToJSArgumentsModule","receiveBasicTypes","str","dbl","bool","null_arg","receiveArrayWithBasicTypes","arr","receiveNestedArray","arr2","arr3","receiveArrayWithMaps","m1","m2","m1k1","m1k2","m2k1","receiveMapWithBasicTypes","map","stringKey","doubleKey","booleanKey","nullKey","receiveNestedMap","nestedMap","animals","receiveMapWithArrays","a1","array1","a2","array2","receiveMapAndArrayWithNullValues","array","string","receiveMapWithMultibyteUTF8CharacterString","mixed","receiveArrayWithMultibyteUTF8CharacterString","registerCallableModule","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\n'use strict';\n\nconst BatchedBridge = require('react-native/Libraries/BatchedBridge/BatchedBridge');\nconst {assertEquals, assertTrue} = require('./Asserts');\n\nfunction strictStringCompare(a, b) {\n  if (typeof a !== 'string' || typeof b !== 'string' || a.length !== b.length) {\n    return false;\n  }\n  for (let i = 0; i < a.length; i++) {\n    if (a.charCodeAt(i) !== b.charCodeAt(i)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction assertStrictStringEquals(a, b) {\n  assertTrue(strictStringCompare(a, b), 'Expected: ' + a + ', received: ' + b);\n}\n\nconst TestJavaToJSArgumentsModule = {\n  receiveBasicTypes: function(str, dbl, bool, null_arg) {\n    assertEquals('foo', str);\n    assertEquals(3.14, dbl);\n    assertEquals(true, bool);\n    assertEquals(null, null_arg);\n  },\n  receiveArrayWithBasicTypes: function(arr) {\n    assertEquals(4, arr.length);\n    assertEquals('red panda', arr[0]);\n    assertEquals(1.19, arr[1]);\n    assertEquals(true, arr[2]);\n    assertEquals(null, arr[3]);\n  },\n  receiveNestedArray: function(arr) {\n    assertEquals(2, arr.length);\n    assertEquals('level1', arr[0]);\n    const arr2 = arr[1];\n    assertEquals('level2', arr2[0]);\n    const arr3 = arr2[1];\n    assertEquals('level3', arr3[0]);\n  },\n  receiveArrayWithMaps: function(arr) {\n    assertEquals(2, arr.length);\n    const m1 = arr[0];\n    const m2 = arr[1];\n    assertEquals('m1v1', m1.m1k1);\n    assertEquals('m1v2', m1.m1k2);\n    assertEquals('m2v1', m2.m2k1);\n  },\n  receiveMapWithBasicTypes: function(map) {\n    assertEquals('stringValue', map.stringKey);\n    assertEquals(3.14, map.doubleKey);\n    assertEquals(true, map.booleanKey);\n    assertEquals(null, map.nullKey);\n  },\n  receiveNestedMap: function(map) {\n    const nestedMap = map.nestedMap;\n    assertEquals('foxes', nestedMap.animals);\n  },\n  receiveMapWithArrays: function(map) {\n    const a1 = map.array1;\n    const a2 = map.array2;\n    assertEquals(3, a1.length);\n    assertEquals(2, a2.length);\n    assertEquals(3, a1[0]);\n    assertEquals(9, a2[1]);\n  },\n  receiveMapAndArrayWithNullValues: function(map, array) {\n    assertEquals(null, map.string);\n    assertEquals(null, map.array);\n    assertEquals(null, map.map);\n\n    assertEquals(null, array[0]);\n    assertEquals(null, array[1]);\n    assertEquals(null, array[2]);\n  },\n  receiveMapWithMultibyteUTF8CharacterString: function(map) {\n    assertStrictStringEquals('\\u00A2', map['two-bytes']);\n    assertStrictStringEquals('\\u20AC', map['three-bytes']);\n    assertStrictStringEquals('\\uD83D\\uDE1C', map['four-bytes']);\n    assertStrictStringEquals(\n      '\\u017C\\u00F3\\u0142\\u0107 g\\u0119\\u015Bl\\u0105 \\u6211 \\uD83D\\uDE0E ja\\u017A\\u0107',\n      map.mixed,\n    );\n  },\n  receiveArrayWithMultibyteUTF8CharacterString: function(array) {\n    assertTrue(true);\n    assertStrictStringEquals('\\u00A2', array[0]);\n    assertStrictStringEquals('\\u20AC', array[1]);\n    assertStrictStringEquals('\\uD83D\\uDE1C', array[2]);\n    assertStrictStringEquals(\n      '\\u017C\\u00F3\\u0142\\u0107 g\\u0119\\u015Bl\\u0105 \\u6211 \\uD83D\\uDE0E ja\\u017A\\u0107',\n      array[3],\n    );\n  },\n};\n\nBatchedBridge.registerCallableModule(\n  'TestJavaToJSArgumentsModule',\n  TestJavaToJSArgumentsModule,\n);\n\nmodule.exports = TestJavaToJSArgumentsModule;\n"]},"metadata":{},"sourceType":"script"}