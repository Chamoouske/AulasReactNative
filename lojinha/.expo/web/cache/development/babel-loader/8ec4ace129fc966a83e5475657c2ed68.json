{"ast":null,"code":"module.exports = {\n  meta: {\n    type: 'problem',\n    docs: {\n      description: 'Ensure that PlatformColor(), DynamicColorIOS(), and ColorAndroid() are passed literals of the expected shape.'\n    },\n    messages: {\n      platformColorArgsLength: 'PlatformColor() must have at least one argument that is a literal.',\n      platformColorArgTypes: 'PlatformColor() every argument must be a literal.',\n      dynamicColorIOSArg: 'DynamicColorIOS() must take a single argument of type Object containing two keys: light and dark.',\n      dynamicColorIOSLight: 'DynamicColorIOS() light value must be either a literal or a PlatformColor() call.',\n      dynamicColorIOSDark: 'DynamicColorIOS() dark value must be either a literal or a PlatformColor() call.',\n      colorAndroidArg: 'ColorAndroid() must take a single argument that is a literal.'\n    },\n    schema: []\n  },\n  create: function create(context) {\n    return {\n      CallExpression: function CallExpression(node) {\n        if (node.callee.name === 'PlatformColor') {\n          var args = node.arguments;\n\n          if (args.length === 0) {\n            context.report({\n              node: node,\n              messageId: 'platformColorArgsLength'\n            });\n            return;\n          }\n\n          if (!args.every(function (arg) {\n            return arg.type === 'Literal';\n          })) {\n            context.report({\n              node: node,\n              messageId: 'platformColorArgTypes'\n            });\n            return;\n          }\n        } else if (node.callee.name === 'DynamicColorIOS') {\n          var _args = node.arguments;\n\n          if (!(_args.length === 1 && _args[0].type === 'ObjectExpression')) {\n            context.report({\n              node: node,\n              messageId: 'dynamicColorIOSArg'\n            });\n            return;\n          }\n\n          var properties = _args[0].properties;\n\n          if (!(properties.length === 2 && properties[0].type === 'Property' && properties[0].key.name === 'light' && properties[1].type === 'Property' && properties[1].key.name === 'dark')) {\n            context.report({\n              node: node,\n              messageId: 'dynamicColorIOSArg'\n            });\n            return;\n          }\n\n          var light = properties[0];\n\n          if (!(light.value.type === 'Literal' || light.value.type === 'CallExpression' && light.value.callee.name === 'PlatformColor')) {\n            context.report({\n              node: node,\n              messageId: 'dynamicColorIOSLight'\n            });\n            return;\n          }\n\n          var dark = properties[1];\n\n          if (!(dark.value.type === 'Literal' || dark.value.type === 'CallExpression' && dark.value.callee.name === 'PlatformColor')) {\n            context.report({\n              node: node,\n              messageId: 'dynamicColorIOSDark'\n            });\n            return;\n          }\n        } else if (node.callee.name === 'ColorAndroid') {\n          var _args2 = node.arguments;\n\n          if (!(_args2.length === 1 && _args2[0].type === 'Literal')) {\n            context.report({\n              node: node,\n              messageId: 'colorAndroidArg'\n            });\n            return;\n          }\n        }\n      }\n    };\n  }\n};","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/packages/eslint-plugin-react-native-community/platform-colors.js"],"names":["module","exports","meta","type","docs","description","messages","platformColorArgsLength","platformColorArgTypes","dynamicColorIOSArg","dynamicColorIOSLight","dynamicColorIOSDark","colorAndroidArg","schema","create","context","CallExpression","node","callee","name","args","arguments","length","report","messageId","every","arg","properties","key","light","value","dark"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nmodule.exports = {\n  meta: {\n    type: 'problem',\n    docs: {\n      description:\n        'Ensure that PlatformColor(), DynamicColorIOS(), and ColorAndroid() are passed literals of the expected shape.',\n    },\n    messages: {\n      platformColorArgsLength:\n        'PlatformColor() must have at least one argument that is a literal.',\n      platformColorArgTypes:\n        'PlatformColor() every argument must be a literal.',\n      dynamicColorIOSArg:\n        'DynamicColorIOS() must take a single argument of type Object containing two keys: light and dark.',\n      dynamicColorIOSLight:\n        'DynamicColorIOS() light value must be either a literal or a PlatformColor() call.',\n      dynamicColorIOSDark:\n        'DynamicColorIOS() dark value must be either a literal or a PlatformColor() call.',\n      colorAndroidArg:\n        'ColorAndroid() must take a single argument that is a literal.',\n    },\n    schema: [],\n  },\n\n  create: function(context) {\n    return {\n      CallExpression: function(node) {\n        if (node.callee.name === 'PlatformColor') {\n          const args = node.arguments;\n          if (args.length === 0) {\n            context.report({\n              node,\n              messageId: 'platformColorArgsLength',\n            });\n            return;\n          }\n          if (!args.every(arg => arg.type === 'Literal')) {\n            context.report({\n              node,\n              messageId: 'platformColorArgTypes',\n            });\n            return;\n          }\n        } else if (node.callee.name === 'DynamicColorIOS') {\n          const args = node.arguments;\n          if (!(args.length === 1 && args[0].type === 'ObjectExpression')) {\n            context.report({\n              node,\n              messageId: 'dynamicColorIOSArg',\n            });\n            return;\n          }\n          const properties = args[0].properties;\n          if (\n            !(\n              properties.length === 2 &&\n              properties[0].type === 'Property' &&\n              properties[0].key.name === 'light' &&\n              properties[1].type === 'Property' &&\n              properties[1].key.name === 'dark'\n            )\n          ) {\n            context.report({\n              node,\n              messageId: 'dynamicColorIOSArg',\n            });\n            return;\n          }\n          const light = properties[0];\n          if (\n            !(\n              light.value.type === 'Literal' ||\n              (light.value.type === 'CallExpression' &&\n                light.value.callee.name === 'PlatformColor')\n            )\n          ) {\n            context.report({\n              node,\n              messageId: 'dynamicColorIOSLight',\n            });\n            return;\n          }\n          const dark = properties[1];\n          if (\n            !(\n              dark.value.type === 'Literal' ||\n              (dark.value.type === 'CallExpression' &&\n                dark.value.callee.name === 'PlatformColor')\n            )\n          ) {\n            context.report({\n              node,\n              messageId: 'dynamicColorIOSDark',\n            });\n            return;\n          }\n        } else if (node.callee.name === 'ColorAndroid') {\n          const args = node.arguments;\n          if (!(args.length === 1 && args[0].type === 'Literal')) {\n            context.report({\n              node,\n              messageId: 'colorAndroidArg',\n            });\n            return;\n          }\n        }\n      },\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"script"}