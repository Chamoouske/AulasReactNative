{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nexports.AUTOMATIC_FIX_LEVELS = void 0;\n\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _ora() {\n  var data = _interopRequireDefault(require(\"ora\"));\n\n  _ora = function _ora() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _healthchecks = require(\"./healthchecks\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar AUTOMATIC_FIX_LEVELS;\nexports.AUTOMATIC_FIX_LEVELS = AUTOMATIC_FIX_LEVELS;\n\n(function (AUTOMATIC_FIX_LEVELS) {\n  AUTOMATIC_FIX_LEVELS[\"ALL_ISSUES\"] = \"ALL_ISSUES\";\n  AUTOMATIC_FIX_LEVELS[\"ERRORS\"] = \"ERRORS\";\n  AUTOMATIC_FIX_LEVELS[\"WARNINGS\"] = \"WARNINGS\";\n})(AUTOMATIC_FIX_LEVELS || (exports.AUTOMATIC_FIX_LEVELS = AUTOMATIC_FIX_LEVELS = {}));\n\nfunction _default(_ref) {\n  var _totalIssuesBasedOnFi;\n\n  var healthchecks, automaticFixLevel, stats, environmentInfo, totalIssuesBasedOnFixLevel, issuesCount, _iterator, _step, category, healthchecksToRun, _iterator2, _step2, healthcheckToRun, spinner;\n\n  return _regeneratorRuntime.async(function _default$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          healthchecks = _ref.healthchecks, automaticFixLevel = _ref.automaticFixLevel, stats = _ref.stats, environmentInfo = _ref.environmentInfo;\n\n          if (process.stdout.isTTY) {\n            process.stdout.moveCursor(0, -6);\n            process.stdout.clearScreenDown();\n          }\n\n          totalIssuesBasedOnFixLevel = (_totalIssuesBasedOnFi = {}, _defineProperty(_totalIssuesBasedOnFi, AUTOMATIC_FIX_LEVELS.ALL_ISSUES, stats.errors + stats.warnings), _defineProperty(_totalIssuesBasedOnFi, AUTOMATIC_FIX_LEVELS.ERRORS, stats.errors), _defineProperty(_totalIssuesBasedOnFi, AUTOMATIC_FIX_LEVELS.WARNINGS, stats.warnings), _totalIssuesBasedOnFi);\n          issuesCount = totalIssuesBasedOnFixLevel[automaticFixLevel];\n\n          _cliTools().logger.log(\"\\nAttempting to fix \" + _chalk().default.bold(issuesCount.toString()) + \" issue\" + (issuesCount > 1 ? 's' : '') + \"...\");\n\n          _iterator = _createForOfIteratorHelperLoose(healthchecks);\n\n        case 6:\n          if ((_step = _iterator()).done) {\n            _context.next = 27;\n            break;\n          }\n\n          category = _step.value;\n          healthchecksToRun = category.healthchecks.filter(function (healthcheck) {\n            if (automaticFixLevel === AUTOMATIC_FIX_LEVELS.ALL_ISSUES) {\n              return healthcheck.needsToBeFixed;\n            }\n\n            if (automaticFixLevel === AUTOMATIC_FIX_LEVELS.ERRORS) {\n              return healthcheck.needsToBeFixed && healthcheck.type === _healthchecks.HEALTHCHECK_TYPES.ERROR;\n            }\n\n            if (automaticFixLevel === AUTOMATIC_FIX_LEVELS.WARNINGS) {\n              return healthcheck.needsToBeFixed && healthcheck.type === _healthchecks.HEALTHCHECK_TYPES.WARNING;\n            }\n\n            return;\n          });\n\n          if (healthchecksToRun.length) {\n            _context.next = 11;\n            break;\n          }\n\n          return _context.abrupt(\"continue\", 25);\n\n        case 11:\n          _cliTools().logger.log(\"\\n\" + _chalk().default.dim(category.label));\n\n          _iterator2 = _createForOfIteratorHelperLoose(healthchecksToRun);\n\n        case 13:\n          if ((_step2 = _iterator2()).done) {\n            _context.next = 25;\n            break;\n          }\n\n          healthcheckToRun = _step2.value;\n          spinner = (0, _ora().default)({\n            prefixText: '',\n            text: healthcheckToRun.label\n          }).start();\n          _context.prev = 16;\n          _context.next = 19;\n          return _regeneratorRuntime.awrap(healthcheckToRun.runAutomaticFix({\n            loader: spinner,\n            environmentInfo: environmentInfo\n          }));\n\n        case 19:\n          _context.next = 23;\n          break;\n\n        case 21:\n          _context.prev = 21;\n          _context.t0 = _context[\"catch\"](16);\n\n        case 23:\n          _context.next = 13;\n          break;\n\n        case 25:\n          _context.next = 6;\n          break;\n\n        case 27:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[16, 21]], Promise);\n}","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli/build/commands/doctor/runAutomaticFix.js"],"names":["Object","defineProperty","exports","value","default","_default","AUTOMATIC_FIX_LEVELS","_chalk","data","_interopRequireDefault","require","_ora","_cliTools","_healthchecks","obj","__esModule","healthchecks","automaticFixLevel","stats","environmentInfo","process","stdout","isTTY","moveCursor","clearScreenDown","totalIssuesBasedOnFixLevel","ALL_ISSUES","errors","warnings","ERRORS","WARNINGS","issuesCount","logger","log","bold","toString","category","healthchecksToRun","filter","healthcheck","needsToBeFixed","type","HEALTHCHECK_TYPES","ERROR","WARNING","length","dim","label","healthcheckToRun","spinner","prefixText","text","start","runAutomaticFix","loader"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nexports.AUTOMATIC_FIX_LEVELS = void 0;\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require(\"chalk\"));\n\n  _chalk = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _ora() {\n  const data = _interopRequireDefault(require(\"ora\"));\n\n  _ora = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _healthchecks = require(\"./healthchecks\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nlet AUTOMATIC_FIX_LEVELS;\nexports.AUTOMATIC_FIX_LEVELS = AUTOMATIC_FIX_LEVELS;\n\n(function (AUTOMATIC_FIX_LEVELS) {\n  AUTOMATIC_FIX_LEVELS[\"ALL_ISSUES\"] = \"ALL_ISSUES\";\n  AUTOMATIC_FIX_LEVELS[\"ERRORS\"] = \"ERRORS\";\n  AUTOMATIC_FIX_LEVELS[\"WARNINGS\"] = \"WARNINGS\";\n})(AUTOMATIC_FIX_LEVELS || (exports.AUTOMATIC_FIX_LEVELS = AUTOMATIC_FIX_LEVELS = {}));\n\nasync function _default({\n  healthchecks,\n  automaticFixLevel,\n  stats,\n  environmentInfo\n}) {\n  // Remove the fix options from screen\n  if (process.stdout.isTTY) {\n    // @ts-ignore\n    process.stdout.moveCursor(0, -6); // @ts-ignore\n\n    process.stdout.clearScreenDown();\n  }\n\n  const totalIssuesBasedOnFixLevel = {\n    [AUTOMATIC_FIX_LEVELS.ALL_ISSUES]: stats.errors + stats.warnings,\n    [AUTOMATIC_FIX_LEVELS.ERRORS]: stats.errors,\n    [AUTOMATIC_FIX_LEVELS.WARNINGS]: stats.warnings\n  };\n  const issuesCount = totalIssuesBasedOnFixLevel[automaticFixLevel];\n\n  _cliTools().logger.log(`\\nAttempting to fix ${_chalk().default.bold(issuesCount.toString())} issue${issuesCount > 1 ? 's' : ''}...`);\n\n  for (const category of healthchecks) {\n    const healthchecksToRun = category.healthchecks.filter(healthcheck => {\n      if (automaticFixLevel === AUTOMATIC_FIX_LEVELS.ALL_ISSUES) {\n        return healthcheck.needsToBeFixed;\n      }\n\n      if (automaticFixLevel === AUTOMATIC_FIX_LEVELS.ERRORS) {\n        return healthcheck.needsToBeFixed && healthcheck.type === _healthchecks.HEALTHCHECK_TYPES.ERROR;\n      }\n\n      if (automaticFixLevel === AUTOMATIC_FIX_LEVELS.WARNINGS) {\n        return healthcheck.needsToBeFixed && healthcheck.type === _healthchecks.HEALTHCHECK_TYPES.WARNING;\n      }\n\n      return;\n    });\n\n    if (!healthchecksToRun.length) {\n      continue;\n    }\n\n    _cliTools().logger.log(`\\n${_chalk().default.dim(category.label)}`);\n\n    for (const healthcheckToRun of healthchecksToRun) {\n      const spinner = (0, _ora().default)({\n        prefixText: '',\n        text: healthcheckToRun.label\n      }).start();\n\n      try {\n        await healthcheckToRun.runAutomaticFix({\n          loader: spinner,\n          environmentInfo\n        });\n      } catch (error) {// TODO: log the error in a meaningful way\n      }\n    }\n  }\n}\n\n//# sourceMappingURL=runAutomaticFix.js.map"]},"metadata":{},"sourceType":"script"}