{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { CodedError } from '@unimodules/core';\nimport ExpoFontLoader from \"./ExpoFontLoader\";\nimport { FontDisplay } from \"./Font\";\n\nfunction uriFromFontSource(asset) {\n  if (typeof asset === 'string') {\n    return asset || null;\n  } else if (typeof asset === 'object') {\n    return asset.uri || asset.localUri || null;\n  }\n\n  return null;\n}\n\nfunction displayFromFontSource(asset) {\n  return asset.display || FontDisplay.AUTO;\n}\n\nexport function fontFamilyNeedsScoping(name) {\n  return false;\n}\nexport function getAssetForSource(source) {\n  var uri = uriFromFontSource(source);\n  var display = displayFromFontSource(source);\n\n  if (!uri || typeof uri !== 'string') {\n    throwInvalidSourceError(uri);\n  }\n\n  return {\n    uri: uri,\n    display: display\n  };\n}\n\nfunction throwInvalidSourceError(source) {\n  var type = typeof source;\n  if (type === 'object') type = JSON.stringify(source, null, 2);\n  throw new CodedError(\"ERR_FONT_SOURCE\", \"Expected font asset of type `string | FontResource | Asset` (number is not supported on web) instead got: \" + type);\n}\n\nexport function loadSingleFontAsync(name, input) {\n  return _regeneratorRuntime.async(function loadSingleFontAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (typeof input !== 'object' || typeof input.uri !== 'string' || input.downloadAsync) {\n            throwInvalidSourceError(input);\n          }\n\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(ExpoFontLoader.loadAsync(name, input));\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getNativeFontName(name) {\n  return name;\n}","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/expo-font/src/FontLoader.web.ts"],"names":["CodedError","ExpoFontLoader","FontDisplay","uriFromFontSource","asset","uri","localUri","displayFromFontSource","display","AUTO","fontFamilyNeedsScoping","name","getAssetForSource","source","throwInvalidSourceError","type","JSON","stringify","loadSingleFontAsync","input","downloadAsync","loadAsync","getNativeFontName"],"mappings":";AAAA,SAASA,UAAT,QAA2B,kBAA3B;AAGA,OAAOC,cAAP;AACA,SAASC,WAAT;;AAGA,SAASC,iBAAT,CAA2BC,KAA3B,EAAsD;AACpD,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAOA,KAAK,IAAI,IAAhB;AACD,GAFD,MAEO,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AACpC,WAAOA,KAAK,CAACC,GAAN,IAAaD,KAAK,CAACE,QAAnB,IAA+B,IAAtC;AACD;;AACD,SAAO,IAAP;AACD;;AAED,SAASC,qBAAT,CAA+BH,KAA/B,EAAoE;AAClE,SAAOA,KAAK,CAACI,OAAN,IAAiBN,WAAW,CAACO,IAApC;AACD;;AAED,OAAO,SAASC,sBAAT,CAAgCC,IAAhC,EAAuD;AAC5D,SAAO,KAAP;AACD;AAED,OAAO,SAASC,iBAAT,CAA2BC,MAA3B,EAAqE;AAC1E,MAAMR,GAAG,GAAGF,iBAAiB,CAACU,MAAD,CAA7B;AACA,MAAML,OAAO,GAAGD,qBAAqB,CAACM,MAAD,CAArC;;AAEA,MAAI,CAACR,GAAD,IAAQ,OAAOA,GAAP,KAAe,QAA3B,EAAqC;AACnCS,IAAAA,uBAAuB,CAACT,GAAD,CAAvB;AACD;;AAED,SAAO;AACLA,IAAAA,GAAG,EAAEA,GADA;AAELG,IAAAA,OAAO,EAAPA;AAFK,GAAP;AAID;;AAED,SAASM,uBAAT,CAAiCD,MAAjC,EAAqD;AACnD,MAAIE,IAAY,GAAG,OAAOF,MAA1B;AACA,MAAIE,IAAI,KAAK,QAAb,EAAuBA,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAeJ,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAP;AACvB,QAAM,IAAIb,UAAJ,mIAE2Ge,IAF3G,CAAN;AAID;;AAED,OAAO,SAAeG,mBAAf,CACLP,IADK,EAELQ,KAFK;AAAA;AAAA;AAAA;AAAA;AAIL,cAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6B,OAAOA,KAAK,CAACd,GAAb,KAAqB,QAAlD,IAA+Dc,KAAD,CAAeC,aAAjF,EAAgG;AAC9FN,YAAAA,uBAAuB,CAACK,KAAD,CAAvB;AACD;;AANI;AAAA,2CAQClB,cAAc,CAACoB,SAAf,CAAyBV,IAAzB,EAA+BQ,KAA/B,CARD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWP,OAAO,SAASG,iBAAT,CAA2BX,IAA3B,EAAiD;AACtD,SAAOA,IAAP;AACD","sourcesContent":["import { CodedError } from '@unimodules/core';\nimport { Asset } from 'expo-asset';\n\nimport ExpoFontLoader from './ExpoFontLoader';\nimport { FontDisplay } from './Font';\nimport { FontResource, FontSource } from './Font.types';\n\nfunction uriFromFontSource(asset: any): string | null {\n  if (typeof asset === 'string') {\n    return asset || null;\n  } else if (typeof asset === 'object') {\n    return asset.uri || asset.localUri || null;\n  }\n  return null;\n}\n\nfunction displayFromFontSource(asset: any): FontDisplay | undefined {\n  return asset.display || FontDisplay.AUTO;\n}\n\nexport function fontFamilyNeedsScoping(name: string): boolean {\n  return false;\n}\n\nexport function getAssetForSource(source: FontSource): Asset | FontResource {\n  const uri = uriFromFontSource(source);\n  const display = displayFromFontSource(source);\n\n  if (!uri || typeof uri !== 'string') {\n    throwInvalidSourceError(uri);\n  }\n\n  return {\n    uri: uri!,\n    display,\n  };\n}\n\nfunction throwInvalidSourceError(source: any): never {\n  let type: string = typeof source;\n  if (type === 'object') type = JSON.stringify(source, null, 2);\n  throw new CodedError(\n    `ERR_FONT_SOURCE`,\n    `Expected font asset of type \\`string | FontResource | Asset\\` (number is not supported on web) instead got: ${type}`\n  );\n}\n\nexport async function loadSingleFontAsync(\n  name: string,\n  input: Asset | FontResource\n): Promise<void> {\n  if (typeof input !== 'object' || typeof input.uri !== 'string' || (input as any).downloadAsync) {\n    throwInvalidSourceError(input);\n  }\n\n  await ExpoFontLoader.loadAsync(name, input);\n}\n\nexport function getNativeFontName(name: string): string {\n  return name;\n}\n"]},"metadata":{},"sourceType":"module"}