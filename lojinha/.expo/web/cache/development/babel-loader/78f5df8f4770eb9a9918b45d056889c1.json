{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.removeFileIfExists = exports.readFileWithFallback = exports.createDirAndWriteFile = void 0;\n\nvar fs_extra_1 = __importDefault(require(\"fs-extra\"));\n\nvar path_1 = __importDefault(require(\"path\"));\n\nfunction createDirAndWriteFile(filePath, content) {\n  return _regeneratorRuntime.async(function createDirAndWriteFile$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fs_extra_1.default.pathExists(path_1.default.dirname(filePath)));\n\n        case 2:\n          if (_context.sent) {\n            _context.next = 5;\n            break;\n          }\n\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(fs_extra_1.default.mkdirp(path_1.default.dirname(filePath)));\n\n        case 5:\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(fs_extra_1.default.writeFile(filePath, content));\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.createDirAndWriteFile = createDirAndWriteFile;\n\nfunction readFileWithFallback(filePath, fallbackContent) {\n  return _regeneratorRuntime.async(function readFileWithFallback$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(fs_extra_1.default.pathExists(filePath));\n\n        case 2:\n          if (!_context2.sent) {\n            _context2.next = 4;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", fs_extra_1.default.readFile(filePath, 'utf-8'));\n\n        case 4:\n          if (!fallbackContent) {\n            _context2.next = 6;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", fallbackContent);\n\n        case 6:\n          throw Error(\"File not found \" + filePath);\n\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.readFileWithFallback = readFileWithFallback;\n\nfunction removeFileIfExists(filePath) {\n  return _regeneratorRuntime.async(function removeFileIfExists$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(fs_extra_1.default.pathExists(filePath));\n\n        case 2:\n          if (!_context3.sent) {\n            _context3.next = 5;\n            break;\n          }\n\n          _context3.next = 5;\n          return _regeneratorRuntime.awrap(fs_extra_1.default.unlink(filePath));\n\n        case 5:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.removeFileIfExists = removeFileIfExists;","map":{"version":3,"sources":["../../src/utils/file-utils.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,IAAA,UAAA,GAAA,eAAA,CAAA,OAAA,CAAA,UAAA,CAAA,CAAA;;AACA,IAAA,MAAA,GAAA,eAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;AAKO,SAAe,qBAAf,CAAqC,QAArC,EAAuD,OAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACO,UAAA,CAAA,OAAA,CAAG,UAAH,CAAc,MAAA,CAAA,OAAA,CAAK,OAAL,CAAa,QAAb,CAAd,CADP;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAEG,UAAA,CAAA,OAAA,CAAG,MAAH,CAAU,MAAA,CAAA,OAAA,CAAK,OAAL,CAAa,QAAb,CAAV,CAFH;;AAAA;AAAA;AAAA,2CAIC,UAAA,CAAA,OAAA,CAAG,SAAH,CAAa,QAAb,EAAuB,OAAvB,CAJD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAP,OAAA,CAAA,qBAAA,GAAA,qBAAA;;AAUO,SAAe,oBAAf,CAAoC,QAApC,EAAsD,eAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACK,UAAA,CAAA,OAAA,CAAG,UAAH,CAAc,QAAd,CADL;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,4CAEI,UAAA,CAAA,OAAA,CAAG,QAAH,CAAY,QAAZ,EAAsB,OAAtB,CAFJ;;AAAA;AAAA,eAID,eAJC;AAAA;AAAA;AAAA;;AAAA,4CAKI,eALJ;;AAAA;AAAA,gBAOC,KAAK,qBAAmB,QAAnB,CAPN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAP,OAAA,CAAA,oBAAA,GAAA,oBAAA;;AAUO,SAAe,kBAAf,CAAkC,QAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACK,UAAA,CAAA,OAAA,CAAG,UAAH,CAAc,QAAd,CADL;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAEG,UAAA,CAAA,OAAA,CAAG,MAAH,CAAU,QAAV,CAFH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAP,OAAA,CAAA,kBAAA,GAAA,kBAAA","sourcesContent":["import fs from 'fs-extra';\nimport path from 'path';\n\n/**\n * Creates file with given content with possible parent directories creation.\n */\nexport async function createDirAndWriteFile(filePath: string, content: string) {\n  if (!(await fs.pathExists(path.dirname(filePath)))) {\n    await fs.mkdirp(path.dirname(filePath));\n  }\n  await fs.writeFile(filePath, content);\n}\n\n/**\n * Reads given file as UTF-8 with fallback to given content when file is not found.\n */\nexport async function readFileWithFallback(filePath: string, fallbackContent?: string) {\n  if (await fs.pathExists(filePath)) {\n    return fs.readFile(filePath, 'utf-8');\n  }\n  if (fallbackContent) {\n    return fallbackContent;\n  }\n  throw Error(`File not found ${filePath}`);\n}\n\nexport async function removeFileIfExists(filePath: string) {\n  if (await fs.pathExists(filePath)) {\n    await fs.unlink(filePath);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}