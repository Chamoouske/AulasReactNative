{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\n\nvar FromJsonValidator = function FromJsonValidator() {\n  _classCallCheck(this, FromJsonValidator);\n};\n\nexport { FromJsonValidator as default };","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@expo/configure-splash-screen/build/validators/FromJsonValidator.d.ts"],"names":["FromJsonValidator"],"mappings":";;IAIqBA,iB;;;;SAAAA,iB","sourcesContent":["import type { JsonShape, OptionalPromise, NonPrimitiveAndNonArrayKeys, DeepRequired, IsNever } from './types';\n/**\n * This class is responsible for validating configuration object in a form of json and produce validated object based on validating `rules` added via `addRule` method.\n */\nexport default class FromJsonValidator<From extends JsonShape<To>, To extends object> {\n    /**\n     *  Records:\n     * - keys are stringified array paths to the properties\n     * - values are functions accepting\n     */\n    private rules;\n    /**\n     * Add rule that determined what property is copied from JSON object into actual validated object.\n     * @param name an array describing property path (just like in lodash.get function)\n     * @param validatingFunction optional parameter that is responsible for actual type conversion and semantic checking (e.g. check is given string is actually a path or a valid color). Not providing it results in copying over value without any semantic checking.\n     */\n    addRule<TK1 extends NonPrimitiveAndNonArrayKeys<DeepRequired<To>>, TK2 extends NonPrimitiveAndNonArrayKeys<DeepRequired<To>[TK1]>, TK3 extends NonPrimitiveAndNonArrayKeys<DeepRequired<To>[TK1][TK2]>>(name: [TK1] | [TK1, TK2] | [TK1, TK2, TK3], validatingFunction?: (value: IsNever<TK3, IsNever<TK2, DeepRequired<From>[TK1], DeepRequired<From>[TK1][TK2]>, DeepRequired<From>[TK1][TK2][TK3]>, config: To) => OptionalPromise<IsNever<TK3, IsNever<TK2, DeepRequired<To>[TK1], DeepRequired<To>[TK1][TK2]>, DeepRequired<To>[TK1][TK2][TK3]>>): this;\n    validate(jsonConfig: From): Promise<To>;\n    private formatErrors;\n}\n"]},"metadata":{},"sourceType":"module"}