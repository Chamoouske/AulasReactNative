{"ast":null,"code":"'use strict';\n\nexport var PlatformColor = function PlatformColor() {\n  for (var _len = arguments.length, names = new Array(_len), _key = 0; _key < _len; _key++) {\n    names[_key] = arguments[_key];\n  }\n\n  return {\n    resource_paths: names\n  };\n};\nexport var ColorAndroidPrivate = function ColorAndroidPrivate(color) {\n  return {\n    resource_paths: [color]\n  };\n};\nexport var normalizeColorObject = function normalizeColorObject(color) {\n  if ('resource_paths' in color) {\n    return color;\n  }\n\n  return null;\n};\nexport var processColorObject = function processColorObject(color) {\n  return color;\n};","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/StyleSheet/PlatformColorValueTypes.android.js"],"names":["PlatformColor","names","resource_paths","ColorAndroidPrivate","color","normalizeColorObject","processColorObject"],"mappings":"AAUA;;AASA,OAAO,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,GAAyC;AAAA,oCAArCC,KAAqC;AAArCA,IAAAA,KAAqC;AAAA;;AACpE,SAAO;AAACC,IAAAA,cAAc,EAAED;AAAjB,GAAP;AACD,CAFM;AAIP,OAAO,IAAME,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,KAAD,EAA+B;AAChE,SAAO;AAACF,IAAAA,cAAc,EAAE,CAACE,KAAD;AAAjB,GAAP;AACD,CAFM;AAIP,OAAO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAClCD,KADkC,EAET;AACzB,MAAI,oBAAoBA,KAAxB,EAA+B;AAC7B,WAAOA,KAAP;AACD;;AACD,SAAO,IAAP;AACD,CAPM;AASP,OAAO,IAAME,kBAAkB,GAAG,SAArBA,kBAAqB,CAChCF,KADgC,EAEV;AACtB,SAAOA,KAAP;AACD,CAJM","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nimport type {ColorValue} from './StyleSheetTypes';\nimport type {ProcessedColorValue} from './processColor';\n\nexport opaque type NativeColorValue = {\n  resource_paths?: Array<string>,\n};\n\nexport const PlatformColor = (...names: Array<string>): ColorValue => {\n  return {resource_paths: names};\n};\n\nexport const ColorAndroidPrivate = (color: string): ColorValue => {\n  return {resource_paths: [color]};\n};\n\nexport const normalizeColorObject = (\n  color: NativeColorValue,\n): ?ProcessedColorValue => {\n  if ('resource_paths' in color) {\n    return color;\n  }\n  return null;\n};\n\nexport const processColorObject = (\n  color: NativeColorValue,\n): ?NativeColorValue => {\n  return color;\n};\n"]},"metadata":{},"sourceType":"module"}