{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.brewInstall = brewInstall;\n\nfunction _execa() {\n  var data = _interopRequireDefault(require(\"execa\"));\n\n  _execa = function _execa() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _common = require(\"../commands/doctor/healthchecks/common\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction brewInstall(_ref) {\n  var pkg, label, loader, onSuccess, onFail;\n  return _regeneratorRuntime.async(function brewInstall$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          pkg = _ref.pkg, label = _ref.label, loader = _ref.loader, onSuccess = _ref.onSuccess, onFail = _ref.onFail;\n          loader.start(label);\n          _context.prev = 2;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap((0, _execa().default)('brew', ['install', pkg]));\n\n        case 5:\n          if (!(typeof onSuccess === 'function')) {\n            _context.next = 7;\n            break;\n          }\n\n          return _context.abrupt(\"return\", onSuccess());\n\n        case 7:\n          return _context.abrupt(\"return\", loader.succeed());\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](2);\n\n          if (!(typeof onFail === 'function')) {\n            _context.next = 14;\n            break;\n          }\n\n          return _context.abrupt(\"return\", onFail());\n\n        case 14:\n          (0, _common.logError)({\n            healthcheck: label || pkg,\n            loader: loader,\n            error: _context.t0,\n            command: \"brew install \" + pkg\n          });\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[2, 10]], Promise);\n}","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli/build/tools/brewInstall.js"],"names":["Object","defineProperty","exports","value","brewInstall","_execa","data","_interopRequireDefault","require","_common","obj","__esModule","default","pkg","label","loader","onSuccess","onFail","start","succeed","logError","healthcheck","error","command"],"mappings":"AAAA;;;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,WAAR,GAAsBA,WAAtB;;AAEA,SAASC,MAAT,GAAkB;AAChB,MAAMC,IAAI,GAAGC,sBAAsB,CAACC,OAAO,CAAC,OAAD,CAAR,CAAnC;;AAEAH,EAAAA,MAAM,GAAG,kBAAY;AACnB,WAAOC,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,IAAIG,OAAO,GAAGD,OAAO,0CAArB;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEE,IAAAA,OAAO,EAAEF;AAAX,GAArC;AAAwD;;AAE/F,SAAeN,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACES,UAAAA,GADF,QACEA,GADF,EAEEC,KAFF,QAEEA,KAFF,EAGEC,MAHF,QAGEA,MAHF,EAIEC,SAJF,QAIEA,SAJF,EAKEC,MALF,QAKEA,MALF;AAOEF,UAAAA,MAAM,CAACG,KAAP,CAAaJ,KAAb;AAPF;AAAA;AAAA,2CAUU,CAAC,GAAGT,MAAM,GAAGO,OAAb,EAAsB,MAAtB,EAA8B,CAAC,SAAD,EAAYC,GAAZ,CAA9B,CAVV;;AAAA;AAAA,gBAYQ,OAAOG,SAAP,KAAqB,UAZ7B;AAAA;AAAA;AAAA;;AAAA,2CAaaA,SAAS,EAbtB;;AAAA;AAAA,2CAgBWD,MAAM,CAACI,OAAP,EAhBX;;AAAA;AAAA;AAAA;;AAAA,gBAkBQ,OAAOF,MAAP,KAAkB,UAlB1B;AAAA;AAAA;AAAA;;AAAA,2CAmBaA,MAAM,EAnBnB;;AAAA;AAsBI,WAAC,GAAGR,OAAO,CAACW,QAAZ,EAAsB;AACpBC,YAAAA,WAAW,EAAEP,KAAK,IAAID,GADF;AAEpBE,YAAAA,MAAM,EAANA,MAFoB;AAGpBO,YAAAA,KAAK,aAHe;AAIpBC,YAAAA,OAAO,oBAAkBV;AAJL,WAAtB;;AAtBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.brewInstall = brewInstall;\n\nfunction _execa() {\n  const data = _interopRequireDefault(require(\"execa\"));\n\n  _execa = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _common = require(\"../commands/doctor/healthchecks/common\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nasync function brewInstall({\n  pkg,\n  label,\n  loader,\n  onSuccess,\n  onFail\n}) {\n  loader.start(label);\n\n  try {\n    await (0, _execa().default)('brew', ['install', pkg]);\n\n    if (typeof onSuccess === 'function') {\n      return onSuccess();\n    }\n\n    return loader.succeed();\n  } catch (error) {\n    if (typeof onFail === 'function') {\n      return onFail();\n    }\n\n    (0, _common.logError)({\n      healthcheck: label || pkg,\n      loader,\n      error,\n      command: `brew install ${pkg}`\n    });\n  }\n}\n\n//# sourceMappingURL=brewInstall.js.map"]},"metadata":{},"sourceType":"script"}