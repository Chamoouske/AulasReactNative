{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction parseIOSDevicesList(text) {\n  var devices = [];\n  text.split('\\n').forEach(function (line) {\n    var device = line.match(/(.*?) (\\(([0-9\\.]+)\\) )?\\[([0-9A-F-]+)\\]( \\(Simulator\\))?/i);\n\n    if (device) {\n      var _device = _slicedToArray(device, 6),\n          name = _device[1],\n          version = _device[3],\n          udid = _device[4],\n          isSimulator = _device[5];\n\n      var metadata = {\n        name: name,\n        udid: udid\n      };\n\n      if (version) {\n        metadata.version = version;\n        metadata.type = isSimulator ? 'simulator' : 'device';\n      } else {\n        metadata.type = 'catalyst';\n      }\n\n      devices.push(metadata);\n    }\n  });\n  return devices;\n}\n\nvar _default = parseIOSDevicesList;\nexports.default = _default;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli-platform-ios/build/commands/runIOS/parseIOSDevicesList.js"],"names":["Object","defineProperty","exports","value","default","parseIOSDevicesList","text","devices","split","forEach","line","device","match","name","version","udid","isSimulator","metadata","type","push","_default"],"mappings":"AAAA;;;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAwBA,SAASC,mBAAT,CAA6BC,IAA7B,EAAmC;AACjC,MAAMC,OAAO,GAAG,EAAhB;AACAD,EAAAA,IAAI,CAACE,KAAL,CAAW,IAAX,EAAiBC,OAAjB,CAAyB,UAAAC,IAAI,EAAI;AAC/B,QAAMC,MAAM,GAAGD,IAAI,CAACE,KAAL,CAAW,4DAAX,CAAf;;AAEA,QAAID,MAAJ,EAAY;AAAA,mCACoCA,MADpC;AAAA,UACDE,IADC;AAAA,UACMC,OADN;AAAA,UACeC,IADf;AAAA,UACqBC,WADrB;;AAEV,UAAMC,QAAQ,GAAG;AACfJ,QAAAA,IAAI,EAAJA,IADe;AAEfE,QAAAA,IAAI,EAAJA;AAFe,OAAjB;;AAKA,UAAID,OAAJ,EAAa;AACXG,QAAAA,QAAQ,CAACH,OAAT,GAAmBA,OAAnB;AACAG,QAAAA,QAAQ,CAACC,IAAT,GAAgBF,WAAW,GAAG,WAAH,GAAiB,QAA5C;AACD,OAHD,MAGO;AACLC,QAAAA,QAAQ,CAACC,IAAT,GAAgB,UAAhB;AACD;;AAEDX,MAAAA,OAAO,CAACY,IAAR,CAAaF,QAAb;AACD;AACF,GAnBD;AAoBA,SAAOV,OAAP;AACD;;AAED,IAAIa,QAAQ,GAAGf,mBAAf;AACAH,OAAO,CAACE,OAAR,GAAkBgB,QAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * Parses the output of the `xcrun instruments -s` command and returns metadata\n * about available iOS simulators and physical devices, as well as host Mac for\n * Catalyst purposes.\n *\n * Expected text looks roughly like this:\n *\n * ```\n * Known Devices:\n * this-mac-device [UDID]\n * A Physical Device (OS Version) [UDID]\n * A Simulator Device (OS Version) [UDID] (Simulator)\n * ```\n */\nfunction parseIOSDevicesList(text) {\n  const devices = [];\n  text.split('\\n').forEach(line => {\n    const device = line.match(/(.*?) (\\(([0-9\\.]+)\\) )?\\[([0-9A-F-]+)\\]( \\(Simulator\\))?/i);\n\n    if (device) {\n      const [, name,, version, udid, isSimulator] = device;\n      const metadata = {\n        name,\n        udid\n      };\n\n      if (version) {\n        metadata.version = version;\n        metadata.type = isSimulator ? 'simulator' : 'device';\n      } else {\n        metadata.type = 'catalyst';\n      }\n\n      devices.push(metadata);\n    }\n  });\n  return devices;\n}\n\nvar _default = parseIOSDevicesList;\nexports.default = _default;\n\n//# sourceMappingURL=parseIOSDevicesList.js.map"]},"metadata":{},"sourceType":"script"}