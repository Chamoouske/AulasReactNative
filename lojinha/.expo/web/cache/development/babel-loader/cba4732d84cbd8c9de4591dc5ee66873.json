{"ast":null,"code":"var _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nmodule.exports = {\n  meta: {\n    type: 'problem',\n    docs: {\n      description: 'disallow Haste module names in import statements and require calls'\n    },\n    schema: []\n  },\n  create: function create(context) {\n    return {\n      ImportDeclaration: function ImportDeclaration(node) {\n        checkImportForHaste(context, node.source.value, node.source);\n      },\n      CallExpression: function CallExpression(node) {\n        if (isStaticRequireCall(node)) {\n          var _node$arguments = _slicedToArray(node.arguments, 1),\n              firstArgument = _node$arguments[0];\n\n          checkImportForHaste(context, firstArgument.value, firstArgument);\n        }\n      }\n    };\n  }\n};\n\nfunction checkImportForHaste(context, importPath, node) {\n  if (isLikelyHasteModuleName(importPath)) {\n    context.report({\n      node: node,\n      message: \"\\\"\" + importPath + \"\\\" appears to be a Haste module name. Use path-based imports instead.\"\n    });\n  }\n}\n\nfunction isLikelyHasteModuleName(importPath) {\n  return !importPath.startsWith('.') && !importPath.includes('/') && /[A-Z]/.test(importPath);\n}\n\nfunction isStaticRequireCall(node) {\n  return node && node.callee && node.callee.type === 'Identifier' && node.callee.name === 'require' && node.arguments.length === 1 && node.arguments[0].type === 'Literal' && typeof node.arguments[0].value === 'string';\n}","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/packages/eslint-plugin-react-native-community/no-haste-imports.js"],"names":["module","exports","meta","type","docs","description","schema","create","context","ImportDeclaration","node","checkImportForHaste","source","value","CallExpression","isStaticRequireCall","arguments","firstArgument","importPath","isLikelyHasteModuleName","report","message","startsWith","includes","test","callee","name","length"],"mappings":";;AASAA,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,IAAI,EAAE;AACJC,IAAAA,IAAI,EAAE,SADF;AAEJC,IAAAA,IAAI,EAAE;AACJC,MAAAA,WAAW,EACT;AAFE,KAFF;AAMJC,IAAAA,MAAM,EAAE;AANJ,GADS;AAUfC,EAAAA,MAVe,kBAURC,OAVQ,EAUC;AACd,WAAO;AACLC,MAAAA,iBADK,6BACaC,IADb,EACmB;AACtBC,QAAAA,mBAAmB,CAACH,OAAD,EAAUE,IAAI,CAACE,MAAL,CAAYC,KAAtB,EAA6BH,IAAI,CAACE,MAAlC,CAAnB;AACD,OAHI;AAILE,MAAAA,cAJK,0BAIUJ,IAJV,EAIgB;AACnB,YAAIK,mBAAmB,CAACL,IAAD,CAAvB,EAA+B;AAAA,+CACLA,IAAI,CAACM,SADA;AAAA,cACtBC,aADsB;;AAE7BN,UAAAA,mBAAmB,CAACH,OAAD,EAAUS,aAAa,CAACJ,KAAxB,EAA+BI,aAA/B,CAAnB;AACD;AACF;AATI,KAAP;AAWD;AAtBc,CAAjB;;AAyBA,SAASN,mBAAT,CAA6BH,OAA7B,EAAsCU,UAAtC,EAAkDR,IAAlD,EAAwD;AACtD,MAAIS,uBAAuB,CAACD,UAAD,CAA3B,EAAyC;AACvCV,IAAAA,OAAO,CAACY,MAAR,CAAe;AACbV,MAAAA,IAAI,EAAJA,IADa;AAEbW,MAAAA,OAAO,SAAMH,UAAN;AAFM,KAAf;AAID;AACF;;AAED,SAASC,uBAAT,CAAiCD,UAAjC,EAA6C;AAS3C,SAEE,CAACA,UAAU,CAACI,UAAX,CAAsB,GAAtB,CAAD,IAEA,CAACJ,UAAU,CAACK,QAAX,CAAoB,GAApB,CAFD,IAIA,QAAQC,IAAR,CAAaN,UAAb,CANF;AAQD;;AAED,SAASH,mBAAT,CAA6BL,IAA7B,EAAmC;AACjC,SACEA,IAAI,IACJA,IAAI,CAACe,MADL,IAEAf,IAAI,CAACe,MAAL,CAAYtB,IAAZ,KAAqB,YAFrB,IAGAO,IAAI,CAACe,MAAL,CAAYC,IAAZ,KAAqB,SAHrB,IAIAhB,IAAI,CAACM,SAAL,CAAeW,MAAf,KAA0B,CAJ1B,IAKAjB,IAAI,CAACM,SAAL,CAAe,CAAf,EAAkBb,IAAlB,KAA2B,SAL3B,IAMA,OAAOO,IAAI,CAACM,SAAL,CAAe,CAAf,EAAkBH,KAAzB,KAAmC,QAPrC;AASD","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nmodule.exports = {\n  meta: {\n    type: 'problem',\n    docs: {\n      description:\n        'disallow Haste module names in import statements and require calls',\n    },\n    schema: [],\n  },\n\n  create(context) {\n    return {\n      ImportDeclaration(node) {\n        checkImportForHaste(context, node.source.value, node.source);\n      },\n      CallExpression(node) {\n        if (isStaticRequireCall(node)) {\n          const [firstArgument] = node.arguments;\n          checkImportForHaste(context, firstArgument.value, firstArgument);\n        }\n      },\n    };\n  },\n};\n\nfunction checkImportForHaste(context, importPath, node) {\n  if (isLikelyHasteModuleName(importPath)) {\n    context.report({\n      node,\n      message: `\"${importPath}\" appears to be a Haste module name. Use path-based imports instead.`,\n    });\n  }\n}\n\nfunction isLikelyHasteModuleName(importPath) {\n  // Our heuristic assumes an import path is a Haste module name if it is not a\n  // path and doesn't appear to be an npm package. For several years, npm has\n  // disallowed uppercase characters in package names.\n  //\n  // This heuristic has a ~1% false negative rate for the filenames in React\n  // Native, which is acceptable since the linter will not complain wrongly and\n  // the rate is so low. False negatives that slip through will be caught by\n  // tests with Haste disabled.\n  return (\n    // Exclude relative paths\n    !importPath.startsWith('.') &&\n    // Exclude package-internal paths and scoped packages\n    !importPath.includes('/') &&\n    // Include camelCase and UpperCamelCase\n    /[A-Z]/.test(importPath)\n  );\n}\n\nfunction isStaticRequireCall(node) {\n  return (\n    node &&\n    node.callee &&\n    node.callee.type === 'Identifier' &&\n    node.callee.name === 'require' &&\n    node.arguments.length === 1 &&\n    node.arguments[0].type === 'Literal' &&\n    typeof node.arguments[0].value === 'string'\n  );\n}\n"]},"metadata":{},"sourceType":"script"}