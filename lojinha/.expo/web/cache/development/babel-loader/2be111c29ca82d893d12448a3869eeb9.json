{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nvar _jsxFileName = \"/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/ReactAndroid/src/androidTest/js/TextInputTestModule.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar React = require('react');\n\nvar NativeModules = require(\"react-native-web/dist/exports/NativeModules\").default;\n\nvar StyleSheet = require(\"react-native-web/dist/exports/StyleSheet\").default;\n\nvar Text = require(\"react-native-web/dist/exports/Text\").default;\n\nvar TextInput = require(\"react-native-web/dist/exports/TextInput\").default;\n\nvar View = require(\"react-native-web/dist/exports/View\").default;\n\nvar BatchedBridge = require('react-native/Libraries/BatchedBridge/BatchedBridge');\n\nvar Recording = NativeModules.Recording;\nvar app;\n\nvar TokenizedTextExample = function (_React$Component) {\n  _inherits(TokenizedTextExample, _React$Component);\n\n  var _super = _createSuper(TokenizedTextExample);\n\n  function TokenizedTextExample(props) {\n    var _this;\n\n    _classCallCheck(this, TokenizedTextExample);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      text: ''\n    };\n    return _this;\n  }\n\n  _createClass(TokenizedTextExample, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var delimiter = /\\s+/;\n      var _text = this.state.text;\n      var token,\n          index,\n          parts = [];\n\n      while (_text) {\n        delimiter.lastIndex = 0;\n        token = delimiter.exec(_text);\n\n        if (token === null) {\n          break;\n        }\n\n        index = token.index;\n\n        if (token[0].length === 0) {\n          index = 1;\n        }\n\n        parts.push(_text.substr(0, index));\n        parts.push(token[0]);\n        index = index + token[0].length;\n        _text = _text.slice(index);\n      }\n\n      parts.push(_text);\n      parts = parts.map(function (text) {\n        if (/^#/.test(text)) {\n          return React.createElement(Text, {\n            key: text,\n            style: styles.hashtag,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 11\n            }\n          }, text);\n        } else {\n          return text;\n        }\n      });\n      return React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 7\n        }\n      }, React.createElement(TextInput, {\n        ref: \"tokenizedInput\",\n        testID: \"tokenizedInput\",\n        multiline: true,\n        style: styles.multiline,\n        onChangeText: function onChangeText(text) {\n          _this2.setState({\n            text: text\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 9\n        }\n      }, React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }\n      }, parts)));\n    }\n  }]);\n\n  return TokenizedTextExample;\n}(React.Component);\n\nvar TextInputTestApp = function (_React$Component2) {\n  _inherits(TextInputTestApp, _React$Component2);\n\n  var _super2 = _createSuper(TextInputTestApp);\n\n  function TextInputTestApp() {\n    var _this3;\n\n    _classCallCheck(this, TextInputTestApp);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this3 = _super2.call.apply(_super2, [this].concat(args));\n\n    _this3.handleOnSubmitEditing = function (record) {\n      Recording.record(record);\n    };\n\n    return _this3;\n  }\n\n  _createClass(TextInputTestApp, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      app = this;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 7\n        }\n      }, React.createElement(TextInput, {\n        style: styles.textInputHeight,\n        autoCorrect: true,\n        autoFocus: true,\n        keyboardType: \"numeric\",\n        multiline: true,\n        secureTextEntry: true,\n        defaultValue: \"This is text\",\n        testID: \"textInput1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 9\n        }\n      }), React.createElement(TextInput, {\n        style: styles.textInput,\n        autoCapitalize: \"sentences\",\n        autoCorrect: false,\n        autoFocus: false,\n        keyboardType: \"default\",\n        multiline: false,\n        secureTextEntry: false,\n        placeholder: \"1234\",\n        testID: \"textInput2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 9\n        }\n      }), React.createElement(TextInput, {\n        ref: \"textInput3\",\n        style: styles.textInput,\n        defaultValue: \"Hello, World\",\n        testID: \"textInput3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 9\n        }\n      }), React.createElement(TextInput, {\n        ref: \"textInput4\",\n        style: [styles.textInput, styles.textInputColor],\n        testID: \"textInput4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 9\n        }\n      }), React.createElement(TextInput, {\n        ref: \"textInput5\",\n        style: [styles.textInput, styles.textInputColor],\n        defaultValue: \"\",\n        testID: \"textInput5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 9\n        }\n      }), React.createElement(TextInput, {\n        ref: \"textInput6\",\n        style: [styles.textInput, styles.textInputColor],\n        defaultValue: \"Text\",\n        testID: \"textInput6\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 9\n        }\n      }), React.createElement(TextInput, {\n        ref: \"onSubmitTextInput\",\n        onSubmitEditing: this.handleOnSubmitEditing.bind(this, 'onSubmit'),\n        defaultValue: \"\",\n        testID: \"onSubmitTextInput\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 9\n        }\n      }), React.createElement(TokenizedTextExample, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return TextInputTestApp;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  container: {\n    padding: 5,\n    margin: 10\n  },\n  textInputHeight: {\n    fontSize: 21,\n    height: 30\n  },\n  textInput: {\n    fontSize: 21,\n    padding: 0\n  },\n  hashtag: {\n    color: 'blue',\n    fontWeight: 'bold'\n  },\n  textInputColor: {\n    color: '#00ff00'\n  }\n});\nvar TextInputTestModule = {\n  TextInputTestApp: TextInputTestApp,\n  setValueRef: function setValueRef(ref, value) {\n    app.refs[ref].setNativeProps({\n      text: value\n    });\n  }\n};\nBatchedBridge.registerCallableModule('TextInputTestModule', TextInputTestModule);\nmodule.exports = TextInputTestModule;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/ReactAndroid/src/androidTest/js/TextInputTestModule.js"],"names":["React","require","BatchedBridge","Recording","NativeModules","app","TokenizedTextExample","props","state","text","delimiter","_text","token","index","parts","lastIndex","exec","length","push","substr","slice","map","test","styles","hashtag","multiline","setState","Component","TextInputTestApp","handleOnSubmitEditing","record","container","textInputHeight","textInput","textInputColor","bind","StyleSheet","create","padding","margin","fontSize","height","color","fontWeight","TextInputTestModule","setValueRef","ref","value","refs","setNativeProps","registerCallableModule","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\n'use strict';\n\nconst React = require('react');\nconst {\n  NativeModules,\n  StyleSheet,\n  Text,\n  TextInput,\n  View,\n} = require('react-native');\nconst BatchedBridge = require('react-native/Libraries/BatchedBridge/BatchedBridge');\n\nconst {Recording} = NativeModules;\n\nlet app;\n\nclass TokenizedTextExample extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {text: ''};\n  }\n  render() {\n    //define delimiter\n    let delimiter = /\\s+/;\n\n    //split string\n    let _text = this.state.text;\n    let token,\n      index,\n      parts = [];\n    while (_text) {\n      delimiter.lastIndex = 0;\n      token = delimiter.exec(_text);\n      if (token === null) {\n        break;\n      }\n      index = token.index;\n      if (token[0].length === 0) {\n        index = 1;\n      }\n      parts.push(_text.substr(0, index));\n      parts.push(token[0]);\n      index = index + token[0].length;\n      _text = _text.slice(index);\n    }\n    parts.push(_text);\n\n    //highlight hashtags\n    parts = parts.map(text => {\n      if (/^#/.test(text)) {\n        return (\n          <Text key={text} style={styles.hashtag}>\n            {text}\n          </Text>\n        );\n      } else {\n        return text;\n      }\n    });\n\n    return (\n      <View>\n        <TextInput\n          ref=\"tokenizedInput\"\n          testID=\"tokenizedInput\"\n          multiline={true}\n          style={styles.multiline}\n          onChangeText={text => {\n            this.setState({text});\n          }}>\n          <Text>{parts}</Text>\n        </TextInput>\n      </View>\n    );\n  }\n}\n\nclass TextInputTestApp extends React.Component {\n  componentDidMount() {\n    app = this;\n  }\n\n  handleOnSubmitEditing = record => {\n    Recording.record(record);\n  };\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <TextInput\n          style={styles.textInputHeight}\n          autoCorrect={true}\n          autoFocus={true}\n          keyboardType=\"numeric\"\n          multiline={true}\n          secureTextEntry={true}\n          defaultValue=\"This is text\"\n          testID=\"textInput1\"\n        />\n        <TextInput\n          style={styles.textInput}\n          autoCapitalize=\"sentences\"\n          autoCorrect={false}\n          autoFocus={false}\n          keyboardType=\"default\"\n          multiline={false}\n          secureTextEntry={false}\n          placeholder=\"1234\"\n          testID=\"textInput2\"\n        />\n        <TextInput\n          ref=\"textInput3\"\n          style={styles.textInput}\n          defaultValue=\"Hello, World\"\n          testID=\"textInput3\"\n        />\n        <TextInput\n          ref=\"textInput4\"\n          style={[styles.textInput, styles.textInputColor]}\n          testID=\"textInput4\"\n        />\n        <TextInput\n          ref=\"textInput5\"\n          style={[styles.textInput, styles.textInputColor]}\n          defaultValue=\"\"\n          testID=\"textInput5\"\n        />\n        <TextInput\n          ref=\"textInput6\"\n          style={[styles.textInput, styles.textInputColor]}\n          defaultValue=\"Text\"\n          testID=\"textInput6\"\n        />\n        <TextInput\n          ref=\"onSubmitTextInput\"\n          onSubmitEditing={this.handleOnSubmitEditing.bind(this, 'onSubmit')}\n          defaultValue=\"\"\n          testID=\"onSubmitTextInput\"\n        />\n        <TokenizedTextExample />\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 5,\n    margin: 10,\n  },\n  textInputHeight: {\n    fontSize: 21,\n    height: 30,\n  },\n  textInput: {\n    fontSize: 21,\n    padding: 0,\n  },\n  hashtag: {\n    color: 'blue',\n    fontWeight: 'bold',\n  },\n  textInputColor: {\n    color: '#00ff00',\n  },\n});\n\nconst TextInputTestModule = {\n  TextInputTestApp,\n  setValueRef: function(ref, value) {\n    app.refs[ref].setNativeProps({\n      text: value,\n    });\n  },\n};\n\nBatchedBridge.registerCallableModule(\n  'TextInputTestModule',\n  TextInputTestModule,\n);\n\nmodule.exports = TextInputTestModule;\n"]},"metadata":{},"sourceType":"script"}