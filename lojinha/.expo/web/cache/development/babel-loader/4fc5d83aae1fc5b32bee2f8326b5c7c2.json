{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.projectConfig = projectConfig;\nexports.dependencyConfig = dependencyConfig;\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _findAndroidDir = _interopRequireDefault(require(\"./findAndroidDir\"));\n\nvar _findManifest = _interopRequireDefault(require(\"./findManifest\"));\n\nvar _findPackageClassName = _interopRequireDefault(require(\"./findPackageClassName\"));\n\nvar _readManifest = _interopRequireDefault(require(\"./readManifest\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar getPackageName = function getPackageName(manifest) {\n  return manifest.attr.package;\n};\n\nfunction projectConfig(root) {\n  var userConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var src = userConfig.sourceDir || (0, _findAndroidDir.default)(root);\n\n  if (!src) {\n    return null;\n  }\n\n  var sourceDir = _path().default.join(root, src);\n\n  var appName = getAppName(sourceDir, userConfig.appName);\n  var isFlat = sourceDir.indexOf('app') === -1;\n  var manifestPath = userConfig.manifestPath ? _path().default.join(sourceDir, userConfig.manifestPath) : (0, _findManifest.default)(_path().default.join(sourceDir, appName));\n\n  if (!manifestPath) {\n    return null;\n  }\n\n  var manifest = (0, _readManifest.default)(manifestPath);\n  var packageName = userConfig.packageName || getPackageName(manifest);\n\n  if (!packageName) {\n    throw new Error(\"Package name not found in \" + manifestPath);\n  }\n\n  var packageFolder = userConfig.packageFolder || packageName.replace(/\\./g, _path().default.sep);\n\n  var mainFilePath = _path().default.join(sourceDir, userConfig.mainFilePath || _path().default.join(appName, \"src/main/java/\" + packageFolder + \"/MainApplication.java\"));\n\n  var stringsPath = _path().default.join(sourceDir, userConfig.stringsPath || _path().default.join(appName, '/src/main/res/values/strings.xml'));\n\n  var settingsGradlePath = _path().default.join(sourceDir, userConfig.settingsGradlePath || 'settings.gradle');\n\n  var assetsPath = _path().default.join(sourceDir, userConfig.assetsPath || _path().default.join(appName, '/src/main/assets'));\n\n  var buildGradlePath = _path().default.join(sourceDir, userConfig.buildGradlePath || 'build.gradle');\n\n  return {\n    sourceDir: sourceDir,\n    isFlat: isFlat,\n    folder: root,\n    stringsPath: stringsPath,\n    manifestPath: manifestPath,\n    buildGradlePath: buildGradlePath,\n    settingsGradlePath: settingsGradlePath,\n    assetsPath: assetsPath,\n    mainFilePath: mainFilePath,\n    packageName: packageName,\n    packageFolder: packageFolder,\n    appName: appName\n  };\n}\n\nfunction getAppName(sourceDir, userConfigAppName) {\n  var appName = '';\n\n  if (typeof userConfigAppName === 'string' && _fs().default.existsSync(_path().default.join(sourceDir, userConfigAppName))) {\n    appName = userConfigAppName;\n  } else if (_fs().default.existsSync(_path().default.join(sourceDir, 'app'))) {\n    appName = 'app';\n  }\n\n  return appName;\n}\n\nfunction dependencyConfig(root) {\n  var userConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var src = userConfig.sourceDir || (0, _findAndroidDir.default)(root);\n\n  if (!src) {\n    return null;\n  }\n\n  var sourceDir = _path().default.join(root, src);\n\n  var manifestPath = userConfig.manifestPath ? _path().default.join(sourceDir, userConfig.manifestPath) : (0, _findManifest.default)(sourceDir);\n\n  if (!manifestPath) {\n    return null;\n  }\n\n  var manifest = (0, _readManifest.default)(manifestPath);\n  var packageName = userConfig.packageName || getPackageName(manifest);\n  var packageClassName = (0, _findPackageClassName.default)(sourceDir);\n\n  if (!packageClassName) {\n    return null;\n  }\n\n  var packageImportPath = userConfig.packageImportPath || \"import \" + packageName + \".\" + packageClassName + \";\";\n  var packageInstance = userConfig.packageInstance || \"new \" + packageClassName + \"()\";\n  return {\n    sourceDir: sourceDir,\n    folder: root,\n    packageImportPath: packageImportPath,\n    packageInstance: packageInstance\n  };\n}","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli-platform-android/build/config/index.js"],"names":["Object","defineProperty","exports","value","projectConfig","dependencyConfig","_path","data","_interopRequireDefault","require","_fs","_findAndroidDir","_findManifest","_findPackageClassName","_readManifest","obj","__esModule","default","getPackageName","manifest","attr","package","root","userConfig","src","sourceDir","join","appName","getAppName","isFlat","indexOf","manifestPath","packageName","Error","packageFolder","replace","sep","mainFilePath","stringsPath","settingsGradlePath","assetsPath","buildGradlePath","folder","userConfigAppName","existsSync","packageClassName","packageImportPath","packageInstance"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,aAAR,GAAwBA,aAAxB;AACAF,OAAO,CAACG,gBAAR,GAA2BA,gBAA3B;;AAEA,SAASC,KAAT,GAAiB;AACf,MAAMC,IAAI,GAAGC,sBAAsB,CAACC,OAAO,CAAC,MAAD,CAAR,CAAnC;;AAEAH,EAAAA,KAAK,GAAG,iBAAY;AAClB,WAAOC,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,SAASG,GAAT,GAAe;AACb,MAAMH,IAAI,GAAGC,sBAAsB,CAACC,OAAO,CAAC,IAAD,CAAR,CAAnC;;AAEAC,EAAAA,GAAG,GAAG,eAAY;AAChB,WAAOH,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,IAAII,eAAe,GAAGH,sBAAsB,CAACC,OAAO,oBAAR,CAA5C;;AAEA,IAAIG,aAAa,GAAGJ,sBAAsB,CAACC,OAAO,kBAAR,CAA1C;;AAEA,IAAII,qBAAqB,GAAGL,sBAAsB,CAACC,OAAO,0BAAR,CAAlD;;AAEA,IAAIK,aAAa,GAAGN,sBAAsB,CAACC,OAAO,kBAAR,CAA1C;;AAEA,SAASD,sBAAT,CAAgCO,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEE,IAAAA,OAAO,EAAEF;AAAX,GAArC;AAAwD;;AAS/F,IAAMG,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,QAAQ;AAAA,SAAIA,QAAQ,CAACC,IAAT,CAAcC,OAAlB;AAAA,CAA/B;;AAOA,SAASjB,aAAT,CAAuBkB,IAAvB,EAA8C;AAAA,MAAjBC,UAAiB,uEAAJ,EAAI;AAC5C,MAAMC,GAAG,GAAGD,UAAU,CAACE,SAAX,IAAwB,CAAC,GAAGd,eAAe,CAACM,OAApB,EAA6BK,IAA7B,CAApC;;AAEA,MAAI,CAACE,GAAL,EAAU;AACR,WAAO,IAAP;AACD;;AAED,MAAMC,SAAS,GAAGnB,KAAK,GAAGW,OAAR,CAAgBS,IAAhB,CAAqBJ,IAArB,EAA2BE,GAA3B,CAAlB;;AAEA,MAAMG,OAAO,GAAGC,UAAU,CAACH,SAAD,EAAYF,UAAU,CAACI,OAAvB,CAA1B;AACA,MAAME,MAAM,GAAGJ,SAAS,CAACK,OAAV,CAAkB,KAAlB,MAA6B,CAAC,CAA7C;AACA,MAAMC,YAAY,GAAGR,UAAU,CAACQ,YAAX,GAA0BzB,KAAK,GAAGW,OAAR,CAAgBS,IAAhB,CAAqBD,SAArB,EAAgCF,UAAU,CAACQ,YAA3C,CAA1B,GAAqF,CAAC,GAAGnB,aAAa,CAACK,OAAlB,EAA2BX,KAAK,GAAGW,OAAR,CAAgBS,IAAhB,CAAqBD,SAArB,EAAgCE,OAAhC,CAA3B,CAA1G;;AAEA,MAAI,CAACI,YAAL,EAAmB;AACjB,WAAO,IAAP;AACD;;AAED,MAAMZ,QAAQ,GAAG,CAAC,GAAGL,aAAa,CAACG,OAAlB,EAA2Bc,YAA3B,CAAjB;AACA,MAAMC,WAAW,GAAGT,UAAU,CAACS,WAAX,IAA0Bd,cAAc,CAACC,QAAD,CAA5D;;AAEA,MAAI,CAACa,WAAL,EAAkB;AAChB,UAAM,IAAIC,KAAJ,gCAAuCF,YAAvC,CAAN;AACD;;AAED,MAAMG,aAAa,GAAGX,UAAU,CAACW,aAAX,IAA4BF,WAAW,CAACG,OAAZ,CAAoB,KAApB,EAA2B7B,KAAK,GAAGW,OAAR,CAAgBmB,GAA3C,CAAlD;;AAEA,MAAMC,YAAY,GAAG/B,KAAK,GAAGW,OAAR,CAAgBS,IAAhB,CAAqBD,SAArB,EAAgCF,UAAU,CAACc,YAAX,IAA2B/B,KAAK,GAAGW,OAAR,CAAgBS,IAAhB,CAAqBC,OAArB,qBAA+CO,aAA/C,2BAA3D,CAArB;;AAEA,MAAMI,WAAW,GAAGhC,KAAK,GAAGW,OAAR,CAAgBS,IAAhB,CAAqBD,SAArB,EAAgCF,UAAU,CAACe,WAAX,IAA0BhC,KAAK,GAAGW,OAAR,CAAgBS,IAAhB,CAAqBC,OAArB,EAA8B,kCAA9B,CAA1D,CAApB;;AAEA,MAAMY,kBAAkB,GAAGjC,KAAK,GAAGW,OAAR,CAAgBS,IAAhB,CAAqBD,SAArB,EAAgCF,UAAU,CAACgB,kBAAX,IAAiC,iBAAjE,CAA3B;;AAEA,MAAMC,UAAU,GAAGlC,KAAK,GAAGW,OAAR,CAAgBS,IAAhB,CAAqBD,SAArB,EAAgCF,UAAU,CAACiB,UAAX,IAAyBlC,KAAK,GAAGW,OAAR,CAAgBS,IAAhB,CAAqBC,OAArB,EAA8B,kBAA9B,CAAzD,CAAnB;;AAEA,MAAMc,eAAe,GAAGnC,KAAK,GAAGW,OAAR,CAAgBS,IAAhB,CAAqBD,SAArB,EAAgCF,UAAU,CAACkB,eAAX,IAA8B,cAA9D,CAAxB;;AAEA,SAAO;AACLhB,IAAAA,SAAS,EAATA,SADK;AAELI,IAAAA,MAAM,EAANA,MAFK;AAGLa,IAAAA,MAAM,EAAEpB,IAHH;AAILgB,IAAAA,WAAW,EAAXA,WAJK;AAKLP,IAAAA,YAAY,EAAZA,YALK;AAMLU,IAAAA,eAAe,EAAfA,eANK;AAOLF,IAAAA,kBAAkB,EAAlBA,kBAPK;AAQLC,IAAAA,UAAU,EAAVA,UARK;AASLH,IAAAA,YAAY,EAAZA,YATK;AAULL,IAAAA,WAAW,EAAXA,WAVK;AAWLE,IAAAA,aAAa,EAAbA,aAXK;AAYLP,IAAAA,OAAO,EAAPA;AAZK,GAAP;AAcD;;AAED,SAASC,UAAT,CAAoBH,SAApB,EAA+BkB,iBAA/B,EAAkD;AAChD,MAAIhB,OAAO,GAAG,EAAd;;AAEA,MAAI,OAAOgB,iBAAP,KAA6B,QAA7B,IAAyCjC,GAAG,GAAGO,OAAN,CAAc2B,UAAd,CAAyBtC,KAAK,GAAGW,OAAR,CAAgBS,IAAhB,CAAqBD,SAArB,EAAgCkB,iBAAhC,CAAzB,CAA7C,EAA2H;AACzHhB,IAAAA,OAAO,GAAGgB,iBAAV;AACD,GAFD,MAEO,IAAIjC,GAAG,GAAGO,OAAN,CAAc2B,UAAd,CAAyBtC,KAAK,GAAGW,OAAR,CAAgBS,IAAhB,CAAqBD,SAArB,EAAgC,KAAhC,CAAzB,CAAJ,EAAsE;AAC3EE,IAAAA,OAAO,GAAG,KAAV;AACD;;AAED,SAAOA,OAAP;AACD;;AAOD,SAAStB,gBAAT,CAA0BiB,IAA1B,EAAiD;AAAA,MAAjBC,UAAiB,uEAAJ,EAAI;AAC/C,MAAMC,GAAG,GAAGD,UAAU,CAACE,SAAX,IAAwB,CAAC,GAAGd,eAAe,CAACM,OAApB,EAA6BK,IAA7B,CAApC;;AAEA,MAAI,CAACE,GAAL,EAAU;AACR,WAAO,IAAP;AACD;;AAED,MAAMC,SAAS,GAAGnB,KAAK,GAAGW,OAAR,CAAgBS,IAAhB,CAAqBJ,IAArB,EAA2BE,GAA3B,CAAlB;;AAEA,MAAMO,YAAY,GAAGR,UAAU,CAACQ,YAAX,GAA0BzB,KAAK,GAAGW,OAAR,CAAgBS,IAAhB,CAAqBD,SAArB,EAAgCF,UAAU,CAACQ,YAA3C,CAA1B,GAAqF,CAAC,GAAGnB,aAAa,CAACK,OAAlB,EAA2BQ,SAA3B,CAA1G;;AAEA,MAAI,CAACM,YAAL,EAAmB;AACjB,WAAO,IAAP;AACD;;AAED,MAAMZ,QAAQ,GAAG,CAAC,GAAGL,aAAa,CAACG,OAAlB,EAA2Bc,YAA3B,CAAjB;AACA,MAAMC,WAAW,GAAGT,UAAU,CAACS,WAAX,IAA0Bd,cAAc,CAACC,QAAD,CAA5D;AACA,MAAM0B,gBAAgB,GAAG,CAAC,GAAGhC,qBAAqB,CAACI,OAA1B,EAAmCQ,SAAnC,CAAzB;;AAKA,MAAI,CAACoB,gBAAL,EAAuB;AACrB,WAAO,IAAP;AACD;;AAED,MAAMC,iBAAiB,GAAGvB,UAAU,CAACuB,iBAAX,gBAA0Cd,WAA1C,SAAyDa,gBAAzD,MAA1B;AACA,MAAME,eAAe,GAAGxB,UAAU,CAACwB,eAAX,aAAqCF,gBAArC,OAAxB;AACA,SAAO;AACLpB,IAAAA,SAAS,EAATA,SADK;AAELiB,IAAAA,MAAM,EAAEpB,IAFH;AAGLwB,IAAAA,iBAAiB,EAAjBA,iBAHK;AAILC,IAAAA,eAAe,EAAfA;AAJK,GAAP;AAMD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.projectConfig = projectConfig;\nexports.dependencyConfig = dependencyConfig;\n\nfunction _path() {\n  const data = _interopRequireDefault(require(\"path\"));\n\n  _path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _fs() {\n  const data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _findAndroidDir = _interopRequireDefault(require(\"./findAndroidDir\"));\n\nvar _findManifest = _interopRequireDefault(require(\"./findManifest\"));\n\nvar _findPackageClassName = _interopRequireDefault(require(\"./findPackageClassName\"));\n\nvar _readManifest = _interopRequireDefault(require(\"./readManifest\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst getPackageName = manifest => manifest.attr.package;\n/**\n * Gets android project config by analyzing given folder and taking some\n * defaults specified by user into consideration\n */\n\n\nfunction projectConfig(root, userConfig = {}) {\n  const src = userConfig.sourceDir || (0, _findAndroidDir.default)(root);\n\n  if (!src) {\n    return null;\n  }\n\n  const sourceDir = _path().default.join(root, src);\n\n  const appName = getAppName(sourceDir, userConfig.appName);\n  const isFlat = sourceDir.indexOf('app') === -1;\n  const manifestPath = userConfig.manifestPath ? _path().default.join(sourceDir, userConfig.manifestPath) : (0, _findManifest.default)(_path().default.join(sourceDir, appName));\n\n  if (!manifestPath) {\n    return null;\n  }\n\n  const manifest = (0, _readManifest.default)(manifestPath);\n  const packageName = userConfig.packageName || getPackageName(manifest);\n\n  if (!packageName) {\n    throw new Error(`Package name not found in ${manifestPath}`);\n  }\n\n  const packageFolder = userConfig.packageFolder || packageName.replace(/\\./g, _path().default.sep);\n\n  const mainFilePath = _path().default.join(sourceDir, userConfig.mainFilePath || _path().default.join(appName, `src/main/java/${packageFolder}/MainApplication.java`));\n\n  const stringsPath = _path().default.join(sourceDir, userConfig.stringsPath || _path().default.join(appName, '/src/main/res/values/strings.xml'));\n\n  const settingsGradlePath = _path().default.join(sourceDir, userConfig.settingsGradlePath || 'settings.gradle');\n\n  const assetsPath = _path().default.join(sourceDir, userConfig.assetsPath || _path().default.join(appName, '/src/main/assets'));\n\n  const buildGradlePath = _path().default.join(sourceDir, userConfig.buildGradlePath || 'build.gradle');\n\n  return {\n    sourceDir,\n    isFlat,\n    folder: root,\n    stringsPath,\n    manifestPath,\n    buildGradlePath,\n    settingsGradlePath,\n    assetsPath,\n    mainFilePath,\n    packageName,\n    packageFolder,\n    appName\n  };\n}\n\nfunction getAppName(sourceDir, userConfigAppName) {\n  let appName = '';\n\n  if (typeof userConfigAppName === 'string' && _fs().default.existsSync(_path().default.join(sourceDir, userConfigAppName))) {\n    appName = userConfigAppName;\n  } else if (_fs().default.existsSync(_path().default.join(sourceDir, 'app'))) {\n    appName = 'app';\n  }\n\n  return appName;\n}\n/**\n * Same as projectConfigAndroid except it returns\n * different config that applies to packages only\n */\n\n\nfunction dependencyConfig(root, userConfig = {}) {\n  const src = userConfig.sourceDir || (0, _findAndroidDir.default)(root);\n\n  if (!src) {\n    return null;\n  }\n\n  const sourceDir = _path().default.join(root, src);\n\n  const manifestPath = userConfig.manifestPath ? _path().default.join(sourceDir, userConfig.manifestPath) : (0, _findManifest.default)(sourceDir);\n\n  if (!manifestPath) {\n    return null;\n  }\n\n  const manifest = (0, _readManifest.default)(manifestPath);\n  const packageName = userConfig.packageName || getPackageName(manifest);\n  const packageClassName = (0, _findPackageClassName.default)(sourceDir);\n  /**\n   * This module has no package to export\n   */\n\n  if (!packageClassName) {\n    return null;\n  }\n\n  const packageImportPath = userConfig.packageImportPath || `import ${packageName}.${packageClassName};`;\n  const packageInstance = userConfig.packageInstance || `new ${packageClassName}()`;\n  return {\n    sourceDir,\n    folder: root,\n    packageImportPath,\n    packageInstance\n  };\n}\n\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}