{"ast":null,"code":"'use strict';\n\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport EventEmitter from \"./EventEmitter\";\nimport EventEmitterWithHolding from \"./EventEmitterWithHolding\";\nimport EventHolder from \"./EventHolder\";\nimport invariant from 'fbjs/lib/invariant';\nimport keyOf from 'fbjs/lib/keyOf';\n\nvar __DEV__ = process.env.NODE_ENV !== 'production';\n\nvar TYPES_KEY = keyOf({\n  __types: true\n});\n\nfunction mixInEventEmitter(cls, types) {\n  invariant(types, 'Must supply set of valid event types');\n  var target = cls.prototype || cls;\n  invariant(!target.__eventEmitter, 'An active emitter is already mixed in');\n  var ctor = cls.constructor;\n\n  if (ctor) {\n    invariant(ctor === Object || ctor === Function, 'Mix EventEmitter into a class, not an instance');\n  }\n\n  if (target.hasOwnProperty(TYPES_KEY)) {\n    _extends(target.__types, types);\n  } else if (target.__types) {\n    target.__types = _extends({}, target.__types, types);\n  } else {\n    target.__types = types;\n  }\n\n  _extends(target, EventEmitterMixin);\n}\n\nvar EventEmitterMixin = {\n  emit: function emit(eventType, a, b, c, d, e, _) {\n    return this.__getEventEmitter().emit(eventType, a, b, c, d, e, _);\n  },\n  emitAndHold: function emitAndHold(eventType, a, b, c, d, e, _) {\n    return this.__getEventEmitter().emitAndHold(eventType, a, b, c, d, e, _);\n  },\n  addListener: function addListener(eventType, listener, context) {\n    return this.__getEventEmitter().addListener(eventType, listener, context);\n  },\n  once: function once(eventType, listener, context) {\n    return this.__getEventEmitter().once(eventType, listener, context);\n  },\n  addRetroactiveListener: function addRetroactiveListener(eventType, listener, context) {\n    return this.__getEventEmitter().addRetroactiveListener(eventType, listener, context);\n  },\n  addListenerMap: function addListenerMap(listenerMap, context) {\n    return this.__getEventEmitter().addListenerMap(listenerMap, context);\n  },\n  addRetroactiveListenerMap: function addRetroactiveListenerMap(listenerMap, context) {\n    return this.__getEventEmitter().addListenerMap(listenerMap, context);\n  },\n  removeAllListeners: function removeAllListeners() {\n    this.__getEventEmitter().removeAllListeners();\n  },\n  removeCurrentListener: function removeCurrentListener() {\n    this.__getEventEmitter().removeCurrentListener();\n  },\n  releaseHeldEventType: function releaseHeldEventType(eventType) {\n    this.__getEventEmitter().releaseHeldEventType(eventType);\n  },\n  __getEventEmitter: function __getEventEmitter() {\n    if (!this.__eventEmitter) {\n      var emitter = new EventEmitter();\n\n      if (__DEV__) {\n        var EventValidator = require(\"./EventValidator\").default;\n\n        emitter = EventValidator.addValidation(emitter, this.__types);\n      }\n\n      var holder = new EventHolder();\n      this.__eventEmitter = new EventEmitterWithHolding(emitter, holder);\n    }\n\n    return this.__eventEmitter;\n  }\n};\nexport default mixInEventEmitter;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native-web/src/vendor/react-native/emitter/mixInEventEmitter.js"],"names":["EventEmitter","EventEmitterWithHolding","EventHolder","invariant","keyOf","__DEV__","process","env","NODE_ENV","TYPES_KEY","__types","mixInEventEmitter","cls","types","target","prototype","__eventEmitter","ctor","constructor","Object","Function","hasOwnProperty","EventEmitterMixin","emit","eventType","a","b","c","d","e","_","__getEventEmitter","emitAndHold","addListener","listener","context","once","addRetroactiveListener","addListenerMap","listenerMap","addRetroactiveListenerMap","removeAllListeners","removeCurrentListener","releaseHeldEventType","emitter","EventValidator","require","default","addValidation","holder"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nimport EventEmitter from './EventEmitter';\nimport EventEmitterWithHolding from './EventEmitterWithHolding';\nimport EventHolder from './EventHolder';\n\nimport invariant from 'fbjs/lib/invariant';\nimport keyOf from 'fbjs/lib/keyOf';\n\nimport type EmitterSubscription from './EmitterSubscription';\n\nconst __DEV__ = process.env.NODE_ENV !== 'production';\nconst TYPES_KEY = keyOf({__types: true});\n\n/**\n * API to setup an object or constructor to be able to emit data events.\n *\n * @example\n * function Dog() { ...dog stuff... }\n * mixInEventEmitter(Dog, {bark: true});\n *\n * var puppy = new Dog();\n * puppy.addListener('bark', function (volume) {\n *   console.log('Puppy', this, 'barked at volume:', volume);\n * });\n * puppy.emit('bark', 'quiet');\n * // Puppy <puppy> barked at volume: quiet\n *\n *\n * // A \"singleton\" object may also be commissioned:\n *\n * var Singleton = {};\n * mixInEventEmitter(Singleton, {lonely: true});\n * Singleton.emit('lonely', true);\n */\nfunction mixInEventEmitter(cls: Function | Object, types: Object) {\n  invariant(types, 'Must supply set of valid event types');\n\n  // If this is a constructor, write to the prototype, otherwise write to the\n  // singleton object.\n  const target = cls.prototype || cls;\n\n  invariant(!target.__eventEmitter, 'An active emitter is already mixed in');\n\n  const ctor = cls.constructor;\n  if (ctor) {\n    invariant(\n      ctor === Object || ctor === Function,\n      'Mix EventEmitter into a class, not an instance',\n    );\n  }\n\n  // Keep track of the provided types, union the types if they already exist,\n  // which allows for prototype subclasses to provide more types.\n  if (target.hasOwnProperty(TYPES_KEY)) {\n    Object.assign(target.__types, types);\n  } else if (target.__types) {\n    target.__types = Object.assign({}, target.__types, types);\n  } else {\n    target.__types = types;\n  }\n  Object.assign(target, EventEmitterMixin);\n}\n\nconst EventEmitterMixin = {\n  emit: function(eventType, a, b, c, d, e, _) {\n    return this.__getEventEmitter().emit(eventType, a, b, c, d, e, _);\n  },\n\n  emitAndHold: function(eventType, a, b, c, d, e, _) {\n    return this.__getEventEmitter().emitAndHold(eventType, a, b, c, d, e, _);\n  },\n\n  addListener: function(eventType, listener, context): EmitterSubscription {\n    return this.__getEventEmitter().addListener(eventType, listener, context);\n  },\n\n  once: function(eventType, listener, context) {\n    return this.__getEventEmitter().once(eventType, listener, context);\n  },\n\n  addRetroactiveListener: function(eventType, listener, context) {\n    return this.__getEventEmitter().addRetroactiveListener(\n      eventType,\n      listener,\n      context,\n    );\n  },\n\n  addListenerMap: function(listenerMap, context) {\n    return this.__getEventEmitter().addListenerMap(listenerMap, context);\n  },\n\n  addRetroactiveListenerMap: function(listenerMap, context) {\n    return this.__getEventEmitter().addListenerMap(listenerMap, context);\n  },\n\n  removeAllListeners: function() {\n    this.__getEventEmitter().removeAllListeners();\n  },\n\n  removeCurrentListener: function() {\n    this.__getEventEmitter().removeCurrentListener();\n  },\n\n  releaseHeldEventType: function(eventType) {\n    this.__getEventEmitter().releaseHeldEventType(eventType);\n  },\n\n  __getEventEmitter: function() {\n    if (!this.__eventEmitter) {\n      let emitter = new EventEmitter();\n      if (__DEV__) {\n        const EventValidator = require('./EventValidator').default;\n        emitter = EventValidator.addValidation(emitter, this.__types);\n      }\n\n      const holder = new EventHolder();\n      this.__eventEmitter = new EventEmitterWithHolding(emitter, holder);\n    }\n    return this.__eventEmitter;\n  },\n};\n\nexport default mixInEventEmitter;\n"]},"metadata":{},"sourceType":"module"}