{"ast":null,"code":"export {};","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli-server-api/node_modules/@jest/types/build/Circus.d.ts"],"names":[],"mappings":"AA+KA","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n/// <reference types=\"node\" />\nimport type * as Global from './Global';\ndeclare type Process = NodeJS.Process;\nexport declare type DoneFn = Global.DoneFn;\nexport declare type BlockFn = Global.BlockFn;\nexport declare type BlockName = Global.BlockName;\nexport declare type BlockMode = void | 'skip' | 'only' | 'todo';\nexport declare type TestMode = BlockMode;\nexport declare type TestName = Global.TestName;\nexport declare type TestFn = Global.TestFn;\nexport declare type HookFn = Global.HookFn;\nexport declare type AsyncFn = TestFn | HookFn;\nexport declare type SharedHookType = 'afterAll' | 'beforeAll';\nexport declare type HookType = SharedHookType | 'afterEach' | 'beforeEach';\nexport declare type TestContext = Record<string, any>;\nexport declare type Exception = any;\nexport declare type FormattedError = string;\nexport declare type Hook = {\n    asyncError: Error;\n    fn: HookFn;\n    type: HookType;\n    parent: DescribeBlock;\n    timeout: number | undefined | null;\n};\nexport interface EventHandler {\n    (event: AsyncEvent, state: State): void | Promise<void>;\n    (event: SyncEvent, state: State): void;\n}\nexport declare type Event = SyncEvent | AsyncEvent;\nexport declare type SyncEvent = {\n    asyncError: Error;\n    mode: BlockMode;\n    name: 'start_describe_definition';\n    blockName: BlockName;\n} | {\n    mode: BlockMode;\n    name: 'finish_describe_definition';\n    blockName: BlockName;\n} | {\n    asyncError: Error;\n    name: 'add_hook';\n    hookType: HookType;\n    fn: HookFn;\n    timeout: number | undefined;\n} | {\n    asyncError: Error;\n    name: 'add_test';\n    testName: TestName;\n    fn?: TestFn;\n    mode?: TestMode;\n    timeout: number | undefined;\n} | {\n    name: 'error';\n    error: Exception;\n};\nexport declare type AsyncEvent = {\n    name: 'setup';\n    testNamePattern?: string;\n    parentProcess: Process;\n} | {\n    name: 'include_test_location_in_result';\n} | {\n    name: 'hook_start';\n    hook: Hook;\n} | {\n    name: 'hook_success';\n    describeBlock?: DescribeBlock;\n    test?: TestEntry;\n    hook: Hook;\n} | {\n    name: 'hook_failure';\n    error: string | Exception;\n    describeBlock?: DescribeBlock;\n    test?: TestEntry;\n    hook: Hook;\n} | {\n    name: 'test_fn_start';\n    test: TestEntry;\n} | {\n    name: 'test_fn_success';\n    test: TestEntry;\n} | {\n    name: 'test_fn_failure';\n    error: Exception;\n    test: TestEntry;\n} | {\n    name: 'test_retry';\n    test: TestEntry;\n} | {\n    name: 'test_start';\n    test: TestEntry;\n} | {\n    name: 'test_skip';\n    test: TestEntry;\n} | {\n    name: 'test_todo';\n    test: TestEntry;\n} | {\n    name: 'test_done';\n    test: TestEntry;\n} | {\n    name: 'run_describe_start';\n    describeBlock: DescribeBlock;\n} | {\n    name: 'run_describe_finish';\n    describeBlock: DescribeBlock;\n} | {\n    name: 'run_start';\n} | {\n    name: 'run_finish';\n} | {\n    name: 'teardown';\n};\nexport declare type TestStatus = 'skip' | 'done' | 'todo';\nexport declare type TestResult = {\n    duration?: number | null;\n    errors: Array<FormattedError>;\n    invocations: number;\n    status: TestStatus;\n    location?: {\n        column: number;\n        line: number;\n    } | null;\n    testPath: Array<TestName | BlockName>;\n};\nexport declare type RunResult = {\n    unhandledErrors: Array<FormattedError>;\n    testResults: TestResults;\n};\nexport declare type TestResults = Array<TestResult>;\nexport declare type GlobalErrorHandlers = {\n    uncaughtException: Array<(exception: Exception) => void>;\n    unhandledRejection: Array<(exception: Exception, promise: Promise<any>) => void>;\n};\nexport declare type State = {\n    currentDescribeBlock: DescribeBlock;\n    currentlyRunningTest?: TestEntry | null;\n    expand?: boolean;\n    hasFocusedTests: boolean;\n    originalGlobalErrorHandlers?: GlobalErrorHandlers;\n    parentProcess: Process | null;\n    rootDescribeBlock: DescribeBlock;\n    testNamePattern?: RegExp | null;\n    testTimeout: number;\n    unhandledErrors: Array<Exception>;\n    includeTestLocationInResult: boolean;\n};\nexport declare type DescribeBlock = {\n    children: Array<DescribeBlock>;\n    hooks: Array<Hook>;\n    mode: BlockMode;\n    name: BlockName;\n    parent?: DescribeBlock;\n    tests: Array<TestEntry>;\n};\nexport declare type TestError = Exception | Array<[Exception | undefined, Exception]>;\nexport declare type TestEntry = {\n    asyncError: Exception;\n    errors: TestError;\n    fn?: TestFn;\n    invocations: number;\n    mode: TestMode;\n    name: TestName;\n    parent: DescribeBlock;\n    startedAt?: number | null;\n    duration?: number | null;\n    status?: TestStatus | null;\n    timeout?: number;\n};\nexport {};\n"]},"metadata":{},"sourceType":"module"}