{"ast":null,"code":"'use strict';\n\nvar PlatformIOS = require(\"../Platform.ios\");\n\nvar PlatformAndroid = require(\"../Platform.android\");\n\ndescribe('Platform', function () {\n  describe('OS', function () {\n    it('should have correct value', function () {\n      expect(PlatformIOS.OS).toEqual('ios');\n      expect(PlatformAndroid.OS).toEqual('android');\n    });\n  });\n  describe('select', function () {\n    it('should return platform specific value', function () {\n      var obj = {\n        ios: 'ios',\n        android: 'android'\n      };\n      expect(PlatformIOS.select(obj)).toEqual(obj.ios);\n      expect(PlatformAndroid.select(obj)).toEqual(obj.android);\n    });\n    it('should return native value if no specific value was found', function () {\n      var obj = {\n        native: 'native',\n        default: 'default'\n      };\n      expect(PlatformIOS.select(obj)).toEqual(obj.native);\n      expect(PlatformAndroid.select(obj)).toEqual(obj.native);\n    });\n    it('should return default value if no specific value was found', function () {\n      var obj = {\n        default: 'default'\n      };\n      expect(PlatformIOS.select(obj)).toEqual(obj.default);\n      expect(PlatformAndroid.select(obj)).toEqual(obj.default);\n    });\n  });\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Utilities/__tests__/Platform-test.js"],"names":["PlatformIOS","require","PlatformAndroid","describe","it","expect","OS","toEqual","obj","ios","android","select","native","default"],"mappings":"AAUA;;AAEA,IAAMA,WAAW,GAAGC,OAAO,mBAA3B;;AACA,IAAMC,eAAe,GAAGD,OAAO,uBAA/B;;AAEAE,QAAQ,CAAC,UAAD,EAAa,YAAM;AACzBA,EAAAA,QAAQ,CAAC,IAAD,EAAO,YAAM;AACnBC,IAAAA,EAAE,CAAC,2BAAD,EAA8B,YAAM;AACpCC,MAAAA,MAAM,CAACL,WAAW,CAACM,EAAb,CAAN,CAAuBC,OAAvB,CAA+B,KAA/B;AACAF,MAAAA,MAAM,CAACH,eAAe,CAACI,EAAjB,CAAN,CAA2BC,OAA3B,CAAmC,SAAnC;AACD,KAHC,CAAF;AAID,GALO,CAAR;AAOAJ,EAAAA,QAAQ,CAAC,QAAD,EAAW,YAAM;AACvBC,IAAAA,EAAE,CAAC,uCAAD,EAA0C,YAAM;AAChD,UAAMI,GAAG,GAAG;AAACC,QAAAA,GAAG,EAAE,KAAN;AAAaC,QAAAA,OAAO,EAAE;AAAtB,OAAZ;AACAL,MAAAA,MAAM,CAACL,WAAW,CAACW,MAAZ,CAAmBH,GAAnB,CAAD,CAAN,CAAgCD,OAAhC,CAAwCC,GAAG,CAACC,GAA5C;AACAJ,MAAAA,MAAM,CAACH,eAAe,CAACS,MAAhB,CAAuBH,GAAvB,CAAD,CAAN,CAAoCD,OAApC,CAA4CC,GAAG,CAACE,OAAhD;AACD,KAJC,CAAF;AAMAN,IAAAA,EAAE,CAAC,2DAAD,EAA8D,YAAM;AACpE,UAAMI,GAAG,GAAG;AAACI,QAAAA,MAAM,EAAE,QAAT;AAAmBC,QAAAA,OAAO,EAAE;AAA5B,OAAZ;AACAR,MAAAA,MAAM,CAACL,WAAW,CAACW,MAAZ,CAAmBH,GAAnB,CAAD,CAAN,CAAgCD,OAAhC,CAAwCC,GAAG,CAACI,MAA5C;AACAP,MAAAA,MAAM,CAACH,eAAe,CAACS,MAAhB,CAAuBH,GAAvB,CAAD,CAAN,CAAoCD,OAApC,CAA4CC,GAAG,CAACI,MAAhD;AACD,KAJC,CAAF;AAMAR,IAAAA,EAAE,CAAC,4DAAD,EAA+D,YAAM;AACrE,UAAMI,GAAG,GAAG;AAACK,QAAAA,OAAO,EAAE;AAAV,OAAZ;AACAR,MAAAA,MAAM,CAACL,WAAW,CAACW,MAAZ,CAAmBH,GAAnB,CAAD,CAAN,CAAgCD,OAAhC,CAAwCC,GAAG,CAACK,OAA5C;AACAR,MAAAA,MAAM,CAACH,eAAe,CAACS,MAAhB,CAAuBH,GAAvB,CAAD,CAAN,CAAoCD,OAApC,CAA4CC,GAAG,CAACK,OAAhD;AACD,KAJC,CAAF;AAKD,GAlBO,CAAR;AAmBD,CA3BO,CAAR","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @emails oncall+react_native\n */\n\n'use strict';\n\nconst PlatformIOS = require('../Platform.ios');\nconst PlatformAndroid = require('../Platform.android');\n\ndescribe('Platform', () => {\n  describe('OS', () => {\n    it('should have correct value', () => {\n      expect(PlatformIOS.OS).toEqual('ios');\n      expect(PlatformAndroid.OS).toEqual('android');\n    });\n  });\n\n  describe('select', () => {\n    it('should return platform specific value', () => {\n      const obj = {ios: 'ios', android: 'android'};\n      expect(PlatformIOS.select(obj)).toEqual(obj.ios);\n      expect(PlatformAndroid.select(obj)).toEqual(obj.android);\n    });\n\n    it('should return native value if no specific value was found', () => {\n      const obj = {native: 'native', default: 'default'};\n      expect(PlatformIOS.select(obj)).toEqual(obj.native);\n      expect(PlatformAndroid.select(obj)).toEqual(obj.native);\n    });\n\n    it('should return default value if no specific value was found', () => {\n      const obj = {default: 'default'};\n      expect(PlatformIOS.select(obj)).toEqual(obj.default);\n      expect(PlatformAndroid.select(obj)).toEqual(obj.default);\n    });\n  });\n});\n"]},"metadata":{},"sourceType":"script"}