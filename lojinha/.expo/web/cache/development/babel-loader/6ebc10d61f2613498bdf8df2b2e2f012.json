{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = warnAboutManuallyLinkedLibs;\n\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _index = _interopRequireDefault(require(\"./index\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction warnAboutManuallyLinkedLibs(config) {\n  var platform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'android';\n  var linkConfig = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : (0, _index.default)();\n  var deps = [];\n\n  for (var key in config.dependencies) {\n    var dependency = config.dependencies[key];\n\n    try {\n      var projectConfig = config.project[platform];\n      var dependencyConfig = dependency.platforms[platform];\n\n      if (projectConfig && dependencyConfig) {\n        var x = linkConfig.isInstalled(projectConfig, dependency.name, dependencyConfig);\n        deps = deps.concat(x ? dependency.name : []);\n      }\n    } catch (error) {\n      _cliTools().logger.debug('Checking manually linked modules failed.', error);\n    }\n  }\n\n  var installedModules = _toConsumableArray(new Set(deps));\n\n  if (installedModules.length) {\n    _cliTools().logger.error(\"React Native CLI uses autolinking for native dependencies, but the following modules are linked manually: \\n\" + installedModules.map(function (x) {\n      return \"  - \" + _chalk().default.bold(x) + \" \" + _chalk().default.dim(\"(to unlink run: \\\"react-native unlink \" + x + \"\\\")\");\n    }).join('\\n') + \"\\nThis is likely happening when upgrading React Native from below 0.60 to 0.60 or above. Going forward, you can unlink this dependency via \\\"react-native unlink <dependency>\\\" and it will be included in your app automatically. If a library isn't compatible with autolinking, disregard this message and notify the library maintainers.\\nRead more about autolinking: \" + _chalk().default.dim.underline('https://github.com/react-native-community/cli/blob/master/docs/autolinking.md'));\n  }\n}","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli-platform-android/build/link/warnAboutManuallyLinkedLibs.js"],"names":["Object","defineProperty","exports","value","default","warnAboutManuallyLinkedLibs","_chalk","data","_interopRequireDefault","require","_cliTools","_index","obj","__esModule","config","platform","linkConfig","deps","key","dependencies","dependency","projectConfig","project","dependencyConfig","platforms","x","isInstalled","name","concat","error","logger","debug","installedModules","Set","length","map","bold","dim","join","underline"],"mappings":"AAAA;;;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,2BAAlB;;AAEA,SAASC,MAAT,GAAkB;AAChB,MAAMC,IAAI,GAAGC,sBAAsB,CAACC,OAAO,CAAC,OAAD,CAAR,CAAnC;;AAEAH,EAAAA,MAAM,GAAG,kBAAY;AACnB,WAAOC,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,SAASG,SAAT,GAAqB;AACnB,MAAMH,IAAI,GAAGE,OAAO,CAAC,mCAAD,CAApB;;AAEAC,EAAAA,SAAS,GAAG,qBAAY;AACtB,WAAOH,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,IAAII,MAAM,GAAGH,sBAAsB,CAACC,OAAO,WAAR,CAAnC;;AAEA,SAASD,sBAAT,CAAgCI,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAER,IAAAA,OAAO,EAAEQ;AAAX,GAArC;AAAwD;;AAI/F,SAASP,2BAAT,CAAqCS,MAArC,EAAuG;AAAA,MAA1DC,QAA0D,uEAA/C,SAA+C;AAAA,MAApCC,UAAoC,uEAAvB,CAAC,GAAGL,MAAM,CAACP,OAAX,GAAuB;AACrG,MAAIa,IAAI,GAAG,EAAX;;AAEA,OAAK,IAAIC,GAAT,IAAgBJ,MAAM,CAACK,YAAvB,EAAqC;AACnC,QAAMC,UAAU,GAAGN,MAAM,CAACK,YAAP,CAAoBD,GAApB,CAAnB;;AAEA,QAAI;AACF,UAAMG,aAAa,GAAGP,MAAM,CAACQ,OAAP,CAAeP,QAAf,CAAtB;AACA,UAAMQ,gBAAgB,GAAGH,UAAU,CAACI,SAAX,CAAqBT,QAArB,CAAzB;;AAEA,UAAIM,aAAa,IAAIE,gBAArB,EAAuC;AACrC,YAAME,CAAC,GAAGT,UAAU,CAACU,WAAX,CAAuBL,aAAvB,EAAsCD,UAAU,CAACO,IAAjD,EAAuDJ,gBAAvD,CAAV;AACAN,QAAAA,IAAI,GAAGA,IAAI,CAACW,MAAL,CAAYH,CAAC,GAAGL,UAAU,CAACO,IAAd,GAAqB,EAAlC,CAAP;AACD;AACF,KARD,CAQE,OAAOE,KAAP,EAAc;AACdnB,MAAAA,SAAS,GAAGoB,MAAZ,CAAmBC,KAAnB,CAAyB,0CAAzB,EAAqEF,KAArE;AACD;AACF;;AAED,MAAMG,gBAAgB,sBAAO,IAAIC,GAAJ,CAAQhB,IAAR,CAAP,CAAtB;;AAEA,MAAIe,gBAAgB,CAACE,MAArB,EAA6B;AAC3BxB,IAAAA,SAAS,GAAGoB,MAAZ,CAAmBD,KAAnB,kHAAwIG,gBAAgB,CAACG,GAAjB,CAAqB,UAAAV,CAAC;AAAA,sBAAWnB,MAAM,GAAGF,OAAT,CAAiBgC,IAAjB,CAAsBX,CAAtB,CAAX,SAAuCnB,MAAM,GAAGF,OAAT,CAAiBiC,GAAjB,4CAA6DZ,CAA7D,SAAvC;AAAA,KAAtB,EAAoIa,IAApI,CAAyI,IAAzI,CAAxI,oXAAmoBhC,MAAM,GAAGF,OAAT,CAAiBiC,GAAjB,CAAqBE,SAArB,CAA+B,+EAA/B,CAAnoB;AACD;AACF","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = warnAboutManuallyLinkedLibs;\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require(\"chalk\"));\n\n  _chalk = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _index = _interopRequireDefault(require(\"./index\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// TODO: move to cli-tools once platform-ios and platform-android are migrated\n// to TS and unify with iOS implementation\nfunction warnAboutManuallyLinkedLibs(config, platform = 'android', linkConfig = (0, _index.default)()) {\n  let deps = [];\n\n  for (let key in config.dependencies) {\n    const dependency = config.dependencies[key];\n\n    try {\n      const projectConfig = config.project[platform];\n      const dependencyConfig = dependency.platforms[platform];\n\n      if (projectConfig && dependencyConfig) {\n        const x = linkConfig.isInstalled(projectConfig, dependency.name, dependencyConfig);\n        deps = deps.concat(x ? dependency.name : []);\n      }\n    } catch (error) {\n      _cliTools().logger.debug('Checking manually linked modules failed.', error);\n    }\n  }\n\n  const installedModules = [...new Set(deps)];\n\n  if (installedModules.length) {\n    _cliTools().logger.error(`React Native CLI uses autolinking for native dependencies, but the following modules are linked manually: \\n${installedModules.map(x => `  - ${_chalk().default.bold(x)} ${_chalk().default.dim(`(to unlink run: \"react-native unlink ${x}\")`)}`).join('\\n')}\\nThis is likely happening when upgrading React Native from below 0.60 to 0.60 or above. Going forward, you can unlink this dependency via \"react-native unlink <dependency>\" and it will be included in your app automatically. If a library isn't compatible with autolinking, disregard this message and notify the library maintainers.\\nRead more about autolinking: ${_chalk().default.dim.underline('https://github.com/react-native-community/cli/blob/master/docs/autolinking.md')}`);\n  }\n}\n\n//# sourceMappingURL=warnAboutManuallyLinkedLibs.js.map"]},"metadata":{},"sourceType":"script"}