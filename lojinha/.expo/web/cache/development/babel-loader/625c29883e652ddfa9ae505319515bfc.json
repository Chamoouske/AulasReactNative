{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar android_plugins_1 = require(\"../plugins/android-plugins\");\n\nvar XML_1 = require(\"../utils/XML\");\n\nvar errors_1 = require(\"../utils/errors\");\n\nvar warnings_1 = require(\"../utils/warnings\");\n\nvar Resources_1 = require(\"./Resources\");\n\nvar Strings_1 = require(\"./Strings\");\n\nfunction sanitizeNameForGradle(name) {\n  return name.replace(/(\\/|\\\\|:|<|>|\"|\\?|\\*|\\|)/g, '');\n}\n\nexports.sanitizeNameForGradle = sanitizeNameForGradle;\nexports.withName = android_plugins_1.createStringsXmlPlugin(applyNameFromConfig, 'withName');\n\nexports.withNameSettingsGradle = function (config) {\n  return android_plugins_1.withSettingsGradle(config, function (config) {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = applyNameSettingsGradle(config, config.modResults.contents);\n    } else {\n      warnings_1.addWarningAndroid('android-name-settings-gradle', \"Cannot automatically configure settings.gradle if it's not groovy\");\n    }\n\n    return config;\n  });\n};\n\nfunction getName(config) {\n  return typeof config.name === 'string' ? config.name : null;\n}\n\nexports.getName = getName;\n\nfunction setName(config, projectRoot) {\n  var stringsPath, stringsJSON;\n  return _regeneratorRuntime.async(function setName$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(Strings_1.getProjectStringsXMLPathAsync(projectRoot));\n\n        case 2:\n          stringsPath = _context.sent;\n          errors_1.assert(stringsPath);\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(Resources_1.readResourcesXMLAsync({\n            path: stringsPath\n          }));\n\n        case 6:\n          stringsJSON = _context.sent;\n          stringsJSON = applyNameFromConfig(config, stringsJSON);\n          _context.prev = 8;\n          _context.next = 11;\n          return _regeneratorRuntime.awrap(XML_1.writeXMLAsync({\n            path: stringsPath,\n            xml: stringsJSON\n          }));\n\n        case 11:\n          _context.next = 16;\n          break;\n\n        case 13:\n          _context.prev = 13;\n          _context.t0 = _context[\"catch\"](8);\n          throw new Error(\"Error setting name. Cannot write strings.xml to \" + stringsPath + \".\");\n\n        case 16:\n          return _context.abrupt(\"return\", true);\n\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[8, 13]], Promise);\n}\n\nexports.setName = setName;\n\nfunction applyNameFromConfig(config, stringsJSON) {\n  var name = getName(config);\n\n  if (name) {\n    return Strings_1.setStringItem([Resources_1.buildResourceItem({\n      name: 'app_name',\n      value: name\n    })], stringsJSON);\n  }\n\n  return Strings_1.removeStringItem('app_name', stringsJSON);\n}\n\nfunction applyNameSettingsGradle(config, settingsGradle) {\n  var _a;\n\n  var name = sanitizeNameForGradle((_a = getName(config)) !== null && _a !== void 0 ? _a : '');\n  return settingsGradle.replace(/rootProject.name\\s?=\\s?([\"'])(?:(?=(\\\\?))\\2.)*?\\1/g, \"rootProject.name = '\" + name + \"'\");\n}\n\nexports.applyNameSettingsGradle = applyNameSettingsGradle;","map":{"version":3,"sources":["../../src/android/Name.ts"],"names":[],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { createStringsXmlPlugin, withSettingsGradle } from '../plugins/android-plugins';\nimport { writeXMLAsync } from '../utils/XML';\nimport { assert } from '../utils/errors';\nimport { addWarningAndroid } from '../utils/warnings';\nimport { buildResourceItem, readResourcesXMLAsync, ResourceXML } from './Resources';\nimport { getProjectStringsXMLPathAsync, removeStringItem, setStringItem } from './Strings';\n\n/**\n * Sanitize a name, this should be used for files and gradle names.\n * - `[/, \\, :, <, >, \", ?, *, |]` are not allowed https://bit.ly/3l6xqKL\n *\n * @param name\n */\nexport function sanitizeNameForGradle(name: string): string {\n  // Gradle disallows these:\n  // The project name 'My-Special ðŸ˜ƒ Co/ol_Project' must not contain any of the following characters: [/, \\, :, <, >, \", ?, *, |]. Set the 'rootProject.name' or adjust the 'include' statement (see https://docs.gradle.org/6.2/dsl/org.gradle.api.initialization.Settings.html#org.gradle.api.initialization.Settings:include(java.lang.String[]) for more details).\n  return name.replace(/(\\/|\\\\|:|<|>|\"|\\?|\\*|\\|)/g, '');\n}\n\nexport const withName = createStringsXmlPlugin(applyNameFromConfig, 'withName');\n\nexport const withNameSettingsGradle: ConfigPlugin = config => {\n  return withSettingsGradle(config, config => {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = applyNameSettingsGradle(config, config.modResults.contents);\n    } else {\n      addWarningAndroid(\n        'android-name-settings-gradle',\n        `Cannot automatically configure settings.gradle if it's not groovy`\n      );\n    }\n    return config;\n  });\n};\n\nexport function getName(config: Pick<ExpoConfig, 'name'>) {\n  return typeof config.name === 'string' ? config.name : null;\n}\n\n/**\n * Changes the display name on the home screen,\n * notifications, and others.\n */\nexport async function setName(\n  config: Pick<ExpoConfig, 'name'>,\n  projectRoot: string\n): Promise<boolean> {\n  const stringsPath = await getProjectStringsXMLPathAsync(projectRoot);\n  assert(stringsPath);\n\n  let stringsJSON = await readResourcesXMLAsync({ path: stringsPath });\n  stringsJSON = applyNameFromConfig(config, stringsJSON);\n\n  try {\n    await writeXMLAsync({ path: stringsPath, xml: stringsJSON });\n  } catch {\n    throw new Error(`Error setting name. Cannot write strings.xml to ${stringsPath}.`);\n  }\n  return true;\n}\n\nfunction applyNameFromConfig(\n  config: Pick<ExpoConfig, 'name'>,\n  stringsJSON: ResourceXML\n): ResourceXML {\n  const name = getName(config);\n  if (name) {\n    return setStringItem([buildResourceItem({ name: 'app_name', value: name })], stringsJSON);\n  }\n  return removeStringItem('app_name', stringsJSON);\n}\n\n/**\n * Regex a name change -- fragile.\n *\n * @param config\n * @param settingsGradle\n */\nexport function applyNameSettingsGradle(config: Pick<ExpoConfig, 'name'>, settingsGradle: string) {\n  const name = sanitizeNameForGradle(getName(config) ?? '');\n\n  // Select rootProject.name = '***' and replace the contents between the quotes.\n  return settingsGradle.replace(\n    /rootProject.name\\s?=\\s?([\"'])(?:(?=(\\\\?))\\2.)*?\\1/g,\n    `rootProject.name = '${name}'`\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}