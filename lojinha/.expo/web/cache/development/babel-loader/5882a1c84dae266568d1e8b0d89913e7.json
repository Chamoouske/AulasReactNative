{"ast":null,"code":"'use strict';\n\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native-web/src/vendor/react-native/FlatList/index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport deepDiffer from \"../deepDiffer\";\nimport * as React from 'react';\nimport StyleSheet from \"../../../exports/StyleSheet\";\nimport View from \"../../../exports/View\";\nimport VirtualizedList from \"../VirtualizedList\";\nimport invariant from 'fbjs/lib/invariant';\n\nvar defaultProps = _objectSpread(_objectSpread({}, VirtualizedList.defaultProps), {}, {\n  numColumns: 1,\n  removeClippedSubviews: false\n});\n\nvar FlatList = function (_React$PureComponent) {\n  _inherits(FlatList, _React$PureComponent);\n\n  var _super = _createSuper(FlatList);\n\n  function FlatList(props) {\n    var _this;\n\n    _classCallCheck(this, FlatList);\n\n    _this = _super.call(this, props);\n    _this._virtualizedListPairs = [];\n\n    _this._captureRef = function (ref) {\n      _this._listRef = ref;\n    };\n\n    _this._getItem = function (data, index) {\n      var numColumns = _this.props.numColumns;\n\n      if (numColumns > 1) {\n        var ret = [];\n\n        for (var kk = 0; kk < numColumns; kk++) {\n          var _item = data[index * numColumns + kk];\n\n          if (_item != null) {\n            ret.push(_item);\n          }\n        }\n\n        return ret;\n      } else {\n        return data[index];\n      }\n    };\n\n    _this._getItemCount = function (data) {\n      return data ? Math.ceil(data.length / _this.props.numColumns) : 0;\n    };\n\n    _this._keyExtractor = function (items, index) {\n      var _this$props = _this.props,\n          keyExtractor = _this$props.keyExtractor,\n          numColumns = _this$props.numColumns;\n\n      if (numColumns > 1) {\n        invariant(Array.isArray(items), 'FlatList: Encountered internal consistency error, expected each item to consist of an ' + 'array with 1-%s columns; instead, received a single item.', numColumns);\n        return items.map(function (it, kk) {\n          return keyExtractor(it, index * numColumns + kk);\n        }).join(':');\n      } else {\n        return keyExtractor(items, index);\n      }\n    };\n\n    _this._renderItem = function (info) {\n      var _this$props2 = _this.props,\n          renderItem = _this$props2.renderItem,\n          numColumns = _this$props2.numColumns,\n          columnWrapperStyle = _this$props2.columnWrapperStyle;\n\n      if (numColumns > 1) {\n        var _item2 = info.item,\n            _index = info.index;\n        invariant(Array.isArray(_item2), 'Expected array of items with numColumns > 1');\n        return React.createElement(View, {\n          style: StyleSheet.compose(styles.row, columnWrapperStyle),\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 622,\n            columnNumber: 9\n          }\n        }, _item2.map(function (it, kk) {\n          var element = renderItem({\n            item: it,\n            index: _index * numColumns + kk,\n            separators: info.separators\n          });\n          return element != null ? React.createElement(React.Fragment, {\n            key: kk,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 634,\n              columnNumber: 15\n            }\n          }, element) : null;\n        }));\n      } else {\n        return renderItem(info);\n      }\n    };\n\n    _this._checkProps(_this.props);\n\n    if (_this.props.viewabilityConfigCallbackPairs) {\n      _this._virtualizedListPairs = _this.props.viewabilityConfigCallbackPairs.map(function (pair) {\n        return {\n          viewabilityConfig: pair.viewabilityConfig,\n          onViewableItemsChanged: _this._createOnViewableItemsChanged(pair.onViewableItemsChanged)\n        };\n      });\n    } else if (_this.props.onViewableItemsChanged) {\n      _this._virtualizedListPairs.push({\n        viewabilityConfig: _this.props.viewabilityConfig,\n        onViewableItemsChanged: _this._createOnViewableItemsChanged(_this.props.onViewableItemsChanged)\n      });\n    }\n\n    return _this;\n  }\n\n  _createClass(FlatList, [{\n    key: \"scrollToEnd\",\n    value: function scrollToEnd(params) {\n      if (this._listRef) {\n        this._listRef.scrollToEnd(params);\n      }\n    }\n  }, {\n    key: \"scrollToIndex\",\n    value: function scrollToIndex(params) {\n      if (this._listRef) {\n        this._listRef.scrollToIndex(params);\n      }\n    }\n  }, {\n    key: \"scrollToItem\",\n    value: function scrollToItem(params) {\n      if (this._listRef) {\n        this._listRef.scrollToItem(params);\n      }\n    }\n  }, {\n    key: \"scrollToOffset\",\n    value: function scrollToOffset(params) {\n      if (this._listRef) {\n        this._listRef.scrollToOffset(params);\n      }\n    }\n  }, {\n    key: \"recordInteraction\",\n    value: function recordInteraction() {\n      if (this._listRef) {\n        this._listRef.recordInteraction();\n      }\n    }\n  }, {\n    key: \"flashScrollIndicators\",\n    value: function flashScrollIndicators() {\n      if (this._listRef) {\n        this._listRef.flashScrollIndicators();\n      }\n    }\n  }, {\n    key: \"getScrollResponder\",\n    value: function getScrollResponder() {\n      if (this._listRef) {\n        return this._listRef.getScrollResponder();\n      }\n    }\n  }, {\n    key: \"getNativeScrollRef\",\n    value: function getNativeScrollRef() {\n      if (this._listRef) {\n        return this._listRef.getScrollRef();\n      }\n    }\n  }, {\n    key: \"getScrollableNode\",\n    value: function getScrollableNode() {\n      if (this._listRef) {\n        return this._listRef.getScrollableNode();\n      }\n    }\n  }, {\n    key: \"setNativeProps\",\n    value: function setNativeProps(props) {\n      if (this._listRef) {\n        this._listRef.setNativeProps(props);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      invariant(prevProps.numColumns === this.props.numColumns, 'Changing numColumns on the fly is not supported. Change the key prop on FlatList when ' + 'changing the number of columns to force a fresh render of the component.');\n      invariant(prevProps.onViewableItemsChanged === this.props.onViewableItemsChanged, 'Changing onViewableItemsChanged on the fly is not supported');\n      invariant(!deepDiffer(prevProps.viewabilityConfig, this.props.viewabilityConfig), 'Changing viewabilityConfig on the fly is not supported');\n      invariant(prevProps.viewabilityConfigCallbackPairs === this.props.viewabilityConfigCallbackPairs, 'Changing viewabilityConfigCallbackPairs on the fly is not supported');\n\n      this._checkProps(this.props);\n    }\n  }, {\n    key: \"_checkProps\",\n    value: function _checkProps(props) {\n      var getItem = props.getItem,\n          getItemCount = props.getItemCount,\n          horizontal = props.horizontal,\n          numColumns = props.numColumns,\n          columnWrapperStyle = props.columnWrapperStyle,\n          onViewableItemsChanged = props.onViewableItemsChanged,\n          viewabilityConfigCallbackPairs = props.viewabilityConfigCallbackPairs;\n      invariant(!getItem && !getItemCount, 'FlatList does not support custom data formats.');\n\n      if (numColumns > 1) {\n        invariant(!horizontal, 'numColumns does not support horizontal.');\n      } else {\n        invariant(!columnWrapperStyle, 'columnWrapperStyle not supported for single column lists');\n      }\n\n      invariant(!(onViewableItemsChanged && viewabilityConfigCallbackPairs), 'FlatList does not support setting both onViewableItemsChanged and ' + 'viewabilityConfigCallbackPairs.');\n    }\n  }, {\n    key: \"_pushMultiColumnViewable\",\n    value: function _pushMultiColumnViewable(arr, v) {\n      var _this$props3 = this.props,\n          numColumns = _this$props3.numColumns,\n          keyExtractor = _this$props3.keyExtractor;\n      v.item.forEach(function (item, ii) {\n        invariant(v.index != null, 'Missing index!');\n        var index = v.index * numColumns + ii;\n        arr.push(_objectSpread(_objectSpread({}, v), {}, {\n          item: item,\n          key: keyExtractor(item, index),\n          index: index\n        }));\n      });\n    }\n  }, {\n    key: \"_createOnViewableItemsChanged\",\n    value: function _createOnViewableItemsChanged(onViewableItemsChanged) {\n      var _this2 = this;\n\n      return function (info) {\n        var numColumns = _this2.props.numColumns;\n\n        if (onViewableItemsChanged) {\n          if (numColumns > 1) {\n            var changed = [];\n            var viewableItems = [];\n            info.viewableItems.forEach(function (v) {\n              return _this2._pushMultiColumnViewable(viewableItems, v);\n            });\n            info.changed.forEach(function (v) {\n              return _this2._pushMultiColumnViewable(changed, v);\n            });\n            onViewableItemsChanged({\n              viewableItems: viewableItems,\n              changed: changed\n            });\n          } else {\n            onViewableItemsChanged(info);\n          }\n        }\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(VirtualizedList, _extends({}, this.props, {\n        renderItem: this._renderItem,\n        getItem: this._getItem,\n        getItemCount: this._getItemCount,\n        keyExtractor: this._keyExtractor,\n        ref: this._captureRef,\n        viewabilityConfigCallbackPairs: this._virtualizedListPairs,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 646,\n          columnNumber: 7\n        }\n      }));\n    }\n  }]);\n\n  return FlatList;\n}(React.PureComponent);\n\nFlatList.defaultProps = defaultProps;\nvar styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row'\n  }\n});\nexport default FlatList;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native-web/src/vendor/react-native/FlatList/index.js"],"names":["deepDiffer","React","StyleSheet","View","VirtualizedList","invariant","defaultProps","numColumns","removeClippedSubviews","FlatList","props","_virtualizedListPairs","_captureRef","ref","_listRef","_getItem","data","index","ret","kk","item","push","_getItemCount","Math","ceil","length","_keyExtractor","items","keyExtractor","Array","isArray","map","it","join","_renderItem","info","renderItem","columnWrapperStyle","compose","styles","row","element","separators","_checkProps","viewabilityConfigCallbackPairs","pair","viewabilityConfig","onViewableItemsChanged","_createOnViewableItemsChanged","params","scrollToEnd","scrollToIndex","scrollToItem","scrollToOffset","recordInteraction","flashScrollIndicators","getScrollResponder","getScrollRef","getScrollableNode","setNativeProps","prevProps","getItem","getItemCount","horizontal","arr","v","forEach","ii","key","changed","viewableItems","_pushMultiColumnViewable","PureComponent","create","flexDirection"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nimport type {ViewProps} from '../../../exports/View';\n\nimport type {\n  ViewabilityConfig,\n  ViewToken,\n  ViewabilityConfigCallbackPair,\n} from '../ViewabilityHelper';\nimport type {Props as VirtualizedListProps} from '../VirtualizedList';\n\nimport deepDiffer from '../deepDiffer';\nimport * as React from 'react';\nimport StyleSheet from '../../../exports/StyleSheet';\nimport View from '../../../exports/View';\nimport VirtualizedList from '../VirtualizedList';\n\nimport invariant from 'fbjs/lib/invariant';\n\nexport type SeparatorsObj = {\n  highlight: () => void,\n  unhighlight: () => void,\n  updateProps: (select: 'leading' | 'trailing', newProps: Object) => void,\n};\n\ntype ViewStyleProp = $PropertyType<ViewProps, 'style'>;\n\ntype RequiredProps<ItemT> = {\n  /**\n   * Takes an item from `data` and renders it into the list. Example usage:\n   *\n   *     <FlatList\n   *       ItemSeparatorComponent={Platform.OS !== 'android' && ({highlighted}) => (\n   *         <View style={[style.separator, highlighted && {marginLeft: 0}]} />\n   *       )}\n   *       data={[{title: 'Title Text', key: 'item1'}]}\n   *       renderItem={({item, separators}) => (\n   *         <TouchableHighlight\n   *           onPress={() => this._onPress(item)}\n   *           onShowUnderlay={separators.highlight}\n   *           onHideUnderlay={separators.unhighlight}>\n   *           <View style={{backgroundColor: 'white'}}>\n   *             <Text>{item.title}</Text>\n   *           </View>\n   *         </TouchableHighlight>\n   *       )}\n   *     />\n   *\n   * Provides additional metadata like `index` if you need it, as well as a more generic\n   * `separators.updateProps` function which let's you set whatever props you want to change the\n   * rendering of either the leading separator or trailing separator in case the more common\n   * `highlight` and `unhighlight` (which set the `highlighted: boolean` prop) are insufficient for\n   * your use-case.\n   */\n  renderItem: (info: {\n    item: ItemT,\n    index: number,\n    separators: SeparatorsObj,\n  }) => ?React.Node,\n  /**\n   * For simplicity, data is just a plain array. If you want to use something else, like an\n   * immutable list, use the underlying `VirtualizedList` directly.\n   */\n  data: ?$ReadOnlyArray<ItemT>,\n};\ntype OptionalProps<ItemT> = {\n  /**\n   * Rendered in between each item, but not at the top or bottom. By default, `highlighted` and\n   * `leadingItem` props are provided. `renderItem` provides `separators.highlight`/`unhighlight`\n   * which will update the `highlighted` prop, but you can also add custom props with\n   * `separators.updateProps`.\n   */\n  ItemSeparatorComponent?: ?React.ComponentType<any>,\n  /**\n   * Rendered when the list is empty. Can be a React Component Class, a render function, or\n   * a rendered element.\n   */\n  ListEmptyComponent?: ?(React.ComponentType<any> | React.Element<any>),\n  /**\n   * Rendered at the bottom of all the items. Can be a React Component Class, a render function, or\n   * a rendered element.\n   */\n  ListFooterComponent?: ?(React.ComponentType<any> | React.Element<any>),\n  /**\n   * Styling for internal View for ListFooterComponent\n   */\n  ListFooterComponentStyle?: ViewStyleProp,\n  /**\n   * Rendered at the top of all the items. Can be a React Component Class, a render function, or\n   * a rendered element.\n   */\n  ListHeaderComponent?: ?(React.ComponentType<any> | React.Element<any>),\n  /**\n   * Styling for internal View for ListHeaderComponent\n   */\n  ListHeaderComponentStyle?: ViewStyleProp,\n  /**\n   * Optional custom style for multi-item rows generated when numColumns > 1.\n   */\n  columnWrapperStyle?: ViewStyleProp,\n  /**\n   * A marker property for telling the list to re-render (since it implements `PureComponent`). If\n   * any of your `renderItem`, Header, Footer, etc. functions depend on anything outside of the\n   * `data` prop, stick it here and treat it immutably.\n   */\n  extraData?: any,\n  /**\n   * `getItemLayout` is an optional optimizations that let us skip measurement of dynamic content if\n   * you know the height of items a priori. `getItemLayout` is the most efficient, and is easy to\n   * use if you have fixed height items, for example:\n   *\n   *     getItemLayout={(data, index) => (\n   *       {length: ITEM_HEIGHT, offset: ITEM_HEIGHT * index, index}\n   *     )}\n   *\n   * Adding `getItemLayout` can be a great performance boost for lists of several hundred items.\n   * Remember to include separator length (height or width) in your offset calculation if you\n   * specify `ItemSeparatorComponent`.\n   */\n  getItemLayout?: (\n    data: ?Array<ItemT>,\n    index: number,\n  ) => {length: number, offset: number, index: number},\n  /**\n   * If true, renders items next to each other horizontally instead of stacked vertically.\n   */\n  horizontal?: ?boolean,\n  /**\n   * How many items to render in the initial batch. This should be enough to fill the screen but not\n   * much more. Note these items will never be unmounted as part of the windowed rendering in order\n   * to improve perceived performance of scroll-to-top actions.\n   */\n  initialNumToRender: number,\n  /**\n   * Instead of starting at the top with the first item, start at `initialScrollIndex`. This\n   * disables the \"scroll to top\" optimization that keeps the first `initialNumToRender` items\n   * always rendered and immediately renders the items starting at this initial index. Requires\n   * `getItemLayout` to be implemented.\n   */\n  initialScrollIndex?: ?number,\n  /**\n   * Reverses the direction of scroll. Uses scale transforms of -1.\n   */\n  inverted?: ?boolean,\n  /**\n   * Used to extract a unique key for a given item at the specified index. Key is used for caching\n   * and as the react key to track item re-ordering. The default extractor checks `item.key`, then\n   * falls back to using the index, like React does.\n   */\n  keyExtractor: (item: ItemT, index: number) => string,\n  /**\n   * Multiple columns can only be rendered with `horizontal={false}` and will zig-zag like a\n   * `flexWrap` layout. Items should all be the same height - masonry layouts are not supported.\n   */\n  numColumns: number,\n  /**\n   * Called once when the scroll position gets within `onEndReachedThreshold` of the rendered\n   * content.\n   */\n  onEndReached?: ?(info: {distanceFromEnd: number}) => void,\n  /**\n   * How far from the end (in units of visible length of the list) the bottom edge of the\n   * list must be from the end of the content to trigger the `onEndReached` callback.\n   * Thus a value of 0.5 will trigger `onEndReached` when the end of the content is\n   * within half the visible length of the list.\n   */\n  onEndReachedThreshold?: ?number,\n  /**\n   * If provided, a standard RefreshControl will be added for \"Pull to Refresh\" functionality. Make\n   * sure to also set the `refreshing` prop correctly.\n   */\n  onRefresh?: ?() => void,\n  /**\n   * Called when the viewability of rows changes, as defined by the `viewabilityConfig` prop.\n   */\n  onViewableItemsChanged?: ?(info: {\n    viewableItems: Array<ViewToken>,\n    changed: Array<ViewToken>,\n  }) => void,\n  /**\n   * Set this when offset is needed for the loading indicator to show correctly.\n   * @platform android\n   */\n  progressViewOffset?: number,\n  /**\n   * The legacy implementation is no longer supported.\n   */\n  legacyImplementation?: empty,\n  /**\n   * Set this true while waiting for new data from a refresh.\n   */\n  refreshing?: ?boolean,\n  /**\n   * Note: may have bugs (missing content) in some circumstances - use at your own risk.\n   *\n   * This may improve scroll performance for large lists.\n   */\n  removeClippedSubviews?: boolean,\n  /**\n   * See `ViewabilityHelper` for flow type and further documentation.\n   */\n  viewabilityConfig?: ViewabilityConfig,\n  /**\n   * List of ViewabilityConfig/onViewableItemsChanged pairs. A specific onViewableItemsChanged\n   * will be called when its corresponding ViewabilityConfig's conditions are met.\n   */\n  viewabilityConfigCallbackPairs?: Array<ViewabilityConfigCallbackPair>,\n};\nexport type Props<ItemT> = RequiredProps<ItemT> &\n  OptionalProps<ItemT> &\n  VirtualizedListProps;\n\nconst defaultProps = {\n  ...VirtualizedList.defaultProps,\n  numColumns: 1,\n  /**\n   * Enabling this prop on Android greatly improves scrolling performance with no known issues.\n   * The alternative is that scrolling on Android is unusably bad. Enabling it on iOS has a few\n   * known issues.\n   */\n  removeClippedSubviews: false,\n};\nexport type DefaultProps = typeof defaultProps;\n\n/**\n * A performant interface for rendering simple, flat lists, supporting the most handy features:\n *\n *  - Fully cross-platform.\n *  - Optional horizontal mode.\n *  - Configurable viewability callbacks.\n *  - Header support.\n *  - Footer support.\n *  - Separator support.\n *  - Pull to Refresh.\n *  - Scroll loading.\n *  - ScrollToIndex support.\n *\n * If you need section support, use [`<SectionList>`](docs/sectionlist.html).\n *\n * Minimal Example:\n *\n *     <FlatList\n *       data={[{key: 'a'}, {key: 'b'}]}\n *       renderItem={({item}) => <Text>{item.key}</Text>}\n *     />\n *\n * More complex, multi-select example demonstrating `PureComponent` usage for perf optimization and avoiding bugs.\n *\n * - By binding the `onPressItem` handler, the props will remain `===` and `PureComponent` will\n *   prevent wasteful re-renders unless the actual `id`, `selected`, or `title` props change, even\n *   if the components rendered in `MyListItem` did not have such optimizations.\n * - By passing `extraData={this.state}` to `FlatList` we make sure `FlatList` itself will re-render\n *   when the `state.selected` changes. Without setting this prop, `FlatList` would not know it\n *   needs to re-render any items because it is also a `PureComponent` and the prop comparison will\n *   not show any changes.\n * - `keyExtractor` tells the list to use the `id`s for the react keys instead of the default `key` property.\n *\n *\n *     class MyListItem extends React.PureComponent {\n *       _onPress = () => {\n *         this.props.onPressItem(this.props.id);\n *       };\n *\n *       render() {\n *         const textColor = this.props.selected ? \"red\" : \"black\";\n *         return (\n *           <TouchableOpacity onPress={this._onPress}>\n *             <View>\n *               <Text style={{ color: textColor }}>\n *                 {this.props.title}\n *               </Text>\n *             </View>\n *           </TouchableOpacity>\n *         );\n *       }\n *     }\n *\n *     class MultiSelectList extends React.PureComponent {\n *       state = {selected: (new Map(): Map<string, boolean>)};\n *\n *       _keyExtractor = (item, index) => item.id;\n *\n *       _onPressItem = (id: string) => {\n *         // updater functions are preferred for transactional updates\n *         this.setState((state) => {\n *           // copy the map rather than modifying state.\n *           const selected = new Map(state.selected);\n *           selected.set(id, !selected.get(id)); // toggle\n *           return {selected};\n *         });\n *       };\n *\n *       _renderItem = ({item}) => (\n *         <MyListItem\n *           id={item.id}\n *           onPressItem={this._onPressItem}\n *           selected={!!this.state.selected.get(item.id)}\n *           title={item.title}\n *         />\n *       );\n *\n *       render() {\n *         return (\n *           <FlatList\n *             data={this.props.data}\n *             extraData={this.state}\n *             keyExtractor={this._keyExtractor}\n *             renderItem={this._renderItem}\n *           />\n *         );\n *       }\n *     }\n *\n * This is a convenience wrapper around [`<VirtualizedList>`](docs/virtualizedlist.html),\n * and thus inherits its props (as well as those of `ScrollView`) that aren't explicitly listed\n * here, along with the following caveats:\n *\n * - Internal state is not preserved when content scrolls out of the render window. Make sure all\n *   your data is captured in the item data or external stores like Flux, Redux, or Relay.\n * - This is a `PureComponent` which means that it will not re-render if `props` remain shallow-\n *   equal. Make sure that everything your `renderItem` function depends on is passed as a prop\n *   (e.g. `extraData`) that is not `===` after updates, otherwise your UI may not update on\n *   changes. This includes the `data` prop and parent component state.\n * - In order to constrain memory and enable smooth scrolling, content is rendered asynchronously\n *   offscreen. This means it's possible to scroll faster than the fill rate ands momentarily see\n *   blank content. This is a tradeoff that can be adjusted to suit the needs of each application,\n *   and we are working on improving it behind the scenes.\n * - By default, the list looks for a `key` prop on each item and uses that for the React key.\n *   Alternatively, you can provide a custom `keyExtractor` prop.\n *\n * Also inherits [ScrollView Props](docs/scrollview.html#props), unless it is nested in another FlatList of same orientation.\n */\nclass FlatList<ItemT> extends React.PureComponent<Props<ItemT>, void> {\n  static defaultProps: DefaultProps = defaultProps;\n  props: Props<ItemT>;\n  /**\n   * Scrolls to the end of the content. May be janky without `getItemLayout` prop.\n   */\n  scrollToEnd(params?: ?{animated?: ?boolean}) {\n    if (this._listRef) {\n      this._listRef.scrollToEnd(params);\n    }\n  }\n\n  /**\n   * Scrolls to the item at the specified index such that it is positioned in the viewable area\n   * such that `viewPosition` 0 places it at the top, 1 at the bottom, and 0.5 centered in the\n   * middle. `viewOffset` is a fixed number of pixels to offset the final target position.\n   *\n   * Note: cannot scroll to locations outside the render window without specifying the\n   * `getItemLayout` prop.\n   */\n  scrollToIndex(params: {\n    animated?: ?boolean,\n    index: number,\n    viewOffset?: number,\n    viewPosition?: number,\n  }) {\n    if (this._listRef) {\n      this._listRef.scrollToIndex(params);\n    }\n  }\n\n  /**\n   * Requires linear scan through data - use `scrollToIndex` instead if possible.\n   *\n   * Note: cannot scroll to locations outside the render window without specifying the\n   * `getItemLayout` prop.\n   */\n  scrollToItem(params: {\n    animated?: ?boolean,\n    item: ItemT,\n    viewPosition?: number,\n  }) {\n    if (this._listRef) {\n      this._listRef.scrollToItem(params);\n    }\n  }\n\n  /**\n   * Scroll to a specific content pixel offset in the list.\n   *\n   * Check out [scrollToOffset](docs/virtualizedlist.html#scrolltooffset) of VirtualizedList\n   */\n  scrollToOffset(params: {animated?: ?boolean, offset: number}) {\n    if (this._listRef) {\n      this._listRef.scrollToOffset(params);\n    }\n  }\n\n  /**\n   * Tells the list an interaction has occurred, which should trigger viewability calculations, e.g.\n   * if `waitForInteractions` is true and the user has not scrolled. This is typically called by\n   * taps on items or by navigation actions.\n   */\n  recordInteraction() {\n    if (this._listRef) {\n      this._listRef.recordInteraction();\n    }\n  }\n\n  /**\n   * Displays the scroll indicators momentarily.\n   *\n   * @platform ios\n   */\n  flashScrollIndicators() {\n    if (this._listRef) {\n      this._listRef.flashScrollIndicators();\n    }\n  }\n\n  /**\n   * Provides a handle to the underlying scroll responder.\n   */\n  getScrollResponder() {\n    if (this._listRef) {\n      return this._listRef.getScrollResponder();\n    }\n  }\n\n  /**\n   * Provides a reference to the underlying host component\n   */\n  getNativeScrollRef() {\n    if (this._listRef) {\n      return this._listRef.getScrollRef();\n    }\n  }\n\n  getScrollableNode() {\n    if (this._listRef) {\n      return this._listRef.getScrollableNode();\n    }\n  }\n\n  setNativeProps(props: {[string]: mixed}) {\n    if (this._listRef) {\n      this._listRef.setNativeProps(props);\n    }\n  }\n\n  constructor(props: Props<ItemT>) {\n    super(props);\n    this._checkProps(this.props);\n    if (this.props.viewabilityConfigCallbackPairs) {\n      this._virtualizedListPairs = this.props.viewabilityConfigCallbackPairs.map(\n        pair => ({\n          viewabilityConfig: pair.viewabilityConfig,\n          onViewableItemsChanged: this._createOnViewableItemsChanged(\n            pair.onViewableItemsChanged,\n          ),\n        }),\n      );\n    } else if (this.props.onViewableItemsChanged) {\n      /* $FlowFixMe(>=0.63.0 site=react_native_fb) This comment suppresses an\n       * error found when Flow v0.63 was deployed. To see the error delete this\n       * comment and run Flow. */\n      this._virtualizedListPairs.push({\n        viewabilityConfig: this.props.viewabilityConfig,\n        onViewableItemsChanged: this._createOnViewableItemsChanged(\n          this.props.onViewableItemsChanged,\n        ),\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps: Props<ItemT>) {\n    invariant(\n      prevProps.numColumns === this.props.numColumns,\n      'Changing numColumns on the fly is not supported. Change the key prop on FlatList when ' +\n        'changing the number of columns to force a fresh render of the component.',\n    );\n    invariant(\n      prevProps.onViewableItemsChanged === this.props.onViewableItemsChanged,\n      'Changing onViewableItemsChanged on the fly is not supported',\n    );\n    invariant(\n      !deepDiffer(prevProps.viewabilityConfig, this.props.viewabilityConfig),\n      'Changing viewabilityConfig on the fly is not supported',\n    );\n    invariant(\n      prevProps.viewabilityConfigCallbackPairs ===\n        this.props.viewabilityConfigCallbackPairs,\n      'Changing viewabilityConfigCallbackPairs on the fly is not supported',\n    );\n\n    this._checkProps(this.props);\n  }\n\n  _listRef: ?React.ElementRef<typeof VirtualizedList>;\n  _virtualizedListPairs: Array<ViewabilityConfigCallbackPair> = [];\n\n  // $FlowFixMe\n  _captureRef = ref => {\n    this._listRef = ref;\n  };\n\n  _checkProps(props: Props<ItemT>) {\n    const {\n      getItem,\n      getItemCount,\n      horizontal,\n      numColumns,\n      columnWrapperStyle,\n      onViewableItemsChanged,\n      viewabilityConfigCallbackPairs,\n    } = props;\n    invariant(\n      !getItem && !getItemCount,\n      'FlatList does not support custom data formats.',\n    );\n    if (numColumns > 1) {\n      invariant(!horizontal, 'numColumns does not support horizontal.');\n    } else {\n      invariant(\n        !columnWrapperStyle,\n        'columnWrapperStyle not supported for single column lists',\n      );\n    }\n    invariant(\n      !(onViewableItemsChanged && viewabilityConfigCallbackPairs),\n      'FlatList does not support setting both onViewableItemsChanged and ' +\n        'viewabilityConfigCallbackPairs.',\n    );\n  }\n\n  _getItem = (data: Array<ItemT>, index: number) => {\n    const {numColumns} = this.props;\n    if (numColumns > 1) {\n      const ret = [];\n      for (let kk = 0; kk < numColumns; kk++) {\n        const item = data[index * numColumns + kk];\n        if (item != null) {\n          ret.push(item);\n        }\n      }\n      return ret;\n    } else {\n      return data[index];\n    }\n  };\n\n  _getItemCount = (data: ?Array<ItemT>): number => {\n    return data ? Math.ceil(data.length / this.props.numColumns) : 0;\n  };\n\n  _keyExtractor = (items: ItemT | Array<ItemT>, index: number) => {\n    const {keyExtractor, numColumns} = this.props;\n    if (numColumns > 1) {\n      invariant(\n        Array.isArray(items),\n        'FlatList: Encountered internal consistency error, expected each item to consist of an ' +\n          'array with 1-%s columns; instead, received a single item.',\n        numColumns,\n      );\n      return items\n        .map((it, kk) => keyExtractor(it, index * numColumns + kk))\n        .join(':');\n    } else {\n      /* $FlowFixMe(>=0.63.0 site=react_native_fb) This comment suppresses an\n       * error found when Flow v0.63 was deployed. To see the error delete this\n       * comment and run Flow. */\n      return keyExtractor(items, index);\n    }\n  };\n\n  _pushMultiColumnViewable(arr: Array<ViewToken>, v: ViewToken): void {\n    const {numColumns, keyExtractor} = this.props;\n    v.item.forEach((item, ii) => {\n      invariant(v.index != null, 'Missing index!');\n      const index = v.index * numColumns + ii;\n      arr.push({...v, item, key: keyExtractor(item, index), index});\n    });\n  }\n\n  _createOnViewableItemsChanged(\n    onViewableItemsChanged: ?(info: {\n      viewableItems: Array<ViewToken>,\n      changed: Array<ViewToken>,\n    }) => void,\n  ) {\n    return (info: {\n      viewableItems: Array<ViewToken>,\n      changed: Array<ViewToken>,\n    }) => {\n      const {numColumns} = this.props;\n      if (onViewableItemsChanged) {\n        if (numColumns > 1) {\n          const changed = [];\n          const viewableItems = [];\n          info.viewableItems.forEach(v =>\n            this._pushMultiColumnViewable(viewableItems, v),\n          );\n          info.changed.forEach(v => this._pushMultiColumnViewable(changed, v));\n          onViewableItemsChanged({viewableItems, changed});\n        } else {\n          onViewableItemsChanged(info);\n        }\n      }\n    };\n  }\n\n  _renderItem = (info: Object): ?React.Node => {\n    const {renderItem, numColumns, columnWrapperStyle} = this.props;\n    if (numColumns > 1) {\n      const {item, index} = info;\n      invariant(\n        Array.isArray(item),\n        'Expected array of items with numColumns > 1',\n      );\n      return (\n        <View\n          style={StyleSheet.compose(\n            styles.row,\n            columnWrapperStyle,\n          )}>\n          {item.map((it, kk) => {\n            const element = renderItem({\n              item: it,\n              index: index * numColumns + kk,\n              separators: info.separators,\n            });\n            return element != null ? (\n              <React.Fragment key={kk}>{element}</React.Fragment>\n            ) : null;\n          })}\n        </View>\n      );\n    } else {\n      return renderItem(info);\n    }\n  };\n\n  render() {\n    return (\n      <VirtualizedList\n        {...this.props}\n        renderItem={this._renderItem}\n        getItem={this._getItem}\n        getItemCount={this._getItemCount}\n        keyExtractor={this._keyExtractor}\n        ref={this._captureRef}\n        viewabilityConfigCallbackPairs={this._virtualizedListPairs}\n      />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  row: {flexDirection: 'row'},\n});\n\nexport default FlatList;\n"]},"metadata":{},"sourceType":"module"}