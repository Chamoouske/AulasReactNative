{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Updates_1 = require(\"../../android/Updates\");\n\nvar Updates_2 = require(\"../../ios/Updates\");\n\nvar core_plugins_1 = require(\"../core-plugins\");\n\nvar static_plugins_1 = require(\"../static-plugins\");\n\nvar packageName = 'expo-updates';\n\nexports.withUpdates = function (config, props) {\n  return static_plugins_1.withStaticPlugin(config, {\n    _isLegacyPlugin: true,\n    plugin: [packageName, props],\n    fallback: function fallback(config) {\n      return withUnversionedUpdates(config, props);\n    }\n  });\n};\n\nvar withUnversionedUpdates = core_plugins_1.createRunOncePlugin(function (config, props) {\n  config = Updates_1.withUpdates(config, props);\n  config = Updates_2.withUpdates(config, props);\n  return config;\n}, packageName);\nexports.default = exports.withUpdates;","map":{"version":3,"sources":["../../../src/plugins/unversioned/expo-updates.ts"],"names":[],"mappings":";;;;;;AACA,IAAA,SAAA,GAAA,OAAA,yBAAA;;AACA,IAAA,SAAA,GAAA,OAAA,qBAAA;;AACA,IAAA,cAAA,GAAA,OAAA,mBAAA;;AACA,IAAA,gBAAA,GAAA,OAAA,qBAAA;;AAIA,IAAM,WAAW,GAAG,cAApB;;AAEa,OAAA,CAAA,WAAA,GAAsD,UAAC,MAAD,EAAS,KAAT,EAAkB;AACnF,SAAO,gBAAA,CAAA,gBAAA,CAAiB,MAAjB,EAAyB;AAC9B,IAAA,eAAe,EAAE,IADa;AAG9B,IAAA,MAAM,EAAE,CAAC,WAAD,EAAc,KAAd,CAHsB;AAK9B,IAAA,QAAQ,EAAE,kBAAA,MAAM;AAAA,aAAI,sBAAsB,CAAC,MAAD,EAAS,KAAT,CAA1B;AAAA;AALc,GAAzB,CAAP;AAOD,CARY;;AAUb,IAAM,sBAAsB,GAA2C,cAAA,CAAA,mBAAA,CACrE,UAAC,MAAD,EAAS,KAAT,EAAkB;AAChB,EAAA,MAAM,GAAG,SAAA,CAAA,WAAA,CAAmB,MAAnB,EAA2B,KAA3B,CAAT;AACA,EAAA,MAAM,GAAG,SAAA,CAAA,WAAA,CAAe,MAAf,EAAuB,KAAvB,CAAT;AACA,SAAO,MAAP;AACD,CALoE,EAMrE,WANqE,CAAvE;AASA,OAAA,CAAA,OAAA,GAAe,OAAA,CAAA,WAAf","sourcesContent":["import { ConfigPlugin } from '../../Plugin.types';\nimport { withUpdates as withUpdatesAndroid } from '../../android/Updates';\nimport { withUpdates as withUpdatesIOS } from '../../ios/Updates';\nimport { createRunOncePlugin } from '../core-plugins';\nimport { withStaticPlugin } from '../static-plugins';\n\n// Local unversioned updates plugin\n\nconst packageName = 'expo-updates';\n\nexport const withUpdates: ConfigPlugin<{ expoUsername: string }> = (config, props) => {\n  return withStaticPlugin(config, {\n    _isLegacyPlugin: true,\n    // Pass props to the static plugin if it exists.\n    plugin: [packageName, props],\n    // If the static plugin isn't found, use the unversioned one.\n    fallback: config => withUnversionedUpdates(config, props),\n  });\n};\n\nconst withUnversionedUpdates: ConfigPlugin<{ expoUsername: string }> = createRunOncePlugin(\n  (config, props) => {\n    config = withUpdatesAndroid(config, props);\n    config = withUpdatesIOS(config, props);\n    return config;\n  },\n  packageName\n);\n\nexport default withUpdates;\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}