{"ast":null,"code":"","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["import { PermissionResponse as UMPermissionResponse } from 'unimodules-permissions-interface';\n/**\n * Enum with available location accuracies.\n */\nexport declare enum LocationAccuracy {\n    Lowest = 1,\n    Low = 2,\n    Balanced = 3,\n    High = 4,\n    Highest = 5,\n    BestForNavigation = 6\n}\n/**\n * Enum with available activity types of background location tracking.\n */\nexport declare enum LocationActivityType {\n    Other = 1,\n    AutomotiveNavigation = 2,\n    Fitness = 3,\n    OtherNavigation = 4,\n    Airborne = 5\n}\n/**\n * A type of the event that geofencing task can receive.\n */\nexport declare enum LocationGeofencingEventType {\n    Enter = 1,\n    Exit = 2\n}\n/**\n * State of the geofencing region that you receive through the geofencing task.\n */\nexport declare enum LocationGeofencingRegionState {\n    Unknown = 0,\n    Inside = 1,\n    Outside = 2\n}\n/**\n * Type representing options argument in `getCurrentPositionAsync`.\n */\nexport declare type LocationOptions = {\n    /**\n     * Location manager accuracy. Pass one of `LocationAccuracy` enum values.\n     * For low-accuracies the implementation can avoid geolocation providers\n     * that consume a significant amount of power (such as GPS).\n     */\n    accuracy?: LocationAccuracy;\n    /**\n     * (Android only) Specifies whether to ask the user to turn on improved accuracy location mode\n     * which uses Wi-Fi, cell networks and GPS sensor. Defaults to `true`.\n     */\n    mayShowUserSettingsDialog?: boolean;\n    /**\n     * (Android only) Minimum time to wait between each update in milliseconds.\n     * Default value may depend on `accuracy` option.\n     */\n    timeInterval?: number;\n    /**\n     * Receive updates only when the location has changed by at least this distance in meters.\n     * Default value may depend on `accuracy` option.\n     */\n    distanceInterval?: number;\n};\n/**\n * Type representing options object that can be passed to `getLastKnownPositionAsync`.\n */\nexport declare type LocationLastKnownOptions = {\n    /**\n     * Maximum age of the location in miliseconds.\n     */\n    maxAge?: number;\n    /**\n     * Maximum radius of horizontal accuracy in meters.\n     */\n    requiredAccuracy?: number;\n};\n/**\n * Type representing background location task options.\n */\nexport declare type LocationTaskOptions = LocationOptions & {\n    showsBackgroundLocationIndicator?: boolean;\n    deferredUpdatesDistance?: number;\n    deferredUpdatesTimeout?: number;\n    deferredUpdatesInterval?: number;\n    activityType?: LocationActivityType;\n    pausesUpdatesAutomatically?: boolean;\n    foregroundService?: {\n        notificationTitle: string;\n        notificationBody: string;\n        notificationColor?: string;\n    };\n};\n/**\n * Type representing geofencing region object.\n */\nexport declare type LocationRegion = {\n    identifier?: string;\n    latitude: number;\n    longitude: number;\n    radius: number;\n    notifyOnEnter?: boolean;\n    notifyOnExit?: boolean;\n};\n/**\n * Type representing the location object.\n */\nexport declare type LocationObject = {\n    coords: {\n        latitude: number;\n        longitude: number;\n        altitude: number | null;\n        accuracy: number | null;\n        altitudeAccuracy: number | null;\n        heading: number | null;\n        speed: number | null;\n    };\n    timestamp: number;\n};\n/**\n * Represents `watchPositionAsync` callback.\n */\nexport declare type LocationCallback = (location: LocationObject) => any;\n/**\n * Represents the object containing details about location provider.\n */\nexport declare type LocationProviderStatus = {\n    locationServicesEnabled: boolean;\n    backgroundModeEnabled: boolean;\n    gpsAvailable?: boolean;\n    networkAvailable?: boolean;\n    passiveAvailable?: boolean;\n};\n/**\n * Type of the object containing heading details and provided by `watchHeadingAsync` callback.\n */\nexport declare type LocationHeadingObject = {\n    trueHeading: number;\n    magHeading: number;\n    accuracy: number;\n};\n/**\n * Represents `watchHeadingAsync` callback.\n */\nexport declare type LocationHeadingCallback = (location: LocationHeadingObject) => any;\n/**\n * An object of options for forward and reverse geocoding.\n */\nexport declare type LocationGeocodingOptions = {\n    /**\n     * Whether to force using Google Maps API instead of the native implementation.\n     * Used by default only on Web platform. Requires providing an API key by `setGoogleApiKey`.\n     */\n    useGoogleMaps?: boolean;\n};\n/**\n * Type representing a result of `geocodeAsync`.\n */\nexport declare type LocationGeocodedLocation = {\n    latitude: number;\n    longitude: number;\n    altitude?: number;\n    accuracy?: number;\n};\n/**\n * Type representing a result of `reverseGeocodeAsync`.\n */\nexport declare type LocationGeocodedAddress = {\n    city: string | null;\n    district: string | null;\n    street: string | null;\n    region: string | null;\n    subregion: string | null;\n    country: string | null;\n    postalCode: string | null;\n    name: string | null;\n    isoCountryCode: string | null;\n    timezone: string | null;\n};\n/**\n * Represents subscription object returned by methods watching for new locations or headings.\n */\nexport declare type LocationSubscription = {\n    remove: () => void;\n};\nexport declare type PermissionDetailsLocationIOS = {\n    scope: 'whenInUse' | 'always' | 'none';\n};\nexport declare type PermissionDetailsLocationAndroid = {\n    scope: 'fine' | 'coarse' | 'none';\n};\nexport interface LocationPermissionResponse extends UMPermissionResponse {\n    ios?: PermissionDetailsLocationIOS;\n    android?: PermissionDetailsLocationAndroid;\n}\n"]},"metadata":{},"sourceType":"module"}