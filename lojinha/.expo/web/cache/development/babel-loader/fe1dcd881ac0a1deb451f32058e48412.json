{"ast":null,"code":"'use strict';\n\nvar MatrixMath = require(\"../MatrixMath\");\n\nfunction degreesToRadians(degrees) {\n  return degrees * Math.PI / 180;\n}\n\nfunction convertZeroes(degrees) {\n  return degrees.map(function (value) {\n    return value === -0 ? 0 : value;\n  });\n}\n\ndescribe('MatrixMath', function () {\n  it('decomposes a 4x4 matrix to produce accurate Z-axis angles', function () {\n    expect(MatrixMath.decomposeMatrix([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]).rotationDegrees).toEqual([0, 0, 0]);\n    [30, 45, 60, 75, 90, 100, 115, 120, 133, 167].forEach(function (angle) {\n      var mat = MatrixMath.createRotateZ(degreesToRadians(angle));\n      expect(convertZeroes(MatrixMath.decomposeMatrix(mat).rotationDegrees)).toEqual([0, 0, angle]);\n      mat = MatrixMath.createRotateZ(degreesToRadians(-angle));\n      expect(convertZeroes(MatrixMath.decomposeMatrix(mat).rotationDegrees)).toEqual([0, 0, -angle]);\n    });\n    expect(MatrixMath.decomposeMatrix(MatrixMath.createRotateZ(degreesToRadians(180))).rotationDegrees).toEqual([0, 0, 180]);\n    expect(MatrixMath.decomposeMatrix(MatrixMath.createRotateZ(degreesToRadians(222))).rotationDegrees).toEqual([0, 0, -138]);\n    expect(MatrixMath.decomposeMatrix(MatrixMath.createRotateZ(degreesToRadians(270))).rotationDegrees).toEqual([0, 0, -90]);\n    expect(MatrixMath.decomposeMatrix(MatrixMath.createRotateZ(degreesToRadians(360))).rotationDegrees).toEqual([0, 0, -0]);\n    expect(MatrixMath.decomposeMatrix(MatrixMath.createRotateZ(degreesToRadians(33.33333333))).rotationDegrees).toEqual([0, 0, 33.333]);\n    expect(MatrixMath.decomposeMatrix(MatrixMath.createRotateZ(degreesToRadians(86.75309))).rotationDegrees).toEqual([0, 0, 86.753]);\n    expect(MatrixMath.decomposeMatrix(MatrixMath.createRotateZ(degreesToRadians(42.00000000001))).rotationDegrees).toEqual([0, 0, 42]);\n    expect(MatrixMath.decomposeMatrix(MatrixMath.createRotateZ(degreesToRadians(42.99999999999))).rotationDegrees).toEqual([0, 0, 43]);\n    expect(MatrixMath.decomposeMatrix(MatrixMath.createRotateZ(degreesToRadians(42.49999999999))).rotationDegrees).toEqual([0, 0, 42.5]);\n    expect(MatrixMath.decomposeMatrix(MatrixMath.createRotateZ(degreesToRadians(42.55555555555))).rotationDegrees).toEqual([0, 0, 42.556]);\n  });\n  it('decomposes a 4x4 matrix to produce accurate Y-axis angles', function () {\n    var mat;\n    [30, 45, 60, 75, 90, 100, 110, 120, 133, 167].forEach(function (angle) {\n      mat = MatrixMath.createIdentityMatrix();\n      MatrixMath.reuseRotateYCommand(mat, degreesToRadians(angle));\n      expect(convertZeroes(MatrixMath.decomposeMatrix(mat).rotationDegrees)).toEqual([0, angle, 0]);\n      mat = MatrixMath.createIdentityMatrix();\n      MatrixMath.reuseRotateYCommand(mat, degreesToRadians(-angle));\n      expect(convertZeroes(MatrixMath.decomposeMatrix(mat).rotationDegrees)).toEqual([0, -angle, 0]);\n    });\n    mat = MatrixMath.createIdentityMatrix();\n    MatrixMath.reuseRotateYCommand(mat, degreesToRadians(222));\n    expect(MatrixMath.decomposeMatrix(mat).rotationDegrees).toEqual([0, -138, 0]);\n    mat = MatrixMath.createIdentityMatrix();\n    MatrixMath.reuseRotateYCommand(mat, degreesToRadians(270));\n    expect(MatrixMath.decomposeMatrix(mat).rotationDegrees).toEqual([0, -90, 0]);\n    mat = MatrixMath.createIdentityMatrix();\n    MatrixMath.reuseRotateYCommand(mat, degreesToRadians(360));\n    expect(MatrixMath.decomposeMatrix(mat).rotationDegrees).toEqual([0, 0, 0]);\n  });\n  it('decomposes a 4x4 matrix to produce accurate X-axis angles', function () {\n    var mat;\n    [30, 45, 60, 75, 90, 100, 110, 120, 133, 167].forEach(function (angle) {\n      mat = MatrixMath.createIdentityMatrix();\n      MatrixMath.reuseRotateXCommand(mat, degreesToRadians(angle));\n      expect(convertZeroes(MatrixMath.decomposeMatrix(mat).rotationDegrees)).toEqual([angle, 0, 0]);\n    });\n    mat = MatrixMath.createIdentityMatrix();\n    MatrixMath.reuseRotateXCommand(mat, degreesToRadians(222));\n    expect(MatrixMath.decomposeMatrix(mat).rotationDegrees).toEqual([-138, 0, 0]);\n    mat = MatrixMath.createIdentityMatrix();\n    MatrixMath.reuseRotateXCommand(mat, degreesToRadians(270));\n    expect(MatrixMath.decomposeMatrix(mat).rotationDegrees).toEqual([-90, 0, 0]);\n    mat = MatrixMath.createIdentityMatrix();\n    MatrixMath.reuseRotateXCommand(mat, degreesToRadians(360));\n    expect(MatrixMath.decomposeMatrix(mat).rotationDegrees).toEqual([0, 0, 0]);\n  });\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Utilities/__tests__/MatrixMath-test.js"],"names":["MatrixMath","require","degreesToRadians","degrees","Math","PI","convertZeroes","map","value","describe","it","expect","decomposeMatrix","rotationDegrees","toEqual","forEach","angle","mat","createRotateZ","createIdentityMatrix","reuseRotateYCommand","reuseRotateXCommand"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @emails oncall+react_native\n */\n\n'use strict';\n\nconst MatrixMath = require('../MatrixMath');\n\nfunction degreesToRadians(degrees) {\n  return (degrees * Math.PI) / 180;\n}\n\nfunction convertZeroes(degrees) {\n  return degrees.map(value => (value === -0 ? 0 : value));\n}\n\ndescribe('MatrixMath', () => {\n  it('decomposes a 4x4 matrix to produce accurate Z-axis angles', () => {\n    expect(\n      MatrixMath.decomposeMatrix([\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n      ]).rotationDegrees,\n    ).toEqual([0, 0, 0]);\n\n    [30, 45, 60, 75, 90, 100, 115, 120, 133, 167].forEach(angle => {\n      let mat = MatrixMath.createRotateZ(degreesToRadians(angle));\n      expect(\n        convertZeroes(MatrixMath.decomposeMatrix(mat).rotationDegrees),\n      ).toEqual([0, 0, angle]);\n\n      mat = MatrixMath.createRotateZ(degreesToRadians(-angle));\n      expect(\n        convertZeroes(MatrixMath.decomposeMatrix(mat).rotationDegrees),\n      ).toEqual([0, 0, -angle]);\n    });\n\n    expect(\n      MatrixMath.decomposeMatrix(\n        MatrixMath.createRotateZ(degreesToRadians(180)),\n      ).rotationDegrees,\n    ).toEqual([0, 0, 180]);\n\n    // all values are between 0 and 180;\n    // change of sign and direction in the third and fourth quadrant\n    expect(\n      MatrixMath.decomposeMatrix(\n        MatrixMath.createRotateZ(degreesToRadians(222)),\n      ).rotationDegrees,\n    ).toEqual([0, 0, -138]);\n\n    expect(\n      MatrixMath.decomposeMatrix(\n        MatrixMath.createRotateZ(degreesToRadians(270)),\n      ).rotationDegrees,\n    ).toEqual([0, 0, -90]);\n\n    // 360 is expressed as 0\n    expect(\n      MatrixMath.decomposeMatrix(\n        MatrixMath.createRotateZ(degreesToRadians(360)),\n      ).rotationDegrees,\n    ).toEqual([0, 0, -0]);\n\n    expect(\n      MatrixMath.decomposeMatrix(\n        MatrixMath.createRotateZ(degreesToRadians(33.33333333)),\n      ).rotationDegrees,\n    ).toEqual([0, 0, 33.333]);\n\n    expect(\n      MatrixMath.decomposeMatrix(\n        MatrixMath.createRotateZ(degreesToRadians(86.75309)),\n      ).rotationDegrees,\n    ).toEqual([0, 0, 86.753]);\n\n    expect(\n      MatrixMath.decomposeMatrix(\n        MatrixMath.createRotateZ(degreesToRadians(42.00000000001)),\n      ).rotationDegrees,\n    ).toEqual([0, 0, 42]);\n\n    expect(\n      MatrixMath.decomposeMatrix(\n        MatrixMath.createRotateZ(degreesToRadians(42.99999999999)),\n      ).rotationDegrees,\n    ).toEqual([0, 0, 43]);\n\n    expect(\n      MatrixMath.decomposeMatrix(\n        MatrixMath.createRotateZ(degreesToRadians(42.49999999999)),\n      ).rotationDegrees,\n    ).toEqual([0, 0, 42.5]);\n\n    expect(\n      MatrixMath.decomposeMatrix(\n        MatrixMath.createRotateZ(degreesToRadians(42.55555555555)),\n      ).rotationDegrees,\n    ).toEqual([0, 0, 42.556]);\n  });\n\n  it('decomposes a 4x4 matrix to produce accurate Y-axis angles', () => {\n    let mat;\n    [30, 45, 60, 75, 90, 100, 110, 120, 133, 167].forEach(angle => {\n      mat = MatrixMath.createIdentityMatrix();\n      MatrixMath.reuseRotateYCommand(mat, degreesToRadians(angle));\n      expect(\n        convertZeroes(MatrixMath.decomposeMatrix(mat).rotationDegrees),\n      ).toEqual([0, angle, 0]);\n\n      mat = MatrixMath.createIdentityMatrix();\n      MatrixMath.reuseRotateYCommand(mat, degreesToRadians(-angle));\n      expect(\n        convertZeroes(MatrixMath.decomposeMatrix(mat).rotationDegrees),\n      ).toEqual([0, -angle, 0]);\n    });\n\n    // all values are between 0 and 180;\n    // change of sign and direction in the third and fourth quadrant\n    mat = MatrixMath.createIdentityMatrix();\n    MatrixMath.reuseRotateYCommand(mat, degreesToRadians(222));\n    expect(MatrixMath.decomposeMatrix(mat).rotationDegrees).toEqual([\n      0,\n      -138,\n      0,\n    ]);\n\n    mat = MatrixMath.createIdentityMatrix();\n    MatrixMath.reuseRotateYCommand(mat, degreesToRadians(270));\n    expect(MatrixMath.decomposeMatrix(mat).rotationDegrees).toEqual([\n      0,\n      -90,\n      0,\n    ]);\n\n    mat = MatrixMath.createIdentityMatrix();\n    MatrixMath.reuseRotateYCommand(mat, degreesToRadians(360));\n    expect(MatrixMath.decomposeMatrix(mat).rotationDegrees).toEqual([0, 0, 0]);\n  });\n\n  it('decomposes a 4x4 matrix to produce accurate X-axis angles', () => {\n    let mat;\n    [30, 45, 60, 75, 90, 100, 110, 120, 133, 167].forEach(angle => {\n      mat = MatrixMath.createIdentityMatrix();\n      MatrixMath.reuseRotateXCommand(mat, degreesToRadians(angle));\n      expect(\n        convertZeroes(MatrixMath.decomposeMatrix(mat).rotationDegrees),\n      ).toEqual([angle, 0, 0]);\n    });\n\n    // all values are between 0 and 180;\n    // change of sign and direction in the third and fourth quadrant\n    mat = MatrixMath.createIdentityMatrix();\n    MatrixMath.reuseRotateXCommand(mat, degreesToRadians(222));\n    expect(MatrixMath.decomposeMatrix(mat).rotationDegrees).toEqual([\n      -138,\n      0,\n      0,\n    ]);\n\n    mat = MatrixMath.createIdentityMatrix();\n    MatrixMath.reuseRotateXCommand(mat, degreesToRadians(270));\n    expect(MatrixMath.decomposeMatrix(mat).rotationDegrees).toEqual([\n      -90,\n      0,\n      0,\n    ]);\n\n    mat = MatrixMath.createIdentityMatrix();\n    MatrixMath.reuseRotateXCommand(mat, degreesToRadians(360));\n    expect(MatrixMath.decomposeMatrix(mat).rotationDegrees).toEqual([0, 0, 0]);\n  });\n});\n"]},"metadata":{},"sourceType":"script"}