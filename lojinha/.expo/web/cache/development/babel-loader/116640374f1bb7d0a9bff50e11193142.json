{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar path_1 = __importDefault(require(\"path\"));\n\nvar xml_manipulation_1 = require(\"../xml-manipulation\");\n\nvar ANDROID_MANIFEST_XML_FILE_PATH = './AndroidManifest.xml';\n\nfunction configureAndroidManifest(xml) {\n  var result = xml_manipulation_1.mergeXmlElements(xml, {\n    elements: [{\n      name: 'manifest',\n      elements: [{\n        name: 'application',\n        attributes: {\n          'android:name': '.MainApplication'\n        },\n        elements: [{\n          name: 'activity',\n          attributes: {\n            'android:name': '.MainActivity',\n            'android:theme': {\n              newValue: '@style/Theme.App.SplashScreen'\n            }\n          }\n        }]\n      }]\n    }]\n  });\n  return result;\n}\n\nfunction configureAndroidManifestXml(androidMainPath) {\n  var filePath, xmlContent, configuredXmlContent;\n  return _regeneratorRuntime.async(function configureAndroidManifestXml$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          filePath = path_1.default.resolve(androidMainPath, ANDROID_MANIFEST_XML_FILE_PATH);\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(xml_manipulation_1.readXmlFile(filePath));\n\n        case 3:\n          xmlContent = _context.sent;\n          configuredXmlContent = configureAndroidManifest(xmlContent);\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(xml_manipulation_1.writeXmlFile(filePath, configuredXmlContent));\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.default = configureAndroidManifestXml;","map":{"version":3,"sources":["../../src/android/AndroidManifest.xml.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,eAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;AAGA,IAAA,kBAAA,GAAA,OAAA,uBAAA;;AAEA,IAAM,8BAA8B,GAAG,uBAAvC;;AAEA,SAAS,wBAAT,CAAkC,GAAlC,EAA8C;AAC5C,MAAM,MAAM,GAAG,kBAAA,CAAA,gBAAA,CAAiB,GAAjB,EAAsB;AACnC,IAAA,QAAQ,EAAE,CACR;AACE,MAAA,IAAI,EAAE,UADR;AAEE,MAAA,QAAQ,EAAE,CACR;AACE,QAAA,IAAI,EAAE,aADR;AAEE,QAAA,UAAU,EAAE;AACV,0BAAgB;AADN,SAFd;AAKE,QAAA,QAAQ,EAAE,CACR;AACE,UAAA,IAAI,EAAE,UADR;AAEE,UAAA,UAAU,EAAE;AACV,4BAAgB,eADN;AAEV,6BAAiB;AACf,cAAA,QAAQ,EAAE;AADK;AAFP;AAFd,SADQ;AALZ,OADQ;AAFZ,KADQ;AADyB,GAAtB,CAAf;AA0BA,SAAO,MAAP;AACD;;AAKc,SAAe,2BAAf,CAA2C,eAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AACP,UAAA,QADO,GACI,MAAA,CAAA,OAAA,CAAK,OAAL,CAAa,eAAb,EAA8B,8BAA9B,CADJ;AAAA;AAAA,2CAEY,kBAAA,CAAA,WAAA,CAAY,QAAZ,CAFZ;;AAAA;AAEP,UAAA,UAFO;AAGP,UAAA,oBAHO,GAGgB,wBAAwB,CAAC,UAAD,CAHxC;AAAA;AAAA,2CAIP,kBAAA,CAAA,YAAA,CAAa,QAAb,EAAuB,oBAAvB,CAJO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAf,OAAA,CAAA,OAAA,GAAA,2BAAA","sourcesContent":["import path from 'path';\nimport { Element } from 'xml-js';\n\nimport { readXmlFile, writeXmlFile, mergeXmlElements } from '../xml-manipulation';\n\nconst ANDROID_MANIFEST_XML_FILE_PATH = './AndroidManifest.xml';\n\nfunction configureAndroidManifest(xml: Element): Element {\n  const result = mergeXmlElements(xml, {\n    elements: [\n      {\n        name: 'manifest',\n        elements: [\n          {\n            name: 'application',\n            attributes: {\n              'android:name': '.MainApplication',\n            },\n            elements: [\n              {\n                name: 'activity',\n                attributes: {\n                  'android:name': '.MainActivity',\n                  'android:theme': {\n                    newValue: '@style/Theme.App.SplashScreen',\n                  },\n                },\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  });\n  return result;\n}\n\n/**\n * @param androidMainPath Path to the main directory containing code and resources in Android project. In general that would be `android/app/src/main`.\n */\nexport default async function configureAndroidManifestXml(androidMainPath: string) {\n  const filePath = path.resolve(androidMainPath, ANDROID_MANIFEST_XML_FILE_PATH);\n  const xmlContent = await readXmlFile(filePath);\n  const configuredXmlContent = configureAndroidManifest(xmlContent);\n  await writeXmlFile(filePath, configuredXmlContent);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}