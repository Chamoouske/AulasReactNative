{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction findMatchingSimulator(simulators, findOptions) {\n  if (!simulators.devices) {\n    return null;\n  }\n\n  var devices = simulators.devices;\n  var simulatorVersion;\n  var simulatorName = null;\n\n  if (findOptions && findOptions.simulator) {\n    var parsedSimulatorName = findOptions.simulator.match(/(.*)? (?:\\((\\d+\\.\\d+)?\\))$/);\n\n    if (parsedSimulatorName && parsedSimulatorName[2] !== undefined) {\n      simulatorVersion = parsedSimulatorName[2];\n      simulatorName = parsedSimulatorName[1];\n    } else {\n      simulatorName = findOptions.simulator;\n    }\n  }\n\n  var match;\n\n  for (var versionDescriptor in devices) {\n    var device = devices[versionDescriptor];\n    var version = versionDescriptor;\n\n    if (/^com\\.apple\\.CoreSimulator\\.SimRuntime\\./g.test(version)) {\n      version = version.replace(/^com\\.apple\\.CoreSimulator\\.SimRuntime\\.([^-]+)-([^-]+)-([^-]+)$/g, '$1 $2.$3');\n    }\n\n    if (!version.includes('iOS') && !version.includes('tvOS')) {\n      continue;\n    }\n\n    if (simulatorVersion && !version.endsWith(simulatorVersion)) {\n      continue;\n    }\n\n    for (var i in device) {\n      var simulator = device[i];\n\n      if (simulator.availability !== '(available)' && simulator.isAvailable !== 'YES' && simulator.isAvailable !== true) {\n        continue;\n      }\n\n      var booted = simulator.state === 'Booted';\n      var simulatorDescriptor = {\n        udid: simulator.udid,\n        name: simulator.name,\n        booted: booted,\n        version: version\n      };\n\n      if (findOptions && findOptions.udid) {\n        if (simulator.udid === findOptions.udid) {\n          return simulatorDescriptor;\n        }\n      } else {\n        if (booted && simulatorName === null) {\n          return simulatorDescriptor;\n        }\n\n        if (simulator.name === simulatorName && !match) {\n          match = simulatorDescriptor;\n        }\n\n        if (simulatorName === null && !match) {\n          match = simulatorDescriptor;\n        }\n      }\n    }\n  }\n\n  if (match) {\n    return match;\n  }\n\n  return null;\n}\n\nvar _default = findMatchingSimulator;\nexports.default = _default;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli-platform-ios/build/commands/runIOS/findMatchingSimulator.js"],"names":["Object","defineProperty","exports","value","default","findMatchingSimulator","simulators","findOptions","devices","simulatorVersion","simulatorName","simulator","parsedSimulatorName","match","undefined","versionDescriptor","device","version","test","replace","includes","endsWith","i","availability","isAvailable","booted","state","simulatorDescriptor","udid","name","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * Takes in a parsed simulator list and a desired name, and returns an object with the matching simulator. The desired\n * name can optionally include the iOS version in between parenthesis after the device name. Ex: \"iPhone 6 (9.2)\" in\n * which case it'll attempt to find a simulator with the exact version specified.\n *\n * If the simulatorString argument is null, we'll go into default mode and return the currently booted simulator, or if\n * none is booted, it will be the first in the list.\n *\n * @param simulators a parsed list from `xcrun simctl list --json devices` command\n * @param simulatorString the string with the name of desired simulator. If null, it will use the currently\n *        booted simulator, or if none are booted, the first in the list.\n */\nfunction findMatchingSimulator(simulators, findOptions) {\n  if (!simulators.devices) {\n    return null;\n  }\n\n  const devices = simulators.devices;\n  let simulatorVersion;\n  let simulatorName = null;\n\n  if (findOptions && findOptions.simulator) {\n    const parsedSimulatorName = findOptions.simulator.match(/(.*)? (?:\\((\\d+\\.\\d+)?\\))$/);\n\n    if (parsedSimulatorName && parsedSimulatorName[2] !== undefined) {\n      simulatorVersion = parsedSimulatorName[2];\n      simulatorName = parsedSimulatorName[1];\n    } else {\n      simulatorName = findOptions.simulator;\n    }\n  }\n\n  let match;\n\n  for (const versionDescriptor in devices) {\n    const device = devices[versionDescriptor];\n    let version = versionDescriptor;\n\n    if (/^com\\.apple\\.CoreSimulator\\.SimRuntime\\./g.test(version)) {\n      // Transform \"com.apple.CoreSimulator.SimRuntime.iOS-12-2\" into \"iOS 12.2\"\n      version = version.replace(/^com\\.apple\\.CoreSimulator\\.SimRuntime\\.([^-]+)-([^-]+)-([^-]+)$/g, '$1 $2.$3');\n    } // Making sure the version of the simulator is an iOS or tvOS (Removes Apple Watch, etc)\n\n\n    if (!version.includes('iOS') && !version.includes('tvOS')) {\n      continue;\n    }\n\n    if (simulatorVersion && !version.endsWith(simulatorVersion)) {\n      continue;\n    }\n\n    for (const i in device) {\n      const simulator = device[i]; // Skipping non-available simulator\n\n      if (simulator.availability !== '(available)' && // @ts-ignore verify isAvailable parameter\n      simulator.isAvailable !== 'YES' && simulator.isAvailable !== true) {\n        continue;\n      }\n\n      const booted = simulator.state === 'Booted';\n      const simulatorDescriptor = {\n        udid: simulator.udid,\n        name: simulator.name,\n        booted,\n        version\n      };\n\n      if (findOptions && findOptions.udid) {\n        if (simulator.udid === findOptions.udid) {\n          return simulatorDescriptor;\n        }\n      } else {\n        if (booted && simulatorName === null) {\n          return simulatorDescriptor;\n        }\n\n        if (simulator.name === simulatorName && !match) {\n          match = simulatorDescriptor;\n        } // Keeps track of the first available simulator for use if we can't find one above.\n\n\n        if (simulatorName === null && !match) {\n          match = simulatorDescriptor;\n        }\n      }\n    }\n  }\n\n  if (match) {\n    return match;\n  }\n\n  return null;\n}\n\nvar _default = findMatchingSimulator;\nexports.default = _default;\n\n//# sourceMappingURL=findMatchingSimulator.js.map"]},"metadata":{},"sourceType":"script"}