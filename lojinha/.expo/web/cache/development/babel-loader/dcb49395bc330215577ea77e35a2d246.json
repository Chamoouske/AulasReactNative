{"ast":null,"code":"import Constants from 'expo-constants';\nimport * as FileSystem from 'expo-file-system';\nimport { getLocalAssets } from \"./PlatformUtils\";\nvar bundledAssets = new Set(FileSystem.bundledAssets || []);\nvar localAssets = getLocalAssets();\nexport function getEmbeddedAssetUri(hash, type) {\n  var _localAssets$localAss;\n\n  var localAssetsKey = hash + \".\" + (type != null ? type : '');\n\n  if (!localAssets.hasOwnProperty(localAssetsKey) && !__DEV__) {\n    var assetName = \"asset_\" + hash + (type ? \".\" + type : '');\n\n    if (Constants.appOwnership !== 'standalone' || !bundledAssets.has(assetName)) {\n      return null;\n    }\n\n    return \"\" + FileSystem.bundleDirectory + assetName;\n  }\n\n  return (_localAssets$localAss = localAssets[localAssetsKey]) != null ? _localAssets$localAss : null;\n}","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/expo-asset/src/EmbeddedAssets.ts"],"names":["Constants","FileSystem","getLocalAssets","bundledAssets","Set","localAssets","getEmbeddedAssetUri","hash","type","localAssetsKey","hasOwnProperty","__DEV__","assetName","appOwnership","has","bundleDirectory"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,gBAAtB;AACA,OAAO,KAAKC,UAAZ,MAA4B,kBAA5B;AAEA,SAASC,cAAT;AAGA,IAAMC,aAAa,GAAG,IAAIC,GAAJ,CAAQH,UAAU,CAACE,aAAX,IAA4B,EAApC,CAAtB;AAGA,IAAME,WAAW,GAAGH,cAAc,EAAlC;AAMA,OAAO,SAASI,mBAAT,CAA6BC,IAA7B,EAA2CC,IAA3C,EAA+E;AAAA;;AACpF,MAAMC,cAAc,GAAMF,IAAN,UAAcC,IAAd,WAAcA,IAAd,GAAsB,EAAtB,CAApB;;AACA,MAAI,CAACH,WAAW,CAACK,cAAZ,CAA2BD,cAA3B,CAAD,IAA+C,CAACE,OAApD,EAA6D;AAG3D,QAAMC,SAAS,cAAYL,IAAZ,IAAmBC,IAAI,SAAOA,IAAP,GAAgB,EAAvC,CAAf;;AACA,QAAIR,SAAS,CAACa,YAAV,KAA2B,YAA3B,IAA2C,CAACV,aAAa,CAACW,GAAd,CAAkBF,SAAlB,CAAhD,EAA8E;AAC5E,aAAO,IAAP;AACD;;AACD,gBAAUX,UAAU,CAACc,eAArB,GAAuCH,SAAvC;AACD;;AACD,kCAAOP,WAAW,CAACI,cAAD,CAAlB,oCAAsC,IAAtC;AACD","sourcesContent":["import Constants from 'expo-constants';\nimport * as FileSystem from 'expo-file-system';\n\nimport { getLocalAssets } from './PlatformUtils';\n\n// Fast lookup check if assets are available in the local bundle in managed apps\nconst bundledAssets = new Set(FileSystem.bundledAssets || []);\n\n// localAssets are provided by the expo-updates module\nconst localAssets = getLocalAssets();\n\n/**\n * Returns the local URI of an embedded asset from its hash and type, or null if the asset is not\n * included in the app bundle.\n */\nexport function getEmbeddedAssetUri(hash: string, type: string | null): string | null {\n  const localAssetsKey = `${hash}.${type ?? ''}`;\n  if (!localAssets.hasOwnProperty(localAssetsKey) && !__DEV__) {\n    // check legacy location in case we're in Expo client/managed workflow\n    // TODO(eric): remove this once bundledAssets is no longer exported from FileSystem\n    const assetName = `asset_${hash}${type ? `.${type}` : ''}`;\n    if (Constants.appOwnership !== 'standalone' || !bundledAssets.has(assetName)) {\n      return null;\n    }\n    return `${FileSystem.bundleDirectory}${assetName}`;\n  }\n  return localAssets[localAssetsKey] ?? null;\n}\n"]},"metadata":{},"sourceType":"module"}