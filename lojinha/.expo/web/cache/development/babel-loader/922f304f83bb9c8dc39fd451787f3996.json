{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar core_plugins_1 = require(\"../plugins/core-plugins\");\n\nvar XML_1 = require(\"../utils/XML\");\n\nvar WarningAggregator = __importStar(require(\"../utils/warnings\"));\n\nvar Colors_1 = require(\"./Colors\");\n\nvar Resources_1 = require(\"./Resources\");\n\nvar Styles_1 = require(\"./Styles\");\n\nvar COLOR_PRIMARY_DARK_KEY = 'colorPrimaryDark';\nvar WINDOW_TRANSLUCENT_STATUS = 'android:windowTranslucentStatus';\nvar WINDOW_LIGHT_STATUS_BAR = 'android:windowLightStatusBar';\n\nexports.withStatusBar = function (config) {\n  return core_plugins_1.withDangerousMod(config, ['android', function _callee(config) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(setStatusBarConfig(config, config.modRequest.projectRoot));\n\n          case 2:\n            return _context.abrupt(\"return\", config);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }]);\n};\n\nfunction getStatusBarColor(config) {\n  var _a;\n\n  if (config.androidStatusBarColor != null) {\n    WarningAggregator.addWarningAndroid('status-bar', '`androidStatusBarColor` is deprecated, use `androidStatusBar.backgroundColor` instead.');\n  }\n\n  return ((_a = config.androidStatusBar) === null || _a === void 0 ? void 0 : _a.backgroundColor) || 'translucent';\n}\n\nexports.getStatusBarColor = getStatusBarColor;\n\nfunction getStatusBarStyle(config) {\n  var _a;\n\n  return ((_a = config.androidStatusBar) === null || _a === void 0 ? void 0 : _a.barStyle) || 'light-content';\n}\n\nexports.getStatusBarStyle = getStatusBarStyle;\n\nfunction setStatusBarConfig(config, projectRoot) {\n  var hexString, statusBarStyle, stylesPath, colorsPath, stylesJSON, colorsJSON, styleItemToAdd, colorItemToAdd, statusBarStyleItem;\n  return _regeneratorRuntime.async(function setStatusBarConfig$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          hexString = getStatusBarColor(config);\n          statusBarStyle = getStatusBarStyle(config);\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(Styles_1.getProjectStylesXMLPathAsync(projectRoot));\n\n        case 4:\n          stylesPath = _context2.sent;\n          _context2.next = 7;\n          return _regeneratorRuntime.awrap(Colors_1.getProjectColorsXMLPathAsync(projectRoot));\n\n        case 7:\n          colorsPath = _context2.sent;\n          _context2.next = 10;\n          return _regeneratorRuntime.awrap(Resources_1.readResourcesXMLAsync({\n            path: stylesPath\n          }));\n\n        case 10:\n          stylesJSON = _context2.sent;\n          _context2.next = 13;\n          return _regeneratorRuntime.awrap(Resources_1.readResourcesXMLAsync({\n            path: colorsPath\n          }));\n\n        case 13:\n          colorsJSON = _context2.sent;\n\n          if (hexString === 'translucent') {\n            styleItemToAdd = Resources_1.buildResourceItem({\n              name: WINDOW_TRANSLUCENT_STATUS,\n              value: 'true'\n            });\n          } else {\n            colorItemToAdd = Resources_1.buildResourceItem({\n              name: COLOR_PRIMARY_DARK_KEY,\n              value: hexString\n            });\n            colorsJSON = Colors_1.setColorItem(colorItemToAdd, colorsJSON);\n            styleItemToAdd = Resources_1.buildResourceItem({\n              name: COLOR_PRIMARY_DARK_KEY,\n              value: \"@color/\" + COLOR_PRIMARY_DARK_KEY\n            });\n          }\n\n          if (statusBarStyle === 'dark-content') {\n            statusBarStyleItem = Resources_1.buildResourceItem({\n              name: WINDOW_LIGHT_STATUS_BAR,\n              value: \"true\"\n            });\n            stylesJSON = Styles_1.setStylesItem({\n              item: statusBarStyleItem,\n              xml: stylesJSON,\n              parent: {\n                name: 'AppTheme',\n                parent: 'Theme.AppCompat.Light.NoActionBar'\n              }\n            });\n          }\n\n          stylesJSON = Styles_1.setStylesItem({\n            item: styleItemToAdd,\n            xml: stylesJSON,\n            parent: {\n              name: 'AppTheme',\n              parent: 'Theme.AppCompat.Light.NoActionBar'\n            }\n          });\n          _context2.prev = 17;\n          _context2.next = 20;\n          return _regeneratorRuntime.awrap(Promise.all([XML_1.writeXMLAsync({\n            path: colorsPath,\n            xml: colorsJSON\n          }), XML_1.writeXMLAsync({\n            path: stylesPath,\n            xml: stylesJSON\n          })]));\n\n        case 20:\n          _context2.next = 25;\n          break;\n\n        case 22:\n          _context2.prev = 22;\n          _context2.t0 = _context2[\"catch\"](17);\n          throw new Error(\"Error setting Android status bar config. Cannot write colors.xml to \" + colorsPath + \", or styles.xml to \" + stylesPath + \".\");\n\n        case 25:\n          return _context2.abrupt(\"return\", true);\n\n        case 26:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[17, 22]], Promise);\n}\n\nexports.setStatusBarConfig = setStatusBarConfig;","map":{"version":3,"sources":["../../src/android/StatusBar.ts"],"names":[],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withDangerousMod } from '../plugins/core-plugins';\nimport { writeXMLAsync } from '../utils/XML';\nimport * as WarningAggregator from '../utils/warnings';\nimport { getProjectColorsXMLPathAsync, setColorItem } from './Colors';\nimport { buildResourceItem, readResourcesXMLAsync, ResourceItemXML } from './Resources';\nimport { getProjectStylesXMLPathAsync, setStylesItem } from './Styles';\n\nconst COLOR_PRIMARY_DARK_KEY = 'colorPrimaryDark';\nconst WINDOW_TRANSLUCENT_STATUS = 'android:windowTranslucentStatus';\nconst WINDOW_LIGHT_STATUS_BAR = 'android:windowLightStatusBar';\n\nexport const withStatusBar: ConfigPlugin = config => {\n  return withDangerousMod(config, [\n    'android',\n    async config => {\n      await setStatusBarConfig(config, config.modRequest.projectRoot);\n      return config;\n    },\n  ]);\n};\n\nexport function getStatusBarColor(\n  config: Pick<ExpoConfig, 'androidStatusBarColor' | 'androidStatusBar'>\n) {\n  if (config.androidStatusBarColor != null) {\n    WarningAggregator.addWarningAndroid(\n      'status-bar',\n      '`androidStatusBarColor` is deprecated, use `androidStatusBar.backgroundColor` instead.'\n    );\n  }\n  return config.androidStatusBar?.backgroundColor || 'translucent';\n}\n\nexport function getStatusBarStyle(config: Pick<ExpoConfig, 'androidStatusBar'>) {\n  return config.androidStatusBar?.barStyle || 'light-content';\n}\n\nexport async function setStatusBarConfig(\n  config: Pick<ExpoConfig, 'androidStatusBarColor' | 'androidStatusBar'>,\n  projectRoot: string\n) {\n  const hexString = getStatusBarColor(config);\n  const statusBarStyle = getStatusBarStyle(config);\n\n  const stylesPath = await getProjectStylesXMLPathAsync(projectRoot);\n  const colorsPath = await getProjectColorsXMLPathAsync(projectRoot);\n\n  let stylesJSON = await readResourcesXMLAsync({ path: stylesPath });\n  let colorsJSON = await readResourcesXMLAsync({ path: colorsPath });\n\n  let styleItemToAdd: ResourceItemXML;\n  if (hexString === 'translucent') {\n    // translucent status bar set in theme\n    styleItemToAdd = buildResourceItem({ name: WINDOW_TRANSLUCENT_STATUS, value: 'true' });\n  } else {\n    // Need to add a color key to colors.xml to use in styles.xml\n    const colorItemToAdd = buildResourceItem({ name: COLOR_PRIMARY_DARK_KEY, value: hexString });\n    colorsJSON = setColorItem(colorItemToAdd, colorsJSON);\n\n    styleItemToAdd = buildResourceItem({\n      name: COLOR_PRIMARY_DARK_KEY,\n      value: `@color/${COLOR_PRIMARY_DARK_KEY}`,\n    });\n  }\n\n  // Default is light-content, don't need to do anything to set it\n  if (statusBarStyle === 'dark-content') {\n    const statusBarStyleItem: ResourceItemXML = buildResourceItem({\n      name: WINDOW_LIGHT_STATUS_BAR,\n      value: `true`,\n    });\n    stylesJSON = setStylesItem({\n      item: statusBarStyleItem,\n      xml: stylesJSON,\n      parent: { name: 'AppTheme', parent: 'Theme.AppCompat.Light.NoActionBar' },\n    });\n  }\n\n  stylesJSON = setStylesItem({\n    item: styleItemToAdd,\n    xml: stylesJSON,\n    parent: { name: 'AppTheme', parent: 'Theme.AppCompat.Light.NoActionBar' },\n  });\n\n  try {\n    await Promise.all([\n      writeXMLAsync({ path: colorsPath, xml: colorsJSON }),\n      writeXMLAsync({ path: stylesPath, xml: stylesJSON }),\n    ]);\n  } catch (e) {\n    throw new Error(\n      `Error setting Android status bar config. Cannot write colors.xml to ${colorsPath}, or styles.xml to ${stylesPath}.`\n    );\n  }\n  return true;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}