{"ast":null,"code":"'use strict';\n\nfunction upperCaseFirst(inString) {\n  return inString[0].toUpperCase() + inString.slice(1);\n}\n\nfunction getInterfaceJavaClassName(componentName) {\n  return componentName.replace(/^RCT/, '') + \"ManagerInterface\";\n}\n\nfunction getDelegateJavaClassName(componentName) {\n  return componentName.replace(/^RCT/, '') + \"ManagerDelegate\";\n}\n\nfunction toSafeJavaString(input, shouldUpperCaseFirst) {\n  var parts = input.split('-');\n\n  if (shouldUpperCaseFirst === false) {\n    return parts.join('');\n  }\n\n  return parts.map(upperCaseFirst).join('');\n}\n\nfunction getImports(component, type) {\n  var imports = new Set();\n  component.extendsProps.forEach(function (extendProps) {\n    switch (extendProps.type) {\n      case 'ReactNativeBuiltInType':\n        switch (extendProps.knownTypeName) {\n          case 'ReactNativeCoreViewProps':\n            imports.add('import android.view.View;');\n            return;\n\n          default:\n            extendProps.knownTypeName;\n            throw new Error('Invalid knownTypeName');\n        }\n\n      default:\n        extendProps.type;\n        throw new Error('Invalid extended type');\n    }\n  });\n\n  function addImportsForNativeName(name) {\n    switch (name) {\n      case 'ColorPrimitive':\n        if (type === 'delegate') {\n          imports.add('import com.facebook.react.bridge.ColorPropConverter;');\n        }\n\n        return;\n\n      case 'ImageSourcePrimitive':\n        imports.add('import com.facebook.react.bridge.ReadableMap;');\n        return;\n\n      case 'PointPrimitive':\n        imports.add('import com.facebook.react.bridge.ReadableMap;');\n        return;\n\n      case 'EdgeInsetsPrimitive':\n        imports.add('import com.facebook.react.bridge.ReadableMap;');\n        return;\n\n      default:\n        name;\n        throw new Error(\"Invalid NativePrimitiveTypeAnnotation name, got \" + name);\n    }\n  }\n\n  component.props.forEach(function (prop) {\n    var typeAnnotation = prop.typeAnnotation;\n\n    if (typeAnnotation.type === 'NativePrimitiveTypeAnnotation') {\n      addImportsForNativeName(typeAnnotation.name);\n    }\n\n    if (typeAnnotation.type === 'ArrayTypeAnnotation') {\n      imports.add('import com.facebook.react.bridge.ReadableArray;');\n    }\n\n    if (typeAnnotation.type === 'ObjectTypeAnnotation') {\n      imports.add('import com.facebook.react.bridge.ReadableMap;');\n    }\n  });\n  return imports;\n}\n\nmodule.exports = {\n  getInterfaceJavaClassName: getInterfaceJavaClassName,\n  getDelegateJavaClassName: getDelegateJavaClassName,\n  toSafeJavaString: toSafeJavaString,\n  getImports: getImports\n};","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/packages/react-native-codegen/src/generators/components/JavaHelpers.js"],"names":["upperCaseFirst","inString","toUpperCase","slice","getInterfaceJavaClassName","componentName","replace","getDelegateJavaClassName","toSafeJavaString","input","shouldUpperCaseFirst","parts","split","join","map","getImports","component","type","imports","Set","extendsProps","forEach","extendProps","knownTypeName","add","Error","addImportsForNativeName","name","props","prop","typeAnnotation","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\n'use strict';\n\nimport type {ComponentShape} from '../../CodegenSchema';\n\nfunction upperCaseFirst(inString: string): string {\n  return inString[0].toUpperCase() + inString.slice(1);\n}\n\nfunction getInterfaceJavaClassName(componentName: string): string {\n  return `${componentName.replace(/^RCT/, '')}ManagerInterface`;\n}\n\nfunction getDelegateJavaClassName(componentName: string): string {\n  return `${componentName.replace(/^RCT/, '')}ManagerDelegate`;\n}\n\nfunction toSafeJavaString(\n  input: string,\n  shouldUpperCaseFirst?: boolean,\n): string {\n  const parts = input.split('-');\n\n  if (shouldUpperCaseFirst === false) {\n    return parts.join('');\n  }\n\n  return parts.map(upperCaseFirst).join('');\n}\n\nfunction getImports(\n  component: ComponentShape,\n  type: 'interface' | 'delegate',\n): Set<string> {\n  const imports: Set<string> = new Set();\n\n  component.extendsProps.forEach(extendProps => {\n    switch (extendProps.type) {\n      case 'ReactNativeBuiltInType':\n        switch (extendProps.knownTypeName) {\n          case 'ReactNativeCoreViewProps':\n            imports.add('import android.view.View;');\n            return;\n          default:\n            (extendProps.knownTypeName: empty);\n            throw new Error('Invalid knownTypeName');\n        }\n      default:\n        (extendProps.type: empty);\n        throw new Error('Invalid extended type');\n    }\n  });\n\n  function addImportsForNativeName(name) {\n    switch (name) {\n      case 'ColorPrimitive':\n        if (type === 'delegate') {\n          imports.add('import com.facebook.react.bridge.ColorPropConverter;');\n        }\n        return;\n      case 'ImageSourcePrimitive':\n        imports.add('import com.facebook.react.bridge.ReadableMap;');\n        return;\n      case 'PointPrimitive':\n        imports.add('import com.facebook.react.bridge.ReadableMap;');\n        return;\n      case 'EdgeInsetsPrimitive':\n        imports.add('import com.facebook.react.bridge.ReadableMap;');\n        return;\n      default:\n        (name: empty);\n        throw new Error(\n          `Invalid NativePrimitiveTypeAnnotation name, got ${name}`,\n        );\n    }\n  }\n\n  component.props.forEach(prop => {\n    const typeAnnotation = prop.typeAnnotation;\n\n    if (typeAnnotation.type === 'NativePrimitiveTypeAnnotation') {\n      addImportsForNativeName(typeAnnotation.name);\n    }\n\n    if (typeAnnotation.type === 'ArrayTypeAnnotation') {\n      imports.add('import com.facebook.react.bridge.ReadableArray;');\n    }\n\n    if (typeAnnotation.type === 'ObjectTypeAnnotation') {\n      imports.add('import com.facebook.react.bridge.ReadableMap;');\n    }\n  });\n\n  return imports;\n}\n\nmodule.exports = {\n  getInterfaceJavaClassName,\n  getDelegateJavaClassName,\n  toSafeJavaString,\n  getImports,\n};\n"]},"metadata":{},"sourceType":"script"}