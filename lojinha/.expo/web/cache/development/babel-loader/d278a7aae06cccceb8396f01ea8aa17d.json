{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { CodedError } from '@unimodules/core';\nimport { Asset } from 'expo-asset';\nimport Constants from 'expo-constants';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ExpoFontLoader from \"./ExpoFontLoader\";\nvar isInClient = Constants.appOwnership === 'expo';\nvar isInIOSStandalone = Constants.appOwnership === 'standalone' && Platform.OS === 'ios';\nexport function fontFamilyNeedsScoping(name) {\n  return (isInClient || isInIOSStandalone) && !Constants.systemFonts.includes(name) && name !== 'System' && !name.includes(Constants.sessionId);\n}\nexport function getAssetForSource(source) {\n  if (source instanceof Asset) {\n    return source;\n  }\n\n  if (typeof source === 'string') {\n    return Asset.fromURI(source);\n  } else if (typeof source === 'number') {\n    return Asset.fromModule(source);\n  } else if (typeof source === 'object' && typeof source.uri !== 'undefined') {\n    return getAssetForSource(source.uri);\n  }\n\n  return source;\n}\nexport function loadSingleFontAsync(name, input) {\n  var asset;\n  return _regeneratorRuntime.async(function loadSingleFontAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          asset = input;\n\n          if (asset.downloadAsync) {\n            _context.next = 3;\n            break;\n          }\n\n          throw new CodedError(\"ERR_FONT_SOURCE\", '`loadSingleFontAsync` expected resource of type `Asset` from expo-asset on native');\n\n        case 3:\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(asset.downloadAsync());\n\n        case 5:\n          if (asset.downloaded) {\n            _context.next = 7;\n            break;\n          }\n\n          throw new CodedError(\"ERR_DOWNLOAD\", \"Failed to download asset for font \\\"\" + name + \"\\\"\");\n\n        case 7:\n          _context.next = 9;\n          return _regeneratorRuntime.awrap(ExpoFontLoader.loadAsync(getNativeFontName(name), asset.localUri));\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getNativeFontName(name) {\n  if (fontFamilyNeedsScoping(name)) {\n    return Constants.sessionId + \"-\" + name;\n  } else {\n    return name;\n  }\n}","map":{"version":3,"sources":["../src/FontLoader.ts"],"names":[],"mappings":";AAAA,SAAS,UAAT,QAA2B,kBAA3B;AACA,SAAS,KAAT,QAAsB,YAAtB;AACA,OAAO,SAAP,MAAsB,gBAAtB;;AAGA,OAAO,cAAP;AAGA,IAAM,UAAU,GAAG,SAAS,CAAC,YAAV,KAA2B,MAA9C;AACA,IAAM,iBAAiB,GAAG,SAAS,CAAC,YAAV,KAA2B,YAA3B,IAA2C,QAAQ,CAAC,EAAT,KAAgB,KAArF;AAEA,OAAM,SAAU,sBAAV,CAAiC,IAAjC,EAA6C;AACjD,SACE,CAAC,UAAU,IAAI,iBAAf,KACA,CAAC,SAAS,CAAC,WAAV,CAAsB,QAAtB,CAA+B,IAA/B,CADD,IAEA,IAAI,KAAK,QAFT,IAGA,CAAC,IAAI,CAAC,QAAL,CAAc,SAAS,CAAC,SAAxB,CAJH;AAMD;AAED,OAAM,SAAU,iBAAV,CAA4B,MAA5B,EAA8C;AAClD,MAAI,MAAM,YAAY,KAAtB,EAA6B;AAC3B,WAAO,MAAP;AACD;;AAED,MAAI,OAAO,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,WAAO,KAAK,CAAC,OAAN,CAAc,MAAd,CAAP;AACD,GAFD,MAEO,IAAI,OAAO,MAAP,KAAkB,QAAtB,EAAgC;AACrC,WAAO,KAAK,CAAC,UAAN,CAAiB,MAAjB,CAAP;AACD,GAFM,MAEA,IAAI,OAAO,MAAP,KAAkB,QAAlB,IAA8B,OAAO,MAAM,CAAC,GAAd,KAAsB,WAAxD,EAAqE;AAC1E,WAAO,iBAAiB,CAAC,MAAM,CAAC,GAAR,CAAxB;AACD;;AAKD,SAAO,MAAP;AACD;AAED,OAAO,SAAe,mBAAf,CACL,IADK,EAEL,KAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAIC,UAAA,KAJD,GAIS,KAJT;;AAAA,cAKA,KAAK,CAAC,aALN;AAAA;AAAA;AAAA;;AAAA,gBAMG,IAAI,UAAJ,oBAEJ,mFAFI,CANH;;AAAA;AAAA;AAAA,2CAYC,KAAK,CAAC,aAAN,EAZD;;AAAA;AAAA,cAaA,KAAK,CAAC,UAbN;AAAA;AAAA;AAAA;;AAAA,gBAcG,IAAI,UAAJ,0DAAqE,IAArE,QAdH;;AAAA;AAAA;AAAA,2CAgBC,cAAc,CAAC,SAAf,CAAyB,iBAAiB,CAAC,IAAD,CAA1C,EAAkD,KAAK,CAAC,QAAxD,CAhBD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBP,OAAM,SAAU,iBAAV,CAA4B,IAA5B,EAAwC;AAC5C,MAAI,sBAAsB,CAAC,IAAD,CAA1B,EAAkC;AAChC,WAAU,SAAS,CAAC,SAApB,SAAiC,IAAjC;AACD,GAFD,MAEO;AACL,WAAO,IAAP;AACD;AACF","sourcesContent":["import { CodedError } from '@unimodules/core';\nimport { Asset } from 'expo-asset';\nimport Constants from 'expo-constants';\nimport { Platform } from 'react-native';\n\nimport ExpoFontLoader from './ExpoFontLoader';\nimport { FontResource, FontSource } from './Font.types';\n\nconst isInClient = Constants.appOwnership === 'expo';\nconst isInIOSStandalone = Constants.appOwnership === 'standalone' && Platform.OS === 'ios';\n\nexport function fontFamilyNeedsScoping(name: string): boolean {\n  return (\n    (isInClient || isInIOSStandalone) &&\n    !Constants.systemFonts.includes(name) &&\n    name !== 'System' &&\n    !name.includes(Constants.sessionId)\n  );\n}\n\nexport function getAssetForSource(source: FontSource): Asset | FontResource {\n  if (source instanceof Asset) {\n    return source;\n  }\n\n  if (typeof source === 'string') {\n    return Asset.fromURI(source);\n  } else if (typeof source === 'number') {\n    return Asset.fromModule(source);\n  } else if (typeof source === 'object' && typeof source.uri !== 'undefined') {\n    return getAssetForSource(source.uri);\n  }\n\n  // @ts-ignore Error: Type 'string' is not assignable to type 'Asset'\n  // We can't have a string here, we would have thrown an error if !isWeb\n  // or returned Asset.fromModule if isWeb.\n  return source;\n}\n\nexport async function loadSingleFontAsync(\n  name: string,\n  input: Asset | FontResource\n): Promise<void> {\n  const asset = input as Asset;\n  if (!asset.downloadAsync) {\n    throw new CodedError(\n      `ERR_FONT_SOURCE`,\n      '`loadSingleFontAsync` expected resource of type `Asset` from expo-asset on native'\n    );\n  }\n\n  await asset.downloadAsync();\n  if (!asset.downloaded) {\n    throw new CodedError(`ERR_DOWNLOAD`, `Failed to download asset for font \"${name}\"`);\n  }\n  await ExpoFontLoader.loadAsync(getNativeFontName(name), asset.localUri);\n}\n\nexport function getNativeFontName(name: string): string {\n  if (fontFamilyNeedsScoping(name)) {\n    return `${Constants.sessionId}-${name}`;\n  } else {\n    return name;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}