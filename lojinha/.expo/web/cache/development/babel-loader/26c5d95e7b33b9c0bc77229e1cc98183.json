{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nvar _jsxFileName = \"/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/RNTester/js/examples/Linking/LinkingExample.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar React = require('react');\n\nvar Linking = require(\"react-native-web/dist/exports/Linking\").default;\n\nvar Platform = require(\"react-native-web/dist/exports/Platform\").default;\n\nvar StyleSheet = require(\"react-native-web/dist/exports/StyleSheet\").default;\n\nvar Text = require(\"react-native-web/dist/exports/Text\").default;\n\nvar TouchableOpacity = require(\"react-native-web/dist/exports/TouchableOpacity\").default;\n\nvar ToastAndroid = require(\"react-native-web/dist/exports/ToastAndroid\").default;\n\nvar View = require(\"react-native-web/dist/exports/View\").default;\n\nvar RNTesterBlock = require(\"../../components/RNTesterBlock\");\n\nvar OpenURLButton = function (_React$Component) {\n  _inherits(OpenURLButton, _React$Component);\n\n  var _super = _createSuper(OpenURLButton);\n\n  function OpenURLButton() {\n    var _this;\n\n    _classCallCheck(this, OpenURLButton);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.handleClick = function () {\n      Linking.canOpenURL(_this.props.url).then(function (supported) {\n        if (supported) {\n          Linking.openURL(_this.props.url);\n        } else {\n          console.log(\"Don't know how to open URI: \" + _this.props.url);\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(OpenURLButton, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(TouchableOpacity, {\n        onPress: this.handleClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 7\n        }\n      }, React.createElement(View, {\n        style: styles.button,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 9\n        }\n      }, React.createElement(Text, {\n        style: styles.text,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }\n      }, \"Open \", this.props.url)));\n    }\n  }]);\n\n  return OpenURLButton;\n}(React.Component);\n\nvar SendIntentButton = function (_React$Component2) {\n  _inherits(SendIntentButton, _React$Component2);\n\n  var _super2 = _createSuper(SendIntentButton);\n\n  function SendIntentButton() {\n    var _this2;\n\n    _classCallCheck(this, SendIntentButton);\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    _this2 = _super2.call.apply(_super2, [this].concat(args));\n\n    _this2.handleIntent = function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(Linking.sendIntent(_this2.props.action, _this2.props.extras));\n\n            case 3:\n              _context.next = 8;\n              break;\n\n            case 5:\n              _context.prev = 5;\n              _context.t0 = _context[\"catch\"](0);\n              ToastAndroid.show(_context.t0.message, ToastAndroid.LONG);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 5]], Promise);\n    };\n\n    return _this2;\n  }\n\n  _createClass(SendIntentButton, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(TouchableOpacity, {\n        onPress: this.handleIntent,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 7\n        }\n      }, React.createElement(View, {\n        style: [styles.button, styles.buttonIntent],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 9\n        }\n      }, React.createElement(Text, {\n        style: styles.text,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }\n      }, this.props.action)));\n    }\n  }]);\n\n  return SendIntentButton;\n}(React.Component);\n\nvar IntentAndroidExample = function (_React$Component3) {\n  _inherits(IntentAndroidExample, _React$Component3);\n\n  var _super3 = _createSuper(IntentAndroidExample);\n\n  function IntentAndroidExample() {\n    _classCallCheck(this, IntentAndroidExample);\n\n    return _super3.apply(this, arguments);\n  }\n\n  _createClass(IntentAndroidExample, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 7\n        }\n      }, React.createElement(RNTesterBlock, {\n        title: \"Open external URLs\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 9\n        }\n      }, React.createElement(OpenURLButton, {\n        url: 'https://www.facebook.com',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }\n      }), React.createElement(OpenURLButton, {\n        url: 'http://www.facebook.com',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }\n      }), React.createElement(OpenURLButton, {\n        url: 'http://facebook.com',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }\n      }), React.createElement(OpenURLButton, {\n        url: 'fb://notifications',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }\n      }), React.createElement(OpenURLButton, {\n        url: 'geo:37.484847,-122.148386',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }\n      }), React.createElement(OpenURLButton, {\n        url: 'tel:9876543210',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }\n      })), Platform.OS === 'android' && React.createElement(RNTesterBlock, {\n        title: \"Send intents\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }\n      }, React.createElement(SendIntentButton, {\n        action: \"android.intent.action.POWER_USAGE_SUMMARY\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }\n      }), React.createElement(Text, {\n        style: styles.textSeparator,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }\n      }, \"Next one will crash if Facebook app is not installed.\"), React.createElement(SendIntentButton, {\n        action: \"android.settings.APP_NOTIFICATION_SETTINGS\",\n        extras: [{\n          'android.provider.extra.APP_PACKAGE': 'com.facebook.katana'\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }\n      })));\n    }\n  }]);\n\n  return IntentAndroidExample;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  button: {\n    padding: 10,\n    backgroundColor: '#3B5998',\n    marginBottom: 10\n  },\n  buttonIntent: {\n    backgroundColor: '#009688'\n  },\n  text: {\n    color: 'white'\n  },\n  textSeparator: {\n    paddingBottom: 8\n  }\n});\nexports.title = 'Linking';\nexports.description = 'Shows how to use Linking to open URLs.';\nexports.examples = [{\n  title: 'Simple list of items',\n  render: function render() {\n    return React.createElement(IntentAndroidExample, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 14\n      }\n    });\n  }\n}];","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/RNTester/js/examples/Linking/LinkingExample.js"],"names":["React","require","RNTesterBlock","OpenURLButton","handleClick","Linking","canOpenURL","props","url","then","supported","openURL","console","log","styles","button","text","Component","SendIntentButton","handleIntent","sendIntent","action","extras","ToastAndroid","show","message","LONG","buttonIntent","IntentAndroidExample","Platform","OS","textSeparator","StyleSheet","create","padding","backgroundColor","marginBottom","color","paddingBottom","exports","title","description","examples","render"],"mappings":"AASA;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;;;;;;;;;;;;;;;AAWA,IAAMC,aAAa,GAAGD,OAAO,kCAA7B;;IAMME,a;;;;;;;;;;;;;;;;UACJC,W,GAAc,YAAM;AAClBC,MAAAA,OAAO,CAACC,UAAR,CAAmB,MAAKC,KAAL,CAAWC,GAA9B,EAAmCC,IAAnC,CAAwC,UAAAC,SAAS,EAAI;AACnD,YAAIA,SAAJ,EAAe;AACbL,UAAAA,OAAO,CAACM,OAAR,CAAgB,MAAKJ,KAAL,CAAWC,GAA3B;AACD,SAFD,MAEO;AACLI,UAAAA,OAAO,CAACC,GAAR,CAAY,iCAAiC,MAAKN,KAAL,CAAWC,GAAxD;AACD;AACF,OAND;AAOD,K;;;;;;;WAED,kBAAS;AACP,aACE,oBAAC,gBAAD;AAAkB,QAAA,OAAO,EAAE,KAAKJ,WAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEU,MAAM,CAACC,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAED,MAAM,CAACE,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAgC,KAAKT,KAAL,CAAWC,GAA3C,CADF,CADF,CADF;AAOD;;;;EAnByBR,KAAK,CAACiB,S;;IAsB5BC,gB;;;;;;;;;;;;;;;;WACJC,Y,GAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAELd,OAAO,CAACe,UAAR,CAAmB,OAAKb,KAAL,CAAWc,MAA9B,EAAsC,OAAKd,KAAL,CAAWe,MAAjD,CAFK;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAIXC,cAAAA,YAAY,CAACC,IAAb,CAAkB,YAAEC,OAApB,EAA6BF,YAAY,CAACG,IAA1C;;AAJW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;;;;;;WAQf,kBAAS;AACP,aACE,oBAAC,gBAAD;AAAkB,QAAA,OAAO,EAAE,KAAKP,YAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,CAACL,MAAM,CAACC,MAAR,EAAgBD,MAAM,CAACa,YAAvB,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEb,MAAM,CAACE,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA2B,KAAKT,KAAL,CAAWc,MAAtC,CADF,CADF,CADF;AAOD;;;;EAjB4BrB,KAAK,CAACiB,S;;IAoB/BW,oB;;;;;;;;;;;;;WACJ,kBAAS;AACP,aACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,aAAD;AAAe,QAAA,KAAK,EAAC,oBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,aAAD;AAAe,QAAA,GAAG,EAAE,0BAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE,oBAAC,aAAD;AAAe,QAAA,GAAG,EAAE,yBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,EAGE,oBAAC,aAAD;AAAe,QAAA,GAAG,EAAE,qBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHF,EAIE,oBAAC,aAAD;AAAe,QAAA,GAAG,EAAE,oBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJF,EAKE,oBAAC,aAAD;AAAe,QAAA,GAAG,EAAE,2BAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALF,EAME,oBAAC,aAAD;AAAe,QAAA,GAAG,EAAE,gBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANF,CADF,EASGC,QAAQ,CAACC,EAAT,KAAgB,SAAhB,IACC,oBAAC,aAAD;AAAe,QAAA,KAAK,EAAC,cAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,gBAAD;AAAkB,QAAA,MAAM,EAAC,2CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEhB,MAAM,CAACiB,aAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iEAFF,EAKE,oBAAC,gBAAD;AACE,QAAA,MAAM,EAAC,4CADT;AAEE,QAAA,MAAM,EAAE,CACN;AAAC,gDAAsC;AAAvC,SADM,CAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALF,CAVJ,CADF;AA0BD;;;;EA5BgC/B,KAAK,CAACiB,S;;AA+BzC,IAAMH,MAAM,GAAGkB,UAAU,CAACC,MAAX,CAAkB;AAC/BlB,EAAAA,MAAM,EAAE;AACNmB,IAAAA,OAAO,EAAE,EADH;AAENC,IAAAA,eAAe,EAAE,SAFX;AAGNC,IAAAA,YAAY,EAAE;AAHR,GADuB;AAM/BT,EAAAA,YAAY,EAAE;AACZQ,IAAAA,eAAe,EAAE;AADL,GANiB;AAS/BnB,EAAAA,IAAI,EAAE;AACJqB,IAAAA,KAAK,EAAE;AADH,GATyB;AAY/BN,EAAAA,aAAa,EAAE;AACbO,IAAAA,aAAa,EAAE;AADF;AAZgB,CAAlB,CAAf;AAiBAC,OAAO,CAACC,KAAR,GAAgB,SAAhB;AACAD,OAAO,CAACE,WAAR,GAAsB,wCAAtB;AACAF,OAAO,CAACG,QAAR,GAAmB,CACjB;AACEF,EAAAA,KAAK,EAAE,sBADT;AAEEG,EAAAA,MAAM,EAAE,kBAAuD;AAC7D,WAAO,oBAAC,oBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;AAJH,CADiB,CAAnB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\n'use strict';\n\nconst React = require('react');\nconst {\n  Linking,\n  Platform,\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  ToastAndroid,\n  View,\n} = require('react-native');\n\nconst RNTesterBlock = require('../../components/RNTesterBlock');\n\ntype Props = $ReadOnly<{|\n  url?: ?string,\n|}>;\n\nclass OpenURLButton extends React.Component<Props> {\n  handleClick = () => {\n    Linking.canOpenURL(this.props.url).then(supported => {\n      if (supported) {\n        Linking.openURL(this.props.url);\n      } else {\n        console.log(\"Don't know how to open URI: \" + this.props.url);\n      }\n    });\n  };\n\n  render() {\n    return (\n      <TouchableOpacity onPress={this.handleClick}>\n        <View style={styles.button}>\n          <Text style={styles.text}>Open {this.props.url}</Text>\n        </View>\n      </TouchableOpacity>\n    );\n  }\n}\n\nclass SendIntentButton extends React.Component<Props> {\n  handleIntent = async () => {\n    try {\n      await Linking.sendIntent(this.props.action, this.props.extras);\n    } catch (e) {\n      ToastAndroid.show(e.message, ToastAndroid.LONG);\n    }\n  };\n\n  render() {\n    return (\n      <TouchableOpacity onPress={this.handleIntent}>\n        <View style={[styles.button, styles.buttonIntent]}>\n          <Text style={styles.text}>{this.props.action}</Text>\n        </View>\n      </TouchableOpacity>\n    );\n  }\n}\n\nclass IntentAndroidExample extends React.Component {\n  render() {\n    return (\n      <View>\n        <RNTesterBlock title=\"Open external URLs\">\n          <OpenURLButton url={'https://www.facebook.com'} />\n          <OpenURLButton url={'http://www.facebook.com'} />\n          <OpenURLButton url={'http://facebook.com'} />\n          <OpenURLButton url={'fb://notifications'} />\n          <OpenURLButton url={'geo:37.484847,-122.148386'} />\n          <OpenURLButton url={'tel:9876543210'} />\n        </RNTesterBlock>\n        {Platform.OS === 'android' && (\n          <RNTesterBlock title=\"Send intents\">\n            <SendIntentButton action=\"android.intent.action.POWER_USAGE_SUMMARY\" />\n            <Text style={styles.textSeparator}>\n              Next one will crash if Facebook app is not installed.\n            </Text>\n            <SendIntentButton\n              action=\"android.settings.APP_NOTIFICATION_SETTINGS\"\n              extras={[\n                {'android.provider.extra.APP_PACKAGE': 'com.facebook.katana'},\n              ]}\n            />\n          </RNTesterBlock>\n        )}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    padding: 10,\n    backgroundColor: '#3B5998',\n    marginBottom: 10,\n  },\n  buttonIntent: {\n    backgroundColor: '#009688',\n  },\n  text: {\n    color: 'white',\n  },\n  textSeparator: {\n    paddingBottom: 8,\n  },\n});\n\nexports.title = 'Linking';\nexports.description = 'Shows how to use Linking to open URLs.';\nexports.examples = [\n  {\n    title: 'Simple list of items',\n    render: function(): React.Element<typeof IntentAndroidExample> {\n      return <IntentAndroidExample />;\n    },\n  },\n];\n"]},"metadata":{},"sourceType":"script"}