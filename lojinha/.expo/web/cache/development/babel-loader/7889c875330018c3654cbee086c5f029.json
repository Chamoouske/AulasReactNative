{"ast":null,"code":"'use strict';\n\nvar processTransform = require(\"../processTransform\");\n\ndescribe('processTransform', function () {\n  describe('validation', function () {\n    it('should accept an empty array', function () {\n      processTransform([]);\n    });\n    it('should accept a simple valid transform', function () {\n      processTransform([{\n        scale: 0.5\n      }, {\n        translateX: 10\n      }, {\n        translateY: 20\n      }, {\n        rotate: '10deg'\n      }]);\n    });\n    it('should throw on object with multiple properties', function () {\n      expect(function () {\n        return processTransform([{\n          scale: 0.5,\n          translateY: 10\n        }]);\n      }).toThrowErrorMatchingSnapshot();\n    });\n    it('should throw on invalid transform property', function () {\n      expect(function () {\n        return processTransform([{\n          translateW: 10\n        }]);\n      }).toThrowErrorMatchingSnapshot();\n    });\n    it('should throw when not passing an array to an array prop', function () {\n      expect(function () {\n        return processTransform([{\n          matrix: 'not-a-matrix'\n        }]);\n      }).toThrowErrorMatchingSnapshot();\n      expect(function () {\n        return processTransform([{\n          translate: 10\n        }]);\n      }).toThrowErrorMatchingSnapshot();\n    });\n    it('should accept a valid matrix', function () {\n      processTransform([{\n        matrix: [1, 1, 1, 1, 1, 1, 1, 1, 1]\n      }]);\n      processTransform([{\n        matrix: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n      }]);\n    });\n    it('should throw when passing a matrix of the wrong size', function () {\n      expect(function () {\n        return processTransform([{\n          matrix: [1, 1, 1, 1]\n        }]);\n      }).toThrowErrorMatchingSnapshot();\n    });\n    it('should accept a valid translate', function () {\n      processTransform([{\n        translate: [1, 1]\n      }]);\n      processTransform([{\n        translate: [1, 1, 1]\n      }]);\n    });\n    it('should throw when passing a translate of the wrong size', function () {\n      expect(function () {\n        return processTransform([{\n          translate: [1]\n        }]);\n      }).toThrowErrorMatchingSnapshot();\n      expect(function () {\n        return processTransform([{\n          translate: [1, 1, 1, 1]\n        }]);\n      }).toThrowErrorMatchingSnapshot();\n    });\n    it('should throw when passing an invalid value to a number prop', function () {\n      expect(function () {\n        return processTransform([{\n          translateY: '20deg'\n        }]);\n      }).toThrowErrorMatchingSnapshot();\n      expect(function () {\n        return processTransform([{\n          scale: {\n            x: 10,\n            y: 10\n          }\n        }]);\n      }).toThrowErrorMatchingSnapshot();\n      expect(function () {\n        return processTransform([{\n          perspective: []\n        }]);\n      }).toThrowErrorMatchingSnapshot();\n    });\n    it('should throw when passing a perspective of 0', function () {\n      expect(function () {\n        return processTransform([{\n          perspective: 0\n        }]);\n      }).toThrowErrorMatchingSnapshot();\n    });\n    it('should accept an angle in degrees or radians', function () {\n      processTransform([{\n        skewY: '10deg'\n      }]);\n      processTransform([{\n        rotateX: '1.16rad'\n      }]);\n    });\n    it('should throw when passing an invalid angle prop', function () {\n      expect(function () {\n        return processTransform([{\n          rotate: 10\n        }]);\n      }).toThrowErrorMatchingSnapshot();\n      expect(function () {\n        return processTransform([{\n          skewX: '10drg'\n        }]);\n      }).toThrowErrorMatchingSnapshot();\n    });\n    it('should throw when passing an Animated.Value', function () {\n      expect(function () {\n        return processTransform([{\n          rotate: {\n            getValue: function getValue() {}\n          }\n        }]);\n      }).toThrowErrorMatchingSnapshot();\n    });\n  });\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/StyleSheet/__tests__/processTransform-test.js"],"names":["processTransform","require","describe","it","scale","translateX","translateY","rotate","expect","toThrowErrorMatchingSnapshot","translateW","matrix","translate","x","y","perspective","skewY","rotateX","skewX","getValue"],"mappings":"AAUA;;AAEA,IAAMA,gBAAgB,GAAGC,OAAO,uBAAhC;;AAEAC,QAAQ,CAAC,kBAAD,EAAqB,YAAM;AACjCA,EAAAA,QAAQ,CAAC,YAAD,EAAe,YAAM;AAC3BC,IAAAA,EAAE,CAAC,8BAAD,EAAiC,YAAM;AACvCH,MAAAA,gBAAgB,CAAC,EAAD,CAAhB;AACD,KAFC,CAAF;AAIAG,IAAAA,EAAE,CAAC,wCAAD,EAA2C,YAAM;AACjDH,MAAAA,gBAAgB,CAAC,CACf;AAACI,QAAAA,KAAK,EAAE;AAAR,OADe,EAEf;AAACC,QAAAA,UAAU,EAAE;AAAb,OAFe,EAGf;AAACC,QAAAA,UAAU,EAAE;AAAb,OAHe,EAIf;AAACC,QAAAA,MAAM,EAAE;AAAT,OAJe,CAAD,CAAhB;AAMD,KAPC,CAAF;AASAJ,IAAAA,EAAE,CAAC,iDAAD,EAAoD,YAAM;AAC1DK,MAAAA,MAAM,CAAC;AAAA,eACLR,gBAAgB,CAAC,CAAC;AAACI,UAAAA,KAAK,EAAE,GAAR;AAAaE,UAAAA,UAAU,EAAE;AAAzB,SAAD,CAAD,CADX;AAAA,OAAD,CAAN,CAEEG,4BAFF;AAGD,KAJC,CAAF;AAMAN,IAAAA,EAAE,CAAC,4CAAD,EAA+C,YAAM;AACrDK,MAAAA,MAAM,CAAC;AAAA,eACLR,gBAAgB,CAAC,CAAC;AAACU,UAAAA,UAAU,EAAE;AAAb,SAAD,CAAD,CADX;AAAA,OAAD,CAAN,CAEED,4BAFF;AAGD,KAJC,CAAF;AAMAN,IAAAA,EAAE,CAAC,yDAAD,EAA4D,YAAM;AAClEK,MAAAA,MAAM,CAAC;AAAA,eACLR,gBAAgB,CAAC,CAAC;AAACW,UAAAA,MAAM,EAAE;AAAT,SAAD,CAAD,CADX;AAAA,OAAD,CAAN,CAEEF,4BAFF;AAGAD,MAAAA,MAAM,CAAC;AAAA,eACLR,gBAAgB,CAAC,CAAC;AAACY,UAAAA,SAAS,EAAE;AAAZ,SAAD,CAAD,CADX;AAAA,OAAD,CAAN,CAEEH,4BAFF;AAGD,KAPC,CAAF;AASAN,IAAAA,EAAE,CAAC,8BAAD,EAAiC,YAAM;AACvCH,MAAAA,gBAAgB,CAAC,CAAC;AAACW,QAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB;AAAT,OAAD,CAAD,CAAhB;AACAX,MAAAA,gBAAgB,CAAC,CACf;AAACW,QAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqC,CAArC,EAAwC,CAAxC,EAA2C,CAA3C,EAA8C,CAA9C;AAAT,OADe,CAAD,CAAhB;AAGD,KALC,CAAF;AAOAR,IAAAA,EAAE,CAAC,sDAAD,EAAyD,YAAM;AAC/DK,MAAAA,MAAM,CAAC;AAAA,eACLR,gBAAgB,CAAC,CAAC;AAACW,UAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV;AAAT,SAAD,CAAD,CADX;AAAA,OAAD,CAAN,CAEEF,4BAFF;AAGD,KAJC,CAAF;AAMAN,IAAAA,EAAE,CAAC,iCAAD,EAAoC,YAAM;AAC1CH,MAAAA,gBAAgB,CAAC,CAAC;AAACY,QAAAA,SAAS,EAAE,CAAC,CAAD,EAAI,CAAJ;AAAZ,OAAD,CAAD,CAAhB;AACAZ,MAAAA,gBAAgB,CAAC,CAAC;AAACY,QAAAA,SAAS,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;AAAZ,OAAD,CAAD,CAAhB;AACD,KAHC,CAAF;AAKAT,IAAAA,EAAE,CAAC,yDAAD,EAA4D,YAAM;AAClEK,MAAAA,MAAM,CAAC;AAAA,eACLR,gBAAgB,CAAC,CAAC;AAACY,UAAAA,SAAS,EAAE,CAAC,CAAD;AAAZ,SAAD,CAAD,CADX;AAAA,OAAD,CAAN,CAEEH,4BAFF;AAGAD,MAAAA,MAAM,CAAC;AAAA,eACLR,gBAAgB,CAAC,CAAC;AAACY,UAAAA,SAAS,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV;AAAZ,SAAD,CAAD,CADX;AAAA,OAAD,CAAN,CAEEH,4BAFF;AAGD,KAPC,CAAF;AASAN,IAAAA,EAAE,CAAC,6DAAD,EAAgE,YAAM;AACtEK,MAAAA,MAAM,CAAC;AAAA,eACLR,gBAAgB,CAAC,CAAC;AAACM,UAAAA,UAAU,EAAE;AAAb,SAAD,CAAD,CADX;AAAA,OAAD,CAAN,CAEEG,4BAFF;AAGAD,MAAAA,MAAM,CAAC;AAAA,eACLR,gBAAgB,CAAC,CAAC;AAACI,UAAAA,KAAK,EAAE;AAACS,YAAAA,CAAC,EAAE,EAAJ;AAAQC,YAAAA,CAAC,EAAE;AAAX;AAAR,SAAD,CAAD,CADX;AAAA,OAAD,CAAN,CAEEL,4BAFF;AAGAD,MAAAA,MAAM,CAAC;AAAA,eACLR,gBAAgB,CAAC,CAAC;AAACe,UAAAA,WAAW,EAAE;AAAd,SAAD,CAAD,CADX;AAAA,OAAD,CAAN,CAEEN,4BAFF;AAGD,KAVC,CAAF;AAYAN,IAAAA,EAAE,CAAC,8CAAD,EAAiD,YAAM;AACvDK,MAAAA,MAAM,CAAC;AAAA,eACLR,gBAAgB,CAAC,CAAC;AAACe,UAAAA,WAAW,EAAE;AAAd,SAAD,CAAD,CADX;AAAA,OAAD,CAAN,CAEEN,4BAFF;AAGD,KAJC,CAAF;AAMAN,IAAAA,EAAE,CAAC,8CAAD,EAAiD,YAAM;AACvDH,MAAAA,gBAAgB,CAAC,CAAC;AAACgB,QAAAA,KAAK,EAAE;AAAR,OAAD,CAAD,CAAhB;AACAhB,MAAAA,gBAAgB,CAAC,CAAC;AAACiB,QAAAA,OAAO,EAAE;AAAV,OAAD,CAAD,CAAhB;AACD,KAHC,CAAF;AAKAd,IAAAA,EAAE,CAAC,iDAAD,EAAoD,YAAM;AAC1DK,MAAAA,MAAM,CAAC;AAAA,eACLR,gBAAgB,CAAC,CAAC;AAACO,UAAAA,MAAM,EAAE;AAAT,SAAD,CAAD,CADX;AAAA,OAAD,CAAN,CAEEE,4BAFF;AAGAD,MAAAA,MAAM,CAAC;AAAA,eACLR,gBAAgB,CAAC,CAAC;AAACkB,UAAAA,KAAK,EAAE;AAAR,SAAD,CAAD,CADX;AAAA,OAAD,CAAN,CAEET,4BAFF;AAGD,KAPC,CAAF;AASAN,IAAAA,EAAE,CAAC,6CAAD,EAAgD,YAAM;AACtDK,MAAAA,MAAM,CAAC;AAAA,eACLR,gBAAgB,CAAC,CAAC;AAACO,UAAAA,MAAM,EAAE;AAACY,YAAAA,QAAQ,EAAE,oBAAM,CAAE;AAAnB;AAAT,SAAD,CAAD,CADX;AAAA,OAAD,CAAN,CAEEV,4BAFF;AAGD,KAJC,CAAF;AAKD,GAnGO,CAAR;AAoGD,CArGO,CAAR","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @emails oncall+react_native\n */\n\n'use strict';\n\nconst processTransform = require('../processTransform');\n\ndescribe('processTransform', () => {\n  describe('validation', () => {\n    it('should accept an empty array', () => {\n      processTransform([]);\n    });\n\n    it('should accept a simple valid transform', () => {\n      processTransform([\n        {scale: 0.5},\n        {translateX: 10},\n        {translateY: 20},\n        {rotate: '10deg'},\n      ]);\n    });\n\n    it('should throw on object with multiple properties', () => {\n      expect(() =>\n        processTransform([{scale: 0.5, translateY: 10}]),\n      ).toThrowErrorMatchingSnapshot();\n    });\n\n    it('should throw on invalid transform property', () => {\n      expect(() =>\n        processTransform([{translateW: 10}]),\n      ).toThrowErrorMatchingSnapshot();\n    });\n\n    it('should throw when not passing an array to an array prop', () => {\n      expect(() =>\n        processTransform([{matrix: 'not-a-matrix'}]),\n      ).toThrowErrorMatchingSnapshot();\n      expect(() =>\n        processTransform([{translate: 10}]),\n      ).toThrowErrorMatchingSnapshot();\n    });\n\n    it('should accept a valid matrix', () => {\n      processTransform([{matrix: [1, 1, 1, 1, 1, 1, 1, 1, 1]}]);\n      processTransform([\n        {matrix: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]},\n      ]);\n    });\n\n    it('should throw when passing a matrix of the wrong size', () => {\n      expect(() =>\n        processTransform([{matrix: [1, 1, 1, 1]}]),\n      ).toThrowErrorMatchingSnapshot();\n    });\n\n    it('should accept a valid translate', () => {\n      processTransform([{translate: [1, 1]}]);\n      processTransform([{translate: [1, 1, 1]}]);\n    });\n\n    it('should throw when passing a translate of the wrong size', () => {\n      expect(() =>\n        processTransform([{translate: [1]}]),\n      ).toThrowErrorMatchingSnapshot();\n      expect(() =>\n        processTransform([{translate: [1, 1, 1, 1]}]),\n      ).toThrowErrorMatchingSnapshot();\n    });\n\n    it('should throw when passing an invalid value to a number prop', () => {\n      expect(() =>\n        processTransform([{translateY: '20deg'}]),\n      ).toThrowErrorMatchingSnapshot();\n      expect(() =>\n        processTransform([{scale: {x: 10, y: 10}}]),\n      ).toThrowErrorMatchingSnapshot();\n      expect(() =>\n        processTransform([{perspective: []}]),\n      ).toThrowErrorMatchingSnapshot();\n    });\n\n    it('should throw when passing a perspective of 0', () => {\n      expect(() =>\n        processTransform([{perspective: 0}]),\n      ).toThrowErrorMatchingSnapshot();\n    });\n\n    it('should accept an angle in degrees or radians', () => {\n      processTransform([{skewY: '10deg'}]);\n      processTransform([{rotateX: '1.16rad'}]);\n    });\n\n    it('should throw when passing an invalid angle prop', () => {\n      expect(() =>\n        processTransform([{rotate: 10}]),\n      ).toThrowErrorMatchingSnapshot();\n      expect(() =>\n        processTransform([{skewX: '10drg'}]),\n      ).toThrowErrorMatchingSnapshot();\n    });\n\n    it('should throw when passing an Animated.Value', () => {\n      expect(() =>\n        processTransform([{rotate: {getValue: () => {}}}]),\n      ).toThrowErrorMatchingSnapshot();\n    });\n  });\n});\n"]},"metadata":{},"sourceType":"script"}