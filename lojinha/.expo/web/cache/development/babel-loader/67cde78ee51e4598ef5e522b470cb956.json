{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _ws() {\n  var data = _interopRequireDefault(require(\"ws\"));\n\n  _ws = function _ws() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction attachToServer(server, path) {\n  var WebSocketServer = _ws().default.Server;\n\n  var wss = new WebSocketServer({\n    server: server,\n    path: path\n  });\n  var debuggerSocket;\n  var clientSocket;\n\n  function send(dest, message) {\n    if (!dest) {\n      return;\n    }\n\n    try {\n      dest.send(message);\n    } catch (e) {\n      _cliTools().logger.warn(e);\n    }\n  }\n\n  var debuggerSocketCloseHandler = function debuggerSocketCloseHandler() {\n    debuggerSocket = null;\n\n    if (clientSocket) {\n      clientSocket.close(1011, 'Debugger was disconnected');\n    }\n  };\n\n  var clientSocketCloseHandler = function clientSocketCloseHandler() {\n    clientSocket = null;\n    send(debuggerSocket, JSON.stringify({\n      method: '$disconnected'\n    }));\n  };\n\n  wss.on('connection', function (connection) {\n    var url = connection.upgradeReq.url;\n\n    if (url.indexOf('role=debugger') > -1) {\n      if (debuggerSocket) {\n        connection.close(1011, 'Another debugger is already connected');\n        return;\n      }\n\n      debuggerSocket = connection;\n\n      if (debuggerSocket) {\n        debuggerSocket.onerror = debuggerSocketCloseHandler;\n        debuggerSocket.onclose = debuggerSocketCloseHandler;\n\n        debuggerSocket.onmessage = function (_ref) {\n          var data = _ref.data;\n          return send(clientSocket, data);\n        };\n      }\n    } else if (url.indexOf('role=client') > -1) {\n      if (clientSocket) {\n        clientSocket.onerror = null;\n        clientSocket.onclose = null;\n        clientSocket.onmessage = null;\n        clientSocket.close(1011, 'Another client connected');\n      }\n\n      clientSocket = connection;\n      clientSocket.onerror = clientSocketCloseHandler;\n      clientSocket.onclose = clientSocketCloseHandler;\n\n      clientSocket.onmessage = function (_ref2) {\n        var data = _ref2.data;\n        return send(debuggerSocket, data);\n      };\n    } else {\n      connection.close(1011, 'Missing role param');\n    }\n  });\n  return {\n    server: wss,\n    isDebuggerConnected: function isDebuggerConnected() {\n      return !!debuggerSocket;\n    }\n  };\n}\n\nvar _default = {\n  attachToServer: attachToServer\n};\nexports.default = _default;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli-server-api/build/websocket/debuggerProxyServer.js"],"names":["Object","defineProperty","exports","value","default","_ws","data","_interopRequireDefault","require","_cliTools","obj","__esModule","attachToServer","server","path","WebSocketServer","Server","wss","debuggerSocket","clientSocket","send","dest","message","e","logger","warn","debuggerSocketCloseHandler","close","clientSocketCloseHandler","JSON","stringify","method","on","connection","url","upgradeReq","indexOf","onerror","onclose","onmessage","isDebuggerConnected","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,SAASC,GAAT,GAAe;AACb,MAAMC,IAAI,GAAGC,sBAAsB,CAACC,OAAO,CAAC,IAAD,CAAR,CAAnC;;AAEAH,EAAAA,GAAG,GAAG,eAAY;AAChB,WAAOC,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,SAASG,SAAT,GAAqB;AACnB,MAAMH,IAAI,GAAGE,OAAO,CAAC,mCAAD,CAApB;;AAEAC,EAAAA,SAAS,GAAG,qBAAY;AACtB,WAAOH,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,SAASC,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEN,IAAAA,OAAO,EAAEM;AAAX,GAArC;AAAwD;;AAU/F,SAASE,cAAT,CAAwBC,MAAxB,EAAgCC,IAAhC,EAAsC;AACpC,MAAMC,eAAe,GAAGV,GAAG,GAAGD,OAAN,CAAcY,MAAtC;;AAEA,MAAMC,GAAG,GAAG,IAAIF,eAAJ,CAAoB;AAC9BF,IAAAA,MAAM,EAANA,MAD8B;AAE9BC,IAAAA,IAAI,EAAJA;AAF8B,GAApB,CAAZ;AAIA,MAAII,cAAJ;AACA,MAAIC,YAAJ;;AAEA,WAASC,IAAT,CAAcC,IAAd,EAAoBC,OAApB,EAA6B;AAC3B,QAAI,CAACD,IAAL,EAAW;AACT;AACD;;AAED,QAAI;AACFA,MAAAA,IAAI,CAACD,IAAL,CAAUE,OAAV;AACD,KAFD,CAEE,OAAOC,CAAP,EAAU;AACVd,MAAAA,SAAS,GAAGe,MAAZ,CAAmBC,IAAnB,CAAwBF,CAAxB;AAED;AACF;;AAED,MAAMG,0BAA0B,GAAG,SAA7BA,0BAA6B,GAAM;AACvCR,IAAAA,cAAc,GAAG,IAAjB;;AAEA,QAAIC,YAAJ,EAAkB;AAChBA,MAAAA,YAAY,CAACQ,KAAb,CAAmB,IAAnB,EAAyB,2BAAzB;AACD;AACF,GAND;;AAQA,MAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,GAAM;AACrCT,IAAAA,YAAY,GAAG,IAAf;AACAC,IAAAA,IAAI,CAACF,cAAD,EAAiBW,IAAI,CAACC,SAAL,CAAe;AAClCC,MAAAA,MAAM,EAAE;AAD0B,KAAf,CAAjB,CAAJ;AAGD,GALD;;AAOAd,EAAAA,GAAG,CAACe,EAAJ,CAAO,YAAP,EAAqB,UAAAC,UAAU,EAAI;AAAA,QAG/BC,GAH+B,GAI7BD,UAAU,CAACE,UAJkB,CAG/BD,GAH+B;;AAMjC,QAAIA,GAAG,CAACE,OAAJ,CAAY,eAAZ,IAA+B,CAAC,CAApC,EAAuC;AACrC,UAAIlB,cAAJ,EAAoB;AAClBe,QAAAA,UAAU,CAACN,KAAX,CAAiB,IAAjB,EAAuB,uCAAvB;AACA;AACD;;AAEDT,MAAAA,cAAc,GAAGe,UAAjB;;AAEA,UAAIf,cAAJ,EAAoB;AAClBA,QAAAA,cAAc,CAACmB,OAAf,GAAyBX,0BAAzB;AACAR,QAAAA,cAAc,CAACoB,OAAf,GAAyBZ,0BAAzB;;AAEAR,QAAAA,cAAc,CAACqB,SAAf,GAA2B;AAAA,cACzBjC,IADyB,QACzBA,IADyB;AAAA,iBAErBc,IAAI,CAACD,YAAD,EAAeb,IAAf,CAFiB;AAAA,SAA3B;AAGD;AACF,KAhBD,MAgBO,IAAI4B,GAAG,CAACE,OAAJ,CAAY,aAAZ,IAA6B,CAAC,CAAlC,EAAqC;AAC1C,UAAIjB,YAAJ,EAAkB;AAEhBA,QAAAA,YAAY,CAACkB,OAAb,GAAuB,IAAvB;AAEAlB,QAAAA,YAAY,CAACmB,OAAb,GAAuB,IAAvB;AAEAnB,QAAAA,YAAY,CAACoB,SAAb,GAAyB,IAAzB;AACApB,QAAAA,YAAY,CAACQ,KAAb,CAAmB,IAAnB,EAAyB,0BAAzB;AACD;;AAEDR,MAAAA,YAAY,GAAGc,UAAf;AACAd,MAAAA,YAAY,CAACkB,OAAb,GAAuBT,wBAAvB;AACAT,MAAAA,YAAY,CAACmB,OAAb,GAAuBV,wBAAvB;;AAEAT,MAAAA,YAAY,CAACoB,SAAb,GAAyB;AAAA,YACvBjC,IADuB,SACvBA,IADuB;AAAA,eAEnBc,IAAI,CAACF,cAAD,EAAiBZ,IAAjB,CAFe;AAAA,OAAzB;AAGD,KAlBM,MAkBA;AACL2B,MAAAA,UAAU,CAACN,KAAX,CAAiB,IAAjB,EAAuB,oBAAvB;AACD;AACF,GA3CD;AA4CA,SAAO;AACLd,IAAAA,MAAM,EAAEI,GADH;AAGLuB,IAAAA,mBAHK,iCAGiB;AACpB,aAAO,CAAC,CAACtB,cAAT;AACD;AALI,GAAP;AAQD;;AAED,IAAIuB,QAAQ,GAAG;AACb7B,EAAAA,cAAc,EAAdA;AADa,CAAf;AAGAV,OAAO,CAACE,OAAR,GAAkBqC,QAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _ws() {\n  const data = _interopRequireDefault(require(\"ws\"));\n\n  _ws = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\nfunction attachToServer(server, path) {\n  const WebSocketServer = _ws().default.Server;\n\n  const wss = new WebSocketServer({\n    server,\n    path\n  });\n  let debuggerSocket;\n  let clientSocket;\n\n  function send(dest, message) {\n    if (!dest) {\n      return;\n    }\n\n    try {\n      dest.send(message);\n    } catch (e) {\n      _cliTools().logger.warn(e); // Sometimes this call throws 'not opened'\n\n    }\n  }\n\n  const debuggerSocketCloseHandler = () => {\n    debuggerSocket = null;\n\n    if (clientSocket) {\n      clientSocket.close(1011, 'Debugger was disconnected');\n    }\n  };\n\n  const clientSocketCloseHandler = () => {\n    clientSocket = null;\n    send(debuggerSocket, JSON.stringify({\n      method: '$disconnected'\n    }));\n  };\n\n  wss.on('connection', connection => {\n    // @ts-ignore current definition of ws does not have upgradeReq type\n    const {\n      url\n    } = connection.upgradeReq;\n\n    if (url.indexOf('role=debugger') > -1) {\n      if (debuggerSocket) {\n        connection.close(1011, 'Another debugger is already connected');\n        return;\n      }\n\n      debuggerSocket = connection;\n\n      if (debuggerSocket) {\n        debuggerSocket.onerror = debuggerSocketCloseHandler;\n        debuggerSocket.onclose = debuggerSocketCloseHandler;\n\n        debuggerSocket.onmessage = ({\n          data\n        }) => send(clientSocket, data);\n      }\n    } else if (url.indexOf('role=client') > -1) {\n      if (clientSocket) {\n        // @ts-ignore not nullable with current type definition of ws\n        clientSocket.onerror = null; // @ts-ignore not nullable with current type definition of ws\n\n        clientSocket.onclose = null; // @ts-ignore not nullable with current type definition of ws\n\n        clientSocket.onmessage = null;\n        clientSocket.close(1011, 'Another client connected');\n      }\n\n      clientSocket = connection;\n      clientSocket.onerror = clientSocketCloseHandler;\n      clientSocket.onclose = clientSocketCloseHandler;\n\n      clientSocket.onmessage = ({\n        data\n      }) => send(debuggerSocket, data);\n    } else {\n      connection.close(1011, 'Missing role param');\n    }\n  });\n  return {\n    server: wss,\n\n    isDebuggerConnected() {\n      return !!debuggerSocket;\n    }\n\n  };\n}\n\nvar _default = {\n  attachToServer\n};\nexports.default = _default;\n\n//# sourceMappingURL=debuggerProxyServer.js.map"]},"metadata":{},"sourceType":"script"}