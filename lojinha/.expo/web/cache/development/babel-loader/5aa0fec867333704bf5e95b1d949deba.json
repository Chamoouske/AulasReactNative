{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Notifications_1 = require(\"../../android/Notifications\");\n\nvar core_plugins_1 = require(\"../core-plugins\");\n\nvar ios_plugins_1 = require(\"../ios-plugins\");\n\nvar static_plugins_1 = require(\"../static-plugins\");\n\nvar packageName = 'expo-notifications';\n\nexports.withNotifications = function (config) {\n  return static_plugins_1.withStaticPlugin(config, {\n    _isLegacyPlugin: true,\n    plugin: packageName,\n    fallback: withUnversionedNotifications\n  });\n};\n\nvar withNotificationsEntitlement = function withNotificationsEntitlement(config, mode) {\n  return ios_plugins_1.withEntitlementsPlist(config, function (config) {\n    config.modResults['aps-environment'] = mode;\n    return config;\n  });\n};\n\nvar withUnversionedNotifications = core_plugins_1.createRunOncePlugin(function (config) {\n  config = Notifications_1.withNotificationManifest(config);\n  config = Notifications_1.withNotificationIconColor(config);\n  config = Notifications_1.withNotificationIcons(config);\n  config = withNotificationsEntitlement(config, 'development');\n  return config;\n}, packageName);\nexports.default = exports.withNotifications;","map":{"version":3,"sources":["../../../src/plugins/unversioned/expo-notifications.ts"],"names":[],"mappings":";;;;;;AACA,IAAA,eAAA,GAAA,OAAA,+BAAA;;AAKA,IAAA,cAAA,GAAA,OAAA,mBAAA;;AACA,IAAA,aAAA,GAAA,OAAA,kBAAA;;AACA,IAAA,gBAAA,GAAA,OAAA,qBAAA;;AAEA,IAAM,WAAW,GAAG,oBAApB;;AAEa,OAAA,CAAA,iBAAA,GAAkC,UAAA,MAAM,EAAG;AACtD,SAAO,gBAAA,CAAA,gBAAA,CAAiB,MAAjB,EAAyB;AAC9B,IAAA,eAAe,EAAE,IADa;AAE9B,IAAA,MAAM,EAAE,WAFsB;AAI9B,IAAA,QAAQ,EAAE;AAJoB,GAAzB,CAAP;AAMD,CAPY;;AASb,IAAM,4BAA4B,GAA+C,SAA3E,4BAA2E,CAAC,MAAD,EAAS,IAAT,EAAiB;AAChG,SAAO,aAAA,CAAA,qBAAA,CAAsB,MAAtB,EAA8B,UAAA,MAAM,EAAG;AAC5C,IAAA,MAAM,CAAC,UAAP,CAAkB,iBAAlB,IAAuC,IAAvC;AACA,WAAO,MAAP;AACD,GAHM,CAAP;AAID,CALD;;AAOA,IAAM,4BAA4B,GAAiB,cAAA,CAAA,mBAAA,CAAoB,UAAA,MAAM,EAAG;AAE9E,EAAA,MAAM,GAAG,eAAA,CAAA,wBAAA,CAAyB,MAAzB,CAAT;AACA,EAAA,MAAM,GAAG,eAAA,CAAA,yBAAA,CAA0B,MAA1B,CAAT;AACA,EAAA,MAAM,GAAG,eAAA,CAAA,qBAAA,CAAsB,MAAtB,CAAT;AAGA,EAAA,MAAM,GAAG,4BAA4B,CAAC,MAAD,EAAS,aAAT,CAArC;AAEA,SAAO,MAAP;AACD,CAVkD,EAUhD,WAVgD,CAAnD;AAYA,OAAA,CAAA,OAAA,GAAe,OAAA,CAAA,iBAAf","sourcesContent":["import { ConfigPlugin } from '../../Plugin.types';\nimport {\n  withNotificationIconColor,\n  withNotificationIcons,\n  withNotificationManifest,\n} from '../../android/Notifications';\nimport { createRunOncePlugin } from '../core-plugins';\nimport { withEntitlementsPlist } from '../ios-plugins';\nimport { withStaticPlugin } from '../static-plugins';\n\nconst packageName = 'expo-notifications';\n\nexport const withNotifications: ConfigPlugin = config => {\n  return withStaticPlugin(config, {\n    _isLegacyPlugin: true,\n    plugin: packageName,\n    // If the static plugin isn't found, use the unversioned one.\n    fallback: withUnversionedNotifications,\n  });\n};\n\nconst withNotificationsEntitlement: ConfigPlugin<'production' | 'development'> = (config, mode) => {\n  return withEntitlementsPlist(config, config => {\n    config.modResults['aps-environment'] = mode;\n    return config;\n  });\n};\n\nconst withUnversionedNotifications: ConfigPlugin = createRunOncePlugin(config => {\n  // Android\n  config = withNotificationManifest(config);\n  config = withNotificationIconColor(config);\n  config = withNotificationIcons(config);\n\n  // iOS\n  config = withNotificationsEntitlement(config, 'development');\n\n  return config;\n}, packageName);\n\nexport default withNotifications;\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}