{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nvar _extends = require(\"@babel/runtime/helpers/extends\");\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nvar _jsxFileName = \"/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/RNTester/js/examples/TextInput/TextInputExample.ios.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar React = require('react');\n\nvar Button = require(\"react-native-web/dist/exports/Button\").default;\n\nvar InputAccessoryView = require(\"react-native-web/dist/exports/InputAccessoryView\").default;\n\nvar Text = require(\"react-native-web/dist/exports/Text\").default;\n\nvar TextInput = require(\"react-native-web/dist/exports/TextInput\").default;\n\nvar View = require(\"react-native-web/dist/exports/View\").default;\n\nvar StyleSheet = require(\"react-native-web/dist/exports/StyleSheet\").default;\n\nvar Switch = require(\"react-native-web/dist/exports/Switch\").default;\n\nvar Alert = require(\"react-native-web/dist/exports/Alert\").default;\n\nvar TextInputSharedExamples = require(\"./TextInputSharedExamples.js\");\n\nvar WithLabel = function (_React$Component) {\n  _inherits(WithLabel, _React$Component);\n\n  var _super = _createSuper(WithLabel);\n\n  function WithLabel() {\n    _classCallCheck(this, WithLabel);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(WithLabel, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: styles.labelContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 7\n        }\n      }, React.createElement(View, {\n        style: styles.label,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 9\n        }\n      }, React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }\n      }, this.props.label)), this.props.children);\n    }\n  }]);\n\n  return WithLabel;\n}(React.Component);\n\nvar TextInputAccessoryViewExample = function (_React$Component2) {\n  _inherits(TextInputAccessoryViewExample, _React$Component2);\n\n  var _super2 = _createSuper(TextInputAccessoryViewExample);\n\n  function TextInputAccessoryViewExample(props) {\n    var _this;\n\n    _classCallCheck(this, TextInputAccessoryViewExample);\n\n    _this = _super2.call(this, props);\n    _this.state = {\n      text: 'Placeholder Text'\n    };\n    return _this;\n  }\n\n  _createClass(TextInputAccessoryViewExample, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var inputAccessoryViewID = 'inputAccessoryView1';\n      return React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 7\n        }\n      }, React.createElement(TextInput, {\n        style: styles.default,\n        inputAccessoryViewID: inputAccessoryViewID,\n        onChangeText: function onChangeText(text) {\n          return _this2.setState({\n            text: text\n          });\n        },\n        value: this.state.text,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 9\n        }\n      }), React.createElement(InputAccessoryView, {\n        nativeID: inputAccessoryViewID,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 9\n        }\n      }, React.createElement(View, {\n        style: {\n          backgroundColor: 'white'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }\n      }, React.createElement(Button, {\n        onPress: function onPress() {\n          return _this2.setState({\n            text: 'Placeholder Text'\n          });\n        },\n        title: \"Reset Text\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }\n      }))));\n    }\n  }]);\n\n  return TextInputAccessoryViewExample;\n}(React.Component);\n\nvar RewriteExampleKana = function (_React$Component3) {\n  _inherits(RewriteExampleKana, _React$Component3);\n\n  var _super3 = _createSuper(RewriteExampleKana);\n\n  function RewriteExampleKana(props) {\n    var _this3;\n\n    _classCallCheck(this, RewriteExampleKana);\n\n    _this3 = _super3.call(this, props);\n    _this3.state = {\n      text: ''\n    };\n    return _this3;\n  }\n\n  _createClass(RewriteExampleKana, [{\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      return React.createElement(View, {\n        style: styles.rewriteContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 7\n        }\n      }, React.createElement(TextInput, {\n        multiline: false,\n        onChangeText: function onChangeText(text) {\n          _this4.setState({\n            text: text.replace(/ひ/g, '日')\n          });\n        },\n        style: styles.default,\n        value: this.state.text,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return RewriteExampleKana;\n}(React.Component);\n\nvar SecureEntryExample = function (_React$Component4) {\n  _inherits(SecureEntryExample, _React$Component4);\n\n  var _super4 = _createSuper(SecureEntryExample);\n\n  function SecureEntryExample(props) {\n    var _this5;\n\n    _classCallCheck(this, SecureEntryExample);\n\n    _this5 = _super4.call(this, props);\n    _this5.state = {\n      text: '',\n      password: '',\n      isSecureTextEntry: true\n    };\n    return _this5;\n  }\n\n  _createClass(SecureEntryExample, [{\n    key: \"render\",\n    value: function render() {\n      var _this6 = this;\n\n      return React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 7\n        }\n      }, React.createElement(TextInput, {\n        secureTextEntry: true,\n        style: styles.default,\n        defaultValue: \"abc\",\n        onChangeText: function onChangeText(text) {\n          return _this6.setState({\n            text: text\n          });\n        },\n        value: this.state.text,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 9\n        }\n      }), React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 9\n        }\n      }, \"Current text is: \", this.state.text), React.createElement(View, {\n        style: {\n          flex: 1,\n          flexDirection: 'row'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 9\n        }\n      }, React.createElement(TextInput, {\n        style: styles.default,\n        defaultValue: \"cde\",\n        onChangeText: function onChangeText(text) {\n          return _this6.setState({\n            password: text\n          });\n        },\n        secureTextEntry: this.state.isSecureTextEntry,\n        value: this.state.password,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }\n      }), React.createElement(Switch, {\n        onValueChange: function onValueChange(value) {\n          _this6.setState({\n            isSecureTextEntry: value\n          });\n        },\n        style: {\n          marginLeft: 4\n        },\n        value: this.state.isSecureTextEntry,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }\n      })));\n    }\n  }]);\n\n  return SecureEntryExample;\n}(React.Component);\n\nvar AutogrowingTextInputExample = function (_React$Component5) {\n  _inherits(AutogrowingTextInputExample, _React$Component5);\n\n  var _super5 = _createSuper(AutogrowingTextInputExample);\n\n  function AutogrowingTextInputExample(props) {\n    var _this7;\n\n    _classCallCheck(this, AutogrowingTextInputExample);\n\n    _this7 = _super5.call(this, props);\n    _this7.state = {\n      width: 100,\n      multiline: true,\n      text: '',\n      contentSize: {\n        width: 0,\n        height: 0\n      }\n    };\n    return _this7;\n  }\n\n  _createClass(AutogrowingTextInputExample, [{\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(props) {\n      this.setState({\n        multiline: props.multiline\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this8 = this;\n\n      var _this$props = this.props,\n          style = _this$props.style,\n          multiline = _this$props.multiline,\n          props = _objectWithoutProperties(_this$props, [\"style\", \"multiline\"]);\n\n      return React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 7\n        }\n      }, React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 9\n        }\n      }, \"Width:\"), React.createElement(Slider, {\n        value: 100,\n        minimumValue: 0,\n        maximumValue: 100,\n        step: 10,\n        onValueChange: function onValueChange(value) {\n          return _this8.setState({\n            width: value\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 9\n        }\n      }), React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 9\n        }\n      }, \"Multiline:\"), React.createElement(Switch, {\n        value: this.state.multiline,\n        onValueChange: function onValueChange(value) {\n          return _this8.setState({\n            multiline: value\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 9\n        }\n      }), React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 9\n        }\n      }, \"TextInput:\"), React.createElement(TextInput, _extends({\n        value: \"prop\",\n        multiline: this.state.multiline,\n        style: [style, {\n          width: this.state.width + '%'\n        }],\n        onChangeText: function onChangeText(value) {\n          return _this8.setState({\n            text: value\n          });\n        },\n        onContentSizeChange: function onContentSizeChange(event) {\n          return _this8.setState({\n            contentSize: event.nativeEvent.contentSize\n          });\n        }\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 9\n        }\n      })), React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 9\n        }\n      }, \"Plain text value representation:\"), React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 9\n        }\n      }, this.state.text), React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 9\n        }\n      }, \"Content Size: \", JSON.stringify(this.state.contentSize)));\n    }\n  }]);\n\n  return AutogrowingTextInputExample;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  default: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderColor: '#0f0f0f',\n    flex: 1,\n    fontSize: 13,\n    padding: 4\n  },\n  multiline: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderColor: '#0f0f0f',\n    flex: 1,\n    fontSize: 13,\n    height: 50,\n    padding: 4,\n    marginBottom: 4\n  },\n  multilinePlaceholderStyles: {\n    letterSpacing: 10,\n    lineHeight: 20,\n    textAlign: 'center'\n  },\n  multilineExpandable: {\n    height: 'auto',\n    maxHeight: 100\n  },\n  multilineWithFontStyles: {\n    color: 'blue',\n    fontWeight: 'bold',\n    fontSize: 18,\n    fontFamily: 'Cochin',\n    height: 60\n  },\n  singlelinePlaceholderStyles: {\n    letterSpacing: 10,\n    textAlign: 'center'\n  },\n  labelContainer: {\n    flexDirection: 'row',\n    marginVertical: 2,\n    flex: 1\n  },\n  label: {\n    width: 115,\n    alignItems: 'flex-end',\n    marginRight: 10,\n    paddingTop: 2\n  },\n  rewriteContainer: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  remainder: {\n    textAlign: 'right',\n    width: 24\n  }\n});\nexports.displayName = undefined;\nexports.title = '<TextInput>';\nexports.description = 'Single and multi-line text inputs.';\nexports.examples = [].concat(_toConsumableArray(TextInputSharedExamples), [{\n  title: 'Live Re-Write (ひ -> 日)',\n  render: function render() {\n    return React.createElement(RewriteExampleKana, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 14\n      }\n    });\n  }\n}, {\n  title: 'Keyboard Accessory View',\n  render: function render() {\n    return React.createElement(TextInputAccessoryViewExample, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 14\n      }\n    });\n  }\n}, {\n  title: 'Nested content and `value` property',\n  render: function render() {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }\n    }, React.createElement(WithLabel, {\n      label: \"singleline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 11\n      }\n    }, React.createElement(TextInput, {\n      style: styles.default,\n      value: \"(value property)\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 13\n      }\n    }, \"(first raw text node)\", React.createElement(Text, {\n      style: {\n        color: 'red'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 15\n      }\n    }, \"(internal raw text node)\"), \"(last raw text node)\")), React.createElement(WithLabel, {\n      label: \"multiline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 11\n      }\n    }, React.createElement(TextInput, {\n      style: styles.default,\n      multiline: true,\n      value: \"(value property)\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 13\n      }\n    }, \"(first raw text node)\", React.createElement(Text, {\n      style: {\n        color: 'red'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 15\n      }\n    }, \"(internal raw text node)\"), \"(last raw text node)\")));\n  }\n}, {\n  title: 'Keyboard appearance',\n  render: function render() {\n    var _this9 = this;\n\n    var keyboardAppearance = ['default', 'light', 'dark'];\n    var examples = keyboardAppearance.map(function (type) {\n      return React.createElement(WithLabel, {\n        key: type,\n        label: type,\n        __self: _this9,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 11\n        }\n      }, React.createElement(TextInput, {\n        keyboardAppearance: type,\n        style: styles.default,\n        __self: _this9,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 13\n        }\n      }));\n    });\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 14\n      }\n    }, examples);\n  }\n}, {\n  title: 'Return key types',\n  render: function render() {\n    var _this10 = this;\n\n    var returnKeyTypes = ['default', 'go', 'google', 'join', 'next', 'route', 'search', 'send', 'yahoo', 'done', 'emergency-call'];\n    var examples = returnKeyTypes.map(function (type) {\n      return React.createElement(WithLabel, {\n        key: type,\n        label: type,\n        __self: _this10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 11\n        }\n      }, React.createElement(TextInput, {\n        returnKeyType: type,\n        style: styles.default,\n        __self: _this10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 13\n        }\n      }));\n    });\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 14\n      }\n    }, examples);\n  }\n}, {\n  title: 'Enable return key automatically',\n  render: function render() {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 9\n      }\n    }, React.createElement(WithLabel, {\n      label: \"true\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 11\n      }\n    }, React.createElement(TextInput, {\n      enablesReturnKeyAutomatically: true,\n      style: styles.default,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 13\n      }\n    })));\n  }\n}, {\n  title: 'Secure text entry',\n  render: function render() {\n    return React.createElement(SecureEntryExample, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 14\n      }\n    });\n  }\n}, {\n  title: 'Colored input text',\n  render: function render() {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 9\n      }\n    }, React.createElement(TextInput, {\n      style: [styles.default, {\n        color: 'blue'\n      }],\n      defaultValue: \"Blue\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 11\n      }\n    }), React.createElement(TextInput, {\n      style: [styles.default, {\n        color: 'green'\n      }],\n      defaultValue: \"Green\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 11\n      }\n    }));\n  }\n}, {\n  title: 'Colored highlight/cursor for text input',\n  render: function render() {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 9\n      }\n    }, React.createElement(TextInput, {\n      style: styles.default,\n      selectionColor: 'green',\n      defaultValue: \"Highlight me\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 11\n      }\n    }), React.createElement(TextInput, {\n      style: styles.default,\n      selectionColor: 'rgba(86, 76, 205, 1)',\n      defaultValue: \"Highlight me\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 11\n      }\n    }));\n  }\n}, {\n  title: 'Clear button mode',\n  render: function render() {\n    var _this11 = this;\n\n    var clearButtonModes = ['never', 'while-editing', 'unless-editing', 'always'];\n    var examples = clearButtonModes.map(function (mode) {\n      return React.createElement(WithLabel, {\n        key: mode,\n        label: mode,\n        __self: _this11,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 11\n        }\n      }, React.createElement(TextInput, {\n        style: styles.default,\n        clearButtonMode: mode,\n        defaultValue: mode,\n        __self: _this11,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 13\n        }\n      }));\n    });\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 14\n      }\n    }, examples);\n  }\n}, {\n  title: 'Clear and select',\n  render: function render() {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 9\n      }\n    }, React.createElement(WithLabel, {\n      label: \"clearTextOnFocus\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 11\n      }\n    }, React.createElement(TextInput, {\n      placeholder: \"text is cleared on focus\",\n      defaultValue: \"text is cleared on focus\",\n      style: styles.default,\n      clearTextOnFocus: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 13\n      }\n    })), React.createElement(WithLabel, {\n      label: \"selectTextOnFocus\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 11\n      }\n    }, React.createElement(TextInput, {\n      placeholder: \"text is selected on focus\",\n      defaultValue: \"text is selected on focus\",\n      style: styles.default,\n      selectTextOnFocus: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 13\n      }\n    })), React.createElement(WithLabel, {\n      label: \"clearTextOnFocus (multiline)\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 11\n      }\n    }, React.createElement(TextInput, {\n      placeholder: \"text is cleared on focus\",\n      defaultValue: \"text is cleared on focus\",\n      style: styles.default,\n      clearTextOnFocus: true,\n      multiline: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 13\n      }\n    })), React.createElement(WithLabel, {\n      label: \"selectTextOnFocus (multiline)\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 11\n      }\n    }, React.createElement(TextInput, {\n      placeholder: \"text is selected on focus\",\n      defaultValue: \"text is selected on focus\",\n      style: styles.default,\n      selectTextOnFocus: true,\n      multiline: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 13\n      }\n    })));\n  }\n}, {\n  title: 'Multiline blur on submit',\n  render: function render() {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 9\n      }\n    }, React.createElement(TextInput, {\n      style: styles.multiline,\n      placeholder: \"blurOnSubmit = true\",\n      returnKeyType: \"next\",\n      blurOnSubmit: true,\n      multiline: true,\n      onSubmitEditing: function onSubmitEditing(event) {\n        return Alert.alert('Alert', event.nativeEvent.text);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 11\n      }\n    }));\n  }\n}, {\n  title: 'Multiline',\n  render: function render() {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 9\n      }\n    }, React.createElement(TextInput, {\n      placeholder: \"multiline text input\",\n      multiline: true,\n      style: styles.multiline,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487,\n        columnNumber: 11\n      }\n    }), React.createElement(TextInput, {\n      placeholder: \"multiline text input with font styles and placeholder\",\n      multiline: true,\n      clearTextOnFocus: true,\n      autoCorrect: true,\n      autoCapitalize: \"words\",\n      placeholderTextColor: \"red\",\n      keyboardType: \"url\",\n      style: [styles.multiline, styles.multilineWithFontStyles],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 492,\n        columnNumber: 11\n      }\n    }), React.createElement(TextInput, {\n      placeholder: \"multiline text input with max length\",\n      maxLength: 5,\n      multiline: true,\n      style: styles.multiline,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 11\n      }\n    }), React.createElement(TextInput, {\n      placeholder: \"uneditable multiline text input\",\n      editable: false,\n      multiline: true,\n      style: styles.multiline,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 11\n      }\n    }), React.createElement(TextInput, {\n      defaultValue: \"uneditable multiline text input with phone number detection: 88888888.\",\n      editable: false,\n      multiline: true,\n      style: styles.multiline,\n      dataDetectorTypes: \"phoneNumber\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 11\n      }\n    }));\n  }\n}, {\n  title: 'TextInput Intrinsic Size',\n  render: function render() {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 9\n      }\n    }, React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530,\n        columnNumber: 11\n      }\n    }, \"Singleline TextInput\"), React.createElement(View, {\n      style: {\n        height: 80\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531,\n        columnNumber: 11\n      }\n    }, React.createElement(TextInput, {\n      style: {\n        position: 'absolute',\n        fontSize: 16,\n        backgroundColor: '#eeeeee',\n        borderColor: '#666666',\n        borderWidth: 5,\n        borderTopWidth: 20,\n        borderRadius: 10,\n        borderBottomRightRadius: 20,\n        padding: 10,\n        paddingTop: 20\n      },\n      testID: \"singleline_textinput\",\n      placeholder: \"Placeholder defines intrinsic size\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532,\n        columnNumber: 13\n      }\n    })), React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549,\n        columnNumber: 11\n      }\n    }, \"Multiline TextInput\"), React.createElement(View, {\n      style: {\n        height: 130\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 11\n      }\n    }, React.createElement(TextInput, {\n      style: {\n        position: 'absolute',\n        fontSize: 16,\n        backgroundColor: '#eeeeee',\n        borderColor: '#666666',\n        borderWidth: 5,\n        borderTopWidth: 20,\n        borderRadius: 10,\n        borderBottomRightRadius: 20,\n        padding: 10,\n        paddingTop: 20,\n        maxHeight: 100\n      },\n      testID: \"multiline_textinput\",\n      multiline: true,\n      placeholder: \"Placeholder defines intrinsic size\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 13\n      }\n    })), React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 570,\n        columnNumber: 11\n      }\n    }, React.createElement(TextInput, {\n      style: {\n        fontSize: 16,\n        backgroundColor: '#eeeeee',\n        borderColor: '#666666',\n        borderWidth: 5,\n        borderTopWidth: 20,\n        borderRadius: 10,\n        borderBottomRightRadius: 20,\n        padding: 10,\n        paddingTop: 20\n      },\n      testID: \"multiline_textinput_with_flex\",\n      multiline: true,\n      placeholder: \"Placeholder defines intrinsic size\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571,\n        columnNumber: 13\n      }\n    })));\n  }\n}, {\n  title: 'Auto-expanding',\n  render: function render() {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 596,\n        columnNumber: 9\n      }\n    }, React.createElement(TextInput, {\n      placeholder: \"height increases with content\",\n      defaultValue: \"React Native enables you to build world-class application experiences on native platforms using a consistent developer experience based on JavaScript and React. The focus of React Native is on developer efficiency across all the platforms you care about - learn once, write anywhere. Facebook uses React Native in multiple production apps and will continue investing in React Native.\",\n      multiline: true,\n      enablesReturnKeyAutomatically: true,\n      returnKeyType: \"go\",\n      style: [styles.multiline, styles.multilineExpandable],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 597,\n        columnNumber: 11\n      }\n    }));\n  }\n}, {\n  title: 'Auto-expanding',\n  render: function render() {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 613,\n        columnNumber: 9\n      }\n    }, React.createElement(AutogrowingTextInputExample, {\n      enablesReturnKeyAutomatically: true,\n      returnKeyType: \"done\",\n      multiline: true,\n      style: {\n        maxHeight: 400,\n        minHeight: 20,\n        paddingTop: 0,\n        backgroundColor: '#eeeeee',\n        color: 'blue'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 614,\n        columnNumber: 11\n      }\n    }, React.createElement(Text, {\n      style: {\n        fontSize: 30,\n        color: 'green'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 625,\n        columnNumber: 13\n      }\n    }, \"huge\"), \"generic generic generic\", React.createElement(Text, {\n      style: {\n        fontSize: 6,\n        color: 'red'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 627,\n        columnNumber: 13\n      }\n    }, \"small small small small small small\"), React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 630,\n        columnNumber: 13\n      }\n    }, \"regular regular\"), React.createElement(Text, {\n      style: {\n        fontSize: 30,\n        color: 'green'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 631,\n        columnNumber: 13\n      }\n    }, \"huge huge huge huge huge\"), \"generic generic generic\"));\n  }\n}, {\n  title: 'TextInput maxLength',\n  render: function render() {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 644,\n        columnNumber: 9\n      }\n    }, React.createElement(WithLabel, {\n      label: \"maxLength: 5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 645,\n        columnNumber: 11\n      }\n    }, React.createElement(TextInput, {\n      maxLength: 5,\n      style: styles.default,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 646,\n        columnNumber: 13\n      }\n    })), React.createElement(WithLabel, {\n      label: \"maxLength: 5 with placeholder\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 648,\n        columnNumber: 11\n      }\n    }, React.createElement(TextInput, {\n      maxLength: 5,\n      placeholder: \"ZIP code entry\",\n      style: styles.default,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 649,\n        columnNumber: 13\n      }\n    })), React.createElement(WithLabel, {\n      label: \"maxLength: 5 with default value already set\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655,\n        columnNumber: 11\n      }\n    }, React.createElement(TextInput, {\n      maxLength: 5,\n      defaultValue: \"94025\",\n      style: styles.default,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 656,\n        columnNumber: 13\n      }\n    })), React.createElement(WithLabel, {\n      label: \"maxLength: 5 with very long default value already set\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 662,\n        columnNumber: 11\n      }\n    }, React.createElement(TextInput, {\n      maxLength: 5,\n      defaultValue: \"9402512345\",\n      style: styles.default,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 663,\n        columnNumber: 13\n      }\n    })));\n  }\n}, {\n  title: 'Text Content Type',\n  render: function render() {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 677,\n        columnNumber: 9\n      }\n    }, React.createElement(WithLabel, {\n      label: \"emailAddress\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 678,\n        columnNumber: 11\n      }\n    }, React.createElement(TextInput, {\n      textContentType: \"emailAddress\",\n      style: styles.default,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 679,\n        columnNumber: 13\n      }\n    })), React.createElement(WithLabel, {\n      label: \"name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 681,\n        columnNumber: 11\n      }\n    }, React.createElement(TextInput, {\n      textContentType: \"name\",\n      style: styles.default,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 682,\n        columnNumber: 13\n      }\n    })));\n  }\n}, {\n  title: 'TextInput Placeholder Styles',\n  render: function render() {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 692,\n        columnNumber: 9\n      }\n    }, React.createElement(WithLabel, {\n      label: \"letterSpacing: 10 lineHeight: 20 textAlign: 'center'\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 693,\n        columnNumber: 11\n      }\n    }, React.createElement(TextInput, {\n      placeholder: \"multiline text input\",\n      multiline: true,\n      style: [styles.multiline, styles.multilinePlaceholderStyles],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 694,\n        columnNumber: 13\n      }\n    })), React.createElement(WithLabel, {\n      label: \"letterSpacing: 10 textAlign: 'center'\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 700,\n        columnNumber: 11\n      }\n    }, React.createElement(TextInput, {\n      placeholder: \"singleline\",\n      style: [styles.default, styles.singlelinePlaceholderStyles],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 701,\n        columnNumber: 13\n      }\n    })));\n  }\n}]);","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/RNTester/js/examples/TextInput/TextInputExample.ios.js"],"names":["React","require","TextInputSharedExamples","WithLabel","styles","labelContainer","label","props","children","Component","TextInputAccessoryViewExample","state","text","inputAccessoryViewID","default","setState","backgroundColor","RewriteExampleKana","rewriteContainer","replace","SecureEntryExample","password","isSecureTextEntry","flex","flexDirection","value","marginLeft","AutogrowingTextInputExample","width","multiline","contentSize","height","style","event","nativeEvent","JSON","stringify","StyleSheet","create","borderWidth","hairlineWidth","borderColor","fontSize","padding","marginBottom","multilinePlaceholderStyles","letterSpacing","lineHeight","textAlign","multilineExpandable","maxHeight","multilineWithFontStyles","color","fontWeight","fontFamily","singlelinePlaceholderStyles","marginVertical","alignItems","marginRight","paddingTop","remainder","exports","displayName","undefined","title","description","examples","render","keyboardAppearance","map","type","returnKeyTypes","clearButtonModes","mode","Alert","alert","position","borderTopWidth","borderRadius","borderBottomRightRadius","minHeight"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst React = require('react');\n\nconst {\n  Button,\n  InputAccessoryView,\n  Text,\n  TextInput,\n  View,\n  StyleSheet,\n  Slider,\n  Switch,\n  Alert,\n} = require('react-native');\n\nconst TextInputSharedExamples = require('./TextInputSharedExamples.js');\n\nimport type {RNTesterExampleModuleItem} from '../../types/RNTesterTypes';\n\nclass WithLabel extends React.Component<$FlowFixMeProps> {\n  render() {\n    return (\n      <View style={styles.labelContainer}>\n        <View style={styles.label}>\n          <Text>{this.props.label}</Text>\n        </View>\n        {this.props.children}\n      </View>\n    );\n  }\n}\n\nclass TextInputAccessoryViewExample extends React.Component<{...}, *> {\n  constructor(props) {\n    super(props);\n    this.state = {text: 'Placeholder Text'};\n  }\n\n  render() {\n    const inputAccessoryViewID = 'inputAccessoryView1';\n    return (\n      <View>\n        <TextInput\n          style={styles.default}\n          inputAccessoryViewID={inputAccessoryViewID}\n          onChangeText={text => this.setState({text})}\n          value={this.state.text}\n        />\n        <InputAccessoryView nativeID={inputAccessoryViewID}>\n          <View style={{backgroundColor: 'white'}}>\n            <Button\n              onPress={() => this.setState({text: 'Placeholder Text'})}\n              title=\"Reset Text\"\n            />\n          </View>\n        </InputAccessoryView>\n      </View>\n    );\n  }\n}\n\nclass RewriteExampleKana extends React.Component<$FlowFixMeProps, any> {\n  constructor(props) {\n    super(props);\n    this.state = {text: ''};\n  }\n  render() {\n    return (\n      <View style={styles.rewriteContainer}>\n        <TextInput\n          multiline={false}\n          onChangeText={text => {\n            this.setState({text: text.replace(/ひ/g, '日')});\n          }}\n          style={styles.default}\n          value={this.state.text}\n        />\n      </View>\n    );\n  }\n}\n\nclass SecureEntryExample extends React.Component<$FlowFixMeProps, any> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: '',\n      password: '',\n      isSecureTextEntry: true,\n    };\n  }\n  render() {\n    return (\n      <View>\n        <TextInput\n          secureTextEntry={true}\n          style={styles.default}\n          defaultValue=\"abc\"\n          onChangeText={text => this.setState({text})}\n          value={this.state.text}\n        />\n        <Text>Current text is: {this.state.text}</Text>\n        <View\n          style={{\n            flex: 1,\n            flexDirection: 'row',\n          }}>\n          <TextInput\n            style={styles.default}\n            defaultValue=\"cde\"\n            onChangeText={text => this.setState({password: text})}\n            secureTextEntry={this.state.isSecureTextEntry}\n            value={this.state.password}\n          />\n          <Switch\n            onValueChange={value => {\n              this.setState({isSecureTextEntry: value});\n            }}\n            style={{marginLeft: 4}}\n            value={this.state.isSecureTextEntry}\n          />\n        </View>\n      </View>\n    );\n  }\n}\n\nclass AutogrowingTextInputExample extends React.Component<\n  $FlowFixMeProps,\n  $FlowFixMeState,\n> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      width: 100,\n      multiline: true,\n      text: '',\n      contentSize: {\n        width: 0,\n        height: 0,\n      },\n    };\n  }\n\n  UNSAFE_componentWillReceiveProps(props) {\n    this.setState({\n      multiline: props.multiline,\n    });\n  }\n\n  render() {\n    const {style, multiline, ...props} = this.props;\n    return (\n      <View>\n        <Text>Width:</Text>\n        <Slider\n          value={100}\n          minimumValue={0}\n          maximumValue={100}\n          step={10}\n          onValueChange={value => this.setState({width: value})}\n        />\n        <Text>Multiline:</Text>\n        <Switch\n          value={this.state.multiline}\n          onValueChange={value => this.setState({multiline: value})}\n        />\n        <Text>TextInput:</Text>\n        <TextInput\n          value=\"prop\"\n          multiline={this.state.multiline}\n          style={[style, {width: this.state.width + '%'}]}\n          onChangeText={value => this.setState({text: value})}\n          onContentSizeChange={event =>\n            this.setState({contentSize: event.nativeEvent.contentSize})\n          }\n          {...props}\n        />\n        <Text>Plain text value representation:</Text>\n        <Text>{this.state.text}</Text>\n        <Text>Content Size: {JSON.stringify(this.state.contentSize)}</Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  default: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderColor: '#0f0f0f',\n    flex: 1,\n    fontSize: 13,\n    padding: 4,\n  },\n  multiline: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderColor: '#0f0f0f',\n    flex: 1,\n    fontSize: 13,\n    height: 50,\n    padding: 4,\n    marginBottom: 4,\n  },\n  multilinePlaceholderStyles: {\n    letterSpacing: 10,\n    lineHeight: 20,\n    textAlign: 'center',\n  },\n  multilineExpandable: {\n    height: 'auto',\n    maxHeight: 100,\n  },\n  multilineWithFontStyles: {\n    color: 'blue',\n    fontWeight: 'bold',\n    fontSize: 18,\n    fontFamily: 'Cochin',\n    height: 60,\n  },\n  singlelinePlaceholderStyles: {\n    letterSpacing: 10,\n    textAlign: 'center',\n  },\n  labelContainer: {\n    flexDirection: 'row',\n    marginVertical: 2,\n    flex: 1,\n  },\n  label: {\n    width: 115,\n    alignItems: 'flex-end',\n    marginRight: 10,\n    paddingTop: 2,\n  },\n  rewriteContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  remainder: {\n    textAlign: 'right',\n    width: 24,\n  },\n});\n\nexports.displayName = (undefined: ?string);\nexports.title = '<TextInput>';\nexports.description = 'Single and multi-line text inputs.';\nexports.examples = ([\n  ...TextInputSharedExamples,\n  {\n    title: 'Live Re-Write (ひ -> 日)',\n    render: function(): React.Node {\n      return <RewriteExampleKana />;\n    },\n  },\n  {\n    title: 'Keyboard Accessory View',\n    render: function(): React.Node {\n      return <TextInputAccessoryViewExample />;\n    },\n  },\n  {\n    title: 'Nested content and `value` property',\n    render: function(): React.Node {\n      return (\n        <View>\n          <WithLabel label=\"singleline\">\n            <TextInput style={styles.default} value=\"(value property)\">\n              (first raw text node)\n              <Text style={{color: 'red'}}>(internal raw text node)</Text>\n              (last raw text node)\n            </TextInput>\n          </WithLabel>\n          <WithLabel label=\"multiline\">\n            <TextInput\n              style={styles.default}\n              multiline={true}\n              value=\"(value property)\">\n              (first raw text node)\n              <Text style={{color: 'red'}}>(internal raw text node)</Text>\n              (last raw text node)\n            </TextInput>\n          </WithLabel>\n        </View>\n      );\n    },\n  },\n  {\n    title: 'Keyboard appearance',\n    render: function(): React.Node {\n      const keyboardAppearance = ['default', 'light', 'dark'];\n      const examples = keyboardAppearance.map(type => {\n        return (\n          <WithLabel key={type} label={type}>\n            <TextInput keyboardAppearance={type} style={styles.default} />\n          </WithLabel>\n        );\n      });\n      return <View>{examples}</View>;\n    },\n  },\n  {\n    title: 'Return key types',\n    render: function(): React.Node {\n      const returnKeyTypes = [\n        'default',\n        'go',\n        'google',\n        'join',\n        'next',\n        'route',\n        'search',\n        'send',\n        'yahoo',\n        'done',\n        'emergency-call',\n      ];\n      const examples = returnKeyTypes.map(type => {\n        return (\n          <WithLabel key={type} label={type}>\n            <TextInput returnKeyType={type} style={styles.default} />\n          </WithLabel>\n        );\n      });\n      return <View>{examples}</View>;\n    },\n  },\n  {\n    title: 'Enable return key automatically',\n    render: function(): React.Node {\n      return (\n        <View>\n          <WithLabel label=\"true\">\n            <TextInput\n              enablesReturnKeyAutomatically={true}\n              style={styles.default}\n            />\n          </WithLabel>\n        </View>\n      );\n    },\n  },\n  {\n    title: 'Secure text entry',\n    render: function(): React.Node {\n      return <SecureEntryExample />;\n    },\n  },\n  {\n    title: 'Colored input text',\n    render: function(): React.Node {\n      return (\n        <View>\n          <TextInput\n            style={[styles.default, {color: 'blue'}]}\n            defaultValue=\"Blue\"\n          />\n          <TextInput\n            style={[styles.default, {color: 'green'}]}\n            defaultValue=\"Green\"\n          />\n        </View>\n      );\n    },\n  },\n  {\n    title: 'Colored highlight/cursor for text input',\n    render: function(): React.Node {\n      return (\n        <View>\n          <TextInput\n            style={styles.default}\n            selectionColor={'green'}\n            defaultValue=\"Highlight me\"\n          />\n          <TextInput\n            style={styles.default}\n            selectionColor={'rgba(86, 76, 205, 1)'}\n            defaultValue=\"Highlight me\"\n          />\n        </View>\n      );\n    },\n  },\n  {\n    title: 'Clear button mode',\n    render: function(): React.Node {\n      const clearButtonModes = [\n        'never',\n        'while-editing',\n        'unless-editing',\n        'always',\n      ];\n      const examples = clearButtonModes.map(mode => {\n        return (\n          <WithLabel key={mode} label={mode}>\n            <TextInput\n              style={styles.default}\n              clearButtonMode={mode}\n              defaultValue={mode}\n            />\n          </WithLabel>\n        );\n      });\n      return <View>{examples}</View>;\n    },\n  },\n  {\n    title: 'Clear and select',\n    render: function(): React.Node {\n      return (\n        <View>\n          <WithLabel label=\"clearTextOnFocus\">\n            <TextInput\n              placeholder=\"text is cleared on focus\"\n              defaultValue=\"text is cleared on focus\"\n              style={styles.default}\n              clearTextOnFocus={true}\n            />\n          </WithLabel>\n          <WithLabel label=\"selectTextOnFocus\">\n            <TextInput\n              placeholder=\"text is selected on focus\"\n              defaultValue=\"text is selected on focus\"\n              style={styles.default}\n              selectTextOnFocus={true}\n            />\n          </WithLabel>\n          <WithLabel label=\"clearTextOnFocus (multiline)\">\n            <TextInput\n              placeholder=\"text is cleared on focus\"\n              defaultValue=\"text is cleared on focus\"\n              style={styles.default}\n              clearTextOnFocus={true}\n              multiline={true}\n            />\n          </WithLabel>\n          <WithLabel label=\"selectTextOnFocus (multiline)\">\n            <TextInput\n              placeholder=\"text is selected on focus\"\n              defaultValue=\"text is selected on focus\"\n              style={styles.default}\n              selectTextOnFocus={true}\n              multiline={true}\n            />\n          </WithLabel>\n        </View>\n      );\n    },\n  },\n  {\n    title: 'Multiline blur on submit',\n    render: function(): React.Node {\n      return (\n        <View>\n          <TextInput\n            style={styles.multiline}\n            placeholder=\"blurOnSubmit = true\"\n            returnKeyType=\"next\"\n            blurOnSubmit={true}\n            multiline={true}\n            onSubmitEditing={event =>\n              Alert.alert('Alert', event.nativeEvent.text)\n            }\n          />\n        </View>\n      );\n    },\n  },\n  {\n    title: 'Multiline',\n    render: function(): React.Node {\n      return (\n        <View>\n          <TextInput\n            placeholder=\"multiline text input\"\n            multiline={true}\n            style={styles.multiline}\n          />\n          <TextInput\n            placeholder=\"multiline text input with font styles and placeholder\"\n            multiline={true}\n            clearTextOnFocus={true}\n            autoCorrect={true}\n            autoCapitalize=\"words\"\n            placeholderTextColor=\"red\"\n            keyboardType=\"url\"\n            style={[styles.multiline, styles.multilineWithFontStyles]}\n          />\n          <TextInput\n            placeholder=\"multiline text input with max length\"\n            maxLength={5}\n            multiline={true}\n            style={styles.multiline}\n          />\n          <TextInput\n            placeholder=\"uneditable multiline text input\"\n            editable={false}\n            multiline={true}\n            style={styles.multiline}\n          />\n          <TextInput\n            defaultValue=\"uneditable multiline text input with phone number detection: 88888888.\"\n            editable={false}\n            multiline={true}\n            style={styles.multiline}\n            dataDetectorTypes=\"phoneNumber\"\n          />\n        </View>\n      );\n    },\n  },\n  {\n    title: 'TextInput Intrinsic Size',\n    render: function(): React.Node {\n      return (\n        <View>\n          <Text>Singleline TextInput</Text>\n          <View style={{height: 80}}>\n            <TextInput\n              style={{\n                position: 'absolute',\n                fontSize: 16,\n                backgroundColor: '#eeeeee',\n                borderColor: '#666666',\n                borderWidth: 5,\n                borderTopWidth: 20,\n                borderRadius: 10,\n                borderBottomRightRadius: 20,\n                padding: 10,\n                paddingTop: 20,\n              }}\n              testID=\"singleline_textinput\"\n              placeholder=\"Placeholder defines intrinsic size\"\n            />\n          </View>\n          <Text>Multiline TextInput</Text>\n          <View style={{height: 130}}>\n            <TextInput\n              style={{\n                position: 'absolute',\n                fontSize: 16,\n                backgroundColor: '#eeeeee',\n                borderColor: '#666666',\n                borderWidth: 5,\n                borderTopWidth: 20,\n                borderRadius: 10,\n                borderBottomRightRadius: 20,\n                padding: 10,\n                paddingTop: 20,\n                maxHeight: 100,\n              }}\n              testID=\"multiline_textinput\"\n              multiline={true}\n              placeholder=\"Placeholder defines intrinsic size\"\n            />\n          </View>\n          <View>\n            <TextInput\n              style={{\n                fontSize: 16,\n                backgroundColor: '#eeeeee',\n                borderColor: '#666666',\n                borderWidth: 5,\n                borderTopWidth: 20,\n                borderRadius: 10,\n                borderBottomRightRadius: 20,\n                padding: 10,\n                paddingTop: 20,\n              }}\n              testID=\"multiline_textinput_with_flex\"\n              multiline={true}\n              placeholder=\"Placeholder defines intrinsic size\"\n            />\n          </View>\n        </View>\n      );\n    },\n  },\n  {\n    title: 'Auto-expanding',\n    render: function(): React.Node {\n      return (\n        <View>\n          <TextInput\n            placeholder=\"height increases with content\"\n            defaultValue=\"React Native enables you to build world-class application experiences on native platforms using a consistent developer experience based on JavaScript and React. The focus of React Native is on developer efficiency across all the platforms you care about - learn once, write anywhere. Facebook uses React Native in multiple production apps and will continue investing in React Native.\"\n            multiline={true}\n            enablesReturnKeyAutomatically={true}\n            returnKeyType=\"go\"\n            style={[styles.multiline, styles.multilineExpandable]}\n          />\n        </View>\n      );\n    },\n  },\n  {\n    title: 'Auto-expanding',\n    render: function(): React.Node {\n      return (\n        <View>\n          <AutogrowingTextInputExample\n            enablesReturnKeyAutomatically={true}\n            returnKeyType=\"done\"\n            multiline={true}\n            style={{\n              maxHeight: 400,\n              minHeight: 20,\n              paddingTop: 0,\n              backgroundColor: '#eeeeee',\n              color: 'blue',\n            }}>\n            <Text style={{fontSize: 30, color: 'green'}}>huge</Text>\n            generic generic generic\n            <Text style={{fontSize: 6, color: 'red'}}>\n              small small small small small small\n            </Text>\n            <Text>regular regular</Text>\n            <Text style={{fontSize: 30, color: 'green'}}>\n              huge huge huge huge huge\n            </Text>\n            generic generic generic\n          </AutogrowingTextInputExample>\n        </View>\n      );\n    },\n  },\n  {\n    title: 'TextInput maxLength',\n    render: function(): React.Node {\n      return (\n        <View>\n          <WithLabel label=\"maxLength: 5\">\n            <TextInput maxLength={5} style={styles.default} />\n          </WithLabel>\n          <WithLabel label=\"maxLength: 5 with placeholder\">\n            <TextInput\n              maxLength={5}\n              placeholder=\"ZIP code entry\"\n              style={styles.default}\n            />\n          </WithLabel>\n          <WithLabel label=\"maxLength: 5 with default value already set\">\n            <TextInput\n              maxLength={5}\n              defaultValue=\"94025\"\n              style={styles.default}\n            />\n          </WithLabel>\n          <WithLabel label=\"maxLength: 5 with very long default value already set\">\n            <TextInput\n              maxLength={5}\n              defaultValue=\"9402512345\"\n              style={styles.default}\n            />\n          </WithLabel>\n        </View>\n      );\n    },\n  },\n  {\n    title: 'Text Content Type',\n    render: function(): React.Node {\n      return (\n        <View>\n          <WithLabel label=\"emailAddress\">\n            <TextInput textContentType=\"emailAddress\" style={styles.default} />\n          </WithLabel>\n          <WithLabel label=\"name\">\n            <TextInput textContentType=\"name\" style={styles.default} />\n          </WithLabel>\n        </View>\n      );\n    },\n  },\n  {\n    title: 'TextInput Placeholder Styles',\n    render: function(): React.Node {\n      return (\n        <View>\n          <WithLabel label=\"letterSpacing: 10 lineHeight: 20 textAlign: 'center'\">\n            <TextInput\n              placeholder=\"multiline text input\"\n              multiline={true}\n              style={[styles.multiline, styles.multilinePlaceholderStyles]}\n            />\n          </WithLabel>\n          <WithLabel label=\"letterSpacing: 10 textAlign: 'center'\">\n            <TextInput\n              placeholder=\"singleline\"\n              style={[styles.default, styles.singlelinePlaceholderStyles]}\n            />\n          </WithLabel>\n        </View>\n      );\n    },\n  },\n]: Array<RNTesterExampleModuleItem>);\n"]},"metadata":{},"sourceType":"script"}