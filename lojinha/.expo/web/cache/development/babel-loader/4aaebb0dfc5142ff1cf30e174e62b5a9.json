{"ast":null,"code":"\"use strict\";\n\nvar _extends = require(\"@babel/runtime/helpers/extends\");\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ios_plugins_1 = require(\"../plugins/ios-plugins\");\n\nexports.withOrientation = ios_plugins_1.createInfoPlistPlugin(setOrientation, 'withOrientation');\n\nfunction getOrientation(config) {\n  var _a;\n\n  return (_a = config.orientation) !== null && _a !== void 0 ? _a : null;\n}\n\nexports.getOrientation = getOrientation;\nexports.PORTRAIT_ORIENTATIONS = ['UIInterfaceOrientationPortrait', 'UIInterfaceOrientationPortraitUpsideDown'];\nexports.LANDSCAPE_ORIENTATIONS = ['UIInterfaceOrientationLandscapeLeft', 'UIInterfaceOrientationLandscapeRight'];\n\nfunction getUISupportedInterfaceOrientations(orientation) {\n  if (orientation === 'portrait') {\n    return exports.PORTRAIT_ORIENTATIONS;\n  } else if (orientation === 'landscape') {\n    return exports.LANDSCAPE_ORIENTATIONS;\n  } else {\n    return [].concat(_toConsumableArray(exports.PORTRAIT_ORIENTATIONS), _toConsumableArray(exports.LANDSCAPE_ORIENTATIONS));\n  }\n}\n\nfunction setOrientation(config, infoPlist) {\n  var orientation = getOrientation(config);\n  return _extends(_extends({}, infoPlist), {\n    UISupportedInterfaceOrientations: getUISupportedInterfaceOrientations(orientation)\n  });\n}\n\nexports.setOrientation = setOrientation;","map":{"version":3,"sources":["../../src/ios/Orientation.ts"],"names":[],"mappings":";;;;;;;;;;AAEA,IAAA,aAAA,GAAA,OAAA,0BAAA;;AAGa,OAAA,CAAA,eAAA,GAAkB,aAAA,CAAA,qBAAA,CAAsB,cAAtB,EAAsC,iBAAtC,CAAlB;;AAEb,SAAgB,cAAhB,CAA+B,MAA/B,EAAsE;;;AACpE,SAAA,CAAA,EAAA,GAAO,MAAM,CAAC,WAAd,MAAyB,IAAzB,IAAyB,EAAA,KAAA,KAAA,CAAzB,GAAyB,EAAzB,GAA6B,IAA7B;AACD;;AAFD,OAAA,CAAA,cAAA,GAAA,cAAA;AAIa,OAAA,CAAA,qBAAA,GAAgD,CAC3D,gCAD2D,EAE3D,0CAF2D,CAAhD;AAKA,OAAA,CAAA,sBAAA,GAAiD,CAC5D,qCAD4D,EAE5D,sCAF4D,CAAjD;;AAKb,SAAS,mCAAT,CAA6C,WAA7C,EAAuE;AACrE,MAAI,WAAW,KAAK,UAApB,EAAgC;AAC9B,WAAO,OAAA,CAAA,qBAAP;AACD,GAFD,MAEO,IAAI,WAAW,KAAK,WAApB,EAAiC;AACtC,WAAO,OAAA,CAAA,sBAAP;AACD,GAFM,MAEA;AACL,wCAAW,OAAA,CAAA,qBAAX,sBAAqC,OAAA,CAAA,sBAArC;AACD;AACF;;AAED,SAAgB,cAAhB,CACE,MADF,EAEE,SAFF,EAEsB;AAEpB,MAAM,WAAW,GAAG,cAAc,CAAC,MAAD,CAAlC;AAEA,SAAA,SAAA,SAAA,EAAA,EACK,SADL,CAAA,EACc;AACZ,IAAA,gCAAgC,EAAE,mCAAmC,CAAC,WAAD;AADzD,GADd,CAAA;AAID;;AAVD,OAAA,CAAA,cAAA,GAAA,cAAA","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { createInfoPlistPlugin } from '../plugins/ios-plugins';\nimport { InfoPlist, InterfaceOrientation } from './IosConfig.types';\n\nexport const withOrientation = createInfoPlistPlugin(setOrientation, 'withOrientation');\n\nexport function getOrientation(config: Pick<ExpoConfig, 'orientation'>) {\n  return config.orientation ?? null;\n}\n\nexport const PORTRAIT_ORIENTATIONS: InterfaceOrientation[] = [\n  'UIInterfaceOrientationPortrait',\n  'UIInterfaceOrientationPortraitUpsideDown',\n];\n\nexport const LANDSCAPE_ORIENTATIONS: InterfaceOrientation[] = [\n  'UIInterfaceOrientationLandscapeLeft',\n  'UIInterfaceOrientationLandscapeRight',\n];\n\nfunction getUISupportedInterfaceOrientations(orientation: string | null): InterfaceOrientation[] {\n  if (orientation === 'portrait') {\n    return PORTRAIT_ORIENTATIONS;\n  } else if (orientation === 'landscape') {\n    return LANDSCAPE_ORIENTATIONS;\n  } else {\n    return [...PORTRAIT_ORIENTATIONS, ...LANDSCAPE_ORIENTATIONS];\n  }\n}\n\nexport function setOrientation(\n  config: Pick<ExpoConfig, 'orientation'>,\n  infoPlist: InfoPlist\n): InfoPlist {\n  const orientation = getOrientation(config);\n\n  return {\n    ...infoPlist,\n    UISupportedInterfaceOrientations: getUISupportedInterfaceOrientations(orientation),\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}