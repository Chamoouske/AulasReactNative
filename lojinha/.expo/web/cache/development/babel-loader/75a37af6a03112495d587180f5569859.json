{"ast":null,"code":"#!/usr/bin/env node\n'use strict';\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nvar fs = require('fs');\n\nvar _require = require('shelljs'),\n    cat = _require.cat,\n    echo = _require.echo,\n    exec = _require.exec,\n    exit = _require.exit,\n    sed = _require.sed;\n\nvar yargs = require('yargs');\n\nvar argv = yargs.option('r', {\n  alias: 'remote',\n  default: 'origin'\n}).option('n', {\n  alias: 'nightly',\n  type: 'boolean',\n  default: false\n}).argv;\nvar nightlyBuild = argv.nightly;\nvar version, branch;\n\nif (nightlyBuild) {\n  var currentCommit = exec('git rev-parse HEAD', {\n    silent: true\n  }).stdout.trim();\n  version = \"0.0.0-\" + currentCommit.slice(0, 9);\n} else {\n  branch = exec('git symbolic-ref --short HEAD', {\n    silent: true\n  }).stdout.trim();\n\n  if (branch.indexOf('-stable') === -1) {\n    echo('You must be in 0.XX-stable branch to bump a version');\n    exit(1);\n  }\n\n  var versionMajor = branch.slice(0, branch.indexOf('-stable'));\n  version = argv._[0];\n\n  if (!version || version.indexOf(versionMajor) !== 0) {\n    echo(\"You must pass a tag like 0.\" + versionMajor + \".[X]-rc[Y] to bump a version\");\n    exit(1);\n  }\n}\n\nvar match = version.match(/^(\\d+)\\.(\\d+)\\.(\\d+)(?:-(.+))?$/);\n\nif (!match) {\n  echo(\"You must pass a correctly formatted version; couldn't parse \" + version);\n  exit(1);\n}\n\nvar _match = _slicedToArray(match, 5),\n    major = _match[1],\n    minor = _match[2],\n    patch = _match[3],\n    prerelease = _match[4];\n\nfs.writeFileSync('ReactAndroid/src/main/java/com/facebook/react/modules/systeminfo/ReactNativeVersion.java', cat('scripts/versiontemplates/ReactNativeVersion.java.template').replace('${major}', major).replace('${minor}', minor).replace('${patch}', patch).replace('${prerelease}', prerelease !== undefined ? \"\\\"\" + prerelease + \"\\\"\" : 'null'), 'utf-8');\nfs.writeFileSync('React/Base/RCTVersion.m', cat('scripts/versiontemplates/RCTVersion.m.template').replace('${major}', \"@(\" + major + \")\").replace('${minor}', \"@(\" + minor + \")\").replace('${patch}', \"@(\" + patch + \")\").replace('${prerelease}', prerelease !== undefined ? \"@\\\"\" + prerelease + \"\\\"\" : '[NSNull null]'), 'utf-8');\nfs.writeFileSync('ReactCommon/cxxreact/ReactNativeVersion.h', cat('scripts/versiontemplates/ReactNativeVersion.h.template').replace('${major}', major).replace('${minor}', minor).replace('${patch}', patch).replace('${prerelease}', prerelease !== undefined ? \"\\\"\" + prerelease + \"\\\"\" : '\"\"'), 'utf-8');\nfs.writeFileSync('Libraries/Core/ReactNativeVersion.js', cat('scripts/versiontemplates/ReactNativeVersion.js.template').replace('${major}', major).replace('${minor}', minor).replace('${patch}', patch).replace('${prerelease}', prerelease !== undefined ? \"'\" + prerelease + \"'\" : 'null'), 'utf-8');\nvar packageJson = JSON.parse(cat('package.json'));\npackageJson.version = version;\nfs.writeFileSync('package.json', JSON.stringify(packageJson, null, 2), 'utf-8');\n\nif (sed('-i', /^VERSION_NAME=.*/, \"VERSION_NAME=\" + version, 'ReactAndroid/gradle.properties').code) {\n  echo(\"Couldn't update version for Gradle\");\n  exit(1);\n}\n\nexec(\"node scripts/set-rn-template-version.js \" + version);\nvar numberOfChangedLinesWithNewVersion = exec(\"git diff -U0 | grep '^[+]' | grep -c \" + version + \" \", {\n  silent: true\n}).stdout.trim();\n\nif (!nightlyBuild) {\n  if (+numberOfChangedLinesWithNewVersion !== 3) {\n    echo('Failed to update all the files. package.json and gradle.properties must have versions in them');\n    echo('Fix the issue, revert and try again');\n    exec('git diff');\n    exit(1);\n  }\n\n  if (exec(\"git commit -a -m \\\"[\" + version + \"] Bump version numbers\\\"\").code) {\n    echo('failed to commit');\n    exit(1);\n  }\n\n  if (exec(\"git tag v\" + version).code) {\n    echo(\"failed to tag the commit with v\" + version + \", are you sure this release wasn't made earlier?\");\n    echo('You may want to rollback the last commit');\n    echo('git reset --hard HEAD~1');\n    exit(1);\n  }\n\n  var remote = argv.remote;\n  exec(\"git push \" + remote + \" v\" + version);\n\n  if (version.indexOf('rc') === -1) {\n    exec('git tag -d latest');\n    exec(\"git push \" + remote + \" :latest\");\n    exec('git tag latest');\n    exec(\"git push \" + remote + \" latest\");\n  }\n\n  exec(\"git push \" + remote + \" \" + branch + \" --follow-tags\");\n}\n\nexit(0);","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/scripts/bump-oss-version.js"],"names":["fs","require","cat","echo","exec","exit","sed","yargs","argv","option","alias","default","type","nightlyBuild","nightly","version","branch","currentCommit","silent","stdout","trim","slice","indexOf","versionMajor","_","match","major","minor","patch","prerelease","writeFileSync","replace","undefined","packageJson","JSON","parse","stringify","code","numberOfChangedLinesWithNewVersion","remote"],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\n'use strict';\n\n/**\n * This script bumps a new version for open source releases.\n * It updates the version in json/gradle files and makes sure they are consistent between each other\n * After changing the files it makes a commit and tags it.\n * All you have to do is push changes to remote and CI will make a new build.\n */\nconst fs = require('fs');\nconst {cat, echo, exec, exit, sed} = require('shelljs');\nconst yargs = require('yargs');\n\nlet argv = yargs.option('r', {\n  alias: 'remote',\n  default: 'origin',\n})\n.option('n', {\n  alias: 'nightly',\n  type: 'boolean',\n  default: false,\n}).argv;\n\nconst nightlyBuild = argv.nightly;\n\nlet version, branch;\nif (nightlyBuild) {\n  const currentCommit = exec('git rev-parse HEAD', {silent: true}).stdout.trim();\n  version = `0.0.0-${currentCommit.slice(0, 9)}`;\n} else {\n  // Check we are in release branch, e.g. 0.33-stable\n  branch = exec('git symbolic-ref --short HEAD', {\n    silent: true,\n  }).stdout.trim();\n\n  if (branch.indexOf('-stable') === -1) {\n    echo('You must be in 0.XX-stable branch to bump a version');\n    exit(1);\n  }\n\n  // e.g. 0.33\n  let versionMajor = branch.slice(0, branch.indexOf('-stable'));\n\n  // - check that argument version matches branch\n  // e.g. 0.33.1 or 0.33.0-rc4\n  version = argv._[0];\n  if (!version || version.indexOf(versionMajor) !== 0) {\n    echo(\n      `You must pass a tag like 0.${versionMajor}.[X]-rc[Y] to bump a version`,\n    );\n    exit(1);\n  }\n}\n\n// Generate version files to detect mismatches between JS and native.\nlet match = version.match(/^(\\d+)\\.(\\d+)\\.(\\d+)(?:-(.+))?$/);\nif (!match) {\n  echo(\n    `You must pass a correctly formatted version; couldn't parse ${version}`,\n  );\n  exit(1);\n}\nlet [, major, minor, patch, prerelease] = match;\n\nfs.writeFileSync(\n  'ReactAndroid/src/main/java/com/facebook/react/modules/systeminfo/ReactNativeVersion.java',\n  cat('scripts/versiontemplates/ReactNativeVersion.java.template')\n    .replace('${major}', major)\n    .replace('${minor}', minor)\n    .replace('${patch}', patch)\n    .replace(\n      '${prerelease}',\n      prerelease !== undefined ? `\"${prerelease}\"` : 'null',\n    ),\n  'utf-8',\n);\n\nfs.writeFileSync(\n  'React/Base/RCTVersion.m',\n  cat('scripts/versiontemplates/RCTVersion.m.template')\n    .replace('${major}', `@(${major})`)\n    .replace('${minor}', `@(${minor})`)\n    .replace('${patch}', `@(${patch})`)\n    .replace(\n      '${prerelease}',\n      prerelease !== undefined ? `@\"${prerelease}\"` : '[NSNull null]',\n    ),\n  'utf-8',\n);\n\nfs.writeFileSync(\n  'ReactCommon/cxxreact/ReactNativeVersion.h',\n  cat('scripts/versiontemplates/ReactNativeVersion.h.template')\n    .replace('${major}', major)\n    .replace('${minor}', minor)\n    .replace('${patch}', patch)\n    .replace(\n      '${prerelease}',\n      prerelease !== undefined ? `\"${prerelease}\"` : '\"\"',\n    ),\n  'utf-8',\n);\n\nfs.writeFileSync(\n  'Libraries/Core/ReactNativeVersion.js',\n  cat('scripts/versiontemplates/ReactNativeVersion.js.template')\n    .replace('${major}', major)\n    .replace('${minor}', minor)\n    .replace('${patch}', patch)\n    .replace(\n      '${prerelease}',\n      prerelease !== undefined ? `'${prerelease}'` : 'null',\n    ),\n  'utf-8',\n);\n\nlet packageJson = JSON.parse(cat('package.json'));\npackageJson.version = version;\nfs.writeFileSync('package.json', JSON.stringify(packageJson, null, 2), 'utf-8');\n\n// Change ReactAndroid/gradle.properties\nif (\n  sed(\n    '-i',\n    /^VERSION_NAME=.*/,\n    `VERSION_NAME=${version}`,\n    'ReactAndroid/gradle.properties',\n  ).code\n) {\n  echo(\"Couldn't update version for Gradle\");\n  exit(1);\n}\n\n// Change react-native version in the template's package.json\nexec(`node scripts/set-rn-template-version.js ${version}`);\n\n// Verify that files changed, we just do a git diff and check how many times version is added across files\nlet numberOfChangedLinesWithNewVersion = exec(\n  `git diff -U0 | grep '^[+]' | grep -c ${version} `,\n  {silent: true},\n).stdout.trim();\n\n// Release builds should commit the version bumps, and create tags.\n// Nightly builds do not need to do that.\nif (!nightlyBuild) {\n  if (+numberOfChangedLinesWithNewVersion !== 3) {\n    echo(\n      'Failed to update all the files. package.json and gradle.properties must have versions in them',\n    );\n    echo('Fix the issue, revert and try again');\n    exec('git diff');\n    exit(1);\n  }\n\n  // Make commit [0.21.0-rc] Bump version numbers\n  if (exec(`git commit -a -m \"[${version}] Bump version numbers\"`).code) {\n    echo('failed to commit');\n    exit(1);\n  }\n\n  // Add tag v0.21.0-rc\n  if (exec(`git tag v${version}`).code) {\n    echo(\n      `failed to tag the commit with v${version}, are you sure this release wasn't made earlier?`,\n    );\n    echo('You may want to rollback the last commit');\n    echo('git reset --hard HEAD~1');\n    exit(1);\n  }\n\n  // Push newly created tag\n  let remote = argv.remote;\n  exec(`git push ${remote} v${version}`);\n\n  // Tag latest if doing stable release\n  if (version.indexOf('rc') === -1) {\n    exec('git tag -d latest');\n    exec(`git push ${remote} :latest`);\n    exec('git tag latest');\n    exec(`git push ${remote} latest`);\n  }\n\n  exec(`git push ${remote} ${branch} --follow-tags`);\n}\n\nexit(0);\n"]},"metadata":{},"sourceType":"script"}