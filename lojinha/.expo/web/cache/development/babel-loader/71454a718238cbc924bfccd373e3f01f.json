{"ast":null,"code":"'use strict';\n\ndescribe('checkVersion', function () {\n  describe('in development', function () {\n    _setDevelopmentModeForTests(true);\n\n    _defineCheckVersionTests();\n  });\n  describe('in production', function () {\n    _setDevelopmentModeForTests(false);\n\n    _defineCheckVersionTests();\n  });\n});\n\nfunction _setDevelopmentModeForTests(dev) {\n  var originalDev;\n  beforeAll(function () {\n    originalDev = global.__DEV__;\n    global.__DEV__ = dev;\n  });\n  afterAll(function () {\n    global.__DEV__ = originalDev;\n  });\n}\n\nfunction _defineCheckVersionTests() {\n  var consoleError = console.error;\n  var globalConsole = global.console;\n  var spyOnConsoleError;\n  var consoleOutput;\n  beforeEach(function () {\n    consoleOutput = '';\n    console.error = jest.fn();\n    global.console = {\n      error: jest.fn(function (error) {\n        return consoleOutput += error;\n      })\n    };\n    spyOnConsoleError = jest.spyOn(global.console, 'error');\n  });\n  afterEach(function () {\n    jest.resetModules();\n    console.error = consoleError;\n    global.console = globalConsole;\n    spyOnConsoleError.mockReset();\n  });\n  it('passes when all the versions are zero', function () {\n    _mockJsVersion(0, 0, 0);\n\n    _mockNativeVersion(0, 0, 0);\n\n    var ReactNativeVersion = require(\"../ReactNativeVersion\");\n\n    var ReactNativeVersionCheck = require(\"../ReactNativeVersionCheck\");\n\n    expect(ReactNativeVersion).toMatchObject({\n      version: {\n        major: 0,\n        minor: 0,\n        patch: 0,\n        prerelease: null\n      }\n    });\n    expect(function () {\n      return ReactNativeVersionCheck.checkVersions();\n    }).not.toThrow();\n  });\n  it('passes when the minor matches when the major is zero', function () {\n    _mockJsVersion(0, 1, 0);\n\n    _mockNativeVersion(0, 1, 0);\n\n    var ReactNativeVersionCheck = require(\"../ReactNativeVersionCheck\");\n\n    expect(function () {\n      return ReactNativeVersionCheck.checkVersions();\n    }).not.toThrow();\n  });\n  it(\"logs error when the minor doesn't match when the major is zero\", function () {\n    _mockJsVersion(0, 1, 0);\n\n    _mockNativeVersion(0, 2, 0);\n\n    var ReactNativeVersionCheck = require(\"../ReactNativeVersionCheck\");\n\n    ReactNativeVersionCheck.checkVersions();\n    expect(spyOnConsoleError).toHaveBeenCalledTimes(1);\n    expect(consoleOutput).toMatch(/React Native version mismatch/);\n  });\n  it(\"logs error when the major doesn't match\", function () {\n    _mockJsVersion(1, 0, 0);\n\n    _mockNativeVersion(2, 0, 0);\n\n    var ReactNativeVersionCheck = require(\"../ReactNativeVersionCheck\");\n\n    ReactNativeVersionCheck.checkVersions();\n    expect(spyOnConsoleError).toHaveBeenCalledTimes(1);\n    expect(consoleOutput).toMatch(/React Native version mismatch/);\n  });\n  it(\"doesn't log error if the patch doesn't match\", function () {\n    _mockJsVersion(0, 1, 0);\n\n    _mockNativeVersion(0, 1, 2);\n\n    var ReactNativeVersionCheck = require(\"../ReactNativeVersionCheck\");\n\n    ReactNativeVersionCheck.checkVersions();\n    expect(spyOnConsoleError).toHaveBeenCalledTimes(0);\n  });\n  it(\"doesn't log error if the prerelease doesn't match\", function () {\n    _mockJsVersion(0, 1, 0, 'beta.0');\n\n    _mockNativeVersion(0, 1, 0, 'alpha.1');\n\n    var ReactNativeVersionCheck = require(\"../ReactNativeVersionCheck\");\n\n    ReactNativeVersionCheck.checkVersions();\n    expect(spyOnConsoleError).toHaveBeenCalledTimes(0);\n  });\n}\n\nfunction _mockJsVersion() {\n  var major = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var minor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var patch = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var prerelease = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  jest.doMock(\"../ReactNativeVersion\", function () {\n    return {\n      version: {\n        major: major,\n        minor: minor,\n        patch: patch,\n        prerelease: prerelease\n      }\n    };\n  });\n}\n\nfunction _mockNativeVersion() {\n  var major = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var minor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var patch = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var prerelease = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  jest.doMock(\"../../Utilities/NativePlatformConstantsAndroid\", function () {\n    return {\n      getConstants: function getConstants() {\n        return {\n          reactNativeVersion: {\n            major: major,\n            minor: minor,\n            patch: patch,\n            prerelease: prerelease\n          }\n        };\n      }\n    };\n  });\n  jest.doMock(\"../../Utilities/NativePlatformConstantsIOS\", function () {\n    return {\n      getConstants: function getConstants() {\n        return {\n          reactNativeVersion: {\n            major: major,\n            minor: minor,\n            patch: patch,\n            prerelease: prerelease\n          }\n        };\n      }\n    };\n  });\n}","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Core/__tests__/ReactNativeVersionCheck-test.js"],"names":["describe","_setDevelopmentModeForTests","_defineCheckVersionTests","dev","originalDev","beforeAll","global","__DEV__","afterAll","consoleError","console","error","globalConsole","spyOnConsoleError","consoleOutput","beforeEach","jest","fn","spyOn","afterEach","resetModules","mockReset","it","_mockJsVersion","_mockNativeVersion","ReactNativeVersion","require","ReactNativeVersionCheck","expect","toMatchObject","version","major","minor","patch","prerelease","checkVersions","not","toThrow","toHaveBeenCalledTimes","toMatch","doMock","getConstants","reactNativeVersion"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @emails oncall+react_native\n */\n\n'use strict';\n\ndescribe('checkVersion', () => {\n  describe('in development', () => {\n    _setDevelopmentModeForTests(true);\n    _defineCheckVersionTests();\n  });\n\n  describe('in production', () => {\n    _setDevelopmentModeForTests(false);\n    _defineCheckVersionTests();\n  });\n});\n\nfunction _setDevelopmentModeForTests(dev) {\n  let originalDev;\n\n  beforeAll(() => {\n    originalDev = global.__DEV__;\n    global.__DEV__ = dev;\n  });\n\n  afterAll(() => {\n    global.__DEV__ = originalDev;\n  });\n}\n\nfunction _defineCheckVersionTests() {\n  const consoleError = console.error;\n  const globalConsole = global.console;\n\n  let spyOnConsoleError;\n  let consoleOutput;\n\n  beforeEach(() => {\n    consoleOutput = '';\n    console.error = jest.fn();\n    global.console = {error: jest.fn(error => (consoleOutput += error))};\n    spyOnConsoleError = jest.spyOn(global.console, 'error');\n  });\n\n  afterEach(() => {\n    jest.resetModules();\n    console.error = consoleError;\n    global.console = globalConsole;\n    spyOnConsoleError.mockReset();\n  });\n\n  it('passes when all the versions are zero', () => {\n    _mockJsVersion(0, 0, 0);\n    _mockNativeVersion(0, 0, 0);\n\n    const ReactNativeVersion = require('../ReactNativeVersion');\n    const ReactNativeVersionCheck = require('../ReactNativeVersionCheck');\n    expect(ReactNativeVersion).toMatchObject({\n      version: {major: 0, minor: 0, patch: 0, prerelease: null},\n    });\n    expect(() => ReactNativeVersionCheck.checkVersions()).not.toThrow();\n  });\n\n  it('passes when the minor matches when the major is zero', () => {\n    _mockJsVersion(0, 1, 0);\n    _mockNativeVersion(0, 1, 0);\n\n    const ReactNativeVersionCheck = require('../ReactNativeVersionCheck');\n    expect(() => ReactNativeVersionCheck.checkVersions()).not.toThrow();\n  });\n\n  it(\"logs error when the minor doesn't match when the major is zero\", () => {\n    _mockJsVersion(0, 1, 0);\n    _mockNativeVersion(0, 2, 0);\n\n    const ReactNativeVersionCheck = require('../ReactNativeVersionCheck');\n\n    ReactNativeVersionCheck.checkVersions();\n    expect(spyOnConsoleError).toHaveBeenCalledTimes(1);\n    expect(consoleOutput).toMatch(/React Native version mismatch/);\n  });\n\n  it(\"logs error when the major doesn't match\", () => {\n    _mockJsVersion(1, 0, 0);\n    _mockNativeVersion(2, 0, 0);\n\n    const ReactNativeVersionCheck = require('../ReactNativeVersionCheck');\n    ReactNativeVersionCheck.checkVersions();\n    expect(spyOnConsoleError).toHaveBeenCalledTimes(1);\n    expect(consoleOutput).toMatch(/React Native version mismatch/);\n  });\n\n  it(\"doesn't log error if the patch doesn't match\", () => {\n    _mockJsVersion(0, 1, 0);\n    _mockNativeVersion(0, 1, 2);\n\n    const ReactNativeVersionCheck = require('../ReactNativeVersionCheck');\n    ReactNativeVersionCheck.checkVersions();\n    expect(spyOnConsoleError).toHaveBeenCalledTimes(0);\n  });\n\n  it(\"doesn't log error if the prerelease doesn't match\", () => {\n    _mockJsVersion(0, 1, 0, 'beta.0');\n    _mockNativeVersion(0, 1, 0, 'alpha.1');\n\n    const ReactNativeVersionCheck = require('../ReactNativeVersionCheck');\n    ReactNativeVersionCheck.checkVersions();\n    expect(spyOnConsoleError).toHaveBeenCalledTimes(0);\n  });\n}\n\nfunction _mockJsVersion(major = 0, minor = 0, patch = 0, prerelease = null) {\n  jest.doMock('../ReactNativeVersion', () => ({\n    version: {major, minor, patch, prerelease},\n  }));\n}\n\nfunction _mockNativeVersion(\n  major = 0,\n  minor = 0,\n  patch = 0,\n  prerelease = null,\n) {\n  jest.doMock('../../Utilities/NativePlatformConstantsAndroid', () => ({\n    getConstants: () => ({\n      reactNativeVersion: {major, minor, patch, prerelease},\n    }),\n  }));\n  jest.doMock('../../Utilities/NativePlatformConstantsIOS', () => ({\n    getConstants: () => ({\n      reactNativeVersion: {major, minor, patch, prerelease},\n    }),\n  }));\n}\n"]},"metadata":{},"sourceType":"script"}