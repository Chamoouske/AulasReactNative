{"ast":null,"code":"export {};","map":{"version":3,"sources":[],"names":[],"mappings":"","sourceRoot":"","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n/// <reference types=\"node\" />\nimport { Arguments } from 'yargs';\nimport { ReportOptions } from 'istanbul-reports';\nexport declare type Path = string;\nexport declare type Glob = string;\nexport declare type HasteConfig = {\n    computeSha1?: boolean;\n    defaultPlatform?: string | null | undefined;\n    hasteImplModulePath?: string;\n    platforms?: Array<string>;\n    providesModuleNodeModules: Array<string>;\n    throwOnModuleCollision?: boolean;\n};\nexport declare type ReporterConfig = [string, Record<string, unknown>];\nexport declare type TransformerConfig = [string, Record<string, unknown>];\nexport declare type ConfigGlobals = Record<string, any>;\nexport declare type DefaultOptions = {\n    automock: boolean;\n    bail: number;\n    browser: boolean;\n    cache: boolean;\n    cacheDirectory: Path;\n    changedFilesWithAncestor: boolean;\n    clearMocks: boolean;\n    collectCoverage: boolean;\n    collectCoverageFrom: Array<string> | null | undefined;\n    coverageDirectory: string | null | undefined;\n    coveragePathIgnorePatterns: Array<string>;\n    coverageReporters: Array<string>;\n    coverageThreshold: {\n        global: {\n            [key: string]: number;\n        };\n    } | null | undefined;\n    dependencyExtractor: string | null | undefined;\n    errorOnDeprecated: boolean;\n    expand: boolean;\n    filter: Path | null | undefined;\n    forceCoverageMatch: Array<Glob>;\n    globals: ConfigGlobals;\n    globalSetup: string | null | undefined;\n    globalTeardown: string | null | undefined;\n    haste: HasteConfig;\n    maxWorkers: number | string;\n    maxConcurrency: number;\n    moduleDirectories: Array<string>;\n    moduleFileExtensions: Array<string>;\n    moduleNameMapper: {\n        [key: string]: string;\n    };\n    modulePathIgnorePatterns: Array<string>;\n    noStackTrace: boolean;\n    notify: boolean;\n    notifyMode: string;\n    preset: string | null | undefined;\n    prettierPath: string | null | undefined;\n    projects: Array<string | ProjectConfig> | null | undefined;\n    resetMocks: boolean;\n    resetModules: boolean;\n    resolver: Path | null | undefined;\n    restoreMocks: boolean;\n    rootDir: Path | null | undefined;\n    roots: Array<Path> | null | undefined;\n    runner: string;\n    runTestsByPath: boolean;\n    setupFiles: Array<Path>;\n    setupFilesAfterEnv: Array<Path>;\n    skipFilter: boolean;\n    snapshotSerializers: Array<Path>;\n    testEnvironment: string;\n    testEnvironmentOptions: Record<string, any>;\n    testFailureExitCode: string | number;\n    testLocationInResults: boolean;\n    testMatch: Array<Glob>;\n    testPathIgnorePatterns: Array<string>;\n    testRegex: Array<string>;\n    testResultsProcessor: string | null | undefined;\n    testRunner: string | null | undefined;\n    testSequencer: string;\n    testURL: string;\n    timers: 'real' | 'fake';\n    transform: {\n        [regex: string]: Path | TransformerConfig;\n    } | null | undefined;\n    transformIgnorePatterns: Array<Glob>;\n    watchPathIgnorePatterns: Array<string>;\n    useStderr: boolean;\n    verbose: boolean | null | undefined;\n    watch: boolean;\n    watchman: boolean;\n};\nexport declare type DisplayName = string | {\n    name: string;\n    color: DisplayNameColor;\n};\nexport declare type InitialOptions = {\n    automock?: boolean;\n    bail?: boolean | number;\n    browser?: boolean;\n    cache?: boolean;\n    cacheDirectory?: Path;\n    clearMocks?: boolean;\n    changedFilesWithAncestor?: boolean;\n    changedSince?: string;\n    collectCoverage?: boolean;\n    collectCoverageFrom?: Array<Glob>;\n    collectCoverageOnlyFrom?: {\n        [key: string]: boolean;\n    };\n    coverageDirectory?: string;\n    coveragePathIgnorePatterns?: Array<string>;\n    coverageReporters?: Array<string>;\n    coverageThreshold?: {\n        global: {\n            [key: string]: number;\n        };\n    };\n    dependencyExtractor?: string;\n    detectLeaks?: boolean;\n    detectOpenHandles?: boolean;\n    displayName?: DisplayName;\n    expand?: boolean;\n    extraGlobals?: Array<string>;\n    filter?: Path;\n    findRelatedTests?: boolean;\n    forceCoverageMatch?: Array<Glob>;\n    forceExit?: boolean;\n    json?: boolean;\n    globals?: ConfigGlobals;\n    globalSetup?: string | null | undefined;\n    globalTeardown?: string | null | undefined;\n    haste?: HasteConfig;\n    reporters?: Array<string | ReporterConfig>;\n    logHeapUsage?: boolean;\n    lastCommit?: boolean;\n    listTests?: boolean;\n    mapCoverage?: boolean;\n    maxConcurrency?: number;\n    maxWorkers: number | string;\n    moduleDirectories?: Array<string>;\n    moduleFileExtensions?: Array<string>;\n    moduleLoader?: Path;\n    moduleNameMapper?: {\n        [key: string]: string;\n    };\n    modulePathIgnorePatterns?: Array<string>;\n    modulePaths?: Array<string>;\n    name?: string;\n    noStackTrace?: boolean;\n    notify?: boolean;\n    notifyMode?: string;\n    onlyChanged?: boolean;\n    outputFile?: Path;\n    passWithNoTests?: boolean;\n    preprocessorIgnorePatterns?: Array<Glob>;\n    preset?: string | null | undefined;\n    prettierPath?: string | null | undefined;\n    projects?: Array<Glob>;\n    replname?: string | null | undefined;\n    resetMocks?: boolean;\n    resetModules?: boolean;\n    resolver?: Path | null | undefined;\n    restoreMocks?: boolean;\n    rootDir: Path;\n    roots?: Array<Path>;\n    runner?: string;\n    runTestsByPath?: boolean;\n    scriptPreprocessor?: string;\n    setupFiles?: Array<Path>;\n    setupTestFrameworkScriptFile?: Path;\n    setupFilesAfterEnv?: Array<Path>;\n    silent?: boolean;\n    skipFilter?: boolean;\n    skipNodeResolution?: boolean;\n    snapshotResolver?: Path;\n    snapshotSerializers?: Array<Path>;\n    errorOnDeprecated?: boolean;\n    testEnvironment?: string;\n    testEnvironmentOptions?: Record<string, any>;\n    testFailureExitCode?: string | number;\n    testLocationInResults?: boolean;\n    testMatch?: Array<Glob>;\n    testNamePattern?: string;\n    testPathDirs?: Array<Path>;\n    testPathIgnorePatterns?: Array<string>;\n    testRegex?: string | Array<string>;\n    testResultsProcessor?: string | null | undefined;\n    testRunner?: string;\n    testSequencer?: string;\n    testURL?: string;\n    testTimeout?: number;\n    timers?: 'real' | 'fake';\n    transform?: {\n        [regex: string]: Path | TransformerConfig;\n    };\n    transformIgnorePatterns?: Array<Glob>;\n    watchPathIgnorePatterns?: Array<string>;\n    unmockedModulePathPatterns?: Array<string>;\n    updateSnapshot?: boolean;\n    useStderr?: boolean;\n    verbose?: boolean | null | undefined;\n    watch?: boolean;\n    watchAll?: boolean;\n    watchman?: boolean;\n    watchPlugins?: Array<string | [string, Record<string, any>]>;\n};\nexport declare type SnapshotUpdateState = 'all' | 'new' | 'none';\ndeclare type NotifyMode = 'always' | 'failure' | 'success' | 'change' | 'success-change' | 'failure-change';\n/**\n * Hard coding this until\n * https://github.com/chalk/chalk/pull/336\n * gets merged\n */\ndeclare type DisplayNameColor = 'black' | 'red' | 'green' | 'yellow' | 'blue' | 'magenta' | 'cyan' | 'white' | 'gray' | 'grey' | 'blackBright' | 'redBright' | 'greenBright' | 'yellowBright' | 'blueBright' | 'magentaBright' | 'cyanBright' | 'whiteBright' | 'bgBlack' | 'bgRed' | 'bgGreen' | 'bgYellow' | 'bgBlue' | 'bgMagenta' | 'bgCyan' | 'bgWhite' | 'bgBlackBright' | 'bgRedBright' | 'bgGreenBright' | 'bgYellowBright' | 'bgBlueBright' | 'bgMagentaBright' | 'bgCyanBright' | 'bgWhiteBright';\ndeclare type CoverageThreshold = {\n    [path: string]: {\n        [key: string]: number;\n    };\n    global: {\n        [key: string]: number;\n    };\n};\nexport declare type GlobalConfig = {\n    bail: number;\n    changedSince: string;\n    changedFilesWithAncestor: boolean;\n    collectCoverage: boolean;\n    collectCoverageFrom: Array<Glob>;\n    collectCoverageOnlyFrom: {\n        [key: string]: boolean;\n    } | null | undefined;\n    coverageDirectory: string;\n    coveragePathIgnorePatterns?: Array<string>;\n    coverageReporters: Array<keyof ReportOptions>;\n    coverageThreshold: CoverageThreshold;\n    detectLeaks: boolean;\n    detectOpenHandles: boolean;\n    enabledTestsMap: {\n        [key: string]: {\n            [key: string]: boolean;\n        };\n    } | null | undefined;\n    expand: boolean;\n    extraGlobals: Array<string>;\n    filter: Path | null | undefined;\n    findRelatedTests: boolean;\n    forceExit: boolean;\n    json: boolean;\n    globalSetup: string | null | undefined;\n    globalTeardown: string | null | undefined;\n    lastCommit: boolean;\n    logHeapUsage: boolean;\n    listTests: boolean;\n    maxConcurrency: number;\n    maxWorkers: number;\n    noStackTrace: boolean;\n    nonFlagArgs: Array<string>;\n    noSCM: boolean | null | undefined;\n    notify: boolean;\n    notifyMode: NotifyMode;\n    outputFile: Path | null | undefined;\n    onlyChanged: boolean;\n    onlyFailures: boolean;\n    passWithNoTests: boolean;\n    projects: Array<Glob>;\n    replname: string | null | undefined;\n    reporters: Array<string | ReporterConfig>;\n    runTestsByPath: boolean;\n    rootDir: Path;\n    silent: boolean;\n    skipFilter: boolean;\n    errorOnDeprecated: boolean;\n    testFailureExitCode: number;\n    testNamePattern: string;\n    testPathPattern: string;\n    testResultsProcessor: string | null | undefined;\n    testSequencer: string;\n    testTimeout: number;\n    updateSnapshot: SnapshotUpdateState;\n    useStderr: boolean;\n    verbose: boolean | null | undefined;\n    watch: boolean;\n    watchAll: boolean;\n    watchman: boolean;\n    watchPlugins: Array<{\n        path: string;\n        config: Record<string, any>;\n    }> | null | undefined;\n};\nexport declare type ProjectConfig = {\n    automock: boolean;\n    browser: boolean;\n    cache: boolean;\n    cacheDirectory: Path;\n    clearMocks: boolean;\n    coveragePathIgnorePatterns: Array<string>;\n    cwd: Path;\n    dependencyExtractor?: string;\n    detectLeaks: boolean;\n    detectOpenHandles: boolean;\n    displayName?: DisplayName;\n    errorOnDeprecated: boolean;\n    extraGlobals: Array<keyof NodeJS.Global>;\n    filter: Path | null | undefined;\n    forceCoverageMatch: Array<Glob>;\n    globalSetup: string | null | undefined;\n    globalTeardown: string | null | undefined;\n    globals: ConfigGlobals;\n    haste: HasteConfig;\n    moduleDirectories: Array<string>;\n    moduleFileExtensions: Array<string>;\n    moduleLoader: Path;\n    moduleNameMapper: Array<[string, string]>;\n    modulePathIgnorePatterns: Array<string>;\n    modulePaths: Array<string>;\n    name: string;\n    prettierPath: string;\n    resetMocks: boolean;\n    resetModules: boolean;\n    resolver: Path | null | undefined;\n    restoreMocks: boolean;\n    rootDir: Path;\n    roots: Array<Path>;\n    runner: string;\n    setupFiles: Array<Path>;\n    setupFilesAfterEnv: Array<Path>;\n    skipFilter: boolean;\n    skipNodeResolution: boolean;\n    snapshotResolver: Path | null | undefined;\n    snapshotSerializers: Array<Path>;\n    testEnvironment: string;\n    testEnvironmentOptions: Record<string, any>;\n    testMatch: Array<Glob>;\n    testLocationInResults: boolean;\n    testPathIgnorePatterns: Array<string>;\n    testRegex: Array<string>;\n    testRunner: string;\n    testURL: string;\n    timers: 'real' | 'fake';\n    transform: Array<[string, Path, Record<string, unknown>]>;\n    transformIgnorePatterns: Array<Glob>;\n    watchPathIgnorePatterns: Array<string>;\n    unmockedModulePathPatterns: Array<string> | null | undefined;\n};\nexport declare type Argv = Arguments<Partial<{\n    all: boolean;\n    automock: boolean;\n    bail: boolean | number;\n    browser: boolean;\n    cache: boolean;\n    cacheDirectory: string;\n    changedFilesWithAncestor: boolean;\n    changedSince: string;\n    ci: boolean;\n    clearCache: boolean;\n    clearMocks: boolean;\n    collectCoverage: boolean;\n    collectCoverageFrom: string;\n    collectCoverageOnlyFrom: Array<string>;\n    color: boolean;\n    colors: boolean;\n    config: string;\n    coverage: boolean;\n    coverageDirectory: string;\n    coveragePathIgnorePatterns: Array<string>;\n    coverageReporters: Array<string>;\n    coverageThreshold: string;\n    debug: boolean;\n    env: string;\n    expand: boolean;\n    findRelatedTests: boolean;\n    forceExit: boolean;\n    globals: string;\n    globalSetup: string | null | undefined;\n    globalTeardown: string | null | undefined;\n    haste: string;\n    init: boolean;\n    json: boolean;\n    lastCommit: boolean;\n    logHeapUsage: boolean;\n    maxWorkers: number | string;\n    moduleDirectories: Array<string>;\n    moduleFileExtensions: Array<string>;\n    moduleNameMapper: string;\n    modulePathIgnorePatterns: Array<string>;\n    modulePaths: Array<string>;\n    noStackTrace: boolean;\n    notify: boolean;\n    notifyMode: string;\n    onlyChanged: boolean;\n    outputFile: string;\n    preset: string | null | undefined;\n    projects: Array<string>;\n    prettierPath: string | null | undefined;\n    resetMocks: boolean;\n    resetModules: boolean;\n    resolver: string | null | undefined;\n    restoreMocks: boolean;\n    rootDir: string;\n    roots: Array<string>;\n    runInBand: boolean;\n    setupFiles: Array<string>;\n    setupFilesAfterEnv: Array<string>;\n    showConfig: boolean;\n    silent: boolean;\n    snapshotSerializers: Array<string>;\n    testEnvironment: string;\n    testFailureExitCode: string | null | undefined;\n    testMatch: Array<string>;\n    testNamePattern: string;\n    testPathIgnorePatterns: Array<string>;\n    testPathPattern: Array<string>;\n    testRegex: string | Array<string>;\n    testResultsProcessor: string | null | undefined;\n    testRunner: string;\n    testSequencer: string;\n    testURL: string;\n    testTimeout: number | null | undefined;\n    timers: string;\n    transform: string;\n    transformIgnorePatterns: Array<string>;\n    unmockedModulePathPatterns: Array<string> | null | undefined;\n    updateSnapshot: boolean;\n    useStderr: boolean;\n    verbose: boolean | null | undefined;\n    version: boolean;\n    watch: boolean;\n    watchAll: boolean;\n    watchman: boolean;\n    watchPathIgnorePatterns: Array<string>;\n}>>;\nexport {};\n//# sourceMappingURL=Config.d.ts.map"]},"metadata":{},"sourceType":"module"}