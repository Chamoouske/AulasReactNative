{"ast":null,"code":"'use strict';\n\ndescribe('Dimensions', function () {\n  var Dimensions = require(\"../Dimensions\");\n\n  var Platform = require(\"../Platform\");\n\n  it('should set window dimensions', function () {\n    Dimensions.set({\n      windowPhysicalPixels: {\n        width: 400,\n        height: 800,\n        scale: 2,\n        fontScale: 3\n      }\n    });\n    expect(Dimensions.get('window').width).toEqual(200);\n    expect(Dimensions.get('window').height).toEqual(400);\n    expect(Dimensions.get('window').scale).toEqual(2);\n    expect(Dimensions.get('window').fontScale).toEqual(3);\n  });\n  it('should set screen dimensions on Android', function () {\n    Platform.OS = 'android';\n    var dimensions = {\n      width: 400,\n      height: 800,\n      scale: 2,\n      fontScale: 3\n    };\n    Dimensions.set({\n      windowPhysicalPixels: dimensions,\n      screenPhysicalPixels: dimensions\n    });\n    expect(Dimensions.get('screen').width).toEqual(200);\n    expect(Dimensions.get('screen').height).toEqual(400);\n    expect(Dimensions.get('screen').scale).toEqual(2);\n    expect(Dimensions.get('screen').fontScale).toEqual(3);\n  });\n  it('should set screen dimensions on iOS', function () {\n    Platform.OS = 'ios';\n    var dimensions = {\n      width: 400,\n      height: 800,\n      scale: 2,\n      fontScale: 3\n    };\n    Dimensions.set({\n      windowPhysicalPixels: dimensions\n    });\n    expect(Dimensions.get('screen')).toEqual(Dimensions.get('window'));\n  });\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Utilities/__tests__/Dimensions-test.js"],"names":["describe","Dimensions","require","Platform","it","set","windowPhysicalPixels","width","height","scale","fontScale","expect","get","toEqual","OS","dimensions","screenPhysicalPixels"],"mappings":"AAUA;;AAEAA,QAAQ,CAAC,YAAD,EAAe,YAAM;AAC3B,MAAMC,UAAU,GAAGC,OAAO,iBAA1B;;AACA,MAAMC,QAAQ,GAAGD,OAAO,eAAxB;;AAEAE,EAAAA,EAAE,CAAC,8BAAD,EAAiC,YAAM;AACvCH,IAAAA,UAAU,CAACI,GAAX,CAAe;AACbC,MAAAA,oBAAoB,EAAE;AACpBC,QAAAA,KAAK,EAAE,GADa;AAEpBC,QAAAA,MAAM,EAAE,GAFY;AAGpBC,QAAAA,KAAK,EAAE,CAHa;AAIpBC,QAAAA,SAAS,EAAE;AAJS;AADT,KAAf;AASAC,IAAAA,MAAM,CAACV,UAAU,CAACW,GAAX,CAAe,QAAf,EAAyBL,KAA1B,CAAN,CAAuCM,OAAvC,CAA+C,GAA/C;AACAF,IAAAA,MAAM,CAACV,UAAU,CAACW,GAAX,CAAe,QAAf,EAAyBJ,MAA1B,CAAN,CAAwCK,OAAxC,CAAgD,GAAhD;AACAF,IAAAA,MAAM,CAACV,UAAU,CAACW,GAAX,CAAe,QAAf,EAAyBH,KAA1B,CAAN,CAAuCI,OAAvC,CAA+C,CAA/C;AACAF,IAAAA,MAAM,CAACV,UAAU,CAACW,GAAX,CAAe,QAAf,EAAyBF,SAA1B,CAAN,CAA2CG,OAA3C,CAAmD,CAAnD;AACD,GAdC,CAAF;AAgBAT,EAAAA,EAAE,CAAC,yCAAD,EAA4C,YAAM;AAClDD,IAAAA,QAAQ,CAACW,EAAT,GAAc,SAAd;AACA,QAAMC,UAAU,GAAG;AACjBR,MAAAA,KAAK,EAAE,GADU;AAEjBC,MAAAA,MAAM,EAAE,GAFS;AAGjBC,MAAAA,KAAK,EAAE,CAHU;AAIjBC,MAAAA,SAAS,EAAE;AAJM,KAAnB;AAMAT,IAAAA,UAAU,CAACI,GAAX,CAAe;AACbC,MAAAA,oBAAoB,EAAES,UADT;AAEbC,MAAAA,oBAAoB,EAAED;AAFT,KAAf;AAKAJ,IAAAA,MAAM,CAACV,UAAU,CAACW,GAAX,CAAe,QAAf,EAAyBL,KAA1B,CAAN,CAAuCM,OAAvC,CAA+C,GAA/C;AACAF,IAAAA,MAAM,CAACV,UAAU,CAACW,GAAX,CAAe,QAAf,EAAyBJ,MAA1B,CAAN,CAAwCK,OAAxC,CAAgD,GAAhD;AACAF,IAAAA,MAAM,CAACV,UAAU,CAACW,GAAX,CAAe,QAAf,EAAyBH,KAA1B,CAAN,CAAuCI,OAAvC,CAA+C,CAA/C;AACAF,IAAAA,MAAM,CAACV,UAAU,CAACW,GAAX,CAAe,QAAf,EAAyBF,SAA1B,CAAN,CAA2CG,OAA3C,CAAmD,CAAnD;AACD,GAjBC,CAAF;AAmBAT,EAAAA,EAAE,CAAC,qCAAD,EAAwC,YAAM;AAC9CD,IAAAA,QAAQ,CAACW,EAAT,GAAc,KAAd;AACA,QAAMC,UAAU,GAAG;AACjBR,MAAAA,KAAK,EAAE,GADU;AAEjBC,MAAAA,MAAM,EAAE,GAFS;AAGjBC,MAAAA,KAAK,EAAE,CAHU;AAIjBC,MAAAA,SAAS,EAAE;AAJM,KAAnB;AAMAT,IAAAA,UAAU,CAACI,GAAX,CAAe;AACbC,MAAAA,oBAAoB,EAAES;AADT,KAAf;AAIAJ,IAAAA,MAAM,CAACV,UAAU,CAACW,GAAX,CAAe,QAAf,CAAD,CAAN,CAAiCC,OAAjC,CAAyCZ,UAAU,CAACW,GAAX,CAAe,QAAf,CAAzC;AACD,GAbC,CAAF;AAcD,CArDO,CAAR","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @emails oncall+react_native\n */\n\n'use strict';\n\ndescribe('Dimensions', () => {\n  const Dimensions = require('../Dimensions');\n  const Platform = require('../Platform');\n\n  it('should set window dimensions', () => {\n    Dimensions.set({\n      windowPhysicalPixels: {\n        width: 400,\n        height: 800,\n        scale: 2,\n        fontScale: 3,\n      },\n    });\n\n    expect(Dimensions.get('window').width).toEqual(200);\n    expect(Dimensions.get('window').height).toEqual(400);\n    expect(Dimensions.get('window').scale).toEqual(2);\n    expect(Dimensions.get('window').fontScale).toEqual(3);\n  });\n\n  it('should set screen dimensions on Android', () => {\n    Platform.OS = 'android';\n    const dimensions = {\n      width: 400,\n      height: 800,\n      scale: 2,\n      fontScale: 3,\n    };\n    Dimensions.set({\n      windowPhysicalPixels: dimensions,\n      screenPhysicalPixels: dimensions,\n    });\n\n    expect(Dimensions.get('screen').width).toEqual(200);\n    expect(Dimensions.get('screen').height).toEqual(400);\n    expect(Dimensions.get('screen').scale).toEqual(2);\n    expect(Dimensions.get('screen').fontScale).toEqual(3);\n  });\n\n  it('should set screen dimensions on iOS', () => {\n    Platform.OS = 'ios';\n    const dimensions = {\n      width: 400,\n      height: 800,\n      scale: 2,\n      fontScale: 3,\n    };\n    Dimensions.set({\n      windowPhysicalPixels: dimensions,\n    });\n\n    expect(Dimensions.get('screen')).toEqual(Dimensions.get('window'));\n  });\n});\n"]},"metadata":{},"sourceType":"script"}