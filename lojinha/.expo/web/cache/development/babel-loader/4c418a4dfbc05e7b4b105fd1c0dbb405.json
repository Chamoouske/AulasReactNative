{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Errors_1 = require(\"../Errors\");\n\nfunction getExtensions(platforms, extensions, workflows) {\n  Errors_1.assert(Array.isArray(platforms), 'Expected: `platforms: string[]`');\n  Errors_1.assert(Array.isArray(extensions), 'Expected: `extensions: string[]`');\n  Errors_1.assert(Array.isArray(workflows), 'Expected: `workflows: string[]`');\n  var fileExtensions = [];\n\n  for (var _i = 0, _arr = [].concat(_toConsumableArray(workflows), ['']); _i < _arr.length; _i++) {\n    var workflow = _arr[_i];\n\n    for (var _i2 = 0, _arr2 = [].concat(_toConsumableArray(platforms), ['']); _i2 < _arr2.length; _i2++) {\n      var platform = _arr2[_i2];\n\n      for (var _iterator = _createForOfIteratorHelperLoose(extensions), _step; !(_step = _iterator()).done;) {\n        var extension = _step.value;\n        fileExtensions.push([platform, workflow, extension].filter(Boolean).join('.'));\n      }\n    }\n  }\n\n  return fileExtensions;\n}\n\nexports.getExtensions = getExtensions;\n\nfunction getLanguageExtensionsInOrder(_ref) {\n  var isTS = _ref.isTS,\n      isModern = _ref.isModern,\n      isReact = _ref.isReact;\n\n  var addLanguage = function addLanguage(lang) {\n    return [lang, isReact && lang + \"x\"].filter(Boolean);\n  };\n\n  var extensions = addLanguage('js');\n\n  if (isModern) {\n    extensions.unshift('mjs');\n  }\n\n  if (isTS) {\n    extensions = [].concat(_toConsumableArray(addLanguage('ts')), _toConsumableArray(extensions));\n  }\n\n  return extensions;\n}\n\nexports.getLanguageExtensionsInOrder = getLanguageExtensionsInOrder;\n\nfunction getManagedExtensions(platforms) {\n  var languageOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    isTS: true,\n    isModern: true,\n    isReact: true\n  };\n  var fileExtensions = getExtensions(platforms, getLanguageExtensionsInOrder(languageOptions), ['expo']);\n\n  _addMiscellaneousExtensions(platforms, fileExtensions);\n\n  return fileExtensions;\n}\n\nexports.getManagedExtensions = getManagedExtensions;\n\nfunction getBareExtensions(platforms) {\n  var languageOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    isTS: true,\n    isModern: true,\n    isReact: true\n  };\n  var fileExtensions = getExtensions(platforms, getLanguageExtensionsInOrder(languageOptions), []);\n\n  _addMiscellaneousExtensions(platforms, fileExtensions);\n\n  return fileExtensions;\n}\n\nexports.getBareExtensions = getBareExtensions;\n\nfunction _addMiscellaneousExtensions(platforms, fileExtensions) {\n  fileExtensions.push('json');\n\n  if (platforms.includes('web')) {\n    fileExtensions.push('wasm');\n  }\n\n  return fileExtensions;\n}","map":{"version":3,"sources":["../../src/paths/extensions.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,IAAA,QAAA,GAAA,OAAA,aAAA;;AAQA,SAAgB,aAAhB,CACE,SADF,EAEE,UAFF,EAGE,SAHF,EAGqB;AAGnB,EAAA,QAAA,CAAA,MAAA,CAAO,KAAK,CAAC,OAAN,CAAc,SAAd,CAAP,EAAiC,iCAAjC;AACA,EAAA,QAAA,CAAA,MAAA,CAAO,KAAK,CAAC,OAAN,CAAc,UAAd,CAAP,EAAkC,kCAAlC;AACA,EAAA,QAAA,CAAA,MAAA,CAAO,KAAK,CAAC,OAAN,CAAc,SAAd,CAAP,EAAiC,iCAAjC;AAEA,MAAM,cAAc,GAAG,EAAvB;;AAEA,uDAA2B,SAA3B,IAAsC,EAAtC,4BAA2C;AAAtC,QAAM,QAAQ,WAAd;;AAEH,2DAA2B,SAA3B,IAAsC,EAAtC,+BAA2C;AAAtC,UAAM,QAAQ,aAAd;;AAEH,2DAAwB,UAAxB,wCAAoC;AAAA,YAAzB,SAAyB;AAClC,QAAA,cAAc,CAAC,IAAf,CAAoB,CAAC,QAAD,EAAW,QAAX,EAAqB,SAArB,EAAgC,MAAhC,CAAuC,OAAvC,EAAgD,IAAhD,CAAqD,GAArD,CAApB;AACD;AACF;AACF;;AACD,SAAO,cAAP;AACD;;AAtBD,OAAA,CAAA,aAAA,GAAA,aAAA;;AAwBA,SAAgB,4BAAhB,OAIkB;AAAA,MAHhB,IAGgB,QAHhB,IAGgB;AAAA,MAFhB,QAEgB,QAFhB,QAEgB;AAAA,MADhB,OACgB,QADhB,OACgB;;AAEhB,MAAM,WAAW,GAAG,SAAd,WAAc,CAAC,IAAD;AAAA,WAA4B,CAAC,IAAD,EAAO,OAAO,IAAO,IAAP,MAAd,EAA8B,MAA9B,CAAqC,OAArC,CAA5B;AAAA,GAApB;;AAGA,MAAI,UAAU,GAAG,WAAW,CAAC,IAAD,CAA5B;;AAEA,MAAI,QAAJ,EAAc;AACZ,IAAA,UAAU,CAAC,OAAX,CAAmB,KAAnB;AACD;;AACD,MAAI,IAAJ,EAAU;AACR,IAAA,UAAU,gCAAO,WAAW,CAAC,IAAD,CAAlB,sBAA6B,UAA7B,EAAV;AACD;;AAED,SAAO,UAAP;AACD;;AAnBD,OAAA,CAAA,4BAAA,GAAA,4BAAA;;AAqBA,SAAgB,oBAAhB,CACE,SADF,EAEkF;AAAA,MAAhF,eAAgF,uEAA7C;AAAE,IAAA,IAAI,EAAE,IAAR;AAAc,IAAA,QAAQ,EAAE,IAAxB;AAA8B,IAAA,OAAO,EAAE;AAAvC,GAA6C;AAEhF,MAAM,cAAc,GAAG,aAAa,CAAC,SAAD,EAAY,4BAA4B,CAAC,eAAD,CAAxC,EAA2D,CAC7F,MAD6F,CAA3D,CAApC;;AAIA,EAAA,2BAA2B,CAAC,SAAD,EAAY,cAAZ,CAA3B;;AACA,SAAO,cAAP;AACD;;AAVD,OAAA,CAAA,oBAAA,GAAA,oBAAA;;AAYA,SAAgB,iBAAhB,CACE,SADF,EAEkF;AAAA,MAAhF,eAAgF,uEAA7C;AAAE,IAAA,IAAI,EAAE,IAAR;AAAc,IAAA,QAAQ,EAAE,IAAxB;AAA8B,IAAA,OAAO,EAAE;AAAvC,GAA6C;AAEhF,MAAM,cAAc,GAAG,aAAa,CAClC,SADkC,EAElC,4BAA4B,CAAC,eAAD,CAFM,EAGlC,EAHkC,CAApC;;AAMA,EAAA,2BAA2B,CAAC,SAAD,EAAY,cAAZ,CAA3B;;AACA,SAAO,cAAP;AACD;;AAZD,OAAA,CAAA,iBAAA,GAAA,iBAAA;;AAcA,SAAS,2BAAT,CAAqC,SAArC,EAA0D,cAA1D,EAAkF;AAGhF,EAAA,cAAc,CAAC,IAAf,CAAoB,MAApB;;AAEA,MAAI,SAAS,CAAC,QAAV,CAAmB,KAAnB,CAAJ,EAA+B;AAC7B,IAAA,cAAc,CAAC,IAAf,CAAoB,MAApB;AACD;;AACD,SAAO,cAAP;AACD","sourcesContent":["import { assert } from '../Errors';\n\nexport type LanguageOptions = {\n  isTS: boolean;\n  isModern: boolean;\n  isReact: boolean;\n};\n\nexport function getExtensions(\n  platforms: string[],\n  extensions: string[],\n  workflows: string[]\n): string[] {\n  // In the past we used spread operators to collect the values so now we enforce type safety on them.\n  assert(Array.isArray(platforms), 'Expected: `platforms: string[]`');\n  assert(Array.isArray(extensions), 'Expected: `extensions: string[]`');\n  assert(Array.isArray(workflows), 'Expected: `workflows: string[]`');\n\n  const fileExtensions = [];\n  // support .expo files\n  for (const workflow of [...workflows, '']) {\n    // Ensure order is correct: [platformA.js, platformB.js, js]\n    for (const platform of [...platforms, '']) {\n      // Support both TypeScript and JavaScript\n      for (const extension of extensions) {\n        fileExtensions.push([platform, workflow, extension].filter(Boolean).join('.'));\n      }\n    }\n  }\n  return fileExtensions;\n}\n\nexport function getLanguageExtensionsInOrder({\n  isTS,\n  isModern,\n  isReact,\n}: LanguageOptions): string[] {\n  // @ts-ignore: filter removes false type\n  const addLanguage = (lang: string): string[] => [lang, isReact && `${lang}x`].filter(Boolean);\n\n  // Support JavaScript\n  let extensions = addLanguage('js');\n\n  if (isModern) {\n    extensions.unshift('mjs');\n  }\n  if (isTS) {\n    extensions = [...addLanguage('ts'), ...extensions];\n  }\n\n  return extensions;\n}\n\nexport function getManagedExtensions(\n  platforms: string[],\n  languageOptions: LanguageOptions = { isTS: true, isModern: true, isReact: true }\n): string[] {\n  const fileExtensions = getExtensions(platforms, getLanguageExtensionsInOrder(languageOptions), [\n    'expo',\n  ]);\n  // Always add these last\n  _addMiscellaneousExtensions(platforms, fileExtensions);\n  return fileExtensions;\n}\n\nexport function getBareExtensions(\n  platforms: string[],\n  languageOptions: LanguageOptions = { isTS: true, isModern: true, isReact: true }\n): string[] {\n  const fileExtensions = getExtensions(\n    platforms,\n    getLanguageExtensionsInOrder(languageOptions),\n    []\n  );\n  // Always add these last\n  _addMiscellaneousExtensions(platforms, fileExtensions);\n  return fileExtensions;\n}\n\nfunction _addMiscellaneousExtensions(platforms: string[], fileExtensions: string[]): string[] {\n  // Always add these with no platform extension\n  // In the future we may want to add platform and workspace extensions to json.\n  fileExtensions.push('json');\n  // Native doesn't currently support web assembly.\n  if (platforms.includes('web')) {\n    fileExtensions.push('wasm');\n  }\n  return fileExtensions;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}