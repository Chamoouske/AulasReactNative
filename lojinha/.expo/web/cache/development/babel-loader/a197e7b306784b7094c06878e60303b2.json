{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Components/MaskedView/MaskedViewIOS.ios.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar React = require('react');\n\nvar StyleSheet = require(\"../../StyleSheet/StyleSheet\");\n\nvar View = require(\"../View/View\");\n\nimport RCTMaskedViewNativeComponent from \"./RCTMaskedViewNativeComponent\";\n\nvar MaskedViewIOS = function (_React$Component) {\n  _inherits(MaskedViewIOS, _React$Component);\n\n  var _super = _createSuper(MaskedViewIOS);\n\n  function MaskedViewIOS() {\n    var _this;\n\n    _classCallCheck(this, MaskedViewIOS);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this._hasWarnedInvalidRenderMask = false;\n    return _this;\n  }\n\n  _createClass(MaskedViewIOS, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          maskElement = _this$props.maskElement,\n          children = _this$props.children,\n          otherViewProps = _objectWithoutProperties(_this$props, [\"maskElement\", \"children\"]);\n\n      if (!React.isValidElement(maskElement)) {\n        if (!this._hasWarnedInvalidRenderMask) {\n          console.warn('MaskedView: Invalid `maskElement` prop was passed to MaskedView. ' + 'Expected a React Element. No mask will render.');\n          this._hasWarnedInvalidRenderMask = true;\n        }\n\n        return React.createElement(View, _extends({}, otherViewProps, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 14\n          }\n        }), children);\n      }\n\n      return React.createElement(RCTMaskedViewNativeComponent, _extends({}, otherViewProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 7\n        }\n      }), React.createElement(View, {\n        pointerEvents: \"none\",\n        style: StyleSheet.absoluteFill,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 9\n        }\n      }, maskElement), children);\n    }\n  }]);\n\n  return MaskedViewIOS;\n}(React.Component);\n\nmodule.exports = MaskedViewIOS;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Components/MaskedView/MaskedViewIOS.ios.js"],"names":["React","require","StyleSheet","View","RCTMaskedViewNativeComponent","MaskedViewIOS","_hasWarnedInvalidRenderMask","props","maskElement","children","otherViewProps","isValidElement","console","warn","absoluteFill","Component","module","exports"],"mappings":";;;;;;;;;;;;;AAUA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMC,UAAU,GAAGD,OAAO,+BAA1B;;AACA,IAAME,IAAI,GAAGF,OAAO,gBAApB;;AAGA,OAAOG,4BAAP;;IAiDMC,a;;;;;;;;;;;;;;;UACJC,2B,GAA8B,K;;;;;;WAE9B,kBAAqB;AAAA,wBACgC,KAAKC,KADrC;AAAA,UACZC,WADY,eACZA,WADY;AAAA,UACCC,QADD,eACCA,QADD;AAAA,UACcC,cADd;;AAGnB,UAAI,CAACV,KAAK,CAACW,cAAN,CAAqBH,WAArB,CAAL,EAAwC;AACtC,YAAI,CAAC,KAAKF,2BAAV,EAAuC;AACrCM,UAAAA,OAAO,CAACC,IAAR,CACE,sEACE,gDAFJ;AAIA,eAAKP,2BAAL,GAAmC,IAAnC;AACD;;AACD,eAAO,oBAAC,IAAD,eAAUI,cAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAA2BD,QAA3B,CAAP;AACD;;AAED,aACE,oBAAC,4BAAD,eAAkCC,cAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UACE,oBAAC,IAAD;AAAM,QAAA,aAAa,EAAC,MAApB;AAA2B,QAAA,KAAK,EAAER,UAAU,CAACY,YAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGN,WADH,CADF,EAIGC,QAJH,CADF;AAQD;;;;EAzByBT,KAAK,CAACe,S;;AA4BlCC,MAAM,CAACC,OAAP,GAAiBZ,aAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nconst React = require('react');\nconst StyleSheet = require('../../StyleSheet/StyleSheet');\nconst View = require('../View/View');\n\nimport type {ViewProps} from '../View/ViewPropTypes';\nimport RCTMaskedViewNativeComponent from './RCTMaskedViewNativeComponent';\n\ntype Props = $ReadOnly<{|\n  ...ViewProps,\n\n  children: React.Node,\n  /**\n   * Should be a React element to be rendered and applied as the\n   * mask for the child element.\n   */\n  maskElement: React.Element<any>,\n|}>;\n\n/**\n * Renders the child view with a mask specified in the `maskElement` prop.\n *\n * ```\n * import React from 'react';\n * import { MaskedViewIOS, Text, View } from 'react-native';\n *\n * class MyMaskedView extends React.Component {\n *   render() {\n *     return (\n *       <MaskedViewIOS\n *         style={{ flex: 1 }}\n *         maskElement={\n *           <View style={styles.maskContainerStyle}>\n *             <Text style={styles.maskTextStyle}>\n *               Basic Mask\n *             </Text>\n *           </View>\n *         }\n *       >\n *         <View style={{ flex: 1, backgroundColor: 'blue' }} />\n *       </MaskedViewIOS>\n *     );\n *   }\n * }\n * ```\n *\n * The above example will render a view with a blue background that fills its\n * parent, and then mask that view with text that says \"Basic Mask\".\n *\n * The alpha channel of the view rendered by the `maskElement` prop determines how\n * much of the view's content and background shows through. Fully or partially\n * opaque pixels allow the underlying content to show through but fully\n * transparent pixels block that content.\n *\n */\nclass MaskedViewIOS extends React.Component<Props> {\n  _hasWarnedInvalidRenderMask = false;\n\n  render(): React.Node {\n    const {maskElement, children, ...otherViewProps} = this.props;\n\n    if (!React.isValidElement(maskElement)) {\n      if (!this._hasWarnedInvalidRenderMask) {\n        console.warn(\n          'MaskedView: Invalid `maskElement` prop was passed to MaskedView. ' +\n            'Expected a React Element. No mask will render.',\n        );\n        this._hasWarnedInvalidRenderMask = true;\n      }\n      return <View {...otherViewProps}>{children}</View>;\n    }\n\n    return (\n      <RCTMaskedViewNativeComponent {...otherViewProps}>\n        <View pointerEvents=\"none\" style={StyleSheet.absoluteFill}>\n          {maskElement}\n        </View>\n        {children}\n      </RCTMaskedViewNativeComponent>\n    );\n  }\n}\n\nmodule.exports = MaskedViewIOS;\n"]},"metadata":{},"sourceType":"module"}