{"ast":null,"code":"'use strict';\n\nvar AnimatedInterpolation = require(\"../nodes/AnimatedInterpolation\");\n\nvar Easing = require(\"../Easing\");\n\ndescribe('Interpolation', function () {\n  it('should work with defaults', function () {\n    var interpolation = AnimatedInterpolation.__createInterpolation({\n      inputRange: [0, 1],\n      outputRange: [0, 1]\n    });\n\n    expect(interpolation(0)).toBe(0);\n    expect(interpolation(0.5)).toBe(0.5);\n    expect(interpolation(0.8)).toBe(0.8);\n    expect(interpolation(1)).toBe(1);\n  });\n  it('should work with output range', function () {\n    var interpolation = AnimatedInterpolation.__createInterpolation({\n      inputRange: [0, 1],\n      outputRange: [100, 200]\n    });\n\n    expect(interpolation(0)).toBe(100);\n    expect(interpolation(0.5)).toBe(150);\n    expect(interpolation(0.8)).toBe(180);\n    expect(interpolation(1)).toBe(200);\n  });\n  it('should work with input range', function () {\n    var interpolation = AnimatedInterpolation.__createInterpolation({\n      inputRange: [100, 200],\n      outputRange: [0, 1]\n    });\n\n    expect(interpolation(100)).toBe(0);\n    expect(interpolation(150)).toBe(0.5);\n    expect(interpolation(180)).toBe(0.8);\n    expect(interpolation(200)).toBe(1);\n  });\n  it('should throw for non monotonic input ranges', function () {\n    expect(function () {\n      return AnimatedInterpolation.__createInterpolation({\n        inputRange: [0, 2, 1],\n        outputRange: [0, 1, 2]\n      });\n    }).toThrow();\n    expect(function () {\n      return AnimatedInterpolation.__createInterpolation({\n        inputRange: [0, 1, 2],\n        outputRange: [0, 3, 1]\n      });\n    }).not.toThrow();\n  });\n  it('should work with empty input range', function () {\n    var interpolation = AnimatedInterpolation.__createInterpolation({\n      inputRange: [0, 10, 10],\n      outputRange: [1, 2, 3],\n      extrapolate: 'extend'\n    });\n\n    expect(interpolation(0)).toBe(1);\n    expect(interpolation(5)).toBe(1.5);\n    expect(interpolation(10)).toBe(2);\n    expect(interpolation(10.1)).toBe(3);\n    expect(interpolation(15)).toBe(3);\n  });\n  it('should work with empty output range', function () {\n    var interpolation = AnimatedInterpolation.__createInterpolation({\n      inputRange: [1, 2, 3],\n      outputRange: [0, 10, 10],\n      extrapolate: 'extend'\n    });\n\n    expect(interpolation(0)).toBe(-10);\n    expect(interpolation(1.5)).toBe(5);\n    expect(interpolation(2)).toBe(10);\n    expect(interpolation(2.5)).toBe(10);\n    expect(interpolation(3)).toBe(10);\n    expect(interpolation(4)).toBe(10);\n  });\n  it('should work with easing', function () {\n    var interpolation = AnimatedInterpolation.__createInterpolation({\n      inputRange: [0, 1],\n      outputRange: [0, 1],\n      easing: Easing.quad\n    });\n\n    expect(interpolation(0)).toBe(0);\n    expect(interpolation(0.5)).toBe(0.25);\n    expect(interpolation(0.9)).toBe(0.81);\n    expect(interpolation(1)).toBe(1);\n  });\n  it('should work with extrapolate', function () {\n    var interpolation = AnimatedInterpolation.__createInterpolation({\n      inputRange: [0, 1],\n      outputRange: [0, 1],\n      extrapolate: 'extend',\n      easing: Easing.quad\n    });\n\n    expect(interpolation(-2)).toBe(4);\n    expect(interpolation(2)).toBe(4);\n    interpolation = AnimatedInterpolation.__createInterpolation({\n      inputRange: [0, 1],\n      outputRange: [0, 1],\n      extrapolate: 'clamp',\n      easing: Easing.quad\n    });\n    expect(interpolation(-2)).toBe(0);\n    expect(interpolation(2)).toBe(1);\n    interpolation = AnimatedInterpolation.__createInterpolation({\n      inputRange: [0, 1],\n      outputRange: [0, 1],\n      extrapolate: 'identity',\n      easing: Easing.quad\n    });\n    expect(interpolation(-2)).toBe(-2);\n    expect(interpolation(2)).toBe(2);\n  });\n  it('should work with keyframes with extrapolate', function () {\n    var interpolation = AnimatedInterpolation.__createInterpolation({\n      inputRange: [0, 10, 100, 1000],\n      outputRange: [0, 5, 50, 500],\n      extrapolate: true\n    });\n\n    expect(interpolation(-5)).toBe(-2.5);\n    expect(interpolation(0)).toBe(0);\n    expect(interpolation(5)).toBe(2.5);\n    expect(interpolation(10)).toBe(5);\n    expect(interpolation(50)).toBe(25);\n    expect(interpolation(100)).toBe(50);\n    expect(interpolation(500)).toBe(250);\n    expect(interpolation(1000)).toBe(500);\n    expect(interpolation(2000)).toBe(1000);\n  });\n  it('should work with keyframes without extrapolate', function () {\n    var interpolation = AnimatedInterpolation.__createInterpolation({\n      inputRange: [0, 1, 2],\n      outputRange: [0.2, 1, 0.2],\n      extrapolate: 'clamp'\n    });\n\n    expect(interpolation(5)).toBeCloseTo(0.2);\n  });\n  it('should throw for an infinite input range', function () {\n    expect(function () {\n      return AnimatedInterpolation.__createInterpolation({\n        inputRange: [-Infinity, Infinity],\n        outputRange: [0, 1]\n      });\n    }).toThrow();\n    expect(function () {\n      return AnimatedInterpolation.__createInterpolation({\n        inputRange: [-Infinity, 0, Infinity],\n        outputRange: [1, 2, 3]\n      });\n    }).not.toThrow();\n  });\n  it('should work with negative infinite', function () {\n    var interpolation = AnimatedInterpolation.__createInterpolation({\n      inputRange: [-Infinity, 0],\n      outputRange: [-Infinity, 0],\n      easing: Easing.quad,\n      extrapolate: 'identity'\n    });\n\n    expect(interpolation(-Infinity)).toBe(-Infinity);\n    expect(interpolation(-100)).toBeCloseTo(-10000);\n    expect(interpolation(-10)).toBeCloseTo(-100);\n    expect(interpolation(0)).toBeCloseTo(0);\n    expect(interpolation(1)).toBeCloseTo(1);\n    expect(interpolation(100)).toBeCloseTo(100);\n  });\n  it('should work with positive infinite', function () {\n    var interpolation = AnimatedInterpolation.__createInterpolation({\n      inputRange: [5, Infinity],\n      outputRange: [5, Infinity],\n      easing: Easing.quad,\n      extrapolate: 'identity'\n    });\n\n    expect(interpolation(-100)).toBeCloseTo(-100);\n    expect(interpolation(-10)).toBeCloseTo(-10);\n    expect(interpolation(0)).toBeCloseTo(0);\n    expect(interpolation(5)).toBeCloseTo(5);\n    expect(interpolation(6)).toBeCloseTo(5 + 1);\n    expect(interpolation(10)).toBeCloseTo(5 + 25);\n    expect(interpolation(100)).toBeCloseTo(5 + 95 * 95);\n    expect(interpolation(Infinity)).toBe(Infinity);\n  });\n  it('should work with output ranges as string', function () {\n    var interpolation = AnimatedInterpolation.__createInterpolation({\n      inputRange: [0, 1],\n      outputRange: ['rgba(0, 100, 200, 0)', 'rgba(50, 150, 250, 0.4)']\n    });\n\n    expect(interpolation(0)).toBe('rgba(0, 100, 200, 0)');\n    expect(interpolation(0.5)).toBe('rgba(25, 125, 225, 0.2)');\n    expect(interpolation(1)).toBe('rgba(50, 150, 250, 0.4)');\n  });\n  it('should work with output ranges as short hex string', function () {\n    var interpolation = AnimatedInterpolation.__createInterpolation({\n      inputRange: [0, 1],\n      outputRange: ['#024', '#9BF']\n    });\n\n    expect(interpolation(0)).toBe('rgba(0, 34, 68, 1)');\n    expect(interpolation(0.5)).toBe('rgba(77, 111, 162, 1)');\n    expect(interpolation(1)).toBe('rgba(153, 187, 255, 1)');\n  });\n  it('should work with output ranges as long hex string', function () {\n    var interpolation = AnimatedInterpolation.__createInterpolation({\n      inputRange: [0, 1],\n      outputRange: ['#FF9500', '#87FC70']\n    });\n\n    expect(interpolation(0)).toBe('rgba(255, 149, 0, 1)');\n    expect(interpolation(0.5)).toBe('rgba(195, 201, 56, 1)');\n    expect(interpolation(1)).toBe('rgba(135, 252, 112, 1)');\n  });\n  it('should work with output ranges with mixed hex and rgba strings', function () {\n    var interpolation = AnimatedInterpolation.__createInterpolation({\n      inputRange: [0, 1],\n      outputRange: ['rgba(100, 120, 140, .4)', '#87FC70']\n    });\n\n    expect(interpolation(0)).toBe('rgba(100, 120, 140, 0.4)');\n    expect(interpolation(0.5)).toBe('rgba(118, 186, 126, 0.7)');\n    expect(interpolation(1)).toBe('rgba(135, 252, 112, 1)');\n  });\n  it('should work with negative and decimal values in string ranges', function () {\n    var interpolation = AnimatedInterpolation.__createInterpolation({\n      inputRange: [0, 1],\n      outputRange: ['-100.5deg', '100deg']\n    });\n\n    expect(interpolation(0)).toBe('-100.5deg');\n    expect(interpolation(0.5)).toBe('-0.25deg');\n    expect(interpolation(1)).toBe('100deg');\n  });\n  it('should crash when chaining an interpolation that returns a string', function () {\n    var interpolation = AnimatedInterpolation.__createInterpolation({\n      inputRange: [0, 1],\n      outputRange: [0, 1]\n    });\n\n    expect(function () {\n      interpolation('45rad');\n    }).toThrow();\n  });\n  it('should support a mix of color patterns', function () {\n    var interpolation = AnimatedInterpolation.__createInterpolation({\n      inputRange: [0, 1, 2],\n      outputRange: ['rgba(0, 100, 200, 0)', 'rgb(50, 150, 250)', 'red']\n    });\n\n    expect(interpolation(0)).toBe('rgba(0, 100, 200, 0)');\n    expect(interpolation(0.5)).toBe('rgba(25, 125, 225, 0.5)');\n    expect(interpolation(1.5)).toBe('rgba(153, 75, 125, 1)');\n    expect(interpolation(2)).toBe('rgba(255, 0, 0, 1)');\n  });\n  it('should crash when defining output range with different pattern', function () {\n    expect(function () {\n      return AnimatedInterpolation.__createInterpolation({\n        inputRange: [0, 1],\n        outputRange: ['20deg', '30rad']\n      });\n    }).toThrow();\n  });\n  it('should round the alpha channel of a color to the nearest thousandth', function () {\n    var interpolation = AnimatedInterpolation.__createInterpolation({\n      inputRange: [0, 1],\n      outputRange: ['rgba(0, 0, 0, 0)', 'rgba(0, 0, 0, 1)']\n    });\n\n    expect(interpolation(1e-12)).toBe('rgba(0, 0, 0, 0)');\n    expect(interpolation(2 / 3)).toBe('rgba(0, 0, 0, 0.667)');\n  });\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Animated/src/__tests__/Interpolation-test.js"],"names":["AnimatedInterpolation","require","Easing","describe","it","interpolation","__createInterpolation","inputRange","outputRange","expect","toBe","toThrow","not","extrapolate","easing","quad","toBeCloseTo","Infinity"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @emails oncall+react_native\n */\n\n'use strict';\n\nconst AnimatedInterpolation = require('../nodes/AnimatedInterpolation');\nconst Easing = require('../Easing');\n\ndescribe('Interpolation', () => {\n  it('should work with defaults', () => {\n    const interpolation = AnimatedInterpolation.__createInterpolation({\n      inputRange: [0, 1],\n      outputRange: [0, 1],\n    });\n\n    expect(interpolation(0)).toBe(0);\n    expect(interpolation(0.5)).toBe(0.5);\n    expect(interpolation(0.8)).toBe(0.8);\n    expect(interpolation(1)).toBe(1);\n  });\n\n  it('should work with output range', () => {\n    const interpolation = AnimatedInterpolation.__createInterpolation({\n      inputRange: [0, 1],\n      outputRange: [100, 200],\n    });\n\n    expect(interpolation(0)).toBe(100);\n    expect(interpolation(0.5)).toBe(150);\n    expect(interpolation(0.8)).toBe(180);\n    expect(interpolation(1)).toBe(200);\n  });\n\n  it('should work with input range', () => {\n    const interpolation = AnimatedInterpolation.__createInterpolation({\n      inputRange: [100, 200],\n      outputRange: [0, 1],\n    });\n\n    expect(interpolation(100)).toBe(0);\n    expect(interpolation(150)).toBe(0.5);\n    expect(interpolation(180)).toBe(0.8);\n    expect(interpolation(200)).toBe(1);\n  });\n\n  it('should throw for non monotonic input ranges', () => {\n    expect(() =>\n      AnimatedInterpolation.__createInterpolation({\n        inputRange: [0, 2, 1],\n        outputRange: [0, 1, 2],\n      }),\n    ).toThrow();\n\n    expect(() =>\n      AnimatedInterpolation.__createInterpolation({\n        inputRange: [0, 1, 2],\n        outputRange: [0, 3, 1],\n      }),\n    ).not.toThrow();\n  });\n\n  it('should work with empty input range', () => {\n    const interpolation = AnimatedInterpolation.__createInterpolation({\n      inputRange: [0, 10, 10],\n      outputRange: [1, 2, 3],\n      extrapolate: 'extend',\n    });\n\n    expect(interpolation(0)).toBe(1);\n    expect(interpolation(5)).toBe(1.5);\n    expect(interpolation(10)).toBe(2);\n    expect(interpolation(10.1)).toBe(3);\n    expect(interpolation(15)).toBe(3);\n  });\n\n  it('should work with empty output range', () => {\n    const interpolation = AnimatedInterpolation.__createInterpolation({\n      inputRange: [1, 2, 3],\n      outputRange: [0, 10, 10],\n      extrapolate: 'extend',\n    });\n\n    expect(interpolation(0)).toBe(-10);\n    expect(interpolation(1.5)).toBe(5);\n    expect(interpolation(2)).toBe(10);\n    expect(interpolation(2.5)).toBe(10);\n    expect(interpolation(3)).toBe(10);\n    expect(interpolation(4)).toBe(10);\n  });\n\n  it('should work with easing', () => {\n    const interpolation = AnimatedInterpolation.__createInterpolation({\n      inputRange: [0, 1],\n      outputRange: [0, 1],\n      easing: Easing.quad,\n    });\n\n    expect(interpolation(0)).toBe(0);\n    expect(interpolation(0.5)).toBe(0.25);\n    expect(interpolation(0.9)).toBe(0.81);\n    expect(interpolation(1)).toBe(1);\n  });\n\n  it('should work with extrapolate', () => {\n    let interpolation = AnimatedInterpolation.__createInterpolation({\n      inputRange: [0, 1],\n      outputRange: [0, 1],\n      extrapolate: 'extend',\n      easing: Easing.quad,\n    });\n\n    expect(interpolation(-2)).toBe(4);\n    expect(interpolation(2)).toBe(4);\n\n    interpolation = AnimatedInterpolation.__createInterpolation({\n      inputRange: [0, 1],\n      outputRange: [0, 1],\n      extrapolate: 'clamp',\n      easing: Easing.quad,\n    });\n\n    expect(interpolation(-2)).toBe(0);\n    expect(interpolation(2)).toBe(1);\n\n    interpolation = AnimatedInterpolation.__createInterpolation({\n      inputRange: [0, 1],\n      outputRange: [0, 1],\n      extrapolate: 'identity',\n      easing: Easing.quad,\n    });\n\n    expect(interpolation(-2)).toBe(-2);\n    expect(interpolation(2)).toBe(2);\n  });\n\n  it('should work with keyframes with extrapolate', () => {\n    const interpolation = AnimatedInterpolation.__createInterpolation({\n      inputRange: [0, 10, 100, 1000],\n      outputRange: [0, 5, 50, 500],\n      extrapolate: true,\n    });\n\n    expect(interpolation(-5)).toBe(-2.5);\n    expect(interpolation(0)).toBe(0);\n    expect(interpolation(5)).toBe(2.5);\n    expect(interpolation(10)).toBe(5);\n    expect(interpolation(50)).toBe(25);\n    expect(interpolation(100)).toBe(50);\n    expect(interpolation(500)).toBe(250);\n    expect(interpolation(1000)).toBe(500);\n    expect(interpolation(2000)).toBe(1000);\n  });\n\n  it('should work with keyframes without extrapolate', () => {\n    const interpolation = AnimatedInterpolation.__createInterpolation({\n      inputRange: [0, 1, 2],\n      outputRange: [0.2, 1, 0.2],\n      extrapolate: 'clamp',\n    });\n\n    expect(interpolation(5)).toBeCloseTo(0.2);\n  });\n\n  it('should throw for an infinite input range', () => {\n    expect(() =>\n      AnimatedInterpolation.__createInterpolation({\n        inputRange: [-Infinity, Infinity],\n        outputRange: [0, 1],\n      }),\n    ).toThrow();\n\n    expect(() =>\n      AnimatedInterpolation.__createInterpolation({\n        inputRange: [-Infinity, 0, Infinity],\n        outputRange: [1, 2, 3],\n      }),\n    ).not.toThrow();\n  });\n\n  it('should work with negative infinite', () => {\n    const interpolation = AnimatedInterpolation.__createInterpolation({\n      inputRange: [-Infinity, 0],\n      outputRange: [-Infinity, 0],\n      easing: Easing.quad,\n      extrapolate: 'identity',\n    });\n\n    expect(interpolation(-Infinity)).toBe(-Infinity);\n    expect(interpolation(-100)).toBeCloseTo(-10000);\n    expect(interpolation(-10)).toBeCloseTo(-100);\n    expect(interpolation(0)).toBeCloseTo(0);\n    expect(interpolation(1)).toBeCloseTo(1);\n    expect(interpolation(100)).toBeCloseTo(100);\n  });\n\n  it('should work with positive infinite', () => {\n    const interpolation = AnimatedInterpolation.__createInterpolation({\n      inputRange: [5, Infinity],\n      outputRange: [5, Infinity],\n      easing: Easing.quad,\n      extrapolate: 'identity',\n    });\n\n    expect(interpolation(-100)).toBeCloseTo(-100);\n    expect(interpolation(-10)).toBeCloseTo(-10);\n    expect(interpolation(0)).toBeCloseTo(0);\n    expect(interpolation(5)).toBeCloseTo(5);\n    expect(interpolation(6)).toBeCloseTo(5 + 1);\n    expect(interpolation(10)).toBeCloseTo(5 + 25);\n    expect(interpolation(100)).toBeCloseTo(5 + 95 * 95);\n    expect(interpolation(Infinity)).toBe(Infinity);\n  });\n\n  it('should work with output ranges as string', () => {\n    const interpolation = AnimatedInterpolation.__createInterpolation({\n      inputRange: [0, 1],\n      outputRange: ['rgba(0, 100, 200, 0)', 'rgba(50, 150, 250, 0.4)'],\n    });\n\n    expect(interpolation(0)).toBe('rgba(0, 100, 200, 0)');\n    expect(interpolation(0.5)).toBe('rgba(25, 125, 225, 0.2)');\n    expect(interpolation(1)).toBe('rgba(50, 150, 250, 0.4)');\n  });\n\n  it('should work with output ranges as short hex string', () => {\n    const interpolation = AnimatedInterpolation.__createInterpolation({\n      inputRange: [0, 1],\n      outputRange: ['#024', '#9BF'],\n    });\n\n    expect(interpolation(0)).toBe('rgba(0, 34, 68, 1)');\n    expect(interpolation(0.5)).toBe('rgba(77, 111, 162, 1)');\n    expect(interpolation(1)).toBe('rgba(153, 187, 255, 1)');\n  });\n\n  it('should work with output ranges as long hex string', () => {\n    const interpolation = AnimatedInterpolation.__createInterpolation({\n      inputRange: [0, 1],\n      outputRange: ['#FF9500', '#87FC70'],\n    });\n\n    expect(interpolation(0)).toBe('rgba(255, 149, 0, 1)');\n    expect(interpolation(0.5)).toBe('rgba(195, 201, 56, 1)');\n    expect(interpolation(1)).toBe('rgba(135, 252, 112, 1)');\n  });\n\n  it('should work with output ranges with mixed hex and rgba strings', () => {\n    const interpolation = AnimatedInterpolation.__createInterpolation({\n      inputRange: [0, 1],\n      outputRange: ['rgba(100, 120, 140, .4)', '#87FC70'],\n    });\n\n    expect(interpolation(0)).toBe('rgba(100, 120, 140, 0.4)');\n    expect(interpolation(0.5)).toBe('rgba(118, 186, 126, 0.7)');\n    expect(interpolation(1)).toBe('rgba(135, 252, 112, 1)');\n  });\n\n  it('should work with negative and decimal values in string ranges', () => {\n    const interpolation = AnimatedInterpolation.__createInterpolation({\n      inputRange: [0, 1],\n      outputRange: ['-100.5deg', '100deg'],\n    });\n\n    expect(interpolation(0)).toBe('-100.5deg');\n    expect(interpolation(0.5)).toBe('-0.25deg');\n    expect(interpolation(1)).toBe('100deg');\n  });\n\n  it('should crash when chaining an interpolation that returns a string', () => {\n    const interpolation = AnimatedInterpolation.__createInterpolation({\n      inputRange: [0, 1],\n      outputRange: [0, 1],\n    });\n    expect(() => {\n      interpolation('45rad');\n    }).toThrow();\n  });\n\n  it('should support a mix of color patterns', () => {\n    const interpolation = AnimatedInterpolation.__createInterpolation({\n      inputRange: [0, 1, 2],\n      outputRange: ['rgba(0, 100, 200, 0)', 'rgb(50, 150, 250)', 'red'],\n    });\n\n    expect(interpolation(0)).toBe('rgba(0, 100, 200, 0)');\n    expect(interpolation(0.5)).toBe('rgba(25, 125, 225, 0.5)');\n    expect(interpolation(1.5)).toBe('rgba(153, 75, 125, 1)');\n    expect(interpolation(2)).toBe('rgba(255, 0, 0, 1)');\n  });\n\n  it('should crash when defining output range with different pattern', () => {\n    expect(() =>\n      AnimatedInterpolation.__createInterpolation({\n        inputRange: [0, 1],\n        outputRange: ['20deg', '30rad'],\n      }),\n    ).toThrow();\n  });\n\n  it('should round the alpha channel of a color to the nearest thousandth', () => {\n    const interpolation = AnimatedInterpolation.__createInterpolation({\n      inputRange: [0, 1],\n      outputRange: ['rgba(0, 0, 0, 0)', 'rgba(0, 0, 0, 1)'],\n    });\n\n    expect(interpolation(1e-12)).toBe('rgba(0, 0, 0, 0)');\n    expect(interpolation(2 / 3)).toBe('rgba(0, 0, 0, 0.667)');\n  });\n});\n"]},"metadata":{},"sourceType":"script"}