{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _envinfo() {\n  var data = _interopRequireDefault(require(\"envinfo\"));\n\n  _envinfo = function _envinfo() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _os() {\n  var data = require(\"os\");\n\n  _os = function _os() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getEnvironmentInfo() {\n  var json,\n      options,\n      packages,\n      outOfTreePlatforms,\n      outOfTreePlatformPackage,\n      info,\n      _args = arguments;\n  return _regeneratorRuntime.async(function getEnvironmentInfo$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          json = _args.length > 0 && _args[0] !== undefined ? _args[0] : true;\n          options = {\n            json: json,\n            showNotFound: true\n          };\n          packages = ['react', 'react-native', '@react-native-community/cli'];\n          outOfTreePlatforms = {\n            darwin: 'react-native-macos',\n            win32: 'react-native-windows'\n          };\n          outOfTreePlatformPackage = outOfTreePlatforms[(0, _os().platform)()];\n\n          if (outOfTreePlatformPackage) {\n            packages.push(outOfTreePlatformPackage);\n          }\n\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(_envinfo().default.run({\n            System: ['OS', 'CPU', 'Memory', 'Shell'],\n            Binaries: ['Node', 'Yarn', 'npm', 'Watchman'],\n            IDEs: ['Xcode', 'Android Studio', 'Visual Studio'],\n            Managers: ['CocoaPods'],\n            Languages: ['Java', 'Python'],\n            SDKs: ['iOS SDK', 'Android SDK', 'Windows SDK'],\n            npmPackages: packages,\n            npmGlobalPackages: ['*react-native*']\n          }, options));\n\n        case 8:\n          info = _context.sent;\n\n          if (!options.json) {\n            _context.next = 11;\n            break;\n          }\n\n          return _context.abrupt(\"return\", JSON.parse(info));\n\n        case 11:\n          return _context.abrupt(\"return\", info.trim());\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nvar _default = getEnvironmentInfo;\nexports.default = _default;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli/build/tools/envinfo.js"],"names":["Object","defineProperty","exports","value","default","_envinfo","data","_interopRequireDefault","require","_os","obj","__esModule","getEnvironmentInfo","json","options","showNotFound","packages","outOfTreePlatforms","darwin","win32","outOfTreePlatformPackage","platform","push","run","System","Binaries","IDEs","Managers","Languages","SDKs","npmPackages","npmGlobalPackages","info","JSON","parse","trim","_default"],"mappings":"AAAA;;;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,SAASC,QAAT,GAAoB;AAClB,MAAMC,IAAI,GAAGC,sBAAsB,CAACC,OAAO,CAAC,SAAD,CAAR,CAAnC;;AAEAH,EAAAA,QAAQ,GAAG,oBAAY;AACrB,WAAOC,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,SAASG,GAAT,GAAe;AACb,MAAMH,IAAI,GAAGE,OAAO,CAAC,IAAD,CAApB;;AAEAC,EAAAA,GAAG,GAAG,eAAY;AAChB,WAAOH,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,SAASC,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEN,IAAAA,OAAO,EAAEM;AAAX,GAArC;AAAwD;;AAG/F,SAAeE,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkCC,UAAAA,IAAlC,2DAAyC,IAAzC;AACQC,UAAAA,OADR,GACkB;AACdD,YAAAA,IAAI,EAAJA,IADc;AAEdE,YAAAA,YAAY,EAAE;AAFA,WADlB;AAKMC,UAAAA,QALN,GAKiB,CAAC,OAAD,EAAU,cAAV,EAA0B,6BAA1B,CALjB;AAMQC,UAAAA,kBANR,GAM6B;AACzBC,YAAAA,MAAM,EAAE,oBADiB;AAEzBC,YAAAA,KAAK,EAAE;AAFkB,WAN7B;AAUQC,UAAAA,wBAVR,GAUmCH,kBAAkB,CAAC,CAAC,GAAGR,GAAG,GAAGY,QAAV,GAAD,CAVrD;;AAYE,cAAID,wBAAJ,EAA8B;AAC5BJ,YAAAA,QAAQ,CAACM,IAAT,CAAcF,wBAAd;AACD;;AAdH;AAAA,2CAgBqBf,QAAQ,GAAGD,OAAX,CAAmBmB,GAAnB,CAAuB;AACxCC,YAAAA,MAAM,EAAE,CAAC,IAAD,EAAO,KAAP,EAAc,QAAd,EAAwB,OAAxB,CADgC;AAExCC,YAAAA,QAAQ,EAAE,CAAC,MAAD,EAAS,MAAT,EAAiB,KAAjB,EAAwB,UAAxB,CAF8B;AAGxCC,YAAAA,IAAI,EAAE,CAAC,OAAD,EAAU,gBAAV,EAA4B,eAA5B,CAHkC;AAIxCC,YAAAA,QAAQ,EAAE,CAAC,WAAD,CAJ8B;AAKxCC,YAAAA,SAAS,EAAE,CAAC,MAAD,EAAS,QAAT,CAL6B;AAMxCC,YAAAA,IAAI,EAAE,CAAC,SAAD,EAAY,aAAZ,EAA2B,aAA3B,CANkC;AAOxCC,YAAAA,WAAW,EAAEd,QAP2B;AAQxCe,YAAAA,iBAAiB,EAAE,CAAC,gBAAD;AARqB,WAAvB,EAShBjB,OATgB,CAhBrB;;AAAA;AAgBQkB,UAAAA,IAhBR;;AAAA,eA2BMlB,OAAO,CAACD,IA3Bd;AAAA;AAAA;AAAA;;AAAA,2CA4BWoB,IAAI,CAACC,KAAL,CAAWF,IAAX,CA5BX;;AAAA;AAAA,2CA+BSA,IAAI,CAACG,IAAL,EA/BT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkCA,IAAIC,QAAQ,GAAGxB,kBAAf;AACAV,OAAO,CAACE,OAAR,GAAkBgC,QAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _envinfo() {\n  const data = _interopRequireDefault(require(\"envinfo\"));\n\n  _envinfo = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _os() {\n  const data = require(\"os\");\n\n  _os = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// @ts-ignore\nasync function getEnvironmentInfo(json = true) {\n  const options = {\n    json,\n    showNotFound: true\n  };\n  let packages = ['react', 'react-native', '@react-native-community/cli'];\n  const outOfTreePlatforms = {\n    darwin: 'react-native-macos',\n    win32: 'react-native-windows'\n  };\n  const outOfTreePlatformPackage = outOfTreePlatforms[(0, _os().platform)()];\n\n  if (outOfTreePlatformPackage) {\n    packages.push(outOfTreePlatformPackage);\n  }\n\n  const info = await _envinfo().default.run({\n    System: ['OS', 'CPU', 'Memory', 'Shell'],\n    Binaries: ['Node', 'Yarn', 'npm', 'Watchman'],\n    IDEs: ['Xcode', 'Android Studio', 'Visual Studio'],\n    Managers: ['CocoaPods'],\n    Languages: ['Java', 'Python'],\n    SDKs: ['iOS SDK', 'Android SDK', 'Windows SDK'],\n    npmPackages: packages,\n    npmGlobalPackages: ['*react-native*']\n  }, options);\n\n  if (options.json) {\n    return JSON.parse(info);\n  }\n\n  return info.trim();\n}\n\nvar _default = getEnvironmentInfo;\nexports.default = _default;\n\n//# sourceMappingURL=envinfo.js.map"]},"metadata":{},"sourceType":"script"}