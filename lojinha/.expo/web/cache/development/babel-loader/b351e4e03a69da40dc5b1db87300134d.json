{"ast":null,"code":"'use strict';\n\nimport _extends from \"@babel/runtime/helpers/extends\";\n\nvar _this = this,\n    _jsxFileName = \"/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Animated/src/__tests__/AnimatedNative-test.js\";\n\njest.clearAllMocks().mock('../../../BatchedBridge/NativeModules', function () {\n  return {\n    NativeAnimatedModule: {},\n    PlatformConstants: {\n      getConstants: function getConstants() {\n        return {};\n      }\n    }\n  };\n}).mock('../NativeAnimatedModule').mock('../../../EventEmitter/NativeEventEmitter').setMock('../../../Renderer/shims/ReactNative', {\n  findNodeHandle: function findNodeHandle() {\n    return 1;\n  }\n});\nimport TestRenderer from 'react-test-renderer';\nimport * as React from 'react';\n\nvar Animated = require(\"../Animated\");\n\nvar NativeAnimatedHelper = require(\"../NativeAnimatedHelper\");\n\ndescribe('Native Animated', function () {\n  var NativeAnimatedModule = require(\"../NativeAnimatedModule\").default;\n\n  beforeEach(function () {\n    _extends(NativeAnimatedModule, {\n      addAnimatedEventToView: jest.fn(),\n      connectAnimatedNodes: jest.fn(),\n      connectAnimatedNodeToView: jest.fn(),\n      createAnimatedNode: jest.fn(),\n      disconnectAnimatedNodeFromView: jest.fn(),\n      disconnectAnimatedNodes: jest.fn(),\n      dropAnimatedNode: jest.fn(),\n      extractAnimatedNodeOffset: jest.fn(),\n      flattenAnimatedNodeOffset: jest.fn(),\n      removeAnimatedEventFromView: jest.fn(),\n      restoreDefaultValues: jest.fn(),\n      setAnimatedNodeOffset: jest.fn(),\n      setAnimatedNodeValue: jest.fn(),\n      startAnimatingNode: jest.fn(),\n      startListeningToAnimatedNodeValue: jest.fn(),\n      stopAnimation: jest.fn(),\n      stopListeningToAnimatedNodeValue: jest.fn()\n    });\n  });\n  describe('Animated Value', function () {\n    it('proxies `setValue` correctly', function () {\n      var opacity = new Animated.Value(0);\n      var ref = React.createRef(null);\n      Animated.timing(opacity, {\n        toValue: 10,\n        duration: 1000,\n        useNativeDriver: true\n      }).start();\n      TestRenderer.create(React.createElement(Animated.View, {\n        ref: ref,\n        style: {\n          opacity: opacity\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 27\n        }\n      }));\n      expect(ref.current).not.toBeNull();\n      jest.spyOn(ref.current, 'setNativeProps');\n      opacity.setValue(0.5);\n      expect(NativeAnimatedModule.setAnimatedNodeValue).toBeCalledWith(expect.any(Number), 0.5);\n      expect(ref.current.setNativeProps).not.toHaveBeenCalled();\n    });\n    it('should set offset', function () {\n      var opacity = new Animated.Value(0);\n      opacity.setOffset(10);\n\n      opacity.__makeNative();\n\n      TestRenderer.create(React.createElement(Animated.View, {\n        style: {\n          opacity: opacity\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 27\n        }\n      }));\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(expect.any(Number), {\n        type: 'value',\n        value: 0,\n        offset: 10\n      });\n      opacity.setOffset(20);\n      expect(NativeAnimatedModule.setAnimatedNodeOffset).toBeCalledWith(expect.any(Number), 20);\n    });\n    it('should flatten offset', function () {\n      var opacity = new Animated.Value(0);\n\n      opacity.__makeNative();\n\n      TestRenderer.create(React.createElement(Animated.View, {\n        style: {\n          opacity: opacity\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 27\n        }\n      }));\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(expect.any(Number), {\n        type: 'value',\n        value: 0,\n        offset: 0\n      });\n      opacity.flattenOffset();\n      expect(NativeAnimatedModule.flattenAnimatedNodeOffset).toBeCalledWith(expect.any(Number));\n    });\n    it('should extract offset', function () {\n      var opacity = new Animated.Value(0);\n\n      opacity.__makeNative();\n\n      TestRenderer.create(React.createElement(Animated.View, {\n        style: {\n          opacity: opacity\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 27\n        }\n      }));\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(expect.any(Number), {\n        type: 'value',\n        value: 0,\n        offset: 0\n      });\n      opacity.extractOffset();\n      expect(NativeAnimatedModule.extractAnimatedNodeOffset).toBeCalledWith(expect.any(Number));\n    });\n  });\n  describe('Animated Listeners', function () {\n    it('should get updates', function () {\n      var value1 = new Animated.Value(0);\n\n      value1.__makeNative();\n\n      var listener = jest.fn();\n      var id = value1.addListener(listener);\n      expect(NativeAnimatedModule.startListeningToAnimatedNodeValue).toHaveBeenCalledWith(value1.__getNativeTag());\n      NativeAnimatedHelper.nativeEventEmitter.emit('onAnimatedValueUpdate', {\n        value: 42,\n        tag: value1.__getNativeTag()\n      });\n      expect(listener).toHaveBeenCalledTimes(1);\n      expect(listener).toBeCalledWith({\n        value: 42\n      });\n      expect(value1.__getValue()).toBe(42);\n      NativeAnimatedHelper.nativeEventEmitter.emit('onAnimatedValueUpdate', {\n        value: 7,\n        tag: value1.__getNativeTag()\n      });\n      expect(listener).toHaveBeenCalledTimes(2);\n      expect(listener).toBeCalledWith({\n        value: 7\n      });\n      expect(value1.__getValue()).toBe(7);\n      value1.removeListener(id);\n      expect(NativeAnimatedModule.stopListeningToAnimatedNodeValue).toHaveBeenCalledWith(value1.__getNativeTag());\n      NativeAnimatedHelper.nativeEventEmitter.emit('onAnimatedValueUpdate', {\n        value: 1492,\n        tag: value1.__getNativeTag()\n      });\n      expect(listener).toHaveBeenCalledTimes(2);\n      expect(value1.__getValue()).toBe(7);\n    });\n    it('should removeAll', function () {\n      var value1 = new Animated.Value(0);\n\n      value1.__makeNative();\n\n      var listener = jest.fn();\n      [1, 2, 3, 4].forEach(function () {\n        return value1.addListener(listener);\n      });\n      expect(NativeAnimatedModule.startListeningToAnimatedNodeValue).toHaveBeenCalledWith(value1.__getNativeTag());\n      NativeAnimatedHelper.nativeEventEmitter.emit('onAnimatedValueUpdate', {\n        value: 42,\n        tag: value1.__getNativeTag()\n      });\n      expect(listener).toHaveBeenCalledTimes(4);\n      expect(listener).toBeCalledWith({\n        value: 42\n      });\n      value1.removeAllListeners();\n      expect(NativeAnimatedModule.stopListeningToAnimatedNodeValue).toHaveBeenCalledWith(value1.__getNativeTag());\n      NativeAnimatedHelper.nativeEventEmitter.emit('onAnimatedValueUpdate', {\n        value: 7,\n        tag: value1.__getNativeTag()\n      });\n      expect(listener).toHaveBeenCalledTimes(4);\n    });\n  });\n  describe('Animated Events', function () {\n    it('should map events', function () {\n      var value = new Animated.Value(0);\n\n      value.__makeNative();\n\n      var event = Animated.event([{\n        nativeEvent: {\n          state: {\n            foo: value\n          }\n        }\n      }], {\n        useNativeDriver: true\n      });\n      var root = TestRenderer.create(React.createElement(Animated.View, {\n        onTouchMove: event,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 40\n        }\n      }));\n      expect(NativeAnimatedModule.addAnimatedEventToView).toBeCalledWith(expect.any(Number), 'onTouchMove', {\n        nativeEventPath: ['state', 'foo'],\n        animatedValueTag: value.__getNativeTag()\n      });\n      expect(NativeAnimatedModule.removeAnimatedEventFromView).not.toHaveBeenCalled();\n      root.unmount();\n      expect(NativeAnimatedModule.removeAnimatedEventFromView).toBeCalledWith(expect.any(Number), 'onTouchMove', value.__getNativeTag());\n    });\n    it('should throw on invalid event path', function () {\n      var value = new Animated.Value(0);\n\n      value.__makeNative();\n\n      var event = Animated.event([{\n        notNativeEvent: {\n          foo: value\n        }\n      }], {\n        useNativeDriver: true\n      });\n      jest.spyOn(console, 'error').mockImplementationOnce(function () {\n        var _console;\n\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        if (args[0].startsWith('The above error occurred in the')) {\n          return;\n        }\n\n        (_console = console).errorDebug.apply(_console, args);\n      });\n      expect(function () {\n        TestRenderer.create(React.createElement(Animated.View, {\n          onTouchMove: event,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 29\n          }\n        }));\n      }).toThrowError(/nativeEvent/);\n      expect(NativeAnimatedModule.addAnimatedEventToView).not.toBeCalled();\n      console.error.mockRestore();\n    });\n    it('should call listeners', function () {\n      var value = new Animated.Value(0);\n\n      value.__makeNative();\n\n      var listener = jest.fn();\n      var event = Animated.event([{\n        nativeEvent: {\n          foo: value\n        }\n      }], {\n        useNativeDriver: true,\n        listener: listener\n      });\n\n      var handler = event.__getHandler();\n\n      handler({\n        nativeEvent: {\n          foo: 42\n        }\n      });\n      expect(listener).toHaveBeenCalledTimes(1);\n      expect(listener).toBeCalledWith({\n        nativeEvent: {\n          foo: 42\n        }\n      });\n    });\n  });\n  describe('Animated Graph', function () {\n    it('creates and detaches nodes', function () {\n      var opacity = new Animated.Value(0);\n      var root = TestRenderer.create(React.createElement(Animated.View, {\n        style: {\n          opacity: opacity\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 40\n        }\n      }));\n      Animated.timing(opacity, {\n        toValue: 10,\n        duration: 1000,\n        useNativeDriver: true\n      }).start();\n      expect(NativeAnimatedModule.createAnimatedNode).toHaveBeenCalledTimes(3);\n      expect(NativeAnimatedModule.connectAnimatedNodes).toHaveBeenCalledTimes(2);\n      expect(NativeAnimatedModule.startAnimatingNode).toBeCalledWith(expect.any(Number), expect.any(Number), {\n        type: 'frames',\n        frames: expect.any(Array),\n        toValue: expect.any(Number),\n        iterations: 1\n      }, expect.any(Function));\n      expect(NativeAnimatedModule.disconnectAnimatedNodes).not.toHaveBeenCalled();\n      expect(NativeAnimatedModule.dropAnimatedNode).not.toHaveBeenCalled();\n      root.unmount();\n      expect(NativeAnimatedModule.disconnectAnimatedNodes).toHaveBeenCalledTimes(2);\n      expect(NativeAnimatedModule.dropAnimatedNode).toHaveBeenCalledTimes(3);\n    });\n    it('sends a valid description for value, style and props nodes', function () {\n      var opacity = new Animated.Value(0);\n      TestRenderer.create(React.createElement(Animated.View, {\n        style: {\n          opacity: opacity\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 27\n        }\n      }));\n      Animated.timing(opacity, {\n        toValue: 10,\n        duration: 1000,\n        useNativeDriver: true\n      }).start();\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(expect.any(Number), {\n        type: 'value',\n        value: 0,\n        offset: 0\n      });\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(expect.any(Number), {\n        type: 'style',\n        style: {\n          opacity: expect.any(Number)\n        }\n      });\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(expect.any(Number), {\n        type: 'props',\n        props: {\n          style: expect.any(Number)\n        }\n      });\n    });\n    it('sends a valid graph description for Animated.add nodes', function () {\n      var first = new Animated.Value(1);\n      var second = new Animated.Value(2);\n\n      first.__makeNative();\n\n      second.__makeNative();\n\n      TestRenderer.create(React.createElement(Animated.View, {\n        style: {\n          opacity: Animated.add(first, second)\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 9\n        }\n      }));\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(expect.any(Number), {\n        type: 'addition',\n        input: expect.any(Array)\n      });\n      var additionCalls = NativeAnimatedModule.createAnimatedNode.mock.calls.filter(function (call) {\n        return call[1].type === 'addition';\n      });\n      expect(additionCalls.length).toBe(1);\n      var additionCall = additionCalls[0];\n      var additionNodeTag = additionCall[0];\n      var additionConnectionCalls = NativeAnimatedModule.connectAnimatedNodes.mock.calls.filter(function (call) {\n        return call[1] === additionNodeTag;\n      });\n      expect(additionConnectionCalls.length).toBe(2);\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(additionCall[1].input[0], {\n        type: 'value',\n        value: 1,\n        offset: 0\n      });\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(additionCall[1].input[1], {\n        type: 'value',\n        value: 2,\n        offset: 0\n      });\n    });\n    it('sends a valid graph description for Animated.subtract nodes', function () {\n      var first = new Animated.Value(2);\n      var second = new Animated.Value(1);\n\n      first.__makeNative();\n\n      second.__makeNative();\n\n      TestRenderer.create(React.createElement(Animated.View, {\n        style: {\n          opacity: Animated.subtract(first, second)\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 9\n        }\n      }));\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(expect.any(Number), {\n        type: 'subtraction',\n        input: expect.any(Array)\n      });\n      var subtractionCalls = NativeAnimatedModule.createAnimatedNode.mock.calls.filter(function (call) {\n        return call[1].type === 'subtraction';\n      });\n      expect(subtractionCalls.length).toBe(1);\n      var subtractionCall = subtractionCalls[0];\n      var subtractionNodeTag = subtractionCall[0];\n      var subtractionConnectionCalls = NativeAnimatedModule.connectAnimatedNodes.mock.calls.filter(function (call) {\n        return call[1] === subtractionNodeTag;\n      });\n      expect(subtractionConnectionCalls.length).toBe(2);\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(subtractionCall[1].input[0], {\n        type: 'value',\n        value: 2,\n        offset: 0\n      });\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(subtractionCall[1].input[1], {\n        type: 'value',\n        value: 1,\n        offset: 0\n      });\n    });\n    it('sends a valid graph description for Animated.multiply nodes', function () {\n      var first = new Animated.Value(2);\n      var second = new Animated.Value(1);\n\n      first.__makeNative();\n\n      second.__makeNative();\n\n      TestRenderer.create(React.createElement(Animated.View, {\n        style: {\n          opacity: Animated.multiply(first, second)\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 9\n        }\n      }));\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(expect.any(Number), {\n        type: 'multiplication',\n        input: expect.any(Array)\n      });\n      var multiplicationCalls = NativeAnimatedModule.createAnimatedNode.mock.calls.filter(function (call) {\n        return call[1].type === 'multiplication';\n      });\n      expect(multiplicationCalls.length).toBe(1);\n      var multiplicationCall = multiplicationCalls[0];\n      var multiplicationNodeTag = multiplicationCall[0];\n      var multiplicationConnectionCalls = NativeAnimatedModule.connectAnimatedNodes.mock.calls.filter(function (call) {\n        return call[1] === multiplicationNodeTag;\n      });\n      expect(multiplicationConnectionCalls.length).toBe(2);\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(multiplicationCall[1].input[0], {\n        type: 'value',\n        value: 2,\n        offset: 0\n      });\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(multiplicationCall[1].input[1], {\n        type: 'value',\n        value: 1,\n        offset: 0\n      });\n    });\n    it('sends a valid graph description for Animated.divide nodes', function () {\n      var first = new Animated.Value(4);\n      var second = new Animated.Value(2);\n\n      first.__makeNative();\n\n      second.__makeNative();\n\n      TestRenderer.create(React.createElement(Animated.View, {\n        style: {\n          opacity: Animated.divide(first, second)\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 9\n        }\n      }));\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(expect.any(Number), {\n        type: 'division',\n        input: expect.any(Array)\n      });\n      var divisionCalls = NativeAnimatedModule.createAnimatedNode.mock.calls.filter(function (call) {\n        return call[1].type === 'division';\n      });\n      expect(divisionCalls.length).toBe(1);\n      var divisionCall = divisionCalls[0];\n      var divisionNodeTag = divisionCall[0];\n      var divisionConnectionCalls = NativeAnimatedModule.connectAnimatedNodes.mock.calls.filter(function (call) {\n        return call[1] === divisionNodeTag;\n      });\n      expect(divisionConnectionCalls.length).toBe(2);\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(divisionCall[1].input[0], {\n        type: 'value',\n        value: 4,\n        offset: 0\n      });\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(divisionCall[1].input[1], {\n        type: 'value',\n        value: 2,\n        offset: 0\n      });\n    });\n    it('sends a valid graph description for Animated.modulo nodes', function () {\n      var value = new Animated.Value(4);\n\n      value.__makeNative();\n\n      TestRenderer.create(React.createElement(Animated.View, {\n        style: {\n          opacity: Animated.modulo(value, 4)\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 475,\n          columnNumber: 9\n        }\n      }));\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(expect.any(Number), {\n        type: 'modulus',\n        modulus: 4,\n        input: expect.any(Number)\n      });\n      var moduloCalls = NativeAnimatedModule.createAnimatedNode.mock.calls.filter(function (call) {\n        return call[1].type === 'modulus';\n      });\n      expect(moduloCalls.length).toBe(1);\n      var moduloCall = moduloCalls[0];\n      var moduloNodeTag = moduloCall[0];\n      var moduloConnectionCalls = NativeAnimatedModule.connectAnimatedNodes.mock.calls.filter(function (call) {\n        return call[1] === moduloNodeTag;\n      });\n      expect(moduloConnectionCalls.length).toBe(1);\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(moduloCall[1].input, {\n        type: 'value',\n        value: 4,\n        offset: 0\n      });\n    });\n    it('sends a valid graph description for interpolate() nodes', function () {\n      var value = new Animated.Value(10);\n\n      value.__makeNative();\n\n      TestRenderer.create(React.createElement(Animated.View, {\n        style: {\n          opacity: value.interpolate({\n            inputRange: [10, 20],\n            outputRange: [0, 1]\n          })\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 9\n        }\n      }));\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(expect.any(Number), {\n        type: 'value',\n        value: 10,\n        offset: 0\n      });\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(expect.any(Number), {\n        type: 'interpolation',\n        inputRange: [10, 20],\n        outputRange: [0, 1],\n        extrapolateLeft: 'extend',\n        extrapolateRight: 'extend'\n      });\n      var interpolationNodeTag = NativeAnimatedModule.createAnimatedNode.mock.calls.find(function (call) {\n        return call[1].type === 'interpolation';\n      })[0];\n      var valueNodeTag = NativeAnimatedModule.createAnimatedNode.mock.calls.find(function (call) {\n        return call[1].type === 'value';\n      })[0];\n      expect(NativeAnimatedModule.connectAnimatedNodes).toBeCalledWith(valueNodeTag, interpolationNodeTag);\n    });\n    it('sends a valid graph description for transform nodes', function () {\n      var translateX = new Animated.Value(0);\n\n      translateX.__makeNative();\n\n      TestRenderer.create(React.createElement(Animated.View, {\n        style: {\n          transform: [{\n            translateX: translateX\n          }, {\n            scale: 2\n          }]\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 9\n        }\n      }));\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(expect.any(Number), {\n        type: 'transform',\n        transforms: [{\n          nodeTag: expect.any(Number),\n          property: 'translateX',\n          type: 'animated'\n        }, {\n          value: 2,\n          property: 'scale',\n          type: 'static'\n        }]\n      });\n    });\n    it('sends a valid graph description for Animated.diffClamp nodes', function () {\n      var value = new Animated.Value(2);\n\n      value.__makeNative();\n\n      TestRenderer.create(React.createElement(Animated.View, {\n        style: {\n          opacity: Animated.diffClamp(value, 0, 20)\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 572,\n          columnNumber: 9\n        }\n      }));\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(expect.any(Number), {\n        type: 'diffclamp',\n        input: expect.any(Number),\n        max: 20,\n        min: 0\n      });\n      var diffClampCalls = NativeAnimatedModule.createAnimatedNode.mock.calls.filter(function (call) {\n        return call[1].type === 'diffclamp';\n      });\n      expect(diffClampCalls.length).toBe(1);\n      var diffClampCall = diffClampCalls[0];\n      var diffClampNodeTag = diffClampCall[0];\n      var diffClampConnectionCalls = NativeAnimatedModule.connectAnimatedNodes.mock.calls.filter(function (call) {\n        return call[1] === diffClampNodeTag;\n      });\n      expect(diffClampConnectionCalls.length).toBe(1);\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(diffClampCall[1].input, {\n        type: 'value',\n        value: 2,\n        offset: 0\n      });\n    });\n    it(\"doesn't call into native API if useNativeDriver is set to false\", function () {\n      var opacity = new Animated.Value(0);\n      var root = TestRenderer.create(React.createElement(Animated.View, {\n        style: {\n          opacity: opacity\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 598,\n          columnNumber: 40\n        }\n      }));\n      Animated.timing(opacity, {\n        toValue: 10,\n        duration: 1000,\n        useNativeDriver: false\n      }).start();\n      root.unmount();\n      expect(NativeAnimatedModule.createAnimatedNode).not.toBeCalled();\n    });\n    it('fails when trying to run non-native animation on native node', function () {\n      var opacity = new Animated.Value(0);\n      var ref = React.createRef(null);\n      TestRenderer.create(React.createElement(Animated.View, {\n        ref: ref,\n        style: {\n          opacity: opacity\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 615,\n          columnNumber: 27\n        }\n      }));\n      expect(ref.current).not.toBeNull();\n      ref.current.setNativeProps = jest.fn();\n      Animated.timing(opacity, {\n        toValue: 10,\n        duration: 50,\n        useNativeDriver: true\n      }).start();\n      jest.runAllTimers();\n      Animated.timing(opacity, {\n        toValue: 4,\n        duration: 500,\n        useNativeDriver: false\n      }).start();\n\n      try {\n        process.env.NODE_ENV = 'development';\n        expect(jest.runAllTimers).toThrow('Attempting to run JS driven animation on animated node that has ' + 'been moved to \"native\" earlier by starting an animation with ' + '`useNativeDriver: true`');\n      } finally {\n        process.env.NODE_ENV = 'test';\n      }\n    });\n    it('fails for unsupported styles', function () {\n      var left = new Animated.Value(0);\n      TestRenderer.create(React.createElement(Animated.View, {\n        style: {\n          left: left\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 648,\n          columnNumber: 27\n        }\n      }));\n      var animation = Animated.timing(left, {\n        toValue: 10,\n        duration: 50,\n        useNativeDriver: true\n      });\n      expect(animation.start).toThrowError(/left/);\n    });\n    it('works for any `static` props and styles', function () {\n      var opacity = new Animated.Value(0);\n\n      opacity.__makeNative();\n\n      TestRenderer.create(React.createElement(Animated.View, {\n        removeClippedSubviews: true,\n        style: {\n          left: 10,\n          opacity: opacity,\n          top: 20\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 664,\n          columnNumber: 9\n        }\n      }));\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(expect.any(Number), {\n        type: 'style',\n        style: {\n          opacity: expect.any(Number)\n        }\n      });\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(expect.any(Number), {\n        type: 'props',\n        props: {\n          style: expect.any(Number)\n        }\n      });\n    });\n  });\n  describe('Animations', function () {\n    it('sends a valid timing animation description', function () {\n      var anim = new Animated.Value(0);\n      Animated.timing(anim, {\n        toValue: 10,\n        duration: 1000,\n        useNativeDriver: true\n      }).start();\n      expect(NativeAnimatedModule.startAnimatingNode).toBeCalledWith(expect.any(Number), expect.any(Number), {\n        type: 'frames',\n        frames: expect.any(Array),\n        toValue: expect.any(Number),\n        iterations: 1\n      }, expect.any(Function));\n    });\n    it('sends a valid spring animation description', function () {\n      var anim = new Animated.Value(0);\n      Animated.spring(anim, {\n        toValue: 10,\n        friction: 5,\n        tension: 164,\n        useNativeDriver: true\n      }).start();\n      expect(NativeAnimatedModule.startAnimatingNode).toBeCalledWith(expect.any(Number), expect.any(Number), {\n        type: 'spring',\n        stiffness: 679.08,\n        damping: 16,\n        mass: 1,\n        initialVelocity: 0,\n        overshootClamping: false,\n        restDisplacementThreshold: 0.001,\n        restSpeedThreshold: 0.001,\n        toValue: 10,\n        iterations: 1\n      }, expect.any(Function));\n      Animated.spring(anim, {\n        toValue: 10,\n        stiffness: 1000,\n        damping: 500,\n        mass: 3,\n        useNativeDriver: true\n      }).start();\n      expect(NativeAnimatedModule.startAnimatingNode).toBeCalledWith(expect.any(Number), expect.any(Number), {\n        type: 'spring',\n        stiffness: 1000,\n        damping: 500,\n        mass: 3,\n        initialVelocity: 0,\n        overshootClamping: false,\n        restDisplacementThreshold: 0.001,\n        restSpeedThreshold: 0.001,\n        toValue: 10,\n        iterations: 1\n      }, expect.any(Function));\n      Animated.spring(anim, {\n        toValue: 10,\n        bounciness: 8,\n        speed: 10,\n        useNativeDriver: true\n      }).start();\n      expect(NativeAnimatedModule.startAnimatingNode).toBeCalledWith(expect.any(Number), expect.any(Number), {\n        type: 'spring',\n        damping: 23.05223140901191,\n        initialVelocity: 0,\n        overshootClamping: false,\n        restDisplacementThreshold: 0.001,\n        restSpeedThreshold: 0.001,\n        stiffness: 299.61882352941177,\n        mass: 1,\n        toValue: 10,\n        iterations: 1\n      }, expect.any(Function));\n    });\n    it('sends a valid decay animation description', function () {\n      var anim = new Animated.Value(0);\n      Animated.decay(anim, {\n        velocity: 10,\n        deceleration: 0.1,\n        useNativeDriver: true\n      }).start();\n      expect(NativeAnimatedModule.startAnimatingNode).toBeCalledWith(expect.any(Number), expect.any(Number), {\n        type: 'decay',\n        deceleration: 0.1,\n        velocity: 10,\n        iterations: 1\n      }, expect.any(Function));\n    });\n    it('works with Animated.loop', function () {\n      var anim = new Animated.Value(0);\n      Animated.loop(Animated.decay(anim, {\n        velocity: 10,\n        deceleration: 0.1,\n        useNativeDriver: true\n      }), {\n        iterations: 10\n      }).start();\n      expect(NativeAnimatedModule.startAnimatingNode).toBeCalledWith(expect.any(Number), expect.any(Number), {\n        type: 'decay',\n        deceleration: 0.1,\n        velocity: 10,\n        iterations: 10\n      }, expect.any(Function));\n    });\n    it('sends stopAnimation command to native', function () {\n      var value = new Animated.Value(0);\n      var animation = Animated.timing(value, {\n        toValue: 10,\n        duration: 50,\n        useNativeDriver: true\n      });\n      animation.start();\n      expect(NativeAnimatedModule.startAnimatingNode).toBeCalledWith(expect.any(Number), expect.any(Number), {\n        type: 'frames',\n        frames: expect.any(Array),\n        toValue: expect.any(Number),\n        iterations: 1\n      }, expect.any(Function));\n      var animationId = NativeAnimatedModule.startAnimatingNode.mock.calls[0][0];\n      animation.stop();\n      expect(NativeAnimatedModule.stopAnimation).toBeCalledWith(animationId);\n    });\n  });\n  describe('Animated Components', function () {\n    it('Should restore default values on prop updates only', function () {\n      var opacity = new Animated.Value(0);\n\n      opacity.__makeNative();\n\n      var root = TestRenderer.create(React.createElement(Animated.View, {\n        style: {\n          opacity: opacity\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 847,\n          columnNumber: 40\n        }\n      }));\n      expect(NativeAnimatedModule.restoreDefaultValues).not.toHaveBeenCalled();\n      root.update(React.createElement(Animated.View, {\n        style: {\n          opacity: opacity\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 850,\n          columnNumber: 19\n        }\n      }));\n      expect(NativeAnimatedModule.restoreDefaultValues).toHaveBeenCalledWith(expect.any(Number));\n      root.unmount();\n      expect(NativeAnimatedModule.restoreDefaultValues).toHaveBeenCalledTimes(1);\n    });\n  });\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Animated/src/__tests__/AnimatedNative-test.js"],"names":["jest","clearAllMocks","mock","NativeAnimatedModule","PlatformConstants","getConstants","setMock","findNodeHandle","TestRenderer","React","Animated","require","NativeAnimatedHelper","describe","default","beforeEach","addAnimatedEventToView","fn","connectAnimatedNodes","connectAnimatedNodeToView","createAnimatedNode","disconnectAnimatedNodeFromView","disconnectAnimatedNodes","dropAnimatedNode","extractAnimatedNodeOffset","flattenAnimatedNodeOffset","removeAnimatedEventFromView","restoreDefaultValues","setAnimatedNodeOffset","setAnimatedNodeValue","startAnimatingNode","startListeningToAnimatedNodeValue","stopAnimation","stopListeningToAnimatedNodeValue","it","opacity","Value","ref","createRef","timing","toValue","duration","useNativeDriver","start","create","expect","current","not","toBeNull","spyOn","setValue","toBeCalledWith","any","Number","setNativeProps","toHaveBeenCalled","setOffset","__makeNative","type","value","offset","flattenOffset","extractOffset","value1","listener","id","addListener","toHaveBeenCalledWith","__getNativeTag","nativeEventEmitter","emit","tag","toHaveBeenCalledTimes","__getValue","toBe","removeListener","forEach","removeAllListeners","event","nativeEvent","state","foo","root","nativeEventPath","animatedValueTag","unmount","notNativeEvent","console","mockImplementationOnce","args","startsWith","errorDebug","toThrowError","toBeCalled","error","mockRestore","handler","__getHandler","frames","Array","iterations","Function","style","props","first","second","add","input","additionCalls","calls","filter","call","length","additionCall","additionNodeTag","additionConnectionCalls","subtract","subtractionCalls","subtractionCall","subtractionNodeTag","subtractionConnectionCalls","multiply","multiplicationCalls","multiplicationCall","multiplicationNodeTag","multiplicationConnectionCalls","divide","divisionCalls","divisionCall","divisionNodeTag","divisionConnectionCalls","modulo","modulus","moduloCalls","moduloCall","moduloNodeTag","moduloConnectionCalls","interpolate","inputRange","outputRange","extrapolateLeft","extrapolateRight","interpolationNodeTag","find","valueNodeTag","translateX","transform","scale","transforms","nodeTag","property","diffClamp","max","min","diffClampCalls","diffClampCall","diffClampNodeTag","diffClampConnectionCalls","runAllTimers","process","env","NODE_ENV","toThrow","left","animation","top","anim","spring","friction","tension","stiffness","damping","mass","initialVelocity","overshootClamping","restDisplacementThreshold","restSpeedThreshold","bounciness","speed","decay","velocity","deceleration","loop","animationId","stop","update"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @emails oncall+react_native\n */\n\n'use strict';\n\njest\n  .clearAllMocks()\n  .mock('../../../BatchedBridge/NativeModules', () => ({\n    NativeAnimatedModule: {},\n    PlatformConstants: {\n      getConstants() {\n        return {};\n      },\n    },\n  }))\n  .mock('../NativeAnimatedModule')\n  .mock('../../../EventEmitter/NativeEventEmitter')\n  // findNodeHandle is imported from ReactNative so mock that whole module.\n  .setMock('../../../Renderer/shims/ReactNative', {findNodeHandle: () => 1});\n\nimport TestRenderer from 'react-test-renderer';\nimport * as React from 'react';\n\nconst Animated = require('../Animated');\nconst NativeAnimatedHelper = require('../NativeAnimatedHelper');\n\ndescribe('Native Animated', () => {\n  const NativeAnimatedModule = require('../NativeAnimatedModule').default;\n\n  beforeEach(() => {\n    Object.assign(NativeAnimatedModule, {\n      addAnimatedEventToView: jest.fn(),\n      connectAnimatedNodes: jest.fn(),\n      connectAnimatedNodeToView: jest.fn(),\n      createAnimatedNode: jest.fn(),\n      disconnectAnimatedNodeFromView: jest.fn(),\n      disconnectAnimatedNodes: jest.fn(),\n      dropAnimatedNode: jest.fn(),\n      extractAnimatedNodeOffset: jest.fn(),\n      flattenAnimatedNodeOffset: jest.fn(),\n      removeAnimatedEventFromView: jest.fn(),\n      restoreDefaultValues: jest.fn(),\n      setAnimatedNodeOffset: jest.fn(),\n      setAnimatedNodeValue: jest.fn(),\n      startAnimatingNode: jest.fn(),\n      startListeningToAnimatedNodeValue: jest.fn(),\n      stopAnimation: jest.fn(),\n      stopListeningToAnimatedNodeValue: jest.fn(),\n    });\n  });\n\n  describe('Animated Value', () => {\n    it('proxies `setValue` correctly', () => {\n      const opacity = new Animated.Value(0);\n      const ref = React.createRef(null);\n\n      Animated.timing(opacity, {\n        toValue: 10,\n        duration: 1000,\n        useNativeDriver: true,\n      }).start();\n\n      TestRenderer.create(<Animated.View ref={ref} style={{opacity}} />);\n\n      expect(ref.current).not.toBeNull();\n      jest.spyOn(ref.current, 'setNativeProps');\n\n      opacity.setValue(0.5);\n\n      expect(NativeAnimatedModule.setAnimatedNodeValue).toBeCalledWith(\n        expect.any(Number),\n        0.5,\n      );\n      expect(ref.current.setNativeProps).not.toHaveBeenCalled();\n    });\n\n    it('should set offset', () => {\n      const opacity = new Animated.Value(0);\n      opacity.setOffset(10);\n      opacity.__makeNative();\n\n      TestRenderer.create(<Animated.View style={{opacity}} />);\n\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(\n        expect.any(Number),\n        {type: 'value', value: 0, offset: 10},\n      );\n      opacity.setOffset(20);\n      expect(NativeAnimatedModule.setAnimatedNodeOffset).toBeCalledWith(\n        expect.any(Number),\n        20,\n      );\n    });\n\n    it('should flatten offset', () => {\n      const opacity = new Animated.Value(0);\n      opacity.__makeNative();\n\n      TestRenderer.create(<Animated.View style={{opacity}} />);\n\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(\n        expect.any(Number),\n        {type: 'value', value: 0, offset: 0},\n      );\n      opacity.flattenOffset();\n      expect(NativeAnimatedModule.flattenAnimatedNodeOffset).toBeCalledWith(\n        expect.any(Number),\n      );\n    });\n\n    it('should extract offset', () => {\n      const opacity = new Animated.Value(0);\n      opacity.__makeNative();\n\n      TestRenderer.create(<Animated.View style={{opacity}} />);\n\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(\n        expect.any(Number),\n        {type: 'value', value: 0, offset: 0},\n      );\n      opacity.extractOffset();\n      expect(NativeAnimatedModule.extractAnimatedNodeOffset).toBeCalledWith(\n        expect.any(Number),\n      );\n    });\n  });\n\n  describe('Animated Listeners', () => {\n    it('should get updates', () => {\n      const value1 = new Animated.Value(0);\n      value1.__makeNative();\n      const listener = jest.fn();\n      const id = value1.addListener(listener);\n      expect(\n        NativeAnimatedModule.startListeningToAnimatedNodeValue,\n      ).toHaveBeenCalledWith(value1.__getNativeTag());\n\n      NativeAnimatedHelper.nativeEventEmitter.emit('onAnimatedValueUpdate', {\n        value: 42,\n        tag: value1.__getNativeTag(),\n      });\n      expect(listener).toHaveBeenCalledTimes(1);\n      expect(listener).toBeCalledWith({value: 42});\n      expect(value1.__getValue()).toBe(42);\n\n      NativeAnimatedHelper.nativeEventEmitter.emit('onAnimatedValueUpdate', {\n        value: 7,\n        tag: value1.__getNativeTag(),\n      });\n      expect(listener).toHaveBeenCalledTimes(2);\n      expect(listener).toBeCalledWith({value: 7});\n      expect(value1.__getValue()).toBe(7);\n\n      value1.removeListener(id);\n      expect(\n        NativeAnimatedModule.stopListeningToAnimatedNodeValue,\n      ).toHaveBeenCalledWith(value1.__getNativeTag());\n\n      NativeAnimatedHelper.nativeEventEmitter.emit('onAnimatedValueUpdate', {\n        value: 1492,\n        tag: value1.__getNativeTag(),\n      });\n      expect(listener).toHaveBeenCalledTimes(2);\n      expect(value1.__getValue()).toBe(7);\n    });\n\n    it('should removeAll', () => {\n      const value1 = new Animated.Value(0);\n      value1.__makeNative();\n      const listener = jest.fn();\n      [1, 2, 3, 4].forEach(() => value1.addListener(listener));\n      expect(\n        NativeAnimatedModule.startListeningToAnimatedNodeValue,\n      ).toHaveBeenCalledWith(value1.__getNativeTag());\n\n      NativeAnimatedHelper.nativeEventEmitter.emit('onAnimatedValueUpdate', {\n        value: 42,\n        tag: value1.__getNativeTag(),\n      });\n      expect(listener).toHaveBeenCalledTimes(4);\n      expect(listener).toBeCalledWith({value: 42});\n\n      value1.removeAllListeners();\n      expect(\n        NativeAnimatedModule.stopListeningToAnimatedNodeValue,\n      ).toHaveBeenCalledWith(value1.__getNativeTag());\n\n      NativeAnimatedHelper.nativeEventEmitter.emit('onAnimatedValueUpdate', {\n        value: 7,\n        tag: value1.__getNativeTag(),\n      });\n      expect(listener).toHaveBeenCalledTimes(4);\n    });\n  });\n\n  describe('Animated Events', () => {\n    it('should map events', () => {\n      const value = new Animated.Value(0);\n      value.__makeNative();\n      const event = Animated.event([{nativeEvent: {state: {foo: value}}}], {\n        useNativeDriver: true,\n      });\n\n      const root = TestRenderer.create(<Animated.View onTouchMove={event} />);\n      expect(NativeAnimatedModule.addAnimatedEventToView).toBeCalledWith(\n        expect.any(Number),\n        'onTouchMove',\n        {\n          nativeEventPath: ['state', 'foo'],\n          animatedValueTag: value.__getNativeTag(),\n        },\n      );\n\n      expect(\n        NativeAnimatedModule.removeAnimatedEventFromView,\n      ).not.toHaveBeenCalled();\n      root.unmount();\n      expect(NativeAnimatedModule.removeAnimatedEventFromView).toBeCalledWith(\n        expect.any(Number),\n        'onTouchMove',\n        value.__getNativeTag(),\n      );\n    });\n\n    it('should throw on invalid event path', () => {\n      const value = new Animated.Value(0);\n      value.__makeNative();\n      const event = Animated.event([{notNativeEvent: {foo: value}}], {\n        useNativeDriver: true,\n      });\n\n      jest.spyOn(console, 'error').mockImplementationOnce((...args) => {\n        if (args[0].startsWith('The above error occurred in the')) {\n          return;\n        }\n        console.errorDebug(...args);\n      });\n\n      expect(() => {\n        TestRenderer.create(<Animated.View onTouchMove={event} />);\n      }).toThrowError(/nativeEvent/);\n      expect(NativeAnimatedModule.addAnimatedEventToView).not.toBeCalled();\n\n      console.error.mockRestore();\n    });\n\n    it('should call listeners', () => {\n      const value = new Animated.Value(0);\n      value.__makeNative();\n      const listener = jest.fn();\n      const event = Animated.event([{nativeEvent: {foo: value}}], {\n        useNativeDriver: true,\n        listener,\n      });\n      const handler = event.__getHandler();\n      handler({nativeEvent: {foo: 42}});\n      expect(listener).toHaveBeenCalledTimes(1);\n      expect(listener).toBeCalledWith({nativeEvent: {foo: 42}});\n    });\n  });\n\n  describe('Animated Graph', () => {\n    it('creates and detaches nodes', () => {\n      const opacity = new Animated.Value(0);\n      const root = TestRenderer.create(<Animated.View style={{opacity}} />);\n\n      Animated.timing(opacity, {\n        toValue: 10,\n        duration: 1000,\n        useNativeDriver: true,\n      }).start();\n\n      expect(NativeAnimatedModule.createAnimatedNode).toHaveBeenCalledTimes(3);\n      expect(NativeAnimatedModule.connectAnimatedNodes).toHaveBeenCalledTimes(\n        2,\n      );\n\n      expect(NativeAnimatedModule.startAnimatingNode).toBeCalledWith(\n        expect.any(Number),\n        expect.any(Number),\n        {\n          type: 'frames',\n          frames: expect.any(Array),\n          toValue: expect.any(Number),\n          iterations: 1,\n        },\n        expect.any(Function),\n      );\n\n      expect(\n        NativeAnimatedModule.disconnectAnimatedNodes,\n      ).not.toHaveBeenCalled();\n      expect(NativeAnimatedModule.dropAnimatedNode).not.toHaveBeenCalled();\n\n      root.unmount();\n\n      expect(\n        NativeAnimatedModule.disconnectAnimatedNodes,\n      ).toHaveBeenCalledTimes(2);\n      expect(NativeAnimatedModule.dropAnimatedNode).toHaveBeenCalledTimes(3);\n    });\n\n    it('sends a valid description for value, style and props nodes', () => {\n      const opacity = new Animated.Value(0);\n      TestRenderer.create(<Animated.View style={{opacity}} />);\n\n      Animated.timing(opacity, {\n        toValue: 10,\n        duration: 1000,\n        useNativeDriver: true,\n      }).start();\n\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(\n        expect.any(Number),\n        {type: 'value', value: 0, offset: 0},\n      );\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(\n        expect.any(Number),\n        {type: 'style', style: {opacity: expect.any(Number)}},\n      );\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(\n        expect.any(Number),\n        {type: 'props', props: {style: expect.any(Number)}},\n      );\n    });\n\n    it('sends a valid graph description for Animated.add nodes', () => {\n      const first = new Animated.Value(1);\n      const second = new Animated.Value(2);\n      first.__makeNative();\n      second.__makeNative();\n\n      TestRenderer.create(\n        <Animated.View style={{opacity: Animated.add(first, second)}} />,\n      );\n\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(\n        expect.any(Number),\n        {type: 'addition', input: expect.any(Array)},\n      );\n      const additionCalls = NativeAnimatedModule.createAnimatedNode.mock.calls.filter(\n        call => call[1].type === 'addition',\n      );\n      expect(additionCalls.length).toBe(1);\n      const additionCall = additionCalls[0];\n      const additionNodeTag = additionCall[0];\n      const additionConnectionCalls = NativeAnimatedModule.connectAnimatedNodes.mock.calls.filter(\n        call => call[1] === additionNodeTag,\n      );\n      expect(additionConnectionCalls.length).toBe(2);\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(\n        additionCall[1].input[0],\n        {type: 'value', value: 1, offset: 0},\n      );\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(\n        additionCall[1].input[1],\n        {type: 'value', value: 2, offset: 0},\n      );\n    });\n\n    it('sends a valid graph description for Animated.subtract nodes', () => {\n      const first = new Animated.Value(2);\n      const second = new Animated.Value(1);\n      first.__makeNative();\n      second.__makeNative();\n\n      TestRenderer.create(\n        <Animated.View style={{opacity: Animated.subtract(first, second)}} />,\n      );\n\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(\n        expect.any(Number),\n        {type: 'subtraction', input: expect.any(Array)},\n      );\n      const subtractionCalls = NativeAnimatedModule.createAnimatedNode.mock.calls.filter(\n        call => call[1].type === 'subtraction',\n      );\n      expect(subtractionCalls.length).toBe(1);\n      const subtractionCall = subtractionCalls[0];\n      const subtractionNodeTag = subtractionCall[0];\n      const subtractionConnectionCalls = NativeAnimatedModule.connectAnimatedNodes.mock.calls.filter(\n        call => call[1] === subtractionNodeTag,\n      );\n      expect(subtractionConnectionCalls.length).toBe(2);\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(\n        subtractionCall[1].input[0],\n        {type: 'value', value: 2, offset: 0},\n      );\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(\n        subtractionCall[1].input[1],\n        {type: 'value', value: 1, offset: 0},\n      );\n    });\n\n    it('sends a valid graph description for Animated.multiply nodes', () => {\n      const first = new Animated.Value(2);\n      const second = new Animated.Value(1);\n      first.__makeNative();\n      second.__makeNative();\n\n      TestRenderer.create(\n        <Animated.View style={{opacity: Animated.multiply(first, second)}} />,\n      );\n\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(\n        expect.any(Number),\n        {type: 'multiplication', input: expect.any(Array)},\n      );\n      const multiplicationCalls = NativeAnimatedModule.createAnimatedNode.mock.calls.filter(\n        call => call[1].type === 'multiplication',\n      );\n      expect(multiplicationCalls.length).toBe(1);\n      const multiplicationCall = multiplicationCalls[0];\n      const multiplicationNodeTag = multiplicationCall[0];\n      const multiplicationConnectionCalls = NativeAnimatedModule.connectAnimatedNodes.mock.calls.filter(\n        call => call[1] === multiplicationNodeTag,\n      );\n      expect(multiplicationConnectionCalls.length).toBe(2);\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(\n        multiplicationCall[1].input[0],\n        {type: 'value', value: 2, offset: 0},\n      );\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(\n        multiplicationCall[1].input[1],\n        {type: 'value', value: 1, offset: 0},\n      );\n    });\n\n    it('sends a valid graph description for Animated.divide nodes', () => {\n      const first = new Animated.Value(4);\n      const second = new Animated.Value(2);\n      first.__makeNative();\n      second.__makeNative();\n\n      TestRenderer.create(\n        <Animated.View style={{opacity: Animated.divide(first, second)}} />,\n      );\n\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(\n        expect.any(Number),\n        {type: 'division', input: expect.any(Array)},\n      );\n      const divisionCalls = NativeAnimatedModule.createAnimatedNode.mock.calls.filter(\n        call => call[1].type === 'division',\n      );\n      expect(divisionCalls.length).toBe(1);\n      const divisionCall = divisionCalls[0];\n      const divisionNodeTag = divisionCall[0];\n      const divisionConnectionCalls = NativeAnimatedModule.connectAnimatedNodes.mock.calls.filter(\n        call => call[1] === divisionNodeTag,\n      );\n      expect(divisionConnectionCalls.length).toBe(2);\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(\n        divisionCall[1].input[0],\n        {type: 'value', value: 4, offset: 0},\n      );\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(\n        divisionCall[1].input[1],\n        {type: 'value', value: 2, offset: 0},\n      );\n    });\n\n    it('sends a valid graph description for Animated.modulo nodes', () => {\n      const value = new Animated.Value(4);\n      value.__makeNative();\n\n      TestRenderer.create(\n        <Animated.View style={{opacity: Animated.modulo(value, 4)}} />,\n      );\n\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(\n        expect.any(Number),\n        {type: 'modulus', modulus: 4, input: expect.any(Number)},\n      );\n      const moduloCalls = NativeAnimatedModule.createAnimatedNode.mock.calls.filter(\n        call => call[1].type === 'modulus',\n      );\n      expect(moduloCalls.length).toBe(1);\n      const moduloCall = moduloCalls[0];\n      const moduloNodeTag = moduloCall[0];\n      const moduloConnectionCalls = NativeAnimatedModule.connectAnimatedNodes.mock.calls.filter(\n        call => call[1] === moduloNodeTag,\n      );\n      expect(moduloConnectionCalls.length).toBe(1);\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(\n        moduloCall[1].input,\n        {type: 'value', value: 4, offset: 0},\n      );\n    });\n\n    it('sends a valid graph description for interpolate() nodes', () => {\n      const value = new Animated.Value(10);\n      value.__makeNative();\n\n      TestRenderer.create(\n        <Animated.View\n          style={{\n            opacity: value.interpolate({\n              inputRange: [10, 20],\n              outputRange: [0, 1],\n            }),\n          }}\n        />,\n      );\n\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(\n        expect.any(Number),\n        {type: 'value', value: 10, offset: 0},\n      );\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(\n        expect.any(Number),\n        {\n          type: 'interpolation',\n          inputRange: [10, 20],\n          outputRange: [0, 1],\n          extrapolateLeft: 'extend',\n          extrapolateRight: 'extend',\n        },\n      );\n      const interpolationNodeTag = NativeAnimatedModule.createAnimatedNode.mock.calls.find(\n        call => call[1].type === 'interpolation',\n      )[0];\n      const valueNodeTag = NativeAnimatedModule.createAnimatedNode.mock.calls.find(\n        call => call[1].type === 'value',\n      )[0];\n      expect(NativeAnimatedModule.connectAnimatedNodes).toBeCalledWith(\n        valueNodeTag,\n        interpolationNodeTag,\n      );\n    });\n\n    it('sends a valid graph description for transform nodes', () => {\n      const translateX = new Animated.Value(0);\n      translateX.__makeNative();\n\n      TestRenderer.create(\n        <Animated.View style={{transform: [{translateX}, {scale: 2}]}} />,\n      );\n\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(\n        expect.any(Number),\n        {\n          type: 'transform',\n          transforms: [\n            {\n              nodeTag: expect.any(Number),\n              property: 'translateX',\n              type: 'animated',\n            },\n            {\n              value: 2,\n              property: 'scale',\n              type: 'static',\n            },\n          ],\n        },\n      );\n    });\n\n    it('sends a valid graph description for Animated.diffClamp nodes', () => {\n      const value = new Animated.Value(2);\n      value.__makeNative();\n\n      TestRenderer.create(\n        <Animated.View style={{opacity: Animated.diffClamp(value, 0, 20)}} />,\n      );\n\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(\n        expect.any(Number),\n        {type: 'diffclamp', input: expect.any(Number), max: 20, min: 0},\n      );\n      const diffClampCalls = NativeAnimatedModule.createAnimatedNode.mock.calls.filter(\n        call => call[1].type === 'diffclamp',\n      );\n      expect(diffClampCalls.length).toBe(1);\n      const diffClampCall = diffClampCalls[0];\n      const diffClampNodeTag = diffClampCall[0];\n      const diffClampConnectionCalls = NativeAnimatedModule.connectAnimatedNodes.mock.calls.filter(\n        call => call[1] === diffClampNodeTag,\n      );\n      expect(diffClampConnectionCalls.length).toBe(1);\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(\n        diffClampCall[1].input,\n        {type: 'value', value: 2, offset: 0},\n      );\n    });\n\n    it(\"doesn't call into native API if useNativeDriver is set to false\", () => {\n      const opacity = new Animated.Value(0);\n\n      const root = TestRenderer.create(<Animated.View style={{opacity}} />);\n\n      Animated.timing(opacity, {\n        toValue: 10,\n        duration: 1000,\n        useNativeDriver: false,\n      }).start();\n\n      root.unmount();\n\n      expect(NativeAnimatedModule.createAnimatedNode).not.toBeCalled();\n    });\n\n    it('fails when trying to run non-native animation on native node', () => {\n      const opacity = new Animated.Value(0);\n      const ref = React.createRef(null);\n\n      TestRenderer.create(<Animated.View ref={ref} style={{opacity}} />);\n\n      // Necessary to simulate the native animation.\n      expect(ref.current).not.toBeNull();\n      ref.current.setNativeProps = jest.fn();\n\n      Animated.timing(opacity, {\n        toValue: 10,\n        duration: 50,\n        useNativeDriver: true,\n      }).start();\n      jest.runAllTimers();\n\n      Animated.timing(opacity, {\n        toValue: 4,\n        duration: 500,\n        useNativeDriver: false,\n      }).start();\n      try {\n        process.env.NODE_ENV = 'development';\n        expect(jest.runAllTimers).toThrow(\n          'Attempting to run JS driven animation on animated node that has ' +\n            'been moved to \"native\" earlier by starting an animation with ' +\n            '`useNativeDriver: true`',\n        );\n      } finally {\n        process.env.NODE_ENV = 'test';\n      }\n    });\n\n    it('fails for unsupported styles', () => {\n      const left = new Animated.Value(0);\n\n      TestRenderer.create(<Animated.View style={{left}} />);\n\n      const animation = Animated.timing(left, {\n        toValue: 10,\n        duration: 50,\n        useNativeDriver: true,\n      });\n      expect(animation.start).toThrowError(/left/);\n    });\n\n    it('works for any `static` props and styles', () => {\n      // Passing \"unsupported\" props should work just fine as long as they are not animated\n      const opacity = new Animated.Value(0);\n      opacity.__makeNative();\n\n      TestRenderer.create(\n        <Animated.View\n          removeClippedSubviews={true}\n          style={{left: 10, opacity, top: 20}}\n        />,\n      );\n\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(\n        expect.any(Number),\n        {type: 'style', style: {opacity: expect.any(Number)}},\n      );\n      expect(NativeAnimatedModule.createAnimatedNode).toBeCalledWith(\n        expect.any(Number),\n        {type: 'props', props: {style: expect.any(Number)}},\n      );\n    });\n  });\n\n  describe('Animations', () => {\n    it('sends a valid timing animation description', () => {\n      const anim = new Animated.Value(0);\n      Animated.timing(anim, {\n        toValue: 10,\n        duration: 1000,\n        useNativeDriver: true,\n      }).start();\n\n      expect(NativeAnimatedModule.startAnimatingNode).toBeCalledWith(\n        expect.any(Number),\n        expect.any(Number),\n        {\n          type: 'frames',\n          frames: expect.any(Array),\n          toValue: expect.any(Number),\n          iterations: 1,\n        },\n        expect.any(Function),\n      );\n    });\n\n    it('sends a valid spring animation description', () => {\n      const anim = new Animated.Value(0);\n      Animated.spring(anim, {\n        toValue: 10,\n        friction: 5,\n        tension: 164,\n        useNativeDriver: true,\n      }).start();\n      expect(NativeAnimatedModule.startAnimatingNode).toBeCalledWith(\n        expect.any(Number),\n        expect.any(Number),\n        {\n          type: 'spring',\n          stiffness: 679.08,\n          damping: 16,\n          mass: 1,\n          initialVelocity: 0,\n          overshootClamping: false,\n          restDisplacementThreshold: 0.001,\n          restSpeedThreshold: 0.001,\n          toValue: 10,\n          iterations: 1,\n        },\n        expect.any(Function),\n      );\n\n      Animated.spring(anim, {\n        toValue: 10,\n        stiffness: 1000,\n        damping: 500,\n        mass: 3,\n        useNativeDriver: true,\n      }).start();\n      expect(NativeAnimatedModule.startAnimatingNode).toBeCalledWith(\n        expect.any(Number),\n        expect.any(Number),\n        {\n          type: 'spring',\n          stiffness: 1000,\n          damping: 500,\n          mass: 3,\n          initialVelocity: 0,\n          overshootClamping: false,\n          restDisplacementThreshold: 0.001,\n          restSpeedThreshold: 0.001,\n          toValue: 10,\n          iterations: 1,\n        },\n        expect.any(Function),\n      );\n\n      Animated.spring(anim, {\n        toValue: 10,\n        bounciness: 8,\n        speed: 10,\n        useNativeDriver: true,\n      }).start();\n      expect(NativeAnimatedModule.startAnimatingNode).toBeCalledWith(\n        expect.any(Number),\n        expect.any(Number),\n        {\n          type: 'spring',\n          damping: 23.05223140901191,\n          initialVelocity: 0,\n          overshootClamping: false,\n          restDisplacementThreshold: 0.001,\n          restSpeedThreshold: 0.001,\n          stiffness: 299.61882352941177,\n          mass: 1,\n          toValue: 10,\n          iterations: 1,\n        },\n        expect.any(Function),\n      );\n    });\n\n    it('sends a valid decay animation description', () => {\n      const anim = new Animated.Value(0);\n      Animated.decay(anim, {\n        velocity: 10,\n        deceleration: 0.1,\n        useNativeDriver: true,\n      }).start();\n\n      expect(NativeAnimatedModule.startAnimatingNode).toBeCalledWith(\n        expect.any(Number),\n        expect.any(Number),\n        {type: 'decay', deceleration: 0.1, velocity: 10, iterations: 1},\n        expect.any(Function),\n      );\n    });\n\n    it('works with Animated.loop', () => {\n      const anim = new Animated.Value(0);\n      Animated.loop(\n        Animated.decay(anim, {\n          velocity: 10,\n          deceleration: 0.1,\n          useNativeDriver: true,\n        }),\n        {iterations: 10},\n      ).start();\n\n      expect(NativeAnimatedModule.startAnimatingNode).toBeCalledWith(\n        expect.any(Number),\n        expect.any(Number),\n        {type: 'decay', deceleration: 0.1, velocity: 10, iterations: 10},\n        expect.any(Function),\n      );\n    });\n\n    it('sends stopAnimation command to native', () => {\n      const value = new Animated.Value(0);\n      const animation = Animated.timing(value, {\n        toValue: 10,\n        duration: 50,\n        useNativeDriver: true,\n      });\n\n      animation.start();\n      expect(NativeAnimatedModule.startAnimatingNode).toBeCalledWith(\n        expect.any(Number),\n        expect.any(Number),\n        {\n          type: 'frames',\n          frames: expect.any(Array),\n          toValue: expect.any(Number),\n          iterations: 1,\n        },\n        expect.any(Function),\n      );\n      const animationId =\n        NativeAnimatedModule.startAnimatingNode.mock.calls[0][0];\n\n      animation.stop();\n      expect(NativeAnimatedModule.stopAnimation).toBeCalledWith(animationId);\n    });\n  });\n\n  describe('Animated Components', () => {\n    it('Should restore default values on prop updates only', () => {\n      const opacity = new Animated.Value(0);\n      opacity.__makeNative();\n\n      const root = TestRenderer.create(<Animated.View style={{opacity}} />);\n      expect(NativeAnimatedModule.restoreDefaultValues).not.toHaveBeenCalled();\n\n      root.update(<Animated.View style={{opacity}} />);\n      expect(NativeAnimatedModule.restoreDefaultValues).toHaveBeenCalledWith(\n        expect.any(Number),\n      );\n\n      root.unmount();\n      // Make sure it doesn't get called on unmount.\n      expect(NativeAnimatedModule.restoreDefaultValues).toHaveBeenCalledTimes(\n        1,\n      );\n    });\n  });\n});\n"]},"metadata":{},"sourceType":"module"}