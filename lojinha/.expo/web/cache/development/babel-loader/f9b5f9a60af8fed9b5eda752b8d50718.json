{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _child_process() {\n  var data = require(\"child_process\");\n\n  _child_process = function _child_process() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _os() {\n  var data = _interopRequireDefault(require(\"os\"));\n\n  _os = function _os() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction findAvailableDevice(devices) {\n  for (var _i = 0, _Object$keys = Object.keys(devices); _i < _Object$keys.length; _i++) {\n    var key = _Object$keys[_i];\n\n    for (var _iterator = _createForOfIteratorHelperLoose(devices[key]), _step; !(_step = _iterator()).done;) {\n      var device = _step.value;\n\n      if (device.availability === '(available)' && device.state === 'Booted') {\n        return device;\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction logIOS() {\n  var rawDevices, _JSON$parse, devices, device;\n\n  return _regeneratorRuntime.async(function logIOS$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          rawDevices = (0, _child_process().execFileSync)('xcrun', ['simctl', 'list', 'devices', '--json'], {\n            encoding: 'utf8'\n          });\n          _JSON$parse = JSON.parse(rawDevices), devices = _JSON$parse.devices;\n          device = findAvailableDevice(devices);\n\n          if (!(device === null)) {\n            _context.next = 6;\n            break;\n          }\n\n          _cliTools().logger.error('No active iOS device found');\n\n          return _context.abrupt(\"return\");\n\n        case 6:\n          tailDeviceLogs(device.udid);\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction tailDeviceLogs(udid) {\n  var logDir = _path().default.join(_os().default.homedir(), 'Library', 'Logs', 'CoreSimulator', udid, 'asl');\n\n  var log = (0, _child_process().spawnSync)('syslog', ['-w', '-F', 'std', '-d', logDir], {\n    stdio: 'inherit'\n  });\n\n  if (log.error !== null) {\n    throw log.error;\n  }\n}\n\nvar _default = {\n  name: 'log-ios',\n  description: 'starts iOS device syslog tail',\n  func: logIOS\n};\nexports.default = _default;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli-platform-ios/build/commands/logIOS/index.js"],"names":["Object","defineProperty","exports","value","default","_child_process","data","require","_os","_interopRequireDefault","_path","_cliTools","obj","__esModule","findAvailableDevice","devices","keys","key","device","availability","state","logIOS","rawDevices","execFileSync","encoding","JSON","parse","logger","error","tailDeviceLogs","udid","logDir","join","homedir","log","spawnSync","stdio","_default","name","description","func"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _child_process() {\n  const data = require(\"child_process\");\n\n  _child_process = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _os() {\n  const data = _interopRequireDefault(require(\"os\"));\n\n  _os = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  const data = _interopRequireDefault(require(\"path\"));\n\n  _path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction findAvailableDevice(devices) {\n  for (const key of Object.keys(devices)) {\n    for (const device of devices[key]) {\n      if (device.availability === '(available)' && device.state === 'Booted') {\n        return device;\n      }\n    }\n  }\n\n  return null;\n}\n/**\n * Starts iOS device syslog tail\n */\n\n\nasync function logIOS() {\n  const rawDevices = (0, _child_process().execFileSync)('xcrun', ['simctl', 'list', 'devices', '--json'], {\n    encoding: 'utf8'\n  });\n  const {\n    devices\n  } = JSON.parse(rawDevices);\n  const device = findAvailableDevice(devices);\n\n  if (device === null) {\n    _cliTools().logger.error('No active iOS device found');\n\n    return;\n  }\n\n  tailDeviceLogs(device.udid);\n}\n\nfunction tailDeviceLogs(udid) {\n  const logDir = _path().default.join(_os().default.homedir(), 'Library', 'Logs', 'CoreSimulator', udid, 'asl');\n\n  const log = (0, _child_process().spawnSync)('syslog', ['-w', '-F', 'std', '-d', logDir], {\n    stdio: 'inherit'\n  });\n\n  if (log.error !== null) {\n    throw log.error;\n  }\n}\n\nvar _default = {\n  name: 'log-ios',\n  description: 'starts iOS device syslog tail',\n  func: logIOS\n};\nexports.default = _default;\n\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}