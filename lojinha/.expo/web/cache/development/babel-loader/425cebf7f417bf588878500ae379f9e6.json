{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar configure_splash_screen_1 = require(\"@expo/configure-splash-screen\");\n\nvar core_plugins_1 = require(\"../plugins/core-plugins\");\n\nvar WarningAggregator = __importStar(require(\"../utils/warnings\"));\n\nexports.withSplashScreen = function (config) {\n  return core_plugins_1.withDangerousMod(config, ['android', function _callee(config) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(setSplashScreenAsync(config, config.modRequest.projectRoot));\n\n          case 2:\n            return _context.abrupt(\"return\", config);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }]);\n};\n\nfunction getSplashScreenConfig(config) {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;\n\n  if (!config.splash && !((_a = config.android) === null || _a === void 0 ? void 0 : _a.splash)) {\n    return;\n  }\n\n  var result = {\n    imageResizeMode: (_f = (_d = (_c = (_b = config.android) === null || _b === void 0 ? void 0 : _b.splash) === null || _c === void 0 ? void 0 : _c.resizeMode) !== null && _d !== void 0 ? _d : (_e = config.splash) === null || _e === void 0 ? void 0 : _e.resizeMode) !== null && _f !== void 0 ? _f : configure_splash_screen_1.SplashScreenImageResizeMode.CONTAIN,\n    backgroundColor: (_l = (_j = (_h = (_g = config.android) === null || _g === void 0 ? void 0 : _g.splash) === null || _h === void 0 ? void 0 : _h.backgroundColor) !== null && _j !== void 0 ? _j : (_k = config.splash) === null || _k === void 0 ? void 0 : _k.backgroundColor) !== null && _l !== void 0 ? _l : '#FFFFFF',\n    image: (_1 = (_y = (_v = (_s = (_p = (_o = (_m = config.android) === null || _m === void 0 ? void 0 : _m.splash) === null || _o === void 0 ? void 0 : _o.xxxhdpi) !== null && _p !== void 0 ? _p : (_r = (_q = config.android) === null || _q === void 0 ? void 0 : _q.splash) === null || _r === void 0 ? void 0 : _r.xxhdpi) !== null && _s !== void 0 ? _s : (_u = (_t = config.android) === null || _t === void 0 ? void 0 : _t.splash) === null || _u === void 0 ? void 0 : _u.xhdpi) !== null && _v !== void 0 ? _v : (_x = (_w = config.android) === null || _w === void 0 ? void 0 : _w.splash) === null || _x === void 0 ? void 0 : _x.hdpi) !== null && _y !== void 0 ? _y : (_0 = (_z = config.android) === null || _z === void 0 ? void 0 : _z.splash) === null || _0 === void 0 ? void 0 : _0.mdpi) !== null && _1 !== void 0 ? _1 : (_2 = config.splash) === null || _2 === void 0 ? void 0 : _2.image\n  };\n  return result;\n}\n\nexports.getSplashScreenConfig = getSplashScreenConfig;\n\nfunction setSplashScreenAsync(config, projectRoot) {\n  var splashScreenIsSupported, splashConfig;\n  return _regeneratorRuntime.async(function setSplashScreenAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          splashScreenIsSupported = config.sdkVersion === '39.0.0' || config.sdkVersion === '40.0.0' || !config.sdkVersion;\n\n          if (splashScreenIsSupported) {\n            _context2.next = 4;\n            break;\n          }\n\n          WarningAggregator.addWarningAndroid('splash', 'Unable to automatically configure splash screen. Please refer to the expo-splash-screen README for more information: https://github.com/expo/expo/tree/master/packages/expo-splash-screen');\n          return _context2.abrupt(\"return\");\n\n        case 4:\n          splashConfig = getSplashScreenConfig(config);\n\n          if (splashConfig) {\n            _context2.next = 7;\n            break;\n          }\n\n          return _context2.abrupt(\"return\");\n\n        case 7:\n          _context2.prev = 7;\n          _context2.next = 10;\n          return _regeneratorRuntime.awrap(configure_splash_screen_1.configureAndroidSplashScreen(projectRoot, splashConfig));\n\n        case 10:\n          _context2.next = 15;\n          break;\n\n        case 12:\n          _context2.prev = 12;\n          _context2.t0 = _context2[\"catch\"](7);\n          WarningAggregator.addWarningAndroid('splash', _context2.t0);\n\n        case 15:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[7, 12]], Promise);\n}\n\nexports.setSplashScreenAsync = setSplashScreenAsync;","map":{"version":3,"sources":["../../src/android/SplashScreen.ts"],"names":[],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport {\n  AndroidSplashScreenConfig,\n  configureAndroidSplashScreen,\n  SplashScreenImageResizeMode,\n} from '@expo/configure-splash-screen';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withDangerousMod } from '../plugins/core-plugins';\nimport * as WarningAggregator from '../utils/warnings';\n\nexport const withSplashScreen: ConfigPlugin = config => {\n  return withDangerousMod(config, [\n    'android',\n    async config => {\n      await setSplashScreenAsync(config, config.modRequest.projectRoot);\n      return config;\n    },\n  ]);\n};\n\nexport function getSplashScreenConfig(config: ExpoConfig): AndroidSplashScreenConfig | undefined {\n  if (!config.splash && !config.android?.splash) {\n    return;\n  }\n\n  const result: AndroidSplashScreenConfig = {\n    imageResizeMode:\n      config.android?.splash?.resizeMode ??\n      config.splash?.resizeMode ??\n      SplashScreenImageResizeMode.CONTAIN,\n    backgroundColor:\n      config.android?.splash?.backgroundColor ?? config.splash?.backgroundColor ?? '#FFFFFF', // white\n    image:\n      config.android?.splash?.xxxhdpi ??\n      config.android?.splash?.xxhdpi ??\n      config.android?.splash?.xhdpi ??\n      config.android?.splash?.hdpi ??\n      config.android?.splash?.mdpi ??\n      config.splash?.image,\n  };\n\n  return result;\n}\n\nexport async function setSplashScreenAsync(config: ExpoConfig, projectRoot: string) {\n  const splashScreenIsSupported =\n    config.sdkVersion === '39.0.0' || config.sdkVersion === '40.0.0' || !config.sdkVersion;\n  if (!splashScreenIsSupported) {\n    WarningAggregator.addWarningAndroid(\n      'splash',\n      'Unable to automatically configure splash screen. Please refer to the expo-splash-screen README for more information: https://github.com/expo/expo/tree/master/packages/expo-splash-screen'\n    );\n\n    return;\n  }\n\n  const splashConfig = getSplashScreenConfig(config);\n  if (!splashConfig) {\n    return;\n  }\n\n  try {\n    await configureAndroidSplashScreen(projectRoot, splashConfig);\n  } catch (e) {\n    WarningAggregator.addWarningAndroid('splash', e);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}