{"ast":null,"code":"'use strict';\n\nvar _extends = require(\"@babel/runtime/helpers/extends\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nvar _jsxFileName = \"/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/RNTester/js/examples/PanResponder/PanResponderExample.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar React = require('react');\n\nvar PanResponder = require(\"react-native-web/dist/exports/PanResponder\").default;\n\nvar StyleSheet = require(\"react-native-web/dist/exports/StyleSheet\").default;\n\nvar View = require(\"react-native-web/dist/exports/View\").default;\n\nvar RNTesterPage = require(\"../../components/RNTesterPage\");\n\nvar CIRCLE_SIZE = 80;\n\nvar PanResponderExample = function (_React$Component) {\n  _inherits(PanResponderExample, _React$Component);\n\n  var _super = _createSuper(PanResponderExample);\n\n  function PanResponderExample() {\n    var _this;\n\n    _classCallCheck(this, PanResponderExample);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this._previousLeft = 20;\n    _this._previousTop = 84;\n    _this._circleStyles = {\n      style: {}\n    };\n    _this.circle = null;\n    _this.state = {\n      left: 20,\n      top: 84,\n      pressed: false\n    };\n\n    _this._handleStartShouldSetPanResponder = function (event, gestureState) {\n      return true;\n    };\n\n    _this._handleMoveShouldSetPanResponder = function (event, gestureState) {\n      return true;\n    };\n\n    _this._handlePanResponderGrant = function (event, gestureState) {\n      _this.setState({\n        pressed: true\n      });\n    };\n\n    _this._handlePanResponderMove = function (event, gestureState) {\n      _this.setState({\n        left: _this._previousLeft + gestureState.dx,\n        top: _this._previousTop + gestureState.dy\n      });\n    };\n\n    _this._handlePanResponderEnd = function (event, gestureState) {\n      _this.setState({\n        pressed: false\n      });\n\n      _this._previousLeft += gestureState.dx;\n      _this._previousTop += gestureState.dy;\n    };\n\n    _this._panResponder = PanResponder.create({\n      onStartShouldSetPanResponder: _this._handleStartShouldSetPanResponder,\n      onMoveShouldSetPanResponder: _this._handleMoveShouldSetPanResponder,\n      onPanResponderGrant: _this._handlePanResponderGrant,\n      onPanResponderMove: _this._handlePanResponderMove,\n      onPanResponderRelease: _this._handlePanResponderEnd,\n      onPanResponderTerminate: _this._handlePanResponderEnd\n    });\n    return _this;\n  }\n\n  _createClass(PanResponderExample, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(RNTesterPage, {\n        noSpacer: true,\n        noScroll: true,\n        title: \"Basic gesture handling\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 7\n        }\n      }, React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 9\n        }\n      }, React.createElement(View, _extends({\n        ref: function ref(circle) {\n          _this2.circle = circle;\n        },\n        style: [styles.circle, {\n          translateX: this.state.left,\n          translateY: this.state.top,\n          backgroundColor: this.state.pressed ? 'blue' : 'green'\n        }]\n      }, this._panResponder.panHandlers, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }\n      }))));\n    }\n  }]);\n\n  return PanResponderExample;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  circle: {\n    width: CIRCLE_SIZE,\n    height: CIRCLE_SIZE,\n    backgroundColor: 'green',\n    borderRadius: CIRCLE_SIZE / 2,\n    position: 'absolute',\n    left: 0,\n    top: 0\n  },\n  container: {\n    flex: 1,\n    height: 500\n  }\n});\nexports.title = 'PanResponder Sample';\nexports.description = 'Shows the Use of PanResponder to provide basic gesture handling';\nexports.simpleExampleContainer = true;\nexports.examples = [{\n  title: 'Basic gesture handling',\n  render: function render() {\n    return React.createElement(PanResponderExample, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 14\n      }\n    });\n  }\n}];","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/RNTester/js/examples/PanResponder/PanResponderExample.js"],"names":["React","require","RNTesterPage","CIRCLE_SIZE","PanResponderExample","_previousLeft","_previousTop","_circleStyles","style","circle","state","left","top","pressed","_handleStartShouldSetPanResponder","event","gestureState","_handleMoveShouldSetPanResponder","_handlePanResponderGrant","setState","_handlePanResponderMove","dx","dy","_handlePanResponderEnd","_panResponder","PanResponder","create","onStartShouldSetPanResponder","onMoveShouldSetPanResponder","onPanResponderGrant","onPanResponderMove","onPanResponderRelease","onPanResponderTerminate","styles","container","translateX","translateY","backgroundColor","panHandlers","Component","StyleSheet","width","height","borderRadius","position","flex","exports","title","description","simpleExampleContainer","examples","render"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow weak\n */\n\n'use strict';\n\nconst React = require('react');\nconst {PanResponder, StyleSheet, View} = require('react-native');\nconst RNTesterPage = require('../../components/RNTesterPage');\n\nimport type {\n  PanResponderInstance,\n  GestureState,\n} from '../../../../Libraries/Interaction/PanResponder';\nimport type {PressEvent} from '../../../../Libraries/Types/CoreEventTypes';\n\ntype CircleStyles = {\n  backgroundColor?: string,\n  left?: number,\n  top?: number,\n  ...\n};\n\nconst CIRCLE_SIZE = 80;\n\ntype Props = $ReadOnly<{||}>;\ntype State = {|\n  left: number,\n  top: number,\n  pressed: boolean,\n|};\n\nclass PanResponderExample extends React.Component<Props, State> {\n  _previousLeft: number = 20;\n  _previousTop: number = 84;\n  _circleStyles: {|style: CircleStyles|} = {style: {}};\n  circle: ?React.ElementRef<typeof View> = null;\n\n  state: State = {\n    left: 20,\n    top: 84,\n    pressed: false,\n  };\n\n  _handleStartShouldSetPanResponder = (\n    event: PressEvent,\n    gestureState: GestureState,\n  ): boolean => {\n    // Should we become active when the user presses down on the circle?\n    return true;\n  };\n\n  _handleMoveShouldSetPanResponder = (\n    event: PressEvent,\n    gestureState: GestureState,\n  ): boolean => {\n    // Should we become active when the user moves a touch over the circle?\n    return true;\n  };\n\n  _handlePanResponderGrant = (\n    event: PressEvent,\n    gestureState: GestureState,\n  ) => {\n    this.setState({\n      pressed: true,\n    });\n  };\n\n  _handlePanResponderMove = (event: PressEvent, gestureState: GestureState) => {\n    this.setState({\n      left: this._previousLeft + gestureState.dx,\n      top: this._previousTop + gestureState.dy,\n    });\n  };\n\n  _handlePanResponderEnd = (event: PressEvent, gestureState: GestureState) => {\n    this.setState({\n      pressed: false,\n    });\n    this._previousLeft += gestureState.dx;\n    this._previousTop += gestureState.dy;\n  };\n\n  _panResponder: PanResponderInstance = PanResponder.create({\n    onStartShouldSetPanResponder: this._handleStartShouldSetPanResponder,\n    onMoveShouldSetPanResponder: this._handleMoveShouldSetPanResponder,\n    onPanResponderGrant: this._handlePanResponderGrant,\n    onPanResponderMove: this._handlePanResponderMove,\n    onPanResponderRelease: this._handlePanResponderEnd,\n    onPanResponderTerminate: this._handlePanResponderEnd,\n  });\n\n  render(): React.Node {\n    return (\n      <RNTesterPage\n        noSpacer={true}\n        noScroll={true}\n        title=\"Basic gesture handling\">\n        <View style={styles.container}>\n          <View\n            ref={circle => {\n              this.circle = circle;\n            }}\n            style={[\n              styles.circle,\n              {\n                translateX: this.state.left,\n                translateY: this.state.top,\n                backgroundColor: this.state.pressed ? 'blue' : 'green',\n              },\n            ]}\n            {...this._panResponder.panHandlers}\n          />\n        </View>\n      </RNTesterPage>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  circle: {\n    width: CIRCLE_SIZE,\n    height: CIRCLE_SIZE,\n    backgroundColor: 'green',\n    borderRadius: CIRCLE_SIZE / 2,\n    position: 'absolute',\n    left: 0,\n    top: 0,\n  },\n  container: {\n    flex: 1,\n    height: 500,\n  },\n});\n\nexports.title = 'PanResponder Sample';\nexports.description =\n  'Shows the Use of PanResponder to provide basic gesture handling';\nexports.simpleExampleContainer = true;\nexports.examples = [\n  {\n    title: 'Basic gesture handling',\n    render: function(): React.Element<typeof PanResponderExample> {\n      return <PanResponderExample />;\n    },\n  },\n];\n"]},"metadata":{},"sourceType":"script"}