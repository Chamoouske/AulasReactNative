{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar fs_extra_1 = __importDefault(require(\"fs-extra\"));\n\nvar glob_1 = require(\"glob\");\n\nvar path = __importStar(require(\"path\"));\n\nvar errors_1 = require(\"../utils/errors\");\n\nvar modules_1 = require(\"../utils/modules\");\n\nfunction getProjectFileAsync(projectRoot, name) {\n  var mainActivityJavaPath, mainActivityPathJava, mainActivityPathKotlin, isJava, isKotlin, filePath;\n  return _regeneratorRuntime.async(function getProjectFileAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          mainActivityJavaPath = glob_1.sync(path.join(projectRoot, \"android/app/src/main/java/**/\" + name + \".@(java|kt)\"))[0];\n          errors_1.assert(mainActivityJavaPath, \"Project file \\\"\" + name + \"\\\" does not exist in android project for root \\\"\" + projectRoot + \"\\\"\");\n          mainActivityPathJava = path.resolve(mainActivityJavaPath, \"../\" + name + \".java\");\n          mainActivityPathKotlin = path.resolve(mainActivityJavaPath, \"../\" + name + \".kt\");\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(fs_extra_1.default.pathExists(mainActivityPathJava));\n\n        case 6:\n          isJava = _context.sent;\n          _context.t0 = !isJava;\n\n          if (!_context.t0) {\n            _context.next = 12;\n            break;\n          }\n\n          _context.next = 11;\n          return _regeneratorRuntime.awrap(fs_extra_1.default.pathExists(mainActivityPathKotlin));\n\n        case 11:\n          _context.t0 = _context.sent;\n\n        case 12:\n          isKotlin = _context.t0;\n\n          if (!(!isJava && !isKotlin)) {\n            _context.next = 15;\n            break;\n          }\n\n          throw new Error(\"Failed to find '\" + name + \"' file for project: \" + projectRoot + \".\");\n\n        case 15:\n          filePath = isJava ? mainActivityPathJava : mainActivityPathKotlin;\n          return _context.abrupt(\"return\", {\n            path: path.normalize(filePath),\n            contents: fs_extra_1.default.readFileSync(filePath, 'utf8'),\n            language: isJava ? 'java' : 'kt'\n          });\n\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getMainApplicationAsync(projectRoot) {\n  return _regeneratorRuntime.async(function getMainApplicationAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          return _context2.abrupt(\"return\", getProjectFileAsync(projectRoot, 'MainApplication'));\n\n        case 1:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.getMainApplicationAsync = getMainApplicationAsync;\n\nfunction getMainActivityAsync(projectRoot) {\n  return _regeneratorRuntime.async(function getMainActivityAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          return _context3.abrupt(\"return\", getProjectFileAsync(projectRoot, 'MainActivity'));\n\n        case 1:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.getMainActivityAsync = getMainActivityAsync;\n\nfunction getGradleFileAsync(projectRoot, gradleName) {\n  var groovyPath, ktPath, isGroovy, isKotlin, filePath;\n  return _regeneratorRuntime.async(function getGradleFileAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          groovyPath = path.resolve(projectRoot, gradleName + \".gradle\");\n          ktPath = path.resolve(projectRoot, gradleName + \".gradle.kts\");\n          _context4.next = 4;\n          return _regeneratorRuntime.awrap(fs_extra_1.default.pathExists(groovyPath));\n\n        case 4:\n          isGroovy = _context4.sent;\n          _context4.t0 = !isGroovy;\n\n          if (!_context4.t0) {\n            _context4.next = 10;\n            break;\n          }\n\n          _context4.next = 9;\n          return _regeneratorRuntime.awrap(fs_extra_1.default.pathExists(ktPath));\n\n        case 9:\n          _context4.t0 = _context4.sent;\n\n        case 10:\n          isKotlin = _context4.t0;\n\n          if (!(!isGroovy && !isKotlin)) {\n            _context4.next = 13;\n            break;\n          }\n\n          throw new Error(\"Failed to find '\" + gradleName + \".gradle' file for project: \" + projectRoot + \".\");\n\n        case 13:\n          filePath = isGroovy ? groovyPath : ktPath;\n          return _context4.abrupt(\"return\", {\n            path: path.normalize(filePath),\n            contents: fs_extra_1.default.readFileSync(filePath, 'utf8'),\n            language: isGroovy ? 'groovy' : 'kt'\n          });\n\n        case 15:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getProjectBuildGradleAsync(projectRoot) {\n  return _regeneratorRuntime.async(function getProjectBuildGradleAsync$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          return _context5.abrupt(\"return\", getGradleFileAsync(path.join(projectRoot, 'android'), 'build'));\n\n        case 1:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.getProjectBuildGradleAsync = getProjectBuildGradleAsync;\n\nfunction getSettingsGradleAsync(projectRoot) {\n  return _regeneratorRuntime.async(function getSettingsGradleAsync$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          return _context6.abrupt(\"return\", getGradleFileAsync(path.join(projectRoot, 'android'), 'settings'));\n\n        case 1:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.getSettingsGradleAsync = getSettingsGradleAsync;\n\nfunction getAppBuildGradleAsync(projectRoot) {\n  return _regeneratorRuntime.async(function getAppBuildGradleAsync$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          return _context7.abrupt(\"return\", getGradleFileAsync(path.join(projectRoot, 'android', 'app'), 'build'));\n\n        case 1:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.getAppBuildGradleAsync = getAppBuildGradleAsync;\n\nfunction getAppBuildGradle(projectRoot) {\n  return path.join(projectRoot, 'android', 'app', 'build.gradle');\n}\n\nexports.getAppBuildGradle = getAppBuildGradle;\n\nfunction getProjectPathOrThrowAsync(projectRoot) {\n  var projectPath;\n  return _regeneratorRuntime.async(function getProjectPathOrThrowAsync$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          projectPath = path.join(projectRoot, 'android');\n          _context8.next = 3;\n          return _regeneratorRuntime.awrap(modules_1.directoryExistsAsync(projectPath));\n\n        case 3:\n          if (!_context8.sent) {\n            _context8.next = 5;\n            break;\n          }\n\n          return _context8.abrupt(\"return\", projectPath);\n\n        case 5:\n          throw new Error(\"Android project folder is missing in project: \" + projectRoot);\n\n        case 6:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.getProjectPathOrThrowAsync = getProjectPathOrThrowAsync;\n\nfunction getAndroidManifestAsync(projectRoot) {\n  var projectPath, filePath;\n  return _regeneratorRuntime.async(function getAndroidManifestAsync$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return _regeneratorRuntime.awrap(getProjectPathOrThrowAsync(projectRoot));\n\n        case 2:\n          projectPath = _context9.sent;\n          filePath = path.join(projectPath, 'app/src/main/AndroidManifest.xml');\n          return _context9.abrupt(\"return\", filePath);\n\n        case 5:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.getAndroidManifestAsync = getAndroidManifestAsync;\n\nfunction getResourceFolderAsync(projectRoot) {\n  var projectPath;\n  return _regeneratorRuntime.async(function getResourceFolderAsync$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return _regeneratorRuntime.awrap(getProjectPathOrThrowAsync(projectRoot));\n\n        case 2:\n          projectPath = _context10.sent;\n          return _context10.abrupt(\"return\", path.join(projectPath, \"app/src/main/res\"));\n\n        case 4:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.getResourceFolderAsync = getResourceFolderAsync;\n\nfunction getResourceXMLPathAsync(projectRoot, _ref) {\n  var _ref$kind, kind, name, resourcePath, filePath;\n\n  return _regeneratorRuntime.async(function getResourceXMLPathAsync$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _ref$kind = _ref.kind, kind = _ref$kind === void 0 ? 'values' : _ref$kind, name = _ref.name;\n          _context11.next = 3;\n          return _regeneratorRuntime.awrap(getResourceFolderAsync(projectRoot));\n\n        case 3:\n          resourcePath = _context11.sent;\n          filePath = path.join(resourcePath, kind + \"/\" + name + \".xml\");\n          return _context11.abrupt(\"return\", filePath);\n\n        case 6:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.getResourceXMLPathAsync = getResourceXMLPathAsync;","map":{"version":3,"sources":["../../src/android/Paths.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from 'fs-extra';\nimport { sync as globSync } from 'glob';\nimport * as path from 'path';\n\nimport { assert } from '../utils/errors';\nimport { directoryExistsAsync } from '../utils/modules';\nimport { ResourceKind } from './Resources';\n\nexport interface ProjectFile<L extends string = string> {\n  path: string;\n  language: L;\n  contents: string;\n}\n\nexport type GradleProjectFile = ProjectFile<'groovy' | 'kt'>;\n\nexport type ApplicationProjectFile = ProjectFile<'java' | 'kt'>;\n\nasync function getProjectFileAsync(\n  projectRoot: string,\n  name: string\n): Promise<ApplicationProjectFile> {\n  const mainActivityJavaPath = globSync(\n    path.join(projectRoot, `android/app/src/main/java/**/${name}.@(java|kt)`)\n  )[0];\n  assert(\n    mainActivityJavaPath,\n    `Project file \"${name}\" does not exist in android project for root \"${projectRoot}\"`\n  );\n\n  const mainActivityPathJava = path.resolve(mainActivityJavaPath, `../${name}.java`);\n  const mainActivityPathKotlin = path.resolve(mainActivityJavaPath, `../${name}.kt`);\n\n  const isJava = await fs.pathExists(mainActivityPathJava);\n  const isKotlin = !isJava && (await fs.pathExists(mainActivityPathKotlin));\n\n  if (!isJava && !isKotlin) {\n    throw new Error(`Failed to find '${name}' file for project: ${projectRoot}.`);\n  }\n  const filePath = isJava ? mainActivityPathJava : mainActivityPathKotlin;\n  return {\n    path: path.normalize(filePath),\n    contents: fs.readFileSync(filePath, 'utf8'),\n    language: isJava ? 'java' : 'kt',\n  };\n}\n\nexport async function getMainApplicationAsync(\n  projectRoot: string\n): Promise<ApplicationProjectFile> {\n  return getProjectFileAsync(projectRoot, 'MainApplication');\n}\n\nexport async function getMainActivityAsync(projectRoot: string): Promise<ApplicationProjectFile> {\n  return getProjectFileAsync(projectRoot, 'MainActivity');\n}\n\nasync function getGradleFileAsync(\n  projectRoot: string,\n  gradleName: string\n): Promise<GradleProjectFile> {\n  const groovyPath = path.resolve(projectRoot, `${gradleName}.gradle`);\n  const ktPath = path.resolve(projectRoot, `${gradleName}.gradle.kts`);\n\n  const isGroovy = await fs.pathExists(groovyPath);\n  const isKotlin = !isGroovy && (await fs.pathExists(ktPath));\n\n  if (!isGroovy && !isKotlin) {\n    throw new Error(`Failed to find '${gradleName}.gradle' file for project: ${projectRoot}.`);\n  }\n  const filePath = isGroovy ? groovyPath : ktPath;\n  return {\n    path: path.normalize(filePath),\n    contents: fs.readFileSync(filePath, 'utf8'),\n    language: isGroovy ? 'groovy' : 'kt',\n  };\n}\n\nexport async function getProjectBuildGradleAsync(projectRoot: string): Promise<GradleProjectFile> {\n  return getGradleFileAsync(path.join(projectRoot, 'android'), 'build');\n}\n\nexport async function getSettingsGradleAsync(projectRoot: string): Promise<GradleProjectFile> {\n  return getGradleFileAsync(path.join(projectRoot, 'android'), 'settings');\n}\n\nexport async function getAppBuildGradleAsync(projectRoot: string): Promise<GradleProjectFile> {\n  return getGradleFileAsync(path.join(projectRoot, 'android', 'app'), 'build');\n}\n\nexport function getAppBuildGradle(projectRoot: string): string {\n  return path.join(projectRoot, 'android', 'app', 'build.gradle');\n}\n\nexport async function getProjectPathOrThrowAsync(projectRoot: string): Promise<string> {\n  const projectPath = path.join(projectRoot, 'android');\n  if (await directoryExistsAsync(projectPath)) {\n    return projectPath;\n  }\n  throw new Error(`Android project folder is missing in project: ${projectRoot}`);\n}\n\nexport async function getAndroidManifestAsync(projectRoot: string): Promise<string> {\n  const projectPath = await getProjectPathOrThrowAsync(projectRoot);\n  const filePath = path.join(projectPath, 'app/src/main/AndroidManifest.xml');\n  return filePath;\n}\n\nexport async function getResourceFolderAsync(projectRoot: string): Promise<string> {\n  const projectPath = await getProjectPathOrThrowAsync(projectRoot);\n  return path.join(projectPath, `app/src/main/res`);\n}\n\nexport async function getResourceXMLPathAsync(\n  projectRoot: string,\n  { kind = 'values', name }: { kind?: ResourceKind; name: 'colors' | 'strings' | 'styles' | string }\n): Promise<string> {\n  const resourcePath = await getResourceFolderAsync(projectRoot);\n\n  const filePath = path.join(resourcePath, `${kind}/${name}.xml`);\n  return filePath;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}