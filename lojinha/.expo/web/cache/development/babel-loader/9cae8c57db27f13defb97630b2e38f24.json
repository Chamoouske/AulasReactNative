{"ast":null,"code":"if (!process.nextTick) {\n  process.nextTick = function (callback) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    setTimeout(function () {\n      return callback.apply(void 0, args);\n    }, 0);\n  };\n}","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/expo-sqlite/src/polyfillNextTick.ts"],"names":["process","nextTick","callback","args","setTimeout"],"mappings":"AAKA,IAAI,CAACA,OAAO,CAACC,QAAb,EAAuB;AACrBD,EAAAA,OAAO,CAACC,QAAR,GAAmB,UAACC,QAAD,EAAuB;AAAA,sCAATC,IAAS;AAATA,MAAAA,IAAS;AAAA;;AACxCC,IAAAA,UAAU,CAAC;AAAA,aAAMF,QAAQ,MAAR,SAAYC,IAAZ,CAAN;AAAA,KAAD,EAA0B,CAA1B,CAAV;AACD,GAFD;AAGD","sourcesContent":["/**\n * Defines a small polyfill for process.nextTick. Eventually we'd like to replace this polyfill with\n * a native implementation with the correct timing semantics.\n */\n\nif (!process.nextTick) {\n  process.nextTick = (callback, ...args) => {\n    setTimeout(() => callback(...args), 0);\n  };\n}\n"]},"metadata":{},"sourceType":"script"}