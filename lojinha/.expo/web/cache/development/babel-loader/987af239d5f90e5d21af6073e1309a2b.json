{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _child_process() {\n  var data = require(\"child_process\");\n\n  _child_process = function _child_process() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _getAdbPath = _interopRequireDefault(require(\"./getAdbPath\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction tryRunAdbReverse(packagerPort, device) {\n  try {\n    var adbPath = (0, _getAdbPath.default)();\n    var adbArgs = ['reverse', \"tcp:\" + packagerPort, \"tcp:\" + packagerPort];\n\n    if (device) {\n      adbArgs.unshift('-s', device);\n    }\n\n    _cliTools().logger.info('Connecting to the development server...');\n\n    _cliTools().logger.debug(\"Running command \\\"\" + adbPath + \" \" + adbArgs.join(' ') + \"\\\"\");\n\n    (0, _child_process().execFileSync)(adbPath, adbArgs, {\n      stdio: 'inherit'\n    });\n  } catch (e) {\n    _cliTools().logger.warn(\"Failed to connect to development server using \\\"adb reverse\\\": \" + e.message);\n  }\n}\n\nvar _default = tryRunAdbReverse;\nexports.default = _default;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryRunAdbReverse.js"],"names":["Object","defineProperty","exports","value","default","_child_process","data","require","_cliTools","_getAdbPath","_interopRequireDefault","obj","__esModule","tryRunAdbReverse","packagerPort","device","adbPath","adbArgs","unshift","logger","info","debug","join","execFileSync","stdio","e","warn","message","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,SAASC,cAAT,GAA0B;AACxB,MAAMC,IAAI,GAAGC,OAAO,CAAC,eAAD,CAApB;;AAEAF,EAAAA,cAAc,GAAG,0BAAY;AAC3B,WAAOC,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,SAASE,SAAT,GAAqB;AACnB,MAAMF,IAAI,GAAGC,OAAO,CAAC,mCAAD,CAApB;;AAEAC,EAAAA,SAAS,GAAG,qBAAY;AACtB,WAAOF,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,IAAIG,WAAW,GAAGC,sBAAsB,CAACH,OAAO,gBAAR,CAAxC;;AAEA,SAASG,sBAAT,CAAgCC,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEP,IAAAA,OAAO,EAAEO;AAAX,GAArC;AAAwD;;AAU/F,SAASE,gBAAT,CAA0BC,YAA1B,EAAwCC,MAAxC,EAAgD;AAC9C,MAAI;AACF,QAAMC,OAAO,GAAG,CAAC,GAAGP,WAAW,CAACL,OAAhB,GAAhB;AACA,QAAMa,OAAO,GAAG,CAAC,SAAD,WAAmBH,YAAnB,WAA0CA,YAA1C,CAAhB;;AAEA,QAAIC,MAAJ,EAAY;AACVE,MAAAA,OAAO,CAACC,OAAR,CAAgB,IAAhB,EAAsBH,MAAtB;AACD;;AAEDP,IAAAA,SAAS,GAAGW,MAAZ,CAAmBC,IAAnB,CAAwB,yCAAxB;;AAEAZ,IAAAA,SAAS,GAAGW,MAAZ,CAAmBE,KAAnB,wBAA6CL,OAA7C,SAAwDC,OAAO,CAACK,IAAR,CAAa,GAAb,CAAxD;;AAEA,KAAC,GAAGjB,cAAc,GAAGkB,YAArB,EAAmCP,OAAnC,EAA4CC,OAA5C,EAAqD;AACnDO,MAAAA,KAAK,EAAE;AAD4C,KAArD;AAGD,GAfD,CAeE,OAAOC,CAAP,EAAU;AACVjB,IAAAA,SAAS,GAAGW,MAAZ,CAAmBO,IAAnB,qEAAwFD,CAAC,CAACE,OAA1F;AACD;AACF;;AAED,IAAIC,QAAQ,GAAGf,gBAAf;AACAX,OAAO,CAACE,OAAR,GAAkBwB,QAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _child_process() {\n  const data = require(\"child_process\");\n\n  _child_process = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _getAdbPath = _interopRequireDefault(require(\"./getAdbPath\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n// Runs ADB reverse tcp:8081 tcp:8081 to allow loading the jsbundle from the packager\nfunction tryRunAdbReverse(packagerPort, device) {\n  try {\n    const adbPath = (0, _getAdbPath.default)();\n    const adbArgs = ['reverse', `tcp:${packagerPort}`, `tcp:${packagerPort}`]; // If a device is specified then tell adb to use it\n\n    if (device) {\n      adbArgs.unshift('-s', device);\n    }\n\n    _cliTools().logger.info('Connecting to the development server...');\n\n    _cliTools().logger.debug(`Running command \"${adbPath} ${adbArgs.join(' ')}\"`);\n\n    (0, _child_process().execFileSync)(adbPath, adbArgs, {\n      stdio: 'inherit'\n    });\n  } catch (e) {\n    _cliTools().logger.warn(`Failed to connect to development server using \"adb reverse\": ${e.message}`);\n  }\n}\n\nvar _default = tryRunAdbReverse;\nexports.default = _default;\n\n//# sourceMappingURL=tryRunAdbReverse.js.map"]},"metadata":{},"sourceType":"script"}