{"ast":null,"code":"'use strict';\n\nimport { expectCodeIsEqual, FakeWritable } from \"../src/TestHelpers\";\nimport { emitNotificationDecl, emitRequestDecl, emitResponseDecl, emitTypeDecl } from \"../src/HeaderWriter\";\nimport { Event } from \"../src/Event\";\nimport { Command } from \"../src/Command\";\nimport { Type } from \"../src/Type\";\nvar stream = null;\nbeforeEach(function () {\n  stream = new FakeWritable();\n});\ntest('emits type decl', function () {\n  var obj = {\n    'id': 'Location',\n    'type': 'object',\n    'properties': [{\n      'name': 'scriptId',\n      '$ref': 'Runtime.ScriptId',\n      'description': 'Script identifier as reported in the <code>Debugger.scriptParsed</code>.'\n    }, {\n      'name': 'lineNumber',\n      'type': 'integer',\n      'description': 'Line number in the script (0-based).'\n    }, {\n      'name': 'columnNumber',\n      'type': 'integer',\n      'optional': true,\n      'description': 'Column number in the script (0-based).'\n    }],\n    'description': 'Location in the source code.'\n  };\n  var type = Type.create('Debugger', obj);\n  emitTypeDecl(stream, type);\n  expectCodeIsEqual(stream.get(), \"\\n    struct debugger::Location : public Serializable {\\n      Location() = default;\\n      explicit Location(const folly::dynamic &obj);\\n      folly::dynamic toDynamic() const override;\\n\\n      runtime::ScriptId scriptId{};\\n      int lineNumber{};\\n      folly::Optional<int> columnNumber;\\n    };\\n  \");\n});\ntest('emits request decl', function () {\n  var obj = {\n    'name': 'getScriptSource',\n    'parameters': [{\n      'name': 'scriptId',\n      '$ref': 'Runtime.ScriptId',\n      'description': 'Id of the script to get source for.'\n    }],\n    'returns': [{\n      'name': 'scriptSource',\n      'type': 'string',\n      'description': 'Script source.'\n    }],\n    'description': 'Returns source for the script with given id.'\n  };\n  var command = Command.create('Debugger', obj);\n  emitRequestDecl(stream, command);\n  expectCodeIsEqual(stream.get(), \"\\n    struct debugger::GetScriptSourceRequest : public Request {\\n      GetScriptSourceRequest();\\n      explicit GetScriptSourceRequest(const folly::dynamic &obj);\\n\\n      folly::dynamic toDynamic() const override;\\n      void accept(RequestHandler &handler) const override;\\n\\n      runtime::ScriptId scriptId{};\\n    };\\n  \");\n});\ntest('emits response decl', function () {\n  var obj = {\n    'name': 'getScriptSource',\n    'parameters': [{\n      'name': 'scriptId',\n      '$ref': 'Runtime.ScriptId',\n      'description': 'Id of the script to get source for.'\n    }],\n    'returns': [{\n      'name': 'scriptSource',\n      'type': 'string',\n      'description': 'Script source.'\n    }],\n    'description': 'Returns source for the script with given id.'\n  };\n  var command = Command.create('Debugger', obj);\n  emitResponseDecl(stream, command);\n  expectCodeIsEqual(stream.get(), \"\\n    struct debugger::GetScriptSourceResponse : public Response {\\n      GetScriptSourceResponse() = default;\\n      explicit GetScriptSourceResponse(const folly::dynamic &obj);\\n      folly::dynamic toDynamic() const override;\\n\\n      std::string scriptSource;\\n    };\\n  \");\n});\ntest('emits notification decl', function () {\n  var obj = {\n    'name': 'messageAdded',\n    'parameters': [{\n      'name': 'message',\n      '$ref': 'ConsoleMessage',\n      'description': 'Console message that has been added.'\n    }],\n    'description': 'Issued when new console message is added.'\n  };\n  var event = Event.create('Console', obj);\n  emitNotificationDecl(stream, event);\n  expectCodeIsEqual(stream.get(), \"\\n    struct console::MessageAddedNotification : public Notification {\\n      MessageAddedNotification();\\n      explicit MessageAddedNotification(const folly::dynamic &obj);\\n      folly::dynamic toDynamic() const override;\\n\\n      console::ConsoleMessage message{};\\n    };\\n  \");\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/ReactCommon/hermes/inspector/tools/msggen/__tests__/HeaderWriterTest.js"],"names":["expectCodeIsEqual","FakeWritable","emitNotificationDecl","emitRequestDecl","emitResponseDecl","emitTypeDecl","Event","Command","Type","stream","beforeEach","test","obj","type","create","get","command","event"],"mappings":"AAOA;;AAEA,SAASA,iBAAT,EAA4BC,YAA5B;AACA,SACEC,oBADF,EAEEC,eAFF,EAGEC,gBAHF,EAIEC,YAJF;AAMA,SAASC,KAAT;AACA,SAASC,OAAT;AACA,SAASC,IAAT;AAEA,IAAIC,MAAM,GAAG,IAAb;AAEAC,UAAU,CAAC,YAAM;AACfD,EAAAA,MAAM,GAAG,IAAIR,YAAJ,EAAT;AACD,CAFS,CAAV;AAIAU,IAAI,CAAC,iBAAD,EAAoB,YAAM;AAC5B,MAAIC,GAAG,GAAG;AACR,UAAM,UADE;AAER,YAAQ,QAFA;AAGR,kBAAc,CACV;AAAE,cAAQ,UAAV;AAAsB,cAAQ,kBAA9B;AAAkD,qBAAe;AAAjE,KADU,EAEV;AAAE,cAAQ,YAAV;AAAwB,cAAQ,SAAhC;AAA2C,qBAAe;AAA1D,KAFU,EAGV;AAAE,cAAQ,cAAV;AAA0B,cAAQ,SAAlC;AAA6C,kBAAY,IAAzD;AAA+D,qBAAe;AAA9E,KAHU,CAHN;AAQR,mBAAe;AARP,GAAV;AAUA,MAAIC,IAAI,GAAGL,IAAI,CAACM,MAAL,CAAY,UAAZ,EAAwBF,GAAxB,CAAX;AAEAP,EAAAA,YAAY,CAACI,MAAD,EAASI,IAAT,CAAZ;AAEAb,EAAAA,iBAAiB,CAACS,MAAM,CAACM,GAAP,EAAD,sTAAjB;AAWD,CA1BG,CAAJ;AA4BAJ,IAAI,CAAC,oBAAD,EAAuB,YAAM;AAC/B,MAAIC,GAAG,GAAG;AACR,YAAQ,iBADA;AAER,kBAAc,CACZ;AAAE,cAAQ,UAAV;AAAsB,cAAQ,kBAA9B;AAAkD,qBAAe;AAAjE,KADY,CAFN;AAKR,eAAW,CACT;AAAE,cAAQ,cAAV;AAA0B,cAAQ,QAAlC;AAA4C,qBAAe;AAA3D,KADS,CALH;AAQR,mBAAe;AARP,GAAV;AAUA,MAAII,OAAO,GAAGT,OAAO,CAACO,MAAR,CAAe,UAAf,EAA2BF,GAA3B,CAAd;AAEAT,EAAAA,eAAe,CAACM,MAAD,EAASO,OAAT,CAAf;AAEAhB,EAAAA,iBAAiB,CAACS,MAAM,CAACM,GAAP,EAAD,4UAAjB;AAWD,CA1BG,CAAJ;AA4BAJ,IAAI,CAAC,qBAAD,EAAwB,YAAM;AAChC,MAAIC,GAAG,GAAG;AACR,YAAQ,iBADA;AAER,kBAAc,CACZ;AAAE,cAAQ,UAAV;AAAsB,cAAQ,kBAA9B;AAAkD,qBAAe;AAAjE,KADY,CAFN;AAKR,eAAW,CACT;AAAE,cAAQ,cAAV;AAA0B,cAAQ,QAAlC;AAA4C,qBAAe;AAA3D,KADS,CALH;AAQR,mBAAe;AARP,GAAV;AAUA,MAAII,OAAO,GAAGT,OAAO,CAACO,MAAR,CAAe,UAAf,EAA2BF,GAA3B,CAAd;AAEAR,EAAAA,gBAAgB,CAACK,MAAD,EAASO,OAAT,CAAhB;AAEAhB,EAAAA,iBAAiB,CAACS,MAAM,CAACM,GAAP,EAAD,wRAAjB;AASD,CAxBG,CAAJ;AA0BAJ,IAAI,CAAC,yBAAD,EAA4B,YAAM;AACpC,MAAIC,GAAG,GAAG;AACR,YAAQ,cADA;AAER,kBAAc,CACZ;AAAE,cAAQ,SAAV;AAAqB,cAAQ,gBAA7B;AAA+C,qBAAe;AAA9D,KADY,CAFN;AAKR,mBAAe;AALP,GAAV;AAOA,MAAIK,KAAK,GAAGX,KAAK,CAACQ,MAAN,CAAa,SAAb,EAAwBF,GAAxB,CAAZ;AAEAV,EAAAA,oBAAoB,CAACO,MAAD,EAASQ,KAAT,CAApB;AAEAjB,EAAAA,iBAAiB,CAACS,MAAM,CAACM,GAAP,EAAD,6RAAjB;AASD,CArBG,CAAJ","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nimport { expectCodeIsEqual, FakeWritable } from '../src/TestHelpers';\nimport {\n  emitNotificationDecl,\n  emitRequestDecl,\n  emitResponseDecl,\n  emitTypeDecl,\n} from '../src/HeaderWriter';\nimport { Event } from '../src/Event';\nimport { Command } from '../src/Command';\nimport { Type } from '../src/Type';\n\nlet stream = null;\n\nbeforeEach(() => {\n  stream = new FakeWritable();\n});\n\ntest('emits type decl', () => {\n  let obj = {\n    'id': 'Location',\n    'type': 'object',\n    'properties': [\n        { 'name': 'scriptId', '$ref': 'Runtime.ScriptId', 'description': 'Script identifier as reported in the <code>Debugger.scriptParsed</code>.' },\n        { 'name': 'lineNumber', 'type': 'integer', 'description': 'Line number in the script (0-based).' },\n        { 'name': 'columnNumber', 'type': 'integer', 'optional': true, 'description': 'Column number in the script (0-based).' },\n    ],\n    'description': 'Location in the source code.',\n  };\n  let type = Type.create('Debugger', obj);\n\n  emitTypeDecl(stream, type);\n\n  expectCodeIsEqual(stream.get(), `\n    struct debugger::Location : public Serializable {\n      Location() = default;\n      explicit Location(const folly::dynamic &obj);\n      folly::dynamic toDynamic() const override;\n\n      runtime::ScriptId scriptId{};\n      int lineNumber{};\n      folly::Optional<int> columnNumber;\n    };\n  `);\n});\n\ntest('emits request decl', () => {\n  let obj = {\n    'name': 'getScriptSource',\n    'parameters': [\n      { 'name': 'scriptId', '$ref': 'Runtime.ScriptId', 'description': 'Id of the script to get source for.' },\n    ],\n    'returns': [\n      { 'name': 'scriptSource', 'type': 'string', 'description': 'Script source.' },\n    ],\n    'description': 'Returns source for the script with given id.',\n  };\n  let command = Command.create('Debugger', obj);\n\n  emitRequestDecl(stream, command);\n\n  expectCodeIsEqual(stream.get(), `\n    struct debugger::GetScriptSourceRequest : public Request {\n      GetScriptSourceRequest();\n      explicit GetScriptSourceRequest(const folly::dynamic &obj);\n\n      folly::dynamic toDynamic() const override;\n      void accept(RequestHandler &handler) const override;\n\n      runtime::ScriptId scriptId{};\n    };\n  `);\n});\n\ntest('emits response decl', () => {\n  let obj = {\n    'name': 'getScriptSource',\n    'parameters': [\n      { 'name': 'scriptId', '$ref': 'Runtime.ScriptId', 'description': 'Id of the script to get source for.' },\n    ],\n    'returns': [\n      { 'name': 'scriptSource', 'type': 'string', 'description': 'Script source.' },\n    ],\n    'description': 'Returns source for the script with given id.',\n  };\n  let command = Command.create('Debugger', obj);\n\n  emitResponseDecl(stream, command);\n\n  expectCodeIsEqual(stream.get(), `\n    struct debugger::GetScriptSourceResponse : public Response {\n      GetScriptSourceResponse() = default;\n      explicit GetScriptSourceResponse(const folly::dynamic &obj);\n      folly::dynamic toDynamic() const override;\n\n      std::string scriptSource;\n    };\n  `);\n});\n\ntest('emits notification decl', () => {\n  let obj = {\n    'name': 'messageAdded',\n    'parameters': [\n      { 'name': 'message', '$ref': 'ConsoleMessage', 'description': 'Console message that has been added.' },\n    ],\n    'description': 'Issued when new console message is added.',\n  };\n  let event = Event.create('Console', obj);\n\n  emitNotificationDecl(stream, event);\n\n  expectCodeIsEqual(stream.get(), `\n    struct console::MessageAddedNotification : public Notification {\n      MessageAddedNotification();\n      explicit MessageAddedNotification(const folly::dynamic &obj);\n      folly::dynamic toDynamic() const override;\n\n      console::ConsoleMessage message{};\n    };\n  `);\n});\n"]},"metadata":{},"sourceType":"module"}