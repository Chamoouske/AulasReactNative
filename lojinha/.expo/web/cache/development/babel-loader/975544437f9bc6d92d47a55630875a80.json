{"ast":null,"code":"'use strict';\n\nvar base64 = require('base64-js');\n\nvar _require = require('util'),\n    TextEncoder = _require.TextEncoder,\n    TextDecoder = _require.TextDecoder;\n\ndescribe('binaryToBase64', function () {\n  var binaryToBase64 = require(\"../binaryToBase64\");\n\n  it('should encode a Uint8Array', function () {\n    var input = new TextEncoder().encode('Test string');\n    expect(base64ToString(binaryToBase64(input))).toEqual('Test string');\n  });\n  it('should encode an ArrayBuffer', function () {\n    var input = new TextEncoder().encode('Test string').buffer;\n    expect(base64ToString(binaryToBase64(input))).toEqual('Test string');\n  });\n  it('should encode a DataView', function () {\n    var input = new DataView(new TextEncoder().encode('Test string').buffer);\n    expect(base64ToString(binaryToBase64(input))).toEqual('Test string');\n  });\n  it('should not encode a non ArrayBuffer or non typed array', function () {\n    var input = ['i', 'n', 'v', 'a', 'l', 'i', 'd'];\n    expect(function () {\n      return binaryToBase64(input);\n    }).toThrowError();\n  });\n});\n\nfunction base64ToString(base64String) {\n  var byteArray = base64.toByteArray(base64String);\n  return new TextDecoder().decode(byteArray);\n}","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Utilities/__tests__/binaryToBase64-test.js"],"names":["base64","require","TextEncoder","TextDecoder","describe","binaryToBase64","it","input","encode","expect","base64ToString","toEqual","buffer","DataView","toThrowError","base64String","byteArray","toByteArray","decode"],"mappings":"AAUA;;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAAtB;;eACmCA,OAAO,CAAC,MAAD,C;IAAnCC,W,YAAAA,W;IAAaC,W,YAAAA,W;;AAEpBC,QAAQ,CAAC,gBAAD,EAAmB,YAAM;AAC/B,MAAMC,cAAc,GAAGJ,OAAO,qBAA9B;;AAEAK,EAAAA,EAAE,CAAC,4BAAD,EAA+B,YAAM;AACrC,QAAMC,KAAK,GAAG,IAAIL,WAAJ,GAAkBM,MAAlB,CAAyB,aAAzB,CAAd;AAEAC,IAAAA,MAAM,CAACC,cAAc,CAACL,cAAc,CAACE,KAAD,CAAf,CAAf,CAAN,CAA8CI,OAA9C,CAAsD,aAAtD;AACD,GAJC,CAAF;AAMAL,EAAAA,EAAE,CAAC,8BAAD,EAAiC,YAAM;AACvC,QAAMC,KAAK,GAAG,IAAIL,WAAJ,GAAkBM,MAAlB,CAAyB,aAAzB,EAAwCI,MAAtD;AAEAH,IAAAA,MAAM,CAACC,cAAc,CAACL,cAAc,CAACE,KAAD,CAAf,CAAf,CAAN,CAA8CI,OAA9C,CAAsD,aAAtD;AACD,GAJC,CAAF;AAMAL,EAAAA,EAAE,CAAC,0BAAD,EAA6B,YAAM;AACnC,QAAMC,KAAK,GAAG,IAAIM,QAAJ,CAAa,IAAIX,WAAJ,GAAkBM,MAAlB,CAAyB,aAAzB,EAAwCI,MAArD,CAAd;AAEAH,IAAAA,MAAM,CAACC,cAAc,CAACL,cAAc,CAACE,KAAD,CAAf,CAAf,CAAN,CAA8CI,OAA9C,CAAsD,aAAtD;AACD,GAJC,CAAF;AAMAL,EAAAA,EAAE,CAAC,wDAAD,EAA2D,YAAM;AACjE,QAAMC,KAAK,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,CAAd;AAEAE,IAAAA,MAAM,CAAC;AAAA,aAAMJ,cAAc,CAACE,KAAD,CAApB;AAAA,KAAD,CAAN,CAAoCO,YAApC;AACD,GAJC,CAAF;AAKD,CA1BO,CAAR;;AA4BA,SAASJ,cAAT,CAAwBK,YAAxB,EAAsC;AACpC,MAAMC,SAAS,GAAGhB,MAAM,CAACiB,WAAP,CAAmBF,YAAnB,CAAlB;AAEA,SAAO,IAAIZ,WAAJ,GAAkBe,MAAlB,CAAyBF,SAAzB,CAAP;AACD","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @emails oncall+react_native\n */\n\n'use strict';\n\nconst base64 = require('base64-js');\nconst {TextEncoder, TextDecoder} = require('util');\n\ndescribe('binaryToBase64', () => {\n  const binaryToBase64 = require('../binaryToBase64');\n\n  it('should encode a Uint8Array', () => {\n    const input = new TextEncoder().encode('Test string');\n\n    expect(base64ToString(binaryToBase64(input))).toEqual('Test string');\n  });\n\n  it('should encode an ArrayBuffer', () => {\n    const input = new TextEncoder().encode('Test string').buffer;\n\n    expect(base64ToString(binaryToBase64(input))).toEqual('Test string');\n  });\n\n  it('should encode a DataView', () => {\n    const input = new DataView(new TextEncoder().encode('Test string').buffer);\n\n    expect(base64ToString(binaryToBase64(input))).toEqual('Test string');\n  });\n\n  it('should not encode a non ArrayBuffer or non typed array', () => {\n    const input = ['i', 'n', 'v', 'a', 'l', 'i', 'd'];\n\n    expect(() => binaryToBase64(input)).toThrowError();\n  });\n});\n\nfunction base64ToString(base64String) {\n  const byteArray = base64.toByteArray(base64String);\n\n  return new TextDecoder().decode(byteArray);\n}\n"]},"metadata":{},"sourceType":"script"}