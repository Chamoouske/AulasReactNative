{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar core_plugins_1 = require(\"./core-plugins\");\n\nfunction createAndroidManifestPlugin(action, name) {\n  var withUnknown = function withUnknown(config) {\n    return exports.withAndroidManifest(config, function _callee(config) {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(action(config, config.modResults));\n\n            case 2:\n              config.modResults = _context.sent;\n              return _context.abrupt(\"return\", config);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n  };\n\n  if (name) {\n    Object.defineProperty(withUnknown, 'name', {\n      value: name\n    });\n  }\n\n  return withUnknown;\n}\n\nexports.createAndroidManifestPlugin = createAndroidManifestPlugin;\n\nfunction createStringsXmlPlugin(action, name) {\n  var withUnknown = function withUnknown(config) {\n    return exports.withStringsXml(config, function _callee2(config) {\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(action(config, config.modResults));\n\n            case 2:\n              config.modResults = _context2.sent;\n              return _context2.abrupt(\"return\", config);\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n  };\n\n  if (name) {\n    Object.defineProperty(withUnknown, 'name', {\n      value: name\n    });\n  }\n\n  return withUnknown;\n}\n\nexports.createStringsXmlPlugin = createStringsXmlPlugin;\n\nexports.withAndroidManifest = function (config, action) {\n  return core_plugins_1.withExtendedMod(config, {\n    platform: 'android',\n    mod: 'manifest',\n    action: action\n  });\n};\n\nexports.withStringsXml = function (config, action) {\n  return core_plugins_1.withExtendedMod(config, {\n    platform: 'android',\n    mod: 'strings',\n    action: action\n  });\n};\n\nexports.withMainActivity = function (config, action) {\n  return core_plugins_1.withExtendedMod(config, {\n    platform: 'android',\n    mod: 'mainActivity',\n    action: action\n  });\n};\n\nexports.withProjectBuildGradle = function (config, action) {\n  return core_plugins_1.withExtendedMod(config, {\n    platform: 'android',\n    mod: 'projectBuildGradle',\n    action: action\n  });\n};\n\nexports.withAppBuildGradle = function (config, action) {\n  return core_plugins_1.withExtendedMod(config, {\n    platform: 'android',\n    mod: 'appBuildGradle',\n    action: action\n  });\n};\n\nexports.withSettingsGradle = function (config, action) {\n  return core_plugins_1.withExtendedMod(config, {\n    platform: 'android',\n    mod: 'settingsGradle',\n    action: action\n  });\n};","map":{"version":3,"sources":["../../src/plugins/android-plugins.ts"],"names":[],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { ConfigPlugin, Mod } from '../Plugin.types';\nimport { AndroidManifest } from '../android/Manifest';\nimport { ApplicationProjectFile, GradleProjectFile } from '../android/Paths';\nimport { ResourceXML } from '../android/Resources';\nimport { withExtendedMod } from './core-plugins';\n\ntype OptionalPromise<T> = T | Promise<T>;\n\ntype MutateDataAction<T> = (expo: ExpoConfig, data: T) => OptionalPromise<T>;\n\n/**\n * Helper method for creating mods from existing config functions.\n *\n * @param action\n */\nexport function createAndroidManifestPlugin(\n  action: MutateDataAction<AndroidManifest>,\n  name: string\n): ConfigPlugin {\n  const withUnknown: ConfigPlugin = config =>\n    withAndroidManifest(config, async config => {\n      config.modResults = await action(config, config.modResults);\n      return config;\n    });\n  if (name) {\n    Object.defineProperty(withUnknown, 'name', {\n      value: name,\n    });\n  }\n  return withUnknown;\n}\n\nexport function createStringsXmlPlugin(\n  action: MutateDataAction<ResourceXML>,\n  name: string\n): ConfigPlugin {\n  const withUnknown: ConfigPlugin = config =>\n    withStringsXml(config, async config => {\n      config.modResults = await action(config, config.modResults);\n      return config;\n    });\n  if (name) {\n    Object.defineProperty(withUnknown, 'name', {\n      value: name,\n    });\n  }\n  return withUnknown;\n}\n\n/**\n * Provides the AndroidManifest.xml for modification.\n *\n * @param config\n * @param action\n */\nexport const withAndroidManifest: ConfigPlugin<Mod<AndroidManifest>> = (config, action) => {\n  return withExtendedMod(config, {\n    platform: 'android',\n    mod: 'manifest',\n    action,\n  });\n};\n\n/**\n * Provides the strings.xml for modification.\n *\n * @param config\n * @param action\n */\nexport const withStringsXml: ConfigPlugin<Mod<ResourceXML>> = (config, action) => {\n  return withExtendedMod(config, {\n    platform: 'android',\n    mod: 'strings',\n    action,\n  });\n};\n\n/**\n * Provides the project MainActivity for modification.\n *\n * @param config\n * @param action\n */\nexport const withMainActivity: ConfigPlugin<Mod<ApplicationProjectFile>> = (config, action) => {\n  return withExtendedMod(config, {\n    platform: 'android',\n    mod: 'mainActivity',\n    action,\n  });\n};\n\n/**\n * Provides the project /build.gradle for modification.\n *\n * @param config\n * @param action\n */\nexport const withProjectBuildGradle: ConfigPlugin<Mod<GradleProjectFile>> = (config, action) => {\n  return withExtendedMod(config, {\n    platform: 'android',\n    mod: 'projectBuildGradle',\n    action,\n  });\n};\n\n/**\n * Provides the app/build.gradle for modification.\n *\n * @param config\n * @param action\n */\nexport const withAppBuildGradle: ConfigPlugin<Mod<GradleProjectFile>> = (config, action) => {\n  return withExtendedMod(config, {\n    platform: 'android',\n    mod: 'appBuildGradle',\n    action,\n  });\n};\n\n/**\n * Provides the /settings.gradle for modification.\n *\n * @param config\n * @param action\n */\nexport const withSettingsGradle: ConfigPlugin<Mod<GradleProjectFile>> = (config, action) => {\n  return withExtendedMod(config, {\n    platform: 'android',\n    mod: 'settingsGradle',\n    action,\n  });\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}