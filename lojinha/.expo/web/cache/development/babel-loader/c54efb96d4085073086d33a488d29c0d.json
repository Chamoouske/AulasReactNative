{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = unlinkAssetsIOS;\n\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _xcode() {\n  var data = _interopRequireDefault(require(\"xcode\"));\n\n  _xcode = function _xcode() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _lodash() {\n  var data = require(\"lodash\");\n\n  _lodash = function _lodash() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _getPlist = _interopRequireDefault(require(\"./getPlist\"));\n\nvar _writePlist = _interopRequireDefault(require(\"./writePlist\"));\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction unlinkAssetsIOS(files, projectConfig) {\n  var project = _xcode().default.project(projectConfig.pbxprojPath).parseSync();\n\n  var assets = (0, _cliTools().groupFilesByType)(files);\n  var plist = (0, _getPlist.default)(project, projectConfig.sourceDir);\n\n  if (!plist) {\n    _cliTools().logger.error('Could not locate \"Info.plist\" file. Check if your project has \"INFOPLIST_FILE\" set properly');\n\n    return;\n  }\n\n  if (!project.pbxGroupByName('Resources')) {\n    _cliTools().logger.error('Group \"Resources\" does not exist in your Xcode project. There is nothing to unlink.');\n\n    return;\n  }\n\n  var removeResourceFiles = function removeResourceFiles() {\n    var f = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return (f || []).map(function (asset) {\n      _cliTools().logger.debug(\"Unlinking asset \" + asset);\n\n      return project.removeResourceFile(_path().default.relative(projectConfig.sourceDir, asset), {\n        target: project.getFirstTarget().uuid\n      });\n    }).map(function (file) {\n      return file.basename;\n    });\n  };\n\n  removeResourceFiles(assets.image);\n  var fonts = removeResourceFiles(assets.font);\n  plist.UIAppFonts = (0, _lodash().difference)(plist.UIAppFonts || [], fonts);\n\n  _fs().default.writeFileSync(projectConfig.pbxprojPath, project.writeSync());\n\n  (0, _writePlist.default)(project, projectConfig.sourceDir, plist);\n}","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli-platform-ios/build/link/unlinkAssets.js"],"names":["Object","defineProperty","exports","value","default","unlinkAssetsIOS","_fs","data","_interopRequireDefault","require","_path","_xcode","_lodash","_getPlist","_writePlist","_cliTools","obj","__esModule","files","projectConfig","project","pbxprojPath","parseSync","assets","groupFilesByType","plist","sourceDir","logger","error","pbxGroupByName","removeResourceFiles","f","map","asset","debug","removeResourceFile","relative","target","getFirstTarget","uuid","file","basename","image","fonts","font","UIAppFonts","difference","writeFileSync","writeSync"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = unlinkAssetsIOS;\n\nfunction _fs() {\n  const data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  const data = _interopRequireDefault(require(\"path\"));\n\n  _path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _xcode() {\n  const data = _interopRequireDefault(require(\"xcode\"));\n\n  _xcode = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _lodash() {\n  const data = require(\"lodash\");\n\n  _lodash = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _getPlist = _interopRequireDefault(require(\"./getPlist\"));\n\nvar _writePlist = _interopRequireDefault(require(\"./writePlist\"));\n\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * Unlinks assets from iOS project. Removes references for fonts from `Info.plist`\n * fonts provided by application and from `Resources` group\n */\nfunction unlinkAssetsIOS(files, projectConfig) {\n  const project = _xcode().default.project(projectConfig.pbxprojPath).parseSync();\n\n  const assets = (0, _cliTools().groupFilesByType)(files);\n  const plist = (0, _getPlist.default)(project, projectConfig.sourceDir);\n\n  if (!plist) {\n    _cliTools().logger.error('Could not locate \"Info.plist\" file. Check if your project has \"INFOPLIST_FILE\" set properly');\n\n    return;\n  }\n\n  if (!project.pbxGroupByName('Resources')) {\n    _cliTools().logger.error('Group \"Resources\" does not exist in your Xcode project. There is nothing to unlink.');\n\n    return;\n  }\n\n  const removeResourceFiles = (f = []) => (f || []).map(asset => {\n    _cliTools().logger.debug(`Unlinking asset ${asset}`);\n\n    return project.removeResourceFile(_path().default.relative(projectConfig.sourceDir, asset), {\n      target: project.getFirstTarget().uuid\n    });\n  }).map(file => file.basename);\n\n  removeResourceFiles(assets.image);\n  const fonts = removeResourceFiles(assets.font); // @ts-ignore Type mismatch\n\n  plist.UIAppFonts = (0, _lodash().difference)(plist.UIAppFonts || [], fonts);\n\n  _fs().default.writeFileSync(projectConfig.pbxprojPath, project.writeSync());\n\n  (0, _writePlist.default)(project, projectConfig.sourceDir, plist);\n}\n\n//# sourceMappingURL=unlinkAssets.js.map"]},"metadata":{},"sourceType":"script"}