{"ast":null,"code":"'use strict';\n\nvar _require = require('react-native-codegen/src/parsers/flow'),\n    parseString = _require.parseString;\n\nvar RNCodegen = require('react-native-codegen/src/generators/RNCodegen');\n\nvar _require2 = require('path'),\n    basename = _require2.basename;\n\nfunction generateViewConfig(filename, code) {\n  var schema = parseString(code);\n  var libraryName = basename(filename).replace(/NativeComponent\\.js$/, '');\n  return RNCodegen.generateViewConfig({\n    schema: schema,\n    libraryName: libraryName\n  });\n}\n\nfunction isCodegenDeclaration(declaration) {\n  if (!declaration) {\n    return false;\n  }\n\n  if (declaration.left && declaration.left.left && declaration.left.left.name === 'codegenNativeComponent') {\n    return true;\n  } else if (declaration.callee && declaration.callee.name && declaration.callee.name === 'codegenNativeComponent') {\n    return true;\n  } else if (declaration.type === 'TypeCastExpression' && declaration.expression && declaration.expression.callee && declaration.expression.callee.name && declaration.expression.callee.name === 'codegenNativeComponent') {\n    return true;\n  }\n\n  return false;\n}\n\nmodule.exports = function (context) {\n  return {\n    pre: function pre(state) {\n      this.code = state.code;\n      this.filename = state.opts.filename;\n      this.defaultExport = null;\n      this.commandsExport = null;\n      this.codeInserted = false;\n    },\n    visitor: {\n      ExportNamedDeclaration: function ExportNamedDeclaration(path) {\n        if (this.codeInserted) {\n          return;\n        }\n\n        if (path.node.declaration && path.node.declaration.declarations && path.node.declaration.declarations[0]) {\n          var firstDeclaration = path.node.declaration.declarations[0];\n\n          if (firstDeclaration.type === 'VariableDeclarator') {\n            if (firstDeclaration.init.type === 'CallExpression' && firstDeclaration.init.callee.type === 'Identifier' && firstDeclaration.init.callee.name === 'codegenNativeCommands') {\n              if (firstDeclaration.id.type === 'Identifier' && firstDeclaration.id.name !== 'Commands') {\n                throw path.buildCodeFrameError(\"Native commands must be exported with the name 'Commands'\");\n              }\n\n              this.commandsExport = path;\n              return;\n            } else {\n              if (firstDeclaration.id.name === 'Commands') {\n                throw path.buildCodeFrameError(\"'Commands' is a reserved export and may only be used to export the result of codegenNativeCommands.\");\n              }\n            }\n          }\n        } else if (path.node.specifiers && path.node.specifiers.length > 0) {\n          path.node.specifiers.forEach(function (specifier) {\n            if (specifier.type === 'ExportSpecifier' && specifier.local.type === 'Identifier' && specifier.local.name === 'Commands') {\n              throw path.buildCodeFrameError(\"'Commands' is a reserved export and may only be used to export the result of codegenNativeCommands.\");\n            }\n          });\n        }\n      },\n      ExportDefaultDeclaration: function ExportDefaultDeclaration(path, state) {\n        if (isCodegenDeclaration(path.node.declaration)) {\n          this.defaultExport = path;\n        }\n      },\n      Program: {\n        exit: function exit() {\n          if (this.defaultExport) {\n            var viewConfig = generateViewConfig(this.filename, this.code);\n            this.defaultExport.replaceWithMultiple(context.parse(viewConfig).program.body);\n\n            if (this.commandsExport != null) {\n              this.commandsExport.remove();\n            }\n\n            this.codeInserted = true;\n          }\n        }\n      }\n    }\n  };\n};","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/packages/babel-plugin-inline-view-configs/index.js"],"names":["require","parseString","RNCodegen","basename","generateViewConfig","filename","code","schema","libraryName","replace","isCodegenDeclaration","declaration","left","name","callee","type","expression","module","exports","context","pre","state","opts","defaultExport","commandsExport","codeInserted","visitor","ExportNamedDeclaration","path","node","declarations","firstDeclaration","init","id","buildCodeFrameError","specifiers","length","forEach","specifier","local","ExportDefaultDeclaration","Program","exit","viewConfig","replaceWithMultiple","parse","program","body","remove"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\n'use strict';\n\nconst {parseString} = require('react-native-codegen/src/parsers/flow');\nconst RNCodegen = require('react-native-codegen/src/generators/RNCodegen');\nconst {basename} = require('path');\n\nfunction generateViewConfig(filename, code) {\n  const schema = parseString(code);\n\n  const libraryName = basename(filename).replace(/NativeComponent\\.js$/, '');\n  return RNCodegen.generateViewConfig({\n    schema,\n    libraryName,\n  });\n}\n\nfunction isCodegenDeclaration(declaration) {\n  if (!declaration) {\n    return false;\n  }\n\n  if (\n    declaration.left &&\n    declaration.left.left &&\n    declaration.left.left.name === 'codegenNativeComponent'\n  ) {\n    return true;\n  } else if (\n    declaration.callee &&\n    declaration.callee.name &&\n    declaration.callee.name === 'codegenNativeComponent'\n  ) {\n    return true;\n  } else if (\n    declaration.type === 'TypeCastExpression' &&\n    declaration.expression &&\n    declaration.expression.callee &&\n    declaration.expression.callee.name &&\n    declaration.expression.callee.name === 'codegenNativeComponent'\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nmodule.exports = function(context) {\n  return {\n    pre(state) {\n      this.code = state.code;\n      this.filename = state.opts.filename;\n      this.defaultExport = null;\n      this.commandsExport = null;\n      this.codeInserted = false;\n    },\n    visitor: {\n      ExportNamedDeclaration(path) {\n        if (this.codeInserted) {\n          return;\n        }\n\n        if (\n          path.node.declaration &&\n          path.node.declaration.declarations &&\n          path.node.declaration.declarations[0]\n        ) {\n          const firstDeclaration = path.node.declaration.declarations[0];\n\n          if (firstDeclaration.type === 'VariableDeclarator') {\n            if (\n              firstDeclaration.init.type === 'CallExpression' &&\n              firstDeclaration.init.callee.type === 'Identifier' &&\n              firstDeclaration.init.callee.name === 'codegenNativeCommands'\n            ) {\n              if (\n                firstDeclaration.id.type === 'Identifier' &&\n                firstDeclaration.id.name !== 'Commands'\n              ) {\n                throw path.buildCodeFrameError(\n                  \"Native commands must be exported with the name 'Commands'\",\n                );\n              }\n              this.commandsExport = path;\n              return;\n            } else {\n              if (firstDeclaration.id.name === 'Commands') {\n                throw path.buildCodeFrameError(\n                  \"'Commands' is a reserved export and may only be used to export the result of codegenNativeCommands.\",\n                );\n              }\n            }\n          }\n        } else if (path.node.specifiers && path.node.specifiers.length > 0) {\n          path.node.specifiers.forEach(specifier => {\n            if (\n              specifier.type === 'ExportSpecifier' &&\n              specifier.local.type === 'Identifier' &&\n              specifier.local.name === 'Commands'\n            ) {\n              throw path.buildCodeFrameError(\n                \"'Commands' is a reserved export and may only be used to export the result of codegenNativeCommands.\",\n              );\n            }\n          });\n        }\n      },\n      ExportDefaultDeclaration(path, state) {\n        if (isCodegenDeclaration(path.node.declaration)) {\n          this.defaultExport = path;\n        }\n      },\n      Program: {\n        exit() {\n          if (this.defaultExport) {\n            const viewConfig = generateViewConfig(this.filename, this.code);\n            this.defaultExport.replaceWithMultiple(\n              context.parse(viewConfig).program.body,\n            );\n            if (this.commandsExport != null) {\n              this.commandsExport.remove();\n            }\n            this.codeInserted = true;\n          }\n        },\n      },\n    },\n  };\n};\n"]},"metadata":{},"sourceType":"script"}