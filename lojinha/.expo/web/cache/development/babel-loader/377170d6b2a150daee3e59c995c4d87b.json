{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getMainActivityAsync = exports.assert = void 0;\n\nvar assert_1 = __importDefault(require(\"assert\"));\n\nvar fs_extra_1 = __importDefault(require(\"fs-extra\"));\n\nvar glob_1 = require(\"glob\");\n\nvar path = __importStar(require(\"path\"));\n\nfunction assert(value, message) {\n  return assert_1.default(value, message);\n}\n\nexports.assert = assert;\n\nfunction getProjectFileAsync(projectRoot, name) {\n  var mainActivityJavaPath, mainActivityPathJava, mainActivityPathKotlin, isJava, isKotlin, filePath;\n  return _regeneratorRuntime.async(function getProjectFileAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          mainActivityJavaPath = glob_1.sync(path.join(projectRoot, \"android/app/src/main/java/**/\" + name + \".{java,kt}\"))[0];\n          assert(mainActivityJavaPath, \"Project file \\\"\" + name + \"\\\" does not exist in android project for root \\\"\" + projectRoot + \"\\\"\");\n          mainActivityPathJava = path.resolve(mainActivityJavaPath, \"../\" + name + \".java\");\n          mainActivityPathKotlin = path.resolve(mainActivityJavaPath, \"../\" + name + \".kt\");\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(fs_extra_1.default.pathExists(mainActivityPathJava));\n\n        case 6:\n          isJava = _context.sent;\n          _context.t0 = !isJava;\n\n          if (!_context.t0) {\n            _context.next = 12;\n            break;\n          }\n\n          _context.next = 11;\n          return _regeneratorRuntime.awrap(fs_extra_1.default.pathExists(mainActivityPathKotlin));\n\n        case 11:\n          _context.t0 = _context.sent;\n\n        case 12:\n          isKotlin = _context.t0;\n\n          if (!(!isJava && !isKotlin)) {\n            _context.next = 15;\n            break;\n          }\n\n          throw new Error(\"Failed to find '\" + name + \"' file for project: \" + projectRoot + \".\");\n\n        case 15:\n          filePath = isJava ? mainActivityPathJava : mainActivityPathKotlin;\n          return _context.abrupt(\"return\", {\n            path: path.normalize(filePath),\n            contents: fs_extra_1.default.readFileSync(filePath, 'utf8'),\n            language: isJava ? 'java' : 'kt'\n          });\n\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getMainActivityAsync(projectRoot) {\n  return _regeneratorRuntime.async(function getMainActivityAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          return _context2.abrupt(\"return\", getProjectFileAsync(projectRoot, 'MainActivity'));\n\n        case 1:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.getMainActivityAsync = getMainActivityAsync;","map":{"version":3,"sources":["../../src/android/Paths.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,QAAA,GAAA,eAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA;;AACA,IAAA,UAAA,GAAA,eAAA,CAAA,OAAA,CAAA,UAAA,CAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,MAAA,CAAA;;AACA,IAAA,IAAA,GAAA,YAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;AAQA,SAAgB,MAAhB,CAAuB,KAAvB,EAAmC,OAAnC,EAA2D;AAEzD,SAAO,QAAA,CAAA,OAAA,CAAW,KAAX,EAAkB,OAAlB,CAAP;AACD;;AAHD,OAAA,CAAA,MAAA,GAAA,MAAA;;AAOA,SAAe,mBAAf,CACE,WADF,EAEE,IAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAIQ,UAAA,oBAJR,GAI+B,MAAA,CAAA,IAAA,CAC3B,IAAI,CAAC,IAAL,CAAU,WAAV,oCAAuD,IAAvD,gBAD2B,EAE3B,CAF2B,CAJ/B;AAOE,UAAA,MAAM,CACJ,oBADI,sBAEa,IAFb,wDAEkE,WAFlE,QAAN;AAKM,UAAA,oBAZR,GAY+B,IAAI,CAAC,OAAL,CAAa,oBAAb,UAAyC,IAAzC,WAZ/B;AAaQ,UAAA,sBAbR,GAaiC,IAAI,CAAC,OAAL,CAAa,oBAAb,UAAyC,IAAzC,SAbjC;AAAA;AAAA,2CAeuB,UAAA,CAAA,OAAA,CAAG,UAAH,CAAc,oBAAd,CAfvB;;AAAA;AAeQ,UAAA,MAfR;AAAA,wBAgBmB,CAAC,MAhBpB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAgBqC,UAAA,CAAA,OAAA,CAAG,UAAH,CAAc,sBAAd,CAhBrC;;AAAA;AAAA;;AAAA;AAgBQ,UAAA,QAhBR;;AAAA,gBAkBM,CAAC,MAAD,IAAW,CAAC,QAlBlB;AAAA;AAAA;AAAA;;AAAA,gBAmBU,IAAI,KAAJ,sBAA6B,IAA7B,4BAAwD,WAAxD,OAnBV;;AAAA;AAqBQ,UAAA,QArBR,GAqBmB,MAAM,GAAG,oBAAH,GAA0B,sBArBnD;AAAA,2CAsBS;AACL,YAAA,IAAI,EAAE,IAAI,CAAC,SAAL,CAAe,QAAf,CADD;AAEL,YAAA,QAAQ,EAAE,UAAA,CAAA,OAAA,CAAG,YAAH,CAAgB,QAAhB,EAA0B,MAA1B,CAFL;AAGL,YAAA,QAAQ,EAAE,MAAM,GAAG,MAAH,GAAY;AAHvB,WAtBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA6BO,SAAe,oBAAf,CAAoC,WAApC;AAAA;AAAA;AAAA;AAAA;AAAA,4CACE,mBAAmB,CAAC,WAAD,EAAc,cAAd,CADrB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAP,OAAA,CAAA,oBAAA,GAAA,oBAAA","sourcesContent":["import nodeAssert from 'assert';\nimport fs from 'fs-extra';\nimport { sync as globSync } from 'glob';\nimport * as path from 'path';\n\nexport interface ProjectFile<L extends string = string> {\n  path: string;\n  language: L;\n  contents: string;\n}\n\nexport function assert(value: any, message?: string | Error): asserts value {\n  // TODO: Upgrade node? TypeScript isn't properly asserting values without this wrapper.\n  return nodeAssert(value, message);\n}\n\nexport type ApplicationProjectFile = ProjectFile<'java' | 'kt'>;\n\nasync function getProjectFileAsync(\n  projectRoot: string,\n  name: string\n): Promise<ApplicationProjectFile> {\n  const mainActivityJavaPath = globSync(\n    path.join(projectRoot, `android/app/src/main/java/**/${name}.{java,kt}`)\n  )[0];\n  assert(\n    mainActivityJavaPath,\n    `Project file \"${name}\" does not exist in android project for root \"${projectRoot}\"`\n  );\n\n  const mainActivityPathJava = path.resolve(mainActivityJavaPath, `../${name}.java`);\n  const mainActivityPathKotlin = path.resolve(mainActivityJavaPath, `../${name}.kt`);\n\n  const isJava = await fs.pathExists(mainActivityPathJava);\n  const isKotlin = !isJava && (await fs.pathExists(mainActivityPathKotlin));\n\n  if (!isJava && !isKotlin) {\n    throw new Error(`Failed to find '${name}' file for project: ${projectRoot}.`);\n  }\n  const filePath = isJava ? mainActivityPathJava : mainActivityPathKotlin;\n  return {\n    path: path.normalize(filePath),\n    contents: fs.readFileSync(filePath, 'utf8'),\n    language: isJava ? 'java' : 'kt',\n  };\n}\n\nexport async function getMainActivityAsync(projectRoot: string): Promise<ApplicationProjectFile> {\n  return getProjectFileAsync(projectRoot, 'MainActivity');\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}