{"ast":null,"code":"'use strict';\n\nvar _extends = require(\"@babel/runtime/helpers/extends\");\n\nvar defaultOptions = {\n  breakOnWords: true,\n  minDelta: 10,\n  elipsis: '...'\n};\n\nvar truncate = function truncate(str, maxChars, options) {\n  options = _extends({}, defaultOptions, options);\n\n  if (str && str.length && str.length - options.minDelta + options.elipsis.length >= maxChars) {\n    var extraChar = str.charCodeAt(maxChars - options.elipsis.length) > 255 ? 1 : 0;\n    str = str.slice(0, maxChars - options.elipsis.length + 1 + extraChar);\n\n    if (options.breakOnWords) {\n      var ii = Math.max(str.lastIndexOf(' '), str.lastIndexOf('\\n'));\n      str = str.slice(0, ii);\n    }\n\n    str = str.trim() + options.elipsis;\n  }\n\n  return str;\n};\n\nmodule.exports = truncate;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Utilities/truncate.js"],"names":["defaultOptions","breakOnWords","minDelta","elipsis","truncate","str","maxChars","options","length","extraChar","charCodeAt","slice","ii","Math","max","lastIndexOf","trim","module","exports"],"mappings":"AAUA;;;;AASA,IAAMA,cAAc,GAAG;AACrBC,EAAAA,YAAY,EAAE,IADO;AAErBC,EAAAA,QAAQ,EAAE,EAFW;AAGrBC,EAAAA,OAAO,EAAE;AAHY,CAAvB;;AAOA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CACfC,GADe,EAEfC,QAFe,EAGfC,OAHe,EAIN;AACTA,EAAAA,OAAO,GAAG,SAAc,EAAd,EAAkBP,cAAlB,EAAkCO,OAAlC,CAAV;;AACA,MACEF,GAAG,IACHA,GAAG,CAACG,MADJ,IAEAH,GAAG,CAACG,MAAJ,GAAaD,OAAO,CAACL,QAArB,GAAgCK,OAAO,CAACJ,OAAR,CAAgBK,MAAhD,IAA0DF,QAH5D,EAIE;AAEA,QAAMG,SAAS,GACbJ,GAAG,CAACK,UAAJ,CAAeJ,QAAQ,GAAGC,OAAO,CAACJ,OAAR,CAAgBK,MAA1C,IAAoD,GAApD,GAA0D,CAA1D,GAA8D,CADhE;AAEAH,IAAAA,GAAG,GAAGA,GAAG,CAACM,KAAJ,CAAU,CAAV,EAAaL,QAAQ,GAAGC,OAAO,CAACJ,OAAR,CAAgBK,MAA3B,GAAoC,CAApC,GAAwCC,SAArD,CAAN;;AACA,QAAIF,OAAO,CAACN,YAAZ,EAA0B;AACxB,UAAMW,EAAE,GAAGC,IAAI,CAACC,GAAL,CAAST,GAAG,CAACU,WAAJ,CAAgB,GAAhB,CAAT,EAA+BV,GAAG,CAACU,WAAJ,CAAgB,IAAhB,CAA/B,CAAX;AACAV,MAAAA,GAAG,GAAGA,GAAG,CAACM,KAAJ,CAAU,CAAV,EAAaC,EAAb,CAAN;AACD;;AACDP,IAAAA,GAAG,GAAGA,GAAG,CAACW,IAAJ,KAAaT,OAAO,CAACJ,OAA3B;AACD;;AACD,SAAOE,GAAP;AACD,CAtBD;;AAwBAY,MAAM,CAACC,OAAP,GAAiBd,QAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\ntype truncateOptions = {\n  breakOnWords: boolean,\n  minDelta: number,\n  elipsis: string,\n  ...\n};\n\nconst defaultOptions = {\n  breakOnWords: true,\n  minDelta: 10, // Prevents truncating a tiny bit off the end\n  elipsis: '...',\n};\n\n// maxChars (including ellipsis)\nconst truncate = function(\n  str: ?string,\n  maxChars: number,\n  options?: truncateOptions,\n): ?string {\n  options = Object.assign({}, defaultOptions, options);\n  if (\n    str &&\n    str.length &&\n    str.length - options.minDelta + options.elipsis.length >= maxChars\n  ) {\n    // If the slice is happening in the middle of a wide char, add one more char\n    const extraChar =\n      str.charCodeAt(maxChars - options.elipsis.length) > 255 ? 1 : 0;\n    str = str.slice(0, maxChars - options.elipsis.length + 1 + extraChar);\n    if (options.breakOnWords) {\n      const ii = Math.max(str.lastIndexOf(' '), str.lastIndexOf('\\n'));\n      str = str.slice(0, ii);\n    }\n    str = str.trim() + options.elipsis;\n  }\n  return str;\n};\n\nmodule.exports = truncate;\n"]},"metadata":{},"sourceType":"script"}