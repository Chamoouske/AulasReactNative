{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar fs = require('fs');\n\nvar _require = require('util'),\n    promisify = _require.promisify;\n\nvar pAccess = promisify(fs.access);\n\nmodule.exports = function _callee(path) {\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(pAccess(path));\n\n        case 3:\n          return _context.abrupt(\"return\", true);\n\n        case 6:\n          _context.prev = 6;\n          _context.t0 = _context[\"catch\"](0);\n          return _context.abrupt(\"return\", false);\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 6]], Promise);\n};\n\nmodule.exports.sync = function (path) {\n  try {\n    fs.accessSync(path);\n    return true;\n  } catch (_) {\n    return false;\n  }\n};","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli/node_modules/path-exists/index.js"],"names":["fs","require","promisify","pAccess","access","module","exports","path","sync","accessSync","_"],"mappings":"AAAA;;;;AACA,IAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;eACoBA,OAAO,CAAC,MAAD,C;IAApBC,S,YAAAA,S;;AAEP,IAAMC,OAAO,GAAGD,SAAS,CAACF,EAAE,CAACI,MAAJ,CAAzB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,iBAAMC,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAETJ,OAAO,CAACI,IAAD,CAFE;;AAAA;AAAA,2CAGR,IAHQ;;AAAA;AAAA;AAAA;AAAA,2CAKR,KALQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjB;;AASAF,MAAM,CAACC,OAAP,CAAeE,IAAf,GAAsB,UAAAD,IAAI,EAAI;AAC7B,MAAI;AACHP,IAAAA,EAAE,CAACS,UAAH,CAAcF,IAAd;AACA,WAAO,IAAP;AACA,GAHD,CAGE,OAAOG,CAAP,EAAU;AACX,WAAO,KAAP;AACA;AACD,CAPD","sourcesContent":["'use strict';\nconst fs = require('fs');\nconst {promisify} = require('util');\n\nconst pAccess = promisify(fs.access);\n\nmodule.exports = async path => {\n\ttry {\n\t\tawait pAccess(path);\n\t\treturn true;\n\t} catch (_) {\n\t\treturn false;\n\t}\n};\n\nmodule.exports.sync = path => {\n\ttry {\n\t\tfs.accessSync(path);\n\t\treturn true;\n\t} catch (_) {\n\t\treturn false;\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}