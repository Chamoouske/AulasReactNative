{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as Application from 'expo-application';\nimport uuidv5 from 'uuid/v5';\nvar installationId;\nvar UUID_NAMESPACE = '29cc8a0d-747c-5f85-9ff9-f2f16636d963';\nexport default function getInstallationIdAsync() {\n  var identifierForVendor, bundleIdentifier, installationTime;\n  return _regeneratorRuntime.async(function getInstallationIdAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!installationId) {\n            _context.next = 2;\n            break;\n          }\n\n          return _context.abrupt(\"return\", installationId);\n\n        case 2:\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(Application.getIosIdForVendorAsync());\n\n        case 4:\n          identifierForVendor = _context.sent;\n          bundleIdentifier = Application.applicationId;\n\n          if (!identifierForVendor) {\n            _context.next = 10;\n            break;\n          }\n\n          installationId = uuidv5(bundleIdentifier + \"-\" + identifierForVendor, UUID_NAMESPACE);\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.next = 12;\n          return _regeneratorRuntime.awrap(Application.getInstallationTimeAsync());\n\n        case 12:\n          installationTime = _context.sent;\n          installationId = uuidv5(bundleIdentifier + \"-\" + installationTime.getTime(), UUID_NAMESPACE);\n\n        case 14:\n          return _context.abrupt(\"return\", installationId);\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../../src/environment/getInstallationIdAsync.ts"],"names":[],"mappings":";AAAA,OAAO,KAAK,WAAZ,MAA6B,kBAA7B;AACA,OAAO,MAAP,MAAmB,SAAnB;AAEA,IAAI,cAAJ;AACA,IAAM,cAAc,GAAG,sCAAvB;AAEA,eAAe,SAAe,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACT,cADS;AAAA;AAAA;AAAA;;AAAA,2CAEJ,cAFI;;AAAA;AAAA;AAAA,2CAKqB,WAAW,CAAC,sBAAZ,EALrB;;AAAA;AAKP,UAAA,mBALO;AAMP,UAAA,gBANO,GAMY,WAAW,CAAC,aANxB;;AAAA,eAWT,mBAXS;AAAA;AAAA;AAAA;;AAYX,UAAA,cAAc,GAAG,MAAM,CAAI,gBAAJ,SAAwB,mBAAxB,EAA+C,cAA/C,CAAvB;AAZW;AAAA;;AAAA;AAAA;AAAA,2CAcoB,WAAW,CAAC,wBAAZ,EAdpB;;AAAA;AAcL,UAAA,gBAdK;AAeX,UAAA,cAAc,GAAG,MAAM,CAAI,gBAAJ,SAAwB,gBAAgB,CAAC,OAAjB,EAAxB,EAAsD,cAAtD,CAAvB;;AAfW;AAAA,2CAkBN,cAlBM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import * as Application from 'expo-application';\nimport uuidv5 from 'uuid/v5';\n\nlet installationId: string | null;\nconst UUID_NAMESPACE = '29cc8a0d-747c-5f85-9ff9-f2f16636d963'; // uuidv5(0, \"expo\")\n\nexport default async function getInstallationIdAsync() {\n  if (installationId) {\n    return installationId;\n  }\n\n  const identifierForVendor = await Application.getIosIdForVendorAsync();\n  const bundleIdentifier = Application.applicationId!;\n\n  // It's unlikely identifierForVendor will be null (it returns null if the\n  // device has been restarted but not yet unlocked), but let's handle this\n  // case.\n  if (identifierForVendor) {\n    installationId = uuidv5(`${bundleIdentifier}-${identifierForVendor}`, UUID_NAMESPACE);\n  } else {\n    const installationTime = await Application.getInstallationTimeAsync();\n    installationId = uuidv5(`${bundleIdentifier}-${installationTime.getTime()}`, UUID_NAMESPACE);\n  }\n\n  return installationId;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}