{"ast":null,"code":"'use strict';\n\nmodule.exports = [{\n  \"description\": \"A visual toggle between two mutually exclusive states.\\n\\nThis is a controlled component that requires an `onValueChange` callback that\\nupdates the `value` prop in order for the component to reflect user actions.\\nIf the `value` prop is not updated, the component will continue to render the\\nsupplied `value` prop instead of the expected result of any user actions.\",\n  \"displayName\": \"Switch\",\n  \"methods\": [],\n  \"props\": {\n    \"disabled\": {\n      \"required\": false,\n      \"flowType\": {\n        \"name\": \"boolean\",\n        \"nullable\": true\n      },\n      \"description\": \"Whether the switch is disabled. Defaults to false.\"\n    },\n    \"value\": {\n      \"required\": false,\n      \"flowType\": {\n        \"name\": \"boolean\",\n        \"nullable\": true\n      },\n      \"description\": \"Boolean value of the switch. Defaults to false.\"\n    },\n    \"thumbColor\": {\n      \"required\": false,\n      \"flowType\": {\n        \"name\": \"ColorValue\",\n        \"nullable\": true\n      },\n      \"description\": \"Custom color for the switch thumb.\"\n    },\n    \"trackColor\": {\n      \"required\": false,\n      \"flowType\": {\n        \"name\": \"$ReadOnly\",\n        \"elements\": [{\n          \"name\": \"signature\",\n          \"type\": \"object\",\n          \"raw\": \"{|\\n  false?: ?ColorValue,\\n  true?: ?ColorValue,\\n|}\",\n          \"signature\": {\n            \"properties\": [{\n              \"key\": \"false\",\n              \"value\": {\n                \"name\": \"ColorValue\",\n                \"nullable\": true,\n                \"required\": false\n              }\n            }, {\n              \"key\": \"true\",\n              \"value\": {\n                \"name\": \"ColorValue\",\n                \"nullable\": true,\n                \"required\": false\n              }\n            }]\n          }\n        }],\n        \"raw\": \"$ReadOnly<{|\\n  false?: ?ColorValue,\\n  true?: ?ColorValue,\\n|}>\",\n        \"nullable\": true\n      },\n      \"description\": \"Custom colors for the switch track.\\n\\nNOTE: On iOS when the switch value is false, the track shrinks into the\\nborder. If you want to change the color of the background exposed by the\\nshrunken track, use `ios_backgroundColor`.\"\n    },\n    \"ios_backgroundColor\": {\n      \"required\": false,\n      \"flowType\": {\n        \"name\": \"ColorValue\",\n        \"nullable\": true\n      },\n      \"description\": \"On iOS, custom color for the background. This background color can be seen\\neither when the switch value is false or when the switch is disabled (and\\nthe switch is translucent).\"\n    },\n    \"onChange\": {\n      \"required\": false,\n      \"flowType\": {\n        \"name\": \"signature\",\n        \"type\": \"function\",\n        \"raw\": \"(event: SwitchChangeEvent) => Promise<void> | void\",\n        \"signature\": {\n          \"arguments\": [{\n            \"name\": \"event\",\n            \"type\": {\n              \"name\": \"SyntheticEvent\",\n              \"elements\": [{\n                \"name\": \"$ReadOnly\",\n                \"elements\": [{\n                  \"name\": \"signature\",\n                  \"type\": \"object\",\n                  \"raw\": \"{|\\n  value: boolean,\\n|}\",\n                  \"signature\": {\n                    \"properties\": [{\n                      \"key\": \"value\",\n                      \"value\": {\n                        \"name\": \"boolean\",\n                        \"required\": true\n                      }\n                    }]\n                  }\n                }],\n                \"raw\": \"$ReadOnly<{|\\n  value: boolean,\\n|}>\"\n              }],\n              \"raw\": \"SyntheticEvent<\\n  $ReadOnly<{|\\n    value: boolean,\\n  |}>,\\n>\"\n            }\n          }],\n          \"return\": {\n            \"name\": \"union\",\n            \"raw\": \"Promise<void> | void\",\n            \"elements\": [{\n              \"name\": \"Promise\",\n              \"elements\": [{\n                \"name\": \"void\"\n              }],\n              \"raw\": \"Promise<void>\"\n            }, {\n              \"name\": \"void\"\n            }]\n          }\n        },\n        \"nullable\": true\n      },\n      \"description\": \"Called when the user tries to change the value of the switch.\\n\\nReceives the change event as an argument. If you want to only receive the\\nnew value, use `onValueChange` instead.\"\n    },\n    \"onValueChange\": {\n      \"required\": false,\n      \"flowType\": {\n        \"name\": \"signature\",\n        \"type\": \"function\",\n        \"raw\": \"(value: boolean) => Promise<void> | void\",\n        \"signature\": {\n          \"arguments\": [{\n            \"name\": \"value\",\n            \"type\": {\n              \"name\": \"boolean\"\n            }\n          }],\n          \"return\": {\n            \"name\": \"union\",\n            \"raw\": \"Promise<void> | void\",\n            \"elements\": [{\n              \"name\": \"Promise\",\n              \"elements\": [{\n                \"name\": \"void\"\n              }],\n              \"raw\": \"Promise<void>\"\n            }, {\n              \"name\": \"void\"\n            }]\n          }\n        },\n        \"nullable\": true\n      },\n      \"description\": \"Called when the user tries to change the value of the switch.\\n\\nReceives the new value as an argument. If you want to instead receive an\\nevent, use `onChange`.\"\n    }\n  },\n  \"composes\": [\"ViewProps\"]\n}];","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/docs/generatedComponentApiDocs.js"],"names":["module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * This file is used by the React Native website to show the props of core components\n * This file was generated by running scripts/generate-api-docs.js\n *\n * @generated SignedSource<<99203c7cf79ad84e3ce1e508a22416fe>>\n */\n\n'use strict';\n\nmodule.exports = [\n  {\n    \"description\": \"A visual toggle between two mutually exclusive states.\\n\\nThis is a controlled component that requires an `onValueChange` callback that\\nupdates the `value` prop in order for the component to reflect user actions.\\nIf the `value` prop is not updated, the component will continue to render the\\nsupplied `value` prop instead of the expected result of any user actions.\",\n    \"displayName\": \"Switch\",\n    \"methods\": [],\n    \"props\": {\n      \"disabled\": {\n        \"required\": false,\n        \"flowType\": {\n          \"name\": \"boolean\",\n          \"nullable\": true\n        },\n        \"description\": \"Whether the switch is disabled. Defaults to false.\"\n      },\n      \"value\": {\n        \"required\": false,\n        \"flowType\": {\n          \"name\": \"boolean\",\n          \"nullable\": true\n        },\n        \"description\": \"Boolean value of the switch. Defaults to false.\"\n      },\n      \"thumbColor\": {\n        \"required\": false,\n        \"flowType\": {\n          \"name\": \"ColorValue\",\n          \"nullable\": true\n        },\n        \"description\": \"Custom color for the switch thumb.\"\n      },\n      \"trackColor\": {\n        \"required\": false,\n        \"flowType\": {\n          \"name\": \"$ReadOnly\",\n          \"elements\": [\n            {\n              \"name\": \"signature\",\n              \"type\": \"object\",\n              \"raw\": \"{|\\n  false?: ?ColorValue,\\n  true?: ?ColorValue,\\n|}\",\n              \"signature\": {\n                \"properties\": [\n                  {\n                    \"key\": \"false\",\n                    \"value\": {\n                      \"name\": \"ColorValue\",\n                      \"nullable\": true,\n                      \"required\": false\n                    }\n                  },\n                  {\n                    \"key\": \"true\",\n                    \"value\": {\n                      \"name\": \"ColorValue\",\n                      \"nullable\": true,\n                      \"required\": false\n                    }\n                  }\n                ]\n              }\n            }\n          ],\n          \"raw\": \"$ReadOnly<{|\\n  false?: ?ColorValue,\\n  true?: ?ColorValue,\\n|}>\",\n          \"nullable\": true\n        },\n        \"description\": \"Custom colors for the switch track.\\n\\nNOTE: On iOS when the switch value is false, the track shrinks into the\\nborder. If you want to change the color of the background exposed by the\\nshrunken track, use `ios_backgroundColor`.\"\n      },\n      \"ios_backgroundColor\": {\n        \"required\": false,\n        \"flowType\": {\n          \"name\": \"ColorValue\",\n          \"nullable\": true\n        },\n        \"description\": \"On iOS, custom color for the background. This background color can be seen\\neither when the switch value is false or when the switch is disabled (and\\nthe switch is translucent).\"\n      },\n      \"onChange\": {\n        \"required\": false,\n        \"flowType\": {\n          \"name\": \"signature\",\n          \"type\": \"function\",\n          \"raw\": \"(event: SwitchChangeEvent) => Promise<void> | void\",\n          \"signature\": {\n            \"arguments\": [\n              {\n                \"name\": \"event\",\n                \"type\": {\n                  \"name\": \"SyntheticEvent\",\n                  \"elements\": [\n                    {\n                      \"name\": \"$ReadOnly\",\n                      \"elements\": [\n                        {\n                          \"name\": \"signature\",\n                          \"type\": \"object\",\n                          \"raw\": \"{|\\n  value: boolean,\\n|}\",\n                          \"signature\": {\n                            \"properties\": [\n                              {\n                                \"key\": \"value\",\n                                \"value\": {\n                                  \"name\": \"boolean\",\n                                  \"required\": true\n                                }\n                              }\n                            ]\n                          }\n                        }\n                      ],\n                      \"raw\": \"$ReadOnly<{|\\n  value: boolean,\\n|}>\"\n                    }\n                  ],\n                  \"raw\": \"SyntheticEvent<\\n  $ReadOnly<{|\\n    value: boolean,\\n  |}>,\\n>\"\n                }\n              }\n            ],\n            \"return\": {\n              \"name\": \"union\",\n              \"raw\": \"Promise<void> | void\",\n              \"elements\": [\n                {\n                  \"name\": \"Promise\",\n                  \"elements\": [\n                    {\n                      \"name\": \"void\"\n                    }\n                  ],\n                  \"raw\": \"Promise<void>\"\n                },\n                {\n                  \"name\": \"void\"\n                }\n              ]\n            }\n          },\n          \"nullable\": true\n        },\n        \"description\": \"Called when the user tries to change the value of the switch.\\n\\nReceives the change event as an argument. If you want to only receive the\\nnew value, use `onValueChange` instead.\"\n      },\n      \"onValueChange\": {\n        \"required\": false,\n        \"flowType\": {\n          \"name\": \"signature\",\n          \"type\": \"function\",\n          \"raw\": \"(value: boolean) => Promise<void> | void\",\n          \"signature\": {\n            \"arguments\": [\n              {\n                \"name\": \"value\",\n                \"type\": {\n                  \"name\": \"boolean\"\n                }\n              }\n            ],\n            \"return\": {\n              \"name\": \"union\",\n              \"raw\": \"Promise<void> | void\",\n              \"elements\": [\n                {\n                  \"name\": \"Promise\",\n                  \"elements\": [\n                    {\n                      \"name\": \"void\"\n                    }\n                  ],\n                  \"raw\": \"Promise<void>\"\n                },\n                {\n                  \"name\": \"void\"\n                }\n              ]\n            }\n          },\n          \"nullable\": true\n        },\n        \"description\": \"Called when the user tries to change the value of the switch.\\n\\nReceives the new value as an argument. If you want to instead receive an\\nevent, use `onChange`.\"\n      }\n    },\n    \"composes\": [\n      \"ViewProps\"\n    ]\n  }\n]\n"]},"metadata":{},"sourceType":"script"}