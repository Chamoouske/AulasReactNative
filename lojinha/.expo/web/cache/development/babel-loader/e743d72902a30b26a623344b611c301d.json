{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar getenv_1 = require(\"getenv\");\n\nvar semver_1 = __importDefault(require(\"semver\"));\n\nfunction isLegacyImportsEnabled(exp) {\n  if (getenv_1.boolish('EXPO_LEGACY_IMPORTS', false)) {\n    console.warn('Dangerously enabled the deprecated `.expo` extensions feature, this functionality may be removed between SDK cycles.');\n    return true;\n  }\n\n  return lteSdkVersion(exp, '40.0.0');\n}\n\nexports.isLegacyImportsEnabled = isLegacyImportsEnabled;\n\nfunction lteSdkVersion(expJson, sdkVersion) {\n  if (!expJson.sdkVersion) {\n    return false;\n  }\n\n  if (expJson.sdkVersion === 'UNVERSIONED') {\n    return false;\n  }\n\n  try {\n    return semver_1.default.lte(expJson.sdkVersion, sdkVersion);\n  } catch (e) {\n    throw new Error(expJson.sdkVersion + \" is not a valid version. Must be in the form of x.y.z\");\n  }\n}","map":{"version":3,"sources":["../src/isLegacyImportsEnabled.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,IAAA,QAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AACA,IAAA,QAAA,GAAA,eAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA;;AASA,SAAgB,sBAAhB,CAAuC,GAAvC,EAA0E;AACxE,MAAI,QAAA,CAAA,OAAA,CAAQ,qBAAR,EAA+B,KAA/B,CAAJ,EAA2C;AACzC,IAAA,OAAO,CAAC,IAAR,CACE,sHADF;AAGA,WAAO,IAAP;AACD;;AAGD,SAAO,aAAa,CAAC,GAAD,EAAM,QAAN,CAApB;AACD;;AAVD,OAAA,CAAA,sBAAA,GAAA,sBAAA;;AAYA,SAAS,aAAT,CAAuB,OAAvB,EAAgE,UAAhE,EAAkF;AAChF,MAAI,CAAC,OAAO,CAAC,UAAb,EAAyB;AACvB,WAAO,KAAP;AACD;;AAED,MAAI,OAAO,CAAC,UAAR,KAAuB,aAA3B,EAA0C;AACxC,WAAO,KAAP;AACD;;AAED,MAAI;AACF,WAAO,QAAA,CAAA,OAAA,CAAO,GAAP,CAAW,OAAO,CAAC,UAAnB,EAA+B,UAA/B,CAAP;AACD,GAFD,CAEE,OAAO,CAAP,EAAU;AACV,UAAM,IAAI,KAAJ,CAAa,OAAO,CAAC,UAArB,2DAAN;AACD;AACF","sourcesContent":["import { boolish } from 'getenv';\nimport semver from 'semver';\n\nimport { ExpoConfig } from './Config.types';\n\n/**\n * Should the bundler use .expo file extensions.\n *\n * @param exp\n */\nexport function isLegacyImportsEnabled(exp: Pick<ExpoConfig, 'sdkVersion'>) {\n  if (boolish('EXPO_LEGACY_IMPORTS', false)) {\n    console.warn(\n      'Dangerously enabled the deprecated `.expo` extensions feature, this functionality may be removed between SDK cycles.'\n    );\n    return true;\n  }\n  // Only allow target if the SDK version is available and it's less 41.\n  // This is optimized for making future projects work.\n  return lteSdkVersion(exp, '40.0.0');\n}\n\nfunction lteSdkVersion(expJson: Pick<ExpoConfig, 'sdkVersion'>, sdkVersion: string): boolean {\n  if (!expJson.sdkVersion) {\n    return false;\n  }\n\n  if (expJson.sdkVersion === 'UNVERSIONED') {\n    return false;\n  }\n\n  try {\n    return semver.lte(expJson.sdkVersion, sdkVersion);\n  } catch (e) {\n    throw new Error(`${expJson.sdkVersion} is not a valid version. Must be in the form of x.y.z`);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}