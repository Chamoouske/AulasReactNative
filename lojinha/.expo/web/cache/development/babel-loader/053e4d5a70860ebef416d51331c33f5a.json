{"ast":null,"code":"'use strict';\n\nimport _objectDestructuringEmpty from \"@babel/runtime/helpers/objectDestructuringEmpty\";\n\nvar _this = this,\n    _jsxFileName = \"/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/LogBox/UI/__tests__/LogBoxInspectorStackFrames-test.js\";\n\nvar React = require('react');\n\nimport LogBoxInspectorStackFrames, { getCollapseMessage } from \"../LogBoxInspectorStackFrames\";\n\nvar _require = require(\"../LogBoxInspectorStackFrames\");\n\n_objectDestructuringEmpty(_require);\n\nvar LogBoxLog = require(\"../../Data/LogBoxLog\").default;\n\nvar render = require(\"../../../../jest/renderer\");\n\nvar createLogWithFrames = function createLogWithFrames(collapsedOptions) {\n  return new LogBoxLog({\n    level: 'warn',\n    isComponentError: false,\n    message: {\n      content: 'Some kind of message (latest)',\n      substitutions: []\n    },\n    stack: createCollapsedFrames(collapsedOptions),\n    category: 'Some kind of message (latest)',\n    componentStack: []\n  });\n};\n\nvar createCollapsedFrames = function createCollapsedFrames(collapsedOptions) {\n  return collapsedOptions.map(function (option) {\n    return {\n      column: 1,\n      file: 'dependency.js',\n      lineNumber: 1,\n      methodName: 'foo',\n      collapse: option == null ? false : option\n    };\n  });\n};\n\ndescribe('LogBoxInspectorStackFrame', function () {\n  it('should render stack frames with 1 frame collapsed', function () {\n    var output = render.shallowRender(React.createElement(LogBoxInspectorStackFrames, {\n      onRetry: function onRetry() {},\n      log: createLogWithFrames([false, true]),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }\n    }));\n    expect(output).toMatchSnapshot();\n  });\n  it('should render null for empty stack frames', function () {\n    var output = render.shallowRender(React.createElement(LogBoxInspectorStackFrames, {\n      onRetry: function onRetry() {},\n      log: createLogWithFrames([]),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }\n    }));\n    expect(output).toMatchSnapshot();\n  });\n  it.each([[null, null, null, true, 'No frames to show'], [true, null, null, true, 'See 1 collapsed frame'], [true, null, null, false, 'Collapse 1 frame'], [false, false, false, true, 'Showing all frames'], [true, false, false, true, 'See 1 more frame'], [true, true, false, true, 'See 2 more frames'], [true, true, true, true, 'See all 3 collapsed frames'], [true, true, true, false, 'Collapse all 3 frames'], [true, true, false, false, 'Collapse 2 frames'], [true, false, false, false, 'Collapse 1 frame'], [false, false, false, false, 'Showing all frames']])('For permutation %s, %s, %s and %s, should render %s', function (stackOne, stackTwo, stackThree, collapsed, message) {\n    expect(getCollapseMessage(createCollapsedFrames([stackOne, stackTwo, stackThree].filter(function (i) {\n      return i != null;\n    })), collapsed)).toEqual(message);\n  });\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/LogBox/UI/__tests__/LogBoxInspectorStackFrames-test.js"],"names":["React","require","LogBoxInspectorStackFrames","getCollapseMessage","LogBoxLog","default","render","createLogWithFrames","collapsedOptions","level","isComponentError","message","content","substitutions","stack","createCollapsedFrames","category","componentStack","map","option","column","file","lineNumber","methodName","collapse","describe","it","output","shallowRender","expect","toMatchSnapshot","each","stackOne","stackTwo","stackThree","collapsed","filter","i","toEqual"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @emails oncall+react_native\n * @flow strict-local\n */\n\n'use strict';\n\nconst React = require('react');\nimport LogBoxInspectorStackFrames, {\n  getCollapseMessage,\n} from '../LogBoxInspectorStackFrames';\n\nconst {} = require('../LogBoxInspectorStackFrames');\nconst LogBoxLog = require('../../Data/LogBoxLog').default;\nconst render = require('../../../../jest/renderer');\n\nconst createLogWithFrames = collapsedOptions => {\n  return new LogBoxLog({\n    level: 'warn',\n    isComponentError: false,\n    message: {\n      content: 'Some kind of message (latest)',\n      substitutions: [],\n    },\n    stack: createCollapsedFrames(collapsedOptions),\n    category: 'Some kind of message (latest)',\n    componentStack: [],\n  });\n};\n\nconst createCollapsedFrames = collapsedOptions => {\n  return collapsedOptions.map(option => ({\n    column: 1,\n    file: 'dependency.js',\n    lineNumber: 1,\n    methodName: 'foo',\n    collapse: option == null ? false : option,\n  }));\n};\n\ndescribe('LogBoxInspectorStackFrame', () => {\n  it('should render stack frames with 1 frame collapsed', () => {\n    const output = render.shallowRender(\n      <LogBoxInspectorStackFrames\n        onRetry={() => {}}\n        log={createLogWithFrames([false, true])}\n      />,\n    );\n\n    expect(output).toMatchSnapshot();\n  });\n\n  it('should render null for empty stack frames', () => {\n    const output = render.shallowRender(\n      <LogBoxInspectorStackFrames\n        onRetry={() => {}}\n        log={createLogWithFrames([])}\n      />,\n    );\n\n    expect(output).toMatchSnapshot();\n  });\n\n  it.each([\n    [null, null, null, true, 'No frames to show'],\n    [true, null, null, true, 'See 1 collapsed frame'],\n    [true, null, null, false, 'Collapse 1 frame'],\n    [false, false, false, true, 'Showing all frames'],\n    [true, false, false, true, 'See 1 more frame'],\n    [true, true, false, true, 'See 2 more frames'],\n    [true, true, true, true, 'See all 3 collapsed frames'],\n    [true, true, true, false, 'Collapse all 3 frames'],\n    [true, true, false, false, 'Collapse 2 frames'],\n    [true, false, false, false, 'Collapse 1 frame'],\n    [false, false, false, false, 'Showing all frames'],\n  ])(\n    'For permutation %s, %s, %s and %s, should render %s',\n    (stackOne, stackTwo, stackThree, collapsed, message) => {\n      expect(\n        getCollapseMessage(\n          createCollapsedFrames(\n            [stackOne, stackTwo, stackThree].filter(i => i != null),\n          ),\n          collapsed,\n        ),\n      ).toEqual(message);\n    },\n  );\n});\n"]},"metadata":{},"sourceType":"module"}