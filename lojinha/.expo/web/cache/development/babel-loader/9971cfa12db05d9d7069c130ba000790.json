{"ast":null,"code":"","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\n// These annotations are copy/pasted from the built-in Flow definitions for\n// Native Promises with some non-standard APIs added in\ndeclare class Promise<+R> {\n  constructor(\n    callback: (\n      resolve: (result?: Promise<R> | R) => void,\n      reject: (error?: any) => void,\n    ) => mixed,\n  ): void;\n\n  then<U>(\n    onFulfill?: ?(value: R) => Promise<U> | ?U,\n    onReject?: ?(error: any) => Promise<U> | ?U,\n  ): Promise<U>;\n\n  catch<U>(onReject?: (error: any) => ?Promise<U> | U): Promise<U>;\n\n  static resolve<T>(object?: Promise<T> | T): Promise<T>;\n  static reject<T>(error?: any): Promise<T>;\n\n  static all<T: Iterable<mixed>>(\n    promises: T,\n  ): Promise<$TupleMap<T, typeof $await>>;\n  static race<T>(promises: Array<Promise<T>>): Promise<T>;\n\n  // Non-standard APIs\n\n  // See https://github.com/facebook/fbjs/blob/master/packages/fbjs/src/__forks__/Promise.native.js#L21\n  finally<U>(onFinally?: ?(value: any) => Promise<U> | U): Promise<U>;\n\n  done<U>(\n    onFulfill?: ?(value: R) => mixed,\n    onReject?: ?(error: any) => mixed,\n  ): void;\n\n  static cast<T>(object?: T): Promise<T>;\n}\n"]},"metadata":{},"sourceType":"script"}