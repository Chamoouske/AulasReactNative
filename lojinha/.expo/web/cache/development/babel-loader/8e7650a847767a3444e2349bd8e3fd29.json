{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.executeCommand = void 0;\n\nfunction _fs() {\n  var data = require(\"fs\");\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _os() {\n  var data = require(\"os\");\n\n  _os = function _os() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  var data = require(\"path\");\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _execa() {\n  var data = _interopRequireDefault(require(\"execa\"));\n\n  _execa = function _execa() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar runElevated = function runElevated(command) {\n  var script = \"If WScript.Arguments.length = 0 Then\\n  Set objShell = CreateObject(\\\"Shell.Application\\\")\\n  'Pass a bogus argument, say [ uac]\\n  objShell.ShellExecute \\\"wscript.exe\\\", Chr(34) & _\\n    WScript.ScriptFullName & Chr(34) & \\\" uac\\\", \\\"\\\", \\\"runas\\\", 1\\nElse\\n  Dim oShell\\n  Set oShell = WScript.CreateObject (\\\"WSCript.shell\\\")\\n  oShell.run \\\"\" + command + \"\\\"\\n  Set oShell = Nothing\\nEnd If\";\n  var elevatedPath = (0, _path().join)((0, _os().tmpdir)(), \"elevated-\" + Math.random() + \".vbs\");\n  (0, _fs().writeFileSync)(elevatedPath, script, 'utf-8');\n  return (0, _execa().default)(elevatedPath);\n};\n\nvar groupArgs = function groupArgs(args) {\n  var isStringArgument = false;\n  var newArgs = args.reduce(function (acum, current) {\n    if (isStringArgument) {\n      var last = acum[acum.length - 1];\n      acum[acum.length - 1] = last + \" \" + current;\n\n      if (current.endsWith('\"')) {\n        isStringArgument = false;\n      }\n\n      return acum;\n    }\n\n    if (current.startsWith('\"')) {\n      if (!current.endsWith('\"')) {\n        isStringArgument = true;\n        acum.push(current);\n        return acum;\n      }\n\n      acum.push(current.replace(/\"/g, ''));\n      return acum;\n    }\n\n    acum.push(current);\n    return acum;\n  }, []);\n  return newArgs;\n};\n\nvar executeShellCommand = function executeShellCommand(command) {\n  var elevated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var args = groupArgs(command.split(' '));\n  var program = args.shift();\n\n  if (elevated) {\n    return runElevated(command);\n  }\n\n  return (0, _execa().default)(program, args, {\n    shell: true\n  });\n};\n\nexports.executeCommand = executeShellCommand;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli/build/tools/windows/executeWinCommand.js"],"names":["Object","defineProperty","exports","value","executeCommand","_fs","data","require","_os","_path","_execa","_interopRequireDefault","obj","__esModule","default","runElevated","command","script","elevatedPath","join","tmpdir","Math","random","writeFileSync","groupArgs","args","isStringArgument","newArgs","reduce","acum","current","last","length","endsWith","startsWith","push","replace","executeShellCommand","elevated","split","program","shift","shell"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.executeCommand = void 0;\n\nfunction _fs() {\n  const data = require(\"fs\");\n\n  _fs = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _os() {\n  const data = require(\"os\");\n\n  _os = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  const data = require(\"path\");\n\n  _path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _execa() {\n  const data = _interopRequireDefault(require(\"execa\"));\n\n  _execa = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** Runs a command requestion permission to run elevated. */\nconst runElevated = command => {\n  // TODO: escape double quotes in args\n  // https://www.winhelponline.com/blog/vbscripts-and-uac-elevation/\n\n  /**\n   * Need to use a couple of intermediary files to make this work as\n   * `ShellExecute` only accepts a command so\n   */\n  // prettier-ignore\n  const script = `If WScript.Arguments.length = 0 Then\n  Set objShell = CreateObject(\"Shell.Application\")\n  'Pass a bogus argument, say [ uac]\n  objShell.ShellExecute \"wscript.exe\", Chr(34) & _\n    WScript.ScriptFullName & Chr(34) & \" uac\", \"\", \"runas\", 1\nElse\n  Dim oShell\n  Set oShell = WScript.CreateObject (\"WSCript.shell\")\n  oShell.run \"${command}\"\n  Set oShell = Nothing\nEnd If`;\n  const elevatedPath = (0, _path().join)((0, _os().tmpdir)(), `elevated-${Math.random()}.vbs`);\n  (0, _fs().writeFileSync)(elevatedPath, script, 'utf-8');\n  return (0, _execa().default)(elevatedPath);\n};\n/**\n * Groups all string arguments into a single one. E.g.:\n * ```js\n * ['-m', '\"Upgrade:', 'to', 'latest', 'version\"'] --> ['-m', '\"Upgrade: to latest version\"']`\n * ```\n * @param args The arguments\n * Â© webhint project\n * (https://github.com/webhintio/hint/blob/30b8ba74f122d8b66fc5596d788dd1c7738f2d83/release/lib/utils.ts#L82)\n * License: Apache-2\n */\n\n\nconst groupArgs = args => {\n  let isStringArgument = false;\n  const newArgs = args.reduce((acum, current) => {\n    if (isStringArgument) {\n      const last = acum[acum.length - 1];\n      acum[acum.length - 1] = `${last} ${current}`;\n\n      if (current.endsWith('\"')) {\n        isStringArgument = false;\n      }\n\n      return acum;\n    }\n\n    if (current.startsWith('\"')) {\n      /**\n       * Argument is split. I.e.: `['\"part1', 'part2\"'];`\n       */\n      if (!current.endsWith('\"')) {\n        isStringArgument = true;\n        acum.push(current);\n        return acum;\n      }\n      /**\n       * Argument is surrounded by \"\" that need to be removed.\n       * We just remove all the quotes because we don't escape any in our commands\n       */\n\n\n      acum.push(current.replace(/\"/g, ''));\n      return acum;\n    }\n\n    acum.push(current);\n    return acum;\n  }, []);\n  return newArgs;\n};\n/**\n * Executes the given `command` on a shell taking care of slicing the parameters\n * if needed.\n */\n\n\nconst executeShellCommand = (command, elevated = false) => {\n  const args = groupArgs(command.split(' '));\n  const program = args.shift();\n\n  if (elevated) {\n    return runElevated(command);\n  }\n\n  return (0, _execa().default)(program, args, {\n    shell: true\n  });\n};\n\nexports.executeCommand = executeShellCommand;\n\n//# sourceMappingURL=executeWinCommand.js.map"]},"metadata":{},"sourceType":"script"}