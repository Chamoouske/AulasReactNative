{"ast":null,"code":"'use strict';\n\nfunction getPropertyType(name, optional, typeAnnotation) {\n  var type = typeAnnotation.type === 'GenericTypeAnnotation' ? typeAnnotation.id.name : typeAnnotation.type;\n\n  switch (type) {\n    case 'BooleanTypeAnnotation':\n      return {\n        type: 'BooleanTypeAnnotation',\n        name: name,\n        optional: optional\n      };\n\n    case 'StringTypeAnnotation':\n      return {\n        type: 'StringTypeAnnotation',\n        name: name,\n        optional: optional\n      };\n\n    case 'Int32':\n      return {\n        type: 'Int32TypeAnnotation',\n        name: name,\n        optional: optional\n      };\n\n    case 'Double':\n      return {\n        type: 'DoubleTypeAnnotation',\n        name: name,\n        optional: optional\n      };\n\n    case 'Float':\n      return {\n        type: 'FloatTypeAnnotation',\n        name: name,\n        optional: optional\n      };\n\n    case 'ObjectTypeAnnotation':\n      return {\n        type: 'ObjectTypeAnnotation',\n        name: name,\n        optional: optional,\n        properties: typeAnnotation.properties.map(buildPropertiesForEvent)\n      };\n\n    case 'UnionTypeAnnotation':\n      return {\n        type: 'StringEnumTypeAnnotation',\n        name: name,\n        optional: optional,\n        options: typeAnnotation.types.map(function (option) {\n          return {\n            name: option.value\n          };\n        })\n      };\n\n    default:\n      type;\n      throw new Error(\"Unable to determine event type for \\\"\" + name + \"\\\": \" + type);\n  }\n}\n\nfunction findEventArgumentsAndType(typeAnnotation, types, bubblingType, paperName) {\n  if (!typeAnnotation.id) {\n    throw new Error(\"typeAnnotation of event doesn't have a name\");\n  }\n\n  var name = typeAnnotation.id.name;\n\n  if (name === '$ReadOnly') {\n    return {\n      argumentProps: typeAnnotation.typeParameters.params[0].properties,\n      paperTopLevelNameDeprecated: paperName,\n      bubblingType: bubblingType\n    };\n  } else if (name === 'BubblingEventHandler' || name === 'DirectEventHandler') {\n    var eventType = name === 'BubblingEventHandler' ? 'bubble' : 'direct';\n    var paperTopLevelNameDeprecated = typeAnnotation.typeParameters.params.length > 1 ? typeAnnotation.typeParameters.params[1].value : null;\n\n    if (typeAnnotation.typeParameters.params[0].type === 'NullLiteralTypeAnnotation') {\n      return {\n        argumentProps: [],\n        bubblingType: eventType,\n        paperTopLevelNameDeprecated: paperTopLevelNameDeprecated\n      };\n    }\n\n    return findEventArgumentsAndType(typeAnnotation.typeParameters.params[0], types, eventType, paperTopLevelNameDeprecated);\n  } else if (types[name]) {\n    return findEventArgumentsAndType(types[name].right, types, bubblingType, paperName);\n  } else {\n    return {\n      argumentProps: null,\n      bubblingType: null,\n      paperTopLevelNameDeprecated: null\n    };\n  }\n}\n\nfunction buildPropertiesForEvent(property) {\n  var name = property.key.name;\n  var optional = property.value.type === 'NullableTypeAnnotation' || property.optional;\n  var typeAnnotation = property.value.type === 'NullableTypeAnnotation' ? property.value.typeAnnotation : property.value;\n  return getPropertyType(name, optional, typeAnnotation);\n}\n\nfunction getEventArgument(argumentProps, name) {\n  return {\n    type: 'ObjectTypeAnnotation',\n    properties: argumentProps.map(buildPropertiesForEvent)\n  };\n}\n\nfunction buildEventSchema(types, property) {\n  var name = property.key.name;\n  var optional = property.optional || property.value.type === 'NullableTypeAnnotation';\n  var typeAnnotation = property.value.type === 'NullableTypeAnnotation' ? property.value.typeAnnotation : property.value;\n\n  if (typeAnnotation.type !== 'GenericTypeAnnotation' || typeAnnotation.id.name !== 'BubblingEventHandler' && typeAnnotation.id.name !== 'DirectEventHandler') {\n    return null;\n  }\n\n  var _findEventArgumentsAn = findEventArgumentsAndType(typeAnnotation, types),\n      argumentProps = _findEventArgumentsAn.argumentProps,\n      bubblingType = _findEventArgumentsAn.bubblingType,\n      paperTopLevelNameDeprecated = _findEventArgumentsAn.paperTopLevelNameDeprecated;\n\n  if (bubblingType && argumentProps) {\n    if (paperTopLevelNameDeprecated != null) {\n      return {\n        name: name,\n        optional: optional,\n        bubblingType: bubblingType,\n        paperTopLevelNameDeprecated: paperTopLevelNameDeprecated,\n        typeAnnotation: {\n          type: 'EventTypeAnnotation',\n          argument: getEventArgument(argumentProps, name)\n        }\n      };\n    }\n\n    return {\n      name: name,\n      optional: optional,\n      bubblingType: bubblingType,\n      typeAnnotation: {\n        type: 'EventTypeAnnotation',\n        argument: getEventArgument(argumentProps, name)\n      }\n    };\n  }\n\n  if (argumentProps === null) {\n    throw new Error(\"Unable to determine event arguments for \\\"\" + name + \"\\\"\");\n  }\n\n  if (bubblingType === null) {\n    throw new Error(\"Unable to determine event arguments for \\\"\" + name + \"\\\"\");\n  }\n}\n\nfunction getEvents(eventTypeAST, types) {\n  return eventTypeAST.filter(function (property) {\n    return property.type === 'ObjectTypeProperty';\n  }).map(function (property) {\n    return buildEventSchema(types, property);\n  }).filter(Boolean);\n}\n\nmodule.exports = {\n  getEvents: getEvents\n};","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/packages/react-native-codegen/src/parsers/flow/components/events.js"],"names":["getPropertyType","name","optional","typeAnnotation","type","id","properties","map","buildPropertiesForEvent","options","types","option","value","Error","findEventArgumentsAndType","bubblingType","paperName","argumentProps","typeParameters","params","paperTopLevelNameDeprecated","eventType","length","right","property","key","getEventArgument","buildEventSchema","argument","getEvents","eventTypeAST","filter","Boolean","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport type {\n  EventTypeShape,\n  ObjectPropertyType,\n} from '../../../CodegenSchema.js';\n\nfunction getPropertyType(name, optional, typeAnnotation) {\n  const type =\n    typeAnnotation.type === 'GenericTypeAnnotation'\n      ? typeAnnotation.id.name\n      : typeAnnotation.type;\n\n  switch (type) {\n    case 'BooleanTypeAnnotation':\n      return {\n        type: 'BooleanTypeAnnotation',\n        name,\n        optional,\n      };\n    case 'StringTypeAnnotation':\n      return {\n        type: 'StringTypeAnnotation',\n        name,\n        optional,\n      };\n    case 'Int32':\n      return {\n        type: 'Int32TypeAnnotation',\n        name,\n        optional,\n      };\n    case 'Double':\n      return {\n        type: 'DoubleTypeAnnotation',\n        name,\n        optional,\n      };\n    case 'Float':\n      return {\n        type: 'FloatTypeAnnotation',\n        name,\n        optional,\n      };\n    case 'ObjectTypeAnnotation':\n      return {\n        type: 'ObjectTypeAnnotation',\n        name,\n        optional,\n        properties: typeAnnotation.properties.map(buildPropertiesForEvent),\n      };\n    case 'UnionTypeAnnotation':\n      return {\n        type: 'StringEnumTypeAnnotation',\n        name,\n        optional,\n        options: typeAnnotation.types.map(option => ({name: option.value})),\n      };\n    default:\n      (type: empty);\n      throw new Error(`Unable to determine event type for \"${name}\": ${type}`);\n  }\n}\n\nfunction findEventArgumentsAndType(\n  typeAnnotation,\n  types,\n  bubblingType,\n  paperName,\n) {\n  if (!typeAnnotation.id) {\n    throw new Error(\"typeAnnotation of event doesn't have a name\");\n  }\n  const name = typeAnnotation.id.name;\n  if (name === '$ReadOnly') {\n    return {\n      argumentProps: typeAnnotation.typeParameters.params[0].properties,\n      paperTopLevelNameDeprecated: paperName,\n      bubblingType,\n    };\n  } else if (name === 'BubblingEventHandler' || name === 'DirectEventHandler') {\n    const eventType = name === 'BubblingEventHandler' ? 'bubble' : 'direct';\n    const paperTopLevelNameDeprecated =\n      typeAnnotation.typeParameters.params.length > 1\n        ? typeAnnotation.typeParameters.params[1].value\n        : null;\n    if (\n      typeAnnotation.typeParameters.params[0].type ===\n      'NullLiteralTypeAnnotation'\n    ) {\n      return {\n        argumentProps: [],\n        bubblingType: eventType,\n        paperTopLevelNameDeprecated,\n      };\n    }\n    return findEventArgumentsAndType(\n      typeAnnotation.typeParameters.params[0],\n      types,\n      eventType,\n      paperTopLevelNameDeprecated,\n    );\n  } else if (types[name]) {\n    return findEventArgumentsAndType(\n      types[name].right,\n      types,\n      bubblingType,\n      paperName,\n    );\n  } else {\n    return {\n      argumentProps: null,\n      bubblingType: null,\n      paperTopLevelNameDeprecated: null,\n    };\n  }\n}\n\nfunction buildPropertiesForEvent(property): ObjectPropertyType {\n  const name = property.key.name;\n  const optional =\n    property.value.type === 'NullableTypeAnnotation' || property.optional;\n  let typeAnnotation =\n    property.value.type === 'NullableTypeAnnotation'\n      ? property.value.typeAnnotation\n      : property.value;\n\n  return getPropertyType(name, optional, typeAnnotation);\n}\n\nfunction getEventArgument(argumentProps, name) {\n  return {\n    type: 'ObjectTypeAnnotation',\n    properties: argumentProps.map(buildPropertiesForEvent),\n  };\n}\n\nfunction buildEventSchema(\n  types: TypeMap,\n  property: EventTypeAST,\n): ?EventTypeShape {\n  const name = property.key.name;\n  const optional =\n    property.optional || property.value.type === 'NullableTypeAnnotation';\n\n  let typeAnnotation =\n    property.value.type === 'NullableTypeAnnotation'\n      ? property.value.typeAnnotation\n      : property.value;\n\n  if (\n    typeAnnotation.type !== 'GenericTypeAnnotation' ||\n    (typeAnnotation.id.name !== 'BubblingEventHandler' &&\n      typeAnnotation.id.name !== 'DirectEventHandler')\n  ) {\n    return null;\n  }\n\n  const {\n    argumentProps,\n    bubblingType,\n    paperTopLevelNameDeprecated,\n  } = findEventArgumentsAndType(typeAnnotation, types);\n\n  if (bubblingType && argumentProps) {\n    if (paperTopLevelNameDeprecated != null) {\n      return {\n        name,\n        optional,\n        bubblingType,\n        paperTopLevelNameDeprecated,\n        typeAnnotation: {\n          type: 'EventTypeAnnotation',\n          argument: getEventArgument(argumentProps, name),\n        },\n      };\n    }\n\n    return {\n      name,\n      optional,\n      bubblingType,\n      typeAnnotation: {\n        type: 'EventTypeAnnotation',\n        argument: getEventArgument(argumentProps, name),\n      },\n    };\n  }\n\n  if (argumentProps === null) {\n    throw new Error(`Unable to determine event arguments for \"${name}\"`);\n  }\n\n  if (bubblingType === null) {\n    throw new Error(`Unable to determine event arguments for \"${name}\"`);\n  }\n}\n\n// $FlowFixMe there's no flowtype for ASTs\ntype EventTypeAST = Object;\n\ntype TypeMap = {\n  // $FlowFixMe there's no flowtype for ASTs\n  [string]: Object,\n  ...,\n};\n\nfunction getEvents(\n  eventTypeAST: $ReadOnlyArray<EventTypeAST>,\n  types: TypeMap,\n): $ReadOnlyArray<EventTypeShape> {\n  return eventTypeAST\n    .filter(property => property.type === 'ObjectTypeProperty')\n    .map(property => buildEventSchema(types, property))\n    .filter(Boolean);\n}\n\nmodule.exports = {\n  getEvents,\n};\n"]},"metadata":{},"sourceType":"script"}