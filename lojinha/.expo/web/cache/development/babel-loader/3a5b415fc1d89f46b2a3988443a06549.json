{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { Writable } from 'stream';\nimport { GeneratedHeader } from \"./GeneratedHeader\";\nimport { PropsType, Type } from \"./Type\";\nimport { Command } from \"./Command\";\nimport { Event } from \"./Event\";\nexport var ImplementationWriter = function () {\n  function ImplementationWriter(stream, types, commands, events) {\n    _classCallCheck(this, ImplementationWriter);\n\n    this.stream = stream;\n    this.types = types;\n    this.commands = commands;\n    this.events = events;\n  }\n\n  _createClass(ImplementationWriter, [{\n    key: \"write\",\n    value: function write() {\n      this.writePrologue();\n      this.writeRequestParser();\n      this.writeTypeDefs();\n      this.writeRequestDefs();\n      this.writeResponseDefs();\n      this.writeNotificationDefs();\n      this.writeEpilogue();\n    }\n  }, {\n    key: \"writePrologue\",\n    value: function writePrologue() {\n      this.stream.write(GeneratedHeader + \"\\n\\n      #include \\\"MessageTypes.h\\\"\\n\\n      #include \\\"MessageTypesInlines.h\\\"\\n\\n      namespace facebook {\\n      namespace hermes {\\n      namespace inspector {\\n      namespace chrome {\\n      namespace message {\\n\\n    \");\n    }\n  }, {\n    key: \"writeRequestParser\",\n    value: function writeRequestParser() {\n      emitRequestParser(this.stream, this.commands);\n    }\n  }, {\n    key: \"writeTypeDefs\",\n    value: function writeTypeDefs() {\n      this.stream.write('\\n/// Types\\n');\n\n      for (var _iterator = _createForOfIteratorHelperLoose(this.types), _step; !(_step = _iterator()).done;) {\n        var type = _step.value;\n\n        if (type instanceof PropsType) {\n          emitTypeDef(this.stream, type);\n        }\n      }\n    }\n  }, {\n    key: \"writeRequestDefs\",\n    value: function writeRequestDefs() {\n      this.stream.write('\\n/// Requests\\n');\n      emitUnknownRequestDef(this.stream);\n\n      for (var _iterator2 = _createForOfIteratorHelperLoose(this.commands), _step2; !(_step2 = _iterator2()).done;) {\n        var command = _step2.value;\n        emitRequestDef(this.stream, command);\n      }\n    }\n  }, {\n    key: \"writeResponseDefs\",\n    value: function writeResponseDefs() {\n      this.stream.write('\\n/// Responses\\n');\n      emitErrorResponseDef(this.stream);\n      emitOkResponseDef(this.stream);\n\n      for (var _iterator3 = _createForOfIteratorHelperLoose(this.commands), _step3; !(_step3 = _iterator3()).done;) {\n        var command = _step3.value;\n        emitResponseDef(this.stream, command);\n      }\n    }\n  }, {\n    key: \"writeNotificationDefs\",\n    value: function writeNotificationDefs() {\n      this.stream.write('\\n/// Notifications\\n');\n\n      for (var _iterator4 = _createForOfIteratorHelperLoose(this.events), _step4; !(_step4 = _iterator4()).done;) {\n        var event = _step4.value;\n        emitNotificationDef(this.stream, event);\n      }\n    }\n  }, {\n    key: \"writeEpilogue\",\n    value: function writeEpilogue() {\n      this.stream.write(\"\\n      } // namespace message\\n      } // namespace chrome\\n      } // namespace inspector\\n      } // namespace hermes\\n      } // namespace facebook\\n    \");\n    }\n  }]);\n\n  return ImplementationWriter;\n}();\n\nfunction emitRequestParser(stream, commands) {\n  stream.write(\"\\n    using RequestBuilder = std::unique_ptr<Request> (*)(const dynamic &);\\n\\n    namespace {\\n\\n    template <typename T>\\n    std::unique_ptr<Request> makeUnique(const dynamic &obj) {\\n      return std::make_unique<T>(obj);\\n    }\\n\\n    } // namespace\\n\\n    std::unique_ptr<Request> Request::fromJsonThrowOnError(const std::string &str) {\\n      static std::unordered_map<std::string, RequestBuilder> builders = {\\n  \");\n\n  for (var _iterator5 = _createForOfIteratorHelperLoose(commands), _step5; !(_step5 = _iterator5()).done;) {\n    var command = _step5.value;\n    var cppNs = command.getCppNamespace();\n    var cppType = command.getRequestCppType();\n    var dbgName = command.getDebuggerName();\n    stream.write(\"{\\\"\" + dbgName + \"\\\", makeUnique<\" + cppNs + \"::\" + cppType + \">},\\n\");\n  }\n\n  stream.write(\"};\\n\\n    dynamic obj = folly::parseJson(str);\\n    std::string method = obj.at(\\\"method\\\").asString();\\n\\n    auto it = builders.find(method);\\n    if (it == builders.end()) {\\n      return std::make_unique<UnknownRequest>(obj);\\n    }\\n\\n    auto builder = it->second;\\n    return builder(obj);\\n  }\\n\\n  folly::Try<std::unique_ptr<Request>> Request::fromJson(const std::string &str) {\\n  return folly::makeTryWith(\\n      [&str] { return Request::fromJsonThrowOnError(str); });\\n  }\\n\\n\");\n  stream.write('\\n');\n}\n\nexport function emitTypeDef(stream, type) {\n  var cppNs = type.getCppNamespace();\n  var cppType = type.getCppType();\n  var props = type.properties || [];\n  stream.write(cppNs + \"::\" + cppType + \"::\" + cppType + \"(const dynamic &obj) {\\n\");\n\n  for (var _iterator6 = _createForOfIteratorHelperLoose(props), _step6; !(_step6 = _iterator6()).done;) {\n    var prop = _step6.value;\n    var id = prop.getCppIdentifier();\n    var name = prop.name;\n    stream.write(\"assign(\" + id + \", obj, \\\"\" + name + \"\\\");\\n\");\n  }\n\n  stream.write('}\\n\\n');\n  stream.write(\"dynamic \" + cppNs + \"::\" + cppType + \"::toDynamic() const {\\n    dynamic obj = dynamic::object;\\n\\n\");\n\n  for (var _iterator7 = _createForOfIteratorHelperLoose(props), _step7; !(_step7 = _iterator7()).done;) {\n    var _prop = _step7.value;\n\n    var _id = _prop.getCppIdentifier();\n\n    var _name = _prop.name;\n    stream.write(\"put(obj, \\\"\" + _name + \"\\\", \" + _id + \");\\n\");\n  }\n\n  stream.write('return obj;\\n}\\n\\n');\n}\n\nfunction emitErrorResponseDef(stream) {\n  stream.write(\"ErrorResponse::ErrorResponse(const dynamic &obj) {\\n    assign(id, obj, \\\"id\\\");\\n\\n    dynamic error = obj.at(\\\"error\\\");\\n    assign(code, error, \\\"code\\\");\\n    assign(message, error, \\\"message\\\");\\n    assign(data, error, \\\"data\\\");\\n  }\\n\\n  dynamic ErrorResponse::toDynamic() const {\\n    dynamic error = dynamic::object;\\n    put(error, \\\"code\\\", code);\\n    put(error, \\\"message\\\", message);\\n    put(error, \\\"data\\\", data);\\n\\n    dynamic obj = dynamic::object;\\n    put(obj, \\\"id\\\", id);\\n    put(obj, \\\"error\\\", std::move(error));\\n    return obj;\\n  }\\n\\n\");\n}\n\nfunction emitOkResponseDef(stream) {\n  stream.write(\"OkResponse::OkResponse(const dynamic &obj) {\\n    assign(id, obj, \\\"id\\\");\\n  }\\n\\n  dynamic OkResponse::toDynamic() const {\\n    dynamic result = dynamic::object;\\n\\n    dynamic obj = dynamic::object;\\n    put(obj, \\\"id\\\", id);\\n    put(obj, \\\"result\\\", std::move(result));\\n    return obj;\\n  }\\n\\n\");\n}\n\nfunction emitUnknownRequestDef(stream) {\n  stream.write(\"UnknownRequest::UnknownRequest() {}\\n\\nUnknownRequest::UnknownRequest(const dynamic &obj) {\\n  assign(id, obj, \\\"id\\\");\\n  assign(method, obj, \\\"method\\\");\\n  assign(params, obj, \\\"params\\\");\\n}\\n\\ndynamic UnknownRequest::toDynamic() const {\\n  dynamic obj = dynamic::object;\\n  put(obj, \\\"id\\\", id);\\n  put(obj, \\\"method\\\", method);\\n  put(obj, \\\"params\\\", params);\\n  return obj;\\n}\\n\\nvoid UnknownRequest::accept(RequestHandler &handler) const {\\n  handler.handle(*this);\\n}\\n\\n\");\n}\n\nexport function emitRequestDef(stream, command) {\n  var cppNs = command.getCppNamespace();\n  var cppType = command.getRequestCppType();\n  var dbgName = command.getDebuggerName();\n  var props = command.parameters || [];\n  stream.write(cppNs + \"::\" + cppType + \"::\" + cppType + \"()\\n      : Request(\\\"\" + dbgName + \"\\\") {}\\n\\n\");\n  stream.write(cppNs + \"::\" + cppType + \"::\" + cppType + \"(const dynamic &obj)\\n      : Request(\\\"\" + dbgName + \"\\\") {\\n    assign(id, obj, \\\"id\\\");\\n    assign(method, obj, \\\"method\\\");\\n\\n\");\n\n  if (props.length > 0) {\n    stream.write('dynamic params = obj.at(\"params\");\\n');\n\n    for (var _iterator8 = _createForOfIteratorHelperLoose(props), _step8; !(_step8 = _iterator8()).done;) {\n      var prop = _step8.value;\n      var id = prop.getCppIdentifier();\n      var name = prop.name;\n      stream.write(\"assign(\" + id + \", params, \\\"\" + name + \"\\\");\\n\");\n    }\n  }\n\n  stream.write('}\\n\\n');\n  stream.write(\"dynamic \" + cppNs + \"::\" + cppType + \"::toDynamic() const {\\n\");\n\n  if (props.length > 0) {\n    stream.write('dynamic params = dynamic::object;\\n');\n\n    for (var _iterator9 = _createForOfIteratorHelperLoose(props), _step9; !(_step9 = _iterator9()).done;) {\n      var _prop2 = _step9.value;\n\n      var _id2 = _prop2.getCppIdentifier();\n\n      var _name2 = _prop2.name;\n      stream.write(\"put(params, \\\"\" + _name2 + \"\\\", \" + _id2 + \");\\n\");\n    }\n  }\n\n  stream.write(\"\\n    dynamic obj = dynamic::object;\\n    put(obj, \\\"id\\\", id);\\n    put(obj, \\\"method\\\", method);\\n  \");\n\n  if (props.length > 0) {\n    stream.write('put(obj, \"params\", std::move(params));\\n');\n  }\n\n  stream.write(\"return obj;\\n    }\\n\\n\");\n  stream.write(\"void \" + cppNs + \"::\" + cppType + \"::accept(RequestHandler &handler) const {\\n    handler.handle(*this);\\n  }\\n\\n\");\n}\nexport function emitResponseDef(stream, command) {\n  var cppNs = command.getCppNamespace();\n  var cppType = command.getResponseCppType();\n\n  if (!cppType) {\n    return;\n  }\n\n  stream.write(cppNs + \"::\" + cppType + \"::\" + cppType + \"(const dynamic &obj) {\\n    assign(id, obj, \\\"id\\\");\\n\\n\");\n  var props = command.returns || [];\n\n  if (props.length > 0) {\n    stream.write('dynamic res = obj.at(\"result\");\\n');\n\n    for (var _iterator10 = _createForOfIteratorHelperLoose(props), _step10; !(_step10 = _iterator10()).done;) {\n      var prop = _step10.value;\n      var id = prop.getCppIdentifier();\n      var name = prop.name;\n      stream.write(\"assign(\" + id + \", res, \\\"\" + name + \"\\\");\\n\");\n    }\n  }\n\n  stream.write('}\\n\\n');\n  stream.write(\"dynamic \" + cppNs + \"::\" + cppType + \"::toDynamic() const {\\n\");\n\n  if (props.length > 0) {\n    stream.write('dynamic res = dynamic::object;\\n');\n\n    for (var _iterator11 = _createForOfIteratorHelperLoose(props), _step11; !(_step11 = _iterator11()).done;) {\n      var _prop3 = _step11.value;\n\n      var _id3 = _prop3.getCppIdentifier();\n\n      var _name3 = _prop3.name;\n      stream.write(\"put(res, \\\"\" + _name3 + \"\\\", \" + _id3 + \");\\n\");\n    }\n  }\n\n  stream.write(\"\\n    dynamic obj = dynamic::object;\\n    put(obj, \\\"id\\\", id);\\n    put(obj, \\\"result\\\", std::move(res));\\n    return obj;\\n  }\\n\\n\");\n}\nexport function emitNotificationDef(stream, event) {\n  var cppNs = event.getCppNamespace();\n  var cppType = event.getCppType();\n  var dbgName = event.getDebuggerName();\n  var props = event.parameters || [];\n  stream.write(cppNs + \"::\" + cppType + \"::\" + cppType + \"()\\n      : Notification(\\\"\" + dbgName + \"\\\") {}\\n\\n\");\n  stream.write(cppNs + \"::\" + cppType + \"::\" + cppType + \"(const dynamic &obj)\\n      : Notification(\\\"\" + dbgName + \"\\\") {\\n    assign(method, obj, \\\"method\\\");\\n\\n\");\n\n  if (props.length > 0) {\n    stream.write('dynamic params = obj.at(\"params\");\\n');\n\n    for (var _iterator12 = _createForOfIteratorHelperLoose(props), _step12; !(_step12 = _iterator12()).done;) {\n      var prop = _step12.value;\n      var id = prop.getCppIdentifier();\n      var name = prop.name;\n      stream.write(\"assign(\" + id + \", params, \\\"\" + name + \"\\\");\\n\");\n    }\n  }\n\n  stream.write('}\\n\\n');\n  stream.write(\"dynamic \" + cppNs + \"::\" + cppType + \"::toDynamic() const {\\n\");\n\n  if (props.length > 0) {\n    stream.write('dynamic params = dynamic::object;\\n');\n\n    for (var _iterator13 = _createForOfIteratorHelperLoose(props), _step13; !(_step13 = _iterator13()).done;) {\n      var _prop4 = _step13.value;\n\n      var _id4 = _prop4.getCppIdentifier();\n\n      var _name4 = _prop4.name;\n      stream.write(\"put(params, \\\"\" + _name4 + \"\\\", \" + _id4 + \");\\n\");\n    }\n  }\n\n  stream.write(\"\\n    dynamic obj = dynamic::object;\\n    put(obj, \\\"method\\\", method);\\n  \");\n\n  if (props.length > 0) {\n    stream.write('put(obj, \"params\", std::move(params));\\n');\n  }\n\n  stream.write(\"return obj;\\n    }\\n\\n\");\n}","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/ReactCommon/hermes/inspector/tools/msggen/src/ImplementationWriter.js"],"names":["Writable","GeneratedHeader","PropsType","Type","Command","Event","ImplementationWriter","stream","types","commands","events","writePrologue","writeRequestParser","writeTypeDefs","writeRequestDefs","writeResponseDefs","writeNotificationDefs","writeEpilogue","write","emitRequestParser","type","emitTypeDef","emitUnknownRequestDef","command","emitRequestDef","emitErrorResponseDef","emitOkResponseDef","emitResponseDef","event","emitNotificationDef","cppNs","getCppNamespace","cppType","getRequestCppType","dbgName","getDebuggerName","getCppType","props","properties","prop","id","getCppIdentifier","name","parameters","length","getResponseCppType","returns"],"mappings":"AAUA;;;;;;;;;;;AAEA,SAAQA,QAAR,QAAuB,QAAvB;AAEA,SAAQC,eAAR;AACA,SAAQC,SAAR,EAAmBC,IAAnB;AACA,SAAQC,OAAR;AACA,SAAQC,KAAR;AAEA,WAAaC,oBAAb;AAME,gCACEC,MADF,EAEEC,KAFF,EAGEC,QAHF,EAIEC,MAJF,EAKE;AAAA;;AACA,SAAKH,MAAL,GAAcA,MAAd;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACD;;AAhBH;AAAA;AAAA,WAkBE,iBAAQ;AACN,WAAKC,aAAL;AACA,WAAKC,kBAAL;AACA,WAAKC,aAAL;AACA,WAAKC,gBAAL;AACA,WAAKC,iBAAL;AACA,WAAKC,qBAAL;AACA,WAAKC,aAAL;AACD;AA1BH;AAAA;AAAA,WA4BE,yBAAgB;AACd,WAAKV,MAAL,CAAYW,KAAZ,CAAqBjB,eAArB;AAaD;AA1CH;AAAA;AAAA,WA4CE,8BAAqB;AACnBkB,MAAAA,iBAAiB,CAAC,KAAKZ,MAAN,EAAc,KAAKE,QAAnB,CAAjB;AACD;AA9CH;AAAA;AAAA,WAgDE,yBAAgB;AACd,WAAKF,MAAL,CAAYW,KAAZ,CAAkB,eAAlB;;AAEA,2DAAmB,KAAKV,KAAxB,wCAA+B;AAAA,YAApBY,IAAoB;;AAC7B,YAAIA,IAAI,YAAYlB,SAApB,EAA+B;AAC7BmB,UAAAA,WAAW,CAAC,KAAKd,MAAN,EAAca,IAAd,CAAX;AACD;AACF;AACF;AAxDH;AAAA;AAAA,WA0DE,4BAAmB;AACjB,WAAKb,MAAL,CAAYW,KAAZ,CAAkB,kBAAlB;AAEAI,MAAAA,qBAAqB,CAAC,KAAKf,MAAN,CAArB;;AAEA,4DAAsB,KAAKE,QAA3B,2CAAqC;AAAA,YAA1Bc,OAA0B;AACnCC,QAAAA,cAAc,CAAC,KAAKjB,MAAN,EAAcgB,OAAd,CAAd;AACD;AACF;AAlEH;AAAA;AAAA,WAoEE,6BAAoB;AAClB,WAAKhB,MAAL,CAAYW,KAAZ,CAAkB,mBAAlB;AAEAO,MAAAA,oBAAoB,CAAC,KAAKlB,MAAN,CAApB;AACAmB,MAAAA,iBAAiB,CAAC,KAAKnB,MAAN,CAAjB;;AAEA,4DAAsB,KAAKE,QAA3B,2CAAqC;AAAA,YAA1Bc,OAA0B;AACnCI,QAAAA,eAAe,CAAC,KAAKpB,MAAN,EAAcgB,OAAd,CAAf;AACD;AACF;AA7EH;AAAA;AAAA,WA+EE,iCAAwB;AACtB,WAAKhB,MAAL,CAAYW,KAAZ,CAAkB,uBAAlB;;AAEA,4DAAoB,KAAKR,MAAzB,2CAAiC;AAAA,YAAtBkB,KAAsB;AAC/BC,QAAAA,mBAAmB,CAAC,KAAKtB,MAAN,EAAcqB,KAAd,CAAnB;AACD;AACF;AArFH;AAAA;AAAA,WAuFE,yBAAgB;AACd,WAAKrB,MAAL,CAAYW,KAAZ;AAOD;AA/FH;;AAAA;AAAA;;AAkGA,SAASC,iBAAT,CAA2BZ,MAA3B,EAA6CE,QAA7C,EAAuE;AACrEF,EAAAA,MAAM,CAACW,KAAP;;AAgBA,wDAAsBT,QAAtB,2CAAgC;AAAA,QAArBc,OAAqB;AAC9B,QAAMO,KAAK,GAAGP,OAAO,CAACQ,eAAR,EAAd;AACA,QAAMC,OAAO,GAAGT,OAAO,CAACU,iBAAR,EAAhB;AACA,QAAMC,OAAO,GAAGX,OAAO,CAACY,eAAR,EAAhB;AAEA5B,IAAAA,MAAM,CAACW,KAAP,SAAkBgB,OAAlB,uBAA0CJ,KAA1C,UAAoDE,OAApD;AACD;;AAEDzB,EAAAA,MAAM,CAACW,KAAP;AAmBAX,EAAAA,MAAM,CAACW,KAAP,CAAa,IAAb;AACD;;AAED,OAAO,SAASG,WAAT,CAAqBd,MAArB,EAAuCa,IAAvC,EAAwD;AAC7D,MAAMU,KAAK,GAAGV,IAAI,CAACW,eAAL,EAAd;AACA,MAAMC,OAAO,GAAGZ,IAAI,CAACgB,UAAL,EAAhB;AACA,MAAMC,KAAK,GAAGjB,IAAI,CAACkB,UAAL,IAAmB,EAAjC;AAGA/B,EAAAA,MAAM,CAACW,KAAP,CAAgBY,KAAhB,UAA0BE,OAA1B,UAAsCA,OAAtC;;AAEA,wDAAmBK,KAAnB,2CAA0B;AAAA,QAAfE,IAAe;AACxB,QAAMC,EAAE,GAAGD,IAAI,CAACE,gBAAL,EAAX;AACA,QAAMC,IAAI,GAAGH,IAAI,CAACG,IAAlB;AACAnC,IAAAA,MAAM,CAACW,KAAP,aAAuBsB,EAAvB,iBAAoCE,IAApC;AACD;;AAEDnC,EAAAA,MAAM,CAACW,KAAP,CAAa,OAAb;AAGAX,EAAAA,MAAM,CAACW,KAAP,cAAwBY,KAAxB,UAAkCE,OAAlC;;AAGA,wDAAmBK,KAAnB,2CAA0B;AAAA,QAAfE,KAAe;;AACxB,QAAMC,GAAE,GAAGD,KAAI,CAACE,gBAAL,EAAX;;AACA,QAAMC,KAAI,GAAGH,KAAI,CAACG,IAAlB;AACAnC,IAAAA,MAAM,CAACW,KAAP,iBAA0BwB,KAA1B,YAAoCF,GAApC;AACD;;AAEDjC,EAAAA,MAAM,CAACW,KAAP,CAAa,oBAAb;AACD;;AAED,SAASO,oBAAT,CAA8BlB,MAA9B,EAAgD;AAC9CA,EAAAA,MAAM,CAACW,KAAP;AAoBD;;AAED,SAASQ,iBAAT,CAA2BnB,MAA3B,EAA6C;AAC3CA,EAAAA,MAAM,CAACW,KAAP;AAYD;;AAED,SAASI,qBAAT,CAA+Bf,MAA/B,EAAiD;AAC/CA,EAAAA,MAAM,CAACW,KAAP;AAmBD;;AAED,OAAO,SAASM,cAAT,CAAwBjB,MAAxB,EAA0CgB,OAA1C,EAA4D;AACjE,MAAMO,KAAK,GAAGP,OAAO,CAACQ,eAAR,EAAd;AACA,MAAMC,OAAO,GAAGT,OAAO,CAACU,iBAAR,EAAhB;AACA,MAAMC,OAAO,GAAGX,OAAO,CAACY,eAAR,EAAhB;AACA,MAAME,KAAK,GAAGd,OAAO,CAACoB,UAAR,IAAsB,EAApC;AAGApC,EAAAA,MAAM,CAACW,KAAP,CAAgBY,KAAhB,UAA0BE,OAA1B,UAAsCA,OAAtC,8BACiBE,OADjB;AAIA3B,EAAAA,MAAM,CAACW,KAAP,CAAgBY,KAAhB,UAA0BE,OAA1B,UAAsCA,OAAtC,gDACiBE,OADjB;;AAKA,MAAIG,KAAK,CAACO,MAAN,GAAe,CAAnB,EAAsB;AACpBrC,IAAAA,MAAM,CAACW,KAAP,CAAa,sCAAb;;AAEA,0DAAmBmB,KAAnB,2CAA0B;AAAA,UAAfE,IAAe;AACxB,UAAMC,EAAE,GAAGD,IAAI,CAACE,gBAAL,EAAX;AACA,UAAMC,IAAI,GAAGH,IAAI,CAACG,IAAlB;AACAnC,MAAAA,MAAM,CAACW,KAAP,aAAuBsB,EAAvB,oBAAuCE,IAAvC;AACD;AACF;;AAEDnC,EAAAA,MAAM,CAACW,KAAP,CAAa,OAAb;AAGAX,EAAAA,MAAM,CAACW,KAAP,cAAwBY,KAAxB,UAAkCE,OAAlC;;AAEA,MAAIK,KAAK,CAACO,MAAN,GAAe,CAAnB,EAAsB;AACpBrC,IAAAA,MAAM,CAACW,KAAP,CAAa,qCAAb;;AAEA,0DAAmBmB,KAAnB,2CAA0B;AAAA,UAAfE,MAAe;;AACxB,UAAMC,IAAE,GAAGD,MAAI,CAACE,gBAAL,EAAX;;AACA,UAAMC,MAAI,GAAGH,MAAI,CAACG,IAAlB;AACAnC,MAAAA,MAAM,CAACW,KAAP,oBAA6BwB,MAA7B,YAAuCF,IAAvC;AACD;AACF;;AAEDjC,EAAAA,MAAM,CAACW,KAAP;;AAMA,MAAImB,KAAK,CAACO,MAAN,GAAe,CAAnB,EAAsB;AACpBrC,IAAAA,MAAM,CAACW,KAAP,CAAa,0CAAb;AACD;;AAEDX,EAAAA,MAAM,CAACW,KAAP;AAIAX,EAAAA,MAAM,CAACW,KAAP,WAAqBY,KAArB,UAA+BE,OAA/B;AAGD;AAED,OAAO,SAASL,eAAT,CAAyBpB,MAAzB,EAA2CgB,OAA3C,EAA6D;AAClE,MAAMO,KAAK,GAAGP,OAAO,CAACQ,eAAR,EAAd;AACA,MAAMC,OAAO,GAAGT,OAAO,CAACsB,kBAAR,EAAhB;;AACA,MAAI,CAACb,OAAL,EAAc;AACZ;AACD;;AAGDzB,EAAAA,MAAM,CAACW,KAAP,CAAgBY,KAAhB,UAA0BE,OAA1B,UAAsCA,OAAtC;AAGA,MAAMK,KAAK,GAAGd,OAAO,CAACuB,OAAR,IAAmB,EAAjC;;AACA,MAAIT,KAAK,CAACO,MAAN,GAAe,CAAnB,EAAsB;AACpBrC,IAAAA,MAAM,CAACW,KAAP,CAAa,mCAAb;;AAEA,2DAAmBmB,KAAnB,8CAA0B;AAAA,UAAfE,IAAe;AACxB,UAAMC,EAAE,GAAGD,IAAI,CAACE,gBAAL,EAAX;AACA,UAAMC,IAAI,GAAGH,IAAI,CAACG,IAAlB;AACAnC,MAAAA,MAAM,CAACW,KAAP,aAAuBsB,EAAvB,iBAAoCE,IAApC;AACD;AACF;;AAEDnC,EAAAA,MAAM,CAACW,KAAP,CAAa,OAAb;AAGAX,EAAAA,MAAM,CAACW,KAAP,cAAwBY,KAAxB,UAAkCE,OAAlC;;AAEA,MAAIK,KAAK,CAACO,MAAN,GAAe,CAAnB,EAAsB;AACpBrC,IAAAA,MAAM,CAACW,KAAP,CAAa,kCAAb;;AAEA,2DAAmBmB,KAAnB,8CAA0B;AAAA,UAAfE,MAAe;;AACxB,UAAMC,IAAE,GAAGD,MAAI,CAACE,gBAAL,EAAX;;AACA,UAAMC,MAAI,GAAGH,MAAI,CAACG,IAAlB;AACAnC,MAAAA,MAAM,CAACW,KAAP,iBAA0BwB,MAA1B,YAAoCF,IAApC;AACD;AACF;;AAEDjC,EAAAA,MAAM,CAACW,KAAP;AAMD;AAED,OAAO,SAASW,mBAAT,CAA6BtB,MAA7B,EAA+CqB,KAA/C,EAA6D;AAClE,MAAME,KAAK,GAAGF,KAAK,CAACG,eAAN,EAAd;AACA,MAAMC,OAAO,GAAGJ,KAAK,CAACQ,UAAN,EAAhB;AACA,MAAMF,OAAO,GAAGN,KAAK,CAACO,eAAN,EAAhB;AACA,MAAME,KAAK,GAAGT,KAAK,CAACe,UAAN,IAAoB,EAAlC;AAGApC,EAAAA,MAAM,CAACW,KAAP,CAAgBY,KAAhB,UAA0BE,OAA1B,UAAsCA,OAAtC,mCACsBE,OADtB;AAIA3B,EAAAA,MAAM,CAACW,KAAP,CAAgBY,KAAhB,UAA0BE,OAA1B,UAAsCA,OAAtC,qDACsBE,OADtB;;AAIA,MAAIG,KAAK,CAACO,MAAN,GAAe,CAAnB,EAAsB;AACpBrC,IAAAA,MAAM,CAACW,KAAP,CAAa,sCAAb;;AAEA,2DAAmBmB,KAAnB,8CAA0B;AAAA,UAAfE,IAAe;AACxB,UAAMC,EAAE,GAAGD,IAAI,CAACE,gBAAL,EAAX;AACA,UAAMC,IAAI,GAAGH,IAAI,CAACG,IAAlB;AACAnC,MAAAA,MAAM,CAACW,KAAP,aAAuBsB,EAAvB,oBAAuCE,IAAvC;AACD;AACF;;AAEDnC,EAAAA,MAAM,CAACW,KAAP,CAAa,OAAb;AAGAX,EAAAA,MAAM,CAACW,KAAP,cAAwBY,KAAxB,UAAkCE,OAAlC;;AAEA,MAAIK,KAAK,CAACO,MAAN,GAAe,CAAnB,EAAsB;AACpBrC,IAAAA,MAAM,CAACW,KAAP,CAAa,qCAAb;;AAEA,2DAAmBmB,KAAnB,8CAA0B;AAAA,UAAfE,MAAe;;AACxB,UAAMC,IAAE,GAAGD,MAAI,CAACE,gBAAL,EAAX;;AACA,UAAMC,MAAI,GAAGH,MAAI,CAACG,IAAlB;AACAnC,MAAAA,MAAM,CAACW,KAAP,oBAA6BwB,MAA7B,YAAuCF,IAAvC;AACD;AACF;;AAEDjC,EAAAA,MAAM,CAACW,KAAP;;AAKA,MAAImB,KAAK,CAACO,MAAN,GAAe,CAAnB,EAAsB;AACpBrC,IAAAA,MAAM,CAACW,KAAP,CAAa,0CAAb;AACD;;AAEDX,EAAAA,MAAM,CAACW,KAAP;AAED","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nimport {Writable} from 'stream';\n\nimport {GeneratedHeader} from './GeneratedHeader';\nimport {PropsType, Type} from './Type';\nimport {Command} from './Command';\nimport {Event} from './Event';\n\nexport class ImplementationWriter {\n  stream: Writable;\n  types: Array<Type>;\n  commands: Array<Command>;\n  events: Array<Event>;\n\n  constructor(\n    stream: Writable,\n    types: Array<Type>,\n    commands: Array<Command>,\n    events: Array<Event>,\n  ) {\n    this.stream = stream;\n    this.types = types;\n    this.commands = commands;\n    this.events = events;\n  }\n\n  write() {\n    this.writePrologue();\n    this.writeRequestParser();\n    this.writeTypeDefs();\n    this.writeRequestDefs();\n    this.writeResponseDefs();\n    this.writeNotificationDefs();\n    this.writeEpilogue();\n  }\n\n  writePrologue() {\n    this.stream.write(`${GeneratedHeader}\n\n      #include \"MessageTypes.h\"\n\n      #include \"MessageTypesInlines.h\"\n\n      namespace facebook {\n      namespace hermes {\n      namespace inspector {\n      namespace chrome {\n      namespace message {\n\n    `);\n  }\n\n  writeRequestParser() {\n    emitRequestParser(this.stream, this.commands);\n  }\n\n  writeTypeDefs() {\n    this.stream.write('\\n/// Types\\n');\n\n    for (const type of this.types) {\n      if (type instanceof PropsType) {\n        emitTypeDef(this.stream, type);\n      }\n    }\n  }\n\n  writeRequestDefs() {\n    this.stream.write('\\n/// Requests\\n');\n\n    emitUnknownRequestDef(this.stream);\n\n    for (const command of this.commands) {\n      emitRequestDef(this.stream, command);\n    }\n  }\n\n  writeResponseDefs() {\n    this.stream.write('\\n/// Responses\\n');\n\n    emitErrorResponseDef(this.stream);\n    emitOkResponseDef(this.stream);\n\n    for (const command of this.commands) {\n      emitResponseDef(this.stream, command);\n    }\n  }\n\n  writeNotificationDefs() {\n    this.stream.write('\\n/// Notifications\\n');\n\n    for (const event of this.events) {\n      emitNotificationDef(this.stream, event);\n    }\n  }\n\n  writeEpilogue() {\n    this.stream.write(`\n      } // namespace message\n      } // namespace chrome\n      } // namespace inspector\n      } // namespace hermes\n      } // namespace facebook\n    `);\n  }\n}\n\nfunction emitRequestParser(stream: Writable, commands: Array<Command>) {\n  stream.write(`\n    using RequestBuilder = std::unique_ptr<Request> (*)(const dynamic &);\n\n    namespace {\n\n    template <typename T>\n    std::unique_ptr<Request> makeUnique(const dynamic &obj) {\n      return std::make_unique<T>(obj);\n    }\n\n    } // namespace\n\n    std::unique_ptr<Request> Request::fromJsonThrowOnError(const std::string &str) {\n      static std::unordered_map<std::string, RequestBuilder> builders = {\n  `);\n\n  for (const command of commands) {\n    const cppNs = command.getCppNamespace();\n    const cppType = command.getRequestCppType();\n    const dbgName = command.getDebuggerName();\n\n    stream.write(`{\"${dbgName}\", makeUnique<${cppNs}::${cppType}>},\\n`);\n  }\n\n  stream.write(`};\n\n    dynamic obj = folly::parseJson(str);\n    std::string method = obj.at(\"method\").asString();\n\n    auto it = builders.find(method);\n    if (it == builders.end()) {\n      return std::make_unique<UnknownRequest>(obj);\n    }\n\n    auto builder = it->second;\n    return builder(obj);\n  }\n\n  folly::Try<std::unique_ptr<Request>> Request::fromJson(const std::string &str) {\n  return folly::makeTryWith(\n      [&str] { return Request::fromJsonThrowOnError(str); });\n  }\\n\\n`);\n\n  stream.write('\\n');\n}\n\nexport function emitTypeDef(stream: Writable, type: PropsType) {\n  const cppNs = type.getCppNamespace();\n  const cppType = type.getCppType();\n  const props = type.properties || [];\n\n  // From-dynamic constructor\n  stream.write(`${cppNs}::${cppType}::${cppType}(const dynamic &obj) {\\n`);\n\n  for (const prop of props) {\n    const id = prop.getCppIdentifier();\n    const name = prop.name;\n    stream.write(`assign(${id}, obj, \"${name}\");\\n`);\n  }\n\n  stream.write('}\\n\\n');\n\n  // toDynamic\n  stream.write(`dynamic ${cppNs}::${cppType}::toDynamic() const {\n    dynamic obj = dynamic::object;\\n\\n`);\n\n  for (const prop of props) {\n    const id = prop.getCppIdentifier();\n    const name = prop.name;\n    stream.write(`put(obj, \"${name}\", ${id});\\n`);\n  }\n\n  stream.write('return obj;\\n}\\n\\n');\n}\n\nfunction emitErrorResponseDef(stream: Writable) {\n  stream.write(`ErrorResponse::ErrorResponse(const dynamic &obj) {\n    assign(id, obj, \"id\");\n\n    dynamic error = obj.at(\"error\");\n    assign(code, error, \"code\");\n    assign(message, error, \"message\");\n    assign(data, error, \"data\");\n  }\n\n  dynamic ErrorResponse::toDynamic() const {\n    dynamic error = dynamic::object;\n    put(error, \"code\", code);\n    put(error, \"message\", message);\n    put(error, \"data\", data);\n\n    dynamic obj = dynamic::object;\n    put(obj, \"id\", id);\n    put(obj, \"error\", std::move(error));\n    return obj;\n  }\\n\\n`);\n}\n\nfunction emitOkResponseDef(stream: Writable) {\n  stream.write(`OkResponse::OkResponse(const dynamic &obj) {\n    assign(id, obj, \"id\");\n  }\n\n  dynamic OkResponse::toDynamic() const {\n    dynamic result = dynamic::object;\n\n    dynamic obj = dynamic::object;\n    put(obj, \"id\", id);\n    put(obj, \"result\", std::move(result));\n    return obj;\n  }\\n\\n`);\n}\n\nfunction emitUnknownRequestDef(stream: Writable) {\n  stream.write(`UnknownRequest::UnknownRequest() {}\n\nUnknownRequest::UnknownRequest(const dynamic &obj) {\n  assign(id, obj, \"id\");\n  assign(method, obj, \"method\");\n  assign(params, obj, \"params\");\n}\n\ndynamic UnknownRequest::toDynamic() const {\n  dynamic obj = dynamic::object;\n  put(obj, \"id\", id);\n  put(obj, \"method\", method);\n  put(obj, \"params\", params);\n  return obj;\n}\n\nvoid UnknownRequest::accept(RequestHandler &handler) const {\n  handler.handle(*this);\n}\\n\\n`);\n}\n\nexport function emitRequestDef(stream: Writable, command: Command) {\n  const cppNs = command.getCppNamespace();\n  const cppType = command.getRequestCppType();\n  const dbgName = command.getDebuggerName();\n  const props = command.parameters || [];\n\n  // Default constructor\n  stream.write(`${cppNs}::${cppType}::${cppType}()\n      : Request(\"${dbgName}\") {}\\n\\n`);\n\n  // From-dynamic constructor\n  stream.write(`${cppNs}::${cppType}::${cppType}(const dynamic &obj)\n      : Request(\"${dbgName}\") {\n    assign(id, obj, \"id\");\n    assign(method, obj, \"method\");\\n\\n`);\n\n  if (props.length > 0) {\n    stream.write('dynamic params = obj.at(\"params\");\\n');\n\n    for (const prop of props) {\n      const id = prop.getCppIdentifier();\n      const name = prop.name;\n      stream.write(`assign(${id}, params, \"${name}\");\\n`);\n    }\n  }\n\n  stream.write('}\\n\\n');\n\n  // toDynamic\n  stream.write(`dynamic ${cppNs}::${cppType}::toDynamic() const {\\n`);\n\n  if (props.length > 0) {\n    stream.write('dynamic params = dynamic::object;\\n');\n\n    for (const prop of props) {\n      const id = prop.getCppIdentifier();\n      const name = prop.name;\n      stream.write(`put(params, \"${name}\", ${id});\\n`);\n    }\n  }\n\n  stream.write(`\n    dynamic obj = dynamic::object;\n    put(obj, \"id\", id);\n    put(obj, \"method\", method);\n  `);\n\n  if (props.length > 0) {\n    stream.write('put(obj, \"params\", std::move(params));\\n');\n  }\n\n  stream.write(`return obj;\n    }\\n\\n`);\n\n  // visitor\n  stream.write(`void ${cppNs}::${cppType}::accept(RequestHandler &handler) const {\n    handler.handle(*this);\n  }\\n\\n`);\n}\n\nexport function emitResponseDef(stream: Writable, command: Command) {\n  const cppNs = command.getCppNamespace();\n  const cppType = command.getResponseCppType();\n  if (!cppType) {\n    return;\n  }\n\n  // From-dynamic constructor\n  stream.write(`${cppNs}::${cppType}::${cppType}(const dynamic &obj) {\n    assign(id, obj, \"id\");\\n\\n`);\n\n  const props = command.returns || [];\n  if (props.length > 0) {\n    stream.write('dynamic res = obj.at(\"result\");\\n');\n\n    for (const prop of props) {\n      const id = prop.getCppIdentifier();\n      const name = prop.name;\n      stream.write(`assign(${id}, res, \"${name}\");\\n`);\n    }\n  }\n\n  stream.write('}\\n\\n');\n\n  // toDynamic\n  stream.write(`dynamic ${cppNs}::${cppType}::toDynamic() const {\\n`);\n\n  if (props.length > 0) {\n    stream.write('dynamic res = dynamic::object;\\n');\n\n    for (const prop of props) {\n      const id = prop.getCppIdentifier();\n      const name = prop.name;\n      stream.write(`put(res, \"${name}\", ${id});\\n`);\n    }\n  }\n\n  stream.write(`\n    dynamic obj = dynamic::object;\n    put(obj, \"id\", id);\n    put(obj, \"result\", std::move(res));\n    return obj;\n  }\\n\\n`);\n}\n\nexport function emitNotificationDef(stream: Writable, event: Event) {\n  const cppNs = event.getCppNamespace();\n  const cppType = event.getCppType();\n  const dbgName = event.getDebuggerName();\n  const props = event.parameters || [];\n\n  // Default constructor\n  stream.write(`${cppNs}::${cppType}::${cppType}()\n      : Notification(\"${dbgName}\") {}\\n\\n`);\n\n  // From-dynamic constructor\n  stream.write(`${cppNs}::${cppType}::${cppType}(const dynamic &obj)\n      : Notification(\"${dbgName}\") {\n    assign(method, obj, \"method\");\\n\\n`);\n\n  if (props.length > 0) {\n    stream.write('dynamic params = obj.at(\"params\");\\n');\n\n    for (const prop of props) {\n      const id = prop.getCppIdentifier();\n      const name = prop.name;\n      stream.write(`assign(${id}, params, \"${name}\");\\n`);\n    }\n  }\n\n  stream.write('}\\n\\n');\n\n  // toDynamic\n  stream.write(`dynamic ${cppNs}::${cppType}::toDynamic() const {\\n`);\n\n  if (props.length > 0) {\n    stream.write('dynamic params = dynamic::object;\\n');\n\n    for (const prop of props) {\n      const id = prop.getCppIdentifier();\n      const name = prop.name;\n      stream.write(`put(params, \"${name}\", ${id});\\n`);\n    }\n  }\n\n  stream.write(`\n    dynamic obj = dynamic::object;\n    put(obj, \"method\", method);\n  `);\n\n  if (props.length > 0) {\n    stream.write('put(obj, \"params\", std::move(params));\\n');\n  }\n\n  stream.write(`return obj;\n    }\\n\\n`);\n}\n"]},"metadata":{},"sourceType":"module"}