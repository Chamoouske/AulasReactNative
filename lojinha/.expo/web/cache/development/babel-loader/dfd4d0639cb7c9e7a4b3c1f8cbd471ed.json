{"ast":null,"code":"var _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar Range = function () {\n  \"use strict\";\n\n  function Range(range, options) {\n    var _this = this;\n\n    _classCallCheck(this, Range);\n\n    if (!options || typeof options !== 'object') {\n      options = {\n        loose: !!options,\n        includePrerelease: false\n      };\n    }\n\n    if (range instanceof Range) {\n      if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {\n        return range;\n      } else {\n        return new Range(range.raw, options);\n      }\n    }\n\n    if (range instanceof Comparator) {\n      this.raw = range.value;\n      this.set = [[range]];\n      this.format();\n      return this;\n    }\n\n    this.options = options;\n    this.loose = !!options.loose;\n    this.includePrerelease = !!options.includePrerelease;\n    this.raw = range;\n    this.set = range.split(/\\s*\\|\\|\\s*/).map(function (range) {\n      return _this.parseRange(range.trim());\n    }).filter(function (c) {\n      return c.length;\n    });\n\n    if (!this.set.length) {\n      throw new TypeError(\"Invalid SemVer Range: \" + range);\n    }\n\n    this.format();\n  }\n\n  _createClass(Range, [{\n    key: \"format\",\n    value: function format() {\n      this.range = this.set.map(function (comps) {\n        return comps.join(' ').trim();\n      }).join('||').trim();\n      return this.range;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.range;\n    }\n  }, {\n    key: \"parseRange\",\n    value: function parseRange(range) {\n      var _this2 = this;\n\n      var loose = this.options.loose;\n      range = range.trim();\n      var hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];\n      range = range.replace(hr, hyphenReplace(this.options.includePrerelease));\n      debug('hyphen replace', range);\n      range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace);\n      debug('comparator trim', range, re[t.COMPARATORTRIM]);\n      range = range.replace(re[t.TILDETRIM], tildeTrimReplace);\n      range = range.replace(re[t.CARETTRIM], caretTrimReplace);\n      range = range.split(/\\s+/).join(' ');\n      var compRe = loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];\n      return range.split(' ').map(function (comp) {\n        return parseComparator(comp, _this2.options);\n      }).join(' ').split(/\\s+/).map(function (comp) {\n        return replaceGTE0(comp, _this2.options);\n      }).filter(this.options.loose ? function (comp) {\n        return !!comp.match(compRe);\n      } : function () {\n        return true;\n      }).map(function (comp) {\n        return new Comparator(comp, _this2.options);\n      });\n    }\n  }, {\n    key: \"intersects\",\n    value: function intersects(range, options) {\n      if (!(range instanceof Range)) {\n        throw new TypeError('a Range is required');\n      }\n\n      return this.set.some(function (thisComparators) {\n        return isSatisfiable(thisComparators, options) && range.set.some(function (rangeComparators) {\n          return isSatisfiable(rangeComparators, options) && thisComparators.every(function (thisComparator) {\n            return rangeComparators.every(function (rangeComparator) {\n              return thisComparator.intersects(rangeComparator, options);\n            });\n          });\n        });\n      });\n    }\n  }, {\n    key: \"test\",\n    value: function test(version) {\n      if (!version) {\n        return false;\n      }\n\n      if (typeof version === 'string') {\n        try {\n          version = new SemVer(version, this.options);\n        } catch (er) {\n          return false;\n        }\n      }\n\n      for (var i = 0; i < this.set.length; i++) {\n        if (testSet(this.set[i], version, this.options)) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }]);\n\n  return Range;\n}();\n\nmodule.exports = Range;\n\nvar Comparator = require(\"./comparator\");\n\nvar debug = require(\"../internal/debug\");\n\nvar SemVer = require(\"./semver\");\n\nvar _require = require(\"../internal/re\"),\n    re = _require.re,\n    t = _require.t,\n    comparatorTrimReplace = _require.comparatorTrimReplace,\n    tildeTrimReplace = _require.tildeTrimReplace,\n    caretTrimReplace = _require.caretTrimReplace;\n\nvar isSatisfiable = function isSatisfiable(comparators, options) {\n  var result = true;\n  var remainingComparators = comparators.slice();\n  var testComparator = remainingComparators.pop();\n\n  while (result && remainingComparators.length) {\n    result = remainingComparators.every(function (otherComparator) {\n      return testComparator.intersects(otherComparator, options);\n    });\n    testComparator = remainingComparators.pop();\n  }\n\n  return result;\n};\n\nvar parseComparator = function parseComparator(comp, options) {\n  debug('comp', comp, options);\n  comp = replaceCarets(comp, options);\n  debug('caret', comp);\n  comp = replaceTildes(comp, options);\n  debug('tildes', comp);\n  comp = replaceXRanges(comp, options);\n  debug('xrange', comp);\n  comp = replaceStars(comp, options);\n  debug('stars', comp);\n  return comp;\n};\n\nvar isX = function isX(id) {\n  return !id || id.toLowerCase() === 'x' || id === '*';\n};\n\nvar replaceTildes = function replaceTildes(comp, options) {\n  return comp.trim().split(/\\s+/).map(function (comp) {\n    return replaceTilde(comp, options);\n  }).join(' ');\n};\n\nvar replaceTilde = function replaceTilde(comp, options) {\n  var r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];\n  return comp.replace(r, function (_, M, m, p, pr) {\n    debug('tilde', comp, _, M, m, p, pr);\n    var ret;\n\n    if (isX(M)) {\n      ret = '';\n    } else if (isX(m)) {\n      ret = \">=\" + M + \".0.0 <\" + (+M + 1) + \".0.0-0\";\n    } else if (isX(p)) {\n      ret = \">=\" + M + \".\" + m + \".0 <\" + M + \".\" + (+m + 1) + \".0-0\";\n    } else if (pr) {\n      debug('replaceTilde pr', pr);\n      ret = \">=\" + M + \".\" + m + \".\" + p + \"-\" + pr + \" <\" + M + \".\" + (+m + 1) + \".0-0\";\n    } else {\n      ret = \">=\" + M + \".\" + m + \".\" + p + \" <\" + M + \".\" + (+m + 1) + \".0-0\";\n    }\n\n    debug('tilde return', ret);\n    return ret;\n  });\n};\n\nvar replaceCarets = function replaceCarets(comp, options) {\n  return comp.trim().split(/\\s+/).map(function (comp) {\n    return replaceCaret(comp, options);\n  }).join(' ');\n};\n\nvar replaceCaret = function replaceCaret(comp, options) {\n  debug('caret', comp, options);\n  var r = options.loose ? re[t.CARETLOOSE] : re[t.CARET];\n  var z = options.includePrerelease ? '-0' : '';\n  return comp.replace(r, function (_, M, m, p, pr) {\n    debug('caret', comp, _, M, m, p, pr);\n    var ret;\n\n    if (isX(M)) {\n      ret = '';\n    } else if (isX(m)) {\n      ret = \">=\" + M + \".0.0\" + z + \" <\" + (+M + 1) + \".0.0-0\";\n    } else if (isX(p)) {\n      if (M === '0') {\n        ret = \">=\" + M + \".\" + m + \".0\" + z + \" <\" + M + \".\" + (+m + 1) + \".0-0\";\n      } else {\n        ret = \">=\" + M + \".\" + m + \".0\" + z + \" <\" + (+M + 1) + \".0.0-0\";\n      }\n    } else if (pr) {\n      debug('replaceCaret pr', pr);\n\n      if (M === '0') {\n        if (m === '0') {\n          ret = \">=\" + M + \".\" + m + \".\" + p + \"-\" + pr + \" <\" + M + \".\" + m + \".\" + (+p + 1) + \"-0\";\n        } else {\n          ret = \">=\" + M + \".\" + m + \".\" + p + \"-\" + pr + \" <\" + M + \".\" + (+m + 1) + \".0-0\";\n        }\n      } else {\n        ret = \">=\" + M + \".\" + m + \".\" + p + \"-\" + pr + \" <\" + (+M + 1) + \".0.0-0\";\n      }\n    } else {\n      debug('no pr');\n\n      if (M === '0') {\n        if (m === '0') {\n          ret = \">=\" + M + \".\" + m + \".\" + p + z + \" <\" + M + \".\" + m + \".\" + (+p + 1) + \"-0\";\n        } else {\n          ret = \">=\" + M + \".\" + m + \".\" + p + z + \" <\" + M + \".\" + (+m + 1) + \".0-0\";\n        }\n      } else {\n        ret = \">=\" + M + \".\" + m + \".\" + p + \" <\" + (+M + 1) + \".0.0-0\";\n      }\n    }\n\n    debug('caret return', ret);\n    return ret;\n  });\n};\n\nvar replaceXRanges = function replaceXRanges(comp, options) {\n  debug('replaceXRanges', comp, options);\n  return comp.split(/\\s+/).map(function (comp) {\n    return replaceXRange(comp, options);\n  }).join(' ');\n};\n\nvar replaceXRange = function replaceXRange(comp, options) {\n  comp = comp.trim();\n  var r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];\n  return comp.replace(r, function (ret, gtlt, M, m, p, pr) {\n    debug('xRange', comp, ret, gtlt, M, m, p, pr);\n    var xM = isX(M);\n    var xm = xM || isX(m);\n    var xp = xm || isX(p);\n    var anyX = xp;\n\n    if (gtlt === '=' && anyX) {\n      gtlt = '';\n    }\n\n    pr = options.includePrerelease ? '-0' : '';\n\n    if (xM) {\n      if (gtlt === '>' || gtlt === '<') {\n        ret = '<0.0.0-0';\n      } else {\n        ret = '*';\n      }\n    } else if (gtlt && anyX) {\n      if (xm) {\n        m = 0;\n      }\n\n      p = 0;\n\n      if (gtlt === '>') {\n        gtlt = '>=';\n\n        if (xm) {\n          M = +M + 1;\n          m = 0;\n          p = 0;\n        } else {\n          m = +m + 1;\n          p = 0;\n        }\n      } else if (gtlt === '<=') {\n        gtlt = '<';\n\n        if (xm) {\n          M = +M + 1;\n        } else {\n          m = +m + 1;\n        }\n      }\n\n      if (gtlt === '<') pr = '-0';\n      ret = gtlt + M + \".\" + m + \".\" + p + pr;\n    } else if (xm) {\n      ret = \">=\" + M + \".0.0\" + pr + \" <\" + (+M + 1) + \".0.0-0\";\n    } else if (xp) {\n      ret = \">=\" + M + \".\" + m + \".0\" + pr + \" <\" + M + \".\" + (+m + 1) + \".0-0\";\n    }\n\n    debug('xRange return', ret);\n    return ret;\n  });\n};\n\nvar replaceStars = function replaceStars(comp, options) {\n  debug('replaceStars', comp, options);\n  return comp.trim().replace(re[t.STAR], '');\n};\n\nvar replaceGTE0 = function replaceGTE0(comp, options) {\n  debug('replaceGTE0', comp, options);\n  return comp.trim().replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], '');\n};\n\nvar hyphenReplace = function hyphenReplace(incPr) {\n  return function ($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) {\n    if (isX(fM)) {\n      from = '';\n    } else if (isX(fm)) {\n      from = \">=\" + fM + \".0.0\" + (incPr ? '-0' : '');\n    } else if (isX(fp)) {\n      from = \">=\" + fM + \".\" + fm + \".0\" + (incPr ? '-0' : '');\n    } else if (fpr) {\n      from = \">=\" + from;\n    } else {\n      from = \">=\" + from + (incPr ? '-0' : '');\n    }\n\n    if (isX(tM)) {\n      to = '';\n    } else if (isX(tm)) {\n      to = \"<\" + (+tM + 1) + \".0.0-0\";\n    } else if (isX(tp)) {\n      to = \"<\" + tM + \".\" + (+tm + 1) + \".0-0\";\n    } else if (tpr) {\n      to = \"<=\" + tM + \".\" + tm + \".\" + tp + \"-\" + tpr;\n    } else if (incPr) {\n      to = \"<\" + tM + \".\" + tm + \".\" + (+tp + 1) + \"-0\";\n    } else {\n      to = \"<=\" + to;\n    }\n\n    return (from + \" \" + to).trim();\n  };\n};\n\nvar testSet = function testSet(set, version, options) {\n  for (var i = 0; i < set.length; i++) {\n    if (!set[i].test(version)) {\n      return false;\n    }\n  }\n\n  if (version.prerelease.length && !options.includePrerelease) {\n    for (var _i = 0; _i < set.length; _i++) {\n      debug(set[_i].semver);\n\n      if (set[_i].semver === Comparator.ANY) {\n        continue;\n      }\n\n      if (set[_i].semver.prerelease.length > 0) {\n        var allowed = set[_i].semver;\n\n        if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  return true;\n};","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@expo/image-utils/node_modules/semver/classes/range.js"],"names":["Range","range","options","loose","includePrerelease","raw","Comparator","value","set","format","split","map","parseRange","trim","filter","c","length","TypeError","comps","join","hr","re","t","HYPHENRANGELOOSE","HYPHENRANGE","replace","hyphenReplace","debug","COMPARATORTRIM","comparatorTrimReplace","TILDETRIM","tildeTrimReplace","CARETTRIM","caretTrimReplace","compRe","COMPARATORLOOSE","COMPARATOR","comp","parseComparator","replaceGTE0","match","some","thisComparators","isSatisfiable","rangeComparators","every","thisComparator","rangeComparator","intersects","version","SemVer","er","i","testSet","module","exports","require","comparators","result","remainingComparators","slice","testComparator","pop","otherComparator","replaceCarets","replaceTildes","replaceXRanges","replaceStars","isX","id","toLowerCase","replaceTilde","r","TILDELOOSE","TILDE","_","M","m","p","pr","ret","replaceCaret","CARETLOOSE","CARET","z","replaceXRange","XRANGELOOSE","XRANGE","gtlt","xM","xm","xp","anyX","STAR","GTE0PRE","GTE0","incPr","$0","from","fM","fm","fp","fpr","fb","to","tM","tm","tp","tpr","tb","test","prerelease","semver","ANY","allowed","major","minor","patch"],"mappings":"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","sourcesContent":["// hoisted class for cyclic dependency\nclass Range {\n  constructor (range, options) {\n    if (!options || typeof options !== 'object') {\n      options = {\n        loose: !!options,\n        includePrerelease: false\n      }\n    }\n\n    if (range instanceof Range) {\n      if (\n        range.loose === !!options.loose &&\n        range.includePrerelease === !!options.includePrerelease\n      ) {\n        return range\n      } else {\n        return new Range(range.raw, options)\n      }\n    }\n\n    if (range instanceof Comparator) {\n      // just put it in the set and return\n      this.raw = range.value\n      this.set = [[range]]\n      this.format()\n      return this\n    }\n\n    this.options = options\n    this.loose = !!options.loose\n    this.includePrerelease = !!options.includePrerelease\n\n    // First, split based on boolean or ||\n    this.raw = range\n    this.set = range\n      .split(/\\s*\\|\\|\\s*/)\n      // map the range to a 2d array of comparators\n      .map(range => this.parseRange(range.trim()))\n      // throw out any comparator lists that are empty\n      // this generally means that it was not a valid range, which is allowed\n      // in loose mode, but will still throw if the WHOLE range is invalid.\n      .filter(c => c.length)\n\n    if (!this.set.length) {\n      throw new TypeError(`Invalid SemVer Range: ${range}`)\n    }\n\n    this.format()\n  }\n\n  format () {\n    this.range = this.set\n      .map((comps) => {\n        return comps.join(' ').trim()\n      })\n      .join('||')\n      .trim()\n    return this.range\n  }\n\n  toString () {\n    return this.range\n  }\n\n  parseRange (range) {\n    const loose = this.options.loose\n    range = range.trim()\n    // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`\n    const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE]\n    range = range.replace(hr, hyphenReplace(this.options.includePrerelease))\n    debug('hyphen replace', range)\n    // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`\n    range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace)\n    debug('comparator trim', range, re[t.COMPARATORTRIM])\n\n    // `~ 1.2.3` => `~1.2.3`\n    range = range.replace(re[t.TILDETRIM], tildeTrimReplace)\n\n    // `^ 1.2.3` => `^1.2.3`\n    range = range.replace(re[t.CARETTRIM], caretTrimReplace)\n\n    // normalize spaces\n    range = range.split(/\\s+/).join(' ')\n\n    // At this point, the range is completely trimmed and\n    // ready to be split into comparators.\n\n    const compRe = loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR]\n    return range\n      .split(' ')\n      .map(comp => parseComparator(comp, this.options))\n      .join(' ')\n      .split(/\\s+/)\n      .map(comp => replaceGTE0(comp, this.options))\n      // in loose mode, throw out any that are not valid comparators\n      .filter(this.options.loose ? comp => !!comp.match(compRe) : () => true)\n      .map(comp => new Comparator(comp, this.options))\n  }\n\n  intersects (range, options) {\n    if (!(range instanceof Range)) {\n      throw new TypeError('a Range is required')\n    }\n\n    return this.set.some((thisComparators) => {\n      return (\n        isSatisfiable(thisComparators, options) &&\n        range.set.some((rangeComparators) => {\n          return (\n            isSatisfiable(rangeComparators, options) &&\n            thisComparators.every((thisComparator) => {\n              return rangeComparators.every((rangeComparator) => {\n                return thisComparator.intersects(rangeComparator, options)\n              })\n            })\n          )\n        })\n      )\n    })\n  }\n\n  // if ANY of the sets match ALL of its comparators, then pass\n  test (version) {\n    if (!version) {\n      return false\n    }\n\n    if (typeof version === 'string') {\n      try {\n        version = new SemVer(version, this.options)\n      } catch (er) {\n        return false\n      }\n    }\n\n    for (let i = 0; i < this.set.length; i++) {\n      if (testSet(this.set[i], version, this.options)) {\n        return true\n      }\n    }\n    return false\n  }\n}\nmodule.exports = Range\n\nconst Comparator = require('./comparator')\nconst debug = require('../internal/debug')\nconst SemVer = require('./semver')\nconst {\n  re,\n  t,\n  comparatorTrimReplace,\n  tildeTrimReplace,\n  caretTrimReplace\n} = require('../internal/re')\n\n// take a set of comparators and determine whether there\n// exists a version which can satisfy it\nconst isSatisfiable = (comparators, options) => {\n  let result = true\n  const remainingComparators = comparators.slice()\n  let testComparator = remainingComparators.pop()\n\n  while (result && remainingComparators.length) {\n    result = remainingComparators.every((otherComparator) => {\n      return testComparator.intersects(otherComparator, options)\n    })\n\n    testComparator = remainingComparators.pop()\n  }\n\n  return result\n}\n\n// comprised of xranges, tildes, stars, and gtlt's at this point.\n// already replaced the hyphen ranges\n// turn into a set of JUST comparators.\nconst parseComparator = (comp, options) => {\n  debug('comp', comp, options)\n  comp = replaceCarets(comp, options)\n  debug('caret', comp)\n  comp = replaceTildes(comp, options)\n  debug('tildes', comp)\n  comp = replaceXRanges(comp, options)\n  debug('xrange', comp)\n  comp = replaceStars(comp, options)\n  debug('stars', comp)\n  return comp\n}\n\nconst isX = id => !id || id.toLowerCase() === 'x' || id === '*'\n\n// ~, ~> --> * (any, kinda silly)\n// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0\n// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0\n// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0\n// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0\n// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0\nconst replaceTildes = (comp, options) =>\n  comp.trim().split(/\\s+/).map((comp) => {\n    return replaceTilde(comp, options)\n  }).join(' ')\n\nconst replaceTilde = (comp, options) => {\n  const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE]\n  return comp.replace(r, (_, M, m, p, pr) => {\n    debug('tilde', comp, _, M, m, p, pr)\n    let ret\n\n    if (isX(M)) {\n      ret = ''\n    } else if (isX(m)) {\n      ret = `>=${M}.0.0 <${+M + 1}.0.0-0`\n    } else if (isX(p)) {\n      // ~1.2 == >=1.2.0 <1.3.0-0\n      ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`\n    } else if (pr) {\n      debug('replaceTilde pr', pr)\n      ret = `>=${M}.${m}.${p}-${pr\n      } <${M}.${+m + 1}.0-0`\n    } else {\n      // ~1.2.3 == >=1.2.3 <1.3.0-0\n      ret = `>=${M}.${m}.${p\n      } <${M}.${+m + 1}.0-0`\n    }\n\n    debug('tilde return', ret)\n    return ret\n  })\n}\n\n// ^ --> * (any, kinda silly)\n// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0\n// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0\n// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0\n// ^1.2.3 --> >=1.2.3 <2.0.0-0\n// ^1.2.0 --> >=1.2.0 <2.0.0-0\nconst replaceCarets = (comp, options) =>\n  comp.trim().split(/\\s+/).map((comp) => {\n    return replaceCaret(comp, options)\n  }).join(' ')\n\nconst replaceCaret = (comp, options) => {\n  debug('caret', comp, options)\n  const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET]\n  const z = options.includePrerelease ? '-0' : ''\n  return comp.replace(r, (_, M, m, p, pr) => {\n    debug('caret', comp, _, M, m, p, pr)\n    let ret\n\n    if (isX(M)) {\n      ret = ''\n    } else if (isX(m)) {\n      ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`\n    } else if (isX(p)) {\n      if (M === '0') {\n        ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`\n      } else {\n        ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`\n      }\n    } else if (pr) {\n      debug('replaceCaret pr', pr)\n      if (M === '0') {\n        if (m === '0') {\n          ret = `>=${M}.${m}.${p}-${pr\n          } <${M}.${m}.${+p + 1}-0`\n        } else {\n          ret = `>=${M}.${m}.${p}-${pr\n          } <${M}.${+m + 1}.0-0`\n        }\n      } else {\n        ret = `>=${M}.${m}.${p}-${pr\n        } <${+M + 1}.0.0-0`\n      }\n    } else {\n      debug('no pr')\n      if (M === '0') {\n        if (m === '0') {\n          ret = `>=${M}.${m}.${p\n          }${z} <${M}.${m}.${+p + 1}-0`\n        } else {\n          ret = `>=${M}.${m}.${p\n          }${z} <${M}.${+m + 1}.0-0`\n        }\n      } else {\n        ret = `>=${M}.${m}.${p\n        } <${+M + 1}.0.0-0`\n      }\n    }\n\n    debug('caret return', ret)\n    return ret\n  })\n}\n\nconst replaceXRanges = (comp, options) => {\n  debug('replaceXRanges', comp, options)\n  return comp.split(/\\s+/).map((comp) => {\n    return replaceXRange(comp, options)\n  }).join(' ')\n}\n\nconst replaceXRange = (comp, options) => {\n  comp = comp.trim()\n  const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE]\n  return comp.replace(r, (ret, gtlt, M, m, p, pr) => {\n    debug('xRange', comp, ret, gtlt, M, m, p, pr)\n    const xM = isX(M)\n    const xm = xM || isX(m)\n    const xp = xm || isX(p)\n    const anyX = xp\n\n    if (gtlt === '=' && anyX) {\n      gtlt = ''\n    }\n\n    // if we're including prereleases in the match, then we need\n    // to fix this to -0, the lowest possible prerelease value\n    pr = options.includePrerelease ? '-0' : ''\n\n    if (xM) {\n      if (gtlt === '>' || gtlt === '<') {\n        // nothing is allowed\n        ret = '<0.0.0-0'\n      } else {\n        // nothing is forbidden\n        ret = '*'\n      }\n    } else if (gtlt && anyX) {\n      // we know patch is an x, because we have any x at all.\n      // replace X with 0\n      if (xm) {\n        m = 0\n      }\n      p = 0\n\n      if (gtlt === '>') {\n        // >1 => >=2.0.0\n        // >1.2 => >=1.3.0\n        gtlt = '>='\n        if (xm) {\n          M = +M + 1\n          m = 0\n          p = 0\n        } else {\n          m = +m + 1\n          p = 0\n        }\n      } else if (gtlt === '<=') {\n        // <=0.7.x is actually <0.8.0, since any 0.7.x should\n        // pass.  Similarly, <=7.x is actually <8.0.0, etc.\n        gtlt = '<'\n        if (xm) {\n          M = +M + 1\n        } else {\n          m = +m + 1\n        }\n      }\n\n      if (gtlt === '<')\n        pr = '-0'\n\n      ret = `${gtlt + M}.${m}.${p}${pr}`\n    } else if (xm) {\n      ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`\n    } else if (xp) {\n      ret = `>=${M}.${m}.0${pr\n      } <${M}.${+m + 1}.0-0`\n    }\n\n    debug('xRange return', ret)\n\n    return ret\n  })\n}\n\n// Because * is AND-ed with everything else in the comparator,\n// and '' means \"any version\", just remove the *s entirely.\nconst replaceStars = (comp, options) => {\n  debug('replaceStars', comp, options)\n  // Looseness is ignored here.  star is always as loose as it gets!\n  return comp.trim().replace(re[t.STAR], '')\n}\n\nconst replaceGTE0 = (comp, options) => {\n  debug('replaceGTE0', comp, options)\n  return comp.trim()\n    .replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], '')\n}\n\n// This function is passed to string.replace(re[t.HYPHENRANGE])\n// M, m, patch, prerelease, build\n// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5\n// 1.2.3 - 3.4 => >=1.2.0 <3.5.0-0 Any 3.4.x will do\n// 1.2 - 3.4 => >=1.2.0 <3.5.0-0\nconst hyphenReplace = incPr => ($0,\n  from, fM, fm, fp, fpr, fb,\n  to, tM, tm, tp, tpr, tb) => {\n  if (isX(fM)) {\n    from = ''\n  } else if (isX(fm)) {\n    from = `>=${fM}.0.0${incPr ? '-0' : ''}`\n  } else if (isX(fp)) {\n    from = `>=${fM}.${fm}.0${incPr ? '-0' : ''}`\n  } else if (fpr) {\n    from = `>=${from}`\n  } else {\n    from = `>=${from}${incPr ? '-0' : ''}`\n  }\n\n  if (isX(tM)) {\n    to = ''\n  } else if (isX(tm)) {\n    to = `<${+tM + 1}.0.0-0`\n  } else if (isX(tp)) {\n    to = `<${tM}.${+tm + 1}.0-0`\n  } else if (tpr) {\n    to = `<=${tM}.${tm}.${tp}-${tpr}`\n  } else if (incPr) {\n    to = `<${tM}.${tm}.${+tp + 1}-0`\n  } else {\n    to = `<=${to}`\n  }\n\n  return (`${from} ${to}`).trim()\n}\n\nconst testSet = (set, version, options) => {\n  for (let i = 0; i < set.length; i++) {\n    if (!set[i].test(version)) {\n      return false\n    }\n  }\n\n  if (version.prerelease.length && !options.includePrerelease) {\n    // Find the set of versions that are allowed to have prereleases\n    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0\n    // That should allow `1.2.3-pr.2` to pass.\n    // However, `1.2.4-alpha.notready` should NOT be allowed,\n    // even though it's within the range set by the comparators.\n    for (let i = 0; i < set.length; i++) {\n      debug(set[i].semver)\n      if (set[i].semver === Comparator.ANY) {\n        continue\n      }\n\n      if (set[i].semver.prerelease.length > 0) {\n        const allowed = set[i].semver\n        if (allowed.major === version.major &&\n            allowed.minor === version.minor &&\n            allowed.patch === version.patch) {\n          return true\n        }\n      }\n    }\n\n    // Version has a -pre, but it's not one of the ones we like.\n    return false\n  }\n\n  return true\n}\n"]},"metadata":{},"sourceType":"script"}