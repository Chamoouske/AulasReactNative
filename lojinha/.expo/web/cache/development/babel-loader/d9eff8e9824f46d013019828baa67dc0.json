{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\n\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _lodash() {\n  var data = require(\"lodash\");\n\n  _lodash = function _lodash() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _getPlatformName = _interopRequireDefault(require(\"./getPlatformName\"));\n\nvar _makeHook = _interopRequireDefault(require(\"./makeHook\"));\n\nvar _printDeprecationWarning = _interopRequireDefault(require(\"./printDeprecationWarning\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar unlinkDependency = function unlinkDependency(platforms, project, dependency, packageName, otherDependencies) {\n  (0, _printDeprecationWarning.default)('react-native unlink [packageName]');\n  Object.keys(platforms || {}).forEach(function (platform) {\n    var projectConfig = project[platform];\n    var dependencyConfig = dependency.platforms[platform];\n\n    if (!projectConfig || !dependencyConfig) {\n      return;\n    }\n\n    var linkConfig = platforms[platform] && platforms[platform].linkConfig && platforms[platform].linkConfig();\n\n    if (!linkConfig || !linkConfig.isInstalled || !linkConfig.unregister) {\n      return;\n    }\n\n    var isInstalled = linkConfig.isInstalled(projectConfig, packageName, dependencyConfig);\n\n    if (!isInstalled) {\n      _cliTools().logger.info((0, _getPlatformName.default)(platform) + \" module \\\"\" + packageName + \"\\\" is not installed\");\n\n      return;\n    }\n\n    _cliTools().logger.info(\"Unlinking \\\"\" + packageName + \"\\\" \" + (0, _getPlatformName.default)(platform) + \" dependency\");\n\n    linkConfig.unregister(packageName, dependencyConfig, projectConfig, otherDependencies);\n\n    _cliTools().logger.info((0, _getPlatformName.default)(platform) + \" module \\\"\" + dependency.name + \"\\\" has been successfully unlinked\");\n  });\n};\n\nfunction unlink(args, ctx, opts) {\n  var packageName, platforms, _ctx$dependencies, dependency, otherDependencies, dependencies, assets;\n\n  return _regeneratorRuntime.async(function unlink$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          packageName = args[0];\n          platforms = ctx.platforms;\n\n          if (opts.platforms) {\n            platforms = (0, _lodash().pick)(platforms, opts.platforms);\n\n            _cliTools().logger.debug('Skipping selected platforms');\n          }\n\n          _cliTools().logger.debug(\"Available platforms: \" + Object.keys(platforms).map(_getPlatformName.default).join(', '));\n\n          _ctx$dependencies = ctx.dependencies, dependency = _ctx$dependencies[packageName], otherDependencies = _objectWithoutProperties(_ctx$dependencies, [packageName].map(_toPropertyKey));\n\n          if (dependency) {\n            _context.next = 7;\n            break;\n          }\n\n          throw new (_cliTools().CLIError)(\"\\n      Failed to unlink \\\"\" + packageName + \"\\\". It appears that the project is not linked yet.\\n    \");\n\n        case 7:\n          dependencies = (0, _lodash().values)(otherDependencies);\n          _context.prev = 8;\n\n          if (!dependency.hooks.preunlink) {\n            _context.next = 12;\n            break;\n          }\n\n          _context.next = 12;\n          return _regeneratorRuntime.awrap((0, _makeHook.default)(dependency.hooks.preunlink)());\n\n        case 12:\n          unlinkDependency(platforms, ctx.project, dependency, packageName, dependencies);\n\n          if (!dependency.hooks.postunlink) {\n            _context.next = 16;\n            break;\n          }\n\n          _context.next = 16;\n          return _regeneratorRuntime.awrap((0, _makeHook.default)(dependency.hooks.postunlink)());\n\n        case 16:\n          _context.next = 21;\n          break;\n\n        case 18:\n          _context.prev = 18;\n          _context.t0 = _context[\"catch\"](8);\n          throw new (_cliTools().CLIError)(\"Something went wrong while unlinking. Reason \" + _context.t0.message, _context.t0);\n\n        case 21:\n          assets = (0, _lodash().difference)(dependency.assets, (0, _lodash().flatMap)(dependencies, function (d) {\n            return d.assets;\n          }));\n\n          if (!(assets.length === 0)) {\n            _context.next = 24;\n            break;\n          }\n\n          return _context.abrupt(\"return\");\n\n        case 24:\n          Object.keys(platforms || {}).forEach(function (platform) {\n            var projectConfig = ctx.project[platform];\n            var linkConfig = platforms[platform] && platforms[platform].linkConfig && platforms[platform].linkConfig();\n\n            if (!linkConfig || !linkConfig.unlinkAssets || !projectConfig) {\n              return;\n            }\n\n            _cliTools().logger.info(\"Unlinking assets from \" + platform + \" project\");\n\n            linkConfig.unlinkAssets(assets, projectConfig);\n          });\n\n          _cliTools().logger.info(packageName + \" assets has been successfully unlinked from your project\");\n\n        case 26:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[8, 18]], Promise);\n}\n\nvar _default = {\n  func: unlink,\n  description: 'unlink native dependency',\n  name: 'unlink <packageName>',\n  options: [{\n    name: '--platforms [list]',\n    description: 'Scope unlinking to specified platforms',\n    parse: function parse(val) {\n      return val.toLowerCase().split(',');\n    }\n  }]\n};\nexports.default = _default;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli/build/commands/link/unlink.js"],"names":["Object","defineProperty","exports","value","default","_lodash","data","require","_cliTools","_getPlatformName","_interopRequireDefault","_makeHook","_printDeprecationWarning","obj","__esModule","unlinkDependency","platforms","project","dependency","packageName","otherDependencies","keys","forEach","platform","projectConfig","dependencyConfig","linkConfig","isInstalled","unregister","logger","info","name","unlink","args","ctx","opts","pick","debug","map","join","dependencies","CLIError","values","hooks","preunlink","postunlink","message","assets","difference","flatMap","d","length","unlinkAssets","_default","func","description","options","parse","val","toLowerCase","split"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _lodash() {\n  const data = require(\"lodash\");\n\n  _lodash = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _getPlatformName = _interopRequireDefault(require(\"./getPlatformName\"));\n\nvar _makeHook = _interopRequireDefault(require(\"./makeHook\"));\n\nvar _printDeprecationWarning = _interopRequireDefault(require(\"./printDeprecationWarning\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nconst unlinkDependency = (platforms, project, dependency, packageName, otherDependencies) => {\n  (0, _printDeprecationWarning.default)('react-native unlink [packageName]');\n  Object.keys(platforms || {}).forEach(platform => {\n    const projectConfig = project[platform];\n    const dependencyConfig = dependency.platforms[platform];\n\n    if (!projectConfig || !dependencyConfig) {\n      return;\n    }\n\n    const linkConfig = platforms[platform] && platforms[platform].linkConfig && platforms[platform].linkConfig();\n\n    if (!linkConfig || !linkConfig.isInstalled || !linkConfig.unregister) {\n      return;\n    }\n\n    const isInstalled = linkConfig.isInstalled(projectConfig, packageName, dependencyConfig);\n\n    if (!isInstalled) {\n      _cliTools().logger.info(`${(0, _getPlatformName.default)(platform)} module \"${packageName}\" is not installed`);\n\n      return;\n    }\n\n    _cliTools().logger.info(`Unlinking \"${packageName}\" ${(0, _getPlatformName.default)(platform)} dependency`);\n\n    linkConfig.unregister(packageName, dependencyConfig, projectConfig, otherDependencies);\n\n    _cliTools().logger.info(`${(0, _getPlatformName.default)(platform)} module \"${dependency.name}\" has been successfully unlinked`);\n  });\n};\n/**\n * Updates project and unlink specific dependency\n *\n * If optional argument [packageName] is provided, it's the only one\n * that's checked\n */\n\n\nasync function unlink(args, ctx, opts) {\n  const packageName = args[0];\n  let platforms = ctx.platforms;\n\n  if (opts.platforms) {\n    // @ts-ignore\n    platforms = (0, _lodash().pick)(platforms, opts.platforms);\n\n    _cliTools().logger.debug('Skipping selected platforms');\n  }\n\n  _cliTools().logger.debug(`Available platforms: ${Object.keys(platforms).map(_getPlatformName.default).join(', ')}`);\n\n  const {\n    [packageName]: dependency,\n    ...otherDependencies\n  } = ctx.dependencies;\n\n  if (!dependency) {\n    throw new (_cliTools().CLIError)(`\n      Failed to unlink \"${packageName}\". It appears that the project is not linked yet.\n    `);\n  }\n\n  const dependencies = (0, _lodash().values)(otherDependencies);\n\n  try {\n    if (dependency.hooks.preunlink) {\n      await (0, _makeHook.default)(dependency.hooks.preunlink)();\n    }\n\n    unlinkDependency(platforms, ctx.project, dependency, packageName, dependencies);\n\n    if (dependency.hooks.postunlink) {\n      await (0, _makeHook.default)(dependency.hooks.postunlink)();\n    }\n  } catch (error) {\n    throw new (_cliTools().CLIError)(`Something went wrong while unlinking. Reason ${error.message}`, error);\n  } // @todo move all these to above try/catch\n  // @todo it is possible we could be unlinking some project assets in case of duplicate\n\n\n  const assets = (0, _lodash().difference)(dependency.assets, (0, _lodash().flatMap)(dependencies, d => d.assets));\n\n  if (assets.length === 0) {\n    return;\n  }\n\n  Object.keys(platforms || {}).forEach(platform => {\n    const projectConfig = ctx.project[platform];\n    const linkConfig = platforms[platform] && platforms[platform].linkConfig && platforms[platform].linkConfig();\n\n    if (!linkConfig || !linkConfig.unlinkAssets || !projectConfig) {\n      return;\n    }\n\n    _cliTools().logger.info(`Unlinking assets from ${platform} project`);\n\n    linkConfig.unlinkAssets(assets, projectConfig);\n  });\n\n  _cliTools().logger.info(`${packageName} assets has been successfully unlinked from your project`);\n}\n\nvar _default = {\n  func: unlink,\n  description: 'unlink native dependency',\n  name: 'unlink <packageName>',\n  options: [{\n    name: '--platforms [list]',\n    description: 'Scope unlinking to specified platforms',\n    parse: val => val.toLowerCase().split(',')\n  }]\n};\nexports.default = _default;\n\n//# sourceMappingURL=unlink.js.map"]},"metadata":{},"sourceType":"script"}