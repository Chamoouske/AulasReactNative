{"ast":null,"code":"'use strict';\n\nvar _extends = require(\"@babel/runtime/helpers/extends\");\n\njest.mock(\"../../../Core/Devtools/parseErrorStack\", function () {\n  return {\n    __esModule: true,\n    default: jest.fn(function () {\n      return [];\n    })\n  };\n});\njest.mock(\"../../../Core/ExceptionsManager\");\n\nvar LogBoxData = require(\"../LogBoxData\");\n\nvar ExceptionsManager = require(\"../../../Core/ExceptionsManager\");\n\nvar registry = function registry() {\n  var observer = jest.fn();\n  LogBoxData.observe(observer).unsubscribe();\n  return Array.from(observer.mock.calls[0][0].logs);\n};\n\nvar filteredRegistry = function filteredRegistry() {\n  var observer = jest.fn();\n  LogBoxData.observe(observer).unsubscribe();\n  return Array.from(observer.mock.calls[0][0].logs);\n};\n\nvar disabledState = function disabledState() {\n  var observer = jest.fn();\n  LogBoxData.observe(observer).unsubscribe();\n  return observer.mock.calls[0][0].isDisabled;\n};\n\nvar selectedLogIndex = function selectedLogIndex() {\n  var observer = jest.fn();\n  LogBoxData.observe(observer).unsubscribe();\n  return observer.mock.calls[0][0].selectedLogIndex;\n};\n\nvar observe = function observe() {\n  var observer = jest.fn();\n  return {\n    observer: observer,\n    subscription: LogBoxData.observe(observer)\n  };\n};\n\nvar addLogs = function addLogs(logs) {\n  logs.forEach(function (message) {\n    LogBoxData.addLog({\n      level: 'warn',\n      message: {\n        content: message,\n        substitutions: []\n      },\n      category: message,\n      componentStack: []\n    });\n  });\n};\n\nvar addSoftErrors = function addSoftErrors(errors) {\n  errors.forEach(function (error) {\n    LogBoxData.addException(_extends({}, {\n      message: '',\n      isComponentError: false,\n      originalMessage: '',\n      name: 'console.error',\n      componentStack: '',\n      stack: [],\n      id: 0,\n      isFatal: false\n    }, typeof error === 'string' ? {\n      message: error,\n      originalMessage: error\n    } : error));\n  });\n};\n\nvar addFatalErrors = function addFatalErrors(errors) {\n  errors.forEach(function (error) {\n    LogBoxData.addException(_extends({}, {\n      message: '',\n      isComponentError: false,\n      originalMessage: '',\n      name: 'console.error',\n      componentStack: '',\n      stack: [],\n      id: 0,\n      isFatal: true\n    }, typeof error === 'string' ? {\n      message: error,\n      originalMessage: error\n    } : error));\n  });\n};\n\nvar addSyntaxError = function addSyntaxError() {\n  addFatalErrors([{\n    message: \"\\n\\n  197 | });\\n  198 |\\n> 199 | export default CrashReactApp;\\n      | ^\\n  200 |\",\n    originalMessage: \"TransformError SyntaxError: /path/to/RKJSModules/Apps/CrashReact/CrashReactApp.js: 'import' and 'export' may only appear at the top level (199:0)\\n\\n  197 | });\\n  198 |\\n> 199 | export default CrashReactApp;\\n      | ^\\n  200 |\"\n  }]);\n};\n\nbeforeEach(function () {\n  jest.resetModules();\n});\n\nvar flushLogs = function flushLogs() {\n  jest.runAllImmediates();\n  jest.runAllTimers();\n};\n\ndescribe('LogBoxData', function () {\n  it('adds and dismisses logs', function () {\n    addLogs(['A']);\n    addSoftErrors(['B']);\n    addFatalErrors(['C']);\n    addSyntaxError();\n    flushLogs();\n    expect(registry().length).toBe(4);\n    expect(registry()[0]).toBeDefined();\n    expect(registry()[1]).toBeDefined();\n    LogBoxData.dismiss(registry()[0]);\n    expect(registry().length).toBe(3);\n    LogBoxData.dismiss(registry()[0]);\n    expect(registry().length).toBe(2);\n    LogBoxData.dismiss(registry()[0]);\n    expect(registry().length).toBe(1);\n    LogBoxData.dismiss(registry()[0]);\n    expect(registry().length).toBe(0);\n    expect(registry()[0]).toBeUndefined();\n  });\n  it('clears all logs', function () {\n    addLogs(['A', 'B']);\n    addSoftErrors(['C', 'D']);\n    addFatalErrors(['E', 'F']);\n    addSyntaxError();\n    flushLogs();\n    expect(registry().length).toBe(7);\n    expect(selectedLogIndex()).toBe(4);\n    LogBoxData.clear();\n    expect(registry().length).toBe(0);\n    expect(selectedLogIndex()).toBe(-1);\n  });\n  it('clears only warnings', function () {\n    addLogs(['A', 'B']);\n    addSoftErrors(['C', 'D', 'E']);\n    addSyntaxError();\n    flushLogs();\n    expect(registry().length).toBe(6);\n    expect(selectedLogIndex()).toBe(5);\n    LogBoxData.clearWarnings();\n    expect(registry().length).toBe(4);\n    expect(selectedLogIndex()).toBe(3);\n  });\n  it('clears errors and fatals, but not syntax errors.', function () {\n    addLogs(['A', 'B']);\n    addSoftErrors(['C', 'D', 'E']);\n    addFatalErrors(['F']);\n    addSyntaxError();\n    flushLogs();\n    expect(registry().length).toBe(7);\n    expect(selectedLogIndex()).toBe(5);\n    LogBoxData.clearErrors();\n    expect(registry().length).toBe(3);\n    expect(selectedLogIndex()).toBe(2);\n  });\n  it('clears all types except syntax errors', function () {\n    addLogs(['A', 'B']);\n    addSoftErrors(['C', 'D', 'E']);\n    addFatalErrors(['F']);\n    addSyntaxError();\n    flushLogs();\n    expect(registry().length).toBe(7);\n    expect(selectedLogIndex()).toBe(5);\n    LogBoxData.clearErrors();\n    LogBoxData.clearWarnings();\n    expect(registry().length).toBe(1);\n    expect(selectedLogIndex()).toBe(0);\n  });\n  it('keeps logs in chronological order', function () {\n    addLogs(['A']);\n    addSoftErrors(['B']);\n    addFatalErrors(['C']);\n    flushLogs();\n    addLogs(['D']);\n    flushLogs();\n    var logs = registry();\n    expect(logs.length).toBe(4);\n    expect(logs[0].category).toEqual('A');\n    expect(logs[1].category).toEqual('B');\n    expect(logs[2].category).toEqual('C');\n    expect(logs[3].category).toEqual('D');\n    addLogs(['A']);\n    jest.runAllImmediates();\n    logs = registry();\n    expect(logs.length).toBe(5);\n    expect(logs[0].category).toEqual('A');\n    expect(logs[1].category).toEqual('B');\n    expect(logs[2].category).toEqual('C');\n    expect(logs[3].category).toEqual('D');\n    expect(logs[4].category).toEqual('A');\n  });\n  it('sets the selectedLogIndex', function () {\n    expect(selectedLogIndex()).toBe(-1);\n    LogBoxData.setSelectedLog(1);\n    flushLogs();\n    expect(selectedLogIndex()).toBe(1);\n  });\n  it('does not set the selectedLogIndex for warnings', function () {\n    addLogs(['A']);\n    flushLogs();\n    expect(selectedLogIndex()).toBe(-1);\n  });\n  it('does not set the selectedLogIndex for soft errors', function () {\n    addSoftErrors(['A']);\n    flushLogs();\n    expect(selectedLogIndex()).toBe(-1);\n  });\n  it('sets the selectedLogIndex to the last fatal error (after symbolication)', function () {\n    addFatalErrors(['A']);\n    flushLogs();\n    jest.runAllTimers();\n    expect(selectedLogIndex()).toBe(0);\n    addLogs(['B']);\n    addFatalErrors(['C']);\n    flushLogs();\n    jest.runAllTimers();\n    expect(selectedLogIndex()).toBe(2);\n  });\n  it('sets the selectedLogIndex to the last fatal error (hitting timeout limit)', function () {\n    addFatalErrors(['A']);\n    jest.runAllTimers();\n    flushLogs();\n    expect(selectedLogIndex()).toBe(0);\n    addLogs(['B']);\n    addFatalErrors(['C']);\n    jest.runAllTimers();\n    flushLogs();\n    expect(selectedLogIndex()).toBe(2);\n  });\n  it('sets the selectedLogIndex to the last syntax error', function () {\n    addSyntaxError();\n    flushLogs();\n    expect(selectedLogIndex()).toBe(0);\n    addLogs(['B']);\n    addSyntaxError();\n    flushLogs();\n    expect(selectedLogIndex()).toBe(2);\n  });\n  it('keeps selectedLogIndex set to the syntax error even when a new fatal is added', function () {\n    addSyntaxError();\n    flushLogs();\n    expect(selectedLogIndex()).toBe(0);\n    addLogs(['B']);\n    addFatalErrors(['C']);\n    flushLogs();\n    expect(selectedLogIndex()).toBe(0);\n  });\n  it('keeps selectedLogIndex set to the syntax error even when explicitly changed', function () {\n    addSyntaxError();\n    flushLogs();\n    expect(selectedLogIndex()).toBe(0);\n    LogBoxData.setSelectedLog(1);\n    flushLogs();\n    expect(selectedLogIndex()).toBe(0);\n  });\n  it('increments the count of previous log with matching category (logs)', function () {\n    addLogs(['A', 'B']);\n    flushLogs();\n    var logs = registry();\n    expect(logs.length).toBe(2);\n    expect(logs[0].category).toEqual('A');\n    expect(logs[0].count).toBe(1);\n    expect(logs[1].category).toEqual('B');\n    expect(logs[1].count).toBe(1);\n    addLogs(['B']);\n    flushLogs();\n    logs = registry();\n    expect(logs.length).toBe(2);\n    expect(logs[0].category).toEqual('A');\n    expect(logs[0].count).toBe(1);\n    expect(logs[1].category).toEqual('B');\n    expect(logs[1].count).toBe(2);\n  });\n  it('increments the count of previous log with matching category (errors)', function () {\n    addFatalErrors(['A', 'B']);\n    flushLogs();\n    var logs = registry();\n    expect(logs.length).toBe(2);\n    expect(logs[0].category).toEqual('A');\n    expect(logs[0].count).toBe(1);\n    expect(logs[1].category).toEqual('B');\n    expect(logs[1].count).toBe(1);\n    addSoftErrors(['B']);\n    flushLogs();\n    logs = registry();\n    expect(logs.length).toBe(2);\n    expect(logs[0].category).toEqual('A');\n    expect(logs[0].count).toBe(1);\n    expect(logs[1].category).toEqual('B');\n    expect(logs[1].count).toBe(2);\n  });\n  it('increments the count of previous log with matching category (syntax)', function () {\n    addSyntaxError();\n    flushLogs();\n    var logs = registry();\n    expect(logs.length).toBe(1);\n    expect(logs[0].count).toBe(1);\n    addSyntaxError();\n    flushLogs();\n    logs = registry();\n    expect(logs.length).toBe(1);\n    expect(logs[0].count).toBe(2);\n  });\n  it('ignores logs matching patterns (logs)', function () {\n    addLogs(['A!', 'B?', 'C!']);\n    flushLogs();\n    expect(filteredRegistry().length).toBe(3);\n    LogBoxData.addIgnorePatterns(['!']);\n    expect(filteredRegistry().length).toBe(1);\n    LogBoxData.addIgnorePatterns(['?']);\n    expect(filteredRegistry().length).toBe(0);\n  });\n  it('ignores logs matching patterns (errors)', function () {\n    addSoftErrors(['A!', 'B?']);\n    addFatalErrors(['C!']);\n    flushLogs();\n    expect(filteredRegistry().length).toBe(3);\n    LogBoxData.addIgnorePatterns(['!']);\n    expect(filteredRegistry().length).toBe(1);\n    LogBoxData.addIgnorePatterns(['?']);\n    expect(filteredRegistry().length).toBe(0);\n  });\n  it('ignores matching regexs or pattern (logs)', function () {\n    addLogs(['There are 4 dogs', 'There are 3 cats', 'There are H cats']);\n    flushLogs();\n    expect(filteredRegistry().length).toBe(3);\n    LogBoxData.addIgnorePatterns(['dogs']);\n    expect(filteredRegistry().length).toBe(2);\n    LogBoxData.addIgnorePatterns([/There are \\d+ cats/]);\n    expect(filteredRegistry().length).toBe(1);\n    LogBoxData.addIgnorePatterns(['cats']);\n    expect(filteredRegistry().length).toBe(0);\n  });\n  it('ignores matching regexs or pattern (errors)', function () {\n    addSoftErrors(['There are 4 dogs', 'There are 3 cats']);\n    addFatalErrors(['There are H cats']);\n    flushLogs();\n    expect(filteredRegistry().length).toBe(3);\n    LogBoxData.addIgnorePatterns(['dogs']);\n    expect(filteredRegistry().length).toBe(2);\n    LogBoxData.addIgnorePatterns([/There are \\d+ cats/]);\n    expect(filteredRegistry().length).toBe(1);\n    LogBoxData.addIgnorePatterns(['cats']);\n    expect(filteredRegistry().length).toBe(0);\n  });\n  it('ignores all logs except fatals when disabled', function () {\n    addLogs(['A!']);\n    addSoftErrors(['B?']);\n    addFatalErrors(['C!']);\n    addSyntaxError();\n    flushLogs();\n    expect(registry().length).toBe(4);\n    expect(disabledState()).toBe(false);\n    LogBoxData.setDisabled(true);\n    expect(registry().length).toBe(4);\n    expect(disabledState()).toBe(true);\n    LogBoxData.setDisabled(false);\n    expect(registry().length).toBe(4);\n    expect(disabledState()).toBe(false);\n  });\n  it('immediately updates new observers', function () {\n    var _observe = observe(),\n        observerOne = _observe.observer;\n\n    expect(observerOne.mock.calls.length).toBe(1);\n    var observerTwo = jest.fn();\n    LogBoxData.observe(observerTwo).unsubscribe();\n    expect(observerTwo.mock.calls.length).toBe(1);\n    expect(observerOne.mock.calls[0][0]).toEqual(observerTwo.mock.calls[0][0]);\n  });\n  it('sends batched updates asynchronously', function () {\n    var _observe2 = observe(),\n        observer = _observe2.observer;\n\n    expect(observer.mock.calls.length).toBe(1);\n    addLogs(['A']);\n    flushLogs();\n    expect(observer.mock.calls.length).toBe(2);\n    expect(observer.mock.calls[0][0].logs).toBe(observer.mock.calls[1][0].logs);\n  });\n  it('stops sending updates to unsubscribed observers', function () {\n    var _observe3 = observe(),\n        observerOne = _observe3.observer,\n        subscription = _observe3.subscription;\n\n    subscription.unsubscribe();\n    expect(observerOne.mock.calls.length).toBe(1);\n    var observerTwo = jest.fn();\n    LogBoxData.observe(observerTwo).unsubscribe();\n    expect(observerTwo.mock.calls.length).toBe(1);\n    expect(observerOne.mock.calls[0][0]).toEqual(observerTwo.mock.calls[0][0]);\n  });\n  it('updates observers when a log is added or dismissed', function () {\n    var _observe4 = observe(),\n        observer = _observe4.observer;\n\n    expect(observer.mock.calls.length).toBe(1);\n    addLogs(['A']);\n    flushLogs();\n    expect(observer.mock.calls.length).toBe(2);\n    var lastLog = Array.from(observer.mock.calls[1][0].logs)[0];\n    LogBoxData.dismiss(lastLog);\n    jest.runAllImmediates();\n    expect(observer.mock.calls.length).toBe(3);\n    LogBoxData.dismiss(lastLog);\n    jest.runAllImmediates();\n    expect(observer.mock.calls.length).toBe(3);\n  });\n  it('updates observers when cleared', function () {\n    var _observe5 = observe(),\n        observer = _observe5.observer;\n\n    expect(observer.mock.calls.length).toBe(1);\n    addLogs(['A']);\n    flushLogs();\n    expect(observer.mock.calls.length).toBe(2);\n    LogBoxData.clear();\n    jest.runAllImmediates();\n    expect(observer.mock.calls.length).toBe(3);\n    LogBoxData.clear();\n    jest.runAllImmediates();\n    expect(observer.mock.calls.length).toBe(3);\n  });\n  it('updates observers when warnings cleared', function () {\n    var _observe6 = observe(),\n        observer = _observe6.observer;\n\n    expect(observer.mock.calls.length).toBe(1);\n    addLogs(['A']);\n    addSoftErrors(['B']);\n    addFatalErrors(['C']);\n    addSyntaxError();\n    jest.runAllImmediates();\n    expect(observer.mock.calls.length).toBe(2);\n    LogBoxData.clearWarnings();\n    jest.runAllImmediates();\n    expect(observer.mock.calls.length).toBe(3);\n    LogBoxData.clearWarnings();\n    jest.runAllImmediates();\n    expect(observer.mock.calls.length).toBe(3);\n  });\n  it('updates observers when errors cleared', function () {\n    var _observe7 = observe(),\n        observer = _observe7.observer;\n\n    expect(observer.mock.calls.length).toBe(1);\n    addLogs(['A']);\n    addSoftErrors(['B']);\n    addFatalErrors(['C']);\n    addSyntaxError();\n    jest.runAllImmediates();\n    expect(observer.mock.calls.length).toBe(2);\n    LogBoxData.clearErrors();\n    jest.runAllImmediates();\n    expect(observer.mock.calls.length).toBe(3);\n    LogBoxData.clearErrors();\n    jest.runAllImmediates();\n    expect(observer.mock.calls.length).toBe(3);\n  });\n  it('updates observers when an ignore pattern is added', function () {\n    var _observe8 = observe(),\n        observer = _observe8.observer;\n\n    expect(observer.mock.calls.length).toBe(1);\n    LogBoxData.addIgnorePatterns(['?']);\n    jest.runAllImmediates();\n    expect(observer.mock.calls.length).toBe(2);\n    LogBoxData.addIgnorePatterns(['!']);\n    jest.runAllImmediates();\n    expect(observer.mock.calls.length).toBe(3);\n    LogBoxData.addIgnorePatterns(['!']);\n    jest.runAllImmediates();\n    expect(observer.mock.calls.length).toBe(3);\n  });\n  it('updates observers when disabled or enabled', function () {\n    var _observe9 = observe(),\n        observer = _observe9.observer;\n\n    expect(observer.mock.calls.length).toBe(1);\n    LogBoxData.setDisabled(true);\n    jest.runAllImmediates();\n    expect(observer.mock.calls.length).toBe(2);\n    LogBoxData.setDisabled(true);\n    jest.runAllImmediates();\n    expect(observer.mock.calls.length).toBe(2);\n    LogBoxData.setDisabled(false);\n    jest.runAllImmediates();\n    expect(observer.mock.calls.length).toBe(3);\n    LogBoxData.setDisabled(false);\n    jest.runAllImmediates();\n    expect(observer.mock.calls.length).toBe(3);\n  });\n  it('reportLogBoxError creates a native redbox with a componentStack', function () {\n    LogBoxData.reportLogBoxError(new Error('Simulated Error'), '    in Component (file.js:1)');\n    var receivedError = ExceptionsManager.handleException.mock.calls[0][0];\n    expect(receivedError.componentStack).toBe('    in Component (file.js:1)');\n    expect(receivedError.forceRedbox).toBe(true);\n    expect(receivedError.message).toBe('An error was thrown when attempting to render log messages via LogBox.\\n\\nSimulated Error');\n  });\n  it('reportLogBoxError creates a native redbox without a componentStack', function () {\n    LogBoxData.reportLogBoxError(new Error('Simulated Error'));\n    var receivedError = ExceptionsManager.handleException.mock.calls[0][0];\n    expect(receivedError.componentStack).toBeUndefined();\n    expect(receivedError.forceRedbox).toBe(true);\n    expect(receivedError.message).toBe('An error was thrown when attempting to render log messages via LogBox.\\n\\nSimulated Error');\n  });\n  it('reportLogBoxError creates an error message that is also ignored', function () {\n    LogBoxData.reportLogBoxError(new Error('Simulated Error'));\n    var receivedErrorMessage = ExceptionsManager.handleException.mock.calls[0][0].message;\n    expect(LogBoxData.isLogBoxErrorMessage(receivedErrorMessage)).toBe(true);\n    expect(LogBoxData.isLogBoxErrorMessage('Some other error')).toBe(false);\n  });\n  it('getAppInfo returns null without any function registered', function () {\n    expect(LogBoxData.getAppInfo()).toBe(null);\n  });\n  it('getAppInfo returns the registered app info', function () {\n    var info = {\n      appVersion: 'App Version',\n      engine: 'Hermes'\n    };\n    LogBoxData.setAppInfo(function () {\n      return info;\n    });\n    expect(LogBoxData.getAppInfo()).toBe(info);\n  });\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/LogBox/Data/__tests__/LogBoxData-test.js"],"names":["jest","mock","__esModule","default","fn","LogBoxData","require","ExceptionsManager","registry","observer","observe","unsubscribe","Array","from","calls","logs","filteredRegistry","disabledState","isDisabled","selectedLogIndex","subscription","addLogs","forEach","message","addLog","level","content","substitutions","category","componentStack","addSoftErrors","errors","error","addException","isComponentError","originalMessage","name","stack","id","isFatal","addFatalErrors","addSyntaxError","beforeEach","resetModules","flushLogs","runAllImmediates","runAllTimers","describe","it","expect","length","toBe","toBeDefined","dismiss","toBeUndefined","clear","clearWarnings","clearErrors","toEqual","setSelectedLog","count","addIgnorePatterns","setDisabled","observerOne","observerTwo","lastLog","reportLogBoxError","Error","receivedError","handleException","forceRedbox","receivedErrorMessage","isLogBoxErrorMessage","getAppInfo","info","appVersion","engine","setAppInfo"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+react_native\n * @format\n * @flow\n */\n\n'use strict';\njest.mock('../../../Core/Devtools/parseErrorStack', () => {\n  return {__esModule: true, default: jest.fn(() => [])};\n});\n\njest.mock('../../../Core/ExceptionsManager');\n\nconst LogBoxData = require('../LogBoxData');\nconst ExceptionsManager: any = require('../../../Core/ExceptionsManager');\n\nconst registry = () => {\n  const observer = jest.fn();\n  LogBoxData.observe(observer).unsubscribe();\n  return Array.from(observer.mock.calls[0][0].logs);\n};\n\nconst filteredRegistry = () => {\n  const observer = jest.fn();\n  LogBoxData.observe(observer).unsubscribe();\n  return Array.from(observer.mock.calls[0][0].logs);\n};\n\nconst disabledState = () => {\n  const observer = jest.fn();\n  LogBoxData.observe(observer).unsubscribe();\n  return observer.mock.calls[0][0].isDisabled;\n};\n\nconst selectedLogIndex = () => {\n  const observer = jest.fn();\n  LogBoxData.observe(observer).unsubscribe();\n  return observer.mock.calls[0][0].selectedLogIndex;\n};\n\nconst observe = () => {\n  const observer = jest.fn();\n  return {\n    observer,\n    subscription: LogBoxData.observe(observer),\n  };\n};\n\nconst addLogs = logs => {\n  logs.forEach(message => {\n    LogBoxData.addLog({\n      level: 'warn',\n      message: {\n        content: message,\n        substitutions: [],\n      },\n      category: message,\n      componentStack: [],\n    });\n  });\n};\n\nconst addSoftErrors = errors => {\n  errors.forEach(error => {\n    LogBoxData.addException(\n      Object.assign(\n        {},\n        {\n          message: '',\n          isComponentError: false,\n          originalMessage: '',\n          name: 'console.error',\n          componentStack: '',\n          stack: [],\n          id: 0,\n          isFatal: false,\n        },\n        typeof error === 'string'\n          ? {message: error, originalMessage: error}\n          : error,\n      ),\n    );\n  });\n};\n\nconst addFatalErrors = errors => {\n  errors.forEach(error => {\n    LogBoxData.addException(\n      Object.assign(\n        {},\n        {\n          message: '',\n          isComponentError: false,\n          originalMessage: '',\n          name: 'console.error',\n          componentStack: '',\n          stack: [],\n          id: 0,\n          isFatal: true,\n        },\n        typeof error === 'string'\n          ? {message: error, originalMessage: error}\n          : error,\n      ),\n    );\n  });\n};\n\nconst addSyntaxError = () => {\n  addFatalErrors([\n    {\n      message: `\n\n  197 | });\n  198 |\n> 199 | export default CrashReactApp;\n      | ^\n  200 |`,\n      originalMessage: `TransformError SyntaxError: /path/to/RKJSModules/Apps/CrashReact/CrashReactApp.js: 'import' and 'export' may only appear at the top level (199:0)\n\n  197 | });\n  198 |\n> 199 | export default CrashReactApp;\n      | ^\n  200 |`,\n    },\n  ]);\n};\n\nbeforeEach(() => {\n  jest.resetModules();\n});\n\nconst flushLogs = () => {\n  jest.runAllImmediates();\n  jest.runAllTimers();\n};\n\ndescribe('LogBoxData', () => {\n  it('adds and dismisses logs', () => {\n    addLogs(['A']);\n    addSoftErrors(['B']);\n    addFatalErrors(['C']);\n    addSyntaxError();\n    flushLogs();\n\n    expect(registry().length).toBe(4);\n    expect(registry()[0]).toBeDefined();\n    expect(registry()[1]).toBeDefined();\n\n    LogBoxData.dismiss(registry()[0]);\n    expect(registry().length).toBe(3);\n    LogBoxData.dismiss(registry()[0]);\n    expect(registry().length).toBe(2);\n    LogBoxData.dismiss(registry()[0]);\n    expect(registry().length).toBe(1);\n    LogBoxData.dismiss(registry()[0]);\n    expect(registry().length).toBe(0);\n    expect(registry()[0]).toBeUndefined();\n  });\n\n  it('clears all logs', () => {\n    addLogs(['A', 'B']);\n    addSoftErrors(['C', 'D']);\n    addFatalErrors(['E', 'F']);\n    addSyntaxError();\n    flushLogs();\n\n    expect(registry().length).toBe(7);\n    expect(selectedLogIndex()).toBe(4); // Fatal index.\n\n    LogBoxData.clear();\n    expect(registry().length).toBe(0);\n    expect(selectedLogIndex()).toBe(-1); // Reset selected index.\n  });\n\n  it('clears only warnings', () => {\n    addLogs(['A', 'B']);\n    addSoftErrors(['C', 'D', 'E']);\n    addSyntaxError();\n    flushLogs();\n\n    expect(registry().length).toBe(6);\n    expect(selectedLogIndex()).toBe(5); // Fatal index.\n\n    LogBoxData.clearWarnings();\n    expect(registry().length).toBe(4);\n    expect(selectedLogIndex()).toBe(3); // New fatal index.\n  });\n\n  it('clears errors and fatals, but not syntax errors.', () => {\n    addLogs(['A', 'B']);\n    addSoftErrors(['C', 'D', 'E']);\n    addFatalErrors(['F']);\n    addSyntaxError();\n    flushLogs();\n\n    expect(registry().length).toBe(7);\n    expect(selectedLogIndex()).toBe(5); // Fatal index.\n\n    LogBoxData.clearErrors();\n    expect(registry().length).toBe(3);\n    expect(selectedLogIndex()).toBe(2); // New Fatal index.\n  });\n\n  it('clears all types except syntax errors', () => {\n    addLogs(['A', 'B']);\n    addSoftErrors(['C', 'D', 'E']);\n    addFatalErrors(['F']);\n    addSyntaxError();\n    flushLogs();\n\n    expect(registry().length).toBe(7);\n    expect(selectedLogIndex()).toBe(5); // Fatal index.\n\n    LogBoxData.clearErrors();\n    LogBoxData.clearWarnings();\n    expect(registry().length).toBe(1);\n    expect(selectedLogIndex()).toBe(0); // New Fatal index.\n  });\n\n  it('keeps logs in chronological order', () => {\n    addLogs(['A']);\n    addSoftErrors(['B']);\n    addFatalErrors(['C']);\n    flushLogs();\n    addLogs(['D']);\n    flushLogs();\n\n    let logs = registry();\n    expect(logs.length).toBe(4);\n    expect(logs[0].category).toEqual('A');\n    expect(logs[1].category).toEqual('B');\n    expect(logs[2].category).toEqual('C');\n    expect(logs[3].category).toEqual('D');\n\n    addLogs(['A']);\n    jest.runAllImmediates();\n\n    // Expect `A` to be added to the end of the registry.\n    logs = registry();\n    expect(logs.length).toBe(5);\n    expect(logs[0].category).toEqual('A');\n    expect(logs[1].category).toEqual('B');\n    expect(logs[2].category).toEqual('C');\n    expect(logs[3].category).toEqual('D');\n    expect(logs[4].category).toEqual('A');\n  });\n\n  it('sets the selectedLogIndex', () => {\n    expect(selectedLogIndex()).toBe(-1);\n\n    LogBoxData.setSelectedLog(1);\n    flushLogs();\n\n    expect(selectedLogIndex()).toBe(1);\n  });\n\n  it('does not set the selectedLogIndex for warnings', () => {\n    addLogs(['A']);\n    flushLogs();\n\n    expect(selectedLogIndex()).toBe(-1);\n  });\n\n  it('does not set the selectedLogIndex for soft errors', () => {\n    addSoftErrors(['A']);\n    flushLogs();\n\n    expect(selectedLogIndex()).toBe(-1);\n  });\n\n  it('sets the selectedLogIndex to the last fatal error (after symbolication)', () => {\n    addFatalErrors(['A']);\n\n    // Order maters for symbolication before timeout.\n    flushLogs();\n    jest.runAllTimers();\n\n    expect(selectedLogIndex()).toBe(0);\n\n    addLogs(['B']);\n    addFatalErrors(['C']);\n\n    // Order maters for symbolication before timeout.\n    flushLogs();\n    jest.runAllTimers();\n\n    expect(selectedLogIndex()).toBe(2);\n  });\n\n  it('sets the selectedLogIndex to the last fatal error (hitting timeout limit)', () => {\n    addFatalErrors(['A']);\n\n    // Order maters for timeout before symbolication.\n    jest.runAllTimers();\n    flushLogs();\n\n    expect(selectedLogIndex()).toBe(0);\n\n    addLogs(['B']);\n    addFatalErrors(['C']);\n\n    // Order maters for timeout before symbolication.\n    jest.runAllTimers();\n    flushLogs();\n\n    expect(selectedLogIndex()).toBe(2);\n  });\n\n  it('sets the selectedLogIndex to the last syntax error', () => {\n    addSyntaxError();\n    flushLogs();\n\n    expect(selectedLogIndex()).toBe(0);\n\n    addLogs(['B']);\n    addSyntaxError();\n    flushLogs();\n\n    expect(selectedLogIndex()).toBe(2);\n  });\n\n  it('keeps selectedLogIndex set to the syntax error even when a new fatal is added', () => {\n    addSyntaxError();\n    flushLogs();\n\n    expect(selectedLogIndex()).toBe(0);\n\n    addLogs(['B']);\n    addFatalErrors(['C']);\n    flushLogs();\n\n    expect(selectedLogIndex()).toBe(0);\n  });\n\n  it('keeps selectedLogIndex set to the syntax error even when explicitly changed', () => {\n    addSyntaxError();\n    flushLogs();\n\n    expect(selectedLogIndex()).toBe(0);\n\n    LogBoxData.setSelectedLog(1);\n    flushLogs();\n\n    expect(selectedLogIndex()).toBe(0);\n  });\n\n  it('increments the count of previous log with matching category (logs)', () => {\n    addLogs(['A', 'B']);\n    flushLogs();\n\n    let logs = registry();\n    expect(logs.length).toBe(2);\n    expect(logs[0].category).toEqual('A');\n    expect(logs[0].count).toBe(1);\n    expect(logs[1].category).toEqual('B');\n    expect(logs[1].count).toBe(1);\n\n    addLogs(['B']);\n    flushLogs();\n\n    // Expect `B` to be rolled into the last log.\n    logs = registry();\n    expect(logs.length).toBe(2);\n    expect(logs[0].category).toEqual('A');\n    expect(logs[0].count).toBe(1);\n    expect(logs[1].category).toEqual('B');\n    expect(logs[1].count).toBe(2);\n  });\n\n  it('increments the count of previous log with matching category (errors)', () => {\n    addFatalErrors(['A', 'B']);\n    flushLogs();\n\n    let logs = registry();\n    expect(logs.length).toBe(2);\n    expect(logs[0].category).toEqual('A');\n    expect(logs[0].count).toBe(1);\n    expect(logs[1].category).toEqual('B');\n    expect(logs[1].count).toBe(1);\n\n    addSoftErrors(['B']);\n    flushLogs();\n\n    // Expect `B` to be rolled into the last log.\n    logs = registry();\n    expect(logs.length).toBe(2);\n    expect(logs[0].category).toEqual('A');\n    expect(logs[0].count).toBe(1);\n    expect(logs[1].category).toEqual('B');\n    expect(logs[1].count).toBe(2);\n  });\n\n  it('increments the count of previous log with matching category (syntax)', () => {\n    addSyntaxError();\n    flushLogs();\n\n    let logs = registry();\n    expect(logs.length).toBe(1);\n    expect(logs[0].count).toBe(1);\n\n    addSyntaxError();\n    flushLogs();\n\n    logs = registry();\n    expect(logs.length).toBe(1);\n    expect(logs[0].count).toBe(2);\n  });\n\n  it('ignores logs matching patterns (logs)', () => {\n    addLogs(['A!', 'B?', 'C!']);\n    flushLogs();\n\n    expect(filteredRegistry().length).toBe(3);\n\n    LogBoxData.addIgnorePatterns(['!']);\n    expect(filteredRegistry().length).toBe(1);\n\n    LogBoxData.addIgnorePatterns(['?']);\n    expect(filteredRegistry().length).toBe(0);\n  });\n\n  it('ignores logs matching patterns (errors)', () => {\n    addSoftErrors(['A!', 'B?']);\n    addFatalErrors(['C!']);\n    flushLogs();\n\n    expect(filteredRegistry().length).toBe(3);\n\n    LogBoxData.addIgnorePatterns(['!']);\n    expect(filteredRegistry().length).toBe(1);\n\n    LogBoxData.addIgnorePatterns(['?']);\n    expect(filteredRegistry().length).toBe(0);\n  });\n\n  it('ignores matching regexs or pattern (logs)', () => {\n    addLogs(['There are 4 dogs', 'There are 3 cats', 'There are H cats']);\n    flushLogs();\n\n    expect(filteredRegistry().length).toBe(3);\n\n    LogBoxData.addIgnorePatterns(['dogs']);\n    expect(filteredRegistry().length).toBe(2);\n\n    LogBoxData.addIgnorePatterns([/There are \\d+ cats/]);\n    expect(filteredRegistry().length).toBe(1);\n\n    LogBoxData.addIgnorePatterns(['cats']);\n    expect(filteredRegistry().length).toBe(0);\n  });\n\n  it('ignores matching regexs or pattern (errors)', () => {\n    addSoftErrors(['There are 4 dogs', 'There are 3 cats']);\n    addFatalErrors(['There are H cats']);\n    flushLogs();\n\n    expect(filteredRegistry().length).toBe(3);\n\n    LogBoxData.addIgnorePatterns(['dogs']);\n    expect(filteredRegistry().length).toBe(2);\n\n    LogBoxData.addIgnorePatterns([/There are \\d+ cats/]);\n    expect(filteredRegistry().length).toBe(1);\n\n    LogBoxData.addIgnorePatterns(['cats']);\n    expect(filteredRegistry().length).toBe(0);\n  });\n\n  it('ignores all logs except fatals when disabled', () => {\n    addLogs(['A!']);\n    addSoftErrors(['B?']);\n    addFatalErrors(['C!']);\n    addSyntaxError();\n    flushLogs();\n\n    expect(registry().length).toBe(4);\n    expect(disabledState()).toBe(false);\n\n    LogBoxData.setDisabled(true);\n    expect(registry().length).toBe(4);\n    expect(disabledState()).toBe(true);\n\n    LogBoxData.setDisabled(false);\n    expect(registry().length).toBe(4);\n    expect(disabledState()).toBe(false);\n  });\n\n  it('immediately updates new observers', () => {\n    const {observer: observerOne} = observe();\n\n    expect(observerOne.mock.calls.length).toBe(1);\n\n    const observerTwo = jest.fn();\n    LogBoxData.observe(observerTwo).unsubscribe();\n    expect(observerTwo.mock.calls.length).toBe(1);\n    expect(observerOne.mock.calls[0][0]).toEqual(observerTwo.mock.calls[0][0]);\n  });\n\n  it('sends batched updates asynchronously', () => {\n    const {observer} = observe();\n    expect(observer.mock.calls.length).toBe(1);\n\n    addLogs(['A']);\n    flushLogs();\n    expect(observer.mock.calls.length).toBe(2);\n\n    // We expect observers to recieve the same Set object in sequential updates\n    // so that it doesn't break memoization for components observing state.\n    expect(observer.mock.calls[0][0].logs).toBe(observer.mock.calls[1][0].logs);\n  });\n\n  it('stops sending updates to unsubscribed observers', () => {\n    const {observer: observerOne, subscription} = observe();\n    subscription.unsubscribe();\n\n    expect(observerOne.mock.calls.length).toBe(1);\n\n    const observerTwo = jest.fn();\n    LogBoxData.observe(observerTwo).unsubscribe();\n    expect(observerTwo.mock.calls.length).toBe(1);\n    expect(observerOne.mock.calls[0][0]).toEqual(observerTwo.mock.calls[0][0]);\n  });\n\n  it('updates observers when a log is added or dismissed', () => {\n    const {observer} = observe();\n    expect(observer.mock.calls.length).toBe(1);\n\n    addLogs(['A']);\n    flushLogs();\n    expect(observer.mock.calls.length).toBe(2);\n\n    const lastLog = Array.from(observer.mock.calls[1][0].logs)[0];\n    LogBoxData.dismiss(lastLog);\n    jest.runAllImmediates();\n    expect(observer.mock.calls.length).toBe(3);\n\n    // Does nothing when category does not exist.\n    LogBoxData.dismiss(lastLog);\n    jest.runAllImmediates();\n    expect(observer.mock.calls.length).toBe(3);\n  });\n\n  it('updates observers when cleared', () => {\n    const {observer} = observe();\n    expect(observer.mock.calls.length).toBe(1);\n\n    addLogs(['A']);\n    flushLogs();\n    expect(observer.mock.calls.length).toBe(2);\n\n    LogBoxData.clear();\n    jest.runAllImmediates();\n    expect(observer.mock.calls.length).toBe(3);\n\n    // Does nothing when already empty.\n    LogBoxData.clear();\n    jest.runAllImmediates();\n    expect(observer.mock.calls.length).toBe(3);\n  });\n\n  it('updates observers when warnings cleared', () => {\n    const {observer} = observe();\n    expect(observer.mock.calls.length).toBe(1);\n\n    addLogs(['A']);\n    addSoftErrors(['B']);\n    addFatalErrors(['C']);\n    addSyntaxError();\n    jest.runAllImmediates();\n    expect(observer.mock.calls.length).toBe(2);\n\n    LogBoxData.clearWarnings();\n    jest.runAllImmediates();\n    expect(observer.mock.calls.length).toBe(3);\n\n    // Does nothing when already empty.\n    LogBoxData.clearWarnings();\n    jest.runAllImmediates();\n    expect(observer.mock.calls.length).toBe(3);\n  });\n\n  it('updates observers when errors cleared', () => {\n    const {observer} = observe();\n    expect(observer.mock.calls.length).toBe(1);\n\n    addLogs(['A']);\n    addSoftErrors(['B']);\n    addFatalErrors(['C']);\n    addSyntaxError();\n    jest.runAllImmediates();\n    expect(observer.mock.calls.length).toBe(2);\n\n    LogBoxData.clearErrors();\n    jest.runAllImmediates();\n    expect(observer.mock.calls.length).toBe(3);\n\n    // Does nothing when already empty.\n    LogBoxData.clearErrors();\n    jest.runAllImmediates();\n    expect(observer.mock.calls.length).toBe(3);\n  });\n\n  it('updates observers when an ignore pattern is added', () => {\n    const {observer} = observe();\n    expect(observer.mock.calls.length).toBe(1);\n\n    LogBoxData.addIgnorePatterns(['?']);\n    jest.runAllImmediates();\n    expect(observer.mock.calls.length).toBe(2);\n\n    LogBoxData.addIgnorePatterns(['!']);\n    jest.runAllImmediates();\n    expect(observer.mock.calls.length).toBe(3);\n\n    // Does nothing for an existing ignore pattern.\n    LogBoxData.addIgnorePatterns(['!']);\n    jest.runAllImmediates();\n    expect(observer.mock.calls.length).toBe(3);\n  });\n\n  it('updates observers when disabled or enabled', () => {\n    const {observer} = observe();\n    expect(observer.mock.calls.length).toBe(1);\n\n    LogBoxData.setDisabled(true);\n    jest.runAllImmediates();\n    expect(observer.mock.calls.length).toBe(2);\n\n    // Does nothing when already disabled.\n    LogBoxData.setDisabled(true);\n    jest.runAllImmediates();\n    expect(observer.mock.calls.length).toBe(2);\n\n    LogBoxData.setDisabled(false);\n    jest.runAllImmediates();\n    expect(observer.mock.calls.length).toBe(3);\n\n    // Does nothing when already enabled.\n    LogBoxData.setDisabled(false);\n    jest.runAllImmediates();\n    expect(observer.mock.calls.length).toBe(3);\n  });\n\n  it('reportLogBoxError creates a native redbox with a componentStack', () => {\n    LogBoxData.reportLogBoxError(\n      new Error('Simulated Error'),\n      '    in Component (file.js:1)',\n    );\n\n    const receivedError = ExceptionsManager.handleException.mock.calls[0][0];\n    expect(receivedError.componentStack).toBe('    in Component (file.js:1)');\n    expect(receivedError.forceRedbox).toBe(true);\n    expect(receivedError.message).toBe(\n      'An error was thrown when attempting to render log messages via LogBox.\\n\\nSimulated Error',\n    );\n  });\n\n  it('reportLogBoxError creates a native redbox without a componentStack', () => {\n    LogBoxData.reportLogBoxError(new Error('Simulated Error'));\n\n    const receivedError = ExceptionsManager.handleException.mock.calls[0][0];\n    expect(receivedError.componentStack).toBeUndefined();\n    expect(receivedError.forceRedbox).toBe(true);\n    expect(receivedError.message).toBe(\n      'An error was thrown when attempting to render log messages via LogBox.\\n\\nSimulated Error',\n    );\n  });\n\n  it('reportLogBoxError creates an error message that is also ignored', () => {\n    LogBoxData.reportLogBoxError(new Error('Simulated Error'));\n\n    const receivedErrorMessage =\n      ExceptionsManager.handleException.mock.calls[0][0].message;\n\n    expect(LogBoxData.isLogBoxErrorMessage(receivedErrorMessage)).toBe(true);\n    expect(LogBoxData.isLogBoxErrorMessage('Some other error')).toBe(false);\n  });\n\n  it('getAppInfo returns null without any function registered', () => {\n    expect(LogBoxData.getAppInfo()).toBe(null);\n  });\n\n  it('getAppInfo returns the registered app info', () => {\n    const info = {\n      appVersion: 'App Version',\n      engine: 'Hermes',\n    };\n\n    LogBoxData.setAppInfo(() => info);\n    expect(LogBoxData.getAppInfo()).toBe(info);\n  });\n});\n"]},"metadata":{},"sourceType":"script"}