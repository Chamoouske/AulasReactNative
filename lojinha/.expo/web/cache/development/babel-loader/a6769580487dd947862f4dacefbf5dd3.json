{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ensurePropertyExists = exports.generateValidateEnumValue = exports.validateColor = exports.validateFileExists = exports.validateFileIsPng = exports.validateEnumValue = void 0;\n\nvar color_string_1 = __importDefault(require(\"color-string\"));\n\nvar fs = __importStar(require(\"fs-extra\"));\n\nvar lodash_1 = require(\"lodash\");\n\nvar path_1 = __importDefault(require(\"path\"));\n\nfunction validateEnumValue(value, availableValues) {\n  if (!Object.values(availableValues).includes(value)) {\n    throw new Error(\"Invalid value '\" + value + \"'. Available values are \" + Object.values(availableValues).map(function (v) {\n      return \"\\\"\" + v + \"\\\"\";\n    }).join(' | ') + \".\");\n  }\n\n  return value;\n}\n\nexports.validateEnumValue = validateEnumValue;\n\nfunction validateFileIsPng(filePath) {\n  var resolvedPath;\n  return _regeneratorRuntime.async(function validateFileIsPng$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(validateFileExists(filePath));\n\n        case 2:\n          resolvedPath = _context.sent;\n\n          if (!(path_1.default.extname(resolvedPath) !== '.png')) {\n            _context.next = 5;\n            break;\n          }\n\n          throw new Error(\"Invalid path '\" + filePath + \"' - file is not a .png file. Provide a path to a file with .png extension.\");\n\n        case 5:\n          return _context.abrupt(\"return\", resolvedPath);\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.validateFileIsPng = validateFileIsPng;\n\nfunction validateFileExists(filePath) {\n  var resolvedPath;\n  return _regeneratorRuntime.async(function validateFileExists$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          resolvedPath = path_1.default.resolve(filePath);\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(fs.pathExists(resolvedPath));\n\n        case 3:\n          if (_context2.sent) {\n            _context2.next = 5;\n            break;\n          }\n\n          throw new Error(\"Invalid path '\" + filePath + \"' - file does not exist. Provide a path to an existing file.\");\n\n        case 5:\n          return _context2.abrupt(\"return\", resolvedPath);\n\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.validateFileExists = validateFileExists;\n\nfunction validateColor(value) {\n  var _a;\n\n  var result = (_a = color_string_1.default.get(value)) === null || _a === void 0 ? void 0 : _a.value;\n\n  if (!result) {\n    throw new Error(\"Invalid value '\" + value + \"' - value is not a color string. Provide a valid color string.\");\n  }\n\n  return result;\n}\n\nexports.validateColor = validateColor;\n\nfunction generateValidateEnumValue(availableValues) {\n  return function (value) {\n    return validateEnumValue(value, availableValues);\n  };\n}\n\nexports.generateValidateEnumValue = generateValidateEnumValue;\n\nfunction ensurePropertyExists(object, propertyPath) {\n  var value = lodash_1.get(object, propertyPath, undefined);\n\n  if (value === undefined) {\n    throw new Error(\"Missing a required valid value for '\" + propertyPath.join('.') + \"'. Provide a valid value for it to enable this property.\");\n  }\n}\n\nexports.ensurePropertyExists = ensurePropertyExists;","map":{"version":3,"sources":["../../src/validators/utils.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,cAAA,GAAA,eAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA;;AACA,IAAA,EAAA,GAAA,YAAA,CAAA,OAAA,CAAA,UAAA,CAAA,CAAA;;AACA,IAAA,QAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AACA,IAAA,MAAA,GAAA,eAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;AAQA,SAAgB,iBAAhB,CACE,KADF,EAEE,eAFF,EAEoB;AAElB,MAAI,CAAC,MAAM,CAAC,MAAP,CAAsB,eAAtB,EAAuC,QAAvC,CAAgD,KAAhD,CAAL,EAA6D;AAC3D,UAAM,IAAI,KAAJ,qBACc,KADd,gCAC8C,MAAM,CAAC,MAAP,CAAc,eAAd,EAC/C,GAD+C,CAC3C,UAAA,CAAC;AAAA,oBAAQ,CAAR;AAAA,KAD0C,EAE/C,IAF+C,CAE1C,KAF0C,CAD9C,OAAN;AAKD;;AACD,SAAO,KAAP;AACD;;AAZD,OAAA,CAAA,iBAAA,GAAA,iBAAA;;AAkBO,SAAe,iBAAf,CAAiC,QAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACsB,kBAAkB,CAAC,QAAD,CADxC;;AAAA;AACC,UAAA,YADD;;AAAA,gBAID,MAAA,CAAA,OAAA,CAAK,OAAL,CAAa,YAAb,MAA+B,MAJ9B;AAAA;AAAA;AAAA;;AAAA,gBAKG,IAAI,KAAJ,oBACa,QADb,gFALH;;AAAA;AAAA,2CASE,YATF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAP,OAAA,CAAA,iBAAA,GAAA,iBAAA;;AAgBO,SAAe,kBAAf,CAAkC,QAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AACC,UAAA,YADD,GACgB,MAAA,CAAA,OAAA,CAAK,OAAL,CAAa,QAAb,CADhB;AAAA;AAAA,2CAEO,EAAE,CAAC,UAAH,CAAc,YAAd,CAFP;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,gBAGG,IAAI,KAAJ,oBACa,QADb,kEAHH;;AAAA;AAAA,4CAOE,YAPF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAP,OAAA,CAAA,kBAAA,GAAA,kBAAA;;AAaA,SAAgB,aAAhB,CAA8B,KAA9B,EAA2C;;;AACzC,MAAM,MAAM,GAAA,CAAA,EAAA,GAAG,cAAA,CAAA,OAAA,CAAY,GAAZ,CAAgB,KAAhB,CAAH,MAAyB,IAAzB,IAAyB,EAAA,KAAA,KAAA,CAAzB,GAAyB,KAAA,CAAzB,GAAyB,EAAA,CAAE,KAAvC;;AACA,MAAI,CAAC,MAAL,EAAa;AACX,UAAM,IAAI,KAAJ,qBACc,KADd,oEAAN;AAGD;;AACD,SAAO,MAAP;AACD;;AARD,OAAA,CAAA,aAAA,GAAA,aAAA;;AAUA,SAAgB,yBAAhB,CAA4E,eAA5E,EAA8F;AAC5F,SAAO,UAAC,KAAD;AAAA,WAAmB,iBAAiB,CAAC,KAAD,EAAQ,eAAR,CAApC;AAAA,GAAP;AACD;;AAFD,OAAA,CAAA,yBAAA,GAAA,yBAAA;;AAIA,SAAgB,oBAAhB,CAKE,MALF,EAKa,YALb,EAK+D;AAC7D,MAAM,KAAK,GAAG,QAAA,CAAA,GAAA,CAAI,MAAJ,EAAY,YAAZ,EAA0B,SAA1B,CAAd;;AACA,MAAI,KAAK,KAAK,SAAd,EAAyB;AACvB,UAAM,IAAI,KAAJ,0CACmC,YAAY,CAAC,IAAb,CACrC,GADqC,CADnC,8DAAN;AAKD;AACF;;AAdD,OAAA,CAAA,oBAAA,GAAA,oBAAA","sourcesContent":["import colorString, { Color } from 'color-string';\nimport * as fs from 'fs-extra';\nimport { get } from 'lodash';\nimport path from 'path';\n\nimport { NonPrimitiveAndNonArrayKeys, DeepRequired } from './types';\n\n/**\n * @param value Value to be checked.\n * @param availableValues Object storing all available options as values.\n */\nexport function validateEnumValue<T extends Record<string, string>>(\n  value: string,\n  availableValues: T\n): T[keyof T] {\n  if (!Object.values<string>(availableValues).includes(value)) {\n    throw new Error(\n      `Invalid value '${value}'. Available values are ${Object.values(availableValues)\n        .map(v => `\"${v}\"`)\n        .join(' | ')}.`\n    );\n  }\n  return value as T[keyof T];\n}\n\n/**\n * @param filePath Relative or absolute path to a file.\n * @returns Absolute path to the valid image file.\n */\nexport async function validateFileIsPng(filePath: string): Promise<string> {\n  const resolvedPath = await validateFileExists(filePath);\n\n  // check if resolvedPath is a readable .png file\n  if (path.extname(resolvedPath) !== '.png') {\n    throw new Error(\n      `Invalid path '${filePath}' - file is not a .png file. Provide a path to a file with .png extension.`\n    );\n  }\n  return resolvedPath;\n}\n\n/**\n * @param filePath Relative or absolute path to a file.\n * @returns Absolute path to the resolved file.\n */\nexport async function validateFileExists(filePath: string): Promise<string> {\n  const resolvedPath = path.resolve(filePath);\n  if (!(await fs.pathExists(resolvedPath))) {\n    throw new Error(\n      `Invalid path '${filePath}' - file does not exist. Provide a path to an existing file.`\n    );\n  }\n  return resolvedPath;\n}\n\n/**\n * @param value Value to be checked.\n */\nexport function validateColor(value: string): Color {\n  const result = colorString.get(value)?.value;\n  if (!result) {\n    throw new Error(\n      `Invalid value '${value}' - value is not a color string. Provide a valid color string.`\n    );\n  }\n  return result;\n}\n\nexport function generateValidateEnumValue<T extends Record<string, string>>(availableValues: T) {\n  return (value: string) => validateEnumValue(value, availableValues);\n}\n\nexport function ensurePropertyExists<\n  T extends object,\n  TK1 extends NonPrimitiveAndNonArrayKeys<DeepRequired<T>>,\n  TK2 extends NonPrimitiveAndNonArrayKeys<DeepRequired<T>[TK1]>,\n  TK3 extends NonPrimitiveAndNonArrayKeys<DeepRequired<T>[TK1][TK2]>\n>(object: T, propertyPath: [TK1] | [TK1, TK2] | [TK1, TK2, TK3]): void {\n  const value = get(object, propertyPath, undefined);\n  if (value === undefined) {\n    throw new Error(\n      `Missing a required valid value for '${propertyPath.join(\n        '.'\n      )}'. Provide a valid value for it to enable this property.`\n    );\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}