{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _require = require(\"../e2e-helpers\"),\n    openComponentWithLabel = _require.openComponentWithLabel,\n    openExampleWithTitle = _require.openExampleWithTitle;\n\ndescribe('DatePickerIOS', function () {\n  beforeAll(function _callee() {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(device.reloadReactNative());\n\n          case 2:\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(openComponentWithLabel('<DatePickerIOS>', '<DatePickerIOS> Select dates and times using the native UIDatePicker.'));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  });\n  it('Should change indicator with datetime picker', function _callee2() {\n    var testID, testElement, dateIndicator, timeIndicator;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(openExampleWithTitle('Date and time picker'));\n\n          case 2:\n            testID = 'date-and-time';\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(element(by.type('UIPickerView').withAncestor(by.id(testID))));\n\n          case 5:\n            testElement = _context2.sent;\n            _context2.next = 8;\n            return _regeneratorRuntime.awrap(element(by.id('date-indicator')));\n\n          case 8:\n            dateIndicator = _context2.sent;\n            _context2.next = 11;\n            return _regeneratorRuntime.awrap(element(by.id('time-indicator')));\n\n          case 11:\n            timeIndicator = _context2.sent;\n            _context2.next = 14;\n            return _regeneratorRuntime.awrap(expect(testElement).toBeVisible());\n\n          case 14:\n            _context2.next = 16;\n            return _regeneratorRuntime.awrap(expect(dateIndicator).toBeVisible());\n\n          case 16:\n            _context2.next = 18;\n            return _regeneratorRuntime.awrap(expect(timeIndicator).toBeVisible());\n\n          case 18:\n            _context2.next = 20;\n            return _regeneratorRuntime.awrap(testElement.setColumnToValue(0, 'Dec 4'));\n\n          case 20:\n            _context2.next = 22;\n            return _regeneratorRuntime.awrap(testElement.setColumnToValue(1, '4'));\n\n          case 22:\n            _context2.next = 24;\n            return _regeneratorRuntime.awrap(testElement.setColumnToValue(2, '10'));\n\n          case 24:\n            _context2.next = 26;\n            return _regeneratorRuntime.awrap(testElement.setColumnToValue(3, 'AM'));\n\n          case 26:\n            _context2.next = 28;\n            return _regeneratorRuntime.awrap(expect(dateIndicator).toHaveText('12/4/2006'));\n\n          case 28:\n            _context2.next = 30;\n            return _regeneratorRuntime.awrap(expect(timeIndicator).toHaveText('04:10 AM'));\n\n          case 30:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  });\n  it('Should change indicator with date-only picker', function _callee3() {\n    var testID, testElement, indicator;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(openExampleWithTitle('Date only picker'));\n\n          case 2:\n            testID = 'date-only';\n            _context3.next = 5;\n            return _regeneratorRuntime.awrap(element(by.type('UIPickerView').withAncestor(by.id(testID))));\n\n          case 5:\n            testElement = _context3.sent;\n            _context3.next = 8;\n            return _regeneratorRuntime.awrap(element(by.id('date-indicator')));\n\n          case 8:\n            indicator = _context3.sent;\n            _context3.next = 11;\n            return _regeneratorRuntime.awrap(expect(testElement).toBeVisible());\n\n          case 11:\n            _context3.next = 13;\n            return _regeneratorRuntime.awrap(expect(indicator).toBeVisible());\n\n          case 13:\n            _context3.next = 15;\n            return _regeneratorRuntime.awrap(testElement.setColumnToValue(0, 'November'));\n\n          case 15:\n            _context3.next = 17;\n            return _regeneratorRuntime.awrap(testElement.setColumnToValue(1, '3'));\n\n          case 17:\n            _context3.next = 19;\n            return _regeneratorRuntime.awrap(testElement.setColumnToValue(2, '2006'));\n\n          case 19:\n            _context3.next = 21;\n            return _regeneratorRuntime.awrap(expect(indicator).toHaveText('11/3/2006'));\n\n          case 21:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  });\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/RNTester/e2e/__tests__/DatePickerIOS-test.js"],"names":["require","openComponentWithLabel","openExampleWithTitle","describe","beforeAll","device","reloadReactNative","it","testID","element","by","type","withAncestor","id","testElement","dateIndicator","timeIndicator","expect","toBeVisible","setColumnToValue","toHaveText","indicator"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+react_native\n * @format\n */\n\n/* global element, by, expect, device */\n\nconst {\n  openComponentWithLabel,\n  openExampleWithTitle,\n} = require('../e2e-helpers');\n\ndescribe('DatePickerIOS', () => {\n  beforeAll(async () => {\n    await device.reloadReactNative();\n    await openComponentWithLabel(\n      '<DatePickerIOS>',\n      '<DatePickerIOS> Select dates and times using the native UIDatePicker.',\n    );\n  });\n\n  it('Should change indicator with datetime picker', async () => {\n    await openExampleWithTitle('Date and time picker');\n    const testID = 'date-and-time';\n\n    const testElement = await element(\n      by.type('UIPickerView').withAncestor(by.id(testID)),\n    );\n    const dateIndicator = await element(by.id('date-indicator'));\n    const timeIndicator = await element(by.id('time-indicator'));\n\n    await expect(testElement).toBeVisible();\n    await expect(dateIndicator).toBeVisible();\n    await expect(timeIndicator).toBeVisible();\n\n    await testElement.setColumnToValue(0, 'Dec 4');\n    await testElement.setColumnToValue(1, '4');\n    await testElement.setColumnToValue(2, '10');\n    await testElement.setColumnToValue(3, 'AM');\n\n    await expect(dateIndicator).toHaveText('12/4/2006');\n    await expect(timeIndicator).toHaveText('04:10 AM');\n  });\n\n  it('Should change indicator with date-only picker', async () => {\n    await openExampleWithTitle('Date only picker');\n    const testID = 'date-only';\n\n    const testElement = await element(\n      by.type('UIPickerView').withAncestor(by.id(testID)),\n    );\n    const indicator = await element(by.id('date-indicator'));\n\n    await expect(testElement).toBeVisible();\n    await expect(indicator).toBeVisible();\n\n    await testElement.setColumnToValue(0, 'November');\n    await testElement.setColumnToValue(1, '3');\n    await testElement.setColumnToValue(2, '2006');\n\n    await expect(indicator).toHaveText('11/3/2006');\n  });\n});\n"]},"metadata":{},"sourceType":"script"}