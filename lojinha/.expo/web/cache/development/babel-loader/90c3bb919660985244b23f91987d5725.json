{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar fs_extra_1 = __importDefault(require(\"fs-extra\"));\n\nvar constants_1 = require(\"../constants\");\n\nvar StateManager_1 = __importDefault(require(\"../utils/StateManager\"));\n\nvar string_utils_1 = require(\"../utils/string-utils\");\n\nvar Paths_1 = require(\"./Paths\");\n\nfunction configureMainActivity(projectRootPath) {\n  var config,\n      _a,\n      _b,\n      _c,\n      resizeMode,\n      statusBarTranslucent,\n      mainActivity,\n      isJava,\n      isKotlin,\n      LE,\n      _StateManager_1$defau,\n      newFileContent,\n      _args = arguments;\n\n  return _regeneratorRuntime.async(function configureMainActivity$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          config = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n          resizeMode = (_a = config.imageResizeMode) !== null && _a !== void 0 ? _a : constants_1.SplashScreenImageResizeMode.CONTAIN;\n          statusBarTranslucent = (_c = (_b = config.statusBar) === null || _b === void 0 ? void 0 : _b.translucent) !== null && _c !== void 0 ? _c : false;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(Paths_1.getMainActivityAsync(projectRootPath));\n\n        case 5:\n          mainActivity = _context.sent;\n\n          if (mainActivity) {\n            _context.next = 8;\n            break;\n          }\n\n          throw new Error(\"Failed to configure 'MainActivity'.\");\n\n        case 8:\n          isJava = mainActivity.language === 'java';\n          isKotlin = mainActivity.language === 'kt';\n          LE = isJava ? ';' : '';\n          _StateManager_1$defau = new StateManager_1.default(mainActivity.contents).applyAction(function (content) {\n            var _string_utils_1$repla = string_utils_1.replace(content, {\n              replacePattern: /^import com\\.facebook\\.react\\.ReactRootView.*?$/m,\n              replaceContent: \"import com.facebook.react.ReactRootView\" + LE\n            }),\n                _string_utils_1$repla2 = _slicedToArray(_string_utils_1$repla, 2),\n                succeeded = _string_utils_1$repla2[0],\n                newContent = _string_utils_1$repla2[1];\n\n            return [newContent, 'replacedReactRootViewImports', succeeded];\n          }).applyAction(function (content, _ref) {\n            var replacedReactRootViewImports = _ref.replacedReactRootViewImports;\n\n            if (replacedReactRootViewImports) {\n              return [content, 'insertedReactRootViewImports', false];\n            }\n\n            var _string_utils_1$inser = string_utils_1.insert(content, {\n              insertPattern: isJava ? /(?=public class .* extends .* {.*$)/m : /(?=class .* : .* {.*$)/m,\n              insertContent: \"import com.facebook.react.ReactRootView\" + LE + \"\\n\\n\"\n            }),\n                _string_utils_1$inser2 = _slicedToArray(_string_utils_1$inser, 2),\n                succeeded = _string_utils_1$inser2[0],\n                newContent = _string_utils_1$inser2[1];\n\n            return [newContent, 'insertedReactRootViewImports', succeeded];\n          }).applyAction(function (content) {\n            var _string_utils_1$repla3 = string_utils_1.replace(content, {\n              replacePattern: /^import expo\\.modules\\.splashscreen\\..*?SplashScreen.*?\\nimport expo\\.modules\\.splashscreen\\.SplashScreenImageResizeMode.*?$/m,\n              replaceContent: \"import expo.modules.splashscreen.singletons.SplashScreen\" + LE + \"\\nimport expo.modules.splashscreen.SplashScreenImageResizeMode\" + LE\n            }),\n                _string_utils_1$repla4 = _slicedToArray(_string_utils_1$repla3, 2),\n                succeeded = _string_utils_1$repla4[0],\n                newContent = _string_utils_1$repla4[1];\n\n            return [newContent, 'replacedSplashImports', succeeded];\n          }).applyAction(function (content, _ref2) {\n            var replacedSplashImports = _ref2.replacedSplashImports;\n\n            if (replacedSplashImports) {\n              return [content, 'insertedSplashImports', false];\n            }\n\n            var _string_utils_1$inser3 = string_utils_1.insert(content, {\n              insertPattern: isJava ? /(?=public class .* extends .* {.*$)/m : /(?=class .* : .* {.*$)/m,\n              insertContent: \"import expo.modules.splashscreen.singletons.SplashScreen\" + LE + \"\\nimport expo.modules.splashscreen.SplashScreenImageResizeMode\" + LE + \"\\n\\n\"\n            }),\n                _string_utils_1$inser4 = _slicedToArray(_string_utils_1$inser3, 2),\n                succeeded = _string_utils_1$inser4[0],\n                newContent = _string_utils_1$inser4[1];\n\n            return [newContent, 'insertedSplashImports', succeeded];\n          }).applyAction(function (content) {\n            var _string_utils_1$repla5 = string_utils_1.replace(content, {\n              replacePattern: /(?<=super\\.onCreate(.|\\n)*?)SplashScreen\\.show\\(this, SplashScreenImageResizeMode\\..*\\).*$/m,\n              replaceContent: \"SplashScreen.show(this, SplashScreenImageResizeMode.\" + resizeMode.toUpperCase() + \", ReactRootView\" + (isKotlin ? '::class.java' : '.class') + \", \" + statusBarTranslucent + \")\" + LE\n            }),\n                _string_utils_1$repla6 = _slicedToArray(_string_utils_1$repla5, 2),\n                succeeded = _string_utils_1$repla6[0],\n                newContent = _string_utils_1$repla6[1];\n\n            return [newContent, 'replacedInOnCreate', succeeded];\n          }).applyAction(function (content, _ref3) {\n            var replacedInOnCreate = _ref3.replacedInOnCreate;\n\n            if (replacedInOnCreate) {\n              return [content, 'insertedInOnCreate', false];\n            }\n\n            var _string_utils_1$inser5 = string_utils_1.insert(content, {\n              insertPattern: /(?<=^.*super\\.onCreate.*$)/m,\n              insertContent: \"\\n    // SplashScreen.show(...) has to be called after super.onCreate(...)\\n    // Below line is handled by '@expo/configure-splash-screen' command and it's discouraged to modify it manually\\n    SplashScreen.show(this, SplashScreenImageResizeMode.\" + resizeMode.toUpperCase() + \", ReactRootView\" + (isKotlin ? '::class.java' : '.class') + \", \" + statusBarTranslucent + \")\" + LE\n            }),\n                _string_utils_1$inser6 = _slicedToArray(_string_utils_1$inser5, 2),\n                succeeded = _string_utils_1$inser6[0],\n                newContent = _string_utils_1$inser6[1];\n\n            return [newContent, 'insertedInOnCreate', succeeded];\n          }).applyAction(function (content, _ref4) {\n            var replacedInOnCreate = _ref4.replacedInOnCreate,\n                insertedInOnCreate = _ref4.insertedInOnCreate;\n\n            if (replacedInOnCreate || insertedInOnCreate) {\n              return [content, 'insertedOnCreate', false];\n            }\n\n            var _string_utils_1$inser7 = string_utils_1.insert(content, {\n              insertPattern: isJava ? /(?<=public class .* extends .* {.*$)/m : /(?<=class .* : .* {.*$)/m,\n              insertContent: \"\\n  \" + (isJava ? \"@Override\\n  protected void onCreate(Bundle savedInstanceState\" : 'override fun onCreate(savedInstanceState: Bundle?') + \") {\\n    super.onCreate(savedInstanceState)\" + LE + \"\\n    // SplashScreen.show(...) has to be called after super.onCreate(...)\\n    // Below line is handled by '@expo/configure-splash-screen' command and it's discouraged to modify it manually\\n    SplashScreen.show(this, SplashScreenImageResizeMode.\" + resizeMode.toUpperCase() + \", ReactRootView\" + (isKotlin ? '::class.java' : '.class') + \", \" + statusBarTranslucent + \")\" + LE + \"\\n  }\\n\"\n            }),\n                _string_utils_1$inser8 = _slicedToArray(_string_utils_1$inser7, 2),\n                succeeded = _string_utils_1$inser8[0],\n                newContent = _string_utils_1$inser8[1];\n\n            return [newContent, 'insertedOnCreate', succeeded];\n          }).applyAction(function (content, _ref5) {\n            var replacedInOnCreate = _ref5.replacedInOnCreate,\n                insertedInOnCreate = _ref5.insertedInOnCreate;\n\n            if (replacedInOnCreate || insertedInOnCreate) {\n              return [content, 'replacedBundleImport', false];\n            }\n\n            var _string_utils_1$repla7 = string_utils_1.replace(content, {\n              replacePattern: /import android\\.os\\.Bundle/m,\n              replaceContent: 'import android.os.Bundle'\n            }),\n                _string_utils_1$repla8 = _slicedToArray(_string_utils_1$repla7, 2),\n                succeeded = _string_utils_1$repla8[0],\n                newContent = _string_utils_1$repla8[1];\n\n            return [newContent, 'replacedBundleImport', succeeded];\n          }).applyAction(function (content, _ref6) {\n            var replacedInOnCreate = _ref6.replacedInOnCreate,\n                insertedInOnCreate = _ref6.insertedInOnCreate;\n\n            if (replacedInOnCreate || insertedInOnCreate) {\n              return [content, 'insertedBundleImport', false];\n            }\n\n            var _string_utils_1$inser9 = string_utils_1.insert(content, {\n              insertPattern: /(?<=(^.*?package .*?$))/m,\n              insertContent: \"\\n\\nimport android.os.Bundle\" + LE\n            }),\n                _string_utils_1$inser10 = _slicedToArray(_string_utils_1$inser9, 2),\n                succeeded = _string_utils_1$inser10[0],\n                newContent = _string_utils_1$inser10[1];\n\n            return [newContent, 'insertedBundleImport', succeeded];\n          }), newFileContent = _StateManager_1$defau.state;\n          _context.next = 14;\n          return _regeneratorRuntime.awrap(fs_extra_1.default.writeFile(mainActivity.path, newFileContent));\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.default = configureMainActivity;","map":{"version":3,"sources":["../../src/android/MainActivity.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from 'fs-extra';\n\nimport { SplashScreenImageResizeMode, SplashScreenImageResizeModeType } from '../constants';\nimport StateManager from '../utils/StateManager';\nimport { insert, replace } from '../utils/string-utils';\nimport { getMainActivityAsync } from './Paths';\n\n/**\n * Injects specific code to MainActivity that would trigger SplashScreen mounting process.\n */\nexport default async function configureMainActivity(\n  projectRootPath: string,\n  config: {\n    imageResizeMode?: SplashScreenImageResizeModeType;\n    statusBar?: {\n      translucent?: boolean;\n    };\n  } = {}\n) {\n  const resizeMode = config.imageResizeMode ?? SplashScreenImageResizeMode.CONTAIN;\n  const statusBarTranslucent: boolean = config.statusBar?.translucent ?? false;\n\n  // eslint-disable-next-line\n  const mainActivity = await getMainActivityAsync(projectRootPath);\n\n  if (!mainActivity) {\n    throw new Error(`Failed to configure 'MainActivity'.`);\n  }\n\n  const isJava = mainActivity.language === 'java';\n  const isKotlin = mainActivity.language === 'kt';\n\n  const LE = isJava ? ';' : '';\n\n  const { state: newFileContent } = new StateManager<string, boolean>(mainActivity.contents)\n    // importing ReactRootView\n    .applyAction(content => {\n      const [succeeded, newContent] = replace(content, {\n        replacePattern: /^import com\\.facebook\\.react\\.ReactRootView.*?$/m,\n        replaceContent: `import com.facebook.react.ReactRootView${LE}`,\n      });\n      return [newContent, 'replacedReactRootViewImports', succeeded];\n    })\n    .applyAction((content, { replacedReactRootViewImports }) => {\n      if (replacedReactRootViewImports) {\n        return [content, 'insertedReactRootViewImports', false];\n      }\n      const [succeeded, newContent] = insert(content, {\n        insertPattern: isJava ? /(?=public class .* extends .* {.*$)/m : /(?=class .* : .* {.*$)/m,\n        insertContent: `import com.facebook.react.ReactRootView${LE}\n\n`,\n      });\n\n      return [newContent, 'insertedReactRootViewImports', succeeded];\n    })\n    // importing SplashScreen\n    .applyAction(content => {\n      const [succeeded, newContent] = replace(content, {\n        replacePattern: /^import expo\\.modules\\.splashscreen\\..*?SplashScreen.*?\\nimport expo\\.modules\\.splashscreen\\.SplashScreenImageResizeMode.*?$/m,\n        replaceContent: `import expo.modules.splashscreen.singletons.SplashScreen${LE}\nimport expo.modules.splashscreen.SplashScreenImageResizeMode${LE}`,\n      });\n      return [newContent, 'replacedSplashImports', succeeded];\n    })\n    .applyAction((content, { replacedSplashImports }) => {\n      if (replacedSplashImports) {\n        return [content, 'insertedSplashImports', false];\n      }\n      const [succeeded, newContent] = insert(content, {\n        insertPattern: isJava ? /(?=public class .* extends .* {.*$)/m : /(?=class .* : .* {.*$)/m,\n        insertContent: `import expo.modules.splashscreen.singletons.SplashScreen${LE}\nimport expo.modules.splashscreen.SplashScreenImageResizeMode${LE}\n\n`,\n      });\n      return [newContent, 'insertedSplashImports', succeeded];\n    })\n    // registering SplashScreen in onCreate()\n    .applyAction(content => {\n      const [succeeded, newContent] = replace(content, {\n        replacePattern: /(?<=super\\.onCreate(.|\\n)*?)SplashScreen\\.show\\(this, SplashScreenImageResizeMode\\..*\\).*$/m,\n        replaceContent: `SplashScreen.show(this, SplashScreenImageResizeMode.${resizeMode.toUpperCase()}, ReactRootView${\n          isKotlin ? '::class.java' : '.class'\n        }, ${statusBarTranslucent})${LE}`,\n      });\n      return [newContent, 'replacedInOnCreate', succeeded];\n    })\n    .applyAction((content, { replacedInOnCreate }) => {\n      if (replacedInOnCreate) {\n        return [content, 'insertedInOnCreate', false];\n      }\n      const [succeeded, newContent] = insert(content, {\n        insertPattern: /(?<=^.*super\\.onCreate.*$)/m, // insert just below super.onCreate\n        insertContent: `\n    // SplashScreen.show(...) has to be called after super.onCreate(...)\n    // Below line is handled by '@expo/configure-splash-screen' command and it's discouraged to modify it manually\n    SplashScreen.show(this, SplashScreenImageResizeMode.${resizeMode.toUpperCase()}, ReactRootView${\n          isKotlin ? '::class.java' : '.class'\n        }, ${statusBarTranslucent})${LE}`,\n      });\n      return [newContent, 'insertedInOnCreate', succeeded];\n    })\n    // inserting basic onCreate()\n    .applyAction((content, { replacedInOnCreate, insertedInOnCreate }) => {\n      if (replacedInOnCreate || insertedInOnCreate) {\n        return [content, 'insertedOnCreate', false];\n      }\n      const [succeeded, newContent] = insert(content, {\n        insertPattern: isJava\n          ? /(?<=public class .* extends .* {.*$)/m\n          : /(?<=class .* : .* {.*$)/m,\n        insertContent: `\n  ${\n    isJava\n      ? `@Override\n  protected void onCreate(Bundle savedInstanceState`\n      : 'override fun onCreate(savedInstanceState: Bundle?'\n  }) {\n    super.onCreate(savedInstanceState)${LE}\n    // SplashScreen.show(...) has to be called after super.onCreate(...)\n    // Below line is handled by '@expo/configure-splash-screen' command and it's discouraged to modify it manually\n    SplashScreen.show(this, SplashScreenImageResizeMode.${resizeMode.toUpperCase()}, ReactRootView${\n          isKotlin ? '::class.java' : '.class'\n        }, ${statusBarTranslucent})${LE}\n  }\n`,\n      });\n      return [newContent, 'insertedOnCreate', succeeded];\n    })\n    // importing Bundle\n    .applyAction((content, { replacedInOnCreate, insertedInOnCreate }) => {\n      if (replacedInOnCreate || insertedInOnCreate) {\n        return [content, 'replacedBundleImport', false];\n      }\n      const [succeeded, newContent] = replace(content, {\n        replacePattern: /import android\\.os\\.Bundle/m,\n        replaceContent: 'import android.os.Bundle',\n      });\n      return [newContent, 'replacedBundleImport', succeeded];\n    })\n    .applyAction((content, { replacedInOnCreate, insertedInOnCreate }) => {\n      if (replacedInOnCreate || insertedInOnCreate) {\n        return [content, 'insertedBundleImport', false];\n      }\n      const [succeeded, newContent] = insert(content, {\n        insertPattern: /(?<=(^.*?package .*?$))/m,\n        insertContent: `\\n\\nimport android.os.Bundle${LE}`,\n      });\n      return [newContent, 'insertedBundleImport', succeeded];\n    });\n\n  await fs.writeFile(mainActivity.path, newFileContent);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}