{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ios_plugins_1 = require(\"../plugins/ios-plugins\");\n\nexports.withPermissions = function (config, permissions) {\n  return ios_plugins_1.withInfoPlist(config, function _callee(config) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            config.modResults = applyPermissions(permissions, config.modResults);\n            return _context.abrupt(\"return\", config);\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  });\n};\n\nfunction applyPermissions(permissions, infoPlist) {\n  var entries = Object.entries(permissions);\n\n  if (entries.length === 0) {}\n\n  for (var _i = 0, _entries = entries; _i < _entries.length; _i++) {\n    var _ref = _entries[_i];\n\n    var _ref2 = _slicedToArray(_ref, 2);\n\n    var permission = _ref2[0];\n    var description = _ref2[1];\n\n    if (description == null) {\n      delete infoPlist[permission];\n    } else {\n      var existingPermission = infoPlist[permission];\n\n      if (existingPermission && existingPermission !== description) {}\n\n      infoPlist[permission] = description;\n    }\n  }\n\n  return infoPlist;\n}\n\nexports.applyPermissions = applyPermissions;","map":{"version":3,"sources":["../../src/ios/Permissions.ts"],"names":[],"mappings":";;;;;;;;;;AACA,IAAA,aAAA,GAAA,OAAA,0BAAA;;AAUa,OAAA,CAAA,eAAA,GAA+D,UAC1E,MAD0E,EAE1E,WAF0E,EAGxE;AACF,SAAO,aAAA,CAAA,aAAA,CAAc,MAAd,EAAsB,iBAAM,MAAN;AAAA;AAAA;AAAA;AAAA;AAC3B,YAAA,MAAM,CAAC,UAAP,GAAoB,gBAAgB,CAAC,WAAD,EAAc,MAAM,CAAC,UAArB,CAApC;AAD2B,6CAEpB,MAFoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB,CAAP;AAID,CARY;;AAUb,SAAgB,gBAAhB,CACE,WADF,EAEE,SAFF,EAEgC;AAE9B,MAAM,OAAO,GAAG,MAAM,CAAC,OAAP,CAAe,WAAf,CAAhB;;AACA,MAAI,OAAO,CAAC,MAAR,KAAmB,CAAvB,EAA0B,CAGzB;;AACD,8BAAwC,OAAxC,8BAAiD;AAAA;;AAAA;;AAAA,QAArC,UAAqC;AAAA,QAAzB,WAAyB;;AAC/C,QAAI,WAAW,IAAI,IAAnB,EAAyB;AACvB,aAAO,SAAS,CAAC,UAAD,CAAhB;AACD,KAFD,MAEO;AACL,UAAM,kBAAkB,GAAG,SAAS,CAAC,UAAD,CAApC;;AACA,UAAI,kBAAkB,IAAI,kBAAkB,KAAK,WAAjD,EAA8D,CAK7D;;AACD,MAAA,SAAS,CAAC,UAAD,CAAT,GAAwB,WAAxB;AACD;AACF;;AACD,SAAO,SAAP;AACD;;AAxBD,OAAA,CAAA,gBAAA,GAAA,gBAAA","sourcesContent":["import { ConfigPlugin } from '../Plugin.types';\nimport { withInfoPlist } from '../plugins/ios-plugins';\nimport { InfoPlist } from './IosConfig.types';\n\n/**\n * Apply permissions and their respective descriptions to the iOS Info.plist.\n * Providing a null description will remove the permission from the Info.plist.\n *\n * @param config\n * @param permissions record of strings where the key matches Info.plist permissions and the values are the permission descriptions.\n */\nexport const withPermissions: ConfigPlugin<Record<string, string | null>> = (\n  config,\n  permissions\n) => {\n  return withInfoPlist(config, async config => {\n    config.modResults = applyPermissions(permissions, config.modResults);\n    return config;\n  });\n};\n\nexport function applyPermissions(\n  permissions: Record<string, string | null>,\n  infoPlist: Record<string, any>\n): InfoPlist {\n  const entries = Object.entries(permissions);\n  if (entries.length === 0) {\n    // TODO: Debug warn\n    // console.warn('[withPermissions] no permissions were provided');\n  }\n  for (const [permission, description] of entries) {\n    if (description == null) {\n      delete infoPlist[permission];\n    } else {\n      const existingPermission = infoPlist[permission];\n      if (existingPermission && existingPermission !== description) {\n        // TODO: Debug warn\n        //   console.warn(\n        //     `[withPermissionsIos][conflict] permission \"${permission}\" is already defined in the Info.plist with description \"${existingPermission}\"`\n        //   );\n      }\n      infoPlist[permission] = description;\n    }\n  }\n  return infoPlist;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}