{"ast":null,"code":"'use strict';\n\nvar Promise = require(\"../../Promise\");\n\nvar RCTDeviceEventEmitter = require(\"../../EventEmitter/RCTDeviceEventEmitter\");\n\nimport NativeAccessibilityManager from \"./NativeAccessibilityManager\";\nvar CHANGE_EVENT_NAME = {\n  announcementFinished: 'announcementFinished',\n  boldTextChanged: 'boldTextChanged',\n  grayscaleChanged: 'grayscaleChanged',\n  invertColorsChanged: 'invertColorsChanged',\n  reduceMotionChanged: 'reduceMotionChanged',\n  reduceTransparencyChanged: 'reduceTransparencyChanged',\n  screenReaderChanged: 'screenReaderChanged'\n};\n\nvar _subscriptions = new Map();\n\nvar AccessibilityInfo = {\n  isBoldTextEnabled: function isBoldTextEnabled() {\n    return new Promise(function (resolve, reject) {\n      if (NativeAccessibilityManager) {\n        NativeAccessibilityManager.getCurrentBoldTextState(resolve, reject);\n      } else {\n        reject(reject);\n      }\n    });\n  },\n  isGrayscaleEnabled: function isGrayscaleEnabled() {\n    return new Promise(function (resolve, reject) {\n      if (NativeAccessibilityManager) {\n        NativeAccessibilityManager.getCurrentGrayscaleState(resolve, reject);\n      } else {\n        reject(reject);\n      }\n    });\n  },\n  isInvertColorsEnabled: function isInvertColorsEnabled() {\n    return new Promise(function (resolve, reject) {\n      if (NativeAccessibilityManager) {\n        NativeAccessibilityManager.getCurrentInvertColorsState(resolve, reject);\n      } else {\n        reject(reject);\n      }\n    });\n  },\n  isReduceMotionEnabled: function isReduceMotionEnabled() {\n    return new Promise(function (resolve, reject) {\n      if (NativeAccessibilityManager) {\n        NativeAccessibilityManager.getCurrentReduceMotionState(resolve, reject);\n      } else {\n        reject(reject);\n      }\n    });\n  },\n  isReduceTransparencyEnabled: function isReduceTransparencyEnabled() {\n    return new Promise(function (resolve, reject) {\n      if (NativeAccessibilityManager) {\n        NativeAccessibilityManager.getCurrentReduceTransparencyState(resolve, reject);\n      } else {\n        reject(reject);\n      }\n    });\n  },\n  isScreenReaderEnabled: function isScreenReaderEnabled() {\n    return new Promise(function (resolve, reject) {\n      if (NativeAccessibilityManager) {\n        NativeAccessibilityManager.getCurrentVoiceOverState(resolve, reject);\n      } else {\n        reject(reject);\n      }\n    });\n  },\n\n  get fetch() {\n    console.warn('AccessibilityInfo.fetch is deprecated, call AccessibilityInfo.isScreenReaderEnabled instead');\n    return this.isScreenReaderEnabled;\n  },\n\n  addEventListener: function addEventListener(eventName, handler) {\n    var listener;\n\n    if (eventName === 'change') {\n      listener = RCTDeviceEventEmitter.addListener(CHANGE_EVENT_NAME.screenReaderChanged, handler);\n    } else if (CHANGE_EVENT_NAME[eventName]) {\n      listener = RCTDeviceEventEmitter.addListener(eventName, handler);\n    }\n\n    _subscriptions.set(handler, listener);\n\n    return {\n      remove: AccessibilityInfo.removeEventListener.bind(null, eventName, handler)\n    };\n  },\n  setAccessibilityFocus: function setAccessibilityFocus(reactTag) {\n    if (NativeAccessibilityManager) {\n      NativeAccessibilityManager.setAccessibilityFocus(reactTag);\n    }\n  },\n  announceForAccessibility: function announceForAccessibility(announcement) {\n    if (NativeAccessibilityManager) {\n      NativeAccessibilityManager.announceForAccessibility(announcement);\n    }\n  },\n  removeEventListener: function removeEventListener(eventName, handler) {\n    var listener = _subscriptions.get(handler);\n\n    if (!listener) {\n      return;\n    }\n\n    listener.remove();\n\n    _subscriptions.delete(handler);\n  }\n};\nmodule.exports = AccessibilityInfo;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Components/AccessibilityInfo/AccessibilityInfo.ios.js"],"names":["Promise","require","RCTDeviceEventEmitter","NativeAccessibilityManager","CHANGE_EVENT_NAME","announcementFinished","boldTextChanged","grayscaleChanged","invertColorsChanged","reduceMotionChanged","reduceTransparencyChanged","screenReaderChanged","_subscriptions","Map","AccessibilityInfo","isBoldTextEnabled","resolve","reject","getCurrentBoldTextState","isGrayscaleEnabled","getCurrentGrayscaleState","isInvertColorsEnabled","getCurrentInvertColorsState","isReduceMotionEnabled","getCurrentReduceMotionState","isReduceTransparencyEnabled","getCurrentReduceTransparencyState","isScreenReaderEnabled","getCurrentVoiceOverState","fetch","console","warn","addEventListener","eventName","handler","listener","addListener","set","remove","removeEventListener","bind","setAccessibilityFocus","reactTag","announceForAccessibility","announcement","get","delete","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst Promise = require('../../Promise');\nconst RCTDeviceEventEmitter = require('../../EventEmitter/RCTDeviceEventEmitter');\n\nimport NativeAccessibilityManager from './NativeAccessibilityManager';\n\nconst CHANGE_EVENT_NAME = {\n  announcementFinished: 'announcementFinished',\n  boldTextChanged: 'boldTextChanged',\n  grayscaleChanged: 'grayscaleChanged',\n  invertColorsChanged: 'invertColorsChanged',\n  reduceMotionChanged: 'reduceMotionChanged',\n  reduceTransparencyChanged: 'reduceTransparencyChanged',\n  screenReaderChanged: 'screenReaderChanged',\n};\n\ntype ChangeEventName = $Keys<{\n  announcementFinished: string,\n  boldTextChanged: string,\n  change: string,\n  grayscaleChanged: string,\n  invertColorsChanged: string,\n  reduceMotionChanged: string,\n  reduceTransparencyChanged: string,\n  screenReaderChanged: string,\n  ...\n}>;\n\nconst _subscriptions = new Map();\n\n/**\n * Sometimes it's useful to know whether or not the device has a screen reader\n * that is currently active. The `AccessibilityInfo` API is designed for this\n * purpose. You can use it to query the current state of the screen reader as\n * well as to register to be notified when the state of the screen reader\n * changes.\n *\n * See https://reactnative.dev/docs/accessibilityinfo.html\n */\nconst AccessibilityInfo = {\n  /**\n   * Query whether bold text is currently enabled.\n   *\n   * Returns a promise which resolves to a boolean.\n   * The result is `true` when bold text is enabled and `false` otherwise.\n   *\n   * See https://reactnative.dev/docs/accessibilityinfo.html#isBoldTextEnabled\n   */\n  isBoldTextEnabled: function(): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n      if (NativeAccessibilityManager) {\n        NativeAccessibilityManager.getCurrentBoldTextState(resolve, reject);\n      } else {\n        reject(reject);\n      }\n    });\n  },\n\n  /**\n   * Query whether grayscale is currently enabled.\n   *\n   * Returns a promise which resolves to a boolean.\n   * The result is `true` when grayscale is enabled and `false` otherwise.\n   *\n   * See https://reactnative.dev/docs/accessibilityinfo.html#isGrayscaleEnabled\n   */\n  isGrayscaleEnabled: function(): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n      if (NativeAccessibilityManager) {\n        NativeAccessibilityManager.getCurrentGrayscaleState(resolve, reject);\n      } else {\n        reject(reject);\n      }\n    });\n  },\n\n  /**\n   * Query whether inverted colors are currently enabled.\n   *\n   * Returns a promise which resolves to a boolean.\n   * The result is `true` when invert color is enabled and `false` otherwise.\n   *\n   * See https://reactnative.dev/docs/accessibilityinfo.html#isInvertColorsEnabled\n   */\n  isInvertColorsEnabled: function(): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n      if (NativeAccessibilityManager) {\n        NativeAccessibilityManager.getCurrentInvertColorsState(resolve, reject);\n      } else {\n        reject(reject);\n      }\n    });\n  },\n\n  /**\n   * Query whether reduced motion is currently enabled.\n   *\n   * Returns a promise which resolves to a boolean.\n   * The result is `true` when a reduce motion is enabled and `false` otherwise.\n   *\n   * See https://reactnative.dev/docs/accessibilityinfo.html#isReduceMotionEnabled\n   */\n  isReduceMotionEnabled: function(): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n      if (NativeAccessibilityManager) {\n        NativeAccessibilityManager.getCurrentReduceMotionState(resolve, reject);\n      } else {\n        reject(reject);\n      }\n    });\n  },\n\n  /**\n   * Query whether reduced transparency is currently enabled.\n   *\n   * Returns a promise which resolves to a boolean.\n   * The result is `true` when a reduce transparency is enabled and `false` otherwise.\n   *\n   * See https://reactnative.dev/docs/accessibilityinfo.html#isReduceTransparencyEnabled\n   */\n  isReduceTransparencyEnabled: function(): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n      if (NativeAccessibilityManager) {\n        NativeAccessibilityManager.getCurrentReduceTransparencyState(\n          resolve,\n          reject,\n        );\n      } else {\n        reject(reject);\n      }\n    });\n  },\n\n  /**\n   * Query whether a screen reader is currently enabled.\n   *\n   * Returns a promise which resolves to a boolean.\n   * The result is `true` when a screen reader is enabled and `false` otherwise.\n   *\n   * See https://reactnative.dev/docs/accessibilityinfo.html#isScreenReaderEnabled\n   */\n  isScreenReaderEnabled: function(): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n      if (NativeAccessibilityManager) {\n        NativeAccessibilityManager.getCurrentVoiceOverState(resolve, reject);\n      } else {\n        reject(reject);\n      }\n    });\n  },\n\n  /**\n   * Deprecated\n   *\n   * Same as `isScreenReaderEnabled`\n   */\n  get fetch(): $FlowFixMe {\n    console.warn(\n      'AccessibilityInfo.fetch is deprecated, call AccessibilityInfo.isScreenReaderEnabled instead',\n    );\n    return this.isScreenReaderEnabled;\n  },\n\n  /**\n   * Add an event handler. Supported events:\n   *\n   * - `boldTextChanged`: iOS-only event. Fires when the state of the bold text toggle changes.\n   *   The argument to the event handler is a boolean. The boolean is `true` when a bold text\n   *   is enabled and `false` otherwise.\n   * - `grayscaleChanged`: iOS-only event. Fires when the state of the gray scale toggle changes.\n   *   The argument to the event handler is a boolean. The boolean is `true` when a gray scale\n   *   is enabled and `false` otherwise.\n   * - `invertColorsChanged`: iOS-only event. Fires when the state of the invert colors toggle\n   *   changes. The argument to the event handler is a boolean. The boolean is `true` when a invert\n   *   colors is enabled and `false` otherwise.\n   * - `reduceMotionChanged`: Fires when the state of the reduce motion toggle changes.\n   *   The argument to the event handler is a boolean. The boolean is `true` when a reduce\n   *   motion is enabled (or when \"Transition Animation Scale\" in \"Developer options\" is\n   *   \"Animation off\") and `false` otherwise.\n   * - `reduceTransparencyChanged`: iOS-only event. Fires when the state of the reduce transparency\n   *   toggle changes.  The argument to the event handler is a boolean. The boolean is `true`\n   *   when a reduce transparency is enabled and `false` otherwise.\n   * - `screenReaderChanged`: Fires when the state of the screen reader changes. The argument\n   *   to the event handler is a boolean. The boolean is `true` when a screen\n   *   reader is enabled and `false` otherwise.\n   * - `announcementFinished`: iOS-only event. Fires when the screen reader has\n   *   finished making an announcement. The argument to the event handler is a\n   *   dictionary with these keys:\n   *     - `announcement`: The string announced by the screen reader.\n   *     - `success`: A boolean indicating whether the announcement was\n   *       successfully made.\n   *\n   * See https://reactnative.dev/docs/accessibilityinfo.html#addeventlistener\n   */\n  addEventListener: function(\n    eventName: ChangeEventName,\n    handler: Function,\n  ): Object {\n    let listener;\n\n    if (eventName === 'change') {\n      listener = RCTDeviceEventEmitter.addListener(\n        CHANGE_EVENT_NAME.screenReaderChanged,\n        handler,\n      );\n    } else if (CHANGE_EVENT_NAME[eventName]) {\n      listener = RCTDeviceEventEmitter.addListener(eventName, handler);\n    }\n\n    _subscriptions.set(handler, listener);\n    return {\n      remove: AccessibilityInfo.removeEventListener.bind(\n        null,\n        eventName,\n        handler,\n      ),\n    };\n  },\n\n  /**\n   * Set accessibility focus to a react component.\n   *\n   * See https://reactnative.dev/docs/accessibilityinfo.html#setaccessibilityfocus\n   */\n  setAccessibilityFocus: function(reactTag: number): void {\n    if (NativeAccessibilityManager) {\n      NativeAccessibilityManager.setAccessibilityFocus(reactTag);\n    }\n  },\n\n  /**\n   * Post a string to be announced by the screen reader.\n   *\n   * See https://reactnative.dev/docs/accessibilityinfo.html#announceforaccessibility\n   */\n  announceForAccessibility: function(announcement: string): void {\n    if (NativeAccessibilityManager) {\n      NativeAccessibilityManager.announceForAccessibility(announcement);\n    }\n  },\n\n  /**\n   * Remove an event handler.\n   *\n   * See https://reactnative.dev/docs/accessibilityinfo.html#removeeventlistener\n   */\n  removeEventListener: function(\n    eventName: ChangeEventName,\n    handler: Function,\n  ): void {\n    const listener = _subscriptions.get(handler);\n    if (!listener) {\n      return;\n    }\n    listener.remove();\n    _subscriptions.delete(handler);\n  },\n};\n\nmodule.exports = AccessibilityInfo;\n"]},"metadata":{},"sourceType":"module"}