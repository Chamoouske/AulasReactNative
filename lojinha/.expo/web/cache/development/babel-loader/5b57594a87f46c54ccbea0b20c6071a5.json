{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar path_1 = __importDefault(require(\"path\"));\n\nvar resolve_from_1 = __importDefault(require(\"resolve-from\"));\n\nvar android_plugins_1 = require(\"../plugins/android-plugins\");\n\nvar Manifest_1 = require(\"./Manifest\");\n\nvar CREATE_MANIFEST_ANDROID_PATH = 'expo-updates/scripts/create-manifest-android.gradle';\nvar Config;\n\n(function (Config) {\n  Config[\"ENABLED\"] = \"expo.modules.updates.ENABLED\";\n  Config[\"CHECK_ON_LAUNCH\"] = \"expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH\";\n  Config[\"LAUNCH_WAIT_MS\"] = \"expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS\";\n  Config[\"SDK_VERSION\"] = \"expo.modules.updates.EXPO_SDK_VERSION\";\n  Config[\"RUNTIME_VERSION\"] = \"expo.modules.updates.EXPO_RUNTIME_VERSION\";\n  Config[\"UPDATE_URL\"] = \"expo.modules.updates.EXPO_UPDATE_URL\";\n  Config[\"RELEASE_CHANNEL\"] = \"expo.modules.updates.EXPO_RELEASE_CHANNEL\";\n})(Config = exports.Config || (exports.Config = {}));\n\nexports.withUpdates = function (config, _ref) {\n  var expoUsername = _ref.expoUsername;\n  return android_plugins_1.withAndroidManifest(config, function (config) {\n    config.modResults = setUpdatesConfig(config, config.modResults, expoUsername);\n    return config;\n  });\n};\n\nfunction getUpdateUrl(config, username) {\n  var user = typeof config.owner === 'string' ? config.owner : username;\n\n  if (!user) {\n    return null;\n  }\n\n  return \"https://exp.host/@\" + user + \"/\" + config.slug;\n}\n\nexports.getUpdateUrl = getUpdateUrl;\n\nfunction getRuntimeVersion(config) {\n  return typeof config.runtimeVersion === 'string' ? config.runtimeVersion : null;\n}\n\nexports.getRuntimeVersion = getRuntimeVersion;\n\nfunction getSDKVersion(config) {\n  return typeof config.sdkVersion === 'string' ? config.sdkVersion : null;\n}\n\nexports.getSDKVersion = getSDKVersion;\n\nfunction getUpdatesEnabled(config) {\n  var _a;\n\n  return ((_a = config.updates) === null || _a === void 0 ? void 0 : _a.enabled) !== false;\n}\n\nexports.getUpdatesEnabled = getUpdatesEnabled;\n\nfunction getUpdatesTimeout(config) {\n  var _a, _b;\n\n  return (_b = (_a = config.updates) === null || _a === void 0 ? void 0 : _a.fallbackToCacheTimeout) !== null && _b !== void 0 ? _b : 0;\n}\n\nexports.getUpdatesTimeout = getUpdatesTimeout;\n\nfunction getUpdatesCheckOnLaunch(config) {\n  var _a, _b;\n\n  if (((_a = config.updates) === null || _a === void 0 ? void 0 : _a.checkAutomatically) === 'ON_ERROR_RECOVERY') {\n    return 'NEVER';\n  } else if (((_b = config.updates) === null || _b === void 0 ? void 0 : _b.checkAutomatically) === 'ON_LOAD') {\n    return 'ALWAYS';\n  }\n\n  return 'ALWAYS';\n}\n\nexports.getUpdatesCheckOnLaunch = getUpdatesCheckOnLaunch;\n\nfunction setUpdatesConfig(config, androidManifest, username) {\n  var mainApplication = Manifest_1.getMainApplicationOrThrow(androidManifest);\n  Manifest_1.addMetaDataItemToMainApplication(mainApplication, Config.ENABLED, String(getUpdatesEnabled(config)));\n  Manifest_1.addMetaDataItemToMainApplication(mainApplication, Config.CHECK_ON_LAUNCH, getUpdatesCheckOnLaunch(config));\n  Manifest_1.addMetaDataItemToMainApplication(mainApplication, Config.LAUNCH_WAIT_MS, String(getUpdatesTimeout(config)));\n  var updateUrl = getUpdateUrl(config, username);\n\n  if (updateUrl) {\n    Manifest_1.addMetaDataItemToMainApplication(mainApplication, Config.UPDATE_URL, updateUrl);\n  } else {\n    Manifest_1.removeMetaDataItemFromMainApplication(mainApplication, Config.UPDATE_URL);\n  }\n\n  return setVersionsConfig(config, androidManifest);\n}\n\nexports.setUpdatesConfig = setUpdatesConfig;\n\nfunction setVersionsConfig(config, androidManifest) {\n  var mainApplication = Manifest_1.getMainApplicationOrThrow(androidManifest);\n  var runtimeVersion = getRuntimeVersion(config);\n  var sdkVersion = getSDKVersion(config);\n\n  if (runtimeVersion) {\n    Manifest_1.removeMetaDataItemFromMainApplication(mainApplication, Config.SDK_VERSION);\n    Manifest_1.addMetaDataItemToMainApplication(mainApplication, Config.RUNTIME_VERSION, runtimeVersion);\n  } else if (sdkVersion) {\n    Manifest_1.removeMetaDataItemFromMainApplication(mainApplication, Config.RUNTIME_VERSION);\n    Manifest_1.addMetaDataItemToMainApplication(mainApplication, Config.SDK_VERSION, sdkVersion);\n  } else {\n    Manifest_1.removeMetaDataItemFromMainApplication(mainApplication, Config.RUNTIME_VERSION);\n    Manifest_1.removeMetaDataItemFromMainApplication(mainApplication, Config.SDK_VERSION);\n  }\n\n  return androidManifest;\n}\n\nexports.setVersionsConfig = setVersionsConfig;\n\nfunction ensureBuildGradleContainsConfigurationScript(projectRoot, buildGradleContents) {\n  if (!isBuildGradleConfigured(projectRoot, buildGradleContents)) {\n    var cleanedUpBuildGradleContents;\n    var isBuildGradleMisconfigured = buildGradleContents.split('\\n').some(function (line) {\n      return line.includes(CREATE_MANIFEST_ANDROID_PATH);\n    });\n\n    if (isBuildGradleMisconfigured) {\n      cleanedUpBuildGradleContents = buildGradleContents.replace(new RegExp(\"(\\n// Integration with Expo updates)?\\n.*\" + CREATE_MANIFEST_ANDROID_PATH + \".*\\n\"), '');\n    } else {\n      cleanedUpBuildGradleContents = buildGradleContents;\n    }\n\n    var gradleScriptApply = formatApplyLineForBuildGradle(projectRoot);\n    return cleanedUpBuildGradleContents + \"\\n// Integration with Expo updates\\n\" + gradleScriptApply + \"\\n\";\n  } else {\n    return buildGradleContents;\n  }\n}\n\nexports.ensureBuildGradleContainsConfigurationScript = ensureBuildGradleContainsConfigurationScript;\n\nfunction formatApplyLineForBuildGradle(projectRoot) {\n  var updatesGradleScriptPath = resolve_from_1.default.silent(projectRoot, CREATE_MANIFEST_ANDROID_PATH);\n\n  if (!updatesGradleScriptPath) {\n    throw new Error(\"Could not find the build script for Android. This could happen in case of outdated 'node_modules'. Run 'npm install' to make sure that it's up-to-date.\");\n  }\n\n  var relativePath = path_1.default.relative(path_1.default.join(projectRoot, 'android', 'app'), updatesGradleScriptPath);\n  var posixPath = process.platform === 'win32' ? relativePath.replace(/\\\\/g, '/') : relativePath;\n  return \"apply from: \\\"\" + posixPath + \"\\\"\";\n}\n\nexports.formatApplyLineForBuildGradle = formatApplyLineForBuildGradle;\n\nfunction isBuildGradleConfigured(projectRoot, buildGradleContents) {\n  var androidBuildScript = formatApplyLineForBuildGradle(projectRoot);\n  return buildGradleContents.replace(/\\r\\n/g, '\\n').split('\\n').some(function (line) {\n    return line === androidBuildScript || line === androidBuildScript.replace(/\"/g, \"'\");\n  });\n}\n\nexports.isBuildGradleConfigured = isBuildGradleConfigured;\n\nfunction isMainApplicationMetaDataSet(androidManifest) {\n  var updateUrl = Manifest_1.getMainApplicationMetaDataValue(androidManifest, Config.UPDATE_URL);\n  var runtimeVersion = Manifest_1.getMainApplicationMetaDataValue(androidManifest, Config.RUNTIME_VERSION);\n  var sdkVersion = Manifest_1.getMainApplicationMetaDataValue(androidManifest, Config.SDK_VERSION);\n  return Boolean(updateUrl && (sdkVersion || runtimeVersion));\n}\n\nexports.isMainApplicationMetaDataSet = isMainApplicationMetaDataSet;\n\nfunction isMainApplicationMetaDataSynced(config, androidManifest, username) {\n  return getUpdateUrl(config, username) === Manifest_1.getMainApplicationMetaDataValue(androidManifest, Config.UPDATE_URL) && String(getUpdatesEnabled(config)) === Manifest_1.getMainApplicationMetaDataValue(androidManifest, Config.ENABLED) && String(getUpdatesTimeout(config)) === Manifest_1.getMainApplicationMetaDataValue(androidManifest, Config.LAUNCH_WAIT_MS) && getUpdatesCheckOnLaunch(config) === Manifest_1.getMainApplicationMetaDataValue(androidManifest, Config.CHECK_ON_LAUNCH) && areVersionsSynced(config, androidManifest);\n}\n\nexports.isMainApplicationMetaDataSynced = isMainApplicationMetaDataSynced;\n\nfunction areVersionsSynced(config, androidManifest) {\n  var expectedRuntimeVersion = getRuntimeVersion(config);\n  var expectedSdkVersion = getSDKVersion(config);\n  var currentRuntimeVersion = Manifest_1.getMainApplicationMetaDataValue(androidManifest, Config.RUNTIME_VERSION);\n  var currentSdkVersion = Manifest_1.getMainApplicationMetaDataValue(androidManifest, Config.SDK_VERSION);\n  return currentRuntimeVersion === expectedRuntimeVersion && currentSdkVersion === expectedSdkVersion;\n}\n\nexports.areVersionsSynced = areVersionsSynced;","map":{"version":3,"sources":["../../src/android/Updates.ts"],"names":[],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport path from 'path';\nimport resolveFrom from 'resolve-from';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withAndroidManifest } from '../plugins/android-plugins';\nimport {\n  addMetaDataItemToMainApplication,\n  AndroidManifest,\n  getMainApplicationMetaDataValue,\n  getMainApplicationOrThrow,\n  removeMetaDataItemFromMainApplication,\n} from './Manifest';\n\nconst CREATE_MANIFEST_ANDROID_PATH = 'expo-updates/scripts/create-manifest-android.gradle';\n\ntype ExpoConfigUpdates = Pick<\n  ExpoConfig,\n  'sdkVersion' | 'owner' | 'runtimeVersion' | 'updates' | 'slug'\n>;\n\nexport enum Config {\n  ENABLED = 'expo.modules.updates.ENABLED',\n  CHECK_ON_LAUNCH = 'expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH',\n  LAUNCH_WAIT_MS = 'expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS',\n  SDK_VERSION = 'expo.modules.updates.EXPO_SDK_VERSION',\n  RUNTIME_VERSION = 'expo.modules.updates.EXPO_RUNTIME_VERSION',\n  UPDATE_URL = 'expo.modules.updates.EXPO_UPDATE_URL',\n  RELEASE_CHANNEL = 'expo.modules.updates.EXPO_RELEASE_CHANNEL',\n}\n\nexport const withUpdates: ConfigPlugin<{ expoUsername: string | null }> = (\n  config,\n  { expoUsername }\n) => {\n  return withAndroidManifest(config, config => {\n    config.modResults = setUpdatesConfig(config, config.modResults, expoUsername);\n    return config;\n  });\n};\n\nexport function getUpdateUrl(\n  config: Pick<ExpoConfigUpdates, 'owner' | 'slug'>,\n  username: string | null\n): string | null {\n  const user = typeof config.owner === 'string' ? config.owner : username;\n  if (!user) {\n    return null;\n  }\n  return `https://exp.host/@${user}/${config.slug}`;\n}\n\nexport function getRuntimeVersion(\n  config: Pick<ExpoConfigUpdates, 'runtimeVersion'>\n): string | null {\n  return typeof config.runtimeVersion === 'string' ? config.runtimeVersion : null;\n}\n\nexport function getSDKVersion(config: Pick<ExpoConfigUpdates, 'sdkVersion'>): string | null {\n  return typeof config.sdkVersion === 'string' ? config.sdkVersion : null;\n}\n\nexport function getUpdatesEnabled(config: Pick<ExpoConfigUpdates, 'updates'>): boolean {\n  return config.updates?.enabled !== false;\n}\n\nexport function getUpdatesTimeout(config: Pick<ExpoConfigUpdates, 'updates'>): number {\n  return config.updates?.fallbackToCacheTimeout ?? 0;\n}\n\nexport function getUpdatesCheckOnLaunch(\n  config: Pick<ExpoConfigUpdates, 'updates'>\n): 'NEVER' | 'ALWAYS' {\n  if (config.updates?.checkAutomatically === 'ON_ERROR_RECOVERY') {\n    return 'NEVER';\n  } else if (config.updates?.checkAutomatically === 'ON_LOAD') {\n    return 'ALWAYS';\n  }\n  return 'ALWAYS';\n}\n\nexport function setUpdatesConfig(\n  config: ExpoConfigUpdates,\n  androidManifest: AndroidManifest,\n  username: string | null\n): AndroidManifest {\n  const mainApplication = getMainApplicationOrThrow(androidManifest);\n\n  addMetaDataItemToMainApplication(\n    mainApplication,\n    Config.ENABLED,\n    String(getUpdatesEnabled(config))\n  );\n  addMetaDataItemToMainApplication(\n    mainApplication,\n    Config.CHECK_ON_LAUNCH,\n    getUpdatesCheckOnLaunch(config)\n  );\n  addMetaDataItemToMainApplication(\n    mainApplication,\n    Config.LAUNCH_WAIT_MS,\n    String(getUpdatesTimeout(config))\n  );\n\n  const updateUrl = getUpdateUrl(config, username);\n  if (updateUrl) {\n    addMetaDataItemToMainApplication(mainApplication, Config.UPDATE_URL, updateUrl);\n  } else {\n    removeMetaDataItemFromMainApplication(mainApplication, Config.UPDATE_URL);\n  }\n\n  return setVersionsConfig(config, androidManifest);\n}\n\nexport function setVersionsConfig(\n  config: Pick<ExpoConfigUpdates, 'sdkVersion' | 'runtimeVersion'>,\n  androidManifest: AndroidManifest\n): AndroidManifest {\n  const mainApplication = getMainApplicationOrThrow(androidManifest);\n\n  const runtimeVersion = getRuntimeVersion(config);\n  const sdkVersion = getSDKVersion(config);\n  if (runtimeVersion) {\n    removeMetaDataItemFromMainApplication(mainApplication, Config.SDK_VERSION);\n    addMetaDataItemToMainApplication(mainApplication, Config.RUNTIME_VERSION, runtimeVersion);\n  } else if (sdkVersion) {\n    removeMetaDataItemFromMainApplication(mainApplication, Config.RUNTIME_VERSION);\n    addMetaDataItemToMainApplication(mainApplication, Config.SDK_VERSION, sdkVersion);\n  } else {\n    removeMetaDataItemFromMainApplication(mainApplication, Config.RUNTIME_VERSION);\n    removeMetaDataItemFromMainApplication(mainApplication, Config.SDK_VERSION);\n  }\n\n  return androidManifest;\n}\nexport function ensureBuildGradleContainsConfigurationScript(\n  projectRoot: string,\n  buildGradleContents: string\n): string {\n  if (!isBuildGradleConfigured(projectRoot, buildGradleContents)) {\n    let cleanedUpBuildGradleContents;\n\n    const isBuildGradleMisconfigured = buildGradleContents\n      .split('\\n')\n      .some(line => line.includes(CREATE_MANIFEST_ANDROID_PATH));\n    if (isBuildGradleMisconfigured) {\n      cleanedUpBuildGradleContents = buildGradleContents.replace(\n        new RegExp(`(\\n// Integration with Expo updates)?\\n.*${CREATE_MANIFEST_ANDROID_PATH}.*\\n`),\n        ''\n      );\n    } else {\n      cleanedUpBuildGradleContents = buildGradleContents;\n    }\n\n    const gradleScriptApply = formatApplyLineForBuildGradle(projectRoot);\n    return `${cleanedUpBuildGradleContents}\\n// Integration with Expo updates\\n${gradleScriptApply}\\n`;\n  } else {\n    return buildGradleContents;\n  }\n}\n\nexport function formatApplyLineForBuildGradle(projectRoot: string): string {\n  const updatesGradleScriptPath = resolveFrom.silent(projectRoot, CREATE_MANIFEST_ANDROID_PATH);\n\n  if (!updatesGradleScriptPath) {\n    throw new Error(\n      \"Could not find the build script for Android. This could happen in case of outdated 'node_modules'. Run 'npm install' to make sure that it's up-to-date.\"\n    );\n  }\n\n  const relativePath = path.relative(\n    path.join(projectRoot, 'android', 'app'),\n    updatesGradleScriptPath\n  );\n  const posixPath = process.platform === 'win32' ? relativePath.replace(/\\\\/g, '/') : relativePath;\n\n  return `apply from: \"${posixPath}\"`;\n}\n\nexport function isBuildGradleConfigured(projectRoot: string, buildGradleContents: string): boolean {\n  const androidBuildScript = formatApplyLineForBuildGradle(projectRoot);\n\n  return (\n    buildGradleContents\n      .replace(/\\r\\n/g, '\\n')\n      .split('\\n')\n      // Check for both single and double quotes\n      .some(line => line === androidBuildScript || line === androidBuildScript.replace(/\"/g, \"'\"))\n  );\n}\n\nexport function isMainApplicationMetaDataSet(androidManifest: AndroidManifest): boolean {\n  const updateUrl = getMainApplicationMetaDataValue(androidManifest, Config.UPDATE_URL);\n  const runtimeVersion = getMainApplicationMetaDataValue(androidManifest, Config.RUNTIME_VERSION);\n  const sdkVersion = getMainApplicationMetaDataValue(androidManifest, Config.SDK_VERSION);\n\n  return Boolean(updateUrl && (sdkVersion || runtimeVersion));\n}\n\nexport function isMainApplicationMetaDataSynced(\n  config: ExpoConfigUpdates,\n  androidManifest: AndroidManifest,\n  username: string | null\n): boolean {\n  return (\n    getUpdateUrl(config, username) ===\n      getMainApplicationMetaDataValue(androidManifest, Config.UPDATE_URL) &&\n    String(getUpdatesEnabled(config)) ===\n      getMainApplicationMetaDataValue(androidManifest, Config.ENABLED) &&\n    String(getUpdatesTimeout(config)) ===\n      getMainApplicationMetaDataValue(androidManifest, Config.LAUNCH_WAIT_MS) &&\n    getUpdatesCheckOnLaunch(config) ===\n      getMainApplicationMetaDataValue(androidManifest, Config.CHECK_ON_LAUNCH) &&\n    areVersionsSynced(config, androidManifest)\n  );\n}\n\nexport function areVersionsSynced(\n  config: Pick<ExpoConfigUpdates, 'runtimeVersion' | 'sdkVersion'>,\n  androidManifest: AndroidManifest\n): boolean {\n  const expectedRuntimeVersion = getRuntimeVersion(config);\n  const expectedSdkVersion = getSDKVersion(config);\n  const currentRuntimeVersion = getMainApplicationMetaDataValue(\n    androidManifest,\n    Config.RUNTIME_VERSION\n  );\n  const currentSdkVersion = getMainApplicationMetaDataValue(androidManifest, Config.SDK_VERSION);\n\n  return (\n    currentRuntimeVersion === expectedRuntimeVersion && currentSdkVersion === expectedSdkVersion\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}