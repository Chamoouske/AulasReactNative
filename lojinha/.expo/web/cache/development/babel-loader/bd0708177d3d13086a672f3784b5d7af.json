{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar image_utils_1 = require(\"@expo/image-utils\");\n\nvar fs_extra_1 = __importDefault(require(\"fs-extra\"));\n\nvar path_1 = __importDefault(require(\"path\"));\n\nvar android_plugins_1 = require(\"../plugins/android-plugins\");\n\nvar core_plugins_1 = require(\"../plugins/core-plugins\");\n\nvar XML_1 = require(\"../utils/XML\");\n\nvar Colors = __importStar(require(\"./Colors\"));\n\nvar Icon_1 = require(\"./Icon\");\n\nvar Manifest_1 = require(\"./Manifest\");\n\nvar Resources_1 = require(\"./Resources\");\n\nvar BASELINE_PIXEL_SIZE = 24;\nexports.META_DATA_NOTIFICATION_ICON = 'expo.modules.notifications.default_notification_icon';\nexports.META_DATA_NOTIFICATION_ICON_COLOR = 'expo.modules.notifications.default_notification_color';\nexports.NOTIFICATION_ICON = 'notification_icon';\nexports.NOTIFICATION_ICON_RESOURCE = \"@drawable/\" + exports.NOTIFICATION_ICON;\nexports.NOTIFICATION_ICON_COLOR = 'notification_icon_color';\nexports.NOTIFICATION_ICON_COLOR_RESOURCE = \"@color/\" + exports.NOTIFICATION_ICON_COLOR;\n\nexports.withNotificationIcons = function (config) {\n  return core_plugins_1.withDangerousMod(config, ['android', function _callee(config) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(setNotificationIconAsync(config, config.modRequest.projectRoot));\n\n          case 2:\n            return _context.abrupt(\"return\", config);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }]);\n};\n\nexports.withNotificationIconColor = function (config) {\n  return core_plugins_1.withDangerousMod(config, ['android', function _callee2(config) {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(setNotificationIconColorAsync(config, config.modRequest.projectRoot));\n\n          case 2:\n            return _context2.abrupt(\"return\", config);\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }]);\n};\n\nexports.withNotificationManifest = android_plugins_1.createAndroidManifestPlugin(setNotificationConfigAsync, 'withNotificationManifest');\n\nfunction getNotificationIcon(config) {\n  var _a;\n\n  return ((_a = config.notification) === null || _a === void 0 ? void 0 : _a.icon) || null;\n}\n\nexports.getNotificationIcon = getNotificationIcon;\n\nfunction getNotificationColor(config) {\n  var _a;\n\n  return ((_a = config.notification) === null || _a === void 0 ? void 0 : _a.color) || null;\n}\n\nexports.getNotificationColor = getNotificationColor;\n\nfunction setNotificationIconAsync(config, projectRoot) {\n  var icon;\n  return _regeneratorRuntime.async(function setNotificationIconAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          icon = getNotificationIcon(config);\n\n          if (!icon) {\n            _context3.next = 6;\n            break;\n          }\n\n          _context3.next = 4;\n          return _regeneratorRuntime.awrap(writeNotificationIconImageFilesAsync(icon, projectRoot));\n\n        case 4:\n          _context3.next = 8;\n          break;\n\n        case 6:\n          _context3.next = 8;\n          return _regeneratorRuntime.awrap(removeNotificationIconImageFilesAsync(projectRoot));\n\n        case 8:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.setNotificationIconAsync = setNotificationIconAsync;\n\nfunction setNotificationConfigAsync(config, manifest) {\n  var icon, color, mainApplication;\n  return _regeneratorRuntime.async(function setNotificationConfigAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          icon = getNotificationIcon(config);\n          color = getNotificationColor(config);\n          mainApplication = Manifest_1.getMainApplicationOrThrow(manifest);\n\n          if (icon) {\n            Manifest_1.addMetaDataItemToMainApplication(mainApplication, exports.META_DATA_NOTIFICATION_ICON, exports.NOTIFICATION_ICON_RESOURCE, 'resource');\n          } else {\n            Manifest_1.removeMetaDataItemFromMainApplication(mainApplication, exports.META_DATA_NOTIFICATION_ICON);\n          }\n\n          if (color) {\n            Manifest_1.addMetaDataItemToMainApplication(mainApplication, exports.META_DATA_NOTIFICATION_ICON_COLOR, exports.NOTIFICATION_ICON_COLOR_RESOURCE, 'resource');\n          } else {\n            Manifest_1.removeMetaDataItemFromMainApplication(mainApplication, exports.META_DATA_NOTIFICATION_ICON_COLOR);\n          }\n\n          return _context4.abrupt(\"return\", manifest);\n\n        case 6:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.setNotificationConfigAsync = setNotificationConfigAsync;\n\nfunction setNotificationIconColorAsync(config, projectRoot) {\n  var color, colorsXmlPath, colorsJson, colorItemToAdd;\n  return _regeneratorRuntime.async(function setNotificationIconColorAsync$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          color = getNotificationColor(config);\n          _context5.next = 3;\n          return _regeneratorRuntime.awrap(Colors.getProjectColorsXMLPathAsync(projectRoot));\n\n        case 3:\n          colorsXmlPath = _context5.sent;\n          _context5.next = 6;\n          return _regeneratorRuntime.awrap(Resources_1.readResourcesXMLAsync({\n            path: colorsXmlPath\n          }));\n\n        case 6:\n          colorsJson = _context5.sent;\n\n          if (color) {\n            colorItemToAdd = Resources_1.buildResourceItem({\n              name: exports.NOTIFICATION_ICON_COLOR,\n              value: color\n            });\n            colorsJson = Colors.setColorItem(colorItemToAdd, colorsJson);\n          } else {\n            colorsJson = Colors.removeColorItem(exports.NOTIFICATION_ICON_COLOR, colorsJson);\n          }\n\n          _context5.next = 10;\n          return _regeneratorRuntime.awrap(XML_1.writeXMLAsync({\n            path: colorsXmlPath,\n            xml: colorsJson\n          }));\n\n        case 10:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.setNotificationIconColorAsync = setNotificationIconColorAsync;\n\nfunction writeNotificationIconImageFilesAsync(icon, projectRoot) {\n  return _regeneratorRuntime.async(function writeNotificationIconImageFilesAsync$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return _regeneratorRuntime.awrap(Promise.all(Object.values(Icon_1.dpiValues).map(function _callee3(_ref) {\n            var folderName, scale, drawableFolderName, dpiFolderPath, iconSizePx, resizedIcon;\n            return _regeneratorRuntime.async(function _callee3$(_context6) {\n              while (1) {\n                switch (_context6.prev = _context6.next) {\n                  case 0:\n                    folderName = _ref.folderName, scale = _ref.scale;\n                    drawableFolderName = folderName.replace('mipmap', 'drawable');\n                    dpiFolderPath = path_1.default.resolve(projectRoot, Icon_1.ANDROID_RES_PATH, drawableFolderName);\n                    _context6.next = 5;\n                    return _regeneratorRuntime.awrap(fs_extra_1.default.ensureDir(dpiFolderPath));\n\n                  case 5:\n                    iconSizePx = BASELINE_PIXEL_SIZE * scale;\n                    _context6.prev = 6;\n                    _context6.next = 9;\n                    return _regeneratorRuntime.awrap(image_utils_1.generateImageAsync({\n                      projectRoot: projectRoot,\n                      cacheType: 'android-notification'\n                    }, {\n                      src: icon,\n                      width: iconSizePx,\n                      height: iconSizePx,\n                      resizeMode: 'cover',\n                      backgroundColor: 'transparent'\n                    }));\n\n                  case 9:\n                    resizedIcon = _context6.sent.source;\n                    _context6.next = 12;\n                    return _regeneratorRuntime.awrap(fs_extra_1.default.writeFile(path_1.default.resolve(dpiFolderPath, exports.NOTIFICATION_ICON + '.png'), resizedIcon));\n\n                  case 12:\n                    _context6.next = 17;\n                    break;\n\n                  case 14:\n                    _context6.prev = 14;\n                    _context6.t0 = _context6[\"catch\"](6);\n                    throw new Error('Encountered an issue resizing Android notification icon: ' + _context6.t0);\n\n                  case 17:\n                  case \"end\":\n                    return _context6.stop();\n                }\n              }\n            }, null, null, [[6, 14]], Promise);\n          })));\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction removeNotificationIconImageFilesAsync(projectRoot) {\n  return _regeneratorRuntime.async(function removeNotificationIconImageFilesAsync$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return _regeneratorRuntime.awrap(Promise.all(Object.values(Icon_1.dpiValues).map(function _callee4(_ref2) {\n            var folderName, drawableFolderName, dpiFolderPath;\n            return _regeneratorRuntime.async(function _callee4$(_context8) {\n              while (1) {\n                switch (_context8.prev = _context8.next) {\n                  case 0:\n                    folderName = _ref2.folderName;\n                    drawableFolderName = folderName.replace('mipmap', 'drawable');\n                    dpiFolderPath = path_1.default.resolve(projectRoot, Icon_1.ANDROID_RES_PATH, drawableFolderName);\n                    _context8.next = 5;\n                    return _regeneratorRuntime.awrap(fs_extra_1.default.remove(path_1.default.resolve(dpiFolderPath, exports.NOTIFICATION_ICON + '.png')));\n\n                  case 5:\n                  case \"end\":\n                    return _context8.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          })));\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../../src/android/Notifications.ts"],"names":[],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport { generateImageAsync } from '@expo/image-utils';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { createAndroidManifestPlugin } from '../plugins/android-plugins';\nimport { withDangerousMod } from '../plugins/core-plugins';\nimport { writeXMLAsync } from '../utils/XML';\nimport * as Colors from './Colors';\nimport { ANDROID_RES_PATH, dpiValues } from './Icon';\nimport {\n  addMetaDataItemToMainApplication,\n  AndroidManifest,\n  getMainApplicationOrThrow,\n  removeMetaDataItemFromMainApplication,\n} from './Manifest';\nimport { buildResourceItem, readResourcesXMLAsync } from './Resources';\n\nconst BASELINE_PIXEL_SIZE = 24;\nexport const META_DATA_NOTIFICATION_ICON = 'expo.modules.notifications.default_notification_icon';\nexport const META_DATA_NOTIFICATION_ICON_COLOR =\n  'expo.modules.notifications.default_notification_color';\nexport const NOTIFICATION_ICON = 'notification_icon';\nexport const NOTIFICATION_ICON_RESOURCE = `@drawable/${NOTIFICATION_ICON}`;\nexport const NOTIFICATION_ICON_COLOR = 'notification_icon_color';\nexport const NOTIFICATION_ICON_COLOR_RESOURCE = `@color/${NOTIFICATION_ICON_COLOR}`;\n\nexport const withNotificationIcons: ConfigPlugin = config => {\n  return withDangerousMod(config, [\n    'android',\n    async config => {\n      await setNotificationIconAsync(config, config.modRequest.projectRoot);\n      return config;\n    },\n  ]);\n};\n\nexport const withNotificationIconColor: ConfigPlugin = config => {\n  return withDangerousMod(config, [\n    'android',\n    async config => {\n      await setNotificationIconColorAsync(config, config.modRequest.projectRoot);\n      return config;\n    },\n  ]);\n};\n\nexport const withNotificationManifest = createAndroidManifestPlugin(\n  setNotificationConfigAsync,\n  'withNotificationManifest'\n);\n\nexport function getNotificationIcon(config: ExpoConfig) {\n  return config.notification?.icon || null;\n}\n\nexport function getNotificationColor(config: ExpoConfig) {\n  return config.notification?.color || null;\n}\n\n/**\n * Applies configuration for expo-notifications, including\n * the notification icon and notification color.\n */\nexport async function setNotificationIconAsync(config: ExpoConfig, projectRoot: string) {\n  const icon = getNotificationIcon(config);\n  if (icon) {\n    await writeNotificationIconImageFilesAsync(icon, projectRoot);\n  } else {\n    await removeNotificationIconImageFilesAsync(projectRoot);\n  }\n}\n\nexport async function setNotificationConfigAsync(config: ExpoConfig, manifest: AndroidManifest) {\n  const icon = getNotificationIcon(config);\n  const color = getNotificationColor(config);\n  const mainApplication = getMainApplicationOrThrow(manifest);\n  if (icon) {\n    addMetaDataItemToMainApplication(\n      mainApplication,\n      META_DATA_NOTIFICATION_ICON,\n      NOTIFICATION_ICON_RESOURCE,\n      'resource'\n    );\n  } else {\n    removeMetaDataItemFromMainApplication(mainApplication, META_DATA_NOTIFICATION_ICON);\n  }\n  if (color) {\n    addMetaDataItemToMainApplication(\n      mainApplication,\n      META_DATA_NOTIFICATION_ICON_COLOR,\n      NOTIFICATION_ICON_COLOR_RESOURCE,\n      'resource'\n    );\n  } else {\n    removeMetaDataItemFromMainApplication(mainApplication, META_DATA_NOTIFICATION_ICON_COLOR);\n  }\n  return manifest;\n}\n\nexport async function setNotificationIconColorAsync(config: ExpoConfig, projectRoot: string) {\n  const color = getNotificationColor(config);\n  const colorsXmlPath = await Colors.getProjectColorsXMLPathAsync(projectRoot);\n  let colorsJson = await readResourcesXMLAsync({ path: colorsXmlPath });\n  if (color) {\n    const colorItemToAdd = buildResourceItem({ name: NOTIFICATION_ICON_COLOR, value: color });\n    colorsJson = Colors.setColorItem(colorItemToAdd, colorsJson);\n  } else {\n    colorsJson = Colors.removeColorItem(NOTIFICATION_ICON_COLOR, colorsJson);\n  }\n  await writeXMLAsync({ path: colorsXmlPath, xml: colorsJson });\n}\n\nasync function writeNotificationIconImageFilesAsync(icon: string, projectRoot: string) {\n  await Promise.all(\n    Object.values(dpiValues).map(async ({ folderName, scale }) => {\n      const drawableFolderName = folderName.replace('mipmap', 'drawable');\n      const dpiFolderPath = path.resolve(projectRoot, ANDROID_RES_PATH, drawableFolderName);\n      await fs.ensureDir(dpiFolderPath);\n      const iconSizePx = BASELINE_PIXEL_SIZE * scale;\n\n      try {\n        const resizedIcon = (\n          await generateImageAsync(\n            { projectRoot, cacheType: 'android-notification' },\n            {\n              src: icon,\n              width: iconSizePx,\n              height: iconSizePx,\n              resizeMode: 'cover',\n              backgroundColor: 'transparent',\n            }\n          )\n        ).source;\n        await fs.writeFile(path.resolve(dpiFolderPath, NOTIFICATION_ICON + '.png'), resizedIcon);\n      } catch (e) {\n        throw new Error('Encountered an issue resizing Android notification icon: ' + e);\n      }\n    })\n  );\n}\n\nasync function removeNotificationIconImageFilesAsync(projectRoot: string) {\n  await Promise.all(\n    Object.values(dpiValues).map(async ({ folderName }) => {\n      const drawableFolderName = folderName.replace('mipmap', 'drawable');\n      const dpiFolderPath = path.resolve(projectRoot, ANDROID_RES_PATH, drawableFolderName);\n      await fs.remove(path.resolve(dpiFolderPath, NOTIFICATION_ICON + '.png'));\n    })\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}