{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _metro() {\n  var data = _interopRequireDefault(require(\"metro\"));\n\n  _metro = function _metro() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _metroCore() {\n  var data = require(\"metro-core\");\n\n  _metroCore = function _metroCore() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliServerApi() {\n  var data = require(\"@react-native-community/cli-server-api\");\n\n  _cliServerApi = function _cliServerApi() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _loadMetroConfig = _interopRequireDefault(require(\"../../tools/loadMetroConfig\"));\n\nvar _releaseChecker = _interopRequireDefault(require(\"../../tools/releaseChecker\"));\n\nvar _watchMode = _interopRequireDefault(require(\"./watchMode\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction runServer(_argv, ctx, args) {\n  var reportEvent, terminal, ReporterImpl, terminalReporter, reporter, metroConfig, _ref, middleware, attachToServer, customEnhanceMiddleware, serverInstance, _attachToServer, messageSocket, eventsSocket;\n\n  return _regeneratorRuntime.async(function runServer$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          terminal = new (_metroCore().Terminal)(process.stdout);\n          ReporterImpl = getReporterImpl(args.customLogReporterPath);\n          terminalReporter = new ReporterImpl(terminal);\n          reporter = {\n            update: function update(event) {\n              terminalReporter.update(event);\n\n              if (reportEvent) {\n                reportEvent(event);\n              }\n            }\n          };\n          _context.next = 6;\n          return _regeneratorRuntime.awrap((0, _loadMetroConfig.default)(ctx, {\n            config: args.config,\n            maxWorkers: args.maxWorkers,\n            port: args.port,\n            resetCache: args.resetCache,\n            watchFolders: args.watchFolders,\n            projectRoot: args.projectRoot,\n            sourceExts: args.sourceExts,\n            reporter: reporter\n          }));\n\n        case 6:\n          metroConfig = _context.sent;\n\n          if (args.assetPlugins) {\n            metroConfig.transformer.assetPlugins = args.assetPlugins.map(function (plugin) {\n              return require.resolve(plugin);\n            });\n          }\n\n          _ref = (0, _cliServerApi().createDevServerMiddleware)({\n            host: args.host,\n            port: metroConfig.server.port,\n            watchFolders: metroConfig.watchFolders\n          }), middleware = _ref.middleware, attachToServer = _ref.attachToServer;\n          middleware.use(_cliServerApi().indexPageMiddleware);\n          customEnhanceMiddleware = metroConfig.server.enhanceMiddleware;\n\n          metroConfig.server.enhanceMiddleware = function (metroMiddleware, server) {\n            if (customEnhanceMiddleware) {\n              metroMiddleware = customEnhanceMiddleware(metroMiddleware, server);\n            }\n\n            return middleware.use(metroMiddleware);\n          };\n\n          _context.next = 14;\n          return _regeneratorRuntime.awrap(_metro().default.runServer(metroConfig, {\n            host: args.host,\n            secure: args.https,\n            secureCert: args.cert,\n            secureKey: args.key,\n            hmrEnabled: true\n          }));\n\n        case 14:\n          serverInstance = _context.sent;\n          _attachToServer = attachToServer(serverInstance), messageSocket = _attachToServer.messageSocket, eventsSocket = _attachToServer.eventsSocket;\n          reportEvent = eventsSocket.reportEvent;\n\n          if (args.interactive) {\n            (0, _watchMode.default)(messageSocket);\n          }\n\n          serverInstance.keepAliveTimeout = 30000;\n          _context.next = 21;\n          return _regeneratorRuntime.awrap((0, _releaseChecker.default)(ctx.root));\n\n        case 21:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getReporterImpl(customLogReporterPath) {\n  if (customLogReporterPath === undefined) {\n    return require('metro/src/lib/TerminalReporter');\n  }\n\n  try {\n    return require(customLogReporterPath);\n  } catch (e) {\n    if (e.code !== 'MODULE_NOT_FOUND') {\n      throw e;\n    }\n\n    return require(_path().default.resolve(customLogReporterPath));\n  }\n}\n\nvar _default = runServer;\nexports.default = _default;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli/build/commands/start/runServer.js"],"names":["Object","defineProperty","exports","value","default","_metro","data","_interopRequireDefault","require","_metroCore","_path","_cliServerApi","_loadMetroConfig","_releaseChecker","_watchMode","obj","__esModule","runServer","_argv","ctx","args","terminal","Terminal","process","stdout","ReporterImpl","getReporterImpl","customLogReporterPath","terminalReporter","reporter","update","event","reportEvent","config","maxWorkers","port","resetCache","watchFolders","projectRoot","sourceExts","metroConfig","assetPlugins","transformer","map","plugin","resolve","createDevServerMiddleware","host","server","middleware","attachToServer","use","indexPageMiddleware","customEnhanceMiddleware","enhanceMiddleware","metroMiddleware","secure","https","secureCert","cert","secureKey","key","hmrEnabled","serverInstance","messageSocket","eventsSocket","interactive","keepAliveTimeout","root","undefined","e","code","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _metro() {\n  const data = _interopRequireDefault(require(\"metro\"));\n\n  _metro = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _metroCore() {\n  const data = require(\"metro-core\");\n\n  _metroCore = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  const data = _interopRequireDefault(require(\"path\"));\n\n  _path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliServerApi() {\n  const data = require(\"@react-native-community/cli-server-api\");\n\n  _cliServerApi = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _loadMetroConfig = _interopRequireDefault(require(\"../../tools/loadMetroConfig\"));\n\nvar _releaseChecker = _interopRequireDefault(require(\"../../tools/releaseChecker\"));\n\nvar _watchMode = _interopRequireDefault(require(\"./watchMode\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// @ts-ignore untyped metro\n// @ts-ignore untyped metro\nasync function runServer(_argv, ctx, args) {\n  let reportEvent;\n  const terminal = new (_metroCore().Terminal)(process.stdout);\n  const ReporterImpl = getReporterImpl(args.customLogReporterPath);\n  const terminalReporter = new ReporterImpl(terminal);\n  const reporter = {\n    update(event) {\n      terminalReporter.update(event);\n\n      if (reportEvent) {\n        reportEvent(event);\n      }\n    }\n\n  };\n  const metroConfig = await (0, _loadMetroConfig.default)(ctx, {\n    config: args.config,\n    maxWorkers: args.maxWorkers,\n    port: args.port,\n    resetCache: args.resetCache,\n    watchFolders: args.watchFolders,\n    projectRoot: args.projectRoot,\n    sourceExts: args.sourceExts,\n    reporter\n  });\n\n  if (args.assetPlugins) {\n    metroConfig.transformer.assetPlugins = args.assetPlugins.map(plugin => require.resolve(plugin));\n  }\n\n  const {\n    middleware,\n    attachToServer\n  } = (0, _cliServerApi().createDevServerMiddleware)({\n    host: args.host,\n    port: metroConfig.server.port,\n    watchFolders: metroConfig.watchFolders\n  });\n  middleware.use(_cliServerApi().indexPageMiddleware);\n  const customEnhanceMiddleware = metroConfig.server.enhanceMiddleware;\n\n  metroConfig.server.enhanceMiddleware = (metroMiddleware, server) => {\n    if (customEnhanceMiddleware) {\n      metroMiddleware = customEnhanceMiddleware(metroMiddleware, server);\n    }\n\n    return middleware.use(metroMiddleware);\n  };\n\n  const serverInstance = await _metro().default.runServer(metroConfig, {\n    host: args.host,\n    secure: args.https,\n    secureCert: args.cert,\n    secureKey: args.key,\n    hmrEnabled: true\n  });\n  const {\n    messageSocket,\n    eventsSocket\n  } = attachToServer(serverInstance);\n  reportEvent = eventsSocket.reportEvent;\n\n  if (args.interactive) {\n    (0, _watchMode.default)(messageSocket);\n  } // In Node 8, the default keep-alive for an HTTP connection is 5 seconds. In\n  // early versions of Node 8, this was implemented in a buggy way which caused\n  // some HTTP responses (like those containing large JS bundles) to be\n  // terminated early.\n  //\n  // As a workaround, arbitrarily increase the keep-alive from 5 to 30 seconds,\n  // which should be enough to send even the largest of JS bundles.\n  //\n  // For more info: https://github.com/nodejs/node/issues/13391\n  //\n\n\n  serverInstance.keepAliveTimeout = 30000;\n  await (0, _releaseChecker.default)(ctx.root);\n}\n\nfunction getReporterImpl(customLogReporterPath) {\n  if (customLogReporterPath === undefined) {\n    return require('metro/src/lib/TerminalReporter');\n  }\n\n  try {\n    // First we let require resolve it, so we can require packages in node_modules\n    // as expected. eg: require('my-package/reporter');\n    return require(customLogReporterPath);\n  } catch (e) {\n    if (e.code !== 'MODULE_NOT_FOUND') {\n      throw e;\n    } // If that doesn't work, then we next try relative to the cwd, eg:\n    // require('./reporter');\n\n\n    return require(_path().default.resolve(customLogReporterPath));\n  }\n}\n\nvar _default = runServer;\nexports.default = _default;\n\n//# sourceMappingURL=runServer.js.map"]},"metadata":{},"sourceType":"script"}