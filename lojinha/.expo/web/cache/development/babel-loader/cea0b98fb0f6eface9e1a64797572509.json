{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { Property } from \"./Property\";\nimport { toCppNamespace, toCppType } from \"./Converters\";\nexport var Command = function () {\n  function Command(domain, obj, ignoreExperimental) {\n    _classCallCheck(this, Command);\n\n    this.domain = domain;\n    this.name = obj.name;\n    this.description = obj.description;\n    this.experimental = obj.experimental;\n    this.parameters = Property.createArray(domain, obj.parameters || [], ignoreExperimental);\n    this.returns = Property.createArray(domain, obj.returns || [], ignoreExperimental);\n  }\n\n  _createClass(Command, [{\n    key: \"getDebuggerName\",\n    value: function getDebuggerName() {\n      return this.domain + \".\" + this.name;\n    }\n  }, {\n    key: \"getCppNamespace\",\n    value: function getCppNamespace() {\n      return toCppNamespace(this.domain);\n    }\n  }, {\n    key: \"getRequestCppType\",\n    value: function getRequestCppType() {\n      return toCppType(this.name + 'Request');\n    }\n  }, {\n    key: \"getResponseCppType\",\n    value: function getResponseCppType() {\n      if (this.returns && this.returns.length > 0) {\n        return toCppType(this.name + 'Response');\n      }\n    }\n  }, {\n    key: \"getForwardDecls\",\n    value: function getForwardDecls() {\n      var decls = [\"struct \" + this.getRequestCppType() + \";\"];\n      var respCppType = this.getResponseCppType();\n\n      if (respCppType) {\n        decls.push(\"struct \" + respCppType + \";\");\n      }\n\n      return decls;\n    }\n  }, {\n    key: \"getForwardDeclSortKey\",\n    value: function getForwardDeclSortKey() {\n      return this.getRequestCppType();\n    }\n  }], [{\n    key: \"create\",\n    value: function create(domain, obj, ignoreExperimental) {\n      return ignoreExperimental && obj.experimental ? null : new Command(domain, obj, ignoreExperimental);\n    }\n  }]);\n\n  return Command;\n}();","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/ReactCommon/hermes/inspector/tools/msggen/src/Command.js"],"names":["Property","toCppNamespace","toCppType","Command","domain","obj","ignoreExperimental","name","description","experimental","parameters","createArray","returns","length","decls","getRequestCppType","respCppType","getResponseCppType","push"],"mappings":"AAUA;;;;AAEA,SAAQA,QAAR;AACA,SAAQC,cAAR,EAAwBC,SAAxB;AAEA,WAAaC,OAAb;AAkBE,mBAAYC,MAAZ,EAA4BC,GAA5B,EAAsCC,kBAAtC,EAAmE;AAAA;;AACjE,SAAKF,MAAL,GAAcA,MAAd;AACA,SAAKG,IAAL,GAAYF,GAAG,CAACE,IAAhB;AACA,SAAKC,WAAL,GAAmBH,GAAG,CAACG,WAAvB;AACA,SAAKC,YAAL,GAAoBJ,GAAG,CAACI,YAAxB;AACA,SAAKC,UAAL,GAAkBV,QAAQ,CAACW,WAAT,CAChBP,MADgB,EAEhBC,GAAG,CAACK,UAAJ,IAAkB,EAFF,EAGhBJ,kBAHgB,CAAlB;AAKA,SAAKM,OAAL,GAAeZ,QAAQ,CAACW,WAAT,CACbP,MADa,EAEbC,GAAG,CAACO,OAAJ,IAAe,EAFF,EAGbN,kBAHa,CAAf;AAKD;;AAjCH;AAAA;AAAA,WAmCE,2BAA0B;AACxB,aAAU,KAAKF,MAAf,SAAyB,KAAKG,IAA9B;AACD;AArCH;AAAA;AAAA,WAuCE,2BAA0B;AACxB,aAAON,cAAc,CAAC,KAAKG,MAAN,CAArB;AACD;AAzCH;AAAA;AAAA,WA2CE,6BAA4B;AAC1B,aAAOF,SAAS,CAAC,KAAKK,IAAL,GAAY,SAAb,CAAhB;AACD;AA7CH;AAAA;AAAA,WA+CE,8BAA8B;AAC5B,UAAI,KAAKK,OAAL,IAAgB,KAAKA,OAAL,CAAaC,MAAb,GAAsB,CAA1C,EAA6C;AAC3C,eAAOX,SAAS,CAAC,KAAKK,IAAL,GAAY,UAAb,CAAhB;AACD;AACF;AAnDH;AAAA;AAAA,WAqDE,2BAAiC;AAC/B,UAAMO,KAAK,GAAG,aAAW,KAAKC,iBAAL,EAAX,OAAd;AACA,UAAMC,WAAW,GAAG,KAAKC,kBAAL,EAApB;;AACA,UAAID,WAAJ,EAAiB;AACfF,QAAAA,KAAK,CAACI,IAAN,aAAqBF,WAArB;AACD;;AACD,aAAOF,KAAP;AACD;AA5DH;AAAA;AAAA,WA8DE,iCAAgC;AAC9B,aAAO,KAAKC,iBAAL,EAAP;AACD;AAhEH;AAAA;AAAA,WAQE,gBACEX,MADF,EAEEC,GAFF,EAGEC,kBAHF,EAIY;AACV,aAAOA,kBAAkB,IAAID,GAAG,CAACI,YAA1B,GACH,IADG,GAEH,IAAIN,OAAJ,CAAYC,MAAZ,EAAoBC,GAApB,EAAyBC,kBAAzB,CAFJ;AAGD;AAhBH;;AAAA;AAAA","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nimport {Property} from './Property';\nimport {toCppNamespace, toCppType} from './Converters';\n\nexport class Command {\n  domain: string;\n  name: string;\n  description: ?string;\n  experimental: ?boolean;\n  parameters: Array<Property>;\n  returns: Array<Property>;\n\n  static create(\n    domain: string,\n    obj: any,\n    ignoreExperimental: boolean,\n  ): ?Command {\n    return ignoreExperimental && obj.experimental\n      ? null\n      : new Command(domain, obj, ignoreExperimental);\n  }\n\n  constructor(domain: string, obj: any, ignoreExperimental: boolean) {\n    this.domain = domain;\n    this.name = obj.name;\n    this.description = obj.description;\n    this.experimental = obj.experimental;\n    this.parameters = Property.createArray(\n      domain,\n      obj.parameters || [],\n      ignoreExperimental,\n    );\n    this.returns = Property.createArray(\n      domain,\n      obj.returns || [],\n      ignoreExperimental,\n    );\n  }\n\n  getDebuggerName(): string {\n    return `${this.domain}.${this.name}`;\n  }\n\n  getCppNamespace(): string {\n    return toCppNamespace(this.domain);\n  }\n\n  getRequestCppType(): string {\n    return toCppType(this.name + 'Request');\n  }\n\n  getResponseCppType(): ?string {\n    if (this.returns && this.returns.length > 0) {\n      return toCppType(this.name + 'Response');\n    }\n  }\n\n  getForwardDecls(): Array<string> {\n    const decls = [`struct ${this.getRequestCppType()};`];\n    const respCppType = this.getResponseCppType();\n    if (respCppType) {\n      decls.push(`struct ${respCppType};`);\n    }\n    return decls;\n  }\n\n  getForwardDeclSortKey(): string {\n    return this.getRequestCppType();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}