{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar xml2js_1 = require(\"xml2js\");\n\nvar android_plugins_1 = require(\"../plugins/android-plugins\");\n\nvar Manifest_1 = require(\"./Manifest\");\n\nexports.withAndroidIntentFilters = android_plugins_1.createAndroidManifestPlugin(setAndroidIntentFilters, 'withAndroidIntentFilters');\n\nfunction getIntentFilters(config) {\n  var _a, _b;\n\n  return (_b = (_a = config.android) === null || _a === void 0 ? void 0 : _a.intentFilters) !== null && _b !== void 0 ? _b : [];\n}\n\nexports.getIntentFilters = getIntentFilters;\n\nfunction setAndroidIntentFilters(config, androidManifest) {\n  var _a, intentFilters, intentFiltersXML, parser, intentFiltersJSON, mainActivity;\n\n  return _regeneratorRuntime.async(function setAndroidIntentFilters$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          intentFilters = getIntentFilters(config);\n\n          if (intentFilters.length) {\n            _context.next = 3;\n            break;\n          }\n\n          return _context.abrupt(\"return\", androidManifest);\n\n        case 3:\n          intentFiltersXML = renderIntentFilters(intentFilters).join('');\n          parser = new xml2js_1.Parser();\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(parser.parseStringPromise(intentFiltersXML));\n\n        case 7:\n          intentFiltersJSON = _context.sent;\n          mainActivity = Manifest_1.getMainActivityOrThrow(androidManifest);\n          mainActivity['intent-filter'] = (_a = mainActivity['intent-filter']) === null || _a === void 0 ? void 0 : _a.concat(intentFiltersJSON['intent-filter']);\n          return _context.abrupt(\"return\", androidManifest);\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.setAndroidIntentFilters = setAndroidIntentFilters;\n\nfunction renderIntentFilters(intentFilters) {\n  return intentFilters.map(function (intentFilter) {\n    var autoVerify = intentFilter.autoVerify ? ' android:autoVerify=\"true\"' : '';\n    return \"<intent-filter\" + autoVerify + \">\\n      \" + renderIntentFilterData(intentFilter.data) + \"\\n      <action android:name=\\\"android.intent.action.\" + intentFilter.action + \"\\\"/>\\n      \" + renderIntentFilterCategory(intentFilter.category) + \"\\n    </intent-filter>\";\n  });\n}\n\nexports.default = renderIntentFilters;\n\nfunction renderIntentFilterDatumEntries() {\n  var datum = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var entries = [];\n\n  for (var _i = 0, _Object$entries = Object.entries(datum); _i < _Object$entries.length; _i++) {\n    var _ref = _Object$entries[_i];\n\n    var _ref2 = _slicedToArray(_ref, 2);\n\n    var key = _ref2[0];\n    var value = _ref2[1];\n    entries.push(\"android:\" + key + \"=\\\"\" + value + \"\\\"\");\n  }\n\n  return entries.join(' ');\n}\n\nfunction renderIntentFilterData(data) {\n  return (Array.isArray(data) ? data : [data]).filter(Boolean).map(function (datum) {\n    return \"<data \" + renderIntentFilterDatumEntries(datum) + \"/>\";\n  }).join('\\n');\n}\n\nfunction renderIntentFilterCategory(category) {\n  return (Array.isArray(category) ? category : [category]).filter(Boolean).map(function (cat) {\n    return \"<category android:name=\\\"android.intent.category.\" + cat + \"\\\"/>\";\n  }).join('\\n');\n}","map":{"version":3,"sources":["../../src/android/IntentFilters.ts"],"names":[],"mappings":"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","sourcesContent":["import { Android, AndroidIntentFiltersData, ExpoConfig } from '@expo/config-types';\nimport { Parser } from 'xml2js';\n\nimport { createAndroidManifestPlugin } from '../plugins/android-plugins';\nimport { AndroidManifest, getMainActivityOrThrow } from './Manifest';\n\ntype AndroidIntentFilters = NonNullable<Android['intentFilters']>;\n// TODO: make it so intent filters aren't written again if you run the command again\n\nexport const withAndroidIntentFilters = createAndroidManifestPlugin(\n  setAndroidIntentFilters,\n  'withAndroidIntentFilters'\n);\n\nexport function getIntentFilters(config: Pick<ExpoConfig, 'android'>): AndroidIntentFilters {\n  return config.android?.intentFilters ?? [];\n}\n\nexport async function setAndroidIntentFilters(\n  config: Pick<ExpoConfig, 'android'>,\n  androidManifest: AndroidManifest\n): Promise<AndroidManifest> {\n  const intentFilters = getIntentFilters(config);\n  if (!intentFilters.length) {\n    return androidManifest;\n  }\n\n  const intentFiltersXML = renderIntentFilters(intentFilters).join('');\n  const parser = new Parser();\n  const intentFiltersJSON = await parser.parseStringPromise(intentFiltersXML);\n\n  const mainActivity = getMainActivityOrThrow(androidManifest);\n\n  mainActivity['intent-filter'] = mainActivity['intent-filter']?.concat(\n    intentFiltersJSON['intent-filter']\n  );\n\n  return androidManifest;\n}\n\nexport default function renderIntentFilters(intentFilters: AndroidIntentFilters): string[] {\n  // returns an array of <intent-filter> tags:\n  // [\n  //   `<intent-filter>\n  //     <data android:scheme=\"exp\"/>\n  //     <data android:scheme=\"exps\"/>\n  //\n  //     <action android:name=\"android.intent.action.VIEW\"/>\n  //\n  //     <category android:name=\"android.intent.category.DEFAULT\"/>\n  //     <category android:name=\"android.intent.category.BROWSABLE\"/>\n  //   </intent-filter>`,\n  //   ...\n  // ]\n  return intentFilters.map(intentFilter => {\n    const autoVerify = intentFilter.autoVerify ? ' android:autoVerify=\"true\"' : '';\n\n    return `<intent-filter${autoVerify}>\n      ${renderIntentFilterData(intentFilter.data)}\n      <action android:name=\"android.intent.action.${intentFilter.action}\"/>\n      ${renderIntentFilterCategory(intentFilter.category)}\n    </intent-filter>`;\n  });\n}\n\nfunction renderIntentFilterDatumEntries(datum: AndroidIntentFiltersData = {}): string {\n  const entries: string[] = [];\n  for (const [key, value] of Object.entries(datum)) {\n    entries.push(`android:${key}=\"${value}\"`);\n  }\n  return entries.join(' ');\n}\n\nfunction renderIntentFilterData(\n  data?: AndroidIntentFiltersData | AndroidIntentFiltersData[]\n): string {\n  return (Array.isArray(data) ? data : [data])\n    .filter(Boolean)\n    .map(datum => `<data ${renderIntentFilterDatumEntries(datum)}/>`)\n    .join('\\n');\n}\n\nfunction renderIntentFilterCategory(category?: string | string[]): string {\n  return (Array.isArray(category) ? category : [category])\n    .filter(Boolean)\n    .map(cat => `<category android:name=\"android.intent.category.${cat}\"/>`)\n    .join('\\n');\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}