{"ast":null,"code":"'use strict';\n\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Components/Picker/PickerAndroid.android.js\";\nimport AndroidDropdownPickerNativeComponent, { Commands as AndroidDropdownPickerCommands } from \"./AndroidDropdownPickerNativeComponent\";\nimport AndroidDialogPickerNativeComponent, { Commands as AndroidDialogPickerCommands } from \"./AndroidDialogPickerNativeComponent\";\nimport * as React from 'react';\nimport StyleSheet from \"../../StyleSheet/StyleSheet\";\nimport invariant from 'invariant';\nimport processColor from \"../../StyleSheet/processColor\";\n\nfunction PickerAndroid(props) {\n  var pickerRef = React.useRef(null);\n\n  var _React$useMemo = React.useMemo(function () {\n    var selected = 0;\n    var items = React.Children.map(props.children, function (child, index) {\n      if (child === null) {\n        return null;\n      }\n\n      if (child.props.value === props.selectedValue) {\n        selected = index;\n      }\n\n      var _child$props = child.props,\n          color = _child$props.color,\n          label = _child$props.label;\n      var processedColor = processColor(color);\n      invariant(processedColor == null || typeof processedColor === 'number', 'Unexpected color given for PickerAndroid color prop');\n      return {\n        color: color == null ? null : processedColor,\n        label: label\n      };\n    });\n    return [items, selected];\n  }, [props.children, props.selectedValue]),\n      _React$useMemo2 = _slicedToArray(_React$useMemo, 2),\n      items = _React$useMemo2[0],\n      selected = _React$useMemo2[1];\n\n  var onSelect = React.useCallback(function (_ref) {\n    var nativeEvent = _ref.nativeEvent;\n    var position = nativeEvent.position;\n    var onValueChange = props.onValueChange;\n\n    if (onValueChange != null) {\n      if (position >= 0) {\n        var children = React.Children.toArray(props.children).filter(function (item) {\n          return item != null;\n        });\n        var value = children[position].props.value;\n\n        if (props.selectedValue !== value) {\n          onValueChange(value, position);\n        }\n      } else {\n        onValueChange(null, position);\n      }\n    }\n\n    var current = pickerRef.current;\n\n    if (current != null && position !== selected) {\n      var Commands = props.mode === 'dropdown' ? AndroidDropdownPickerCommands : AndroidDialogPickerCommands;\n      Commands.setNativeSelectedPosition(current, selected);\n    }\n  }, [props.children, props.onValueChange, props.selectedValue, props.mode, selected]);\n  var rootProps = {\n    accessibilityLabel: props.accessibilityLabel,\n    enabled: props.enabled,\n    items: items,\n    onSelect: onSelect,\n    prompt: props.prompt,\n    ref: pickerRef,\n    selected: selected,\n    style: StyleSheet.compose(styles.pickerAndroid, props.style),\n    backgroundColor: props.backgroundColor,\n    testID: props.testID\n  };\n  return props.mode === 'dropdown' ? React.createElement(AndroidDropdownPickerNativeComponent, _extends({}, rootProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 5\n    }\n  })) : React.createElement(AndroidDialogPickerNativeComponent, _extends({}, rootProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 5\n    }\n  }));\n}\n\nvar styles = StyleSheet.create({\n  pickerAndroid: {\n    height: 50\n  }\n});\nmodule.exports = PickerAndroid;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Components/Picker/PickerAndroid.android.js"],"names":["AndroidDropdownPickerNativeComponent","Commands","AndroidDropdownPickerCommands","AndroidDialogPickerNativeComponent","AndroidDialogPickerCommands","React","StyleSheet","invariant","processColor","PickerAndroid","props","pickerRef","useRef","useMemo","selected","items","Children","map","children","child","index","value","selectedValue","color","label","processedColor","onSelect","useCallback","nativeEvent","position","onValueChange","toArray","filter","item","current","mode","setNativeSelectedPosition","rootProps","accessibilityLabel","enabled","prompt","ref","style","compose","styles","pickerAndroid","backgroundColor","testID","create","height","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nimport AndroidDropdownPickerNativeComponent, {\n  Commands as AndroidDropdownPickerCommands,\n} from './AndroidDropdownPickerNativeComponent';\nimport AndroidDialogPickerNativeComponent, {\n  Commands as AndroidDialogPickerCommands,\n} from './AndroidDialogPickerNativeComponent';\nimport * as React from 'react';\nimport StyleSheet from '../../StyleSheet/StyleSheet';\nimport invariant from 'invariant';\nimport processColor from '../../StyleSheet/processColor';\n\nimport type {ColorValue} from '../../StyleSheet/StyleSheetTypes';\nimport type {SyntheticEvent} from '../../Types/CoreEventTypes';\nimport type {TextStyleProp} from '../../StyleSheet/StyleSheet';\n\ntype PickerItemSelectSyntheticEvent = SyntheticEvent<\n  $ReadOnly<{|\n    position: number,\n  |}>,\n>;\n\ntype PickerItemValue = number | string;\n\ntype Props = $ReadOnly<{|\n  accessibilityLabel?: ?Stringish,\n  children?: React.Node,\n  style?: ?TextStyleProp,\n  backgroundColor?: ?ColorValue,\n  selectedValue?: ?PickerItemValue,\n  enabled?: ?boolean,\n  mode?: ?('dialog' | 'dropdown'),\n  onValueChange?: ?(itemValue: ?PickerItemValue, itemIndex: number) => mixed,\n  prompt?: ?string,\n  testID?: string,\n|}>;\n\n/**\n * Not exposed as a public API - use <Picker> instead.\n */\nfunction PickerAndroid(props: Props): React.Node {\n  const pickerRef = React.useRef(null);\n\n  const [items, selected] = React.useMemo(() => {\n    // eslint-disable-next-line no-shadow\n    let selected = 0;\n    // eslint-disable-next-line no-shadow\n    const items = React.Children.map(props.children, (child, index) => {\n      if (child === null) {\n        return null;\n      }\n      if (child.props.value === props.selectedValue) {\n        selected = index;\n      }\n      const {color, label} = child.props;\n      const processedColor = processColor(color);\n      invariant(\n        processedColor == null || typeof processedColor === 'number',\n        'Unexpected color given for PickerAndroid color prop',\n      );\n      return {\n        color: color == null ? null : processedColor,\n        label,\n      };\n    });\n    return [items, selected];\n  }, [props.children, props.selectedValue]);\n\n  const onSelect = React.useCallback(\n    ({nativeEvent}: PickerItemSelectSyntheticEvent) => {\n      const {position} = nativeEvent;\n      const onValueChange = props.onValueChange;\n\n      if (onValueChange != null) {\n        if (position >= 0) {\n          const children = React.Children.toArray(props.children).filter(\n            item => item != null,\n          );\n          const value = children[position].props.value;\n          if (props.selectedValue !== value) {\n            onValueChange(value, position);\n          }\n        } else {\n          onValueChange(null, position);\n        }\n      }\n      const {current} = pickerRef;\n      if (current != null && position !== selected) {\n        const Commands =\n          props.mode === 'dropdown'\n            ? AndroidDropdownPickerCommands\n            : AndroidDialogPickerCommands;\n        Commands.setNativeSelectedPosition(current, selected);\n      }\n    },\n    [\n      props.children,\n      props.onValueChange,\n      props.selectedValue,\n      props.mode,\n      selected,\n    ],\n  );\n\n  const rootProps = {\n    accessibilityLabel: props.accessibilityLabel,\n    enabled: props.enabled,\n    items,\n    onSelect,\n    prompt: props.prompt,\n    ref: pickerRef,\n    selected,\n    style: StyleSheet.compose(\n      styles.pickerAndroid,\n      props.style,\n    ),\n    backgroundColor: props.backgroundColor,\n    testID: props.testID,\n  };\n  return props.mode === 'dropdown' ? (\n    <AndroidDropdownPickerNativeComponent {...rootProps} />\n  ) : (\n    <AndroidDialogPickerNativeComponent {...rootProps} />\n  );\n}\n\nconst styles = StyleSheet.create({\n  pickerAndroid: {\n    // The picker will conform to whatever width is given, but we do\n    // have to set the component's height explicitly on the\n    // surrounding view to ensure it gets rendered.\n    // TODO would be better to export a native constant for this,\n    // like in iOS the RCTDatePickerManager.m\n    height: 50,\n  },\n});\n\nmodule.exports = PickerAndroid;\n"]},"metadata":{},"sourceType":"module"}