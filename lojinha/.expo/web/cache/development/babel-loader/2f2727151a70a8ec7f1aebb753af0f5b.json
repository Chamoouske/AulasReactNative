{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nvar _require = require(\"./JavaHelpers\"),\n    getImports = _require.getImports,\n    toSafeJavaString = _require.toSafeJavaString,\n    getInterfaceJavaClassName = _require.getInterfaceJavaClassName,\n    getDelegateJavaClassName = _require.getDelegateJavaClassName;\n\nvar template = \"/**\\n* Copyright (c) Facebook, Inc. and its affiliates.\\n*\\n* This source code is licensed under the MIT license found in the\\n* LICENSE file in the root directory of this source tree.\\n*\\n* \" + '@' + \"generated by codegen project: GeneratePropsJavaDelegate.js\\n*/\\n\\npackage com.facebook.react.viewmanagers;\\n\\n::_IMPORTS_::\\n\\npublic class ::_CLASSNAME_::<T extends ::_EXTEND_CLASSES_::, U extends BaseViewManagerInterface<T> & ::_INTERFACE_CLASSNAME_::<T>> extends BaseViewManagerDelegate<T, U> {\\n  public ::_CLASSNAME_::(U viewManager) {\\n    super(viewManager);\\n  }\\n  ::_METHODS_::\\n}\\n\";\nvar propSetterTemplate = \"\\n  @Override\\n  public void setProperty(T view, String propName, @Nullable Object value) {\\n    ::_PROP_CASES_::\\n  }\\n\";\nvar commandsTemplate = \"\\n  public void receiveCommand(::_INTERFACE_CLASSNAME_::<T> viewManager, T view, String commandName, ReadableArray args) {\\n    switch (commandName) {\\n      ::_COMMAND_CASES_::\\n    }\\n  }\\n\";\n\nfunction getJavaValueForProp(prop, componentName) {\n  var typeAnnotation = prop.typeAnnotation;\n\n  switch (typeAnnotation.type) {\n    case 'BooleanTypeAnnotation':\n      if (typeAnnotation.default === null) {\n        return 'value == null ? null : (Boolean) value';\n      } else {\n        return \"value == null ? \" + typeAnnotation.default.toString() + \" : (boolean) value\";\n      }\n\n    case 'StringTypeAnnotation':\n      var defaultValueString = typeAnnotation.default === null ? 'null' : \"\\\"\" + typeAnnotation.default + \"\\\"\";\n      return \"value == null ? \" + defaultValueString + \" : (String) value\";\n\n    case 'Int32TypeAnnotation':\n      return \"value == null ? \" + typeAnnotation.default + \" : ((Double) value).intValue()\";\n\n    case 'DoubleTypeAnnotation':\n      if (prop.optional) {\n        return \"value == null ? \" + typeAnnotation.default + \"f : ((Double) value).doubleValue()\";\n      } else {\n        return 'value == null ? Double.NaN : ((Double) value).doubleValue()';\n      }\n\n    case 'FloatTypeAnnotation':\n      if (typeAnnotation.default === null) {\n        return 'value == null ? null : ((Double) value).floatValue()';\n      } else if (prop.optional) {\n        return \"value == null ? \" + typeAnnotation.default + \"f : ((Double) value).floatValue()\";\n      } else {\n        return 'value == null ? Float.NaN : ((Double) value).floatValue()';\n      }\n\n    case 'NativePrimitiveTypeAnnotation':\n      switch (typeAnnotation.name) {\n        case 'ColorPrimitive':\n          return 'ColorPropConverter.getColor(value, view.getContext())';\n\n        case 'ImageSourcePrimitive':\n          return '(ReadableMap) value';\n\n        case 'PointPrimitive':\n          return '(ReadableMap) value';\n\n        case 'EdgeInsetsPrimitive':\n          return '(ReadableMap) value';\n\n        default:\n          typeAnnotation.name;\n          throw new Error('Received unknown NativePrimitiveTypeAnnotation');\n      }\n\n    case 'ArrayTypeAnnotation':\n      {\n        return '(ReadableArray) value';\n      }\n\n    case 'ObjectTypeAnnotation':\n      {\n        return '(ReadableMap) value';\n      }\n\n    case 'StringEnumTypeAnnotation':\n      return '(String) value';\n\n    case 'Int32EnumTypeAnnotation':\n      return \"value == null ? \" + typeAnnotation.default + \" : ((Double) value).intValue()\";\n\n    default:\n      typeAnnotation;\n      throw new Error('Received invalid typeAnnotation');\n  }\n}\n\nfunction generatePropCasesString(component, componentName) {\n  if (component.props.length === 0) {\n    return 'super.setProperty(view, propName, value);';\n  }\n\n  var cases = component.props.map(function (prop) {\n    return \"case \\\"\" + prop.name + \"\\\":\\n        mViewManager.set\" + toSafeJavaString(prop.name) + \"(view, \" + getJavaValueForProp(prop, componentName) + \");\\n        break;\";\n  }).join('\\n' + '      ');\n  return \"switch (propName) {\\n      \" + cases + \"\\n      default:\\n        super.setProperty(view, propName, value);\\n    }\";\n}\n\nfunction getCommandArgJavaType(param, index) {\n  switch (param.typeAnnotation.type) {\n    case 'BooleanTypeAnnotation':\n      return \"args.getBoolean(\" + index + \")\";\n\n    case 'DoubleTypeAnnotation':\n      return \"args.getDouble(\" + index + \")\";\n\n    case 'FloatTypeAnnotation':\n      return \"(float) args.getDouble(\" + index + \")\";\n\n    case 'Int32TypeAnnotation':\n      return \"args.getInt(\" + index + \")\";\n\n    case 'StringTypeAnnotation':\n      return \"args.getString(\" + index + \")\";\n\n    default:\n      param.typeAnnotation.type;\n      throw new Error('Receieved invalid typeAnnotation');\n  }\n}\n\nfunction getCommandArguments(command) {\n  return ['view'].concat(_toConsumableArray(command.typeAnnotation.params.map(getCommandArgJavaType))).join(', ');\n}\n\nfunction generateCommandCasesString(component, componentName) {\n  if (component.commands.length === 0) {\n    return null;\n  }\n\n  var commandMethods = component.commands.map(function (command) {\n    return \"case \\\"\" + command.name + \"\\\":\\n        viewManager.\" + toSafeJavaString(command.name, false) + \"(\" + getCommandArguments(command) + \");\\n        break;\";\n  }).join('\\n' + '      ');\n  return commandMethods;\n}\n\nfunction getClassExtendString(component) {\n  var extendString = component.extendsProps.map(function (extendProps) {\n    switch (extendProps.type) {\n      case 'ReactNativeBuiltInType':\n        switch (extendProps.knownTypeName) {\n          case 'ReactNativeCoreViewProps':\n            return 'View';\n\n          default:\n            extendProps.knownTypeName;\n            throw new Error('Invalid knownTypeName');\n        }\n\n      default:\n        extendProps.type;\n        throw new Error('Invalid extended type');\n    }\n  }).join('');\n  return extendString;\n}\n\nfunction getDelegateImports(component) {\n  var imports = getImports(component, 'delegate');\n\n  if (component.commands.length > 0) {\n    imports.add('import com.facebook.react.bridge.ReadableArray;');\n  }\n\n  imports.add('import androidx.annotation.Nullable;');\n  imports.add('import com.facebook.react.uimanager.BaseViewManagerDelegate;');\n  imports.add('import com.facebook.react.uimanager.BaseViewManagerInterface;');\n  imports.add('import com.facebook.react.uimanager.LayoutShadowNode;');\n  return imports;\n}\n\nfunction generateMethods(propsString, commandsString) {\n  return [propSetterTemplate.trim().replace('::_PROP_CASES_::', propsString), commandsString != null ? commandsTemplate.trim().replace('::_COMMAND_CASES_::', commandsString) : ''].join('\\n\\n  ').trimRight();\n}\n\nmodule.exports = {\n  generate: function generate(libraryName, schema, moduleSpecName) {\n    var files = new Map();\n    Object.keys(schema.modules).forEach(function (moduleName) {\n      var components = schema.modules[moduleName].components;\n\n      if (components == null) {\n        return;\n      }\n\n      return Object.keys(components).filter(function (componentName) {\n        var component = components[componentName];\n        return component.excludedPlatform !== 'android';\n      }).forEach(function (componentName) {\n        var component = components[componentName];\n        var className = getDelegateJavaClassName(componentName);\n        var interfaceClassName = getInterfaceJavaClassName(componentName);\n        var fileName = className + \".java\";\n        var imports = getDelegateImports(component);\n        var propsString = generatePropCasesString(component, componentName);\n        var commandsString = generateCommandCasesString(component, componentName);\n        var extendString = getClassExtendString(component);\n        var replacedTemplate = template.replace(/::_IMPORTS_::/g, Array.from(imports).sort().join('\\n')).replace(/::_CLASSNAME_::/g, className).replace('::_EXTEND_CLASSES_::', extendString).replace('::_PROP_CASES_::', propsString).replace('::_METHODS_::', generateMethods(propsString, commandsString)).replace(/::_INTERFACE_CLASSNAME_::/g, interfaceClassName);\n        files.set(fileName, replacedTemplate);\n      });\n    });\n    return files;\n  }\n};","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/packages/react-native-codegen/src/generators/components/GeneratePropsJavaDelegate.js"],"names":["require","getImports","toSafeJavaString","getInterfaceJavaClassName","getDelegateJavaClassName","template","propSetterTemplate","commandsTemplate","getJavaValueForProp","prop","componentName","typeAnnotation","type","default","toString","defaultValueString","optional","name","Error","generatePropCasesString","component","props","length","cases","map","join","getCommandArgJavaType","param","index","getCommandArguments","command","params","generateCommandCasesString","commands","commandMethods","getClassExtendString","extendString","extendsProps","extendProps","knownTypeName","getDelegateImports","imports","add","generateMethods","propsString","commandsString","trim","replace","trimRight","module","exports","generate","libraryName","schema","moduleSpecName","files","Map","Object","keys","modules","forEach","moduleName","components","filter","excludedPlatform","className","interfaceClassName","fileName","replacedTemplate","Array","from","sort","set"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\n'use strict';\n\nimport type {\n  CommandTypeShape,\n  ComponentShape,\n  PropTypeShape,\n  SchemaType,\n} from '../../CodegenSchema';\nconst {\n  getImports,\n  toSafeJavaString,\n  getInterfaceJavaClassName,\n  getDelegateJavaClassName,\n} = require('./JavaHelpers');\n\n// File path -> contents\ntype FilesOutput = Map<string, string>;\n\nconst template = `/**\n* Copyright (c) Facebook, Inc. and its affiliates.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*\n* ${'@'}generated by codegen project: GeneratePropsJavaDelegate.js\n*/\n\npackage com.facebook.react.viewmanagers;\n\n::_IMPORTS_::\n\npublic class ::_CLASSNAME_::<T extends ::_EXTEND_CLASSES_::, U extends BaseViewManagerInterface<T> & ::_INTERFACE_CLASSNAME_::<T>> extends BaseViewManagerDelegate<T, U> {\n  public ::_CLASSNAME_::(U viewManager) {\n    super(viewManager);\n  }\n  ::_METHODS_::\n}\n`;\n\nconst propSetterTemplate = `\n  @Override\n  public void setProperty(T view, String propName, @Nullable Object value) {\n    ::_PROP_CASES_::\n  }\n`;\n\nconst commandsTemplate = `\n  public void receiveCommand(::_INTERFACE_CLASSNAME_::<T> viewManager, T view, String commandName, ReadableArray args) {\n    switch (commandName) {\n      ::_COMMAND_CASES_::\n    }\n  }\n`;\n\nfunction getJavaValueForProp(\n  prop: PropTypeShape,\n  componentName: string,\n): string {\n  const typeAnnotation = prop.typeAnnotation;\n\n  switch (typeAnnotation.type) {\n    case 'BooleanTypeAnnotation':\n      if (typeAnnotation.default === null) {\n        return 'value == null ? null : (Boolean) value';\n      } else {\n        return `value == null ? ${typeAnnotation.default.toString()} : (boolean) value`;\n      }\n    case 'StringTypeAnnotation':\n      const defaultValueString =\n        typeAnnotation.default === null\n          ? 'null'\n          : `\"${typeAnnotation.default}\"`;\n      return `value == null ? ${defaultValueString} : (String) value`;\n    case 'Int32TypeAnnotation':\n      return `value == null ? ${\n        typeAnnotation.default\n      } : ((Double) value).intValue()`;\n    case 'DoubleTypeAnnotation':\n      if (prop.optional) {\n        return `value == null ? ${\n          typeAnnotation.default\n        }f : ((Double) value).doubleValue()`;\n      } else {\n        return 'value == null ? Double.NaN : ((Double) value).doubleValue()';\n      }\n    case 'FloatTypeAnnotation':\n      if (typeAnnotation.default === null) {\n        return 'value == null ? null : ((Double) value).floatValue()';\n      } else if (prop.optional) {\n        return `value == null ? ${\n          typeAnnotation.default\n        }f : ((Double) value).floatValue()`;\n      } else {\n        return 'value == null ? Float.NaN : ((Double) value).floatValue()';\n      }\n    case 'NativePrimitiveTypeAnnotation':\n      switch (typeAnnotation.name) {\n        case 'ColorPrimitive':\n          return 'ColorPropConverter.getColor(value, view.getContext())';\n        case 'ImageSourcePrimitive':\n          return '(ReadableMap) value';\n        case 'PointPrimitive':\n          return '(ReadableMap) value';\n        case 'EdgeInsetsPrimitive':\n          return '(ReadableMap) value';\n        default:\n          (typeAnnotation.name: empty);\n          throw new Error('Received unknown NativePrimitiveTypeAnnotation');\n      }\n    case 'ArrayTypeAnnotation': {\n      return '(ReadableArray) value';\n    }\n    case 'ObjectTypeAnnotation': {\n      return '(ReadableMap) value';\n    }\n    case 'StringEnumTypeAnnotation':\n      return '(String) value';\n    case 'Int32EnumTypeAnnotation':\n      return `value == null ? ${\n        typeAnnotation.default\n      } : ((Double) value).intValue()`;\n    default:\n      (typeAnnotation: empty);\n      throw new Error('Received invalid typeAnnotation');\n  }\n}\n\nfunction generatePropCasesString(\n  component: ComponentShape,\n  componentName: string,\n) {\n  if (component.props.length === 0) {\n    return 'super.setProperty(view, propName, value);';\n  }\n\n  const cases = component.props\n    .map(prop => {\n      return `case \"${prop.name}\":\n        mViewManager.set${toSafeJavaString(\n          prop.name,\n        )}(view, ${getJavaValueForProp(prop, componentName)});\n        break;`;\n    })\n    .join('\\n' + '      ');\n\n  return `switch (propName) {\n      ${cases}\n      default:\n        super.setProperty(view, propName, value);\n    }`;\n}\n\nfunction getCommandArgJavaType(param, index) {\n  switch (param.typeAnnotation.type) {\n    case 'BooleanTypeAnnotation':\n      return `args.getBoolean(${index})`;\n    case 'DoubleTypeAnnotation':\n      return `args.getDouble(${index})`;\n    case 'FloatTypeAnnotation':\n      return `(float) args.getDouble(${index})`;\n    case 'Int32TypeAnnotation':\n      return `args.getInt(${index})`;\n    case 'StringTypeAnnotation':\n      return `args.getString(${index})`;\n    default:\n      (param.typeAnnotation.type: empty);\n      throw new Error('Receieved invalid typeAnnotation');\n  }\n}\n\nfunction getCommandArguments(command: CommandTypeShape): string {\n  return [\n    'view',\n    ...command.typeAnnotation.params.map(getCommandArgJavaType),\n  ].join(', ');\n}\n\nfunction generateCommandCasesString(\n  component: ComponentShape,\n  componentName: string,\n) {\n  if (component.commands.length === 0) {\n    return null;\n  }\n\n  const commandMethods = component.commands\n    .map(command => {\n      return `case \"${command.name}\":\n        viewManager.${toSafeJavaString(\n          command.name,\n          false,\n        )}(${getCommandArguments(command)});\n        break;`;\n    })\n    .join('\\n' + '      ');\n\n  return commandMethods;\n}\n\nfunction getClassExtendString(component): string {\n  const extendString = component.extendsProps\n    .map(extendProps => {\n      switch (extendProps.type) {\n        case 'ReactNativeBuiltInType':\n          switch (extendProps.knownTypeName) {\n            case 'ReactNativeCoreViewProps':\n              return 'View';\n            default:\n              (extendProps.knownTypeName: empty);\n              throw new Error('Invalid knownTypeName');\n          }\n        default:\n          (extendProps.type: empty);\n          throw new Error('Invalid extended type');\n      }\n    })\n    .join('');\n\n  return extendString;\n}\n\nfunction getDelegateImports(component) {\n  const imports = getImports(component, 'delegate');\n  // The delegate needs ReadableArray for commands always.\n  // The interface doesn't always need it\n  if (component.commands.length > 0) {\n    imports.add('import com.facebook.react.bridge.ReadableArray;');\n  }\n  imports.add('import androidx.annotation.Nullable;');\n  imports.add('import com.facebook.react.uimanager.BaseViewManagerDelegate;');\n  imports.add('import com.facebook.react.uimanager.BaseViewManagerInterface;');\n  imports.add('import com.facebook.react.uimanager.LayoutShadowNode;');\n\n  return imports;\n}\n\nfunction generateMethods(propsString, commandsString): string {\n  return [\n    propSetterTemplate.trim().replace('::_PROP_CASES_::', propsString),\n    commandsString != null\n      ? commandsTemplate.trim().replace('::_COMMAND_CASES_::', commandsString)\n      : '',\n  ]\n    .join('\\n\\n  ')\n    .trimRight();\n}\n\nmodule.exports = {\n  generate(\n    libraryName: string,\n    schema: SchemaType,\n    moduleSpecName: string,\n  ): FilesOutput {\n    const files = new Map();\n    Object.keys(schema.modules).forEach(moduleName => {\n      const components = schema.modules[moduleName].components;\n      // No components in this module\n      if (components == null) {\n        return;\n      }\n\n      return Object.keys(components)\n        .filter(componentName => {\n          const component = components[componentName];\n          return component.excludedPlatform !== 'android';\n        })\n        .forEach(componentName => {\n          const component = components[componentName];\n          const className = getDelegateJavaClassName(componentName);\n          const interfaceClassName = getInterfaceJavaClassName(componentName);\n          const fileName = `${className}.java`;\n\n          const imports = getDelegateImports(component);\n          const propsString = generatePropCasesString(component, componentName);\n          const commandsString = generateCommandCasesString(\n            component,\n            componentName,\n          );\n          const extendString = getClassExtendString(component);\n\n          const replacedTemplate = template\n            .replace(\n              /::_IMPORTS_::/g,\n              Array.from(imports)\n                .sort()\n                .join('\\n'),\n            )\n            .replace(/::_CLASSNAME_::/g, className)\n            .replace('::_EXTEND_CLASSES_::', extendString)\n            .replace('::_PROP_CASES_::', propsString)\n            .replace(\n              '::_METHODS_::',\n              generateMethods(propsString, commandsString),\n            )\n            .replace(/::_INTERFACE_CLASSNAME_::/g, interfaceClassName);\n\n          files.set(fileName, replacedTemplate);\n        });\n    });\n\n    return files;\n  },\n};\n"]},"metadata":{},"sourceType":"script"}