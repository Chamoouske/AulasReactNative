{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useCallback, useEffect, useState } from 'react';\nimport { askAsync, getAsync } from \"./Permissions\";\nexport function usePermissions(type) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var _options$ask = options.ask,\n      ask = _options$ask === void 0 ? false : _options$ask,\n      _options$get = options.get,\n      get = _options$get === void 0 ? true : _options$get;\n  var types = Array.isArray(type) ? type : [type];\n  var askPermissions = useCallback(function () {\n    return askAsync.apply(void 0, _toConsumableArray(types)).then(setData);\n  }, [type]);\n  var getPermissions = useCallback(function () {\n    return getAsync.apply(void 0, _toConsumableArray(types)).then(setData);\n  }, [type]);\n  useEffect(function () {\n    if (ask) {\n      askPermissions();\n    }\n\n    if (!ask && get) {\n      getPermissions();\n    }\n  }, [ask, askPermissions, get, getPermissions]);\n  return [data, askPermissions, getPermissions];\n}","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/expo-permissions/src/PermissionsHooks.ts"],"names":["useCallback","useEffect","useState","askAsync","getAsync","usePermissions","type","options","data","setData","ask","get","types","Array","isArray","askPermissions","then","getPermissions"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AAEA,SAASC,QAAT,EAAmBC,QAAnB;AAmBA,OAAO,SAASC,cAAT,CACLC,IADK,EAGuE;AAAA,MAD5EC,OAC4E,uEAD9C,EAC8C;;AAAA,kBACpDL,QAAQ,EAD4C;AAAA;AAAA,MACrEM,IADqE;AAAA,MAC/DC,OAD+D;;AAAA,qBAExCF,OAFwC,CAEpEG,GAFoE;AAAA,MAEpEA,GAFoE,6BAE9D,KAF8D;AAAA,qBAExCH,OAFwC,CAEvDI,GAFuD;AAAA,MAEvDA,GAFuD,6BAEjD,IAFiD;AAG5E,MAAMC,KAAK,GAAGC,KAAK,CAACC,OAAN,CAAcR,IAAd,IAAsBA,IAAtB,GAA6B,CAACA,IAAD,CAA3C;AAMA,MAAMS,cAAc,GAAGf,WAAW,CAAC;AAAA,WAAMG,QAAQ,MAAR,4BAAYS,KAAZ,GAAmBI,IAAnB,CAAwBP,OAAxB,CAAN;AAAA,GAAD,EAAyC,CAACH,IAAD,CAAzC,CAAlC;AAEA,MAAMW,cAAc,GAAGjB,WAAW,CAAC;AAAA,WAAMI,QAAQ,MAAR,4BAAYQ,KAAZ,GAAmBI,IAAnB,CAAwBP,OAAxB,CAAN;AAAA,GAAD,EAAyC,CAACH,IAAD,CAAzC,CAAlC;AAEAL,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIS,GAAJ,EAAS;AACPK,MAAAA,cAAc;AACf;;AAED,QAAI,CAACL,GAAD,IAAQC,GAAZ,EAAiB;AACfM,MAAAA,cAAc;AACf;AACF,GARQ,EAQN,CAACP,GAAD,EAAMK,cAAN,EAAsBJ,GAAtB,EAA2BM,cAA3B,CARM,CAAT;AAUA,SAAO,CAACT,IAAD,EAAOO,cAAP,EAAuBE,cAAvB,CAAP;AACD","sourcesContent":["import { useCallback, useEffect, useState } from 'react';\n\nimport { askAsync, getAsync } from './Permissions';\nimport { PermissionResponse, PermissionType } from './Permissions.types';\n\n/**\n * Get or ask permission for protected functionality within the app.\n * It returns the permission response after fetching or asking it.\n * The hook fetches the permissions when rendered, by default.\n * To ask the user permission, use the `askPermission` callback or `ask` option.\n *\n * @see https://docs.expo.io/versions/latest/sdk/permissions/\n * @example\n * ```tsx\n * const [permission, askPermission, getPermission] = usePermissions(Permissions.CAMERA);\n *\n * return permission?.granted\n *   ? <Camera ... />\n *   : <Button onPress={askPermission} />;\n * ```\n */\nexport function usePermissions(\n  type: PermissionType | PermissionType[],\n  options: PermissionsOptions = {}\n): [PermissionResponse | undefined, () => Promise<void>, () => Promise<void>] {\n  const [data, setData] = useState<PermissionResponse>();\n  const { ask = false, get = true } = options;\n  const types = Array.isArray(type) ? type : [type];\n\n  // note: its intentional to listen to `type`, not `types`.\n  // when `type` is casted to an array, it possible creates a new one on every render.\n  // to prevent unnecessary function instances we need to listen to the \"raw\" value.\n\n  const askPermissions = useCallback(() => askAsync(...types).then(setData), [type]);\n\n  const getPermissions = useCallback(() => getAsync(...types).then(setData), [type]);\n\n  useEffect(() => {\n    if (ask) {\n      askPermissions();\n    }\n\n    if (!ask && get) {\n      getPermissions();\n    }\n  }, [ask, askPermissions, get, getPermissions]);\n\n  return [data, askPermissions, getPermissions];\n}\n\nexport interface PermissionsOptions {\n  /** If it should ask the permissions when mounted, defaults to `false` */\n  ask?: boolean;\n  /** If it should fetch information about the permissions when mounted, defaults to `true` */\n  get?: boolean;\n}\n"]},"metadata":{},"sourceType":"module"}