{"ast":null,"code":"'use strict';\n\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport { useMemo, useRef } from 'react';\nimport pick from \"../../modules/pick\";\nimport useMergeRefs from \"../../modules/useMergeRefs\";\nimport usePressEvents from \"../../hooks/usePressEvents\";\nvar forwardPropsList = {\n  accessibilityLabel: true,\n  accessibilityLiveRegion: true,\n  accessibilityRole: true,\n  accessibilityState: true,\n  accessibilityValue: true,\n  accessible: true,\n  children: true,\n  disabled: true,\n  focusable: true,\n  importantForAccessibility: true,\n  nativeID: true,\n  onBlur: true,\n  onFocus: true,\n  onLayout: true,\n  testID: true\n};\n\nvar pickProps = function pickProps(props) {\n  return pick(props, forwardPropsList);\n};\n\nfunction TouchableWithoutFeedback(props, forwardedRef) {\n  var accessible = props.accessible,\n      delayPressIn = props.delayPressIn,\n      delayPressOut = props.delayPressOut,\n      delayLongPress = props.delayLongPress,\n      disabled = props.disabled,\n      focusable = props.focusable,\n      onLongPress = props.onLongPress,\n      onPress = props.onPress,\n      onPressIn = props.onPressIn,\n      onPressOut = props.onPressOut,\n      rejectResponderTermination = props.rejectResponderTermination;\n  var hostRef = useRef(null);\n  var pressConfig = useMemo(function () {\n    return {\n      cancelable: !rejectResponderTermination,\n      disabled: disabled,\n      delayLongPress: delayLongPress,\n      delayPressStart: delayPressIn,\n      delayPressEnd: delayPressOut,\n      onLongPress: onLongPress,\n      onPress: onPress,\n      onPressStart: onPressIn,\n      onPressEnd: onPressOut\n    };\n  }, [disabled, delayPressIn, delayPressOut, delayLongPress, onLongPress, onPress, onPressIn, onPressOut, rejectResponderTermination]);\n  var pressEventHandlers = usePressEvents(hostRef, pressConfig);\n  var element = React.Children.only(props.children);\n  var children = [element.props.children];\n  var supportedProps = pickProps(props);\n  supportedProps.accessible = accessible !== false;\n  supportedProps.accessibilityState = _objectSpread({\n    disabled: disabled\n  }, props.accessibilityState);\n  supportedProps.focusable = focusable !== false && onPress !== undefined;\n  supportedProps.ref = useMergeRefs(forwardedRef, hostRef, element.ref);\n\n  var elementProps = _extends(supportedProps, pressEventHandlers);\n\n  return React.cloneElement.apply(React, [element, elementProps].concat(children));\n}\n\nvar MemoedTouchableWithoutFeedback = React.memo(React.forwardRef(TouchableWithoutFeedback));\nMemoedTouchableWithoutFeedback.displayName = 'TouchableWithoutFeedback';\nexport default MemoedTouchableWithoutFeedback;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native-web/src/exports/TouchableWithoutFeedback/index.js"],"names":["React","useMemo","useRef","pick","useMergeRefs","usePressEvents","forwardPropsList","accessibilityLabel","accessibilityLiveRegion","accessibilityRole","accessibilityState","accessibilityValue","accessible","children","disabled","focusable","importantForAccessibility","nativeID","onBlur","onFocus","onLayout","testID","pickProps","props","TouchableWithoutFeedback","forwardedRef","delayPressIn","delayPressOut","delayLongPress","onLongPress","onPress","onPressIn","onPressOut","rejectResponderTermination","hostRef","pressConfig","cancelable","delayPressStart","delayPressEnd","onPressStart","onPressEnd","pressEventHandlers","element","Children","only","supportedProps","undefined","ref","elementProps","cloneElement","MemoedTouchableWithoutFeedback","memo","forwardRef","displayName"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport type { PressResponderConfig } from '../../hooks/usePressEvents/PressResponder';\nimport type { ViewProps } from '../View';\n\nimport * as React from 'react';\nimport { useMemo, useRef } from 'react';\nimport pick from '../../modules/pick';\nimport useMergeRefs from '../../modules/useMergeRefs';\nimport usePressEvents from '../../hooks/usePressEvents';\n\nexport type Props = $ReadOnly<{|\n  accessibilityLabel?: $PropertyType<ViewProps, 'accessibilityLabel'>,\n  accessibilityLiveRegion?: $PropertyType<ViewProps, 'accessibilityLiveRegion'>,\n  accessibilityRole?: $PropertyType<ViewProps, 'accessibilityRole'>,\n  accessibilityState?: $PropertyType<ViewProps, 'accessibilityState'>,\n  accessibilityValue?: $PropertyType<ViewProps, 'accessibilityValue'>,\n  accessible?: $PropertyType<ViewProps, 'accessible'>,\n  children?: ?React.Node,\n  delayLongPress?: ?number,\n  delayPressIn?: ?number,\n  delayPressOut?: ?number,\n  disabled?: ?boolean,\n  focusable?: ?boolean,\n  importantForAccessibility?: $PropertyType<ViewProps, 'importantForAccessibility'>,\n  nativeID?: $PropertyType<ViewProps, 'nativeID'>,\n  onBlur?: $PropertyType<ViewProps, 'onBlur'>,\n  onFocus?: $PropertyType<ViewProps, 'onFocus'>,\n  onLayout?: $PropertyType<ViewProps, 'onLayout'>,\n  onLongPress?: $PropertyType<PressResponderConfig, 'onLongPress'>,\n  onPress?: $PropertyType<PressResponderConfig, 'onPress'>,\n  onPressIn?: $PropertyType<PressResponderConfig, 'onPressStart'>,\n  onPressOut?: $PropertyType<PressResponderConfig, 'onPressEnd'>,\n  rejectResponderTermination?: ?boolean,\n  testID?: $PropertyType<ViewProps, 'testID'>\n|}>;\n\nconst forwardPropsList = {\n  accessibilityLabel: true,\n  accessibilityLiveRegion: true,\n  accessibilityRole: true,\n  accessibilityState: true,\n  accessibilityValue: true,\n  accessible: true,\n  children: true,\n  disabled: true,\n  focusable: true,\n  importantForAccessibility: true,\n  nativeID: true,\n  onBlur: true,\n  onFocus: true,\n  onLayout: true,\n  testID: true\n};\n\nconst pickProps = props => pick(props, forwardPropsList);\n\nfunction TouchableWithoutFeedback(props: Props, forwardedRef): React.Node {\n  const {\n    accessible,\n    delayPressIn,\n    delayPressOut,\n    delayLongPress,\n    disabled,\n    focusable,\n    onLongPress,\n    onPress,\n    onPressIn,\n    onPressOut,\n    rejectResponderTermination\n  } = props;\n\n  const hostRef = useRef(null);\n\n  const pressConfig = useMemo(\n    () => ({\n      cancelable: !rejectResponderTermination,\n      disabled,\n      delayLongPress,\n      delayPressStart: delayPressIn,\n      delayPressEnd: delayPressOut,\n      onLongPress,\n      onPress,\n      onPressStart: onPressIn,\n      onPressEnd: onPressOut\n    }),\n    [\n      disabled,\n      delayPressIn,\n      delayPressOut,\n      delayLongPress,\n      onLongPress,\n      onPress,\n      onPressIn,\n      onPressOut,\n      rejectResponderTermination\n    ]\n  );\n\n  const pressEventHandlers = usePressEvents(hostRef, pressConfig);\n\n  const element = React.Children.only(props.children);\n  const children = [element.props.children];\n  const supportedProps = pickProps(props);\n  supportedProps.accessible = accessible !== false;\n  supportedProps.accessibilityState = { disabled, ...props.accessibilityState };\n  supportedProps.focusable = focusable !== false && onPress !== undefined;\n  supportedProps.ref = useMergeRefs(forwardedRef, hostRef, element.ref);\n\n  const elementProps = Object.assign(supportedProps, pressEventHandlers);\n\n  return React.cloneElement(element, elementProps, ...children);\n}\n\nconst MemoedTouchableWithoutFeedback = React.memo(React.forwardRef(TouchableWithoutFeedback));\nMemoedTouchableWithoutFeedback.displayName = 'TouchableWithoutFeedback';\n\nexport default (MemoedTouchableWithoutFeedback: React.AbstractComponent<\n  Props,\n  React.ElementRef<any>\n>);\n"]},"metadata":{},"sourceType":"module"}