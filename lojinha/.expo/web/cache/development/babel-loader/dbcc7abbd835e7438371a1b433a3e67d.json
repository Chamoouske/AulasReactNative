{"ast":null,"code":"'use strict';\n\nmodule.exports = function rule(context) {\n  function classVisitor(node) {\n    var superClass = node.superClass,\n        id = node.id;\n    var nodeIsError = isErrorLikeId(id);\n    var superIsError = isErrorLikeId(superClass);\n\n    if (nodeIsError && !superIsError) {\n      var idName = getNameFromId(id);\n      context.report({\n        node: superClass || id,\n        message: \"'\" + idName + \"' must extend an error class (like 'Error') because its name is in PascalCase and ends with 'Error'.\"\n      });\n    } else if (superIsError && !nodeIsError) {\n      var _idName = getNameFromId(id);\n\n      context.report({\n        node: id || node,\n        message: _idName ? \"'\" + _idName + \"' may not be the name of an error class. It should be in PascalCase and end with 'Error'.\" : \"An error class should have a PascalCase name ending with 'Error'.\"\n      });\n    }\n  }\n\n  function functionVisitor(node) {\n    var id = node.id;\n    var nodeIsError = isErrorLikeId(id);\n\n    if (nodeIsError) {\n      var idName = getNameFromId(id);\n      context.report({\n        node: id,\n        message: \"'\" + idName + \"' is a reserved name. PascalCase names ending with 'Error' are reserved for error classes and may not be used for regular functions. Either rename this function or convert it to a class that extends 'Error'.\"\n      });\n    }\n  }\n\n  return {\n    ClassDeclaration: classVisitor,\n    ClassExpression: classVisitor,\n    FunctionExpression: functionVisitor,\n    FunctionDeclaration: functionVisitor\n  };\n};\n\nfunction isErrorLikeId(node) {\n  return node && node.type === 'Identifier' && /^([A-Z].*)?Error$/.test(node.name);\n}\n\nfunction getNameFromId(node) {\n  return node ? node.name : null;\n}","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/packages/eslint-plugin-react-native-community/error-subclass-name.js"],"names":["module","exports","rule","context","classVisitor","node","superClass","id","nodeIsError","isErrorLikeId","superIsError","idName","getNameFromId","report","message","functionVisitor","ClassDeclaration","ClassExpression","FunctionExpression","FunctionDeclaration","type","test","name"],"mappings":"AASA;;AAEAA,MAAM,CAACC,OAAP,GAAiB,SAASC,IAAT,CAAcC,OAAd,EAAuB;AACtC,WAASC,YAAT,CAAsBC,IAAtB,EAA4B;AAAA,QACnBC,UADmB,GACDD,IADC,CACnBC,UADmB;AAAA,QACPC,EADO,GACDF,IADC,CACPE,EADO;AAE1B,QAAMC,WAAW,GAAGC,aAAa,CAACF,EAAD,CAAjC;AACA,QAAMG,YAAY,GAAGD,aAAa,CAACH,UAAD,CAAlC;;AACA,QAAIE,WAAW,IAAI,CAACE,YAApB,EAAkC;AAChC,UAAMC,MAAM,GAAGC,aAAa,CAACL,EAAD,CAA5B;AACAJ,MAAAA,OAAO,CAACU,MAAR,CAAe;AACbR,QAAAA,IAAI,EAAEC,UAAU,IAAIC,EADP;AAEbO,QAAAA,OAAO,QAAMH,MAAN;AAFM,OAAf;AAID,KAND,MAMO,IAAID,YAAY,IAAI,CAACF,WAArB,EAAkC;AACvC,UAAMG,OAAM,GAAGC,aAAa,CAACL,EAAD,CAA5B;;AACAJ,MAAAA,OAAO,CAACU,MAAR,CAAe;AACbR,QAAAA,IAAI,EAAEE,EAAE,IAAIF,IADC;AAEbS,QAAAA,OAAO,EAAEH,OAAM,SACPA,OADO,iGAEX;AAJS,OAAf;AAMD;AACF;;AAED,WAASI,eAAT,CAAyBV,IAAzB,EAA+B;AAAA,QACtBE,EADsB,GAChBF,IADgB,CACtBE,EADsB;AAE7B,QAAMC,WAAW,GAAGC,aAAa,CAACF,EAAD,CAAjC;;AACA,QAAIC,WAAJ,EAAiB;AACf,UAAMG,MAAM,GAAGC,aAAa,CAACL,EAAD,CAA5B;AACAJ,MAAAA,OAAO,CAACU,MAAR,CAAe;AACbR,QAAAA,IAAI,EAAEE,EADO;AAEbO,QAAAA,OAAO,QAAMH,MAAN;AAFM,OAAf;AAID;AACF;;AAED,SAAO;AACLK,IAAAA,gBAAgB,EAAEZ,YADb;AAELa,IAAAA,eAAe,EAAEb,YAFZ;AAGLc,IAAAA,kBAAkB,EAAEH,eAHf;AAILI,IAAAA,mBAAmB,EAAEJ;AAJhB,GAAP;AAMD,CAxCD;;AA4CA,SAASN,aAAT,CAAuBJ,IAAvB,EAA6B;AAC3B,SACEA,IAAI,IAAIA,IAAI,CAACe,IAAL,KAAc,YAAtB,IAAsC,oBAAoBC,IAApB,CAAyBhB,IAAI,CAACiB,IAA9B,CADxC;AAGD;;AAID,SAASV,aAAT,CAAuBP,IAAvB,EAA6B;AAC3B,SAAOA,IAAI,GAAGA,IAAI,CAACiB,IAAR,GAAe,IAA1B;AACD","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\n'use strict';\n\nmodule.exports = function rule(context) {\n  function classVisitor(node) {\n    const {superClass, id} = node;\n    const nodeIsError = isErrorLikeId(id);\n    const superIsError = isErrorLikeId(superClass);\n    if (nodeIsError && !superIsError) {\n      const idName = getNameFromId(id);\n      context.report({\n        node: superClass || id,\n        message: `'${idName}' must extend an error class (like 'Error') because its name is in PascalCase and ends with 'Error'.`,\n      });\n    } else if (superIsError && !nodeIsError) {\n      const idName = getNameFromId(id);\n      context.report({\n        node: id || node,\n        message: idName\n          ? `'${idName}' may not be the name of an error class. It should be in PascalCase and end with 'Error'.`\n          : \"An error class should have a PascalCase name ending with 'Error'.\",\n      });\n    }\n  }\n\n  function functionVisitor(node) {\n    const {id} = node;\n    const nodeIsError = isErrorLikeId(id);\n    if (nodeIsError) {\n      const idName = getNameFromId(id);\n      context.report({\n        node: id,\n        message: `'${idName}' is a reserved name. PascalCase names ending with 'Error' are reserved for error classes and may not be used for regular functions. Either rename this function or convert it to a class that extends 'Error'.`,\n      });\n    }\n  }\n\n  return {\n    ClassDeclaration: classVisitor,\n    ClassExpression: classVisitor,\n    FunctionExpression: functionVisitor,\n    FunctionDeclaration: functionVisitor,\n  };\n};\n\n// Checks whether `node` is an identifier (or similar name node) with a\n// PascalCase name ending with 'Error'.\nfunction isErrorLikeId(node) {\n  return (\n    node && node.type === 'Identifier' && /^([A-Z].*)?Error$/.test(node.name)\n  );\n}\n\n// If `node` is an identifier (or similar name node), returns its name as a\n// string. Otherwise returns null.\nfunction getNameFromId(node) {\n  return node ? node.name : null;\n}\n"]},"metadata":{},"sourceType":"script"}