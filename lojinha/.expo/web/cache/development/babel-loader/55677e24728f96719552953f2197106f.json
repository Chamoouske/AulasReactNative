{"ast":null,"code":"export {};","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli/node_modules/@jest/types/build/Global.d.ts"],"names":[],"mappings":"AAkFA","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n/// <reference types=\"node\" />\nimport type { CoverageMapData } from 'istanbul-lib-coverage';\nexport declare type DoneFn = (reason?: string | Error) => void;\nexport declare type TestName = string;\nexport declare type TestFn = (done?: DoneFn) => Promise<void | undefined | unknown> | void | undefined;\nexport declare type BlockFn = () => void;\nexport declare type BlockName = string;\nexport declare type HookFn = TestFn;\nexport declare type Col = unknown;\nexport declare type Row = Array<Col>;\nexport declare type Table = Array<Row>;\nexport declare type ArrayTable = Table | Row;\nexport declare type TemplateTable = TemplateStringsArray;\nexport declare type TemplateData = Array<unknown>;\nexport declare type EachTable = ArrayTable | TemplateTable;\nexport declare type EachTestFn = (...args: Array<any>) => Promise<any> | void | undefined;\ndeclare type Jasmine = {\n    _DEFAULT_TIMEOUT_INTERVAL?: number;\n    addMatchers: Function;\n};\ndeclare type Each = (table: EachTable, ...taggedTemplateData: Array<unknown>) => (title: string, test: EachTestFn, timeout?: number) => void;\nexport interface ItBase {\n    (testName: TestName, fn: TestFn, timeout?: number): void;\n    each: Each;\n}\nexport interface It extends ItBase {\n    only: ItBase;\n    skip: ItBase;\n    todo: (testName: TestName, ...rest: Array<any>) => void;\n}\nexport interface ItConcurrentBase {\n    (testName: string, testFn: () => Promise<any>, timeout?: number): void;\n}\nexport interface ItConcurrentExtended extends ItConcurrentBase {\n    only: ItConcurrentBase;\n    skip: ItConcurrentBase;\n}\nexport interface ItConcurrent extends It {\n    concurrent: ItConcurrentExtended;\n}\nexport interface DescribeBase {\n    (blockName: BlockName, blockFn: BlockFn): void;\n    each: Each;\n}\nexport interface Describe extends DescribeBase {\n    only: DescribeBase;\n    skip: DescribeBase;\n}\nexport interface TestFrameworkGlobals {\n    it: ItConcurrent;\n    test: ItConcurrent;\n    fit: ItBase & {\n        concurrent?: ItConcurrentBase;\n    };\n    xit: ItBase;\n    xtest: ItBase;\n    describe: Describe;\n    xdescribe: DescribeBase;\n    fdescribe: DescribeBase;\n    beforeAll: HookFn;\n    beforeEach: HookFn;\n    afterEach: HookFn;\n    afterAll: HookFn;\n}\nexport interface GlobalAdditions extends TestFrameworkGlobals {\n    __coverage__: CoverageMapData;\n    jasmine: Jasmine;\n    fail: () => void;\n    pending: () => void;\n    spyOn: () => void;\n    spyOnProperty: () => void;\n}\ndeclare type NodeGlobalWithoutAdditions = Omit<NodeJS.Global, keyof GlobalAdditions>;\nexport interface Global extends GlobalAdditions, NodeGlobalWithoutAdditions {\n    [extras: string]: any;\n}\nexport {};\n"]},"metadata":{},"sourceType":"module"}