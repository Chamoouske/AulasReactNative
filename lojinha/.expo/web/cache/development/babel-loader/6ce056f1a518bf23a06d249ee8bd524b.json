{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAndroidProject = getAndroidProject;\nexports.getPackageName = getPackageName;\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getAndroidProject(config) {\n  var androidProject = config.project.android;\n\n  if (!androidProject) {\n    throw new (_cliTools().CLIError)(\"\\n      Android project not found. Are you sure this is a React Native project?\\n      If your Android files are located in a non-standard location (e.g. not inside 'android' folder), consider setting\\n      `project.android.sourceDir` option to point to a new location.\\n    \");\n  }\n\n  return androidProject;\n}\n\nfunction getPackageName(androidProject, appFolder) {\n  var appName = androidProject.appName,\n      manifestPath = androidProject.manifestPath;\n\n  var androidManifest = _fs().default.readFileSync(manifestPath, 'utf8');\n\n  var packageNameMatchArray = androidManifest.match(/package=\"(.+?)\"/);\n\n  if (!packageNameMatchArray || packageNameMatchArray.length === 0) {\n    throw new (_cliTools().CLIError)(\"Failed to build the app: No package name found. Found errors in \" + _chalk().default.underline.dim((appFolder || appName) + \"/src/main/AndroidManifest.xml\"));\n  }\n\n  var packageName = packageNameMatchArray[1];\n\n  if (!validatePackageName(packageName)) {\n    _cliTools().logger.warn(\"Invalid application's package name \\\"\" + _chalk().default.bgRed(packageName) + \"\\\" in 'AndroidManifest.xml'. Read guidelines for setting the package name here: \" + _chalk().default.underline.dim('https://developer.android.com/studio/build/application-id'));\n  }\n\n  return packageName;\n}\n\nfunction validatePackageName(packageName) {\n  return /^[a-z][a-z0-9_]*(\\.[a-z][a-z0-9_]*)+$/.test(packageName);\n}","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli-platform-android/build/utils/getAndroidProject.js"],"names":["Object","defineProperty","exports","value","getAndroidProject","getPackageName","_cliTools","data","require","_fs","_interopRequireDefault","_chalk","obj","__esModule","default","config","androidProject","project","android","CLIError","appFolder","appName","manifestPath","androidManifest","readFileSync","packageNameMatchArray","match","length","underline","dim","packageName","validatePackageName","logger","warn","bgRed","test"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,iBAAR,GAA4BA,iBAA5B;AACAF,OAAO,CAACG,cAAR,GAAyBA,cAAzB;;AAEA,SAASC,SAAT,GAAqB;AACnB,MAAMC,IAAI,GAAGC,OAAO,CAAC,mCAAD,CAApB;;AAEAF,EAAAA,SAAS,GAAG,qBAAY;AACtB,WAAOC,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,SAASE,GAAT,GAAe;AACb,MAAMF,IAAI,GAAGG,sBAAsB,CAACF,OAAO,CAAC,IAAD,CAAR,CAAnC;;AAEAC,EAAAA,GAAG,GAAG,eAAY;AAChB,WAAOF,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,SAASI,MAAT,GAAkB;AAChB,MAAMJ,IAAI,GAAGG,sBAAsB,CAACF,OAAO,CAAC,OAAD,CAAR,CAAnC;;AAEAG,EAAAA,MAAM,GAAG,kBAAY;AACnB,WAAOJ,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,SAASG,sBAAT,CAAgCE,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEE,IAAAA,OAAO,EAAEF;AAAX,GAArC;AAAwD;;AAE/F,SAASR,iBAAT,CAA2BW,MAA3B,EAAmC;AACjC,MAAMC,cAAc,GAAGD,MAAM,CAACE,OAAP,CAAeC,OAAtC;;AAEA,MAAI,CAACF,cAAL,EAAqB;AACnB,UAAM,KAAKV,SAAS,GAAGa,QAAjB,yRAAN;AAKD;;AAED,SAAOH,cAAP;AACD;;AAOD,SAASX,cAAT,CAAwBW,cAAxB,EAAwCI,SAAxC,EAAmD;AAAA,MAE/CC,OAF+C,GAI7CL,cAJ6C,CAE/CK,OAF+C;AAAA,MAG/CC,YAH+C,GAI7CN,cAJ6C,CAG/CM,YAH+C;;AAMjD,MAAMC,eAAe,GAAGd,GAAG,GAAGK,OAAN,CAAcU,YAAd,CAA2BF,YAA3B,EAAyC,MAAzC,CAAxB;;AAEA,MAAIG,qBAAqB,GAAGF,eAAe,CAACG,KAAhB,CAAsB,iBAAtB,CAA5B;;AAEA,MAAI,CAACD,qBAAD,IAA0BA,qBAAqB,CAACE,MAAtB,KAAiC,CAA/D,EAAkE;AAChE,UAAM,KAAKrB,SAAS,GAAGa,QAAjB,uEAA8FR,MAAM,GAAGG,OAAT,CAAiBc,SAAjB,CAA2BC,GAA3B,EAAkCT,SAAS,IAAIC,OAA/C,oCAA9F,CAAN;AACD;;AAED,MAAIS,WAAW,GAAGL,qBAAqB,CAAC,CAAD,CAAvC;;AAEA,MAAI,CAACM,mBAAmB,CAACD,WAAD,CAAxB,EAAuC;AACrCxB,IAAAA,SAAS,GAAG0B,MAAZ,CAAmBC,IAAnB,2CAA+DtB,MAAM,GAAGG,OAAT,CAAiBoB,KAAjB,CAAuBJ,WAAvB,CAA/D,wFAAoLnB,MAAM,GAAGG,OAAT,CAAiBc,SAAjB,CAA2BC,GAA3B,CAA+B,2DAA/B,CAApL;AACD;;AAED,SAAOC,WAAP;AACD;;AAGD,SAASC,mBAAT,CAA6BD,WAA7B,EAA0C;AACxC,SAAO,wCAAwCK,IAAxC,CAA6CL,WAA7C,CAAP;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAndroidProject = getAndroidProject;\nexports.getPackageName = getPackageName;\n\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _fs() {\n  const data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require(\"chalk\"));\n\n  _chalk = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction getAndroidProject(config) {\n  const androidProject = config.project.android;\n\n  if (!androidProject) {\n    throw new (_cliTools().CLIError)(`\n      Android project not found. Are you sure this is a React Native project?\n      If your Android files are located in a non-standard location (e.g. not inside \\'android\\' folder), consider setting\n      \\`project.android.sourceDir\\` option to point to a new location.\n    `);\n  }\n\n  return androidProject;\n}\n/**\n * Get the package name of the running React Native app\n * @param config\n */\n\n\nfunction getPackageName(androidProject, appFolder) {\n  const {\n    appName,\n    manifestPath\n  } = androidProject;\n\n  const androidManifest = _fs().default.readFileSync(manifestPath, 'utf8');\n\n  let packageNameMatchArray = androidManifest.match(/package=\"(.+?)\"/);\n\n  if (!packageNameMatchArray || packageNameMatchArray.length === 0) {\n    throw new (_cliTools().CLIError)(`Failed to build the app: No package name found. Found errors in ${_chalk().default.underline.dim(`${appFolder || appName}/src/main/AndroidManifest.xml`)}`);\n  }\n\n  let packageName = packageNameMatchArray[1];\n\n  if (!validatePackageName(packageName)) {\n    _cliTools().logger.warn(`Invalid application's package name \"${_chalk().default.bgRed(packageName)}\" in 'AndroidManifest.xml'. Read guidelines for setting the package name here: ${_chalk().default.underline.dim('https://developer.android.com/studio/build/application-id')}`);\n  }\n\n  return packageName;\n} // Validates that the package name is correct\n\n\nfunction validatePackageName(packageName) {\n  return /^[a-z][a-z0-9_]*(\\.[a-z][a-z0-9_]*)+$/.test(packageName);\n}\n\n//# sourceMappingURL=getAndroidProject.js.map"]},"metadata":{},"sourceType":"script"}