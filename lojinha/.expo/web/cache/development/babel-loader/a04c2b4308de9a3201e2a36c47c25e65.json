{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = load;\nexports.getDefaultConfig = void 0;\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _metroConfig() {\n  var data = require(\"metro-config\");\n\n  _metroConfig = function _metroConfig() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _metroPlatformResolver = require(\"./metroPlatformResolver\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar INTERNAL_CALLSITES_REGEX = new RegExp(['/Libraries/Renderer/implementations/.+\\\\.js$', '/Libraries/BatchedBridge/MessageQueue\\\\.js$', '/Libraries/YellowBox/.+\\\\.js$', '/Libraries/LogBox/.+\\\\.js$', '/Libraries/Core/Timers/.+\\\\.js$', '/node_modules/react-devtools-core/.+\\\\.js$', '/node_modules/react-refresh/.+\\\\.js$', '/node_modules/scheduler/.+\\\\.js$'].join('|'));\n\nvar getDefaultConfig = function getDefaultConfig(ctx) {\n  var outOfTreePlatforms = Object.keys(ctx.platforms).filter(function (platform) {\n    return ctx.platforms[platform].npmPackageName;\n  });\n  return {\n    resolver: {\n      resolveRequest: outOfTreePlatforms.length === 0 ? undefined : (0, _metroPlatformResolver.reactNativePlatformResolver)(outOfTreePlatforms.reduce(function (result, platform) {\n        result[platform] = ctx.platforms[platform].npmPackageName;\n        return result;\n      }, {})),\n      resolverMainFields: ['react-native', 'browser', 'main'],\n      platforms: [].concat(_toConsumableArray(Object.keys(ctx.platforms)), ['native'])\n    },\n    serializer: {\n      getModulesRunBeforeMainModule: function getModulesRunBeforeMainModule() {\n        return [require.resolve(_path().default.join(ctx.reactNativePath, 'Libraries/Core/InitializeCore'))].concat(_toConsumableArray(outOfTreePlatforms.map(function (platform) {\n          return require.resolve(ctx.platforms[platform].npmPackageName + \"/Libraries/Core/InitializeCore\");\n        })));\n      },\n      getPolyfills: function getPolyfills() {\n        return require(_path().default.join(ctx.reactNativePath, 'rn-get-polyfills'))();\n      }\n    },\n    server: {\n      port: Number(process.env.RCT_METRO_PORT) || 8081\n    },\n    symbolicator: {\n      customizeFrame: function customizeFrame(frame) {\n        var collapse = Boolean(frame.file && INTERNAL_CALLSITES_REGEX.test(frame.file));\n        return {\n          collapse: collapse\n        };\n      }\n    },\n    transformer: {\n      allowOptionalDependencies: true,\n      babelTransformerPath: require.resolve('metro-react-native-babel-transformer'),\n      assetRegistryPath: 'react-native/Libraries/Image/AssetRegistry'\n    },\n    watchFolders: []\n  };\n};\n\nexports.getDefaultConfig = getDefaultConfig;\n\nfunction load(ctx, options) {\n  var defaultConfig = getDefaultConfig(ctx);\n\n  if (options && options.reporter) {\n    defaultConfig.reporter = options.reporter;\n  }\n\n  return (0, _metroConfig().loadConfig)(_objectSpread({\n    cwd: ctx.root\n  }, options), defaultConfig);\n}","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli/build/tools/loadMetroConfig.js"],"names":["Object","defineProperty","exports","value","default","load","getDefaultConfig","_path","data","_interopRequireDefault","require","_metroConfig","_metroPlatformResolver","obj","__esModule","INTERNAL_CALLSITES_REGEX","RegExp","join","ctx","outOfTreePlatforms","keys","platforms","filter","platform","npmPackageName","resolver","resolveRequest","length","undefined","reactNativePlatformResolver","reduce","result","resolverMainFields","serializer","getModulesRunBeforeMainModule","resolve","reactNativePath","map","getPolyfills","server","port","Number","process","env","RCT_METRO_PORT","symbolicator","customizeFrame","frame","collapse","Boolean","file","test","transformer","allowOptionalDependencies","babelTransformerPath","assetRegistryPath","watchFolders","options","defaultConfig","reporter","loadConfig","cwd","root"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = load;\nexports.getDefaultConfig = void 0;\n\nfunction _path() {\n  const data = _interopRequireDefault(require(\"path\"));\n\n  _path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _metroConfig() {\n  const data = require(\"metro-config\");\n\n  _metroConfig = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _metroPlatformResolver = require(\"./metroPlatformResolver\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Configuration file of Metro.\n */\n// @ts-ignore - no typed definition for the package\nconst INTERNAL_CALLSITES_REGEX = new RegExp(['/Libraries/Renderer/implementations/.+\\\\.js$', '/Libraries/BatchedBridge/MessageQueue\\\\.js$', '/Libraries/YellowBox/.+\\\\.js$', '/Libraries/LogBox/.+\\\\.js$', '/Libraries/Core/Timers/.+\\\\.js$', '/node_modules/react-devtools-core/.+\\\\.js$', '/node_modules/react-refresh/.+\\\\.js$', '/node_modules/scheduler/.+\\\\.js$'].join('|'));\n\n/**\n * Default configuration\n */\nconst getDefaultConfig = ctx => {\n  const outOfTreePlatforms = Object.keys(ctx.platforms).filter(platform => ctx.platforms[platform].npmPackageName);\n  return {\n    resolver: {\n      resolveRequest: outOfTreePlatforms.length === 0 ? undefined : (0, _metroPlatformResolver.reactNativePlatformResolver)(outOfTreePlatforms.reduce((result, platform) => {\n        result[platform] = ctx.platforms[platform].npmPackageName;\n        return result;\n      }, {})),\n      resolverMainFields: ['react-native', 'browser', 'main'],\n      platforms: [...Object.keys(ctx.platforms), 'native']\n    },\n    serializer: {\n      // We can include multiple copies of InitializeCore here because metro will\n      // only add ones that are already part of the bundle\n      getModulesRunBeforeMainModule: () => [require.resolve(_path().default.join(ctx.reactNativePath, 'Libraries/Core/InitializeCore')), ...outOfTreePlatforms.map(platform => require.resolve(`${ctx.platforms[platform].npmPackageName}/Libraries/Core/InitializeCore`))],\n      getPolyfills: () => require(_path().default.join(ctx.reactNativePath, 'rn-get-polyfills'))()\n    },\n    server: {\n      port: Number(process.env.RCT_METRO_PORT) || 8081\n    },\n    symbolicator: {\n      customizeFrame: frame => {\n        const collapse = Boolean(frame.file && INTERNAL_CALLSITES_REGEX.test(frame.file));\n        return {\n          collapse\n        };\n      }\n    },\n    transformer: {\n      allowOptionalDependencies: true,\n      babelTransformerPath: require.resolve('metro-react-native-babel-transformer'),\n      assetRegistryPath: 'react-native/Libraries/Image/AssetRegistry'\n    },\n    watchFolders: []\n  };\n};\n\nexports.getDefaultConfig = getDefaultConfig;\n\n/**\n * Loads Metro Config and applies `options` on top of the resolved config.\n *\n * This allows the CLI to always overwrite the file settings.\n */\nfunction load(ctx, options) {\n  const defaultConfig = getDefaultConfig(ctx);\n\n  if (options && options.reporter) {\n    defaultConfig.reporter = options.reporter;\n  }\n\n  return (0, _metroConfig().loadConfig)({\n    cwd: ctx.root,\n    ...options\n  }, defaultConfig);\n}\n\n//# sourceMappingURL=loadMetroConfig.js.map"]},"metadata":{},"sourceType":"script"}