{"ast":null,"code":"'use strict';\n\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Components/DrawerAndroid/DrawerLayoutAndroid.android.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar Platform = require(\"../../Utilities/Platform\");\n\nvar React = require('react');\n\nvar StatusBar = require(\"../StatusBar/StatusBar\");\n\nvar StyleSheet = require(\"../../StyleSheet/StyleSheet\");\n\nvar View = require(\"../View/View\");\n\nvar dismissKeyboard = require(\"../../Utilities/dismissKeyboard\");\n\nvar nullthrows = require('nullthrows');\n\nimport AndroidDrawerLayoutNativeComponent, { Commands } from \"./AndroidDrawerLayoutNativeComponent\";\nvar DRAWER_STATES = ['Idle', 'Dragging', 'Settling'];\n\nvar DrawerLayoutAndroid = function (_React$Component) {\n  _inherits(DrawerLayoutAndroid, _React$Component);\n\n  var _super = _createSuper(DrawerLayoutAndroid);\n\n  function DrawerLayoutAndroid() {\n    var _this;\n\n    _classCallCheck(this, DrawerLayoutAndroid);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this._nativeRef = React.createRef();\n    _this.state = {\n      statusBarBackgroundColor: null\n    };\n\n    _this._onDrawerSlide = function (event) {\n      if (_this.props.onDrawerSlide) {\n        _this.props.onDrawerSlide(event);\n      }\n\n      if (_this.props.keyboardDismissMode === 'on-drag') {\n        dismissKeyboard();\n      }\n    };\n\n    _this._onDrawerOpen = function () {\n      if (_this.props.onDrawerOpen) {\n        _this.props.onDrawerOpen();\n      }\n    };\n\n    _this._onDrawerClose = function () {\n      if (_this.props.onDrawerClose) {\n        _this.props.onDrawerClose();\n      }\n    };\n\n    _this._onDrawerStateChanged = function (event) {\n      if (_this.props.onDrawerStateChanged) {\n        _this.props.onDrawerStateChanged(DRAWER_STATES[event.nativeEvent.drawerState]);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(DrawerLayoutAndroid, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          onDrawerStateChanged = _this$props.onDrawerStateChanged,\n          renderNavigationView = _this$props.renderNavigationView,\n          onDrawerOpen = _this$props.onDrawerOpen,\n          onDrawerClose = _this$props.onDrawerClose,\n          props = _objectWithoutProperties(_this$props, [\"onDrawerStateChanged\", \"renderNavigationView\", \"onDrawerOpen\", \"onDrawerClose\"]);\n\n      var drawStatusBar = Platform.Version >= 21 && this.props.statusBarBackgroundColor != null;\n      var drawerViewWrapper = React.createElement(View, {\n        style: [styles.drawerSubview, {\n          width: this.props.drawerWidth,\n          backgroundColor: this.props.drawerBackgroundColor\n        }],\n        collapsable: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 7\n        }\n      }, renderNavigationView(), drawStatusBar && React.createElement(View, {\n        style: styles.drawerStatusBar,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 27\n        }\n      }));\n      var childrenWrapper = React.createElement(View, {\n        style: styles.mainSubview,\n        collapsable: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 7\n        }\n      }, drawStatusBar && React.createElement(StatusBar, {\n        translucent: true,\n        backgroundColor: this.props.statusBarBackgroundColor,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }\n      }), drawStatusBar && React.createElement(View, {\n        style: [styles.statusBar, {\n          backgroundColor: this.props.statusBarBackgroundColor\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }\n      }), this.props.children);\n      return React.createElement(AndroidDrawerLayoutNativeComponent, _extends({}, props, {\n        ref: this._nativeRef,\n        drawerWidth: this.props.drawerWidth,\n        drawerPosition: this.props.drawerPosition,\n        drawerLockMode: this.props.drawerLockMode,\n        style: [styles.base, this.props.style],\n        onDrawerSlide: this._onDrawerSlide,\n        onDrawerOpen: this._onDrawerOpen,\n        onDrawerClose: this._onDrawerClose,\n        onDrawerStateChanged: this._onDrawerStateChanged,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 7\n        }\n      }), childrenWrapper, drawerViewWrapper);\n    }\n  }, {\n    key: \"openDrawer\",\n    value: function openDrawer() {\n      Commands.openDrawer(nullthrows(this._nativeRef.current));\n    }\n  }, {\n    key: \"closeDrawer\",\n    value: function closeDrawer() {\n      Commands.closeDrawer(nullthrows(this._nativeRef.current));\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      nullthrows(this._nativeRef.current).blur();\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      nullthrows(this._nativeRef.current).focus();\n    }\n  }, {\n    key: \"measure\",\n    value: function measure(callback) {\n      nullthrows(this._nativeRef.current).measure(callback);\n    }\n  }, {\n    key: \"measureInWindow\",\n    value: function measureInWindow(callback) {\n      nullthrows(this._nativeRef.current).measureInWindow(callback);\n    }\n  }, {\n    key: \"measureLayout\",\n    value: function measureLayout(relativeToNativeNode, onSuccess, onFail) {\n      nullthrows(this._nativeRef.current).measureLayout(relativeToNativeNode, onSuccess, onFail);\n    }\n  }, {\n    key: \"setNativeProps\",\n    value: function setNativeProps(nativeProps) {\n      nullthrows(this._nativeRef.current).setNativeProps(nativeProps);\n    }\n  }], [{\n    key: \"positions\",\n    get: function get() {\n      console.warn('Setting DrawerLayoutAndroid drawerPosition using `DrawerLayoutAndroid.positions` is deprecated. Instead pass the string value \"left\" or \"right\"');\n      return {\n        Left: 'left',\n        Right: 'right'\n      };\n    }\n  }]);\n\n  return DrawerLayoutAndroid;\n}(React.Component);\n\nDrawerLayoutAndroid.defaultProps = {\n  drawerBackgroundColor: 'white'\n};\nvar styles = StyleSheet.create({\n  base: {\n    flex: 1,\n    elevation: 16\n  },\n  mainSubview: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  },\n  drawerSubview: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0\n  },\n  statusBar: {\n    height: StatusBar.currentHeight\n  },\n  drawerStatusBar: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    height: StatusBar.currentHeight,\n    backgroundColor: 'rgba(0, 0, 0, 0.251)'\n  }\n});\nmodule.exports = DrawerLayoutAndroid;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Components/DrawerAndroid/DrawerLayoutAndroid.android.js"],"names":["Platform","require","React","StatusBar","StyleSheet","View","dismissKeyboard","nullthrows","AndroidDrawerLayoutNativeComponent","Commands","DRAWER_STATES","DrawerLayoutAndroid","_nativeRef","createRef","state","statusBarBackgroundColor","_onDrawerSlide","event","props","onDrawerSlide","keyboardDismissMode","_onDrawerOpen","onDrawerOpen","_onDrawerClose","onDrawerClose","_onDrawerStateChanged","onDrawerStateChanged","nativeEvent","drawerState","renderNavigationView","drawStatusBar","Version","drawerViewWrapper","styles","drawerSubview","width","drawerWidth","backgroundColor","drawerBackgroundColor","drawerStatusBar","childrenWrapper","mainSubview","statusBar","children","drawerPosition","drawerLockMode","base","style","openDrawer","current","closeDrawer","blur","focus","callback","measure","measureInWindow","relativeToNativeNode","onSuccess","onFail","measureLayout","nativeProps","setNativeProps","console","warn","Left","Right","Component","defaultProps","create","flex","elevation","position","top","left","right","bottom","height","currentHeight","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nconst Platform = require('../../Utilities/Platform');\nconst React = require('react');\nconst StatusBar = require('../StatusBar/StatusBar');\nconst StyleSheet = require('../../StyleSheet/StyleSheet');\nconst View = require('../View/View');\n\nconst dismissKeyboard = require('../../Utilities/dismissKeyboard');\nconst nullthrows = require('nullthrows');\n\nimport AndroidDrawerLayoutNativeComponent, {\n  Commands,\n} from './AndroidDrawerLayoutNativeComponent';\n\nconst DRAWER_STATES = ['Idle', 'Dragging', 'Settling'];\n\nimport type {ViewStyleProp} from '../../StyleSheet/StyleSheet';\nimport type {ColorValue} from '../../StyleSheet/StyleSheetTypes';\nimport type {DirectEventHandler} from '../../Types/CodegenTypes';\nimport type {\n  MeasureOnSuccessCallback,\n  MeasureInWindowOnSuccessCallback,\n  MeasureLayoutOnSuccessCallback,\n} from '../../Renderer/shims/ReactNativeTypes';\n\ntype DrawerStates = 'Idle' | 'Dragging' | 'Settling';\n\ntype DrawerSlideEvent = $ReadOnly<{|\n  offset: number,\n|}>;\n\ntype Props = $ReadOnly<{|\n  /**\n   * Determines whether the keyboard gets dismissed in response to a drag.\n   *   - 'none' (the default), drags do not dismiss the keyboard.\n   *   - 'on-drag', the keyboard is dismissed when a drag begins.\n   */\n  keyboardDismissMode?: ?('none' | 'on-drag'),\n\n  /**\n   * Specifies the background color of the drawer. The default value is white.\n   * If you want to set the opacity of the drawer, use rgba. Example:\n   *\n   * ```\n   * return (\n   *   <DrawerLayoutAndroid drawerBackgroundColor=\"rgba(0,0,0,0.5)\">\n   *   </DrawerLayoutAndroid>\n   * );\n   * ```\n   */\n  drawerBackgroundColor: ColorValue,\n\n  /**\n   * Specifies the side of the screen from which the drawer will slide in.\n   */\n  drawerPosition: ?('left' | 'right'),\n\n  /**\n   * Specifies the width of the drawer, more precisely the width of the view that be pulled in\n   * from the edge of the window.\n   */\n  drawerWidth?: ?number,\n\n  /**\n   * Specifies the lock mode of the drawer. The drawer can be locked in 3 states:\n   * - unlocked (default), meaning that the drawer will respond (open/close) to touch gestures.\n   * - locked-closed, meaning that the drawer will stay closed and not respond to gestures.\n   * - locked-open, meaning that the drawer will stay opened and not respond to gestures.\n   * The drawer may still be opened and closed programmatically (`openDrawer`/`closeDrawer`).\n   */\n  drawerLockMode?: ?('unlocked' | 'locked-closed' | 'locked-open'),\n\n  /**\n   * Function called whenever there is an interaction with the navigation view.\n   */\n  onDrawerSlide?: ?DirectEventHandler<DrawerSlideEvent>,\n\n  /**\n   * Function called when the drawer state has changed. The drawer can be in 3 states:\n   * - Idle, meaning there is no interaction with the navigation view happening at the time\n   * - Dragging, meaning there is currently an interaction with the navigation view\n   * - Settling, meaning that there was an interaction with the navigation view, and the\n   * navigation view is now finishing its closing or opening animation\n   */\n  onDrawerStateChanged?: ?(state: DrawerStates) => mixed,\n\n  /**\n   * Function called whenever the navigation view has been opened.\n   */\n  onDrawerOpen?: ?() => mixed,\n\n  /**\n   * Function called whenever the navigation view has been closed.\n   */\n  onDrawerClose?: ?() => mixed,\n\n  /**\n   * The navigation view that will be rendered to the side of the screen and can be pulled in.\n   */\n  renderNavigationView: () => React.Element<any>,\n\n  /**\n   * Make the drawer take the entire screen and draw the background of the\n   * status bar to allow it to open over the status bar. It will only have an\n   * effect on API 21+.\n   */\n  statusBarBackgroundColor?: ?ColorValue,\n\n  children?: React.Node,\n  style?: ?ViewStyleProp,\n|}>;\n\ntype State = {|\n  statusBarBackgroundColor: ColorValue,\n|};\n\n/**\n * React component that wraps the platform `DrawerLayout` (Android only). The\n * Drawer (typically used for navigation) is rendered with `renderNavigationView`\n * and direct children are the main view (where your content goes). The navigation\n * view is initially not visible on the screen, but can be pulled in from the\n * side of the window specified by the `drawerPosition` prop and its width can\n * be set by the `drawerWidth` prop.\n *\n * Example:\n *\n * ```\n * render: function() {\n *   var navigationView = (\n *     <View style={{flex: 1, backgroundColor: '#fff'}}>\n *       <Text style={{margin: 10, fontSize: 15, textAlign: 'left'}}>I'm in the Drawer!</Text>\n *     </View>\n *   );\n *   return (\n *     <DrawerLayoutAndroid\n *       drawerWidth={300}\n *       drawerPosition=\"left\"\n *       renderNavigationView={() => navigationView}>\n *       <View style={{flex: 1, alignItems: 'center'}}>\n *         <Text style={{margin: 10, fontSize: 15, textAlign: 'right'}}>Hello</Text>\n *         <Text style={{margin: 10, fontSize: 15, textAlign: 'right'}}>World!</Text>\n *       </View>\n *     </DrawerLayoutAndroid>\n *   );\n * },\n * ```\n */\nclass DrawerLayoutAndroid extends React.Component<Props, State> {\n  static get positions(): mixed {\n    console.warn(\n      'Setting DrawerLayoutAndroid drawerPosition using `DrawerLayoutAndroid.positions` is deprecated. Instead pass the string value \"left\" or \"right\"',\n    );\n\n    return {Left: 'left', Right: 'right'};\n  }\n  static defaultProps: {|\n    drawerBackgroundColor: 'white',\n  |} = {\n    drawerBackgroundColor: 'white',\n  };\n\n  _nativeRef = React.createRef<\n    React.ElementRef<typeof AndroidDrawerLayoutNativeComponent>,\n  >();\n\n  state: State = {statusBarBackgroundColor: null};\n\n  render(): React.Node {\n    const {\n      onDrawerStateChanged,\n      renderNavigationView,\n      onDrawerOpen,\n      onDrawerClose,\n      ...props\n    } = this.props;\n    const drawStatusBar =\n      Platform.Version >= 21 && this.props.statusBarBackgroundColor != null;\n    const drawerViewWrapper = (\n      <View\n        style={[\n          styles.drawerSubview,\n          {\n            width: this.props.drawerWidth,\n            backgroundColor: this.props.drawerBackgroundColor,\n          },\n        ]}\n        collapsable={false}>\n        {renderNavigationView()}\n        {drawStatusBar && <View style={styles.drawerStatusBar} />}\n      </View>\n    );\n    const childrenWrapper = (\n      <View style={styles.mainSubview} collapsable={false}>\n        {drawStatusBar && (\n          <StatusBar\n            translucent\n            backgroundColor={this.props.statusBarBackgroundColor}\n          />\n        )}\n        {drawStatusBar && (\n          <View\n            style={[\n              styles.statusBar,\n              {backgroundColor: this.props.statusBarBackgroundColor},\n            ]}\n          />\n        )}\n        {this.props.children}\n      </View>\n    );\n    return (\n      <AndroidDrawerLayoutNativeComponent\n        {...props}\n        ref={this._nativeRef}\n        drawerWidth={this.props.drawerWidth}\n        drawerPosition={this.props.drawerPosition}\n        drawerLockMode={this.props.drawerLockMode}\n        style={[styles.base, this.props.style]}\n        onDrawerSlide={this._onDrawerSlide}\n        onDrawerOpen={this._onDrawerOpen}\n        onDrawerClose={this._onDrawerClose}\n        onDrawerStateChanged={this._onDrawerStateChanged}>\n        {childrenWrapper}\n        {drawerViewWrapper}\n      </AndroidDrawerLayoutNativeComponent>\n    );\n  }\n\n  _onDrawerSlide = event => {\n    if (this.props.onDrawerSlide) {\n      this.props.onDrawerSlide(event);\n    }\n    if (this.props.keyboardDismissMode === 'on-drag') {\n      dismissKeyboard();\n    }\n  };\n\n  _onDrawerOpen = () => {\n    if (this.props.onDrawerOpen) {\n      this.props.onDrawerOpen();\n    }\n  };\n\n  _onDrawerClose = () => {\n    if (this.props.onDrawerClose) {\n      this.props.onDrawerClose();\n    }\n  };\n\n  _onDrawerStateChanged = event => {\n    if (this.props.onDrawerStateChanged) {\n      this.props.onDrawerStateChanged(\n        DRAWER_STATES[event.nativeEvent.drawerState],\n      );\n    }\n  };\n\n  /**\n   * Opens the drawer.\n   */\n  openDrawer() {\n    Commands.openDrawer(nullthrows(this._nativeRef.current));\n  }\n\n  /**\n   * Closes the drawer.\n   */\n  closeDrawer() {\n    Commands.closeDrawer(nullthrows(this._nativeRef.current));\n  }\n\n  /**\n   * Closing and opening example\n   * Note: To access the drawer you have to give it a ref\n   *\n   * Class component:\n   *\n   * render () {\n   *   this.openDrawer = () => {\n   *     this.refs.DRAWER.openDrawer()\n   *   }\n   *   this.closeDrawer = () => {\n   *     this.refs.DRAWER.closeDrawer()\n   *   }\n   *   return (\n   *     <DrawerLayoutAndroid ref={'DRAWER'}>\n   *      {children}\n   *     </DrawerLayoutAndroid>\n   *   )\n   * }\n   *\n   * Function component:\n   *\n   * const drawerRef = useRef()\n   * const openDrawer = () => {\n   *   drawerRef.current.openDrawer()\n   * }\n   * const closeDrawer = () => {\n   *   drawerRef.current.closeDrawer()\n   * }\n   * return (\n   *   <DrawerLayoutAndroid ref={drawerRef}>\n   *     {children}\n   *   </DrawerLayoutAndroid>\n   * )\n   */\n\n  /**\n   * Native methods\n   */\n  blur() {\n    nullthrows(this._nativeRef.current).blur();\n  }\n\n  focus() {\n    nullthrows(this._nativeRef.current).focus();\n  }\n\n  measure(callback: MeasureOnSuccessCallback) {\n    nullthrows(this._nativeRef.current).measure(callback);\n  }\n\n  measureInWindow(callback: MeasureInWindowOnSuccessCallback) {\n    nullthrows(this._nativeRef.current).measureInWindow(callback);\n  }\n\n  measureLayout(\n    relativeToNativeNode: number,\n    onSuccess: MeasureLayoutOnSuccessCallback,\n    onFail?: () => void,\n  ) {\n    nullthrows(this._nativeRef.current).measureLayout(\n      relativeToNativeNode,\n      onSuccess,\n      onFail,\n    );\n  }\n\n  setNativeProps(nativeProps: Object) {\n    nullthrows(this._nativeRef.current).setNativeProps(nativeProps);\n  }\n}\n\nconst styles = StyleSheet.create({\n  base: {\n    flex: 1,\n    elevation: 16,\n  },\n  mainSubview: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  },\n  drawerSubview: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n  },\n  statusBar: {\n    height: StatusBar.currentHeight,\n  },\n  drawerStatusBar: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    height: StatusBar.currentHeight,\n    backgroundColor: 'rgba(0, 0, 0, 0.251)',\n  },\n});\n\nmodule.exports = DrawerLayoutAndroid;\n"]},"metadata":{},"sourceType":"module"}