{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction updateComment(octokit, issueParams, body, replacePattern) {\n  var authenticatedUser, comments, authedUserId, pattern, comment;\n  return _regeneratorRuntime.async(function updateComment$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (replacePattern) {\n            _context.next = 2;\n            break;\n          }\n\n          return _context.abrupt(\"return\", false);\n\n        case 2:\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(octokit.users.getAuthenticated());\n\n        case 4:\n          authenticatedUser = _context.sent;\n\n          if (!(authenticatedUser.status !== 200 || !authenticatedUser.data)) {\n            _context.next = 8;\n            break;\n          }\n\n          console.warn(authenticatedUser);\n          return _context.abrupt(\"return\", false);\n\n        case 8:\n          _context.next = 10;\n          return _regeneratorRuntime.awrap(octokit.issues.listComments(issueParams));\n\n        case 10:\n          comments = _context.sent;\n\n          if (!(comments.status !== 200 || !comments.data)) {\n            _context.next = 14;\n            break;\n          }\n\n          console.warn(comments);\n          return _context.abrupt(\"return\", false);\n\n        case 14:\n          authedUserId = authenticatedUser.data.id;\n          pattern = new RegExp(replacePattern, 'g');\n          comment = comments.data.find(function (_ref) {\n            var user = _ref.user,\n                body = _ref.body;\n            return user.id === authedUserId && pattern.test(body);\n          });\n\n          if (comment) {\n            _context.next = 19;\n            break;\n          }\n\n          return _context.abrupt(\"return\", false);\n\n        case 19:\n          octokit.issues.updateComment(_objectSpread(_objectSpread({}, issueParams), {}, {\n            comment_id: comment.id,\n            body: body\n          }));\n          return _context.abrupt(\"return\", true);\n\n        case 21:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction createOrUpdateComment(body, replacePattern) {\n  var _process$env, GITHUB_TOKEN, GITHUB_OWNER, GITHUB_REPO, GITHUB_PR_NUMBER, _require, Octokit, octokit, issueParams;\n\n  return _regeneratorRuntime.async(function createOrUpdateComment$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _process$env = process.env, GITHUB_TOKEN = _process$env.GITHUB_TOKEN, GITHUB_OWNER = _process$env.GITHUB_OWNER, GITHUB_REPO = _process$env.GITHUB_REPO, GITHUB_PR_NUMBER = _process$env.GITHUB_PR_NUMBER;\n\n          if (!GITHUB_TOKEN || !GITHUB_OWNER || !GITHUB_REPO || !GITHUB_PR_NUMBER) {\n            if (!GITHUB_TOKEN) {\n              console.error('Missing GITHUB_TOKEN. Example: 5fd88b964fa214c4be2b144dc5af5d486a2f8c1e. PR feedback cannot be provided on GitHub without a valid token.');\n            }\n\n            if (!GITHUB_OWNER) {\n              console.error('Missing GITHUB_OWNER. Example: facebook');\n            }\n\n            if (!GITHUB_REPO) {\n              console.error('Missing GITHUB_REPO. Example: react-native');\n            }\n\n            if (!GITHUB_PR_NUMBER) {\n              console.error('Missing GITHUB_PR_NUMBER. Example: 4687. PR feedback cannot be provided on GitHub without a valid pull request number.');\n            }\n\n            process.exit(1);\n          }\n\n          if (body) {\n            _context2.next = 4;\n            break;\n          }\n\n          return _context2.abrupt(\"return\");\n\n        case 4:\n          _require = require('@octokit/rest'), Octokit = _require.Octokit;\n          octokit = new Octokit({\n            auth: GITHUB_TOKEN\n          });\n          issueParams = {\n            owner: GITHUB_OWNER,\n            repo: GITHUB_REPO,\n            issue_number: GITHUB_PR_NUMBER\n          };\n          _context2.next = 9;\n          return _regeneratorRuntime.awrap(updateComment(octokit, issueParams, body, replacePattern));\n\n        case 9:\n          if (!_context2.sent) {\n            _context2.next = 11;\n            break;\n          }\n\n          return _context2.abrupt(\"return\");\n\n        case 11:\n          octokit.issues.createComment(_objectSpread(_objectSpread({}, issueParams), {}, {\n            body: body\n          }));\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nmodule.exports = {\n  createOrUpdateComment: createOrUpdateComment\n};","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/bots/make-comment.js"],"names":["updateComment","octokit","issueParams","body","replacePattern","users","getAuthenticated","authenticatedUser","status","data","console","warn","issues","listComments","comments","authedUserId","id","pattern","RegExp","comment","find","user","test","comment_id","createOrUpdateComment","process","env","GITHUB_TOKEN","GITHUB_OWNER","GITHUB_REPO","GITHUB_PR_NUMBER","error","exit","require","Octokit","auth","owner","repo","issue_number","createComment","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\n'use strict';\n\n/**\n * Updates the comment matching specified pattern.\n * @param {import('@octokit/rest').Octokit} octokit Octokit instance\n * @param {{ owner: string; repo: string; issue_number: string; }} issueParams\n * @param {string} body Comment body\n * @param {string} replacePattern Pattern for finding the comment to update\n */\nasync function updateComment(octokit, issueParams, body, replacePattern) {\n  if (!replacePattern) {\n    return false;\n  }\n\n  const authenticatedUser = await octokit.users.getAuthenticated();\n  if (authenticatedUser.status !== 200 || !authenticatedUser.data) {\n    console.warn(authenticatedUser);\n    return false;\n  }\n\n  const comments = await octokit.issues.listComments(issueParams);\n  if (comments.status !== 200 || !comments.data) {\n    console.warn(comments);\n    return false;\n  }\n\n  const authedUserId = authenticatedUser.data.id;\n  const pattern = new RegExp(replacePattern, 'g');\n  const comment = comments.data.find(\n    ({user, body}) => user.id === authedUserId && pattern.test(body),\n  );\n  if (!comment) {\n    return false;\n  }\n\n  octokit.issues.updateComment({\n    ...issueParams,\n    comment_id: comment.id,\n    body,\n  });\n  return true;\n}\n\n/**\n * Creates or updates a comment with specified pattern.\n * @param {string} body Comment body\n * @param {string} replacePattern Pattern for finding the comment to update\n */\nasync function createOrUpdateComment(body, replacePattern) {\n  const {\n    GITHUB_TOKEN,\n    GITHUB_OWNER,\n    GITHUB_REPO,\n    GITHUB_PR_NUMBER,\n  } = process.env;\n  if (!GITHUB_TOKEN || !GITHUB_OWNER || !GITHUB_REPO || !GITHUB_PR_NUMBER) {\n    if (!GITHUB_TOKEN) {\n      console.error(\n        'Missing GITHUB_TOKEN. Example: 5fd88b964fa214c4be2b144dc5af5d486a2f8c1e. PR feedback cannot be provided on GitHub without a valid token.',\n      );\n    }\n    if (!GITHUB_OWNER) {\n      console.error('Missing GITHUB_OWNER. Example: facebook');\n    }\n    if (!GITHUB_REPO) {\n      console.error('Missing GITHUB_REPO. Example: react-native');\n    }\n    if (!GITHUB_PR_NUMBER) {\n      console.error(\n        'Missing GITHUB_PR_NUMBER. Example: 4687. PR feedback cannot be provided on GitHub without a valid pull request number.',\n      );\n    }\n    process.exit(1);\n  }\n\n  if (!body) {\n    return;\n  }\n\n  const {Octokit} = require('@octokit/rest');\n  const octokit = new Octokit({auth: GITHUB_TOKEN});\n\n  const issueParams = {\n    owner: GITHUB_OWNER,\n    repo: GITHUB_REPO,\n    issue_number: GITHUB_PR_NUMBER,\n  };\n\n  if (await updateComment(octokit, issueParams, body, replacePattern)) {\n    return;\n  }\n\n  // We found no comments to replace, so we'll create a new one.\n\n  octokit.issues.createComment({\n    ...issueParams,\n    body,\n  });\n}\n\nmodule.exports = {\n  createOrUpdateComment,\n};\n"]},"metadata":{},"sourceType":"script"}