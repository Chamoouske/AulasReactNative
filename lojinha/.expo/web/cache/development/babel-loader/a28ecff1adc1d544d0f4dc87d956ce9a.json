{"ast":null,"code":"'use strict';\n\nimport _extends from \"@babel/runtime/helpers/extends\";\nvar _jsxFileName = \"/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/RNTester/js/examples/JSResponderHandlerExample/JSResponderHandlerExample.js\";\n\nvar React = require('react');\n\nvar Text = require(\"react-native-web/dist/exports/Text\").default;\n\nvar View = require(\"react-native-web/dist/exports/View\").default;\n\nvar StyleSheet = require(\"react-native-web/dist/exports/StyleSheet\").default;\n\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nexports.displayName = 'JSResponderHandlerExample';\nexports.framework = 'React';\nexports.title = '<JSResponderHandler>';\nexports.description = 'Simple example to test JSResponderHandler.';\n\nvar _gesture = PanResponder.create({\n  onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder(e, gestureState) {\n    return Math.abs(gestureState.moveX) > 150;\n  }\n});\n\nexports.examples = [{\n  title: 'JSResponderHandlerExample',\n  description: 'This example tests the native JSResponderHandler: when the user ' + 'scrolls on the right side of the ScrollView (white area located on the' + ' right side of the gray area), the touch event is managed by native ' + 'which blocks the scroll event.',\n  render: function render() {\n    var views = [];\n\n    for (var i = 0; i < 100; i++) {\n      views[i] = React.createElement(View, {\n        key: i,\n        style: styles.row,\n        collapsable: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }\n      }, React.createElement(View, {\n        style: styles.touchable_area,\n        collapsable: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }\n      }, React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 15\n        }\n      }, \"I am row \", i)));\n    }\n\n    return React.createElement(View, _extends({\n      style: styles.container\n    }, _gesture.panHandlers, {\n      collapsable: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    }), React.createElement(ScrollView, {\n      style: styles.scrollview,\n      testID: \"scroll_view\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }\n    }, views));\n  }\n}];\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  scrollview: {\n    flex: 1\n  },\n  row: {\n    height: 25\n  },\n  touchable_area: {\n    width: 150,\n    backgroundColor: 'lightgray'\n  }\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/RNTester/js/examples/JSResponderHandlerExample/JSResponderHandlerExample.js"],"names":["React","require","exports","displayName","framework","title","description","_gesture","PanResponder","create","onMoveShouldSetPanResponder","e","gestureState","Math","abs","moveX","examples","render","views","i","styles","row","touchable_area","container","panHandlers","scrollview","StyleSheet","flex","height","width","backgroundColor"],"mappings":"AAUA;;;;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;;;;;;;;;AAMAC,OAAO,CAACC,WAAR,GAAsB,2BAAtB;AACAD,OAAO,CAACE,SAAR,GAAoB,OAApB;AACAF,OAAO,CAACG,KAAR,GAAgB,sBAAhB;AACAH,OAAO,CAACI,WAAR,GAAsB,4CAAtB;;AAEA,IAAMC,QAAQ,GAAGC,YAAY,CAACC,MAAb,CAAoB;AACnCC,EAAAA,2BAA2B,EAAE,qCAACC,CAAD,EAAIC,YAAJ,EAAqB;AAChD,WAAOC,IAAI,CAACC,GAAL,CAASF,YAAY,CAACG,KAAtB,IAA+B,GAAtC;AACD;AAHkC,CAApB,CAAjB;;AAMAb,OAAO,CAACc,QAAR,GAAmB,CACjB;AACEX,EAAAA,KAAK,EAAE,2BADT;AAEEC,EAAAA,WAAW,EAAG,qEACZ,wEADY,GAEZ,sEAFY,GAGZ,gCALJ;AAOEW,EAAAA,MAAM,EAAE,kBAAuB;AAC7B,QAAMC,KAAK,GAAG,EAAd;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,GAApB,EAAyBA,CAAC,EAA1B,EAA8B;AAC5BD,MAAAA,KAAK,CAACC,CAAD,CAAL,GACE,oBAAC,IAAD;AAAM,QAAA,GAAG,EAAEA,CAAX;AAAc,QAAA,KAAK,EAAEC,MAAM,CAACC,GAA5B;AAAiC,QAAA,WAAW,EAAE,KAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAED,MAAM,CAACE,cAApB;AAAoC,QAAA,WAAW,EAAE,KAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAgBH,CAAhB,CADF,CADF,CADF;AAOD;;AACD,WACE,oBAAC,IAAD;AACE,MAAA,KAAK,EAAEC,MAAM,CAACG;AADhB,OAEMhB,QAAQ,CAACiB,WAFf;AAGE,MAAA,WAAW,EAAE,KAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAIE,oBAAC,UAAD;AAAY,MAAA,KAAK,EAAEJ,MAAM,CAACK,UAA1B;AAAsC,MAAA,MAAM,EAAC,aAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGP,KADH,CAJF,CADF;AAUD;AA5BH,CADiB,CAAnB;AAiCA,IAAME,MAAM,GAAGM,UAAU,CAACjB,MAAX,CAAkB;AAC/Bc,EAAAA,SAAS,EAAE;AACTI,IAAAA,IAAI,EAAE;AADG,GADoB;AAI/BF,EAAAA,UAAU,EAAE;AACVE,IAAAA,IAAI,EAAE;AADI,GAJmB;AAO/BN,EAAAA,GAAG,EAAE;AACHO,IAAAA,MAAM,EAAE;AADL,GAP0B;AAU/BN,EAAAA,cAAc,EAAE;AACdO,IAAAA,KAAK,EAAE,GADO;AAEdC,IAAAA,eAAe,EAAE;AAFH;AAVe,CAAlB,CAAf","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nconst React = require('react');\n\nconst {Text, View, StyleSheet} = require('react-native');\n\nimport {PanResponder, ScrollView} from 'react-native';\n\nexports.displayName = 'JSResponderHandlerExample';\nexports.framework = 'React';\nexports.title = '<JSResponderHandler>';\nexports.description = 'Simple example to test JSResponderHandler.';\n\nconst _gesture = PanResponder.create({\n  onMoveShouldSetPanResponder: (e, gestureState) => {\n    return Math.abs(gestureState.moveX) > 150;\n  },\n});\n\nexports.examples = [\n  {\n    title: 'JSResponderHandlerExample',\n    description: ('This example tests the native JSResponderHandler: when the user ' +\n      'scrolls on the right side of the ScrollView (white area located on the' +\n      ' right side of the gray area), the touch event is managed by native ' +\n      'which blocks the scroll event.': string),\n\n    render: function(): React.Node {\n      const views = [];\n      for (let i = 0; i < 100; i++) {\n        views[i] = (\n          <View key={i} style={styles.row} collapsable={false}>\n            <View style={styles.touchable_area} collapsable={false}>\n              <Text>I am row {i}</Text>\n            </View>\n          </View>\n        );\n      }\n      return (\n        <View\n          style={styles.container}\n          {..._gesture.panHandlers}\n          collapsable={false}>\n          <ScrollView style={styles.scrollview} testID=\"scroll_view\">\n            {views}\n          </ScrollView>\n        </View>\n      );\n    },\n  },\n];\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  scrollview: {\n    flex: 1,\n  },\n  row: {\n    height: 25,\n  },\n  touchable_area: {\n    width: 150,\n    backgroundColor: 'lightgray',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}