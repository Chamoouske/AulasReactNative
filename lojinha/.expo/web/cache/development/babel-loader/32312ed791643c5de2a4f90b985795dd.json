{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = linkAssetsIOS;\n\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _xcode() {\n  var data = _interopRequireDefault(require(\"xcode\"));\n\n  _xcode = function _xcode() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _createGroupWithMessage = _interopRequireDefault(require(\"./createGroupWithMessage\"));\n\nvar _getPlist = _interopRequireDefault(require(\"./getPlist\"));\n\nvar _writePlist = _interopRequireDefault(require(\"./writePlist\"));\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction linkAssetsIOS(files, projectConfig) {\n  var project = _xcode().default.project(projectConfig.pbxprojPath).parseSync();\n\n  var assets = (0, _cliTools().groupFilesByType)(files);\n  var plist = (0, _getPlist.default)(project, projectConfig.sourceDir);\n  (0, _createGroupWithMessage.default)(project, 'Resources');\n\n  function addResourceFile(f) {\n    return (f || []).map(function (asset) {\n      _cliTools().logger.debug(\"Linking asset \" + asset);\n\n      return project.addResourceFile(_path().default.relative(projectConfig.sourceDir, asset), {\n        target: project.getFirstTarget().uuid\n      });\n    }).filter(Boolean).map(function (file) {\n      return file.basename;\n    });\n  }\n\n  addResourceFile(assets.image);\n  var fonts = addResourceFile(assets.font);\n  var existingFonts = plist.UIAppFonts || [];\n  var allFonts = [].concat(_toConsumableArray(existingFonts), _toConsumableArray(fonts));\n  plist.UIAppFonts = Array.from(new Set(allFonts));\n\n  _fs().default.writeFileSync(projectConfig.pbxprojPath, project.writeSync());\n\n  (0, _writePlist.default)(project, projectConfig.sourceDir, plist);\n}","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli-platform-ios/build/link/copyAssets.js"],"names":["Object","defineProperty","exports","value","default","linkAssetsIOS","_fs","data","_interopRequireDefault","require","_path","_xcode","_createGroupWithMessage","_getPlist","_writePlist","_cliTools","obj","__esModule","files","projectConfig","project","pbxprojPath","parseSync","assets","groupFilesByType","plist","sourceDir","addResourceFile","f","map","asset","logger","debug","relative","target","getFirstTarget","uuid","filter","Boolean","file","basename","image","fonts","font","existingFonts","UIAppFonts","allFonts","Array","from","Set","writeFileSync","writeSync"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = linkAssetsIOS;\n\nfunction _fs() {\n  const data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  const data = _interopRequireDefault(require(\"path\"));\n\n  _path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _xcode() {\n  const data = _interopRequireDefault(require(\"xcode\"));\n\n  _xcode = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _createGroupWithMessage = _interopRequireDefault(require(\"./createGroupWithMessage\"));\n\nvar _getPlist = _interopRequireDefault(require(\"./getPlist\"));\n\nvar _writePlist = _interopRequireDefault(require(\"./writePlist\"));\n\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * This function works in a similar manner to its Android version,\n * except it does not copy fonts but creates Xcode Group references\n */\nfunction linkAssetsIOS(files, projectConfig) {\n  const project = _xcode().default.project(projectConfig.pbxprojPath).parseSync();\n\n  const assets = (0, _cliTools().groupFilesByType)(files);\n  const plist = (0, _getPlist.default)(project, projectConfig.sourceDir);\n  (0, _createGroupWithMessage.default)(project, 'Resources');\n\n  function addResourceFile(f) {\n    return (f || []).map(asset => {\n      _cliTools().logger.debug(`Linking asset ${asset}`);\n\n      return project.addResourceFile(_path().default.relative(projectConfig.sourceDir, asset), {\n        target: project.getFirstTarget().uuid\n      });\n    }).filter(Boolean) // xcode returns false if file is already there\n    .map(file => file.basename);\n  }\n\n  addResourceFile(assets.image);\n  const fonts = addResourceFile(assets.font); // @ts-ignore Type mismatch with the lib\n\n  const existingFonts = plist.UIAppFonts || [];\n  const allFonts = [...existingFonts, ...fonts]; // @ts-ignore Type mismatch with the lib\n\n  plist.UIAppFonts = Array.from(new Set(allFonts)); // use Set to dedupe w/existing\n\n  _fs().default.writeFileSync(projectConfig.pbxprojPath, project.writeSync());\n\n  (0, _writePlist.default)(project, projectConfig.sourceDir, plist);\n}\n\n//# sourceMappingURL=copyAssets.js.map"]},"metadata":{},"sourceType":"script"}