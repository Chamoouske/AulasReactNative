{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Components/DatePicker/DatePickerIOS.ios.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport RCTDatePickerNativeComponent, { Commands as DatePickerCommands } from \"./RCTDatePickerNativeComponent\";\n\nvar React = require('react');\n\nvar StyleSheet = require(\"../../StyleSheet/StyleSheet\");\n\nvar View = require(\"../View/View\");\n\nvar invariant = require('invariant');\n\nvar DatePickerIOS = function (_React$Component) {\n  _inherits(DatePickerIOS, _React$Component);\n\n  var _super = _createSuper(DatePickerIOS);\n\n  function DatePickerIOS() {\n    var _this;\n\n    _classCallCheck(this, DatePickerIOS);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this._picker = null;\n\n    _this._onChange = function (event) {\n      var nativeTimeStamp = event.nativeEvent.timestamp;\n      _this.props.onDateChange && _this.props.onDateChange(new Date(nativeTimeStamp));\n      _this.props.onChange && _this.props.onChange(event);\n\n      _this.forceUpdate();\n    };\n\n    return _this;\n  }\n\n  _createClass(DatePickerIOS, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.props.date) {\n        var propsTimeStamp = this.props.date.getTime();\n\n        if (this._picker) {\n          DatePickerCommands.setNativeDate(this._picker, propsTimeStamp);\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var props = this.props;\n      invariant(props.date || props.initialDate, 'A selected date or initial date should be specified.');\n      return React.createElement(View, {\n        style: props.style,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 7\n        }\n      }, React.createElement(RCTDatePickerNativeComponent, {\n        testID: props.testID,\n        ref: function ref(picker) {\n          _this2._picker = picker;\n        },\n        style: styles.datePickerIOS,\n        date: props.date ? props.date.getTime() : props.initialDate ? props.initialDate.getTime() : undefined,\n        locale: props.locale != null && props.locale !== '' ? props.locale : undefined,\n        maximumDate: props.maximumDate ? props.maximumDate.getTime() : undefined,\n        minimumDate: props.minimumDate ? props.minimumDate.getTime() : undefined,\n        mode: props.mode,\n        minuteInterval: props.minuteInterval,\n        timeZoneOffsetInMinutes: props.timeZoneOffsetInMinutes,\n        onChange: this._onChange,\n        onStartShouldSetResponder: function onStartShouldSetResponder() {\n          return true;\n        },\n        onResponderTerminationRequest: function onResponderTerminationRequest() {\n          return false;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return DatePickerIOS;\n}(React.Component);\n\nDatePickerIOS.DefaultProps = {\n  mode: 'datetime'\n};\nvar styles = StyleSheet.create({\n  datePickerIOS: {\n    height: 216\n  }\n});\nmodule.exports = DatePickerIOS;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Components/DatePicker/DatePickerIOS.ios.js"],"names":["RCTDatePickerNativeComponent","Commands","DatePickerCommands","React","require","StyleSheet","View","invariant","DatePickerIOS","_picker","_onChange","event","nativeTimeStamp","nativeEvent","timestamp","props","onDateChange","Date","onChange","forceUpdate","date","propsTimeStamp","getTime","setNativeDate","initialDate","style","testID","picker","styles","datePickerIOS","undefined","locale","maximumDate","minimumDate","mode","minuteInterval","timeZoneOffsetInMinutes","Component","DefaultProps","create","height","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n// This is a controlled component version of RCTDatePickerIOS.\n\n'use strict';\n\nimport RCTDatePickerNativeComponent, {\n  Commands as DatePickerCommands,\n} from './RCTDatePickerNativeComponent';\nconst React = require('react');\nconst StyleSheet = require('../../StyleSheet/StyleSheet');\nconst View = require('../View/View');\n\nconst invariant = require('invariant');\n\nimport type {SyntheticEvent} from '../../Types/CoreEventTypes';\nimport type {ViewProps} from '../View/ViewPropTypes';\n\ntype Event = SyntheticEvent<\n  $ReadOnly<{|\n    timestamp: number,\n  |}>,\n>;\n\ntype Props = $ReadOnly<{|\n  ...ViewProps,\n\n  /**\n   * The currently selected date.\n   */\n  date?: ?Date,\n\n  /**\n   * Provides an initial value that will change when the user starts selecting\n   * a date. It is useful for simple use-cases where you do not want to deal\n   * with listening to events and updating the date prop to keep the\n   * controlled state in sync. The controlled state has known bugs which\n   * causes it to go out of sync with native. The initialDate prop is intended\n   * to allow you to have native be source of truth.\n   */\n  initialDate?: ?Date,\n\n  /**\n   * The date picker locale.\n   */\n  locale?: ?string,\n\n  /**\n   * Maximum date.\n   *\n   * Restricts the range of possible date/time values.\n   */\n  maximumDate?: ?Date,\n\n  /**\n   * Minimum date.\n   *\n   * Restricts the range of possible date/time values.\n   */\n  minimumDate?: ?Date,\n\n  /**\n   * The interval at which minutes can be selected.\n   */\n  minuteInterval?: ?(1 | 2 | 3 | 4 | 5 | 6 | 10 | 12 | 15 | 20 | 30),\n\n  /**\n   * The date picker mode.\n   */\n  mode?: ?('date' | 'time' | 'datetime'),\n\n  /**\n   * Date change handler.\n   *\n   * This is called when the user changes the date or time in the UI.\n   * The first and only argument is an Event. For getting the date the picker\n   * was changed to, use onDateChange instead.\n   */\n  onChange?: ?(event: Event) => void,\n\n  /**\n   * Date change handler.\n   *\n   * This is called when the user changes the date or time in the UI.\n   * The first and only argument is a Date object representing the new\n   * date and time.\n   */\n  onDateChange: (date: Date) => void,\n\n  /**\n   * Timezone offset in minutes.\n   *\n   * By default, the date picker will use the device's timezone. With this\n   * parameter, it is possible to force a certain timezone offset. For\n   * instance, to show times in Pacific Standard Time, pass -7 * 60.\n   */\n  timeZoneOffsetInMinutes?: ?number,\n|}>;\n\n/**\n * Use `DatePickerIOS` to render a date/time picker (selector) on iOS.  This is\n * a controlled component, so you must hook in to the `onDateChange` callback\n * and update the `date` prop in order for the component to update, otherwise\n * the user's change will be reverted immediately to reflect `props.date` as the\n * source of truth.\n */\nclass DatePickerIOS extends React.Component<Props> {\n  static DefaultProps: {|mode: $TEMPORARY$string<'datetime'>|} = {\n    mode: 'datetime',\n  };\n\n  _picker: ?React.ElementRef<typeof RCTDatePickerNativeComponent> = null;\n\n  componentDidUpdate() {\n    if (this.props.date) {\n      const propsTimeStamp = this.props.date.getTime();\n      if (this._picker) {\n        DatePickerCommands.setNativeDate(this._picker, propsTimeStamp);\n      }\n    }\n  }\n\n  _onChange = (event: Event) => {\n    const nativeTimeStamp = event.nativeEvent.timestamp;\n    this.props.onDateChange &&\n      this.props.onDateChange(new Date(nativeTimeStamp));\n    this.props.onChange && this.props.onChange(event);\n    this.forceUpdate();\n  };\n\n  render(): React.Node {\n    const props = this.props;\n    invariant(\n      props.date || props.initialDate,\n      'A selected date or initial date should be specified.',\n    );\n    return (\n      <View style={props.style}>\n        <RCTDatePickerNativeComponent\n          testID={props.testID}\n          ref={picker => {\n            this._picker = picker;\n          }}\n          style={styles.datePickerIOS}\n          date={\n            props.date\n              ? props.date.getTime()\n              : props.initialDate\n              ? props.initialDate.getTime()\n              : undefined\n          }\n          locale={\n            props.locale != null && props.locale !== ''\n              ? props.locale\n              : undefined\n          }\n          maximumDate={\n            props.maximumDate ? props.maximumDate.getTime() : undefined\n          }\n          minimumDate={\n            props.minimumDate ? props.minimumDate.getTime() : undefined\n          }\n          mode={props.mode}\n          minuteInterval={props.minuteInterval}\n          timeZoneOffsetInMinutes={props.timeZoneOffsetInMinutes}\n          onChange={this._onChange}\n          onStartShouldSetResponder={() => true}\n          onResponderTerminationRequest={() => false}\n        />\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  datePickerIOS: {\n    height: 216,\n  },\n});\n\nmodule.exports = DatePickerIOS;\n"]},"metadata":{},"sourceType":"module"}