{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nvar _jsxFileName = \"/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/IntegrationTests/WebSocketTest.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar React = require('react');\n\nvar ReactNative = require(\"react-native-web/dist/index\");\n\nvar View = ReactNative.View;\nvar TestModule = ReactNative.NativeModules.TestModule;\nvar DEFAULT_WS_URL = 'ws://localhost:5555/';\nvar WS_EVENTS = ['close', 'error', 'message', 'open'];\n\nvar WebSocketTest = function (_React$Component) {\n  _inherits(WebSocketTest, _React$Component);\n\n  var _super = _createSuper(WebSocketTest);\n\n  function WebSocketTest() {\n    var _this;\n\n    _classCallCheck(this, WebSocketTest);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      url: DEFAULT_WS_URL,\n      fetchStatus: null,\n      socket: null,\n      socketState: null,\n      lastSocketEvent: null,\n      lastMessage: null,\n      testMessage: 'testMessage',\n      testExpectedResponse: 'testMessage_response'\n    };\n\n    _this._waitFor = function (condition, timeout, callback) {\n      var remaining = timeout;\n\n      var timeoutFunction = function timeoutFunction() {\n        if (condition()) {\n          callback(true);\n          return;\n        }\n\n        remaining--;\n\n        if (remaining === 0) {\n          callback(false);\n        } else {\n          setTimeout(timeoutFunction, 1000);\n        }\n      };\n\n      setTimeout(timeoutFunction, 1000);\n    };\n\n    _this._connect = function () {\n      var socket = new WebSocket(_this.state.url);\n      WS_EVENTS.forEach(function (ev) {\n        return socket.addEventListener(ev, _this._onSocketEvent);\n      });\n\n      _this.setState({\n        socket: socket,\n        socketState: socket.readyState\n      });\n    };\n\n    _this._socketIsConnected = function () {\n      return _this.state.socketState === 1;\n    };\n\n    _this._socketIsDisconnected = function () {\n      return _this.state.socketState === 3;\n    };\n\n    _this._disconnect = function () {\n      if (!_this.state.socket) {\n        return;\n      }\n\n      _this.state.socket.close();\n    };\n\n    _this._onSocketEvent = function (event) {\n      var state = {\n        socketState: event.target.readyState,\n        lastSocketEvent: event.type\n      };\n\n      if (event.type === 'message') {\n        state.lastMessage = event.data;\n      }\n\n      _this.setState(state);\n    };\n\n    _this._sendText = function (text) {\n      if (!_this.state.socket) {\n        return;\n      }\n\n      _this.state.socket.send(text);\n    };\n\n    _this._sendTestMessage = function () {\n      _this._sendText(_this.state.testMessage);\n    };\n\n    _this._receivedTestExpectedResponse = function () {\n      return _this.state.lastMessage === _this.state.testExpectedResponse;\n    };\n\n    _this.testConnect = function () {\n      _this._connect();\n\n      _this._waitFor(_this._socketIsConnected, 5, function (connectSucceeded) {\n        if (!connectSucceeded) {\n          TestModule.markTestPassed(false);\n          return;\n        }\n\n        _this.testSendAndReceive();\n      });\n    };\n\n    _this.testSendAndReceive = function () {\n      _this._sendTestMessage();\n\n      _this._waitFor(_this._receivedTestExpectedResponse, 5, function (messageReceived) {\n        if (!messageReceived) {\n          TestModule.markTestPassed(false);\n          return;\n        }\n\n        _this.testDisconnect();\n      });\n    };\n\n    _this.testDisconnect = function () {\n      _this._disconnect();\n\n      _this._waitFor(_this._socketIsDisconnected, 5, function (disconnectSucceeded) {\n        TestModule.markTestPassed(disconnectSucceeded);\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(WebSocketTest, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.testConnect();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 12\n        }\n      });\n    }\n  }]);\n\n  return WebSocketTest;\n}(React.Component);\n\nWebSocketTest.displayName = 'WebSocketTest';\nmodule.exports = WebSocketTest;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/IntegrationTests/WebSocketTest.js"],"names":["React","require","View","ReactNative","TestModule","NativeModules","DEFAULT_WS_URL","WS_EVENTS","WebSocketTest","state","url","fetchStatus","socket","socketState","lastSocketEvent","lastMessage","testMessage","testExpectedResponse","_waitFor","condition","timeout","callback","remaining","timeoutFunction","setTimeout","_connect","WebSocket","forEach","ev","addEventListener","_onSocketEvent","setState","readyState","_socketIsConnected","_socketIsDisconnected","_disconnect","close","event","target","type","data","_sendText","text","send","_sendTestMessage","_receivedTestExpectedResponse","testConnect","connectSucceeded","markTestPassed","testSendAndReceive","messageReceived","testDisconnect","disconnectSucceeded","Component","displayName","module","exports"],"mappings":"AAUA;;;;;;;;;;;;;;;;;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;;;IAEOC,I,GAAQC,W,CAARD,I;IACAE,U,GAAcD,WAAW,CAACE,a,CAA1BD,U;AAEP,IAAME,cAAc,GAAG,sBAAvB;AAEA,IAAMC,SAAS,GAAG,CAAC,OAAD,EAAU,OAAV,EAAmB,SAAnB,EAA8B,MAA9B,CAAlB;;IAcMC,a;;;;;;;;;;;;;;;UACJC,K,GAAe;AACbC,MAAAA,GAAG,EAAEJ,cADQ;AAEbK,MAAAA,WAAW,EAAE,IAFA;AAGbC,MAAAA,MAAM,EAAE,IAHK;AAIbC,MAAAA,WAAW,EAAE,IAJA;AAKbC,MAAAA,eAAe,EAAE,IALJ;AAMbC,MAAAA,WAAW,EAAE,IANA;AAObC,MAAAA,WAAW,EAAE,aAPA;AAQbC,MAAAA,oBAAoB,EAAE;AART,K;;UAWfC,Q,GAAW,UAACC,SAAD,EAAiBC,OAAjB,EAA+BC,QAA/B,EAAiD;AAC1D,UAAIC,SAAS,GAAGF,OAAhB;;AACA,UAAMG,eAAe,GAAG,SAAlBA,eAAkB,GAAW;AACjC,YAAIJ,SAAS,EAAb,EAAiB;AACfE,UAAAA,QAAQ,CAAC,IAAD,CAAR;AACA;AACD;;AACDC,QAAAA,SAAS;;AACT,YAAIA,SAAS,KAAK,CAAlB,EAAqB;AACnBD,UAAAA,QAAQ,CAAC,KAAD,CAAR;AACD,SAFD,MAEO;AACLG,UAAAA,UAAU,CAACD,eAAD,EAAkB,IAAlB,CAAV;AACD;AACF,OAXD;;AAYAC,MAAAA,UAAU,CAACD,eAAD,EAAkB,IAAlB,CAAV;AACD,K;;UAEDE,Q,GAAW,YAAM;AACf,UAAMb,MAAM,GAAG,IAAIc,SAAJ,CAAc,MAAKjB,KAAL,CAAWC,GAAzB,CAAf;AACAH,MAAAA,SAAS,CAACoB,OAAV,CAAkB,UAAAC,EAAE;AAAA,eAAIhB,MAAM,CAACiB,gBAAP,CAAwBD,EAAxB,EAA4B,MAAKE,cAAjC,CAAJ;AAAA,OAApB;;AACA,YAAKC,QAAL,CAAc;AACZnB,QAAAA,MAAM,EAANA,MADY;AAEZC,QAAAA,WAAW,EAAED,MAAM,CAACoB;AAFR,OAAd;AAID,K;;UAEDC,kB,GAAqB,YAAM;AACzB,aAAO,MAAKxB,KAAL,CAAWI,WAAX,KAA2B,CAAlC;AACD,K;;UAEDqB,qB,GAAwB,YAAM;AAC5B,aAAO,MAAKzB,KAAL,CAAWI,WAAX,KAA2B,CAAlC;AACD,K;;UAEDsB,W,GAAc,YAAM;AAClB,UAAI,CAAC,MAAK1B,KAAL,CAAWG,MAAhB,EAAwB;AACtB;AACD;;AACD,YAAKH,KAAL,CAAWG,MAAX,CAAkBwB,KAAlB;AACD,K;;UAEDN,c,GAAiB,UAACO,KAAD,EAAgB;AAC/B,UAAM5B,KAAU,GAAG;AACjBI,QAAAA,WAAW,EAAEwB,KAAK,CAACC,MAAN,CAAaN,UADT;AAEjBlB,QAAAA,eAAe,EAAEuB,KAAK,CAACE;AAFN,OAAnB;;AAIA,UAAIF,KAAK,CAACE,IAAN,KAAe,SAAnB,EAA8B;AAC5B9B,QAAAA,KAAK,CAACM,WAAN,GAAoBsB,KAAK,CAACG,IAA1B;AACD;;AACD,YAAKT,QAAL,CAActB,KAAd;AACD,K;;UAEDgC,S,GAAY,UAACC,IAAD,EAAkB;AAC5B,UAAI,CAAC,MAAKjC,KAAL,CAAWG,MAAhB,EAAwB;AACtB;AACD;;AACD,YAAKH,KAAL,CAAWG,MAAX,CAAkB+B,IAAlB,CAAuBD,IAAvB;AACD,K;;UAEDE,gB,GAAmB,YAAM;AACvB,YAAKH,SAAL,CAAe,MAAKhC,KAAL,CAAWO,WAA1B;AACD,K;;UAED6B,6B,GAAgC,YAAM;AACpC,aAAO,MAAKpC,KAAL,CAAWM,WAAX,KAA2B,MAAKN,KAAL,CAAWQ,oBAA7C;AACD,K;;UAMD6B,W,GAA0B,YAAM;AAC9B,YAAKrB,QAAL;;AACA,YAAKP,QAAL,CAAc,MAAKe,kBAAnB,EAAuC,CAAvC,EAA0C,UAAAc,gBAAgB,EAAI;AAC5D,YAAI,CAACA,gBAAL,EAAuB;AACrB3C,UAAAA,UAAU,CAAC4C,cAAX,CAA0B,KAA1B;AACA;AACD;;AACD,cAAKC,kBAAL;AACD,OAND;AAOD,K;;UAEDA,kB,GAAiC,YAAM;AACrC,YAAKL,gBAAL;;AACA,YAAK1B,QAAL,CAAc,MAAK2B,6BAAnB,EAAkD,CAAlD,EAAqD,UAAAK,eAAe,EAAI;AACtE,YAAI,CAACA,eAAL,EAAsB;AACpB9C,UAAAA,UAAU,CAAC4C,cAAX,CAA0B,KAA1B;AACA;AACD;;AACD,cAAKG,cAAL;AACD,OAND;AAOD,K;;UAEDA,c,GAA6B,YAAM;AACjC,YAAKhB,WAAL;;AACA,YAAKjB,QAAL,CAAc,MAAKgB,qBAAnB,EAA0C,CAA1C,EAA6C,UAAAkB,mBAAmB,EAAI;AAClEhD,QAAAA,UAAU,CAAC4C,cAAX,CAA0BI,mBAA1B;AACD,OAFD;AAGD,K;;;;;;;WA/BD,6BAAoB;AAClB,WAAKN,WAAL;AACD;;;WA+BD,kBAAqB;AACnB,aAAO,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;;;EAlHyB9C,KAAK,CAACqD,S;;AAqHlC7C,aAAa,CAAC8C,WAAd,GAA4B,eAA5B;AAEAC,MAAM,CAACC,OAAP,GAAiBhD,aAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst React = require('react');\nconst ReactNative = require('react-native');\nconst {View} = ReactNative;\nconst {TestModule} = ReactNative.NativeModules;\n\nconst DEFAULT_WS_URL = 'ws://localhost:5555/';\n\nconst WS_EVENTS = ['close', 'error', 'message', 'open'];\n\ntype State = {\n  url: string,\n  fetchStatus: ?string,\n  socket: ?WebSocket,\n  socketState: ?number,\n  lastSocketEvent: ?string,\n  lastMessage: ?string | ?ArrayBuffer,\n  testMessage: string,\n  testExpectedResponse: string,\n  ...\n};\n\nclass WebSocketTest extends React.Component<{...}, State> {\n  state: State = {\n    url: DEFAULT_WS_URL,\n    fetchStatus: null,\n    socket: null,\n    socketState: null,\n    lastSocketEvent: null,\n    lastMessage: null,\n    testMessage: 'testMessage',\n    testExpectedResponse: 'testMessage_response',\n  };\n\n  _waitFor = (condition: any, timeout: any, callback: any) => {\n    let remaining = timeout;\n    const timeoutFunction = function() {\n      if (condition()) {\n        callback(true);\n        return;\n      }\n      remaining--;\n      if (remaining === 0) {\n        callback(false);\n      } else {\n        setTimeout(timeoutFunction, 1000);\n      }\n    };\n    setTimeout(timeoutFunction, 1000);\n  };\n\n  _connect = () => {\n    const socket = new WebSocket(this.state.url);\n    WS_EVENTS.forEach(ev => socket.addEventListener(ev, this._onSocketEvent));\n    this.setState({\n      socket,\n      socketState: socket.readyState,\n    });\n  };\n\n  _socketIsConnected = () => {\n    return this.state.socketState === 1; //'OPEN'\n  };\n\n  _socketIsDisconnected = () => {\n    return this.state.socketState === 3; //'CLOSED'\n  };\n\n  _disconnect = () => {\n    if (!this.state.socket) {\n      return;\n    }\n    this.state.socket.close();\n  };\n\n  _onSocketEvent = (event: any) => {\n    const state: any = {\n      socketState: event.target.readyState,\n      lastSocketEvent: event.type,\n    };\n    if (event.type === 'message') {\n      state.lastMessage = event.data;\n    }\n    this.setState(state);\n  };\n\n  _sendText = (text: string) => {\n    if (!this.state.socket) {\n      return;\n    }\n    this.state.socket.send(text);\n  };\n\n  _sendTestMessage = () => {\n    this._sendText(this.state.testMessage);\n  };\n\n  _receivedTestExpectedResponse = () => {\n    return this.state.lastMessage === this.state.testExpectedResponse;\n  };\n\n  componentDidMount() {\n    this.testConnect();\n  }\n\n  testConnect: () => void = () => {\n    this._connect();\n    this._waitFor(this._socketIsConnected, 5, connectSucceeded => {\n      if (!connectSucceeded) {\n        TestModule.markTestPassed(false);\n        return;\n      }\n      this.testSendAndReceive();\n    });\n  };\n\n  testSendAndReceive: () => void = () => {\n    this._sendTestMessage();\n    this._waitFor(this._receivedTestExpectedResponse, 5, messageReceived => {\n      if (!messageReceived) {\n        TestModule.markTestPassed(false);\n        return;\n      }\n      this.testDisconnect();\n    });\n  };\n\n  testDisconnect: () => void = () => {\n    this._disconnect();\n    this._waitFor(this._socketIsDisconnected, 5, disconnectSucceeded => {\n      TestModule.markTestPassed(disconnectSucceeded);\n    });\n  };\n\n  render(): React.Node {\n    return <View />;\n  }\n}\n\nWebSocketTest.displayName = 'WebSocketTest';\n\nmodule.exports = WebSocketTest;\n"]},"metadata":{},"sourceType":"script"}