{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ios_plugins_1 = require(\"../plugins/ios-plugins\");\n\nvar WarningAggregator = __importStar(require(\"../utils/warnings\"));\n\nexports.withDeviceFamily = function (config) {\n  return ios_plugins_1.withXcodeProject(config, function _callee(config) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(setDeviceFamily(config, {\n              project: config.modResults\n            }));\n\n          case 2:\n            config.modResults = _context.sent;\n            return _context.abrupt(\"return\", config);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  });\n};\n\nfunction getSupportsTablet(config) {\n  var _a;\n\n  return !!((_a = config.ios) === null || _a === void 0 ? void 0 : _a.supportsTablet);\n}\n\nexports.getSupportsTablet = getSupportsTablet;\n\nfunction getIsTabletOnly(config) {\n  var _a;\n\n  return !!((_a = config === null || config === void 0 ? void 0 : config.ios) === null || _a === void 0 ? void 0 : _a.isTabletOnly);\n}\n\nexports.getIsTabletOnly = getIsTabletOnly;\n\nfunction getDeviceFamilies(config) {\n  var _a;\n\n  var supportsTablet = getSupportsTablet(config);\n  var isTabletOnly = getIsTabletOnly(config);\n\n  if (isTabletOnly && ((_a = config.ios) === null || _a === void 0 ? void 0 : _a.supportsTablet) === false) {\n    WarningAggregator.addWarningIOS('device-family', \"Found contradictory values: `{ ios: { isTabletOnly: true, supportsTablet: false } }`. Using `{ isTabletOnly: true }`.\");\n  }\n\n  if (isTabletOnly) {\n    return [2];\n  } else if (supportsTablet) {\n    return [1, 2];\n  } else {\n    return [1];\n  }\n}\n\nexports.getDeviceFamilies = getDeviceFamilies;\n\nfunction formatDeviceFamilies(deviceFamilies) {\n  return \"\\\"\" + deviceFamilies.join(',') + \"\\\"\";\n}\n\nexports.formatDeviceFamilies = formatDeviceFamilies;\n\nfunction setDeviceFamily(config, _ref) {\n  var project = _ref.project;\n  var deviceFamilies = formatDeviceFamilies(getDeviceFamilies(config));\n  var configurations = project.pbxXCBuildConfigurationSection();\n\n  for (var _i = 0, _Object$values = Object.values(configurations || {}); _i < _Object$values.length; _i++) {\n    var _ref2 = _Object$values[_i];\n    var buildSettings = _ref2.buildSettings;\n\n    if (typeof (buildSettings === null || buildSettings === void 0 ? void 0 : buildSettings.PRODUCT_NAME) !== 'undefined') {\n      buildSettings.TARGETED_DEVICE_FAMILY = deviceFamilies;\n    }\n  }\n\n  return project;\n}\n\nexports.setDeviceFamily = setDeviceFamily;","map":{"version":3,"sources":["../../src/ios/DeviceFamily.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAIA,IAAA,aAAA,GAAA,OAAA,0BAAA;;AACA,IAAA,iBAAA,GAAA,YAAA,CAAA,OAAA,qBAAA,CAAA;;AAEa,OAAA,CAAA,gBAAA,GAAiC,UAAA,MAAM,EAAG;AACrD,SAAO,aAAA,CAAA,gBAAA,CAAiB,MAAjB,EAAyB,iBAAM,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACJ,eAAe,CAAC,MAAD,EAAS;AAChD,cAAA,OAAO,EAAE,MAAM,CAAC;AADgC,aAAT,CADX;;AAAA;AAC9B,YAAA,MAAM,CAAC,UADuB;AAAA,6CAIvB,MAJuB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAzB,CAAP;AAMD,CAPY;;AASb,SAAgB,iBAAhB,CAAkC,MAAlC,EAAiE;;;AAC/D,SAAO,CAAC,EAAA,CAAA,EAAA,GAAC,MAAM,CAAC,GAAR,MAAW,IAAX,IAAW,EAAA,KAAA,KAAA,CAAX,GAAW,KAAA,CAAX,GAAW,EAAA,CAAE,cAAb,CAAR;AACD;;AAFD,OAAA,CAAA,iBAAA,GAAA,iBAAA;;AAIA,SAAgB,eAAhB,CAAgC,MAAhC,EAA+D;;;AAC7D,SAAO,CAAC,EAAA,CAAA,EAAA,GAAC,MAAM,KAAA,IAAN,IAAA,MAAM,KAAA,KAAA,CAAN,GAAM,KAAA,CAAN,GAAA,MAAM,CAAE,GAAT,MAAY,IAAZ,IAAY,EAAA,KAAA,KAAA,CAAZ,GAAY,KAAA,CAAZ,GAAY,EAAA,CAAE,YAAd,CAAR;AACD;;AAFD,OAAA,CAAA,eAAA,GAAA,eAAA;;AAIA,SAAgB,iBAAhB,CAAkC,MAAlC,EAAiE;;;AAC/D,MAAM,cAAc,GAAG,iBAAiB,CAAC,MAAD,CAAxC;AACA,MAAM,YAAY,GAAG,eAAe,CAAC,MAAD,CAApC;;AAEA,MAAI,YAAY,IAAI,CAAA,CAAA,EAAA,GAAA,MAAM,CAAC,GAAP,MAAU,IAAV,IAAU,EAAA,KAAA,KAAA,CAAV,GAAU,KAAA,CAAV,GAAU,EAAA,CAAE,cAAZ,MAA+B,KAAnD,EAA0D;AACxD,IAAA,iBAAiB,CAAC,aAAlB,CACE,eADF;AAID;;AAGD,MAAI,YAAJ,EAAkB;AAChB,WAAO,CAAC,CAAD,CAAP;AACD,GAFD,MAEO,IAAI,cAAJ,EAAoB;AACzB,WAAO,CAAC,CAAD,EAAI,CAAJ,CAAP;AACD,GAFM,MAEA;AAEL,WAAO,CAAC,CAAD,CAAP;AACD;AACF;;AApBD,OAAA,CAAA,iBAAA,GAAA,iBAAA;;AA2BA,SAAgB,oBAAhB,CAAqC,cAArC,EAA6D;AAC3D,gBAAW,cAAc,CAAC,IAAf,CAAoB,GAApB,CAAX;AACD;;AAFD,OAAA,CAAA,oBAAA,GAAA,oBAAA;;AAOA,SAAgB,eAAhB,CACE,MADF,QAEwC;AAAA,MAApC,OAAoC,QAApC,OAAoC;AAEtC,MAAM,cAAc,GAAG,oBAAoB,CAAC,iBAAiB,CAAC,MAAD,CAAlB,CAA3C;AAEA,MAAM,cAAc,GAAG,OAAO,CAAC,8BAAR,EAAvB;;AAEA,oCAAgC,MAAM,CAAC,MAAP,CAAc,cAAc,IAAI,EAAhC,CAAhC,oCAAqE;AAAA;AAAA,QAAxD,aAAwD,SAAxD,aAAwD;;AAGnE,QAAI,QAAO,aAAa,KAAA,IAAb,IAAA,aAAa,KAAA,KAAA,CAAb,GAAa,KAAA,CAAb,GAAA,aAAa,CAAE,YAAtB,MAAuC,WAA3C,EAAwD;AACtD,MAAA,aAAa,CAAC,sBAAd,GAAuC,cAAvC;AACD;AACF;;AAED,SAAO,OAAP;AACD;;AAjBD,OAAA,CAAA,eAAA,GAAA,eAAA","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport { XcodeProject } from 'xcode';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withXcodeProject } from '../plugins/ios-plugins';\nimport * as WarningAggregator from '../utils/warnings';\n\nexport const withDeviceFamily: ConfigPlugin = config => {\n  return withXcodeProject(config, async config => {\n    config.modResults = await setDeviceFamily(config, {\n      project: config.modResults,\n    });\n    return config;\n  });\n};\n\nexport function getSupportsTablet(config: Pick<ExpoConfig, 'ios'>): boolean {\n  return !!config.ios?.supportsTablet;\n}\n\nexport function getIsTabletOnly(config: Pick<ExpoConfig, 'ios'>): boolean {\n  return !!config?.ios?.isTabletOnly;\n}\n\nexport function getDeviceFamilies(config: Pick<ExpoConfig, 'ios'>): number[] {\n  const supportsTablet = getSupportsTablet(config);\n  const isTabletOnly = getIsTabletOnly(config);\n\n  if (isTabletOnly && config.ios?.supportsTablet === false) {\n    WarningAggregator.addWarningIOS(\n      'device-family',\n      `Found contradictory values: \\`{ ios: { isTabletOnly: true, supportsTablet: false } }\\`. Using \\`{ isTabletOnly: true }\\`.`\n    );\n  }\n\n  // 1 is iPhone, 2 is iPad\n  if (isTabletOnly) {\n    return [2];\n  } else if (supportsTablet) {\n    return [1, 2];\n  } else {\n    // is iPhone only\n    return [1];\n  }\n}\n\n/**\n * Wrapping the families in double quotes is the only way to set a value with a comma in it.\n *\n * @param deviceFamilies\n */\nexport function formatDeviceFamilies(deviceFamilies: number[]): string {\n  return `\"${deviceFamilies.join(',')}\"`;\n}\n\n/**\n * Add to pbxproj under TARGETED_DEVICE_FAMILY\n */\nexport function setDeviceFamily(\n  config: Pick<ExpoConfig, 'ios'>,\n  { project }: { project: XcodeProject }\n): XcodeProject {\n  const deviceFamilies = formatDeviceFamilies(getDeviceFamilies(config));\n\n  const configurations = project.pbxXCBuildConfigurationSection();\n  // @ts-ignore\n  for (const { buildSettings } of Object.values(configurations || {})) {\n    // Guessing that this is the best way to emulate Xcode.\n    // Using `project.addToBuildSettings` modifies too many targets.\n    if (typeof buildSettings?.PRODUCT_NAME !== 'undefined') {\n      buildSettings.TARGETED_DEVICE_FAMILY = deviceFamilies;\n    }\n  }\n\n  return project;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}