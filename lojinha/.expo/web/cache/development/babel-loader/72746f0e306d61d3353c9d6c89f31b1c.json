{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _copyAndReplace = _interopRequireDefault(require(\"../copyAndReplace\"));\n\nvar _promptSync = _interopRequireDefault(require(\"./promptSync\"));\n\nvar _walk = _interopRequireDefault(require(\"../walk\"));\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar prompt = (0, _promptSync.default)();\n\nfunction copyProjectTemplateAndReplace(srcPath, destPath, newProjectName) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n  if (!srcPath) {\n    throw new Error('Need a path to copy from');\n  }\n\n  if (!destPath) {\n    throw new Error('Need a path to copy to');\n  }\n\n  if (!newProjectName) {\n    throw new Error('Need a project name');\n  }\n\n  (0, _walk.default)(srcPath).forEach(function (absoluteSrcFilePath) {\n    if (options.upgrade) {\n      var fileName = _path().default.basename(absoluteSrcFilePath);\n\n      if (fileName === 'index.ios.js') {\n        return;\n      }\n\n      if (fileName === 'index.android.js') {\n        return;\n      }\n\n      if (fileName === 'index.js') {\n        return;\n      }\n\n      if (fileName === 'App.js') {\n        return;\n      }\n    }\n\n    var relativeFilePath = translateFilePath(_path().default.relative(srcPath, absoluteSrcFilePath)).replace(/HelloWorld/g, newProjectName).replace(/helloworld/g, newProjectName.toLowerCase());\n\n    if (options.ignorePaths) {\n      if (!Array.isArray(options.ignorePaths)) {\n        throw new Error('options.ignorePaths must be an array');\n      }\n\n      if (options.ignorePaths.some(function (ignorePath) {\n        return ignorePath === relativeFilePath;\n      })) {\n        return;\n      }\n    }\n\n    var contentChangedCallback = null;\n\n    if (options.upgrade && !options.force) {\n      contentChangedCallback = function contentChangedCallback(_destPath, contentChanged) {\n        return upgradeFileContentChangedCallback(absoluteSrcFilePath, relativeFilePath, contentChanged);\n      };\n    }\n\n    (0, _copyAndReplace.default)(absoluteSrcFilePath, _path().default.resolve(destPath, relativeFilePath), {\n      'Hello App Display Name': options.displayName || newProjectName,\n      HelloWorld: newProjectName,\n      helloworld: newProjectName.toLowerCase()\n    }, contentChangedCallback);\n  });\n}\n\nfunction translateFilePath(filePath) {\n  if (!filePath) {\n    return filePath;\n  }\n\n  return filePath.replace('_BUCK', 'BUCK').replace('_gitignore', '.gitignore').replace('_gitattributes', '.gitattributes').replace('_babelrc', '.babelrc').replace('_eslintrc.js', '.eslintrc.js').replace('_flowconfig', '.flowconfig').replace('_buckconfig', '.buckconfig').replace('_prettierrc.js', '.prettierrc.js').replace('_watchmanconfig', '.watchmanconfig');\n}\n\nfunction upgradeFileContentChangedCallback(absoluteSrcFilePath, relativeDestPath, contentChanged) {\n  if (contentChanged === 'new') {\n    _cliTools().logger.info(_chalk().default.bold('new') + \" \" + relativeDestPath);\n\n    return 'overwrite';\n  }\n\n  if (contentChanged === 'changed') {\n    _cliTools().logger.info(_chalk().default.bold(relativeDestPath) + \" \" + (\"has changed in the new version.\\nDo you want to keep your \" + relativeDestPath + \" or replace it with the \") + 'latest version?\\nIf you ever made any changes ' + \"to this file, you'll probably want to keep it.\\n\" + (\"You can see the new version here: \" + absoluteSrcFilePath + \"\\n\") + (\"Do you want to replace \" + relativeDestPath + \"? \") + 'Answer y to replace, n to keep your version: ');\n\n    var answer = prompt();\n\n    if (answer === 'y') {\n      _cliTools().logger.info(\"Replacing \" + relativeDestPath);\n\n      return 'overwrite';\n    }\n\n    _cliTools().logger.info(\"Keeping your \" + relativeDestPath);\n\n    return 'keep';\n  }\n\n  if (contentChanged === 'identical') {\n    return 'keep';\n  }\n\n  throw new Error(\"Unknown file changed state: \" + relativeDestPath + \", \" + contentChanged);\n}\n\nvar _default = copyProjectTemplateAndReplace;\nexports.default = _default;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli/build/tools/generator/copyProjectTemplateAndReplace.js"],"names":["Object","defineProperty","exports","value","default","_chalk","data","_interopRequireDefault","require","_path","_copyAndReplace","_promptSync","_walk","_cliTools","obj","__esModule","prompt","copyProjectTemplateAndReplace","srcPath","destPath","newProjectName","options","Error","forEach","absoluteSrcFilePath","upgrade","fileName","basename","relativeFilePath","translateFilePath","relative","replace","toLowerCase","ignorePaths","Array","isArray","some","ignorePath","contentChangedCallback","force","_destPath","contentChanged","upgradeFileContentChangedCallback","resolve","displayName","HelloWorld","helloworld","filePath","relativeDestPath","logger","info","bold","answer","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require(\"chalk\"));\n\n  _chalk = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  const data = _interopRequireDefault(require(\"path\"));\n\n  _path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _copyAndReplace = _interopRequireDefault(require(\"../copyAndReplace\"));\n\nvar _promptSync = _interopRequireDefault(require(\"./promptSync\"));\n\nvar _walk = _interopRequireDefault(require(\"../walk\"));\n\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\nconst prompt = (0, _promptSync.default)();\n\n/**\n * Util for creating a new React Native project.\n * Copy the project from a template and use the correct project name in\n * all files.\n * @param srcPath e.g. '/Users/martin/AwesomeApp/node_modules/react-native/template'\n * @param destPath e.g. '/Users/martin/AwesomeApp'\n * @param newProjectName e.g. 'AwesomeApp'\n * @param options e.g. {\n *          upgrade: true,\n *          force: false,\n *          displayName: 'Hello World',\n *          ignorePaths: ['template/file/to/ignore.md'],\n *        }\n */\nfunction copyProjectTemplateAndReplace(srcPath, destPath, newProjectName, options = {}) {\n  if (!srcPath) {\n    throw new Error('Need a path to copy from');\n  }\n\n  if (!destPath) {\n    throw new Error('Need a path to copy to');\n  }\n\n  if (!newProjectName) {\n    throw new Error('Need a project name');\n  }\n\n  (0, _walk.default)(srcPath).forEach(absoluteSrcFilePath => {\n    // 'react-native upgrade'\n    if (options.upgrade) {\n      // Don't upgrade these files\n      const fileName = _path().default.basename(absoluteSrcFilePath); // This also includes __tests__/index.*.js\n\n\n      if (fileName === 'index.ios.js') {\n        return;\n      }\n\n      if (fileName === 'index.android.js') {\n        return;\n      }\n\n      if (fileName === 'index.js') {\n        return;\n      }\n\n      if (fileName === 'App.js') {\n        return;\n      }\n    }\n\n    const relativeFilePath = translateFilePath(_path().default.relative(srcPath, absoluteSrcFilePath)).replace(/HelloWorld/g, newProjectName).replace(/helloworld/g, newProjectName.toLowerCase()); // Templates may contain files that we don't want to copy.\n    // Examples:\n    // - Dummy package.json file included in the template only for publishing to npm\n    // - Docs specific to the template (.md files)\n\n    if (options.ignorePaths) {\n      if (!Array.isArray(options.ignorePaths)) {\n        throw new Error('options.ignorePaths must be an array');\n      }\n\n      if (options.ignorePaths.some(ignorePath => ignorePath === relativeFilePath)) {\n        // Skip copying this file\n        return;\n      }\n    }\n\n    let contentChangedCallback = null;\n\n    if (options.upgrade && !options.force) {\n      contentChangedCallback = (_destPath, contentChanged) => upgradeFileContentChangedCallback(absoluteSrcFilePath, relativeFilePath, contentChanged);\n    }\n\n    (0, _copyAndReplace.default)(absoluteSrcFilePath, _path().default.resolve(destPath, relativeFilePath), {\n      'Hello App Display Name': options.displayName || newProjectName,\n      HelloWorld: newProjectName,\n      helloworld: newProjectName.toLowerCase()\n    }, contentChangedCallback);\n  });\n}\n/**\n * There are various files in the templates folder in the RN repo. We want\n * these to be ignored by tools when working with React Native itself.\n * Example: _babelrc file is ignored by Babel, renamed to .babelrc inside\n *          a real app folder.\n * This is especially important for .gitignore because npm has some special\n * behavior of automatically renaming .gitignore to .npmignore.\n */\n\n\nfunction translateFilePath(filePath) {\n  if (!filePath) {\n    return filePath;\n  }\n\n  return filePath.replace('_BUCK', 'BUCK').replace('_gitignore', '.gitignore').replace('_gitattributes', '.gitattributes').replace('_babelrc', '.babelrc').replace('_eslintrc.js', '.eslintrc.js').replace('_flowconfig', '.flowconfig').replace('_buckconfig', '.buckconfig').replace('_prettierrc.js', '.prettierrc.js').replace('_watchmanconfig', '.watchmanconfig');\n}\n\nfunction upgradeFileContentChangedCallback(absoluteSrcFilePath, relativeDestPath, contentChanged) {\n  if (contentChanged === 'new') {\n    _cliTools().logger.info(`${_chalk().default.bold('new')} ${relativeDestPath}`);\n\n    return 'overwrite';\n  }\n\n  if (contentChanged === 'changed') {\n    _cliTools().logger.info(`${_chalk().default.bold(relativeDestPath)} ` + `has changed in the new version.\\nDo you want to keep your ${relativeDestPath} or replace it with the ` + 'latest version?\\nIf you ever made any changes ' + \"to this file, you'll probably want to keep it.\\n\" + `You can see the new version here: ${absoluteSrcFilePath}\\n` + `Do you want to replace ${relativeDestPath}? ` + 'Answer y to replace, n to keep your version: ');\n\n    const answer = prompt();\n\n    if (answer === 'y') {\n      _cliTools().logger.info(`Replacing ${relativeDestPath}`);\n\n      return 'overwrite';\n    }\n\n    _cliTools().logger.info(`Keeping your ${relativeDestPath}`);\n\n    return 'keep';\n  }\n\n  if (contentChanged === 'identical') {\n    return 'keep';\n  }\n\n  throw new Error(`Unknown file changed state: ${relativeDestPath}, ${contentChanged}`);\n}\n\nvar _default = copyProjectTemplateAndReplace;\nexports.default = _default;\n\n//# sourceMappingURL=copyProjectTemplateAndReplace.js.map"]},"metadata":{},"sourceType":"script"}