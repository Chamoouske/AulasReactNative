{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _execa() {\n  var data = _interopRequireDefault(require(\"execa\"));\n\n  _execa = function _execa() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction tryLaunchAppOnDevice(device, packageName, adbPath, args) {\n  var appId = args.appId,\n      appIdSuffix = args.appIdSuffix;\n  var packageNameWithSuffix = [appId || packageName, appIdSuffix].filter(Boolean).join('.');\n  var activityToLaunch = args.mainActivity.includes('.') ? args.mainActivity : [packageName, args.mainActivity].filter(Boolean).join('.');\n\n  try {\n    var adbArgs = ['shell', 'am', 'start', '-n', packageNameWithSuffix + \"/\" + activityToLaunch];\n\n    if (device) {\n      adbArgs.unshift('-s', device);\n\n      _cliTools().logger.info(\"Starting the app on \\\"\" + device + \"\\\"...\");\n    } else {\n      _cliTools().logger.info('Starting the app...');\n    }\n\n    _cliTools().logger.debug(\"Running command \\\"\" + adbPath + \" \" + adbArgs.join(' ') + \"\\\"\");\n\n    _execa().default.sync(adbPath, adbArgs, {\n      stdio: 'inherit'\n    });\n  } catch (error) {\n    throw new (_cliTools().CLIError)('Failed to start the app.', error);\n  }\n}\n\nvar _default = tryLaunchAppOnDevice;\nexports.default = _default;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryLaunchAppOnDevice.js"],"names":["Object","defineProperty","exports","value","default","_execa","data","_interopRequireDefault","require","_cliTools","obj","__esModule","tryLaunchAppOnDevice","device","packageName","adbPath","args","appId","appIdSuffix","packageNameWithSuffix","filter","Boolean","join","activityToLaunch","mainActivity","includes","adbArgs","unshift","logger","info","debug","sync","stdio","error","CLIError","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,SAASC,MAAT,GAAkB;AAChB,MAAMC,IAAI,GAAGC,sBAAsB,CAACC,OAAO,CAAC,OAAD,CAAR,CAAnC;;AAEAH,EAAAA,MAAM,GAAG,kBAAY;AACnB,WAAOC,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,SAASG,SAAT,GAAqB;AACnB,MAAMH,IAAI,GAAGE,OAAO,CAAC,mCAAD,CAApB;;AAEAC,EAAAA,SAAS,GAAG,qBAAY;AACtB,WAAOH,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,SAASC,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEN,IAAAA,OAAO,EAAEM;AAAX,GAArC;AAAwD;;AAS/F,SAASE,oBAAT,CAA8BC,MAA9B,EAAsCC,WAAtC,EAAmDC,OAAnD,EAA4DC,IAA5D,EAAkE;AAAA,MAE9DC,KAF8D,GAI5DD,IAJ4D,CAE9DC,KAF8D;AAAA,MAG9DC,WAH8D,GAI5DF,IAJ4D,CAG9DE,WAH8D;AAKhE,MAAMC,qBAAqB,GAAG,CAACF,KAAK,IAAIH,WAAV,EAAuBI,WAAvB,EAAoCE,MAApC,CAA2CC,OAA3C,EAAoDC,IAApD,CAAyD,GAAzD,CAA9B;AACA,MAAMC,gBAAgB,GAAGP,IAAI,CAACQ,YAAL,CAAkBC,QAAlB,CAA2B,GAA3B,IAAkCT,IAAI,CAACQ,YAAvC,GAAsD,CAACV,WAAD,EAAcE,IAAI,CAACQ,YAAnB,EAAiCJ,MAAjC,CAAwCC,OAAxC,EAAiDC,IAAjD,CAAsD,GAAtD,CAA/E;;AAEA,MAAI;AACF,QAAMI,OAAO,GAAG,CAAC,OAAD,EAAU,IAAV,EAAgB,OAAhB,EAAyB,IAAzB,EAAkCP,qBAAlC,SAA2DI,gBAA3D,CAAhB;;AAEA,QAAIV,MAAJ,EAAY;AACVa,MAAAA,OAAO,CAACC,OAAR,CAAgB,IAAhB,EAAsBd,MAAtB;;AAEAJ,MAAAA,SAAS,GAAGmB,MAAZ,CAAmBC,IAAnB,4BAAgDhB,MAAhD;AACD,KAJD,MAIO;AACLJ,MAAAA,SAAS,GAAGmB,MAAZ,CAAmBC,IAAnB,CAAwB,qBAAxB;AACD;;AAEDpB,IAAAA,SAAS,GAAGmB,MAAZ,CAAmBE,KAAnB,wBAA6Cf,OAA7C,SAAwDW,OAAO,CAACJ,IAAR,CAAa,GAAb,CAAxD;;AAEAjB,IAAAA,MAAM,GAAGD,OAAT,CAAiB2B,IAAjB,CAAsBhB,OAAtB,EAA+BW,OAA/B,EAAwC;AACtCM,MAAAA,KAAK,EAAE;AAD+B,KAAxC;AAGD,GAhBD,CAgBE,OAAOC,KAAP,EAAc;AACd,UAAM,KAAKxB,SAAS,GAAGyB,QAAjB,EAA2B,0BAA3B,EAAuDD,KAAvD,CAAN;AACD;AACF;;AAED,IAAIE,QAAQ,GAAGvB,oBAAf;AACAV,OAAO,CAACE,OAAR,GAAkB+B,QAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _execa() {\n  const data = _interopRequireDefault(require(\"execa\"));\n\n  _execa = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction tryLaunchAppOnDevice(device, packageName, adbPath, args) {\n  const {\n    appId,\n    appIdSuffix\n  } = args;\n  const packageNameWithSuffix = [appId || packageName, appIdSuffix].filter(Boolean).join('.');\n  const activityToLaunch = args.mainActivity.includes('.') ? args.mainActivity : [packageName, args.mainActivity].filter(Boolean).join('.');\n\n  try {\n    const adbArgs = ['shell', 'am', 'start', '-n', `${packageNameWithSuffix}/${activityToLaunch}`];\n\n    if (device) {\n      adbArgs.unshift('-s', device);\n\n      _cliTools().logger.info(`Starting the app on \"${device}\"...`);\n    } else {\n      _cliTools().logger.info('Starting the app...');\n    }\n\n    _cliTools().logger.debug(`Running command \"${adbPath} ${adbArgs.join(' ')}\"`);\n\n    _execa().default.sync(adbPath, adbArgs, {\n      stdio: 'inherit'\n    });\n  } catch (error) {\n    throw new (_cliTools().CLIError)('Failed to start the app.', error);\n  }\n}\n\nvar _default = tryLaunchAppOnDevice;\nexports.default = _default;\n\n//# sourceMappingURL=tryLaunchAppOnDevice.js.map"]},"metadata":{},"sourceType":"script"}