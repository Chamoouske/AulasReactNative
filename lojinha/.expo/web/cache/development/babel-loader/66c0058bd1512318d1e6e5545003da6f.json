{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = findLineToAddPod;\n\nfunction findLineToAddPod(podLines, firstTargetLine) {\n  var nextTarget = /target ('|\")\\w+('|\") do/g;\n  var endOfCurrentTarget = /^\\s*end\\s*$/g;\n  var functionDefinition = /^\\s*[a-z_]+\\s+do(\\s+\\|[a-z]+\\|)?/g;\n\n  for (var i = firstTargetLine; i < podLines.length - 1; i++) {\n    var matchNextConstruct = podLines[i].match(nextTarget) || podLines[i].match(functionDefinition);\n    var matchEnd = podLines[i].match(endOfCurrentTarget);\n\n    if (matchNextConstruct || matchEnd) {\n      var firstNonSpaceCharacter = podLines[i].search(/\\S/);\n      return {\n        indentation: firstNonSpaceCharacter + (matchEnd ? 2 : 0),\n        line: i\n      };\n    }\n  }\n\n  return null;\n}","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli-platform-ios/build/link-pods/findLineToAddPod.js"],"names":["Object","defineProperty","exports","value","default","findLineToAddPod","podLines","firstTargetLine","nextTarget","endOfCurrentTarget","functionDefinition","i","length","matchNextConstruct","match","matchEnd","firstNonSpaceCharacter","search","indentation","line"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,gBAAlB;;AASA,SAASA,gBAAT,CAA0BC,QAA1B,EAAoCC,eAApC,EAAqD;AAEnD,MAAMC,UAAU,GAAG,0BAAnB;AAEA,MAAMC,kBAAkB,GAAG,cAA3B;AAEA,MAAMC,kBAAkB,GAAG,mCAA3B;;AAEA,OAAK,IAAIC,CAAC,GAAGJ,eAAb,EAA8BI,CAAC,GAAGL,QAAQ,CAACM,MAAT,GAAkB,CAApD,EAAuDD,CAAC,EAAxD,EAA4D;AAC1D,QAAME,kBAAkB,GAAGP,QAAQ,CAACK,CAAD,CAAR,CAAYG,KAAZ,CAAkBN,UAAlB,KAAiCF,QAAQ,CAACK,CAAD,CAAR,CAAYG,KAAZ,CAAkBJ,kBAAlB,CAA5D;AACA,QAAMK,QAAQ,GAAGT,QAAQ,CAACK,CAAD,CAAR,CAAYG,KAAZ,CAAkBL,kBAAlB,CAAjB;;AAEA,QAAII,kBAAkB,IAAIE,QAA1B,EAAoC;AAClC,UAAMC,sBAAsB,GAAGV,QAAQ,CAACK,CAAD,CAAR,CAAYM,MAAZ,CAAmB,IAAnB,CAA/B;AACA,aAAO;AACLC,QAAAA,WAAW,EAAEF,sBAAsB,IAAID,QAAQ,GAAG,CAAH,GAAO,CAAnB,CAD9B;AAELI,QAAAA,IAAI,EAAER;AAFD,OAAP;AAID;AACF;;AAED,SAAO,IAAP;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = findLineToAddPod;\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction findLineToAddPod(podLines, firstTargetLine) {\n  // match line with new target: target 'project_name' do (most likely target inside podfile main target)\n  const nextTarget = /target ('|\")\\w+('|\") do/g; // match line that has only 'end' (if we don't catch new target or function, this would mean this is end of current target)\n\n  const endOfCurrentTarget = /^\\s*end\\s*$/g; // match function definition, like: post_install do |installer| (some Podfiles have function defined inside main target\n\n  const functionDefinition = /^\\s*[a-z_]+\\s+do(\\s+\\|[a-z]+\\|)?/g;\n\n  for (let i = firstTargetLine; i < podLines.length - 1; i++) {\n    const matchNextConstruct = podLines[i].match(nextTarget) || podLines[i].match(functionDefinition);\n    const matchEnd = podLines[i].match(endOfCurrentTarget);\n\n    if (matchNextConstruct || matchEnd) {\n      const firstNonSpaceCharacter = podLines[i].search(/\\S/);\n      return {\n        indentation: firstNonSpaceCharacter + (matchEnd ? 2 : 0),\n        line: i\n      };\n    }\n  }\n\n  return null;\n}\n\n//# sourceMappingURL=findLineToAddPod.js.map"]},"metadata":{},"sourceType":"script"}