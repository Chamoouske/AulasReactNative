{"ast":null,"code":"'use strict';\n\ndescribe('truncate', function () {\n  var truncate = require(\"../truncate\");\n\n  it('should truncate', function () {\n    expect(truncate('Hello, world.', 5)).toBe('He...');\n  });\n  it('should not truncate', function () {\n    expect(truncate('Hello, world.', 50)).toBe('Hello, world.');\n  });\n  it('should not truncate more than minDelta chars.', function () {\n    expect(truncate('Hello, world.', 7, {\n      minDelta: 10\n    })).toBe('Hello, world.');\n    expect(truncate('Hello, world.', 7, {\n      minDelta: 9\n    })).toBe('Hell...');\n  });\n  it('should break in the middle of words', function () {\n    expect(truncate('Hello, world.  How are you?', 18, {\n      breakOnWords: false\n    })).toBe('Hello, world.  H...');\n    expect(truncate('Hello, world.\\nHow are you?', 18, {\n      breakOnWords: false\n    })).toBe('Hello, world.\\nHo...');\n  });\n  it('should add another character if the truncations happens in the middle of a wide char', function () {\n    expect(truncate('Hello, world.  ﾄ、 weird character', 18, {\n      breakOnWords: false\n    })).toBe('Hello, world.  ﾄ、...');\n  });\n  it('should break at word boundaries', function () {\n    expect(truncate('Hello, world.  How are you?', 18, {\n      breakOnWords: true\n    })).toBe('Hello, world....');\n    expect(truncate('Hello, world.\\nHow are you?', 18, {\n      breakOnWords: true\n    })).toBe('Hello, world....');\n  });\n  it('should uses custom elipses', function () {\n    expect(truncate('Hello, world.', 9, {\n      elipsis: '&middot'\n    })).toBe('He&middot');\n  });\n  it(\"shouldn't barf with weird input\", function () {\n    expect(truncate('Hello, world.', 0)).toBe('Hello,...');\n    expect(truncate('Hello, world.', -132)).toBe('...');\n    expect(truncate('', 0)).toBe('');\n    expect(truncate(null, 0)).toBe(null);\n  });\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Utilities/__tests__/truncate-test.js"],"names":["describe","truncate","require","it","expect","toBe","minDelta","breakOnWords","elipsis"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @emails oncall+react_native\n */\n\n'use strict';\n\ndescribe('truncate', () => {\n  const truncate = require('../truncate');\n\n  it('should truncate', () => {\n    expect(truncate('Hello, world.', 5)).toBe('He...');\n  });\n\n  it('should not truncate', () => {\n    expect(truncate('Hello, world.', 50)).toBe('Hello, world.');\n  });\n\n  it('should not truncate more than minDelta chars.', () => {\n    expect(truncate('Hello, world.', 7, {minDelta: 10})).toBe('Hello, world.');\n    expect(truncate('Hello, world.', 7, {minDelta: 9})).toBe('Hell...');\n  });\n\n  it('should break in the middle of words', () => {\n    expect(\n      truncate('Hello, world.  How are you?', 18, {breakOnWords: false}),\n    ).toBe('Hello, world.  H...');\n    expect(\n      truncate('Hello, world.\\nHow are you?', 18, {breakOnWords: false}),\n    ).toBe('Hello, world.\\nHo...');\n  });\n\n  it('should add another character if the truncations happens in the middle of a wide char', () => {\n    expect(\n      truncate('Hello, world.  ﾄ、 weird character', 18, {breakOnWords: false}),\n    ).toBe('Hello, world.  ﾄ、...');\n  });\n\n  it('should break at word boundaries', () => {\n    expect(\n      truncate('Hello, world.  How are you?', 18, {breakOnWords: true}),\n    ).toBe('Hello, world....');\n    expect(\n      truncate('Hello, world.\\nHow are you?', 18, {breakOnWords: true}),\n    ).toBe('Hello, world....');\n  });\n\n  it('should uses custom elipses', () => {\n    expect(truncate('Hello, world.', 9, {elipsis: '&middot'})).toBe(\n      'He&middot',\n    );\n  });\n\n  it(\"shouldn't barf with weird input\", () => {\n    expect(truncate('Hello, world.', 0)).toBe('Hello,...');\n    expect(truncate('Hello, world.', -132)).toBe('...');\n    expect(truncate('', 0)).toBe('');\n    expect(truncate(null, 0)).toBe(null);\n  });\n});\n"]},"metadata":{},"sourceType":"script"}