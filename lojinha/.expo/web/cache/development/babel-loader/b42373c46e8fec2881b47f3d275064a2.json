{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar android_plugins_1 = require(\"../plugins/android-plugins\");\n\nvar USES_PERMISSION = 'uses-permission';\nexports.requiredPermissions = ['android.permission.INTERNET', 'android.permission.ACCESS_NETWORK_STATE', 'android.permission.SYSTEM_ALERT_WINDOW', 'android.permission.WAKE_LOCK', 'com.google.android.c2dm.permission.RECEIVE'];\nexports.allPermissions = [].concat(_toConsumableArray(exports.requiredPermissions), ['android.permission.ACCESS_WIFI_STATE', 'android.permission.ACCESS_COARSE_LOCATION', 'android.permission.ACCESS_FINE_LOCATION', 'android.permission.CAMERA', 'android.permission.MANAGE_DOCUMENTS', 'android.permission.READ_CONTACTS', 'android.permission.WRITE_CONTACTS', 'android.permission.READ_CALENDAR', 'android.permission.WRITE_CALENDAR', 'android.permission.READ_EXTERNAL_STORAGE', 'android.permission.READ_INTERNAL_STORAGE', 'android.permission.READ_PHONE_STATE', 'android.permission.RECORD_AUDIO', 'android.permission.USE_FINGERPRINT', 'android.permission.VIBRATE', 'android.permission.WRITE_EXTERNAL_STORAGE', 'android.permission.READ_SMS', 'com.anddoes.launcher.permission.UPDATE_COUNT', 'com.android.launcher.permission.INSTALL_SHORTCUT', 'com.google.android.gms.permission.ACTIVITY_RECOGNITION', 'com.google.android.providers.gsf.permission.READ_GSERVICES', 'com.htc.launcher.permission.READ_SETTINGS', 'com.htc.launcher.permission.UPDATE_SHORTCUT', 'com.majeur.launcher.permission.UPDATE_BADGE', 'com.sec.android.provider.badge.permission.READ', 'com.sec.android.provider.badge.permission.WRITE', 'com.sonyericsson.home.permission.BROADCAST_BADGE']);\n\nexports.withPermissions = function (config, permissions) {\n  if (Array.isArray(permissions)) {\n    permissions = permissions.filter(Boolean);\n    if (!config.android) config.android = {};\n    if (!config.android.permissions) config.android.permissions = [];\n    config.android.permissions = _toConsumableArray(new Set(config.android.permissions.concat(permissions)));\n  }\n\n  return android_plugins_1.withAndroidManifest(config, function _callee(config) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(setAndroidPermissions(config, config.modResults));\n\n          case 2:\n            config.modResults = _context.sent;\n            return _context.abrupt(\"return\", config);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  });\n};\n\nfunction prefixAndroidPermissionsIfNecessary(permissions) {\n  return permissions.map(function (permission) {\n    if (!permission.includes('.')) {\n      return \"android.permission.\" + permission;\n    }\n\n    return permission;\n  });\n}\n\nfunction getAndroidPermissions(config) {\n  var _a, _b;\n\n  return (_b = (_a = config.android) === null || _a === void 0 ? void 0 : _a.permissions) !== null && _b !== void 0 ? _b : [];\n}\n\nexports.getAndroidPermissions = getAndroidPermissions;\n\nfunction setAndroidPermissions(config, androidManifest) {\n  var _a;\n\n  var permissions = getAndroidPermissions(config);\n  var permissionsToAdd = [];\n\n  if (permissions === null) {\n    permissionsToAdd = exports.allPermissions;\n  } else {\n    var providedPermissions = prefixAndroidPermissionsIfNecessary(permissions);\n    permissionsToAdd = [].concat(_toConsumableArray(providedPermissions), _toConsumableArray(exports.requiredPermissions));\n  }\n\n  if (!androidManifest.manifest.hasOwnProperty('uses-permission')) {\n    androidManifest.manifest['uses-permission'] = [];\n  }\n\n  var manifestPermissions = (_a = androidManifest.manifest['uses-permission']) !== null && _a !== void 0 ? _a : [];\n  permissionsToAdd.forEach(function (permission) {\n    if (!isPermissionAlreadyRequested(permission, manifestPermissions)) {\n      addPermissionToManifest(permission, manifestPermissions);\n    }\n  });\n  return androidManifest;\n}\n\nexports.setAndroidPermissions = setAndroidPermissions;\n\nfunction isPermissionAlreadyRequested(permission, manifestPermissions) {\n  return manifestPermissions.some(function (e) {\n    return e.$['android:name'] === permission;\n  });\n}\n\nexports.isPermissionAlreadyRequested = isPermissionAlreadyRequested;\n\nfunction addPermissionToManifest(permission, manifestPermissions) {\n  manifestPermissions.push({\n    $: {\n      'android:name': permission\n    }\n  });\n  return manifestPermissions;\n}\n\nexports.addPermissionToManifest = addPermissionToManifest;\n\nfunction removePermissions(androidManifest, permissionNames) {\n  var targetNames = permissionNames ? permissionNames.map(ensurePermissionNameFormat) : null;\n  var permissions = androidManifest.manifest[USES_PERMISSION] || [];\n  var nextPermissions = [];\n\n  for (var _iterator = _createForOfIteratorHelperLoose(permissions), _step; !(_step = _iterator()).done;) {\n    var attribute = _step.value;\n\n    if (targetNames) {\n      var value = attribute.$['android:name'] || attribute.$.name;\n\n      if (!targetNames.includes(value)) {\n        nextPermissions.push(attribute);\n      }\n    }\n  }\n\n  androidManifest.manifest[USES_PERMISSION] = nextPermissions;\n}\n\nexports.removePermissions = removePermissions;\n\nfunction addPermission(androidManifest, permissionName) {\n  var usesPermissions = androidManifest.manifest[USES_PERMISSION] || [];\n  usesPermissions.push({\n    $: {\n      'android:name': permissionName\n    }\n  });\n  androidManifest.manifest[USES_PERMISSION] = usesPermissions;\n}\n\nexports.addPermission = addPermission;\n\nfunction ensurePermissions(androidManifest, permissionNames) {\n  var permissions = getPermissions(androidManifest);\n  var results = {};\n\n  for (var _iterator2 = _createForOfIteratorHelperLoose(permissionNames), _step2; !(_step2 = _iterator2()).done;) {\n    var permissionName = _step2.value;\n    var targetName = ensurePermissionNameFormat(permissionName);\n\n    if (!permissions.includes(targetName)) {\n      addPermission(androidManifest, targetName);\n      results[permissionName] = true;\n    } else {\n      results[permissionName] = false;\n    }\n  }\n\n  return results;\n}\n\nexports.ensurePermissions = ensurePermissions;\n\nfunction ensurePermission(androidManifest, permissionName) {\n  var permissions = getPermissions(androidManifest);\n  var targetName = ensurePermissionNameFormat(permissionName);\n\n  if (!permissions.includes(targetName)) {\n    addPermission(androidManifest, targetName);\n    return true;\n  }\n\n  return false;\n}\n\nexports.ensurePermission = ensurePermission;\n\nfunction ensurePermissionNameFormat(permissionName) {\n  if (permissionName.includes('.')) {\n    var com = permissionName.split('.');\n    var name = com.pop();\n    return [].concat(_toConsumableArray(com), [name.toUpperCase()]).join('.');\n  } else {\n    return ensurePermissionNameFormat(\"android.permission.\" + permissionName);\n  }\n}\n\nexports.ensurePermissionNameFormat = ensurePermissionNameFormat;\n\nfunction getPermissions(androidManifest) {\n  var usesPermissions = androidManifest.manifest[USES_PERMISSION] || [];\n  var permissions = usesPermissions.map(function (permissionObject) {\n    return permissionObject.$['android:name'] || permissionObject.$.name;\n  });\n  return permissions;\n}\n\nexports.getPermissions = getPermissions;","map":{"version":3,"sources":["../../src/android/Permissions.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAGA,IAAA,iBAAA,GAAA,OAAA,8BAAA;;AAGA,IAAM,eAAe,GAAG,iBAAxB;AAEa,OAAA,CAAA,mBAAA,GAAsB,CACjC,6BADiC,EAEjC,yCAFiC,EAGjC,wCAHiC,EAIjC,8BAJiC,EAKjC,4CALiC,CAAtB;AAQA,OAAA,CAAA,cAAA,gCACR,OAAA,CAAA,mBADQ,IAEX,sCAFW,EAGX,2CAHW,EAIX,yCAJW,EAKX,2BALW,EAMX,qCANW,EAOX,kCAPW,EAQX,mCARW,EASX,kCATW,EAUX,mCAVW,EAWX,0CAXW,EAYX,0CAZW,EAaX,qCAbW,EAcX,iCAdW,EAeX,oCAfW,EAgBX,4BAhBW,EAiBX,2CAjBW,EAkBX,6BAlBW,EAmBX,8CAnBW,EAoBX,kDApBW,EAqBX,wDArBW,EAsBX,4DAtBW,EAuBX,2CAvBW,EAwBX,6CAxBW,EAyBX,6CAzBW,EA0BX,gDA1BW,EA2BX,iDA3BW,EA4BX,kDA5BW;;AA+BA,OAAA,CAAA,eAAA,GAAiD,UAAC,MAAD,EAAS,WAAT,EAAwB;AACpF,MAAI,KAAK,CAAC,OAAN,CAAc,WAAd,CAAJ,EAAgC;AAC9B,IAAA,WAAW,GAAG,WAAW,CAAC,MAAZ,CAAmB,OAAnB,CAAd;AACA,QAAI,CAAC,MAAM,CAAC,OAAZ,EAAqB,MAAM,CAAC,OAAP,GAAiB,EAAjB;AACrB,QAAI,CAAC,MAAM,CAAC,OAAP,CAAe,WAApB,EAAiC,MAAM,CAAC,OAAP,CAAe,WAAf,GAA6B,EAA7B;AACjC,IAAA,MAAM,CAAC,OAAP,CAAe,WAAf,sBAEK,IAAI,GAAJ,CAAQ,MAAM,CAAC,OAAP,CAAe,WAAf,CAA2B,MAA3B,CAAkC,WAAlC,CAAR,CAFL;AAID;;AACD,SAAO,iBAAA,CAAA,mBAAA,CAAoB,MAApB,EAA4B,iBAAM,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACP,qBAAqB,CAAC,MAAD,EAAS,MAAM,CAAC,UAAhB,CADd;;AAAA;AACjC,YAAA,MAAM,CAAC,UAD0B;AAAA,6CAE1B,MAF0B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA5B,CAAP;AAID,CAdY;;AAgBb,SAAS,mCAAT,CAA6C,WAA7C,EAAkE;AAChE,SAAO,WAAW,CAAC,GAAZ,CAAgB,UAAA,UAAU,EAAG;AAClC,QAAI,CAAC,UAAU,CAAC,QAAX,CAAoB,GAApB,CAAL,EAA+B;AAC7B,qCAA6B,UAA7B;AACD;;AACD,WAAO,UAAP;AACD,GALM,CAAP;AAMD;;AAED,SAAgB,qBAAhB,CAAsC,MAAtC,EAAyE;;;AACvE,SAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAO,MAAM,CAAC,OAAd,MAAqB,IAArB,IAAqB,EAAA,KAAA,KAAA,CAArB,GAAqB,KAAA,CAArB,GAAqB,EAAA,CAAE,WAAvB,MAAkC,IAAlC,IAAkC,EAAA,KAAA,KAAA,CAAlC,GAAkC,EAAlC,GAAsC,EAAtC;AACD;;AAFD,OAAA,CAAA,qBAAA,GAAA,qBAAA;;AAIA,SAAgB,qBAAhB,CACE,MADF,EAEE,eAFF,EAEkC;;;AAEhC,MAAM,WAAW,GAAG,qBAAqB,CAAC,MAAD,CAAzC;AACA,MAAI,gBAAgB,GAAG,EAAvB;;AACA,MAAI,WAAW,KAAK,IAApB,EAA0B;AAExB,IAAA,gBAAgB,GAAG,OAAA,CAAA,cAAnB;AACD,GAHD,MAGO;AAEL,QAAM,mBAAmB,GAAG,mCAAmC,CAAC,WAAD,CAA/D;AACA,IAAA,gBAAgB,gCAAO,mBAAP,sBAA+B,OAAA,CAAA,mBAA/B,EAAhB;AACD;;AAED,MAAI,CAAC,eAAe,CAAC,QAAhB,CAAyB,cAAzB,CAAwC,iBAAxC,CAAL,EAAiE;AAC/D,IAAA,eAAe,CAAC,QAAhB,CAAyB,iBAAzB,IAA8C,EAA9C;AACD;;AAGD,MAAM,mBAAmB,GAAA,CAAA,EAAA,GAAG,eAAe,CAAC,QAAhB,CAAyB,iBAAzB,CAAH,MAA8C,IAA9C,IAA8C,EAAA,KAAA,KAAA,CAA9C,GAA8C,EAA9C,GAAkD,EAA3E;AAEA,EAAA,gBAAgB,CAAC,OAAjB,CAAyB,UAAA,UAAU,EAAG;AACpC,QAAI,CAAC,4BAA4B,CAAC,UAAD,EAAa,mBAAb,CAAjC,EAAoE;AAClE,MAAA,uBAAuB,CAAC,UAAD,EAAa,mBAAb,CAAvB;AACD;AACF,GAJD;AAMA,SAAO,eAAP;AACD;;AA7BD,OAAA,CAAA,qBAAA,GAAA,qBAAA;;AA+BA,SAAgB,4BAAhB,CACE,UADF,EAEE,mBAFF,EAE+C;AAE7C,SAAO,mBAAmB,CAAC,IAApB,CAAyB,UAAA,CAAC;AAAA,WAAI,CAAC,CAAC,CAAF,CAAI,cAAJ,MAAwB,UAA5B;AAAA,GAA1B,CAAP;AACD;;AALD,OAAA,CAAA,4BAAA,GAAA,4BAAA;;AAOA,SAAgB,uBAAhB,CACE,UADF,EAEE,mBAFF,EAE+C;AAE7C,EAAA,mBAAmB,CAAC,IAApB,CAAyB;AAAE,IAAA,CAAC,EAAE;AAAE,sBAAgB;AAAlB;AAAL,GAAzB;AACA,SAAO,mBAAP;AACD;;AAND,OAAA,CAAA,uBAAA,GAAA,uBAAA;;AAQA,SAAgB,iBAAhB,CAAkC,eAAlC,EAAoE,eAApE,EAA8F;AAC5F,MAAM,WAAW,GAAG,eAAe,GAAG,eAAe,CAAC,GAAhB,CAAoB,0BAApB,CAAH,GAAqD,IAAxF;AACA,MAAM,WAAW,GAAG,eAAe,CAAC,QAAhB,CAAyB,eAAzB,KAA6C,EAAjE;AACA,MAAM,eAAe,GAAG,EAAxB;;AACA,uDAAwB,WAAxB,wCAAqC;AAAA,QAA1B,SAA0B;;AACnC,QAAI,WAAJ,EAAiB;AAEf,UAAM,KAAK,GAAG,SAAS,CAAC,CAAV,CAAY,cAAZ,KAA+B,SAAS,CAAC,CAAV,CAAY,IAAzD;;AACA,UAAI,CAAC,WAAW,CAAC,QAAZ,CAAqB,KAArB,CAAL,EAAkC;AAChC,QAAA,eAAe,CAAC,IAAhB,CAAqB,SAArB;AACD;AACF;AACF;;AAED,EAAA,eAAe,CAAC,QAAhB,CAAyB,eAAzB,IAA4C,eAA5C;AACD;;AAfD,OAAA,CAAA,iBAAA,GAAA,iBAAA;;AAiBA,SAAgB,aAAhB,CAA8B,eAA9B,EAAgE,cAAhE,EAAsF;AACpF,MAAM,eAAe,GAA6B,eAAe,CAAC,QAAhB,CAAyB,eAAzB,KAA6C,EAA/F;AACA,EAAA,eAAe,CAAC,IAAhB,CAAqB;AACnB,IAAA,CAAC,EAAE;AAAE,sBAAgB;AAAlB;AADgB,GAArB;AAGA,EAAA,eAAe,CAAC,QAAhB,CAAyB,eAAzB,IAA4C,eAA5C;AACD;;AAND,OAAA,CAAA,aAAA,GAAA,aAAA;;AAQA,SAAgB,iBAAhB,CACE,eADF,EAEE,eAFF,EAE2B;AAEzB,MAAM,WAAW,GAAG,cAAc,CAAC,eAAD,CAAlC;AAEA,MAAM,OAAO,GAAsC,EAAnD;;AACA,wDAA6B,eAA7B,2CAA8C;AAAA,QAAnC,cAAmC;AAC5C,QAAM,UAAU,GAAG,0BAA0B,CAAC,cAAD,CAA7C;;AACA,QAAI,CAAC,WAAW,CAAC,QAAZ,CAAqB,UAArB,CAAL,EAAuC;AACrC,MAAA,aAAa,CAAC,eAAD,EAAkB,UAAlB,CAAb;AACA,MAAA,OAAO,CAAC,cAAD,CAAP,GAA0B,IAA1B;AACD,KAHD,MAGO;AACL,MAAA,OAAO,CAAC,cAAD,CAAP,GAA0B,KAA1B;AACD;AACF;;AACD,SAAO,OAAP;AACD;;AAjBD,OAAA,CAAA,iBAAA,GAAA,iBAAA;;AAmBA,SAAgB,gBAAhB,CACE,eADF,EAEE,cAFF,EAEwB;AAEtB,MAAM,WAAW,GAAG,cAAc,CAAC,eAAD,CAAlC;AACA,MAAM,UAAU,GAAG,0BAA0B,CAAC,cAAD,CAA7C;;AAEA,MAAI,CAAC,WAAW,CAAC,QAAZ,CAAqB,UAArB,CAAL,EAAuC;AACrC,IAAA,aAAa,CAAC,eAAD,EAAkB,UAAlB,CAAb;AACA,WAAO,IAAP;AACD;;AACD,SAAO,KAAP;AACD;;AAZD,OAAA,CAAA,gBAAA,GAAA,gBAAA;;AAcA,SAAgB,0BAAhB,CAA2C,cAA3C,EAAiE;AAC/D,MAAI,cAAc,CAAC,QAAf,CAAwB,GAAxB,CAAJ,EAAkC;AAChC,QAAM,GAAG,GAAG,cAAc,CAAC,KAAf,CAAqB,GAArB,CAAZ;AACA,QAAM,IAAI,GAAG,GAAG,CAAC,GAAJ,EAAb;AACA,WAAO,6BAAI,GAAJ,IAAS,IAAI,CAAC,WAAL,EAAT,GAA6B,IAA7B,CAAkC,GAAlC,CAAP;AACD,GAJD,MAIO;AAEL,WAAO,0BAA0B,yBAAuB,cAAvB,CAAjC;AACD;AACF;;AATD,OAAA,CAAA,0BAAA,GAAA,0BAAA;;AAWA,SAAgB,cAAhB,CAA+B,eAA/B,EAA+D;AAC7D,MAAM,eAAe,GAA6B,eAAe,CAAC,QAAhB,CAAyB,eAAzB,KAA6C,EAA/F;AACA,MAAM,WAAW,GAAG,eAAe,CAAC,GAAhB,CAAoB,UAAA,gBAAgB,EAAG;AACzD,WAAO,gBAAgB,CAAC,CAAjB,CAAmB,cAAnB,KAAsC,gBAAgB,CAAC,CAAjB,CAAmB,IAAhE;AACD,GAFmB,CAApB;AAGA,SAAO,WAAP;AACD;;AAND,OAAA,CAAA,cAAA,GAAA,cAAA","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withAndroidManifest } from '../plugins/android-plugins';\nimport { AndroidManifest, ManifestUsesPermission } from './Manifest';\n\nconst USES_PERMISSION = 'uses-permission';\n\nexport const requiredPermissions = [\n  'android.permission.INTERNET',\n  'android.permission.ACCESS_NETWORK_STATE',\n  'android.permission.SYSTEM_ALERT_WINDOW',\n  'android.permission.WAKE_LOCK',\n  'com.google.android.c2dm.permission.RECEIVE',\n];\n\nexport const allPermissions = [\n  ...requiredPermissions,\n  'android.permission.ACCESS_WIFI_STATE',\n  'android.permission.ACCESS_COARSE_LOCATION',\n  'android.permission.ACCESS_FINE_LOCATION',\n  'android.permission.CAMERA',\n  'android.permission.MANAGE_DOCUMENTS',\n  'android.permission.READ_CONTACTS',\n  'android.permission.WRITE_CONTACTS',\n  'android.permission.READ_CALENDAR',\n  'android.permission.WRITE_CALENDAR',\n  'android.permission.READ_EXTERNAL_STORAGE',\n  'android.permission.READ_INTERNAL_STORAGE',\n  'android.permission.READ_PHONE_STATE',\n  'android.permission.RECORD_AUDIO',\n  'android.permission.USE_FINGERPRINT',\n  'android.permission.VIBRATE',\n  'android.permission.WRITE_EXTERNAL_STORAGE',\n  'android.permission.READ_SMS',\n  'com.anddoes.launcher.permission.UPDATE_COUNT',\n  'com.android.launcher.permission.INSTALL_SHORTCUT',\n  'com.google.android.gms.permission.ACTIVITY_RECOGNITION',\n  'com.google.android.providers.gsf.permission.READ_GSERVICES',\n  'com.htc.launcher.permission.READ_SETTINGS',\n  'com.htc.launcher.permission.UPDATE_SHORTCUT',\n  'com.majeur.launcher.permission.UPDATE_BADGE',\n  'com.sec.android.provider.badge.permission.READ',\n  'com.sec.android.provider.badge.permission.WRITE',\n  'com.sonyericsson.home.permission.BROADCAST_BADGE',\n];\n\nexport const withPermissions: ConfigPlugin<string[] | void> = (config, permissions) => {\n  if (Array.isArray(permissions)) {\n    permissions = permissions.filter(Boolean);\n    if (!config.android) config.android = {};\n    if (!config.android.permissions) config.android.permissions = [];\n    config.android.permissions = [\n      // @ts-ignore\n      ...new Set(config.android.permissions.concat(permissions)),\n    ];\n  }\n  return withAndroidManifest(config, async config => {\n    config.modResults = await setAndroidPermissions(config, config.modResults);\n    return config;\n  });\n};\n\nfunction prefixAndroidPermissionsIfNecessary(permissions: string[]): string[] {\n  return permissions.map(permission => {\n    if (!permission.includes('.')) {\n      return `android.permission.${permission}`;\n    }\n    return permission;\n  });\n}\n\nexport function getAndroidPermissions(config: Pick<ExpoConfig, 'android'>): string[] {\n  return config.android?.permissions ?? [];\n}\n\nexport function setAndroidPermissions(\n  config: Pick<ExpoConfig, 'android'>,\n  androidManifest: AndroidManifest\n) {\n  const permissions = getAndroidPermissions(config);\n  let permissionsToAdd = [];\n  if (permissions === null) {\n    // Use all Expo permissions\n    permissionsToAdd = allPermissions;\n  } else {\n    // Use minimum required, plus any specified in permissions array\n    const providedPermissions = prefixAndroidPermissionsIfNecessary(permissions);\n    permissionsToAdd = [...providedPermissions, ...requiredPermissions];\n  }\n\n  if (!androidManifest.manifest.hasOwnProperty('uses-permission')) {\n    androidManifest.manifest['uses-permission'] = [];\n  }\n  // manifest.manifest['uses-permission'] = [];\n\n  const manifestPermissions = androidManifest.manifest['uses-permission'] ?? [];\n\n  permissionsToAdd.forEach(permission => {\n    if (!isPermissionAlreadyRequested(permission, manifestPermissions)) {\n      addPermissionToManifest(permission, manifestPermissions);\n    }\n  });\n\n  return androidManifest;\n}\n\nexport function isPermissionAlreadyRequested(\n  permission: string,\n  manifestPermissions: ManifestUsesPermission[]\n): boolean {\n  return manifestPermissions.some(e => e.$['android:name'] === permission);\n}\n\nexport function addPermissionToManifest(\n  permission: string,\n  manifestPermissions: ManifestUsesPermission[]\n) {\n  manifestPermissions.push({ $: { 'android:name': permission } });\n  return manifestPermissions;\n}\n\nexport function removePermissions(androidManifest: AndroidManifest, permissionNames?: string[]) {\n  const targetNames = permissionNames ? permissionNames.map(ensurePermissionNameFormat) : null;\n  const permissions = androidManifest.manifest[USES_PERMISSION] || [];\n  const nextPermissions = [];\n  for (const attribute of permissions) {\n    if (targetNames) {\n      // @ts-ignore: name isn't part of the type\n      const value = attribute.$['android:name'] || attribute.$.name;\n      if (!targetNames.includes(value)) {\n        nextPermissions.push(attribute);\n      }\n    }\n  }\n\n  androidManifest.manifest[USES_PERMISSION] = nextPermissions;\n}\n\nexport function addPermission(androidManifest: AndroidManifest, permissionName: string): void {\n  const usesPermissions: ManifestUsesPermission[] = androidManifest.manifest[USES_PERMISSION] || [];\n  usesPermissions.push({\n    $: { 'android:name': permissionName },\n  });\n  androidManifest.manifest[USES_PERMISSION] = usesPermissions;\n}\n\nexport function ensurePermissions(\n  androidManifest: AndroidManifest,\n  permissionNames: string[]\n): { [permission: string]: boolean } {\n  const permissions = getPermissions(androidManifest);\n\n  const results: { [permission: string]: boolean } = {};\n  for (const permissionName of permissionNames) {\n    const targetName = ensurePermissionNameFormat(permissionName);\n    if (!permissions.includes(targetName)) {\n      addPermission(androidManifest, targetName);\n      results[permissionName] = true;\n    } else {\n      results[permissionName] = false;\n    }\n  }\n  return results;\n}\n\nexport function ensurePermission(\n  androidManifest: AndroidManifest,\n  permissionName: string\n): boolean {\n  const permissions = getPermissions(androidManifest);\n  const targetName = ensurePermissionNameFormat(permissionName);\n\n  if (!permissions.includes(targetName)) {\n    addPermission(androidManifest, targetName);\n    return true;\n  }\n  return false;\n}\n\nexport function ensurePermissionNameFormat(permissionName: string): string {\n  if (permissionName.includes('.')) {\n    const com = permissionName.split('.');\n    const name = com.pop() as string;\n    return [...com, name.toUpperCase()].join('.');\n  } else {\n    // If shorthand form like `WRITE_CONTACTS` is provided, expand it to `android.permission.WRITE_CONTACTS`.\n    return ensurePermissionNameFormat(`android.permission.${permissionName}`);\n  }\n}\n\nexport function getPermissions(androidManifest: AndroidManifest): string[] {\n  const usesPermissions: { [key: string]: any }[] = androidManifest.manifest[USES_PERMISSION] || [];\n  const permissions = usesPermissions.map(permissionObject => {\n    return permissionObject.$['android:name'] || permissionObject.$.name;\n  });\n  return permissions;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}