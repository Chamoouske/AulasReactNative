{"ast":null,"code":"'use strict';\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar LogBox = require(\"../LogBox\");\n\nvar LogBoxData = require(\"../Data/LogBoxData\");\n\nfunction mockFilterResult(returnValues) {\n  LogBoxData.checkWarningFilter.mockReturnValue(_objectSpread({\n    finalFormat: 'Warning: ...',\n    forceDialogImmediately: false,\n    suppressDialog_LEGACY: false,\n    suppressCompletely: false,\n    monitorEvent: 'unknown',\n    monitorListVersion: 0,\n    monitorSampleRate: 1\n  }, returnValues));\n}\n\ndescribe('LogBox', function () {\n  var _console = console,\n      error = _console.error,\n      warn = _console.warn;\n  beforeEach(function () {\n    jest.resetModules();\n    console.error = jest.fn();\n    console.warn = jest.fn();\n    console.disableYellowBox = false;\n  });\n  afterEach(function () {\n    LogBox.uninstall();\n    console.error = error;\n    console.warn = warn;\n  });\n  it('can call `ignoreAllLogs` after installing', function () {\n    expect(LogBoxData.isDisabled()).toBe(false);\n    LogBox.install();\n    expect(LogBoxData.isDisabled()).toBe(false);\n    LogBox.ignoreAllLogs(true);\n    expect(LogBoxData.isDisabled()).toBe(true);\n  });\n  it('can call `ignoreAllLogs` before installing', function () {\n    expect(LogBoxData.isDisabled()).toBe(false);\n    LogBox.ignoreAllLogs(true);\n    expect(LogBoxData.isDisabled()).toBe(true);\n    LogBox.install();\n    expect(LogBoxData.isDisabled()).toBe(true);\n  });\n  it('will not ignore logs for `ignoreAllLogs(false)`', function () {\n    expect(LogBoxData.isDisabled()).toBe(false);\n    LogBox.install();\n    expect(LogBoxData.isDisabled()).toBe(false);\n    LogBox.ignoreAllLogs(false);\n    expect(LogBoxData.isDisabled()).toBe(false);\n  });\n  it('will ignore logs for `ignoreAllLogs()`', function () {\n    expect(LogBoxData.isDisabled()).toBe(false);\n    LogBox.install();\n    expect(LogBoxData.isDisabled()).toBe(false);\n    LogBox.ignoreAllLogs();\n    expect(LogBoxData.isDisabled()).toBe(true);\n  });\n  it('registers warnings', function () {\n    jest.mock(\"../Data/LogBoxData\");\n    LogBox.install();\n    expect(LogBoxData.addLog).not.toBeCalled();\n    console.warn('...');\n    expect(LogBoxData.addLog).toBeCalled();\n  });\n  it('reports a LogBox exception if we fail to add warnings', function () {\n    jest.mock(\"../Data/LogBoxData\");\n    var mockError = new Error('Simulated error');\n    LogBoxData.isMessageIgnored.mockImplementation(function () {\n      throw mockError;\n    });\n    LogBox.install();\n    expect(LogBoxData.addLog).not.toBeCalled();\n    expect(LogBoxData.reportLogBoxError).not.toBeCalled();\n    console.warn('...');\n    expect(LogBoxData.addLog).not.toBeCalled();\n    expect(LogBoxData.reportLogBoxError).toBeCalledWith(mockError);\n  });\n  it('only registers errors beginning with \"Warning: \"', function () {\n    jest.mock(\"../Data/LogBoxData\");\n    LogBox.install();\n    console.error('...');\n    expect(LogBoxData.addLog).not.toBeCalled();\n    expect(LogBoxData.checkWarningFilter).not.toBeCalled();\n  });\n  it('registers warning module errors with the formatting from filter', function () {\n    jest.mock(\"../Data/LogBoxData\");\n    mockFilterResult({\n      finalFormat: 'Custom format'\n    });\n    LogBox.install();\n    console.error('Warning: ...');\n    expect(LogBoxData.addLog).toBeCalledWith(expect.objectContaining({\n      message: {\n        content: 'Warning: Custom format',\n        substitutions: []\n      },\n      category: 'Warning: Custom format'\n    }));\n    expect(LogBoxData.checkWarningFilter).toBeCalledWith('...');\n  });\n  it('registers warning module errors as errors by default', function () {\n    jest.mock(\"../Data/LogBoxData\");\n    mockFilterResult({});\n    LogBox.install();\n    console.error('Warning: ...');\n    expect(LogBoxData.addLog).toBeCalledWith(expect.objectContaining({\n      level: 'error'\n    }));\n    expect(LogBoxData.checkWarningFilter).toBeCalledWith('...');\n  });\n  it('registers warning module errors with only legacy suppression as warning', function () {\n    jest.mock(\"../Data/LogBoxData\");\n    mockFilterResult({\n      suppressDialog_LEGACY: true\n    });\n    LogBox.install();\n    console.error('Warning: ...');\n    expect(LogBoxData.addLog).toBeCalledWith(expect.objectContaining({\n      level: 'warn'\n    }));\n  });\n  it('registers warning module errors with a forced dialog as fatals', function () {\n    jest.mock(\"../Data/LogBoxData\");\n    mockFilterResult({\n      forceDialogImmediately: true\n    });\n    LogBox.install();\n    console.error('Warning: ...');\n    expect(LogBoxData.addLog).toBeCalledWith(expect.objectContaining({\n      level: 'fatal'\n    }));\n  });\n  it('ignores warning module errors that are suppressed completely', function () {\n    jest.mock(\"../Data/LogBoxData\");\n    mockFilterResult({\n      suppressCompletely: true\n    });\n    LogBox.install();\n    console.error('Warning: ...');\n    expect(LogBoxData.addLog).not.toBeCalled();\n  });\n  it('ignores warning module errors that are pattern ignored', function () {\n    jest.mock(\"../Data/LogBoxData\");\n    mockFilterResult({});\n    LogBoxData.isMessageIgnored.mockReturnValue(true);\n    LogBox.install();\n    console.error('Warning: ...');\n    expect(LogBoxData.addLog).not.toBeCalled();\n  });\n  it('ignores warning module errors that are from LogBox itself', function () {\n    jest.mock(\"../Data/LogBoxData\");\n    mockFilterResult({});\n    LogBoxData.isLogBoxErrorMessage.mockReturnValue(true);\n    LogBox.install();\n    console.error('Warning: ...');\n    expect(LogBoxData.addLog).not.toBeCalled();\n  });\n  it('ignores logs that are pattern ignored\"', function () {\n    jest.mock(\"../Data/LogBoxData\");\n    LogBoxData.isMessageIgnored.mockReturnValue(true);\n    LogBox.install();\n    console.warn('ignored message');\n    expect(LogBoxData.addLog).not.toBeCalled();\n  });\n  it('does not add logs that are from LogBox itself\"', function () {\n    jest.mock(\"../Data/LogBoxData\");\n    LogBoxData.isLogBoxErrorMessage.mockReturnValue(true);\n    LogBox.install();\n    console.warn('ignored message');\n    expect(LogBoxData.addLog).not.toBeCalled();\n  });\n  it('ignores logs starting with \"(ADVICE)\"', function () {\n    jest.mock(\"../Data/LogBoxData\");\n    LogBox.install();\n    console.warn('(ADVICE) ...');\n    expect(LogBoxData.addLog).not.toBeCalled();\n  });\n  it('does not ignore logs formatted to start with \"(ADVICE)\"', function () {\n    jest.mock(\"../Data/LogBoxData\");\n    LogBox.install();\n    console.warn('%s ...', '(ADVICE)');\n    expect(LogBoxData.addLog).toBeCalledWith({\n      category: 'ï»¿%s ...',\n      componentStack: [],\n      level: 'warn',\n      message: {\n        content: '(ADVICE) ...',\n        substitutions: [{\n          length: 8,\n          offset: 0\n        }]\n      }\n    });\n  });\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/LogBox/__tests__/LogBox-test.js"],"names":["LogBox","require","LogBoxData","mockFilterResult","returnValues","checkWarningFilter","mockReturnValue","finalFormat","forceDialogImmediately","suppressDialog_LEGACY","suppressCompletely","monitorEvent","monitorListVersion","monitorSampleRate","describe","console","error","warn","beforeEach","jest","resetModules","fn","disableYellowBox","afterEach","uninstall","it","expect","isDisabled","toBe","install","ignoreAllLogs","mock","addLog","not","toBeCalled","mockError","Error","isMessageIgnored","mockImplementation","reportLogBoxError","toBeCalledWith","objectContaining","message","content","substitutions","category","level","isLogBoxErrorMessage","componentStack","length","offset"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+react_native\n * @format\n * @flow\n */\n\n'use strict';\n\nconst LogBox = require('../LogBox');\nconst LogBoxData = require('../Data/LogBoxData');\n\ndeclare var console: any;\n\nfunction mockFilterResult(returnValues) {\n  (LogBoxData.checkWarningFilter: any).mockReturnValue({\n    finalFormat: 'Warning: ...',\n    forceDialogImmediately: false,\n    suppressDialog_LEGACY: false,\n    suppressCompletely: false,\n    monitorEvent: 'unknown',\n    monitorListVersion: 0,\n    monitorSampleRate: 1,\n    ...returnValues,\n  });\n}\n\ndescribe('LogBox', () => {\n  const {error, warn} = console;\n\n  beforeEach(() => {\n    jest.resetModules();\n    console.error = jest.fn();\n    console.warn = jest.fn();\n    console.disableYellowBox = false;\n  });\n\n  afterEach(() => {\n    LogBox.uninstall();\n    console.error = error;\n    console.warn = warn;\n  });\n\n  it('can call `ignoreAllLogs` after installing', () => {\n    expect(LogBoxData.isDisabled()).toBe(false);\n\n    LogBox.install();\n\n    expect(LogBoxData.isDisabled()).toBe(false);\n\n    LogBox.ignoreAllLogs(true);\n\n    expect(LogBoxData.isDisabled()).toBe(true);\n  });\n\n  it('can call `ignoreAllLogs` before installing', () => {\n    expect(LogBoxData.isDisabled()).toBe(false);\n\n    LogBox.ignoreAllLogs(true);\n\n    expect(LogBoxData.isDisabled()).toBe(true);\n\n    LogBox.install();\n\n    expect(LogBoxData.isDisabled()).toBe(true);\n  });\n\n  it('will not ignore logs for `ignoreAllLogs(false)`', () => {\n    expect(LogBoxData.isDisabled()).toBe(false);\n\n    LogBox.install();\n\n    expect(LogBoxData.isDisabled()).toBe(false);\n\n    LogBox.ignoreAllLogs(false);\n\n    expect(LogBoxData.isDisabled()).toBe(false);\n  });\n\n  it('will ignore logs for `ignoreAllLogs()`', () => {\n    expect(LogBoxData.isDisabled()).toBe(false);\n\n    LogBox.install();\n\n    expect(LogBoxData.isDisabled()).toBe(false);\n\n    LogBox.ignoreAllLogs();\n\n    expect(LogBoxData.isDisabled()).toBe(true);\n  });\n\n  it('registers warnings', () => {\n    jest.mock('../Data/LogBoxData');\n\n    LogBox.install();\n\n    expect(LogBoxData.addLog).not.toBeCalled();\n    console.warn('...');\n    expect(LogBoxData.addLog).toBeCalled();\n  });\n\n  it('reports a LogBox exception if we fail to add warnings', () => {\n    jest.mock('../Data/LogBoxData');\n    const mockError = new Error('Simulated error');\n\n    // Picking a random implemention detail to simulate throwing.\n    (LogBoxData.isMessageIgnored: any).mockImplementation(() => {\n      throw mockError;\n    });\n\n    LogBox.install();\n\n    expect(LogBoxData.addLog).not.toBeCalled();\n    expect(LogBoxData.reportLogBoxError).not.toBeCalled();\n    console.warn('...');\n    expect(LogBoxData.addLog).not.toBeCalled();\n    expect(LogBoxData.reportLogBoxError).toBeCalledWith(mockError);\n  });\n\n  it('only registers errors beginning with \"Warning: \"', () => {\n    jest.mock('../Data/LogBoxData');\n\n    LogBox.install();\n\n    console.error('...');\n    expect(LogBoxData.addLog).not.toBeCalled();\n    expect(LogBoxData.checkWarningFilter).not.toBeCalled();\n  });\n\n  it('registers warning module errors with the formatting from filter', () => {\n    jest.mock('../Data/LogBoxData');\n\n    mockFilterResult({\n      finalFormat: 'Custom format',\n    });\n\n    LogBox.install();\n\n    console.error('Warning: ...');\n    expect(LogBoxData.addLog).toBeCalledWith(\n      expect.objectContaining({\n        message: {content: 'Warning: Custom format', substitutions: []},\n        category: 'Warning: Custom format',\n      }),\n    );\n    expect(LogBoxData.checkWarningFilter).toBeCalledWith('...');\n  });\n\n  it('registers warning module errors as errors by default', () => {\n    jest.mock('../Data/LogBoxData');\n\n    mockFilterResult({});\n\n    LogBox.install();\n\n    console.error('Warning: ...');\n    expect(LogBoxData.addLog).toBeCalledWith(\n      expect.objectContaining({level: 'error'}),\n    );\n    expect(LogBoxData.checkWarningFilter).toBeCalledWith('...');\n  });\n\n  it('registers warning module errors with only legacy suppression as warning', () => {\n    jest.mock('../Data/LogBoxData');\n\n    mockFilterResult({\n      suppressDialog_LEGACY: true,\n    });\n\n    LogBox.install();\n\n    console.error('Warning: ...');\n    expect(LogBoxData.addLog).toBeCalledWith(\n      expect.objectContaining({level: 'warn'}),\n    );\n  });\n\n  it('registers warning module errors with a forced dialog as fatals', () => {\n    jest.mock('../Data/LogBoxData');\n\n    mockFilterResult({\n      forceDialogImmediately: true,\n    });\n\n    LogBox.install();\n\n    console.error('Warning: ...');\n    expect(LogBoxData.addLog).toBeCalledWith(\n      expect.objectContaining({level: 'fatal'}),\n    );\n  });\n\n  it('ignores warning module errors that are suppressed completely', () => {\n    jest.mock('../Data/LogBoxData');\n\n    mockFilterResult({\n      suppressCompletely: true,\n    });\n\n    LogBox.install();\n\n    console.error('Warning: ...');\n    expect(LogBoxData.addLog).not.toBeCalled();\n  });\n\n  it('ignores warning module errors that are pattern ignored', () => {\n    jest.mock('../Data/LogBoxData');\n\n    mockFilterResult({});\n    (LogBoxData.isMessageIgnored: any).mockReturnValue(true);\n\n    LogBox.install();\n\n    console.error('Warning: ...');\n    expect(LogBoxData.addLog).not.toBeCalled();\n  });\n\n  it('ignores warning module errors that are from LogBox itself', () => {\n    jest.mock('../Data/LogBoxData');\n\n    mockFilterResult({});\n    (LogBoxData.isLogBoxErrorMessage: any).mockReturnValue(true);\n\n    LogBox.install();\n\n    console.error('Warning: ...');\n    expect(LogBoxData.addLog).not.toBeCalled();\n  });\n\n  it('ignores logs that are pattern ignored\"', () => {\n    jest.mock('../Data/LogBoxData');\n    (LogBoxData.isMessageIgnored: any).mockReturnValue(true);\n\n    LogBox.install();\n\n    console.warn('ignored message');\n    expect(LogBoxData.addLog).not.toBeCalled();\n  });\n\n  it('does not add logs that are from LogBox itself\"', () => {\n    jest.mock('../Data/LogBoxData');\n    (LogBoxData.isLogBoxErrorMessage: any).mockReturnValue(true);\n\n    LogBox.install();\n\n    console.warn('ignored message');\n    expect(LogBoxData.addLog).not.toBeCalled();\n  });\n\n  it('ignores logs starting with \"(ADVICE)\"', () => {\n    jest.mock('../Data/LogBoxData');\n\n    LogBox.install();\n\n    console.warn('(ADVICE) ...');\n    expect(LogBoxData.addLog).not.toBeCalled();\n  });\n\n  it('does not ignore logs formatted to start with \"(ADVICE)\"', () => {\n    jest.mock('../Data/LogBoxData');\n\n    LogBox.install();\n\n    console.warn('%s ...', '(ADVICE)');\n    expect(LogBoxData.addLog).toBeCalledWith({\n      category: 'ï»¿%s ...',\n      componentStack: [],\n      level: 'warn',\n      message: {\n        content: '(ADVICE) ...',\n        substitutions: [{length: 8, offset: 0}],\n      },\n    });\n  });\n});\n"]},"metadata":{},"sourceType":"script"}