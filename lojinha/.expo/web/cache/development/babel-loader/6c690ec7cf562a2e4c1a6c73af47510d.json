{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.reactNativePlatformResolver = reactNativePlatformResolver;\n\nfunction _metroResolver() {\n  var data = require(\"metro-resolver\");\n\n  _metroResolver = function _metroResolver() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction reactNativePlatformResolver(platformImplementations) {\n  return function (context, _realModuleName, platform, moduleName) {\n    var backupResolveRequest = context.resolveRequest;\n    delete context.resolveRequest;\n\n    try {\n      var modifiedModuleName = moduleName;\n\n      if (platformImplementations[platform]) {\n        if (moduleName === 'react-native') {\n          modifiedModuleName = platformImplementations[platform];\n        } else if (moduleName.startsWith('react-native/')) {\n          modifiedModuleName = platformImplementations[platform] + \"/\" + modifiedModuleName.slice('react-native/'.length);\n        }\n      }\n\n      var result = (0, _metroResolver().resolve)(context, modifiedModuleName, platform);\n      return result;\n    } catch (e) {\n      throw e;\n    } finally {\n      context.resolveRequest = backupResolveRequest;\n    }\n  };\n}","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli/build/tools/metroPlatformResolver.js"],"names":["Object","defineProperty","exports","value","reactNativePlatformResolver","_metroResolver","data","require","platformImplementations","context","_realModuleName","platform","moduleName","backupResolveRequest","resolveRequest","modifiedModuleName","startsWith","slice","length","result","resolve","e"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,2BAAR,GAAsCA,2BAAtC;;AAEA,SAASC,cAAT,GAA0B;AACxB,MAAMC,IAAI,GAAGC,OAAO,CAAC,gBAAD,CAApB;;AAEAF,EAAAA,cAAc,GAAG,0BAAY;AAC3B,WAAOC,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAiBD,SAASF,2BAAT,CAAqCI,uBAArC,EAA8D;AAC5D,SAAO,UAACC,OAAD,EAAUC,eAAV,EAA2BC,QAA3B,EAAqCC,UAArC,EAAoD;AACzD,QAAIC,oBAAoB,GAAGJ,OAAO,CAACK,cAAnC;AACA,WAAOL,OAAO,CAACK,cAAf;;AAEA,QAAI;AACF,UAAIC,kBAAkB,GAAGH,UAAzB;;AAEA,UAAIJ,uBAAuB,CAACG,QAAD,CAA3B,EAAuC;AACrC,YAAIC,UAAU,KAAK,cAAnB,EAAmC;AACjCG,UAAAA,kBAAkB,GAAGP,uBAAuB,CAACG,QAAD,CAA5C;AACD,SAFD,MAEO,IAAIC,UAAU,CAACI,UAAX,CAAsB,eAAtB,CAAJ,EAA4C;AACjDD,UAAAA,kBAAkB,GAAMP,uBAAuB,CAACG,QAAD,CAA7B,SAA2CI,kBAAkB,CAACE,KAAnB,CAAyB,gBAAgBC,MAAzC,CAA7D;AACD;AACF;;AAED,UAAIC,MAAM,GAAG,CAAC,GAAGd,cAAc,GAAGe,OAArB,EAA8BX,OAA9B,EAAuCM,kBAAvC,EAA2DJ,QAA3D,CAAb;AACA,aAAOQ,MAAP;AACD,KAbD,CAaE,OAAOE,CAAP,EAAU;AACV,YAAMA,CAAN;AACD,KAfD,SAeU;AACRZ,MAAAA,OAAO,CAACK,cAAR,GAAyBD,oBAAzB;AACD;AACF,GAtBD;AAuBD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.reactNativePlatformResolver = reactNativePlatformResolver;\n\nfunction _metroResolver() {\n  const data = require(\"metro-resolver\");\n\n  _metroResolver = function () {\n    return data;\n  };\n\n  return data;\n}\n\n/**\n * This is an implementation of a metro resolveRequest option which will remap react-native imports\n * to different npm packages based on the platform requested.  This allows a single metro instance/config\n * to produce bundles for multiple out of tree platforms at a time.\n *\n * @param platformImplementations\n * A map of platform to npm package that implements that platform\n *\n * Ex:\n * {\n *    windows: 'react-native-windows'\n *    macos: 'react-native-macos'\n * }\n */\n// @ts-ignore - no typed definition for the package\nfunction reactNativePlatformResolver(platformImplementations) {\n  return (context, _realModuleName, platform, moduleName) => {\n    let backupResolveRequest = context.resolveRequest;\n    delete context.resolveRequest;\n\n    try {\n      let modifiedModuleName = moduleName;\n\n      if (platformImplementations[platform]) {\n        if (moduleName === 'react-native') {\n          modifiedModuleName = platformImplementations[platform];\n        } else if (moduleName.startsWith('react-native/')) {\n          modifiedModuleName = `${platformImplementations[platform]}/${modifiedModuleName.slice('react-native/'.length)}`;\n        }\n      }\n\n      let result = (0, _metroResolver().resolve)(context, modifiedModuleName, platform);\n      return result;\n    } catch (e) {\n      throw e;\n    } finally {\n      context.resolveRequest = backupResolveRequest;\n    }\n  };\n}\n\n//# sourceMappingURL=metroPlatformResolver.js.map"]},"metadata":{},"sourceType":"script"}