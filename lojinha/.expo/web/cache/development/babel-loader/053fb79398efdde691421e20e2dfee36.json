{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _execa() {\n  var data = _interopRequireDefault(require(\"execa\"));\n\n  _execa = function _execa() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _adb = _interopRequireDefault(require(\"./adb\"));\n\nvar _tryRunAdbReverse = _interopRequireDefault(require(\"./tryRunAdbReverse\"));\n\nvar _tryLaunchAppOnDevice = _interopRequireDefault(require(\"./tryLaunchAppOnDevice\"));\n\nvar _tryLaunchEmulator = _interopRequireDefault(require(\"./tryLaunchEmulator\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getTaskNames(appName, commands) {\n  return appName ? commands.map(function (command) {\n    return appName + \":\" + command;\n  }) : commands;\n}\n\nfunction toPascalCase(value) {\n  return value !== '' ? value[0].toUpperCase() + value.slice(1) : value;\n}\n\nfunction runOnAllDevices(args, cmd, packageName, adbPath, androidProject) {\n  var devices, result, tasks, gradleArgs;\n  return _regeneratorRuntime.async(function runOnAllDevices$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          devices = _adb.default.getDevices(adbPath);\n\n          if (!(devices.length === 0)) {\n            _context.next = 7;\n            break;\n          }\n\n          _cliTools().logger.info('Launching emulator...');\n\n          _context.next = 5;\n          return _regeneratorRuntime.awrap((0, _tryLaunchEmulator.default)(adbPath));\n\n        case 5:\n          result = _context.sent;\n\n          if (result.success) {\n            _cliTools().logger.info('Successfully launched emulator.');\n\n            devices = _adb.default.getDevices(adbPath);\n          } else {\n            _cliTools().logger.error(\"Failed to launch emulator. Reason: \" + _chalk().default.dim(result.error || '') + \".\");\n\n            _cliTools().logger.warn('Please launch an emulator manually or connect a device. Otherwise app may fail to launch.');\n          }\n\n        case 7:\n          _context.prev = 7;\n          tasks = args.tasks || ['install' + toPascalCase(args.variant)];\n          gradleArgs = getTaskNames(args.appFolder || androidProject.appName, tasks);\n\n          if (args.port != null) {\n            gradleArgs.push('-PreactNativeDevServerPort=' + args.port);\n          }\n\n          _cliTools().logger.info('Installing the app...');\n\n          _cliTools().logger.debug(\"Running command \\\"cd android && \" + cmd + \" \" + gradleArgs.join(' ') + \"\\\"\");\n\n          _context.next = 15;\n          return _regeneratorRuntime.awrap((0, _execa().default)(cmd, gradleArgs, {\n            stdio: ['inherit', 'inherit', 'pipe'],\n            cwd: androidProject.sourceDir\n          }));\n\n        case 15:\n          _context.next = 20;\n          break;\n\n        case 17:\n          _context.prev = 17;\n          _context.t0 = _context[\"catch\"](7);\n          throw createInstallError(_context.t0);\n\n        case 20:\n          (devices.length > 0 ? devices : [undefined]).forEach(function (device) {\n            (0, _tryRunAdbReverse.default)(args.port, device);\n            (0, _tryLaunchAppOnDevice.default)(device, packageName, adbPath, args);\n          });\n\n        case 21:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[7, 17]], Promise);\n}\n\nfunction createInstallError(error) {\n  var stderr = (error.stderr || '').toString();\n  var docs = 'https://reactnative.dev/docs/environment-setup';\n\n  var message = \"Make sure you have the Android development environment set up: \" + _chalk().default.underline.dim(docs);\n\n  _cliTools().logger.log(stderr);\n\n  if (stderr.includes('No connected devices')) {\n    message = 'Make sure you have an Android emulator running or a device connected';\n  } else if (stderr.includes('licences have not been accepted') || stderr.includes('accept the SDK license')) {\n    message = \"Please accept all necessary Android SDK licenses using Android SDK Manager: \\\"\" + _chalk().default.bold('$ANDROID_HOME/tools/bin/sdkmanager --licenses') + \"\\\"\";\n  }\n\n  return new (_cliTools().CLIError)(\"Failed to install the app. \" + message + \".\", error);\n}\n\nvar _default = runOnAllDevices;\nexports.default = _default;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/runOnAllDevices.js"],"names":["Object","defineProperty","exports","value","default","_chalk","data","_interopRequireDefault","require","_execa","_cliTools","_adb","_tryRunAdbReverse","_tryLaunchAppOnDevice","_tryLaunchEmulator","obj","__esModule","getTaskNames","appName","commands","map","command","toPascalCase","toUpperCase","slice","runOnAllDevices","args","cmd","packageName","adbPath","androidProject","devices","getDevices","length","logger","info","result","success","error","dim","warn","tasks","variant","gradleArgs","appFolder","port","push","debug","join","stdio","cwd","sourceDir","createInstallError","undefined","forEach","device","stderr","toString","docs","message","underline","log","includes","bold","CLIError","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require(\"chalk\"));\n\n  _chalk = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _execa() {\n  const data = _interopRequireDefault(require(\"execa\"));\n\n  _execa = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _adb = _interopRequireDefault(require(\"./adb\"));\n\nvar _tryRunAdbReverse = _interopRequireDefault(require(\"./tryRunAdbReverse\"));\n\nvar _tryLaunchAppOnDevice = _interopRequireDefault(require(\"./tryLaunchAppOnDevice\"));\n\nvar _tryLaunchEmulator = _interopRequireDefault(require(\"./tryLaunchEmulator\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction getTaskNames(appName, commands) {\n  return appName ? commands.map(command => `${appName}:${command}`) : commands;\n}\n\nfunction toPascalCase(value) {\n  return value !== '' ? value[0].toUpperCase() + value.slice(1) : value;\n}\n\nasync function runOnAllDevices(args, cmd, packageName, adbPath, androidProject) {\n  let devices = _adb.default.getDevices(adbPath);\n\n  if (devices.length === 0) {\n    _cliTools().logger.info('Launching emulator...');\n\n    const result = await (0, _tryLaunchEmulator.default)(adbPath);\n\n    if (result.success) {\n      _cliTools().logger.info('Successfully launched emulator.');\n\n      devices = _adb.default.getDevices(adbPath);\n    } else {\n      _cliTools().logger.error(`Failed to launch emulator. Reason: ${_chalk().default.dim(result.error || '')}.`);\n\n      _cliTools().logger.warn('Please launch an emulator manually or connect a device. Otherwise app may fail to launch.');\n    }\n  }\n\n  try {\n    const tasks = args.tasks || ['install' + toPascalCase(args.variant)];\n    const gradleArgs = getTaskNames(args.appFolder || androidProject.appName, tasks);\n\n    if (args.port != null) {\n      gradleArgs.push('-PreactNativeDevServerPort=' + args.port);\n    }\n\n    _cliTools().logger.info('Installing the app...');\n\n    _cliTools().logger.debug(`Running command \"cd android && ${cmd} ${gradleArgs.join(' ')}\"`);\n\n    await (0, _execa().default)(cmd, gradleArgs, {\n      stdio: ['inherit', 'inherit', 'pipe'],\n      cwd: androidProject.sourceDir\n    });\n  } catch (error) {\n    throw createInstallError(error);\n  }\n\n  (devices.length > 0 ? devices : [undefined]).forEach(device => {\n    (0, _tryRunAdbReverse.default)(args.port, device);\n    (0, _tryLaunchAppOnDevice.default)(device, packageName, adbPath, args);\n  });\n}\n\nfunction createInstallError(error) {\n  const stderr = (error.stderr || '').toString();\n  const docs = 'https://reactnative.dev/docs/environment-setup';\n  let message = `Make sure you have the Android development environment set up: ${_chalk().default.underline.dim(docs)}`; // Pass the error message from the command to stdout because we pipe it to\n  // parent process so it's not visible\n\n  _cliTools().logger.log(stderr); // Handle some common failures and make the errors more helpful\n\n\n  if (stderr.includes('No connected devices')) {\n    message = 'Make sure you have an Android emulator running or a device connected';\n  } else if (stderr.includes('licences have not been accepted') || stderr.includes('accept the SDK license')) {\n    message = `Please accept all necessary Android SDK licenses using Android SDK Manager: \"${_chalk().default.bold('$ANDROID_HOME/tools/bin/sdkmanager --licenses')}\"`;\n  }\n\n  return new (_cliTools().CLIError)(`Failed to install the app. ${message}.`, error);\n}\n\nvar _default = runOnAllDevices;\nexports.default = _default;\n\n//# sourceMappingURL=runOnAllDevices.js.map"]},"metadata":{},"sourceType":"script"}