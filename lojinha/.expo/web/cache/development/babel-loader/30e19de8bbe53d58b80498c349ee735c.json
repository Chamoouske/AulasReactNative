{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nrequire('shelljs/global');\n\nvar yargs = require('yargs');\n\nvar argv = yargs.option('n', {\n  alias: 'nightly',\n  type: 'boolean',\n  default: false\n}).argv;\nvar nightlyBuild = argv.nightly;\nvar buildTag = process.env.CIRCLE_TAG;\nvar otp = process.env.NPM_CONFIG_OTP;\nvar branchVersion = 0;\n\nif (nightlyBuild) {\n  branchVersion = 0;\n} else {\n  if (!buildTag) {\n    echo('Error: We publish only from git tags');\n    exit(1);\n  }\n\n  var match = buildTag.match(/^v(\\d+\\.\\d+)\\.\\d+(?:-.+)?$/);\n\n  if (!match) {\n    echo('Error: We publish only from release version git tags');\n    exit(1);\n  }\n\n  var _match = _slicedToArray(match, 2);\n\n  branchVersion = _match[1];\n}\n\nvar currentCommit = exec('git rev-parse HEAD', {\n  silent: true\n}).stdout.trim();\nvar tagsWithVersion = exec(\"git ls-remote origin | grep \" + currentCommit, {\n  silent: true\n}).stdout.split(/\\s/).filter(function (version) {\n  return !!version && version.indexOf(\"refs/tags/v\" + branchVersion) === 0;\n}).filter(function (version) {\n  return version.indexOf(branchVersion) !== -1;\n}).map(function (version) {\n  return version.slice('refs/tags/'.length);\n});\n\nif (!nightlyBuild && tagsWithVersion.length === 0) {\n  echo('Error: Cannot find version tag in current commit. To deploy to NPM you must add tag v0.XY.Z[-rc] to your commit');\n  exit(1);\n}\n\nvar releaseVersion;\n\nif (nightlyBuild) {\n  releaseVersion = \"0.0.0-\" + currentCommit.slice(0, 9);\n\n  if (exec(\"node scripts/bump-oss-version.js --nightly \" + releaseVersion).code) {\n    echo('Failed to bump version number');\n    exit(1);\n  }\n} else if (tagsWithVersion[0].indexOf('-rc') === -1) {\n  releaseVersion = tagsWithVersion[0].slice(1);\n} else {\n  releaseVersion = tagsWithVersion[tagsWithVersion.length - 1].slice(1);\n}\n\nif (exec('./gradlew :ReactAndroid:installArchives').code) {\n  echo('Could not generate artifacts');\n  exit(1);\n}\n\nexec('git checkout ReactAndroid/gradle.properties');\necho('Generated artifacts for Maven');\nvar artifacts = ['-javadoc.jar', '-sources.jar', '.aar', '.pom'].map(function (suffix) {\n  return \"react-native-\" + releaseVersion + suffix;\n});\nartifacts.forEach(function (name) {\n  if (!test('-e', \"./android/com/facebook/react/react-native/\" + releaseVersion + \"/\" + name)) {\n    echo(\"file \" + name + \" was not generated\");\n    exit(1);\n  }\n});\nvar tagFlag = nightlyBuild ? '--tag nightly' : releaseVersion.indexOf('-rc') === -1 ? '' : '--tag next';\nvar otpFlag = otp ? \"--otp \" + otp : '';\n\nif (exec(\"npm publish \" + tagFlag + \" \" + otpFlag).code) {\n  echo('Failed to publish package to npm');\n  exit(1);\n} else {\n  echo(\"Published to npm \" + releaseVersion);\n  exit(0);\n}","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/scripts/publish-npm.js"],"names":["require","yargs","argv","option","alias","type","default","nightlyBuild","nightly","buildTag","process","env","CIRCLE_TAG","otp","NPM_CONFIG_OTP","branchVersion","echo","exit","match","currentCommit","exec","silent","stdout","trim","tagsWithVersion","split","filter","version","indexOf","map","slice","length","releaseVersion","code","artifacts","suffix","forEach","name","test","tagFlag","otpFlag"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\n'use strict';\n\n/**\n * This script publishes a new version of react-native to NPM.\n * It is supposed to run in CI environment, not on a developer's machine.\n *\n * To make it easier for developers it uses some logic to identify with which\n * version to publish the package.\n *\n * To cut a branch (and release RC):\n * - Developer: `git checkout -b 0.XY-stable`\n * - Developer: `./scripts/bump-oss-version.js v0.XY.0-rc.0`\n * - CI: test and deploy to npm (run this script) with version `0.XY.0-rc.0`\n *   with tag \"next\"\n *\n * To update RC release:\n * - Developer: `git checkout 0.XY-stable`\n * - Developer: cherry-pick whatever changes needed\n * - Developer: `./scripts/bump-oss-version.js v0.XY.0-rc.1`\n * - CI: test and deploy to npm (run this script) with version `0.XY.0-rc.1`\n *   with tag \"next\"\n *\n * To publish a release:\n * - Developer: `git checkout 0.XY-stable`\n * - Developer: cherry-pick whatever changes needed\n * - Developer: `./scripts/bump-oss-version.js v0.XY.0`\n * - CI: test and deploy to npm (run this script) with version `0.XY.0`\n *   and no tag (\"latest\" is implied by npm)\n *\n * To patch old release:\n * - Developer: `git checkout 0.XY-stable`\n * - Developer: cherry-pick whatever changes needed\n * - Developer: `git tag v0.XY.Z`\n * - Developer: `git push` to git@github.com:facebook/react-native.git (or merge as pull request)\n * - CI: test and deploy to npm (run this script) with version 0.XY.Z with no tag, npm will not mark it as latest if\n * there is a version higher than XY\n *\n * Important tags:\n * If tag v0.XY.0-rc.Z is present on the commit then publish to npm with version 0.XY.0-rc.Z and tag next\n * If tag v0.XY.Z is present on the commit then publish to npm with version 0.XY.Z and no tag (npm will consider it latest)\n */\n\n/*eslint-disable no-undef */\nrequire('shelljs/global');\nconst yargs = require('yargs');\n\nlet argv = yargs.option('n', {\n  alias: 'nightly',\n  type: 'boolean',\n  default: false,\n}).argv;\n\nconst nightlyBuild = argv.nightly;\nconst buildTag = process.env.CIRCLE_TAG;\nconst otp = process.env.NPM_CONFIG_OTP;\n\nlet branchVersion = 0;\nif (nightlyBuild) {\n  branchVersion = 0;\n} else {\n  if (!buildTag) {\n    echo('Error: We publish only from git tags');\n    exit(1);\n  }\n\n  let match = buildTag.match(/^v(\\d+\\.\\d+)\\.\\d+(?:-.+)?$/);\n  if (!match) {\n    echo('Error: We publish only from release version git tags');\n    exit(1);\n  }\n  [, branchVersion] = match;\n}\n// 0.33\n\n// 34c034298dc9cad5a4553964a5a324450fda0385\nconst currentCommit = exec('git rev-parse HEAD', {silent: true}).stdout.trim();\n// [34c034298dc9cad5a4553964a5a324450fda0385, refs/heads/0.33-stable, refs/tags/latest, refs/tags/v0.33.1, refs/tags/v0.34.1-rc]\nconst tagsWithVersion = exec(`git ls-remote origin | grep ${currentCommit}`, {\n  silent: true,\n})\n  .stdout.split(/\\s/)\n  // ['refs/tags/v0.33.0', 'refs/tags/v0.33.0-rc', 'refs/tags/v0.33.0-rc1', 'refs/tags/v0.33.0-rc2', 'refs/tags/v0.34.0']\n  .filter(\n    version =>\n      !!version && version.indexOf(`refs/tags/v${branchVersion}`) === 0,\n  )\n  // ['refs/tags/v0.33.0', 'refs/tags/v0.33.0-rc', 'refs/tags/v0.33.0-rc1', 'refs/tags/v0.33.0-rc2']\n  .filter(version => version.indexOf(branchVersion) !== -1)\n  // ['v0.33.0', 'v0.33.0-rc', 'v0.33.0-rc1', 'v0.33.0-rc2']\n  .map(version => version.slice('refs/tags/'.length));\n\nif (!nightlyBuild && tagsWithVersion.length === 0) {\n  echo(\n    'Error: Cannot find version tag in current commit. To deploy to NPM you must add tag v0.XY.Z[-rc] to your commit',\n  );\n  exit(1);\n}\nlet releaseVersion;\n\nif (nightlyBuild) {\n  releaseVersion = `0.0.0-${currentCommit.slice(0, 9)}`;\n\n  // Bump version number in various files (package.json, gradle.properties etc)\n  if (\n    exec(`node scripts/bump-oss-version.js --nightly ${releaseVersion}`).code\n  ) {\n    echo('Failed to bump version number');\n    exit(1);\n  }\n} else if (tagsWithVersion[0].indexOf('-rc') === -1) {\n  // if first tag on this commit is non -rc then we are making a stable release\n  // '0.33.0'\n  releaseVersion = tagsWithVersion[0].slice(1);\n} else {\n  // otherwise pick last -rc tag alphabetically\n  // 0.33.0-rc2\n  releaseVersion = tagsWithVersion[tagsWithVersion.length - 1].slice(1);\n}\n\n// -------- Generating Android Artifacts with JavaDoc\nif (exec('./gradlew :ReactAndroid:installArchives').code) {\n  echo('Could not generate artifacts');\n  exit(1);\n}\n\n// undo uncommenting javadoc setting\nexec('git checkout ReactAndroid/gradle.properties');\n\necho('Generated artifacts for Maven');\n\nlet artifacts = ['-javadoc.jar', '-sources.jar', '.aar', '.pom'].map(suffix => {\n  return `react-native-${releaseVersion}${suffix}`;\n});\n\nartifacts.forEach(name => {\n  if (\n    !test(\n      '-e',\n      `./android/com/facebook/react/react-native/${releaseVersion}/${name}`,\n    )\n  ) {\n    echo(`file ${name} was not generated`);\n    exit(1);\n  }\n});\n\n// if version contains -rc, tag as prerelease\nconst tagFlag = nightlyBuild\n  ? '--tag nightly'\n  : releaseVersion.indexOf('-rc') === -1\n  ? ''\n  : '--tag next';\n\n// use otp from envvars if available\nconst otpFlag = otp ? `--otp ${otp}` : '';\n\nif (exec(`npm publish ${tagFlag} ${otpFlag}`).code) {\n  echo('Failed to publish package to npm');\n  exit(1);\n} else {\n  echo(`Published to npm ${releaseVersion}`);\n  exit(0);\n}\n\n/*eslint-enable no-undef */\n"]},"metadata":{},"sourceType":"script"}