{"ast":null,"code":"'use strict';\n\nvar _require = require(\"./CppHelpers\"),\n    convertDefaultTypeToString = _require.convertDefaultTypeToString,\n    getImports = _require.getImports;\n\nvar template = \"\\n/**\\n * Copyright (c) Facebook, Inc. and its affiliates.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n */\\n\\n#include <react/components/::_LIBRARY_::/Props.h>\\n::_IMPORTS_::\\n\\nnamespace facebook {\\nnamespace react {\\n\\n::_COMPONENT_CLASSES_::\\n\\n} // namespace react\\n} // namespace facebook\\n\";\nvar componentTemplate = \"\\n::_CLASSNAME_::::::_CLASSNAME_::(\\n    const ::_CLASSNAME_:: &sourceProps,\\n    const RawProps &rawProps):::_EXTEND_CLASSES_::\\n\\n    ::_PROPS_::\\n      {}\\n\".trim();\n\nfunction generatePropsString(componentName, component) {\n  return component.props.map(function (prop) {\n    var defaultValue = convertDefaultTypeToString(componentName, prop);\n    return prop.name + \"(convertRawProp(rawProps, \\\"\" + prop.name + \"\\\", sourceProps.\" + prop.name + \", {\" + defaultValue + \"}))\";\n  }).join(',\\n' + '    ');\n}\n\nfunction getClassExtendString(component) {\n  var extendString = ' ' + component.extendsProps.map(function (extendProps) {\n    switch (extendProps.type) {\n      case 'ReactNativeBuiltInType':\n        switch (extendProps.knownTypeName) {\n          case 'ReactNativeCoreViewProps':\n            return 'ViewProps(sourceProps, rawProps)';\n\n          default:\n            extendProps.knownTypeName;\n            throw new Error('Invalid knownTypeName');\n        }\n\n      default:\n        extendProps.type;\n        throw new Error('Invalid extended type');\n    }\n  }).join(', ') + (\"\" + (component.props.length > 0 ? ',' : ''));\n  return extendString;\n}\n\nmodule.exports = {\n  generate: function generate(libraryName, schema, moduleSpecName) {\n    var fileName = 'Props.cpp';\n    var allImports = new Set(['#include <react/core/propsConversions.h>']);\n    var componentProps = Object.keys(schema.modules).map(function (moduleName) {\n      var components = schema.modules[moduleName].components;\n\n      if (components == null) {\n        return null;\n      }\n\n      return Object.keys(components).filter(function (componentName) {\n        var component = components[componentName];\n        return component.excludedPlatform !== 'iOS';\n      }).map(function (componentName) {\n        var component = components[componentName];\n        var newName = componentName + \"Props\";\n        var propsString = generatePropsString(componentName, component);\n        var extendString = getClassExtendString(component);\n        var imports = getImports(component.props);\n        imports.forEach(allImports.add, allImports);\n        var replacedTemplate = componentTemplate.replace(/::_CLASSNAME_::/g, newName).replace('::_EXTEND_CLASSES_::', extendString).replace('::_PROPS_::', propsString);\n        return replacedTemplate;\n      }).join('\\n');\n    }).filter(Boolean).join('\\n');\n    var replacedTemplate = template.replace(/::_COMPONENT_CLASSES_::/g, componentProps).replace('::_LIBRARY_::', libraryName).replace('::_IMPORTS_::', Array.from(allImports).sort().join('\\n').trim());\n    return new Map([[fileName, replacedTemplate]]);\n  }\n};","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/packages/react-native-codegen/src/generators/components/GeneratePropsCpp.js"],"names":["require","convertDefaultTypeToString","getImports","template","componentTemplate","trim","generatePropsString","componentName","component","props","map","prop","defaultValue","name","join","getClassExtendString","extendString","extendsProps","extendProps","type","knownTypeName","Error","length","module","exports","generate","libraryName","schema","moduleSpecName","fileName","allImports","Set","componentProps","Object","keys","modules","moduleName","components","filter","excludedPlatform","newName","propsString","imports","forEach","add","replacedTemplate","replace","Boolean","Array","from","sort","Map"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\n'use strict';\n\nimport type {ComponentShape, SchemaType} from '../../CodegenSchema';\nconst {convertDefaultTypeToString, getImports} = require('./CppHelpers');\n\n// File path -> contents\ntype FilesOutput = Map<string, string>;\n\nconst template = `\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n#include <react/components/::_LIBRARY_::/Props.h>\n::_IMPORTS_::\n\nnamespace facebook {\nnamespace react {\n\n::_COMPONENT_CLASSES_::\n\n} // namespace react\n} // namespace facebook\n`;\n\nconst componentTemplate = `\n::_CLASSNAME_::::::_CLASSNAME_::(\n    const ::_CLASSNAME_:: &sourceProps,\n    const RawProps &rawProps):::_EXTEND_CLASSES_::\n\n    ::_PROPS_::\n      {}\n`.trim();\n\nfunction generatePropsString(componentName: string, component: ComponentShape) {\n  return component.props\n    .map(prop => {\n      const defaultValue = convertDefaultTypeToString(componentName, prop);\n      return `${prop.name}(convertRawProp(rawProps, \"${\n        prop.name\n      }\", sourceProps.${prop.name}, {${defaultValue}}))`;\n    })\n    .join(',\\n' + '    ');\n}\n\nfunction getClassExtendString(component): string {\n  const extendString =\n    ' ' +\n    component.extendsProps\n      .map(extendProps => {\n        switch (extendProps.type) {\n          case 'ReactNativeBuiltInType':\n            switch (extendProps.knownTypeName) {\n              case 'ReactNativeCoreViewProps':\n                return 'ViewProps(sourceProps, rawProps)';\n              default:\n                (extendProps.knownTypeName: empty);\n                throw new Error('Invalid knownTypeName');\n            }\n          default:\n            (extendProps.type: empty);\n            throw new Error('Invalid extended type');\n        }\n      })\n      .join(', ') +\n    `${component.props.length > 0 ? ',' : ''}`;\n\n  return extendString;\n}\n\nmodule.exports = {\n  generate(\n    libraryName: string,\n    schema: SchemaType,\n    moduleSpecName: string,\n  ): FilesOutput {\n    const fileName = 'Props.cpp';\n    const allImports: Set<string> = new Set([\n      '#include <react/core/propsConversions.h>',\n    ]);\n\n    const componentProps = Object.keys(schema.modules)\n      .map(moduleName => {\n        const components = schema.modules[moduleName].components;\n        // No components in this module\n        if (components == null) {\n          return null;\n        }\n\n        return Object.keys(components)\n          .filter(componentName => {\n            const component = components[componentName];\n            return component.excludedPlatform !== 'iOS';\n          })\n          .map(componentName => {\n            const component = components[componentName];\n            const newName = `${componentName}Props`;\n\n            const propsString = generatePropsString(componentName, component);\n            const extendString = getClassExtendString(component);\n\n            const imports = getImports(component.props);\n            imports.forEach(allImports.add, allImports);\n\n            const replacedTemplate = componentTemplate\n              .replace(/::_CLASSNAME_::/g, newName)\n              .replace('::_EXTEND_CLASSES_::', extendString)\n              .replace('::_PROPS_::', propsString);\n\n            return replacedTemplate;\n          })\n          .join('\\n');\n      })\n      .filter(Boolean)\n      .join('\\n');\n\n    const replacedTemplate = template\n      .replace(/::_COMPONENT_CLASSES_::/g, componentProps)\n      .replace('::_LIBRARY_::', libraryName)\n      .replace(\n        '::_IMPORTS_::',\n\n        Array.from(allImports)\n          .sort()\n          .join('\\n')\n          .trim(),\n      );\n\n    return new Map([[fileName, replacedTemplate]]);\n  },\n};\n"]},"metadata":{},"sourceType":"script"}