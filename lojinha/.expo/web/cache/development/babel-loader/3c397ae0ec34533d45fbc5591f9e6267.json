{"ast":null,"code":"'use strict';\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar FlowParser = require(\"../../parsers/flow\");\n\nvar fs = require('fs');\n\nfunction combineSchemas(files) {\n  return files.reduce(function (merged, filename) {\n    var contents = fs.readFileSync(filename, 'utf8');\n\n    if (contents && (/export\\s+default\\s+\\(?codegenNativeComponent</.test(contents) || /extends TurboModule/.test(contents))) {\n      var schema = FlowParser.parseFile(filename);\n\n      if (schema && schema.modules) {\n        merged.modules = _objectSpread(_objectSpread({}, merged.modules), schema.modules);\n      }\n    }\n\n    return merged;\n  }, {\n    modules: {}\n  });\n}\n\nmodule.exports = combineSchemas;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/packages/react-native-codegen/src/cli/combine/combine-js-to-schema.js"],"names":["FlowParser","require","fs","combineSchemas","files","reduce","merged","filename","contents","readFileSync","test","schema","parseFile","modules","module","exports"],"mappings":"AAUA;;;;;;;;AAGA,IAAMA,UAAU,GAAGC,OAAO,sBAA1B;;AACA,IAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;;AAEA,SAASE,cAAT,CAAwBC,KAAxB,EAA0D;AACxD,SAAOA,KAAK,CAACC,MAAN,CACL,UAACC,MAAD,EAASC,QAAT,EAAsB;AACpB,QAAMC,QAAQ,GAAGN,EAAE,CAACO,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAAjB;;AACA,QACEC,QAAQ,KACP,gDAAgDE,IAAhD,CAAqDF,QAArD,KACC,sBAAsBE,IAAtB,CAA2BF,QAA3B,CAFM,CADV,EAIE;AACA,UAAMG,MAAM,GAAGX,UAAU,CAACY,SAAX,CAAqBL,QAArB,CAAf;;AAEA,UAAII,MAAM,IAAIA,MAAM,CAACE,OAArB,EAA8B;AAC5BP,QAAAA,MAAM,CAACO,OAAP,mCAAqBP,MAAM,CAACO,OAA5B,GAAwCF,MAAM,CAACE,OAA/C;AACD;AACF;;AACD,WAAOP,MAAP;AACD,GAfI,EAgBL;AAACO,IAAAA,OAAO,EAAE;AAAV,GAhBK,CAAP;AAkBD;;AAEDC,MAAM,CAACC,OAAP,GAAiBZ,cAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\nimport type {SchemaType} from '../../CodegenSchema.js';\n\nconst FlowParser = require('../../parsers/flow');\nconst fs = require('fs');\n\nfunction combineSchemas(files: Array<string>): SchemaType {\n  return files.reduce(\n    (merged, filename) => {\n      const contents = fs.readFileSync(filename, 'utf8');\n      if (\n        contents &&\n        (/export\\s+default\\s+\\(?codegenNativeComponent</.test(contents) ||\n          /extends TurboModule/.test(contents))\n      ) {\n        const schema = FlowParser.parseFile(filename);\n\n        if (schema && schema.modules) {\n          merged.modules = {...merged.modules, ...schema.modules};\n        }\n      }\n      return merged;\n    },\n    {modules: {}},\n  );\n}\n\nmodule.exports = combineSchemas;\n"]},"metadata":{},"sourceType":"script"}