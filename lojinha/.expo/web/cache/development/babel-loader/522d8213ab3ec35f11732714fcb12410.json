{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _require = require(\"../e2e-helpers\"),\n    openComponentWithLabel = _require.openComponentWithLabel,\n    openExampleWithTitle = _require.openExampleWithTitle;\n\ndescribe('Button', function () {\n  beforeAll(function _callee() {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(device.reloadReactNative());\n\n          case 2:\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(openComponentWithLabel('<Button>', '<Button> Simple React Native button component.'));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  });\n  it('Simple button should be tappable', function _callee2() {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(openExampleWithTitle('Simple Button'));\n\n          case 2:\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(element(by.id('simple_button')).tap());\n\n          case 4:\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(expect(element(by.text('Simple has been pressed!'))).toBeVisible());\n\n          case 6:\n            _context2.next = 8;\n            return _regeneratorRuntime.awrap(element(by.text('OK')).tap());\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  });\n  it('Adjusted color button should be tappable', function _callee3() {\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(openExampleWithTitle('Adjusted color'));\n\n          case 2:\n            _context3.next = 4;\n            return _regeneratorRuntime.awrap(element(by.id('purple_button')).tap());\n\n          case 4:\n            _context3.next = 6;\n            return _regeneratorRuntime.awrap(expect(element(by.text('Purple has been pressed!'))).toBeVisible());\n\n          case 6:\n            _context3.next = 8;\n            return _regeneratorRuntime.awrap(element(by.text('OK')).tap());\n\n          case 8:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  });\n  it(\"Two buttons with JustifyContent:'space-between' should be tappable\", function _callee4() {\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return _regeneratorRuntime.awrap(openExampleWithTitle('Fit to text layout'));\n\n          case 2:\n            _context4.next = 4;\n            return _regeneratorRuntime.awrap(element(by.id('left_button')).tap());\n\n          case 4:\n            _context4.next = 6;\n            return _regeneratorRuntime.awrap(expect(element(by.text('Left has been pressed!'))).toBeVisible());\n\n          case 6:\n            _context4.next = 8;\n            return _regeneratorRuntime.awrap(element(by.text('OK')).tap());\n\n          case 8:\n            _context4.next = 10;\n            return _regeneratorRuntime.awrap(element(by.id('right_button')).tap());\n\n          case 10:\n            _context4.next = 12;\n            return _regeneratorRuntime.awrap(expect(element(by.text('Right has been pressed!'))).toBeVisible());\n\n          case 12:\n            _context4.next = 14;\n            return _regeneratorRuntime.awrap(element(by.text('OK')).tap());\n\n          case 14:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  });\n  it('Disabled button should not interact', function _callee5() {\n    return _regeneratorRuntime.async(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return _regeneratorRuntime.awrap(openExampleWithTitle('Disabled Button'));\n\n          case 2:\n            _context5.next = 4;\n            return _regeneratorRuntime.awrap(element(by.id('disabled_button')).tap());\n\n          case 4:\n            _context5.next = 6;\n            return _regeneratorRuntime.awrap(expect(element(by.text('Disabled has been pressed!'))).toBeNotVisible());\n\n          case 6:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  });\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/RNTester/e2e/__tests__/Button-test.js"],"names":["require","openComponentWithLabel","openExampleWithTitle","describe","beforeAll","device","reloadReactNative","it","element","by","id","tap","expect","text","toBeVisible","toBeNotVisible"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+react_native\n * @format\n */\n\n/* global device, element, by, expect */\nconst {\n  openComponentWithLabel,\n  openExampleWithTitle,\n} = require('../e2e-helpers');\n\ndescribe('Button', () => {\n  beforeAll(async () => {\n    await device.reloadReactNative();\n    await openComponentWithLabel(\n      '<Button>',\n      '<Button> Simple React Native button component.',\n    );\n  });\n\n  it('Simple button should be tappable', async () => {\n    await openExampleWithTitle('Simple Button');\n    await element(by.id('simple_button')).tap();\n    await expect(element(by.text('Simple has been pressed!'))).toBeVisible();\n    await element(by.text('OK')).tap();\n  });\n\n  it('Adjusted color button should be tappable', async () => {\n    await openExampleWithTitle('Adjusted color');\n    await element(by.id('purple_button')).tap();\n    await expect(element(by.text('Purple has been pressed!'))).toBeVisible();\n    await element(by.text('OK')).tap();\n  });\n\n  it(\"Two buttons with JustifyContent:'space-between' should be tappable\", async () => {\n    await openExampleWithTitle('Fit to text layout');\n    await element(by.id('left_button')).tap();\n    await expect(element(by.text('Left has been pressed!'))).toBeVisible();\n    await element(by.text('OK')).tap();\n\n    await element(by.id('right_button')).tap();\n    await expect(element(by.text('Right has been pressed!'))).toBeVisible();\n    await element(by.text('OK')).tap();\n  });\n\n  it('Disabled button should not interact', async () => {\n    await openExampleWithTitle('Disabled Button');\n    await element(by.id('disabled_button')).tap();\n    await expect(\n      element(by.text('Disabled has been pressed!')),\n    ).toBeNotVisible();\n  });\n});\n"]},"metadata":{},"sourceType":"script"}