{"ast":null,"code":"'use strict';\n\nvar _extends = require(\"@babel/runtime/helpers/extends\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nvar _jsxFileName = \"/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/RNTester/js/examples/Animated/AnimatedGratuitousApp/AnExTilt.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar React = require('react');\n\nvar Animated = require(\"react-native-web/dist/exports/Animated\").default;\n\nvar PanResponder = require(\"react-native-web/dist/exports/PanResponder\").default;\n\nvar StyleSheet = require(\"react-native-web/dist/exports/StyleSheet\").default;\n\nvar AnExTilt = function (_React$Component) {\n  _inherits(AnExTilt, _React$Component);\n\n  var _super = _createSuper(AnExTilt);\n\n  function AnExTilt(props) {\n    var _this;\n\n    _classCallCheck(this, AnExTilt);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      panX: new Animated.Value(0),\n      opacity: new Animated.Value(1),\n      burns: new Animated.Value(1.15)\n    };\n    _this.state.tiltPanResponder = PanResponder.create({\n      onStartShouldSetPanResponder: function onStartShouldSetPanResponder() {\n        return true;\n      },\n      onPanResponderGrant: function onPanResponderGrant() {\n        Animated.timing(_this.state.opacity, {\n          toValue: _this.state.panX.interpolate({\n            inputRange: [-300, 0, 300],\n            outputRange: [0, 1, 0]\n          }),\n          duration: 0,\n          useNativeDriver: false\n        }).start();\n      },\n      onPanResponderMove: Animated.event([null, {\n        dx: _this.state.panX\n      }], {\n        useNativeDriver: false\n      }),\n      onPanResponderRelease: function onPanResponderRelease(e, gestureState) {\n        var toValue = 0;\n\n        if (gestureState.dx > 100) {\n          toValue = 500;\n        } else if (gestureState.dx < -100) {\n          toValue = -500;\n        }\n\n        Animated.spring(_this.state.panX, {\n          toValue: toValue,\n          velocity: gestureState.vx,\n          tension: 10,\n          friction: 3,\n          useNativeDriver: false\n        }).start();\n\n        _this.state.panX.removeAllListeners();\n\n        var id = _this.state.panX.addListener(function (_ref) {\n          var value = _ref.value;\n\n          if (Math.abs(value) > 400) {\n            _this.state.panX.removeListener(id);\n\n            Animated.timing(_this.state.opacity, {\n              toValue: 1,\n              useNativeDriver: false\n            }).start();\n\n            _this.state.panX.setValue(0);\n\n            toValue !== 0 && _this._startBurnsZoom();\n          }\n        });\n      }\n    });\n    return _this;\n  }\n\n  _createClass(AnExTilt, [{\n    key: \"_startBurnsZoom\",\n    value: function _startBurnsZoom() {\n      this.state.burns.setValue(1);\n      Animated.decay(this.state.burns, {\n        velocity: 1,\n        deceleration: 0.9999,\n        useNativeDriver: false\n      }).start();\n    }\n  }, {\n    key: \"UNSAFE_componentWillMount\",\n    value: function UNSAFE_componentWillMount() {\n      this._startBurnsZoom();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Animated.View, _extends({}, this.state.tiltPanResponder.panHandlers, {\n        style: [styles.tilt, {\n          opacity: this.state.opacity,\n          transform: [{\n            rotate: this.state.panX.interpolate({\n              inputRange: [-320, 320],\n              outputRange: ['-15deg', '15deg']\n            })\n          }, {\n            translateX: this.state.panX\n          }]\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 7\n        }\n      }), React.createElement(Animated.Image, {\n        pointerEvents: \"none\",\n        style: {\n          flex: 1,\n          transform: [{\n            translateX: this.state.panX.interpolate({\n              inputRange: [-3, 3],\n              outputRange: [2, -2]\n            })\n          }, {\n            scale: this.state.burns.interpolate({\n              inputRange: [1, 3000],\n              outputRange: [1, 1.25]\n            })\n          }]\n        },\n        source: require(\"../../../assets/trees.jpg\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return AnExTilt;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  tilt: {\n    overflow: 'hidden',\n    height: 200,\n    marginBottom: 4,\n    backgroundColor: 'rgb(130, 130, 255)',\n    borderColor: 'rgba(0, 0, 0, 0.2)',\n    borderWidth: 1,\n    borderRadius: 20\n  }\n});\nmodule.exports = AnExTilt;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/RNTester/js/examples/Animated/AnimatedGratuitousApp/AnExTilt.js"],"names":["React","require","AnExTilt","props","state","panX","Animated","Value","opacity","burns","tiltPanResponder","PanResponder","create","onStartShouldSetPanResponder","onPanResponderGrant","timing","toValue","interpolate","inputRange","outputRange","duration","useNativeDriver","start","onPanResponderMove","event","dx","onPanResponderRelease","e","gestureState","spring","velocity","vx","tension","friction","removeAllListeners","id","addListener","value","Math","abs","removeListener","setValue","_startBurnsZoom","decay","deceleration","panHandlers","styles","tilt","transform","rotate","translateX","flex","scale","Component","StyleSheet","overflow","height","marginBottom","backgroundColor","borderColor","borderWidth","borderRadius","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst React = require('react');\nconst {Animated, PanResponder, StyleSheet} = require('react-native');\n\nclass AnExTilt extends React.Component<Object, any> {\n  constructor(props: Object) {\n    super(props);\n    this.state = {\n      panX: new Animated.Value(0),\n      opacity: new Animated.Value(1),\n      burns: new Animated.Value(1.15),\n    };\n    this.state.tiltPanResponder = PanResponder.create({\n      onStartShouldSetPanResponder: () => true,\n      onPanResponderGrant: () => {\n        Animated.timing(this.state.opacity, {\n          toValue: this.state.panX.interpolate({\n            inputRange: [-300, 0, 300], // pan is in pixels\n            outputRange: [0, 1, 0], // goes to zero at both edges\n          }),\n\n          // direct tracking\n          duration: 0,\n\n          useNativeDriver: false,\n        }).start();\n      },\n      onPanResponderMove: Animated.event(\n        [null, {dx: this.state.panX}], // panX is linked to the gesture\n        {useNativeDriver: false},\n      ),\n      onPanResponderRelease: (e, gestureState) => {\n        let toValue = 0;\n        if (gestureState.dx > 100) {\n          toValue = 500;\n        } else if (gestureState.dx < -100) {\n          toValue = -500;\n        }\n        Animated.spring(this.state.panX, {\n          // animate back to center or off screen\n          toValue,\n\n          // maintain gesture velocity\n          velocity: gestureState.vx,\n\n          tension: 10,\n          friction: 3,\n          useNativeDriver: false,\n        }).start();\n        this.state.panX.removeAllListeners();\n        const id = this.state.panX.addListener(({value}) => {\n          // listen until offscreen\n          if (Math.abs(value) > 400) {\n            this.state.panX.removeListener(id); // offscreen, so stop listening\n            Animated.timing(this.state.opacity, {\n              // Fade back in.  This unlinks it from tracking this.state.panX\n              toValue: 1,\n\n              useNativeDriver: false,\n            }).start();\n            this.state.panX.setValue(0); // Note: stops the spring animation\n            toValue !== 0 && this._startBurnsZoom();\n          }\n        });\n      },\n    });\n  }\n\n  _startBurnsZoom() {\n    this.state.burns.setValue(1); // reset to beginning\n    Animated.decay(this.state.burns, {\n      // subtle zoom\n      velocity: 1,\n\n      // slow decay\n      deceleration: 0.9999,\n\n      useNativeDriver: false,\n    }).start();\n  }\n\n  UNSAFE_componentWillMount() {\n    this._startBurnsZoom();\n  }\n\n  render(): React.Node {\n    return (\n      <Animated.View\n        {...this.state.tiltPanResponder.panHandlers}\n        style={[\n          styles.tilt,\n          {\n            opacity: this.state.opacity,\n            transform: [\n              {\n                rotate: this.state.panX.interpolate({\n                  inputRange: [-320, 320],\n                  outputRange: ['-15deg', '15deg'],\n                }),\n              }, // interpolate string \"shapes\"\n              {translateX: this.state.panX},\n            ],\n          },\n        ]}>\n        <Animated.Image\n          pointerEvents=\"none\"\n          style={{\n            flex: 1,\n            transform: [\n              {\n                translateX: this.state.panX.interpolate({\n                  inputRange: [-3, 3], // small range is extended by default\n                  outputRange: [2, -2],\n                }), // parallax\n              },\n              {\n                scale: this.state.burns.interpolate({\n                  inputRange: [1, 3000],\n                  outputRange: [1, 1.25],\n                }), // simple multiplier\n              },\n            ],\n          }}\n          source={require('../../../assets/trees.jpg')}\n        />\n      </Animated.View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  tilt: {\n    overflow: 'hidden',\n    height: 200,\n    marginBottom: 4,\n    backgroundColor: 'rgb(130, 130, 255)',\n    borderColor: 'rgba(0, 0, 0, 0.2)',\n    borderWidth: 1,\n    borderRadius: 20,\n  },\n});\n\nmodule.exports = AnExTilt;\n"]},"metadata":{},"sourceType":"script"}