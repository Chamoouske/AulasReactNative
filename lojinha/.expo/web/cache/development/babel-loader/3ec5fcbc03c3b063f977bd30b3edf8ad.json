{"ast":null,"code":"import { IOSProjectConfig, IOSProjectParams, IOSDependencyConfig, IOSDependencyParams, IOSNativeModulesConfig } from \"./ios\";\nimport { AndroidProjectConfig, AndroidProjectParams, AndroidDependencyConfig, AndroidDependencyParams } from \"./android\";\nexport { IOSProjectConfig, IOSProjectParams, IOSDependencyConfig, IOSDependencyParams, IOSNativeModulesConfig };\nexport { AndroidProjectConfig, AndroidProjectParams, AndroidDependencyConfig, AndroidDependencyParams };","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli-types/build/index.d.ts"],"names":["IOSProjectConfig","IOSProjectParams","IOSDependencyConfig","IOSDependencyParams","IOSNativeModulesConfig","AndroidProjectConfig","AndroidProjectParams","AndroidDependencyConfig","AndroidDependencyParams"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,gBAA3B,EAA6CC,mBAA7C,EAAkEC,mBAAlE,EAAuFC,sBAAvF;AACA,SAASC,oBAAT,EAA+BC,oBAA/B,EAAqDC,uBAArD,EAA8EC,uBAA9E;AAsGA,SAASR,gBAAT,EAA2BC,gBAA3B,EAA6CC,mBAA7C,EAAkEC,mBAAlE,EAAuFC,sBAAvF;AACA,SAASC,oBAAT,EAA+BC,oBAA/B,EAAqDC,uBAArD,EAA8EC,uBAA9E","sourcesContent":["import { IOSProjectConfig, IOSProjectParams, IOSDependencyConfig, IOSDependencyParams, IOSNativeModulesConfig } from './ios';\nimport { AndroidProjectConfig, AndroidProjectParams, AndroidDependencyConfig, AndroidDependencyParams } from './android';\nexport declare type InquirerPrompt = any;\nexport declare type CommandFunction<Args = Object> = (argv: Array<string>, ctx: Config, args: Args) => Promise<void> | void;\nexport declare type OptionValue = string | boolean | number;\nexport declare type CommandOption<T = (ctx: Config) => OptionValue> = {\n    name: string;\n    description?: string;\n    parse?: (val: string) => any;\n    default?: OptionValue | T;\n};\nexport declare type DetachedCommandFunction<Args = Object> = (argv: string[], args: Args) => Promise<void> | void;\nexport declare type Command<IsDetached extends boolean = false> = {\n    name: string;\n    description?: string;\n    detached?: IsDetached;\n    examples?: Array<{\n        desc: string;\n        cmd: string;\n    }>;\n    pkg?: {\n        name: string;\n        version: string;\n    };\n    func: IsDetached extends true ? DetachedCommandFunction<Object> : CommandFunction<Object>;\n    options?: Array<CommandOption<IsDetached extends true ? () => OptionValue : (ctx: Config) => OptionValue>>;\n};\nexport declare type DetachedCommand = Command<true>;\ninterface PlatformConfig<ProjectConfig, ProjectParams, DependencyConfig, DependencyParams> {\n    npmPackageName?: string;\n    projectConfig: (projectRoot: string, projectParams: ProjectParams | void) => ProjectConfig | void;\n    dependencyConfig: (dependency: string, params: DependencyParams) => DependencyConfig | void;\n    linkConfig: () => {\n        isInstalled: (projectConfig: ProjectConfig, packageName: string, dependencyConfig: DependencyConfig) => boolean;\n        register: (name: string, dependencyConfig: DependencyConfig, params: Object, projectConfig: ProjectConfig) => void;\n        unregister: (name: string, dependencyConfig: DependencyConfig, projectConfig: ProjectConfig, otherDependencies: Array<DependencyConfig>) => void;\n        copyAssets: (assets: string[], projectConfig: ProjectConfig) => void;\n        unlinkAssets: (assets: string[], projectConfig: ProjectConfig) => void;\n    };\n}\nexport interface Dependency {\n    name: string;\n    root: string;\n    platforms: {\n        android?: AndroidDependencyConfig | null;\n        ios?: IOSDependencyConfig | null;\n        [key: string]: any;\n    };\n    assets: string[];\n    hooks: {\n        prelink?: string;\n        postlink?: string;\n        preunlink?: string;\n        postunlink?: string;\n    };\n    params: InquirerPrompt[];\n}\nexport declare type ProjectConfig = {\n    android?: AndroidProjectConfig;\n    ios?: IOSProjectConfig;\n    [key: string]: any;\n};\n/**\n * @property root - Root where the configuration has been resolved from\n * @property reactNativePath - Path to React Native source\n * @property project - Object that contains configuration for a project (null, when platform not available)\n * @property assets - An array of assets as defined by the user\n * @property dependencies - Map of the dependencies that are present in the project\n * @property platforms - Map of available platforms (build-ins and dynamically loaded)\n * @property commands - An array of commands that are present in 3rd party packages\n */\nexport interface Config extends IOSNativeModulesConfig {\n    root: string;\n    reactNativePath: string;\n    project: ProjectConfig;\n    assets: string[];\n    dependencies: {\n        [key: string]: Dependency;\n    };\n    platforms: {\n        android: PlatformConfig<AndroidProjectConfig, AndroidProjectParams, AndroidDependencyConfig, AndroidDependencyParams>;\n        ios: PlatformConfig<IOSProjectConfig, IOSProjectParams, IOSDependencyConfig, IOSDependencyParams>;\n        [name: string]: PlatformConfig<any, any, any, any>;\n    };\n    commands: Command[];\n}\n/**\n * Shares some structure with Config, except that root is calculated and can't\n * be defined\n */\nexport declare type UserConfig = Omit<Config, 'root'> & {\n    reactNativePath: string | void;\n    project: {\n        android?: AndroidProjectParams;\n        ios?: IOSProjectParams;\n        [key: string]: any;\n    };\n};\nexport declare type UserDependencyConfig = {\n    dependency: Omit<Dependency, 'name' | 'root'>;\n    commands: Command[];\n    platforms: Config['platforms'];\n};\nexport { IOSProjectConfig, IOSProjectParams, IOSDependencyConfig, IOSDependencyParams, IOSNativeModulesConfig, };\nexport { AndroidProjectConfig, AndroidProjectParams, AndroidDependencyConfig, AndroidDependencyParams, };\n//# sourceMappingURL=index.d.ts.map"]},"metadata":{},"sourceType":"module"}