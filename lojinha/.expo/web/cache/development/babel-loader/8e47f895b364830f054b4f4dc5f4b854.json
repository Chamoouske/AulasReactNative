{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nvar _jsxFileName = \"/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/RNTester/js/examples/Layout/LayoutEventsExample.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar React = require('react');\n\nvar Image = require(\"react-native-web/dist/exports/Image\").default;\n\nvar LayoutAnimation = require(\"react-native-web/dist/exports/LayoutAnimation\").default;\n\nvar StyleSheet = require(\"react-native-web/dist/exports/StyleSheet\").default;\n\nvar Text = require(\"react-native-web/dist/exports/Text\").default;\n\nvar View = require(\"react-native-web/dist/exports/View\").default;\n\nvar LayoutEventExample = function (_React$Component) {\n  _inherits(LayoutEventExample, _React$Component);\n\n  var _super = _createSuper(LayoutEventExample);\n\n  function LayoutEventExample() {\n    var _this;\n\n    _classCallCheck(this, LayoutEventExample);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      viewStyle: {\n        margin: 20\n      }\n    };\n\n    _this.animateViewLayout = function () {\n      LayoutAnimation.configureNext(LayoutAnimation.Presets.spring, function () {\n        console.log('layout animation done.');\n\n        _this.addWrapText();\n      });\n\n      _this.setState({\n        viewStyle: {\n          margin: _this.state.viewStyle.margin > 20 ? 20 : 60\n        }\n      });\n    };\n\n    _this.addWrapText = function () {\n      _this.setState({\n        extraText: '  And a bunch more text to wrap around a few lines.'\n      }, _this.changeContainer);\n    };\n\n    _this.changeContainer = function () {\n      _this.setState({\n        containerStyle: {\n          width: 280\n        }\n      });\n    };\n\n    _this.onViewLayout = function (e) {\n      console.log('received view layout event\\n', e.nativeEvent);\n\n      _this.setState({\n        viewLayout: e.nativeEvent.layout\n      });\n    };\n\n    _this.onTextLayout = function (e) {\n      console.log('received text layout event\\n', e.nativeEvent);\n\n      _this.setState({\n        textLayout: e.nativeEvent.layout\n      });\n    };\n\n    _this.onImageLayout = function (e) {\n      console.log('received image layout event\\n', e.nativeEvent);\n\n      _this.setState({\n        imageLayout: e.nativeEvent.layout\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(LayoutEventExample, [{\n    key: \"render\",\n    value: function render() {\n      var viewStyle = [styles.view, this.state.viewStyle];\n      var textLayout = this.state.textLayout || {\n        width: '?',\n        height: '?'\n      };\n      var imageLayout = this.state.imageLayout || {\n        x: '?',\n        y: '?'\n      };\n      return React.createElement(View, {\n        style: this.state.containerStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 7\n        }\n      }, React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 9\n        }\n      }, \"layout events are called on mount and whenever layout is recalculated. Note that the layout event will typically be received\", ' ', React.createElement(Text, {\n        style: styles.italicText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }\n      }, \"before\"), \" the layout has updated on screen, especially when using layout animations.\", '  ', React.createElement(Text, {\n        style: styles.pressText,\n        onPress: this.animateViewLayout,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }\n      }, \"Press here to change layout.\")), React.createElement(View, {\n        ref: \"view\",\n        onLayout: this.onViewLayout,\n        style: viewStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 9\n        }\n      }, React.createElement(Image, {\n        ref: \"img\",\n        onLayout: this.onImageLayout,\n        style: styles.image,\n        source: {\n          uri: 'https://www.facebook.com/favicon.ico'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }\n      }), React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }\n      }, \"ViewLayout:\", ' ', JSON.stringify(this.state.viewLayout, null, '  ') + '\\n\\n'), React.createElement(Text, {\n        ref: \"txt\",\n        onLayout: this.onTextLayout,\n        style: styles.text,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }\n      }, \"A simple piece of text.\", this.state.extraText), React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }\n      }, '\\n', \"Text w/h: \", textLayout.width, \"/\", textLayout.height + '\\n', \"Image x/y: \", imageLayout.x, \"/\", imageLayout.y)));\n    }\n  }]);\n\n  return LayoutEventExample;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  view: {\n    padding: 12,\n    borderColor: 'black',\n    borderWidth: 0.5,\n    backgroundColor: 'transparent'\n  },\n  text: {\n    alignSelf: 'flex-start',\n    borderColor: 'rgba(0, 0, 255, 0.2)',\n    borderWidth: 0.5\n  },\n  image: {\n    width: 50,\n    height: 50,\n    marginBottom: 10,\n    alignSelf: 'center'\n  },\n  pressText: {\n    fontWeight: 'bold'\n  },\n  italicText: {\n    fontStyle: 'italic'\n  }\n});\nexports.title = 'Layout Events';\nexports.description = 'Examples that show how Layout events can be used to ' + 'measure view size and position.';\nexports.examples = [{\n  title: 'LayoutEventExample',\n  render: function render() {\n    return React.createElement(LayoutEventExample, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 14\n      }\n    });\n  }\n}];","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/RNTester/js/examples/Layout/LayoutEventsExample.js"],"names":["React","require","LayoutEventExample","state","viewStyle","margin","animateViewLayout","LayoutAnimation","configureNext","Presets","spring","console","log","addWrapText","setState","extraText","changeContainer","containerStyle","width","onViewLayout","e","nativeEvent","viewLayout","layout","onTextLayout","textLayout","onImageLayout","imageLayout","styles","view","height","x","y","italicText","pressText","image","uri","JSON","stringify","text","Component","StyleSheet","create","padding","borderColor","borderWidth","backgroundColor","alignSelf","marginBottom","fontWeight","fontStyle","exports","title","description","examples","render"],"mappings":"AAUA;;;;;;;;;;;;;;;;;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;;;;;;;;;;;IA0BMC,kB;;;;;;;;;;;;;;;UACJC,K,GAAe;AACbC,MAAAA,SAAS,EAAE;AACTC,QAAAA,MAAM,EAAE;AADC;AADE,K;;UAMfC,iB,GAAoB,YAAM;AACxBC,MAAAA,eAAe,CAACC,aAAhB,CAA8BD,eAAe,CAACE,OAAhB,CAAwBC,MAAtD,EAA8D,YAAM;AAClEC,QAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;;AACA,cAAKC,WAAL;AACD,OAHD;;AAIA,YAAKC,QAAL,CAAc;AACZV,QAAAA,SAAS,EAAE;AACTC,UAAAA,MAAM,EAAE,MAAKF,KAAL,CAAWC,SAAX,CAAqBC,MAArB,GAA8B,EAA9B,GAAmC,EAAnC,GAAwC;AADvC;AADC,OAAd;AAKD,K;;UAEDQ,W,GAAc,YAAM;AAClB,YAAKC,QAAL,CACE;AAACC,QAAAA,SAAS,EAAE;AAAZ,OADF,EAEE,MAAKC,eAFP;AAID,K;;UAEDA,e,GAAkB,YAAM;AACtB,YAAKF,QAAL,CAAc;AAACG,QAAAA,cAAc,EAAE;AAACC,UAAAA,KAAK,EAAE;AAAR;AAAjB,OAAd;AACD,K;;UAEDC,Y,GAAe,UAACC,CAAD,EAAwB;AACrCT,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CQ,CAAC,CAACC,WAA9C;;AACA,YAAKP,QAAL,CAAc;AAACQ,QAAAA,UAAU,EAAEF,CAAC,CAACC,WAAF,CAAcE;AAA3B,OAAd;AACD,K;;UAEDC,Y,GAAe,UAACJ,CAAD,EAAwB;AACrCT,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CQ,CAAC,CAACC,WAA9C;;AACA,YAAKP,QAAL,CAAc;AAACW,QAAAA,UAAU,EAAEL,CAAC,CAACC,WAAF,CAAcE;AAA3B,OAAd;AACD,K;;UAEDG,a,GAAgB,UAACN,CAAD,EAAwB;AACtCT,MAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6CQ,CAAC,CAACC,WAA/C;;AACA,YAAKP,QAAL,CAAc;AAACa,QAAAA,WAAW,EAAEP,CAAC,CAACC,WAAF,CAAcE;AAA5B,OAAd;AACD,K;;;;;;;WAED,kBAAS;AACP,UAAMnB,SAAS,GAAG,CAACwB,MAAM,CAACC,IAAR,EAAc,KAAK1B,KAAL,CAAWC,SAAzB,CAAlB;AACA,UAAMqB,UAAU,GAAG,KAAKtB,KAAL,CAAWsB,UAAX,IAAyB;AAACP,QAAAA,KAAK,EAAE,GAAR;AAAaY,QAAAA,MAAM,EAAE;AAArB,OAA5C;AACA,UAAMH,WAAW,GAAG,KAAKxB,KAAL,CAAWwB,WAAX,IAA0B;AAACI,QAAAA,CAAC,EAAE,GAAJ;AAASC,QAAAA,CAAC,EAAE;AAAZ,OAA9C;AACA,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,KAAK7B,KAAL,CAAWc,cAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yIAEwD,GAFxD,EAGE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEW,MAAM,CAACK,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,iFAIsD,IAJtD,EAKE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEL,MAAM,CAACM,SAApB;AAA+B,QAAA,OAAO,EAAE,KAAK5B,iBAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCALF,CADF,EAUE,oBAAC,IAAD;AAAM,QAAA,GAAG,EAAC,MAAV;AAAiB,QAAA,QAAQ,EAAE,KAAKa,YAAhC;AAA8C,QAAA,KAAK,EAAEf,SAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD;AACE,QAAA,GAAG,EAAC,KADN;AAEE,QAAA,QAAQ,EAAE,KAAKsB,aAFjB;AAGE,QAAA,KAAK,EAAEE,MAAM,CAACO,KAHhB;AAIE,QAAA,MAAM,EAAE;AACNC,UAAAA,GAAG,EAAE;AADC,SAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EASE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACc,GADd,EAKEC,IAAI,CAACC,SAAL,CAAe,KAAKnC,KAAL,CAAWmB,UAA1B,EAAsC,IAAtC,EAA4C,IAA5C,IAAoD,MALtD,CATF,EAgBE,oBAAC,IAAD;AAAM,QAAA,GAAG,EAAC,KAAV;AAAgB,QAAA,QAAQ,EAAE,KAAKE,YAA/B;AAA6C,QAAA,KAAK,EAAEI,MAAM,CAACW,IAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAC0B,KAAKpC,KAAL,CAAWY,SADrC,CAhBF,EAmBE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,IADH,gBAEaU,UAAU,CAACP,KAFxB,OAEgCO,UAAU,CAACK,MAAX,GAAoB,IAFpD,iBAGcH,WAAW,CAACI,CAH1B,OAG8BJ,WAAW,CAACK,CAH1C,CAnBF,CAVF,CADF;AAsCD;;;;EAvF8BhC,KAAK,CAACwC,S;;AA0FvC,IAAMZ,MAAM,GAAGa,UAAU,CAACC,MAAX,CAAkB;AAC/Bb,EAAAA,IAAI,EAAE;AACJc,IAAAA,OAAO,EAAE,EADL;AAEJC,IAAAA,WAAW,EAAE,OAFT;AAGJC,IAAAA,WAAW,EAAE,GAHT;AAIJC,IAAAA,eAAe,EAAE;AAJb,GADyB;AAO/BP,EAAAA,IAAI,EAAE;AACJQ,IAAAA,SAAS,EAAE,YADP;AAEJH,IAAAA,WAAW,EAAE,sBAFT;AAGJC,IAAAA,WAAW,EAAE;AAHT,GAPyB;AAY/BV,EAAAA,KAAK,EAAE;AACLjB,IAAAA,KAAK,EAAE,EADF;AAELY,IAAAA,MAAM,EAAE,EAFH;AAGLkB,IAAAA,YAAY,EAAE,EAHT;AAILD,IAAAA,SAAS,EAAE;AAJN,GAZwB;AAkB/Bb,EAAAA,SAAS,EAAE;AACTe,IAAAA,UAAU,EAAE;AADH,GAlBoB;AAqB/BhB,EAAAA,UAAU,EAAE;AACViB,IAAAA,SAAS,EAAE;AADD;AArBmB,CAAlB,CAAf;AA0BAC,OAAO,CAACC,KAAR,GAAgB,eAAhB;AACAD,OAAO,CAACE,WAAR,GAAuB,yDACrB,iCADF;AAEAF,OAAO,CAACG,QAAR,GAAmB,CACjB;AACEF,EAAAA,KAAK,EAAE,oBADT;AAEEG,EAAAA,MAAM,EAAE,kBAA+B;AACrC,WAAO,oBAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;AAJH,CADiB,CAAnB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst React = require('react');\n\nconst {\n  Image,\n  LayoutAnimation,\n  StyleSheet,\n  Text,\n  View,\n} = require('react-native');\n\nimport type {\n  ViewLayout,\n  ViewLayoutEvent,\n} from '../../../../Libraries/Components/View/ViewPropTypes';\n\ntype Props = $ReadOnly<{||}>;\ntype State = {\n  containerStyle?: {|width: number|},\n  extraText?: string,\n  imageLayout?: ViewLayout,\n  textLayout?: ViewLayout,\n  viewLayout?: ViewLayout,\n  viewStyle: {|margin: number|},\n  ...\n};\n\nclass LayoutEventExample extends React.Component<Props, State> {\n  state: State = {\n    viewStyle: {\n      margin: 20,\n    },\n  };\n\n  animateViewLayout = () => {\n    LayoutAnimation.configureNext(LayoutAnimation.Presets.spring, () => {\n      console.log('layout animation done.');\n      this.addWrapText();\n    });\n    this.setState({\n      viewStyle: {\n        margin: this.state.viewStyle.margin > 20 ? 20 : 60,\n      },\n    });\n  };\n\n  addWrapText = () => {\n    this.setState(\n      {extraText: '  And a bunch more text to wrap around a few lines.'},\n      this.changeContainer,\n    );\n  };\n\n  changeContainer = () => {\n    this.setState({containerStyle: {width: 280}});\n  };\n\n  onViewLayout = (e: ViewLayoutEvent) => {\n    console.log('received view layout event\\n', e.nativeEvent);\n    this.setState({viewLayout: e.nativeEvent.layout});\n  };\n\n  onTextLayout = (e: ViewLayoutEvent) => {\n    console.log('received text layout event\\n', e.nativeEvent);\n    this.setState({textLayout: e.nativeEvent.layout});\n  };\n\n  onImageLayout = (e: ViewLayoutEvent) => {\n    console.log('received image layout event\\n', e.nativeEvent);\n    this.setState({imageLayout: e.nativeEvent.layout});\n  };\n\n  render() {\n    const viewStyle = [styles.view, this.state.viewStyle];\n    const textLayout = this.state.textLayout || {width: '?', height: '?'};\n    const imageLayout = this.state.imageLayout || {x: '?', y: '?'};\n    return (\n      <View style={this.state.containerStyle}>\n        <Text>\n          layout events are called on mount and whenever layout is recalculated.\n          Note that the layout event will typically be received{' '}\n          <Text style={styles.italicText}>before</Text> the layout has updated\n          on screen, especially when using layout animations.{'  '}\n          <Text style={styles.pressText} onPress={this.animateViewLayout}>\n            Press here to change layout.\n          </Text>\n        </Text>\n        <View ref=\"view\" onLayout={this.onViewLayout} style={viewStyle}>\n          <Image\n            ref=\"img\"\n            onLayout={this.onImageLayout}\n            style={styles.image}\n            source={{\n              uri: 'https://www.facebook.com/favicon.ico',\n            }}\n          />\n          <Text>\n            ViewLayout:{' '}\n            {/* $FlowFixMe(>=0.95.0 site=react_native_fb) This comment\n             * suppresses an error found when Flow v0.95 was deployed. To see\n             * the error, delete this comment and run Flow. */\n            JSON.stringify(this.state.viewLayout, null, '  ') + '\\n\\n'}\n          </Text>\n          <Text ref=\"txt\" onLayout={this.onTextLayout} style={styles.text}>\n            A simple piece of text.{this.state.extraText}\n          </Text>\n          <Text>\n            {'\\n'}\n            Text w/h: {textLayout.width}/{textLayout.height + '\\n'}\n            Image x/y: {imageLayout.x}/{imageLayout.y}\n          </Text>\n        </View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  view: {\n    padding: 12,\n    borderColor: 'black',\n    borderWidth: 0.5,\n    backgroundColor: 'transparent',\n  },\n  text: {\n    alignSelf: 'flex-start',\n    borderColor: 'rgba(0, 0, 255, 0.2)',\n    borderWidth: 0.5,\n  },\n  image: {\n    width: 50,\n    height: 50,\n    marginBottom: 10,\n    alignSelf: 'center',\n  },\n  pressText: {\n    fontWeight: 'bold',\n  },\n  italicText: {\n    fontStyle: 'italic',\n  },\n});\n\nexports.title = 'Layout Events';\nexports.description = ('Examples that show how Layout events can be used to ' +\n  'measure view size and position.': string);\nexports.examples = [\n  {\n    title: 'LayoutEventExample',\n    render: function(): React.Element<any> {\n      return <LayoutEventExample />;\n    },\n  },\n];\n"]},"metadata":{},"sourceType":"script"}