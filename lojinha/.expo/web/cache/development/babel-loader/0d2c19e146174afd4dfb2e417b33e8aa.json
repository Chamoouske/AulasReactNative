{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar binaryExtensions = ['.png', '.jar', '.keystore'];\n\nfunction copyAndReplace(srcPath, destPath, replacements, contentChangedCallback) {\n  if (_fs().default.lstatSync(srcPath).isDirectory()) {\n    if (!_fs().default.existsSync(destPath)) {\n      _fs().default.mkdirSync(destPath);\n    }\n\n    return;\n  }\n\n  var extension = _path().default.extname(srcPath);\n\n  if (binaryExtensions.indexOf(extension) !== -1) {\n    var shouldOverwrite = 'overwrite';\n\n    if (contentChangedCallback) {\n      var newContentBuffer = _fs().default.readFileSync(srcPath);\n\n      var contentChanged = 'identical';\n\n      try {\n        var origContentBuffer = _fs().default.readFileSync(destPath);\n\n        if (Buffer.compare(origContentBuffer, newContentBuffer) !== 0) {\n          contentChanged = 'changed';\n        }\n      } catch (err) {\n        if (err.code === 'ENOENT') {\n          contentChanged = 'new';\n        } else {\n          throw err;\n        }\n      }\n\n      shouldOverwrite = contentChangedCallback(destPath, contentChanged);\n    }\n\n    if (shouldOverwrite === 'overwrite') {\n      copyBinaryFile(srcPath, destPath, function (err) {\n        if (err) {\n          throw err;\n        }\n      });\n    }\n  } else {\n    var srcPermissions = _fs().default.statSync(srcPath).mode;\n\n    var content = _fs().default.readFileSync(srcPath, 'utf8');\n\n    Object.keys(replacements).forEach(function (regex) {\n      content = content.replace(new RegExp(regex, 'g'), replacements[regex]);\n    });\n    var _shouldOverwrite = 'overwrite';\n\n    if (contentChangedCallback) {\n      var _contentChanged = 'identical';\n\n      try {\n        var origContent = _fs().default.readFileSync(destPath, 'utf8');\n\n        if (content !== origContent) {\n          _contentChanged = 'changed';\n        }\n      } catch (err) {\n        if (err.code === 'ENOENT') {\n          _contentChanged = 'new';\n        } else {\n          throw err;\n        }\n      }\n\n      _shouldOverwrite = contentChangedCallback(destPath, _contentChanged);\n    }\n\n    if (_shouldOverwrite === 'overwrite') {\n      _fs().default.writeFileSync(destPath, content, {\n        encoding: 'utf8',\n        mode: srcPermissions\n      });\n    }\n  }\n}\n\nfunction copyBinaryFile(srcPath, destPath, cb) {\n  var cbCalled = false;\n\n  var srcPermissions = _fs().default.statSync(srcPath).mode;\n\n  var readStream = _fs().default.createReadStream(srcPath);\n\n  readStream.on('error', function (err) {\n    done(err);\n  });\n\n  var writeStream = _fs().default.createWriteStream(destPath, {\n    mode: srcPermissions\n  });\n\n  writeStream.on('error', function (err) {\n    done(err);\n  });\n  writeStream.on('close', function () {\n    done();\n  });\n  readStream.pipe(writeStream);\n\n  function done(err) {\n    if (!cbCalled) {\n      cb(err);\n      cbCalled = true;\n    }\n  }\n}\n\nvar _default = copyAndReplace;\nexports.default = _default;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli/build/tools/copyAndReplace.js"],"names":["Object","defineProperty","exports","value","default","_fs","data","_interopRequireDefault","require","_path","obj","__esModule","binaryExtensions","copyAndReplace","srcPath","destPath","replacements","contentChangedCallback","lstatSync","isDirectory","existsSync","mkdirSync","extension","extname","indexOf","shouldOverwrite","newContentBuffer","readFileSync","contentChanged","origContentBuffer","Buffer","compare","err","code","copyBinaryFile","srcPermissions","statSync","mode","content","keys","forEach","regex","replace","RegExp","origContent","writeFileSync","encoding","cb","cbCalled","readStream","createReadStream","on","done","writeStream","createWriteStream","pipe","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,SAASC,GAAT,GAAe;AACb,MAAMC,IAAI,GAAGC,sBAAsB,CAACC,OAAO,CAAC,IAAD,CAAR,CAAnC;;AAEAH,EAAAA,GAAG,GAAG,eAAY;AAChB,WAAOC,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,SAASG,KAAT,GAAiB;AACf,MAAMH,IAAI,GAAGC,sBAAsB,CAACC,OAAO,CAAC,MAAD,CAAR,CAAnC;;AAEAC,EAAAA,KAAK,GAAG,iBAAY;AAClB,WAAOH,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,SAASC,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEN,IAAAA,OAAO,EAAEM;AAAX,GAArC;AAAwD;;AAW/F,IAAME,gBAAgB,GAAG,CAAC,MAAD,EAAS,MAAT,EAAiB,WAAjB,CAAzB;;AAcA,SAASC,cAAT,CAAwBC,OAAxB,EAAiCC,QAAjC,EAA2CC,YAA3C,EAAyDC,sBAAzD,EAAiF;AAC/E,MAAIZ,GAAG,GAAGD,OAAN,CAAcc,SAAd,CAAwBJ,OAAxB,EAAiCK,WAAjC,EAAJ,EAAoD;AAClD,QAAI,CAACd,GAAG,GAAGD,OAAN,CAAcgB,UAAd,CAAyBL,QAAzB,CAAL,EAAyC;AACvCV,MAAAA,GAAG,GAAGD,OAAN,CAAciB,SAAd,CAAwBN,QAAxB;AACD;;AAGD;AACD;;AAED,MAAMO,SAAS,GAAGb,KAAK,GAAGL,OAAR,CAAgBmB,OAAhB,CAAwBT,OAAxB,CAAlB;;AAEA,MAAIF,gBAAgB,CAACY,OAAjB,CAAyBF,SAAzB,MAAwC,CAAC,CAA7C,EAAgD;AAE9C,QAAIG,eAAe,GAAG,WAAtB;;AAEA,QAAIR,sBAAJ,EAA4B;AAC1B,UAAMS,gBAAgB,GAAGrB,GAAG,GAAGD,OAAN,CAAcuB,YAAd,CAA2Bb,OAA3B,CAAzB;;AAEA,UAAIc,cAAc,GAAG,WAArB;;AAEA,UAAI;AACF,YAAMC,iBAAiB,GAAGxB,GAAG,GAAGD,OAAN,CAAcuB,YAAd,CAA2BZ,QAA3B,CAA1B;;AAEA,YAAIe,MAAM,CAACC,OAAP,CAAeF,iBAAf,EAAkCH,gBAAlC,MAAwD,CAA5D,EAA+D;AAC7DE,UAAAA,cAAc,GAAG,SAAjB;AACD;AACF,OAND,CAME,OAAOI,GAAP,EAAY;AACZ,YAAIA,GAAG,CAACC,IAAJ,KAAa,QAAjB,EAA2B;AACzBL,UAAAA,cAAc,GAAG,KAAjB;AACD,SAFD,MAEO;AACL,gBAAMI,GAAN;AACD;AACF;;AAEDP,MAAAA,eAAe,GAAGR,sBAAsB,CAACF,QAAD,EAAWa,cAAX,CAAxC;AACD;;AAED,QAAIH,eAAe,KAAK,WAAxB,EAAqC;AACnCS,MAAAA,cAAc,CAACpB,OAAD,EAAUC,QAAV,EAAoB,UAAAiB,GAAG,EAAI;AACvC,YAAIA,GAAJ,EAAS;AACP,gBAAMA,GAAN;AACD;AACF,OAJa,CAAd;AAKD;AACF,GAjCD,MAiCO;AAEL,QAAMG,cAAc,GAAG9B,GAAG,GAAGD,OAAN,CAAcgC,QAAd,CAAuBtB,OAAvB,EAAgCuB,IAAvD;;AAEA,QAAIC,OAAO,GAAGjC,GAAG,GAAGD,OAAN,CAAcuB,YAAd,CAA2Bb,OAA3B,EAAoC,MAApC,CAAd;;AAEAd,IAAAA,MAAM,CAACuC,IAAP,CAAYvB,YAAZ,EAA0BwB,OAA1B,CAAkC,UAAAC,KAAK,EAAI;AACzCH,MAAAA,OAAO,GAAGA,OAAO,CAACI,OAAR,CAAgB,IAAIC,MAAJ,CAAWF,KAAX,EAAkB,GAAlB,CAAhB,EAAwCzB,YAAY,CAACyB,KAAD,CAApD,CAAV;AACD,KAFD;AAGA,QAAIhB,gBAAe,GAAG,WAAtB;;AAEA,QAAIR,sBAAJ,EAA4B;AAE1B,UAAIW,eAAc,GAAG,WAArB;;AAEA,UAAI;AACF,YAAMgB,WAAW,GAAGvC,GAAG,GAAGD,OAAN,CAAcuB,YAAd,CAA2BZ,QAA3B,EAAqC,MAArC,CAApB;;AAEA,YAAIuB,OAAO,KAAKM,WAAhB,EAA6B;AAE3BhB,UAAAA,eAAc,GAAG,SAAjB;AACD;AACF,OAPD,CAOE,OAAOI,GAAP,EAAY;AACZ,YAAIA,GAAG,CAACC,IAAJ,KAAa,QAAjB,EAA2B;AACzBL,UAAAA,eAAc,GAAG,KAAjB;AACD,SAFD,MAEO;AACL,gBAAMI,GAAN;AACD;AACF;;AAEDP,MAAAA,gBAAe,GAAGR,sBAAsB,CAACF,QAAD,EAAWa,eAAX,CAAxC;AACD;;AAED,QAAIH,gBAAe,KAAK,WAAxB,EAAqC;AACnCpB,MAAAA,GAAG,GAAGD,OAAN,CAAcyC,aAAd,CAA4B9B,QAA5B,EAAsCuB,OAAtC,EAA+C;AAC7CQ,QAAAA,QAAQ,EAAE,MADmC;AAE7CT,QAAAA,IAAI,EAAEF;AAFuC,OAA/C;AAID;AACF;AACF;;AAMD,SAASD,cAAT,CAAwBpB,OAAxB,EAAiCC,QAAjC,EAA2CgC,EAA3C,EAA+C;AAC7C,MAAIC,QAAQ,GAAG,KAAf;;AAEA,MAAMb,cAAc,GAAG9B,GAAG,GAAGD,OAAN,CAAcgC,QAAd,CAAuBtB,OAAvB,EAAgCuB,IAAvD;;AAEA,MAAMY,UAAU,GAAG5C,GAAG,GAAGD,OAAN,CAAc8C,gBAAd,CAA+BpC,OAA/B,CAAnB;;AAEAmC,EAAAA,UAAU,CAACE,EAAX,CAAc,OAAd,EAAuB,UAAAnB,GAAG,EAAI;AAC5BoB,IAAAA,IAAI,CAACpB,GAAD,CAAJ;AACD,GAFD;;AAIA,MAAMqB,WAAW,GAAGhD,GAAG,GAAGD,OAAN,CAAckD,iBAAd,CAAgCvC,QAAhC,EAA0C;AAC5DsB,IAAAA,IAAI,EAAEF;AADsD,GAA1C,CAApB;;AAIAkB,EAAAA,WAAW,CAACF,EAAZ,CAAe,OAAf,EAAwB,UAAAnB,GAAG,EAAI;AAC7BoB,IAAAA,IAAI,CAACpB,GAAD,CAAJ;AACD,GAFD;AAGAqB,EAAAA,WAAW,CAACF,EAAZ,CAAe,OAAf,EAAwB,YAAM;AAC5BC,IAAAA,IAAI;AACL,GAFD;AAGAH,EAAAA,UAAU,CAACM,IAAX,CAAgBF,WAAhB;;AAEA,WAASD,IAAT,CAAcpB,GAAd,EAAmB;AACjB,QAAI,CAACgB,QAAL,EAAe;AACbD,MAAAA,EAAE,CAACf,GAAD,CAAF;AACAgB,MAAAA,QAAQ,GAAG,IAAX;AACD;AACF;AACF;;AAED,IAAIQ,QAAQ,GAAG3C,cAAf;AACAX,OAAO,CAACE,OAAR,GAAkBoD,QAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _fs() {\n  const data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  const data = _interopRequireDefault(require(\"path\"));\n\n  _path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n// Binary files, don't process these (avoid decoding as utf8)\nconst binaryExtensions = ['.png', '.jar', '.keystore'];\n\n/**\n * Copy a file to given destination, replacing parts of its contents.\n * @param srcPath Path to a file to be copied.\n * @param destPath Destination path.\n * @param replacements: e.g. {'TextToBeReplaced': 'Replacement'}\n * @param contentChangedCallback\n *        Used when upgrading projects. Based on if file contents would change\n *        when being replaced, allows the caller to specify whether the file\n *        should be replaced or not.\n *        If null, files will be overwritten.\n *        Function(path, 'identical' | 'changed' | 'new') => 'keep' | 'overwrite'\n */\nfunction copyAndReplace(srcPath, destPath, replacements, contentChangedCallback) {\n  if (_fs().default.lstatSync(srcPath).isDirectory()) {\n    if (!_fs().default.existsSync(destPath)) {\n      _fs().default.mkdirSync(destPath);\n    } // Not recursive\n\n\n    return;\n  }\n\n  const extension = _path().default.extname(srcPath);\n\n  if (binaryExtensions.indexOf(extension) !== -1) {\n    // Binary file\n    let shouldOverwrite = 'overwrite';\n\n    if (contentChangedCallback) {\n      const newContentBuffer = _fs().default.readFileSync(srcPath);\n\n      let contentChanged = 'identical';\n\n      try {\n        const origContentBuffer = _fs().default.readFileSync(destPath);\n\n        if (Buffer.compare(origContentBuffer, newContentBuffer) !== 0) {\n          contentChanged = 'changed';\n        }\n      } catch (err) {\n        if (err.code === 'ENOENT') {\n          contentChanged = 'new';\n        } else {\n          throw err;\n        }\n      }\n\n      shouldOverwrite = contentChangedCallback(destPath, contentChanged);\n    }\n\n    if (shouldOverwrite === 'overwrite') {\n      copyBinaryFile(srcPath, destPath, err => {\n        if (err) {\n          throw err;\n        }\n      });\n    }\n  } else {\n    // Text file\n    const srcPermissions = _fs().default.statSync(srcPath).mode;\n\n    let content = _fs().default.readFileSync(srcPath, 'utf8');\n\n    Object.keys(replacements).forEach(regex => {\n      content = content.replace(new RegExp(regex, 'g'), replacements[regex]);\n    });\n    let shouldOverwrite = 'overwrite';\n\n    if (contentChangedCallback) {\n      // Check if contents changed and ask to overwrite\n      let contentChanged = 'identical';\n\n      try {\n        const origContent = _fs().default.readFileSync(destPath, 'utf8');\n\n        if (content !== origContent) {\n          // logger.info('Content changed: ' + destPath);\n          contentChanged = 'changed';\n        }\n      } catch (err) {\n        if (err.code === 'ENOENT') {\n          contentChanged = 'new';\n        } else {\n          throw err;\n        }\n      }\n\n      shouldOverwrite = contentChangedCallback(destPath, contentChanged);\n    }\n\n    if (shouldOverwrite === 'overwrite') {\n      _fs().default.writeFileSync(destPath, content, {\n        encoding: 'utf8',\n        mode: srcPermissions\n      });\n    }\n  }\n}\n/**\n * Same as 'cp' on Unix. Don't do any replacements.\n */\n\n\nfunction copyBinaryFile(srcPath, destPath, cb) {\n  let cbCalled = false;\n\n  const srcPermissions = _fs().default.statSync(srcPath).mode;\n\n  const readStream = _fs().default.createReadStream(srcPath);\n\n  readStream.on('error', err => {\n    done(err);\n  });\n\n  const writeStream = _fs().default.createWriteStream(destPath, {\n    mode: srcPermissions\n  });\n\n  writeStream.on('error', err => {\n    done(err);\n  });\n  writeStream.on('close', () => {\n    done();\n  });\n  readStream.pipe(writeStream);\n\n  function done(err) {\n    if (!cbCalled) {\n      cb(err);\n      cbCalled = true;\n    }\n  }\n}\n\nvar _default = copyAndReplace;\nexports.default = _default;\n\n//# sourceMappingURL=copyAndReplace.js.map"]},"metadata":{},"sourceType":"script"}