{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar core_plugins_1 = require(\"../plugins/core-plugins\");\n\nvar XML_1 = require(\"../utils/XML\");\n\nvar Colors_1 = require(\"./Colors\");\n\nvar Resources_1 = require(\"./Resources\");\n\nvar Styles_1 = require(\"./Styles\");\n\nvar COLOR_PRIMARY_KEY = 'colorPrimary';\nvar DEFAULT_PRIMARY_COLOR = '#023c69';\n\nexports.withPrimaryColor = function (config) {\n  return core_plugins_1.withDangerousMod(config, ['android', function _callee(config) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(setPrimaryColor(config, config.modRequest.projectRoot));\n\n          case 2:\n            return _context.abrupt(\"return\", config);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }]);\n};\n\nfunction getPrimaryColor(config) {\n  var _a;\n\n  return (_a = config.primaryColor) !== null && _a !== void 0 ? _a : DEFAULT_PRIMARY_COLOR;\n}\n\nexports.getPrimaryColor = getPrimaryColor;\n\nfunction setPrimaryColor(config, projectRoot) {\n  var hexString, stylesPath, colorsPath, stylesJSON, colorsJSON, colorItemToAdd, styleItemToAdd;\n  return _regeneratorRuntime.async(function setPrimaryColor$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          hexString = getPrimaryColor(config);\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(Styles_1.getProjectStylesXMLPathAsync(projectRoot));\n\n        case 3:\n          stylesPath = _context2.sent;\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(Colors_1.getProjectColorsXMLPathAsync(projectRoot));\n\n        case 6:\n          colorsPath = _context2.sent;\n          _context2.next = 9;\n          return _regeneratorRuntime.awrap(Resources_1.readResourcesXMLAsync({\n            path: stylesPath\n          }));\n\n        case 9:\n          stylesJSON = _context2.sent;\n          _context2.next = 12;\n          return _regeneratorRuntime.awrap(Resources_1.readResourcesXMLAsync({\n            path: colorsPath\n          }));\n\n        case 12:\n          colorsJSON = _context2.sent;\n          colorItemToAdd = Resources_1.buildResourceItem({\n            name: COLOR_PRIMARY_KEY,\n            value: hexString\n          });\n          styleItemToAdd = Resources_1.buildResourceItem({\n            name: COLOR_PRIMARY_KEY,\n            value: \"@color/\" + COLOR_PRIMARY_KEY\n          });\n          colorsJSON = Colors_1.setColorItem(colorItemToAdd, colorsJSON);\n          stylesJSON = Styles_1.setStylesItem({\n            item: styleItemToAdd,\n            xml: stylesJSON,\n            parent: {\n              name: 'AppTheme',\n              parent: 'Theme.AppCompat.Light.NoActionBar'\n            }\n          });\n          _context2.prev = 17;\n          _context2.next = 20;\n          return _regeneratorRuntime.awrap(Promise.all([XML_1.writeXMLAsync({\n            path: colorsPath,\n            xml: colorsJSON\n          }), XML_1.writeXMLAsync({\n            path: stylesPath,\n            xml: stylesJSON\n          })]));\n\n        case 20:\n          _context2.next = 25;\n          break;\n\n        case 22:\n          _context2.prev = 22;\n          _context2.t0 = _context2[\"catch\"](17);\n          throw new Error(\"Error setting Android primary color. Cannot write new styles.xml to \" + stylesPath + \".\");\n\n        case 25:\n          return _context2.abrupt(\"return\", true);\n\n        case 26:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[17, 22]], Promise);\n}\n\nexports.setPrimaryColor = setPrimaryColor;","map":{"version":3,"sources":["../../src/android/PrimaryColor.ts"],"names":[],"mappings":";;;;;;;;AAGA,IAAA,cAAA,GAAA,OAAA,2BAAA;;AACA,IAAA,KAAA,GAAA,OAAA,gBAAA;;AACA,IAAA,QAAA,GAAA,OAAA,YAAA;;AACA,IAAA,WAAA,GAAA,OAAA,eAAA;;AACA,IAAA,QAAA,GAAA,OAAA,YAAA;;AAEA,IAAM,iBAAiB,GAAG,cAA1B;AACA,IAAM,qBAAqB,GAAG,SAA9B;;AAEa,OAAA,CAAA,gBAAA,GAAiC,UAAA,MAAM,EAAG;AACrD,SAAO,cAAA,CAAA,gBAAA,CAAiB,MAAjB,EAAyB,CAC9B,SAD8B,EAE9B,iBAAM,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACQ,eAAe,CAAC,MAAD,EAAS,MAAM,CAAC,UAAP,CAAkB,WAA3B,CADvB;;AAAA;AAAA,6CAES,MAFT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAF8B,CAAzB,CAAP;AAOD,CARY;;AAUb,SAAgB,eAAhB,CAAgC,MAAhC,EAAwE;;;AACtE,SAAA,CAAA,EAAA,GAAO,MAAM,CAAC,YAAd,MAA0B,IAA1B,IAA0B,EAAA,KAAA,KAAA,CAA1B,GAA0B,EAA1B,GAA8B,qBAA9B;AACD;;AAFD,OAAA,CAAA,eAAA,GAAA,eAAA;;AAIO,SAAe,eAAf,CACL,MADK,EAEL,WAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAIC,UAAA,SAJD,GAIa,eAAe,CAAC,MAAD,CAJ5B;AAAA;AAAA,2CAMoB,QAAA,CAAA,4BAAA,CAA6B,WAA7B,CANpB;;AAAA;AAMC,UAAA,UAND;AAAA;AAAA,2CAOoB,QAAA,CAAA,4BAAA,CAA6B,WAA7B,CAPpB;;AAAA;AAOC,UAAA,UAPD;AAAA;AAAA,2CASkB,WAAA,CAAA,qBAAA,CAAsB;AAAE,YAAA,IAAI,EAAE;AAAR,WAAtB,CATlB;;AAAA;AASD,UAAA,UATC;AAAA;AAAA,2CAUkB,WAAA,CAAA,qBAAA,CAAsB;AAAE,YAAA,IAAI,EAAE;AAAR,WAAtB,CAVlB;;AAAA;AAUD,UAAA,UAVC;AAYC,UAAA,cAZD,GAYkB,WAAA,CAAA,iBAAA,CAAkB;AAAE,YAAA,IAAI,EAAE,iBAAR;AAA2B,YAAA,KAAK,EAAE;AAAlC,WAAlB,CAZlB;AAaC,UAAA,cAbD,GAakB,WAAA,CAAA,iBAAA,CAAkB;AACvC,YAAA,IAAI,EAAE,iBADiC;AAEvC,YAAA,KAAK,cAAY;AAFsB,WAAlB,CAblB;AAkBL,UAAA,UAAU,GAAG,QAAA,CAAA,YAAA,CAAa,cAAb,EAA6B,UAA7B,CAAb;AACA,UAAA,UAAU,GAAG,QAAA,CAAA,aAAA,CAAc;AACzB,YAAA,IAAI,EAAE,cADmB;AAEzB,YAAA,GAAG,EAAE,UAFoB;AAGzB,YAAA,MAAM,EAAE;AAAE,cAAA,IAAI,EAAE,UAAR;AAAoB,cAAA,MAAM,EAAE;AAA5B;AAHiB,WAAd,CAAb;AAnBK;AAAA;AAAA,2CA0BG,OAAO,CAAC,GAAR,CAAY,CAChB,KAAA,CAAA,aAAA,CAAc;AAAE,YAAA,IAAI,EAAE,UAAR;AAAoB,YAAA,GAAG,EAAE;AAAzB,WAAd,CADgB,EAEhB,KAAA,CAAA,aAAA,CAAc;AAAE,YAAA,IAAI,EAAE,UAAR;AAAoB,YAAA,GAAG,EAAE;AAAzB,WAAd,CAFgB,CAAZ,CA1BH;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,gBA+BG,IAAI,KAAJ,0EACmE,UADnE,OA/BH;;AAAA;AAAA,4CAmCE,IAnCF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAP,OAAA,CAAA,eAAA,GAAA,eAAA","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withDangerousMod } from '../plugins/core-plugins';\nimport { writeXMLAsync } from '../utils/XML';\nimport { getProjectColorsXMLPathAsync, setColorItem } from './Colors';\nimport { buildResourceItem, readResourcesXMLAsync } from './Resources';\nimport { getProjectStylesXMLPathAsync, setStylesItem } from './Styles';\n\nconst COLOR_PRIMARY_KEY = 'colorPrimary';\nconst DEFAULT_PRIMARY_COLOR = '#023c69';\n\nexport const withPrimaryColor: ConfigPlugin = config => {\n  return withDangerousMod(config, [\n    'android',\n    async config => {\n      await setPrimaryColor(config, config.modRequest.projectRoot);\n      return config;\n    },\n  ]);\n};\n\nexport function getPrimaryColor(config: Pick<ExpoConfig, 'primaryColor'>) {\n  return config.primaryColor ?? DEFAULT_PRIMARY_COLOR;\n}\n\nexport async function setPrimaryColor(\n  config: Pick<ExpoConfig, 'primaryColor'>,\n  projectRoot: string\n) {\n  const hexString = getPrimaryColor(config);\n\n  const stylesPath = await getProjectStylesXMLPathAsync(projectRoot);\n  const colorsPath = await getProjectColorsXMLPathAsync(projectRoot);\n\n  let stylesJSON = await readResourcesXMLAsync({ path: stylesPath });\n  let colorsJSON = await readResourcesXMLAsync({ path: colorsPath });\n\n  const colorItemToAdd = buildResourceItem({ name: COLOR_PRIMARY_KEY, value: hexString });\n  const styleItemToAdd = buildResourceItem({\n    name: COLOR_PRIMARY_KEY,\n    value: `@color/${COLOR_PRIMARY_KEY}`,\n  });\n\n  colorsJSON = setColorItem(colorItemToAdd, colorsJSON);\n  stylesJSON = setStylesItem({\n    item: styleItemToAdd,\n    xml: stylesJSON,\n    parent: { name: 'AppTheme', parent: 'Theme.AppCompat.Light.NoActionBar' },\n  });\n\n  try {\n    await Promise.all([\n      writeXMLAsync({ path: colorsPath, xml: colorsJSON }),\n      writeXMLAsync({ path: stylesPath, xml: stylesJSON }),\n    ]);\n  } catch (e) {\n    throw new Error(\n      `Error setting Android primary color. Cannot write new styles.xml to ${stylesPath}.`\n    );\n  }\n  return true;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}