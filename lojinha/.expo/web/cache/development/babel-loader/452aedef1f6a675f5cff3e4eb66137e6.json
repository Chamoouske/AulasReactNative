{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useEffect, useState } from 'react';\nimport { Asset } from \"./Asset\";\nexport function useAssets(moduleIds) {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      assets = _useState2[0],\n      setAssets = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      error = _useState4[0],\n      setError = _useState4[1];\n\n  useEffect(function () {\n    Asset.loadAsync(moduleIds).then(setAssets).catch(setError);\n  }, []);\n  return [assets, error];\n}","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/expo-asset/src/AssetHooks.ts"],"names":["useEffect","useState","Asset","useAssets","moduleIds","assets","setAssets","error","setError","loadAsync","then","catch"],"mappings":";AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,SAASC,KAAT;AAiBA,OAAO,SAASC,SAAT,CAAmBC,SAAnB,EAA2F;AAAA,kBACpEH,QAAQ,EAD4D;AAAA;AAAA,MACzFI,MADyF;AAAA,MACjFC,SADiF;;AAAA,mBAEtEL,QAAQ,EAF8D;AAAA;AAAA,MAEzFM,KAFyF;AAAA,MAElFC,QAFkF;;AAIhGR,EAAAA,SAAS,CAAC,YAAM;AACdE,IAAAA,KAAK,CAACO,SAAN,CAAgBL,SAAhB,EACGM,IADH,CACQJ,SADR,EAEGK,KAFH,CAESH,QAFT;AAGD,GAJQ,EAIN,EAJM,CAAT;AAMA,SAAO,CAACH,MAAD,EAASE,KAAT,CAAP;AACD","sourcesContent":["import { useEffect, useState } from 'react';\n\nimport { Asset } from './Asset';\n\n/**\n * Downloads and stores one or more assets locally.\n * After the assets are loaded, this hook returns a list of asset instances.\n * If something went wrong when loading the assets, an error is returned.\n *\n * Note, the assets are not \"reloaded\" when you dynamically change the asset list.\n *\n * @see https://docs.expo.io/versions/latest/sdk/asset/\n * @example\n * ```tsx\n * const [assets, error] = useAssets(require('path/to/asset.jpg'));\n *\n * return !assets ? null : <Image source={assets[0]} />;\n * ```\n */\nexport function useAssets(moduleIds: number | number[]): [Asset[] | undefined, Error | undefined] {\n  const [assets, setAssets] = useState<Asset[]>();\n  const [error, setError] = useState<Error>();\n\n  useEffect(() => {\n    Asset.loadAsync(moduleIds)\n      .then(setAssets)\n      .catch(setError);\n  }, []);\n\n  return [assets, error];\n}\n"]},"metadata":{},"sourceType":"module"}