{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.downloadProfile = downloadProfile;\n\nfunction _child_process() {\n  var data = require(\"child_process\");\n\n  _child_process = function _child_process() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _os() {\n  var data = _interopRequireDefault(require(\"os\"));\n\n  _os = function _os() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _hermesProfileTransformer() {\n  var data = _interopRequireDefault(require(\"hermes-profile-transformer\"));\n\n  _hermesProfileTransformer = function _hermesProfileTransformer() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _sourcemapUtils = require(\"./sourcemapUtils\");\n\nfunction _cliPlatformAndroid() {\n  var data = require(\"@react-native-community/cli-platform-android\");\n\n  _cliPlatformAndroid = function _cliPlatformAndroid() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getLatestFile(packageName) {\n  try {\n    var file = (0, _child_process().execSync)(\"adb shell run-as \" + packageName + \" ls cache/ -tp | grep -v /$ | egrep '.cpuprofile' | head -1\\n        \");\n    return file.toString().trim();\n  } catch (e) {\n    throw new Error(e);\n  }\n}\n\nfunction execSyncWithLog(command) {\n  _cliTools().logger.debug(\"\" + command);\n\n  return (0, _child_process().execSync)(command);\n}\n\nfunction downloadProfile(ctx, dstPath, filename, sourcemapPath, raw, shouldGenerateSourcemap, port) {\n  var androidProject, packageName, file, osTmpDir, tempFilePath, events, transformedFilePath;\n  return _regeneratorRuntime.async(function downloadProfile$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          androidProject = (0, _cliPlatformAndroid().getAndroidProject)(ctx);\n          packageName = (0, _cliPlatformAndroid().getPackageName)(androidProject);\n          file = filename || getLatestFile(packageName);\n\n          if (file) {\n            _context.next = 6;\n            break;\n          }\n\n          throw new (_cliTools().CLIError)('There is no file in the cache/ directory. Did you record a profile from the developer menu?');\n\n        case 6:\n          _cliTools().logger.info(\"File to be pulled: \" + file);\n\n          dstPath = dstPath || ctx.root;\n\n          _cliTools().logger.debug('Internal commands run to pull the file:');\n\n          execSyncWithLog(\"adb shell run-as \" + packageName + \" cp cache/\" + file + \" /sdcard\");\n\n          if (!raw) {\n            _context.next = 15;\n            break;\n          }\n\n          execSyncWithLog(\"adb pull /sdcard/\" + file + \" \" + dstPath);\n\n          _cliTools().logger.success(\"Successfully pulled the file to \" + dstPath + \"/\" + file);\n\n          _context.next = 35;\n          break;\n\n        case 15:\n          osTmpDir = _os().default.tmpdir();\n          tempFilePath = _path().default.join(osTmpDir, file);\n          execSyncWithLog(\"adb pull /sdcard/\" + file + \" \" + tempFilePath);\n\n          if (sourcemapPath) {\n            _context.next = 29;\n            break;\n          }\n\n          if (!shouldGenerateSourcemap) {\n            _context.next = 25;\n            break;\n          }\n\n          _context.next = 22;\n          return _regeneratorRuntime.awrap((0, _sourcemapUtils.generateSourcemap)(port));\n\n        case 22:\n          sourcemapPath = _context.sent;\n          _context.next = 28;\n          break;\n\n        case 25:\n          _context.next = 27;\n          return _regeneratorRuntime.awrap((0, _sourcemapUtils.findSourcemap)(ctx, port));\n\n        case 27:\n          sourcemapPath = _context.sent;\n\n        case 28:\n          if (!sourcemapPath) {\n            _cliTools().logger.warn('Cannot find source maps, running the transformer without it');\n\n            _cliTools().logger.info('Instructions on how to get source maps: set `bundleInDebug: true` in your app/build.gradle file, inside the `project.ext.react` map.');\n          }\n\n        case 29:\n          _context.next = 31;\n          return _regeneratorRuntime.awrap((0, _hermesProfileTransformer().default)(tempFilePath, sourcemapPath, 'index.bundle'));\n\n        case 31:\n          events = _context.sent;\n          transformedFilePath = dstPath + \"/\" + _path().default.basename(file, '.cpuprofile') + \"-converted.json\";\n\n          _fs().default.writeFileSync(transformedFilePath, JSON.stringify(events, undefined, 4), 'utf-8');\n\n          _cliTools().logger.success(\"Successfully converted to Chrome tracing format and pulled the file to \" + transformedFilePath);\n\n        case 35:\n          _context.next = 40;\n          break;\n\n        case 37:\n          _context.prev = 37;\n          _context.t0 = _context[\"catch\"](0);\n          throw _context.t0;\n\n        case 40:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 37]], Promise);\n}","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli-hermes/build/profileHermes/downloadProfile.js"],"names":["Object","defineProperty","exports","value","downloadProfile","_child_process","data","require","_cliTools","_fs","_interopRequireDefault","_path","_os","_hermesProfileTransformer","_sourcemapUtils","_cliPlatformAndroid","obj","__esModule","default","getLatestFile","packageName","file","execSync","toString","trim","e","Error","execSyncWithLog","command","logger","debug","ctx","dstPath","filename","sourcemapPath","raw","shouldGenerateSourcemap","port","androidProject","getAndroidProject","getPackageName","CLIError","info","root","success","osTmpDir","tmpdir","tempFilePath","join","generateSourcemap","findSourcemap","warn","events","transformedFilePath","basename","writeFileSync","JSON","stringify","undefined"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.downloadProfile = downloadProfile;\n\nfunction _child_process() {\n  const data = require(\"child_process\");\n\n  _child_process = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _fs() {\n  const data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  const data = _interopRequireDefault(require(\"path\"));\n\n  _path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _os() {\n  const data = _interopRequireDefault(require(\"os\"));\n\n  _os = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _hermesProfileTransformer() {\n  const data = _interopRequireDefault(require(\"hermes-profile-transformer\"));\n\n  _hermesProfileTransformer = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _sourcemapUtils = require(\"./sourcemapUtils\");\n\nfunction _cliPlatformAndroid() {\n  const data = require(\"@react-native-community/cli-platform-android\");\n\n  _cliPlatformAndroid = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Get the last modified hermes profile\n * @param packageName\n */\nfunction getLatestFile(packageName) {\n  try {\n    const file = (0, _child_process().execSync)(`adb shell run-as ${packageName} ls cache/ -tp | grep -v /$ | egrep '\\.cpuprofile' | head -1\n        `);\n    return file.toString().trim();\n  } catch (e) {\n    throw new Error(e);\n  }\n}\n\nfunction execSyncWithLog(command) {\n  _cliTools().logger.debug(`${command}`);\n\n  return (0, _child_process().execSync)(command);\n}\n/**\n * Pull and convert a Hermes tracing profile to Chrome tracing profile\n * @param ctx\n * @param dstPath\n * @param fileName\n * @param sourceMapPath\n * @param raw\n * @param generateSourceMap\n */\n\n\nasync function downloadProfile(ctx, dstPath, filename, sourcemapPath, raw, shouldGenerateSourcemap, port) {\n  try {\n    const androidProject = (0, _cliPlatformAndroid().getAndroidProject)(ctx);\n    const packageName = (0, _cliPlatformAndroid().getPackageName)(androidProject); // If file name is not specified, pull the latest file from device\n\n    const file = filename || getLatestFile(packageName);\n\n    if (!file) {\n      throw new (_cliTools().CLIError)('There is no file in the cache/ directory. Did you record a profile from the developer menu?');\n    }\n\n    _cliTools().logger.info(`File to be pulled: ${file}`); // If destination path is not specified, pull to the current directory\n\n\n    dstPath = dstPath || ctx.root;\n\n    _cliTools().logger.debug('Internal commands run to pull the file:'); // Copy the file from device's data to sdcard, then pull the file to a temp directory\n\n\n    execSyncWithLog(`adb shell run-as ${packageName} cp cache/${file} /sdcard`); // If --raw, pull the hermes profile to dstPath\n\n    if (raw) {\n      execSyncWithLog(`adb pull /sdcard/${file} ${dstPath}`);\n\n      _cliTools().logger.success(`Successfully pulled the file to ${dstPath}/${file}`);\n    } // Else: transform the profile to Chrome format and pull it to dstPath\n    else {\n        const osTmpDir = _os().default.tmpdir();\n\n        const tempFilePath = _path().default.join(osTmpDir, file);\n\n        execSyncWithLog(`adb pull /sdcard/${file} ${tempFilePath}`); // If path to source map is not given\n\n        if (!sourcemapPath) {\n          // Get or generate the source map\n          if (shouldGenerateSourcemap) {\n            sourcemapPath = await (0, _sourcemapUtils.generateSourcemap)(port);\n          } else {\n            sourcemapPath = await (0, _sourcemapUtils.findSourcemap)(ctx, port);\n          } // Run without source map\n\n\n          if (!sourcemapPath) {\n            _cliTools().logger.warn('Cannot find source maps, running the transformer without it');\n\n            _cliTools().logger.info('Instructions on how to get source maps: set `bundleInDebug: true` in your app/build.gradle file, inside the `project.ext.react` map.');\n          }\n        } // Run transformer tool to convert from Hermes to Chrome format\n\n\n        const events = await (0, _hermesProfileTransformer().default)(tempFilePath, sourcemapPath, 'index.bundle');\n        const transformedFilePath = `${dstPath}/${_path().default.basename(file, '.cpuprofile')}-converted.json`;\n\n        _fs().default.writeFileSync(transformedFilePath, JSON.stringify(events, undefined, 4), 'utf-8');\n\n        _cliTools().logger.success(`Successfully converted to Chrome tracing format and pulled the file to ${transformedFilePath}`);\n      }\n  } catch (e) {\n    throw e;\n  }\n}\n\n//# sourceMappingURL=downloadProfile.js.map"]},"metadata":{},"sourceType":"script"}