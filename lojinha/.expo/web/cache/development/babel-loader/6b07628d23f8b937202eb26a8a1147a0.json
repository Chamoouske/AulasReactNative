{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nvar Easing = require(\"../Easing\");\n\ndescribe('Easing', function () {\n  it('should work with linear', function () {\n    var easing = Easing.linear;\n    expect(easing(0)).toBe(0);\n    expect(easing(0.5)).toBe(0.5);\n    expect(easing(0.8)).toBe(0.8);\n    expect(easing(1)).toBe(1);\n  });\n  it('should work with ease in linear', function () {\n    var easing = Easing.in(Easing.linear);\n    expect(easing(0)).toBe(0);\n    expect(easing(0.5)).toBe(0.5);\n    expect(easing(0.8)).toBe(0.8);\n    expect(easing(1)).toBe(1);\n  });\n  it('should work with easy out linear', function () {\n    var easing = Easing.out(Easing.linear);\n    expect(easing(0)).toBe(0);\n    expect(easing(0.5)).toBe(0.5);\n    expect(easing(0.6)).toBe(0.6);\n    expect(easing(1)).toBe(1);\n  });\n  it('should work with ease in quad', function () {\n    function easeInQuad(t) {\n      return t * t;\n    }\n\n    var easing = Easing.in(Easing.quad);\n\n    for (var t = -0.5; t < 1.5; t += 0.1) {\n      expect(easing(t)).toBe(easeInQuad(t));\n    }\n  });\n  it('should work with ease out quad', function () {\n    function easeOutQuad(t) {\n      return -t * (t - 2);\n    }\n\n    var easing = Easing.out(Easing.quad);\n\n    for (var t = 0; t <= 1; t += 0.1) {\n      expect(easing(1)).toBe(easeOutQuad(1));\n    }\n  });\n  it('should work with ease in-out quad', function () {\n    function easeInOutQuad(t) {\n      t = t * 2;\n\n      if (t < 1) {\n        return 0.5 * t * t;\n      }\n\n      return -((t - 1) * (t - 3) - 1) / 2;\n    }\n\n    var easing = Easing.inOut(Easing.quad);\n\n    for (var t = -0.5; t < 1.5; t += 0.1) {\n      expect(easing(t)).toBeCloseTo(easeInOutQuad(t), 4);\n    }\n  });\n  it('should satisfy boundary conditions with elastic', function () {\n    for (var b = 0; b < 4; b += 0.3) {\n      var easing = Easing.elastic(b);\n      expect(easing(0)).toBe(0);\n      expect(easing(1)).toBe(1);\n    }\n  });\n\n  function sampleEasingFunction(easing) {\n    var DURATION = 300;\n    var tickCount = Math.round(DURATION * 60 / 1000);\n    var samples = [];\n\n    for (var i = 0; i <= tickCount; i++) {\n      samples.push(easing(i / tickCount));\n    }\n\n    return samples;\n  }\n\n  var Samples = {\n    in_quad: [0, 0.0030864197530864196, 0.012345679012345678, 0.027777777777777776, 0.04938271604938271, 0.0771604938271605, 0.1111111111111111, 0.15123456790123457, 0.19753086419753085, 0.25, 0.308641975308642, 0.37345679012345684, 0.4444444444444444, 0.5216049382716049, 0.6049382716049383, 0.6944444444444445, 0.7901234567901234, 0.8919753086419753, 1],\n    out_quad: [0, 0.10802469135802469, 0.20987654320987653, 0.3055555555555555, 0.3950617283950617, 0.47839506172839513, 0.5555555555555556, 0.6265432098765432, 0.691358024691358, 0.75, 0.8024691358024691, 0.8487654320987654, 0.888888888888889, 0.9228395061728394, 0.9506172839506174, 0.9722222222222221, 0.9876543209876543, 0.9969135802469136, 1],\n    inOut_quad: [0, 0.006172839506172839, 0.024691358024691357, 0.05555555555555555, 0.09876543209876543, 0.154320987654321, 0.2222222222222222, 0.30246913580246915, 0.3950617283950617, 0.5, 0.6049382716049383, 0.697530864197531, 0.7777777777777777, 0.845679012345679, 0.9012345679012346, 0.9444444444444444, 0.9753086419753086, 0.9938271604938271, 1],\n    in_cubic: [0, 0.00017146776406035664, 0.0013717421124828531, 0.004629629629629629, 0.010973936899862825, 0.021433470507544586, 0.037037037037037035, 0.05881344307270234, 0.0877914951989026, 0.125, 0.1714677640603567, 0.22822359396433475, 0.2962962962962963, 0.37671467764060357, 0.4705075445816187, 0.5787037037037038, 0.7023319615912208, 0.8424211248285322, 1],\n    out_cubic: [0, 0.15757887517146785, 0.2976680384087792, 0.42129629629629617, 0.5294924554183813, 0.6232853223593964, 0.7037037037037036, 0.7717764060356652, 0.8285322359396433, 0.875, 0.9122085048010974, 0.9411865569272977, 0.9629629629629629, 0.9785665294924554, 0.9890260631001372, 0.9953703703703703, 0.9986282578875172, 0.9998285322359396, 1],\n    inOut_cubic: [0, 0.0006858710562414266, 0.0054869684499314125, 0.018518518518518517, 0.0438957475994513, 0.08573388203017834, 0.14814814814814814, 0.23525377229080935, 0.3511659807956104, 0.5, 0.6488340192043895, 0.7647462277091908, 0.8518518518518519, 0.9142661179698217, 0.9561042524005487, 0.9814814814814815, 0.9945130315500685, 0.9993141289437586, 1],\n    in_sin: [0, 0.003805301908254455, 0.01519224698779198, 0.03407417371093169, 0.06030737921409157, 0.09369221296335006, 0.1339745962155613, 0.1808479557110082, 0.233955556881022, 0.2928932188134524, 0.35721239031346064, 0.42642356364895384, 0.4999999999999999, 0.5773817382593005, 0.6579798566743311, 0.7411809548974793, 0.8263518223330696, 0.9128442572523416, 0.9999999999999999],\n    out_sin: [0, 0.08715574274765817, 0.17364817766693033, 0.25881904510252074, 0.3420201433256687, 0.42261826174069944, 0.49999999999999994, 0.573576436351046, 0.6427876096865393, 0.7071067811865475, 0.766044443118978, 0.8191520442889918, 0.8660254037844386, 0.9063077870366499, 0.9396926207859083, 0.9659258262890683, 0.984807753012208, 0.9961946980917455, 1],\n    inOut_sin: [0, 0.00759612349389599, 0.030153689607045786, 0.06698729810778065, 0.116977778440511, 0.17860619515673032, 0.24999999999999994, 0.32898992833716556, 0.4131759111665348, 0.49999999999999994, 0.5868240888334652, 0.6710100716628343, 0.7499999999999999, 0.8213938048432696, 0.883022221559489, 0.9330127018922194, 0.9698463103929542, 0.9924038765061041, 1],\n    in_exp: [0, 0.0014352875901128893, 0.002109491677524035, 0.0031003926796253885, 0.004556754060844206, 0.006697218616039631, 0.009843133202303688, 0.014466792379488908, 0.021262343752724643, 0.03125, 0.045929202883612456, 0.06750373368076916, 0.09921256574801243, 0.1458161299470146, 0.2143109957132682, 0.31498026247371835, 0.46293735614364506, 0.6803950000871883, 1],\n    out_exp: [0, 0.31960499991281155, 0.5370626438563548, 0.6850197375262816, 0.7856890042867318, 0.8541838700529854, 0.9007874342519875, 0.9324962663192309, 0.9540707971163875, 0.96875, 0.9787376562472754, 0.9855332076205111, 0.9901568667976963, 0.9933027813839603, 0.9954432459391558, 0.9968996073203746, 0.9978905083224759, 0.9985647124098871, 1],\n    inOut_exp: [0, 0.0010547458387620175, 0.002278377030422103, 0.004921566601151844, 0.010631171876362321, 0.022964601441806228, 0.049606282874006216, 0.1071554978566341, 0.23146867807182253, 0.5, 0.7685313219281775, 0.892844502143366, 0.9503937171259937, 0.9770353985581938, 0.9893688281236377, 0.9950784333988482, 0.9977216229695779, 0.998945254161238, 1],\n    in_circle: [0, 0.0015444024660317135, 0.006192010000093506, 0.013986702816730645, 0.025003956956430873, 0.03935464078941209, 0.057190958417936644, 0.07871533601238889, 0.10419358352238339, 0.1339745962155614, 0.1685205807169019, 0.20845517506805522, 0.2546440075000701, 0.3083389112228482, 0.37146063894529113, 0.4472292016074334, 0.5418771527091488, 0.6713289009389102, 1],\n    out_circle: [0, 0.3286710990610898, 0.45812284729085123, 0.5527707983925666, 0.6285393610547089, 0.6916610887771518, 0.7453559924999298, 0.7915448249319448, 0.8314794192830981, 0.8660254037844386, 0.8958064164776166, 0.9212846639876111, 0.9428090415820634, 0.9606453592105879, 0.9749960430435691, 0.9860132971832694, 0.9938079899999065, 0.9984555975339683, 1],\n    inOut_circle: [0, 0.003096005000046753, 0.012501978478215436, 0.028595479208968322, 0.052096791761191696, 0.08426029035845095, 0.12732200375003505, 0.18573031947264557, 0.2709385763545744, 0.5, 0.7290614236454256, 0.8142696805273546, 0.8726779962499649, 0.915739709641549, 0.9479032082388084, 0.9714045207910317, 0.9874980215217846, 0.9969039949999532, 1],\n    in_back_: [0, -0.004788556241426612, -0.017301289437585736, -0.0347587962962963, -0.05438167352537723, -0.07339051783264748, -0.08900592592592595, -0.09844849451303156, -0.0989388203017833, -0.08769750000000004, -0.06194513031550073, -0.018902307956104283, 0.044210370370370254, 0.13017230795610413, 0.2417629080932785, 0.3817615740740742, 0.5529477091906719, 0.7581007167352535, 0.9999999999999998],\n    out_back_: [2.220446049250313e-16, 0.24189928326474652, 0.44705229080932807, 0.6182384259259258, 0.7582370919067215, 0.8698276920438959, 0.9557896296296297, 1.0189023079561044, 1.0619451303155008, 1.0876975, 1.0989388203017834, 1.0984484945130315, 1.089005925925926, 1.0733905178326475, 1.0543816735253773, 1.0347587962962963, 1.0173012894375857, 1.0047885562414267, 1]\n  };\n  Object.keys(Samples).forEach(function (type) {\n    it('should ease ' + type, function () {\n      var _type$split = type.split('_'),\n          _type$split2 = _slicedToArray(_type$split, 3),\n          modeName = _type$split2[0],\n          easingName = _type$split2[1],\n          isFunction = _type$split2[2];\n\n      var easing = Easing[easingName];\n\n      if (isFunction !== undefined) {\n        easing = easing();\n      }\n\n      var computed = sampleEasingFunction(Easing[modeName](easing));\n      var samples = Samples[type];\n      computed.forEach(function (value, key) {\n        expect(value).toBeCloseTo(samples[key], 2);\n      });\n    });\n  });\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/Animated/src/__tests__/Easing-test.js"],"names":["Easing","require","describe","it","easing","linear","expect","toBe","in","out","easeInQuad","t","quad","easeOutQuad","easeInOutQuad","inOut","toBeCloseTo","b","elastic","sampleEasingFunction","DURATION","tickCount","Math","round","samples","i","push","Samples","in_quad","out_quad","inOut_quad","in_cubic","out_cubic","inOut_cubic","in_sin","out_sin","inOut_sin","in_exp","out_exp","inOut_exp","in_circle","out_circle","inOut_circle","in_back_","out_back_","Object","keys","forEach","type","split","modeName","easingName","isFunction","undefined","computed","value","key"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @emails oncall+react_native\n */\n\n'use strict';\n\nconst Easing = require('../Easing');\ndescribe('Easing', () => {\n  it('should work with linear', () => {\n    const easing = Easing.linear;\n\n    expect(easing(0)).toBe(0);\n    expect(easing(0.5)).toBe(0.5);\n    expect(easing(0.8)).toBe(0.8);\n    expect(easing(1)).toBe(1);\n  });\n\n  it('should work with ease in linear', () => {\n    const easing = Easing.in(Easing.linear);\n    expect(easing(0)).toBe(0);\n    expect(easing(0.5)).toBe(0.5);\n    expect(easing(0.8)).toBe(0.8);\n    expect(easing(1)).toBe(1);\n  });\n\n  it('should work with easy out linear', () => {\n    const easing = Easing.out(Easing.linear);\n    expect(easing(0)).toBe(0);\n    expect(easing(0.5)).toBe(0.5);\n    expect(easing(0.6)).toBe(0.6);\n    expect(easing(1)).toBe(1);\n  });\n\n  it('should work with ease in quad', () => {\n    function easeInQuad(t) {\n      return t * t;\n    }\n    const easing = Easing.in(Easing.quad);\n    for (let t = -0.5; t < 1.5; t += 0.1) {\n      expect(easing(t)).toBe(easeInQuad(t));\n    }\n  });\n\n  it('should work with ease out quad', () => {\n    function easeOutQuad(t) {\n      return -t * (t - 2);\n    }\n    const easing = Easing.out(Easing.quad);\n    for (let t = 0; t <= 1; t += 0.1) {\n      expect(easing(1)).toBe(easeOutQuad(1));\n    }\n  });\n\n  it('should work with ease in-out quad', () => {\n    function easeInOutQuad(t) {\n      t = t * 2;\n      if (t < 1) {\n        return 0.5 * t * t;\n      }\n      return -((t - 1) * (t - 3) - 1) / 2;\n    }\n    const easing = Easing.inOut(Easing.quad);\n    for (let t = -0.5; t < 1.5; t += 0.1) {\n      expect(easing(t)).toBeCloseTo(easeInOutQuad(t), 4);\n    }\n  });\n\n  it('should satisfy boundary conditions with elastic', () => {\n    for (let b = 0; b < 4; b += 0.3) {\n      const easing = Easing.elastic(b);\n      expect(easing(0)).toBe(0);\n      expect(easing(1)).toBe(1);\n    }\n  });\n\n  function sampleEasingFunction(easing) {\n    const DURATION = 300;\n    const tickCount = Math.round((DURATION * 60) / 1000);\n    const samples = [];\n    for (let i = 0; i <= tickCount; i++) {\n      samples.push(easing(i / tickCount));\n    }\n    return samples;\n  }\n\n  const Samples = {\n    in_quad: [\n      0,\n      0.0030864197530864196,\n      0.012345679012345678,\n      0.027777777777777776,\n      0.04938271604938271,\n      0.0771604938271605,\n      0.1111111111111111,\n      0.15123456790123457,\n      0.19753086419753085,\n      0.25,\n      0.308641975308642,\n      0.37345679012345684,\n      0.4444444444444444,\n      0.5216049382716049,\n      0.6049382716049383,\n      0.6944444444444445,\n      0.7901234567901234,\n      0.8919753086419753,\n      1,\n    ],\n    out_quad: [\n      0,\n      0.10802469135802469,\n      0.20987654320987653,\n      0.3055555555555555,\n      0.3950617283950617,\n      0.47839506172839513,\n      0.5555555555555556,\n      0.6265432098765432,\n      0.691358024691358,\n      0.75,\n      0.8024691358024691,\n      0.8487654320987654,\n      0.888888888888889,\n      0.9228395061728394,\n      0.9506172839506174,\n      0.9722222222222221,\n      0.9876543209876543,\n      0.9969135802469136,\n      1,\n    ],\n    inOut_quad: [\n      0,\n      0.006172839506172839,\n      0.024691358024691357,\n      0.05555555555555555,\n      0.09876543209876543,\n      0.154320987654321,\n      0.2222222222222222,\n      0.30246913580246915,\n      0.3950617283950617,\n      0.5,\n      0.6049382716049383,\n      0.697530864197531,\n      0.7777777777777777,\n      0.845679012345679,\n      0.9012345679012346,\n      0.9444444444444444,\n      0.9753086419753086,\n      0.9938271604938271,\n      1,\n    ],\n    in_cubic: [\n      0,\n      0.00017146776406035664,\n      0.0013717421124828531,\n      0.004629629629629629,\n      0.010973936899862825,\n      0.021433470507544586,\n      0.037037037037037035,\n      0.05881344307270234,\n      0.0877914951989026,\n      0.125,\n      0.1714677640603567,\n      0.22822359396433475,\n      0.2962962962962963,\n      0.37671467764060357,\n      0.4705075445816187,\n      0.5787037037037038,\n      0.7023319615912208,\n      0.8424211248285322,\n      1,\n    ],\n    out_cubic: [\n      0,\n      0.15757887517146785,\n      0.2976680384087792,\n      0.42129629629629617,\n      0.5294924554183813,\n      0.6232853223593964,\n      0.7037037037037036,\n      0.7717764060356652,\n      0.8285322359396433,\n      0.875,\n      0.9122085048010974,\n      0.9411865569272977,\n      0.9629629629629629,\n      0.9785665294924554,\n      0.9890260631001372,\n      0.9953703703703703,\n      0.9986282578875172,\n      0.9998285322359396,\n      1,\n    ],\n    inOut_cubic: [\n      0,\n      0.0006858710562414266,\n      0.0054869684499314125,\n      0.018518518518518517,\n      0.0438957475994513,\n      0.08573388203017834,\n      0.14814814814814814,\n      0.23525377229080935,\n      0.3511659807956104,\n      0.5,\n      0.6488340192043895,\n      0.7647462277091908,\n      0.8518518518518519,\n      0.9142661179698217,\n      0.9561042524005487,\n      0.9814814814814815,\n      0.9945130315500685,\n      0.9993141289437586,\n      1,\n    ],\n    in_sin: [\n      0,\n      0.003805301908254455,\n      0.01519224698779198,\n      0.03407417371093169,\n      0.06030737921409157,\n      0.09369221296335006,\n      0.1339745962155613,\n      0.1808479557110082,\n      0.233955556881022,\n      0.2928932188134524,\n      0.35721239031346064,\n      0.42642356364895384,\n      0.4999999999999999,\n      0.5773817382593005,\n      0.6579798566743311,\n      0.7411809548974793,\n      0.8263518223330696,\n      0.9128442572523416,\n      0.9999999999999999,\n    ],\n    out_sin: [\n      0,\n      0.08715574274765817,\n      0.17364817766693033,\n      0.25881904510252074,\n      0.3420201433256687,\n      0.42261826174069944,\n      0.49999999999999994,\n      0.573576436351046,\n      0.6427876096865393,\n      0.7071067811865475,\n      0.766044443118978,\n      0.8191520442889918,\n      0.8660254037844386,\n      0.9063077870366499,\n      0.9396926207859083,\n      0.9659258262890683,\n      0.984807753012208,\n      0.9961946980917455,\n      1,\n    ],\n    inOut_sin: [\n      0,\n      0.00759612349389599,\n      0.030153689607045786,\n      0.06698729810778065,\n      0.116977778440511,\n      0.17860619515673032,\n      0.24999999999999994,\n      0.32898992833716556,\n      0.4131759111665348,\n      0.49999999999999994,\n      0.5868240888334652,\n      0.6710100716628343,\n      0.7499999999999999,\n      0.8213938048432696,\n      0.883022221559489,\n      0.9330127018922194,\n      0.9698463103929542,\n      0.9924038765061041,\n      1,\n    ],\n    in_exp: [\n      0,\n      0.0014352875901128893,\n      0.002109491677524035,\n      0.0031003926796253885,\n      0.004556754060844206,\n      0.006697218616039631,\n      0.009843133202303688,\n      0.014466792379488908,\n      0.021262343752724643,\n      0.03125,\n      0.045929202883612456,\n      0.06750373368076916,\n      0.09921256574801243,\n      0.1458161299470146,\n      0.2143109957132682,\n      0.31498026247371835,\n      0.46293735614364506,\n      0.6803950000871883,\n      1,\n    ],\n    out_exp: [\n      0,\n      0.31960499991281155,\n      0.5370626438563548,\n      0.6850197375262816,\n      0.7856890042867318,\n      0.8541838700529854,\n      0.9007874342519875,\n      0.9324962663192309,\n      0.9540707971163875,\n      0.96875,\n      0.9787376562472754,\n      0.9855332076205111,\n      0.9901568667976963,\n      0.9933027813839603,\n      0.9954432459391558,\n      0.9968996073203746,\n      0.9978905083224759,\n      0.9985647124098871,\n      1,\n    ],\n    inOut_exp: [\n      0,\n      0.0010547458387620175,\n      0.002278377030422103,\n      0.004921566601151844,\n      0.010631171876362321,\n      0.022964601441806228,\n      0.049606282874006216,\n      0.1071554978566341,\n      0.23146867807182253,\n      0.5,\n      0.7685313219281775,\n      0.892844502143366,\n      0.9503937171259937,\n      0.9770353985581938,\n      0.9893688281236377,\n      0.9950784333988482,\n      0.9977216229695779,\n      0.998945254161238,\n      1,\n    ],\n    in_circle: [\n      0,\n      0.0015444024660317135,\n      0.006192010000093506,\n      0.013986702816730645,\n      0.025003956956430873,\n      0.03935464078941209,\n      0.057190958417936644,\n      0.07871533601238889,\n      0.10419358352238339,\n      0.1339745962155614,\n      0.1685205807169019,\n      0.20845517506805522,\n      0.2546440075000701,\n      0.3083389112228482,\n      0.37146063894529113,\n      0.4472292016074334,\n      0.5418771527091488,\n      0.6713289009389102,\n      1,\n    ],\n    out_circle: [\n      0,\n      0.3286710990610898,\n      0.45812284729085123,\n      0.5527707983925666,\n      0.6285393610547089,\n      0.6916610887771518,\n      0.7453559924999298,\n      0.7915448249319448,\n      0.8314794192830981,\n      0.8660254037844386,\n      0.8958064164776166,\n      0.9212846639876111,\n      0.9428090415820634,\n      0.9606453592105879,\n      0.9749960430435691,\n      0.9860132971832694,\n      0.9938079899999065,\n      0.9984555975339683,\n      1,\n    ],\n    inOut_circle: [\n      0,\n      0.003096005000046753,\n      0.012501978478215436,\n      0.028595479208968322,\n      0.052096791761191696,\n      0.08426029035845095,\n      0.12732200375003505,\n      0.18573031947264557,\n      0.2709385763545744,\n      0.5,\n      0.7290614236454256,\n      0.8142696805273546,\n      0.8726779962499649,\n      0.915739709641549,\n      0.9479032082388084,\n      0.9714045207910317,\n      0.9874980215217846,\n      0.9969039949999532,\n      1,\n    ],\n    in_back_: [\n      0,\n      -0.004788556241426612,\n      -0.017301289437585736,\n      -0.0347587962962963,\n      -0.05438167352537723,\n      -0.07339051783264748,\n      -0.08900592592592595,\n      -0.09844849451303156,\n      -0.0989388203017833,\n      -0.08769750000000004,\n      -0.06194513031550073,\n      -0.018902307956104283,\n      0.044210370370370254,\n      0.13017230795610413,\n      0.2417629080932785,\n      0.3817615740740742,\n      0.5529477091906719,\n      0.7581007167352535,\n      0.9999999999999998,\n    ],\n    out_back_: [\n      2.220446049250313e-16,\n      0.24189928326474652,\n      0.44705229080932807,\n      0.6182384259259258,\n      0.7582370919067215,\n      0.8698276920438959,\n      0.9557896296296297,\n      1.0189023079561044,\n      1.0619451303155008,\n      1.0876975,\n      1.0989388203017834,\n      1.0984484945130315,\n      1.089005925925926,\n      1.0733905178326475,\n      1.0543816735253773,\n      1.0347587962962963,\n      1.0173012894375857,\n      1.0047885562414267,\n      1,\n    ],\n  };\n\n  Object.keys(Samples).forEach(function(type) {\n    it('should ease ' + type, function() {\n      const [modeName, easingName, isFunction] = type.split('_');\n      let easing = Easing[easingName];\n      if (isFunction !== undefined) {\n        easing = easing();\n      }\n      const computed = sampleEasingFunction(Easing[modeName](easing));\n      const samples = Samples[type];\n\n      computed.forEach((value, key) => {\n        expect(value).toBeCloseTo(samples[key], 2);\n      });\n    });\n  });\n});\n"]},"metadata":{},"sourceType":"script"}