{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Platform } from '@unimodules/core';\nimport { getAssetByID } from \"./AssetRegistry\";\nimport * as AssetSources from \"./AssetSources\";\nimport * as AssetUris from \"./AssetUris\";\nimport { getEmbeddedAssetUri } from \"./EmbeddedAssets\";\nimport * as ImageAssets from \"./ImageAssets\";\nimport { downloadAsync as _downloadAsync, IS_ENV_WITH_UPDATES_ENABLED } from \"./PlatformUtils\";\nimport resolveAssetSource from \"./resolveAssetSource\";\nexport var Asset = function () {\n  function Asset(_ref) {\n    var name = _ref.name,\n        type = _ref.type,\n        _ref$hash = _ref.hash,\n        hash = _ref$hash === void 0 ? null : _ref$hash,\n        uri = _ref.uri,\n        width = _ref.width,\n        height = _ref.height;\n\n    _classCallCheck(this, Asset);\n\n    this.hash = null;\n    this.localUri = null;\n    this.width = null;\n    this.height = null;\n    this.downloading = false;\n    this.downloaded = false;\n    this._downloadCallbacks = [];\n    this.name = name;\n    this.type = type;\n    this.hash = hash;\n    this.uri = uri;\n\n    if (typeof width === 'number') {\n      this.width = width;\n    }\n\n    if (typeof height === 'number') {\n      this.height = height;\n    }\n\n    if (hash) {\n      this.localUri = getEmbeddedAssetUri(hash, type);\n\n      if (this.localUri) {\n        this.downloaded = true;\n      }\n    }\n\n    if (Platform.OS === 'web') {\n      if (!name) {\n        this.name = AssetUris.getFilename(uri);\n      }\n\n      if (!type) {\n        this.type = AssetUris.getFileExtension(uri);\n      }\n    }\n  }\n\n  _createClass(Asset, [{\n    key: \"downloadAsync\",\n    value: function downloadAsync() {\n      var _this = this;\n\n      var _await$ImageAssets$ge, width, height, name;\n\n      return _regeneratorRuntime.async(function downloadAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!this.downloaded) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\", this);\n\n            case 2:\n              if (!this.downloading) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(new Promise(function (resolve, reject) {\n                _this._downloadCallbacks.push({\n                  resolve: resolve,\n                  reject: reject\n                });\n              }));\n\n            case 5:\n              return _context.abrupt(\"return\", this);\n\n            case 6:\n              this.downloading = true;\n              _context.prev = 7;\n\n              if (!(Platform.OS === 'web')) {\n                _context.next = 22;\n                break;\n              }\n\n              if (!ImageAssets.isImageType(this.type)) {\n                _context.next = 21;\n                break;\n              }\n\n              _context.next = 12;\n              return _regeneratorRuntime.awrap(ImageAssets.getImageInfoAsync(this.uri));\n\n            case 12:\n              _await$ImageAssets$ge = _context.sent;\n              width = _await$ImageAssets$ge.width;\n              height = _await$ImageAssets$ge.height;\n              name = _await$ImageAssets$ge.name;\n              this.width = width;\n              this.height = height;\n              this.name = name;\n              _context.next = 22;\n              break;\n\n            case 21:\n              this.name = AssetUris.getFilename(this.uri);\n\n            case 22:\n              _context.next = 24;\n              return _regeneratorRuntime.awrap(_downloadAsync(this.uri, this.hash, this.type, this.name));\n\n            case 24:\n              this.localUri = _context.sent;\n              this.downloaded = true;\n\n              this._downloadCallbacks.forEach(function (_ref2) {\n                var resolve = _ref2.resolve;\n                return resolve();\n              });\n\n              _context.next = 33;\n              break;\n\n            case 29:\n              _context.prev = 29;\n              _context.t0 = _context[\"catch\"](7);\n\n              this._downloadCallbacks.forEach(function (_ref3) {\n                var reject = _ref3.reject;\n                return reject(_context.t0);\n              });\n\n              throw _context.t0;\n\n            case 33:\n              _context.prev = 33;\n              this.downloading = false;\n              this._downloadCallbacks = [];\n              return _context.finish(33);\n\n            case 37:\n              return _context.abrupt(\"return\", this);\n\n            case 38:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, [[7, 29, 33, 37]], Promise);\n    }\n  }], [{\n    key: \"loadAsync\",\n    value: function loadAsync(moduleId) {\n      var moduleIds = Array.isArray(moduleId) ? moduleId : [moduleId];\n      return Promise.all(moduleIds.map(function (moduleId) {\n        return Asset.fromModule(moduleId).downloadAsync();\n      }));\n    }\n  }, {\n    key: \"fromModule\",\n    value: function fromModule(virtualAssetModule) {\n      if (typeof virtualAssetModule === 'string') {\n        return Asset.fromURI(virtualAssetModule);\n      }\n\n      var meta = getAssetByID(virtualAssetModule);\n\n      if (!meta) {\n        throw new Error(\"Module \\\"\" + virtualAssetModule + \"\\\" is missing from the asset registry\");\n      }\n\n      if (!IS_ENV_WITH_UPDATES_ENABLED) {\n        var _resolveAssetSource = resolveAssetSource(virtualAssetModule),\n            uri = _resolveAssetSource.uri;\n\n        var asset = new Asset({\n          name: meta.name,\n          type: meta.type,\n          hash: meta.hash,\n          uri: uri,\n          width: meta.width,\n          height: meta.height\n        });\n\n        if (Platform.OS === 'android' && !uri.includes(':') && (meta.width || meta.height)) {\n          asset.localUri = asset.uri;\n          asset.downloaded = true;\n        }\n\n        Asset.byHash[meta.hash] = asset;\n        return asset;\n      }\n\n      return Asset.fromMetadata(meta);\n    }\n  }, {\n    key: \"fromMetadata\",\n    value: function fromMetadata(meta) {\n      var metaHash = meta.hash;\n\n      if (Asset.byHash[metaHash]) {\n        return Asset.byHash[metaHash];\n      }\n\n      var _AssetSources$selectA = AssetSources.selectAssetSource(meta),\n          uri = _AssetSources$selectA.uri,\n          hash = _AssetSources$selectA.hash;\n\n      var asset = new Asset({\n        name: meta.name,\n        type: meta.type,\n        hash: hash,\n        uri: uri,\n        width: meta.width,\n        height: meta.height\n      });\n      Asset.byHash[metaHash] = asset;\n      return asset;\n    }\n  }, {\n    key: \"fromURI\",\n    value: function fromURI(uri) {\n      if (Asset.byUri[uri]) {\n        return Asset.byUri[uri];\n      }\n\n      var type = '';\n\n      if (uri.indexOf(';base64') > -1) {\n        type = uri.split(';')[0].split('/')[1];\n      } else {\n        var extension = AssetUris.getFileExtension(uri);\n        type = extension.startsWith('.') ? extension.substring(1) : extension;\n      }\n\n      var asset = new Asset({\n        name: '',\n        type: type,\n        hash: null,\n        uri: uri\n      });\n      Asset.byUri[uri] = asset;\n      return asset;\n    }\n  }]);\n\n  return Asset;\n}();\nAsset.byHash = {};\nAsset.byUri = {};","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/expo-asset/src/Asset.ts"],"names":["Platform","getAssetByID","AssetSources","AssetUris","getEmbeddedAssetUri","ImageAssets","downloadAsync","IS_ENV_WITH_UPDATES_ENABLED","resolveAssetSource","Asset","name","type","hash","uri","width","height","localUri","downloading","downloaded","_downloadCallbacks","OS","getFilename","getFileExtension","Promise","resolve","reject","push","isImageType","getImageInfoAsync","forEach","moduleId","moduleIds","Array","isArray","all","map","fromModule","virtualAssetModule","fromURI","meta","Error","asset","includes","byHash","fromMetadata","metaHash","selectAssetSource","byUri","indexOf","split","extension","startsWith","substring"],"mappings":"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","sourcesContent":["import { Platform } from '@unimodules/core';\n\nimport { getAssetByID } from './AssetRegistry';\nimport * as AssetSources from './AssetSources';\nimport * as AssetUris from './AssetUris';\nimport { getEmbeddedAssetUri } from './EmbeddedAssets';\nimport * as ImageAssets from './ImageAssets';\nimport { downloadAsync, IS_ENV_WITH_UPDATES_ENABLED } from './PlatformUtils';\nimport resolveAssetSource from './resolveAssetSource';\n\ntype AssetDescriptor = {\n  name: string;\n  type: string;\n  hash?: string | null;\n  uri: string;\n  width?: number | null;\n  height?: number | null;\n};\n\ntype DownloadPromiseCallbacks = {\n  resolve: () => void;\n  reject: (error: Error) => void;\n};\n\nexport type AssetMetadata = AssetSources.AssetMetadata;\n\nexport class Asset {\n  static byHash = {};\n  static byUri = {};\n\n  name: string;\n  type: string;\n  hash: string | null = null;\n  uri: string;\n  localUri: string | null = null;\n  width: number | null = null;\n  height: number | null = null;\n  downloading: boolean = false;\n  downloaded: boolean = false;\n  _downloadCallbacks: DownloadPromiseCallbacks[] = [];\n\n  constructor({ name, type, hash = null, uri, width, height }: AssetDescriptor) {\n    this.name = name;\n    this.type = type;\n    this.hash = hash;\n    this.uri = uri;\n\n    if (typeof width === 'number') {\n      this.width = width;\n    }\n    if (typeof height === 'number') {\n      this.height = height;\n    }\n\n    if (hash) {\n      this.localUri = getEmbeddedAssetUri(hash, type);\n      if (this.localUri) {\n        this.downloaded = true;\n      }\n    }\n\n    if (Platform.OS === 'web') {\n      if (!name) {\n        this.name = AssetUris.getFilename(uri);\n      }\n      if (!type) {\n        this.type = AssetUris.getFileExtension(uri);\n      }\n    }\n  }\n\n  static loadAsync(moduleId: number | number[] | string | string[]): Promise<Asset[]> {\n    const moduleIds = Array.isArray(moduleId) ? moduleId : [moduleId];\n    return Promise.all(moduleIds.map(moduleId => Asset.fromModule(moduleId).downloadAsync()));\n  }\n\n  static fromModule(virtualAssetModule: number | string): Asset {\n    if (typeof virtualAssetModule === 'string') {\n      return Asset.fromURI(virtualAssetModule);\n    }\n\n    const meta = getAssetByID(virtualAssetModule);\n    if (!meta) {\n      throw new Error(`Module \"${virtualAssetModule}\" is missing from the asset registry`);\n    }\n\n    // Outside of the managed env we need the moduleId to initialize the asset\n    // because resolveAssetSource depends on it\n    if (!IS_ENV_WITH_UPDATES_ENABLED) {\n      const { uri } = resolveAssetSource(virtualAssetModule);\n      const asset = new Asset({\n        name: meta.name,\n        type: meta.type,\n        hash: meta.hash,\n        uri,\n        width: meta.width,\n        height: meta.height,\n      });\n\n      // TODO: FileSystem should probably support 'downloading' from drawable\n      // resources But for now it doesn't (it only supports raw resources) and\n      // React Native's Image works fine with drawable resource names for\n      // images.\n      if (Platform.OS === 'android' && !uri.includes(':') && (meta.width || meta.height)) {\n        asset.localUri = asset.uri;\n        asset.downloaded = true;\n      }\n\n      Asset.byHash[meta.hash] = asset;\n      return asset;\n    }\n\n    return Asset.fromMetadata(meta);\n  }\n\n  static fromMetadata(meta: AssetMetadata): Asset {\n    // The hash of the whole asset, not to be confused with the hash of a specific file returned\n    // from `selectAssetSource`\n    const metaHash = meta.hash;\n    if (Asset.byHash[metaHash]) {\n      return Asset.byHash[metaHash];\n    }\n\n    const { uri, hash } = AssetSources.selectAssetSource(meta);\n    const asset = new Asset({\n      name: meta.name,\n      type: meta.type,\n      hash,\n      uri,\n      width: meta.width,\n      height: meta.height,\n    });\n    Asset.byHash[metaHash] = asset;\n    return asset;\n  }\n\n  static fromURI(uri: string): Asset {\n    if (Asset.byUri[uri]) {\n      return Asset.byUri[uri];\n    }\n\n    // Possibly a Base64-encoded URI\n    let type = '';\n    if (uri.indexOf(';base64') > -1) {\n      type = uri.split(';')[0].split('/')[1];\n    } else {\n      const extension = AssetUris.getFileExtension(uri);\n      type = extension.startsWith('.') ? extension.substring(1) : extension;\n    }\n\n    const asset = new Asset({\n      name: '',\n      type,\n      hash: null,\n      uri,\n    });\n\n    Asset.byUri[uri] = asset;\n\n    return asset;\n  }\n\n  async downloadAsync(): Promise<this> {\n    if (this.downloaded) {\n      return this;\n    }\n    if (this.downloading) {\n      await new Promise((resolve, reject) => {\n        this._downloadCallbacks.push({ resolve, reject });\n      });\n      return this;\n    }\n    this.downloading = true;\n\n    try {\n      if (Platform.OS === 'web') {\n        if (ImageAssets.isImageType(this.type)) {\n          const { width, height, name } = await ImageAssets.getImageInfoAsync(this.uri);\n          this.width = width;\n          this.height = height;\n          this.name = name;\n        } else {\n          this.name = AssetUris.getFilename(this.uri);\n        }\n      }\n      this.localUri = await downloadAsync(this.uri, this.hash, this.type, this.name);\n\n      this.downloaded = true;\n      this._downloadCallbacks.forEach(({ resolve }) => resolve());\n    } catch (e) {\n      this._downloadCallbacks.forEach(({ reject }) => reject(e));\n      throw e;\n    } finally {\n      this.downloading = false;\n      this._downloadCallbacks = [];\n    }\n    return this;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}