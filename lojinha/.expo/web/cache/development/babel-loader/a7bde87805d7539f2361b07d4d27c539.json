{"ast":null,"code":"'use strict';\n\nvar _this = this,\n    _jsxFileName = \"/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/LogBox/__tests__/LogBoxInspectorContainer-test.js\";\n\nvar React = require('react');\n\nvar _require = require(\"../LogBoxNotificationContainer\"),\n    LogBoxNotificationContainer = _require._LogBoxNotificationContainer;\n\nvar LogBoxLog = require(\"../Data/LogBoxLog\").default;\n\nvar render = require(\"../../../jest/renderer\");\n\ndescribe('LogBoxNotificationContainer', function () {\n  it('should render null with no logs', function () {\n    var output = render.shallowRender(React.createElement(LogBoxNotificationContainer, {\n      selectedLogIndex: -1,\n      logs: [],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 7\n      }\n    }));\n    expect(output).toMatchSnapshot();\n  });\n  it('should render null with no selected log and disabled', function () {\n    var output = render.shallowRender(React.createElement(LogBoxNotificationContainer, {\n      isDisabled: true,\n      selectedLogIndex: -1,\n      logs: [new LogBoxLog({\n        level: 'warn',\n        isComponentError: false,\n        message: {\n          content: 'Some kind of message',\n          substitutions: []\n        },\n        stack: [],\n        category: 'Some kind of message',\n        componentStack: []\n      })],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 7\n      }\n    }));\n    expect(output).toMatchSnapshot();\n  });\n  it('should render the latest warning notification', function () {\n    var output = render.shallowRender(React.createElement(LogBoxNotificationContainer, {\n      selectedLogIndex: -1,\n      logs: [new LogBoxLog({\n        level: 'warn',\n        isComponentError: false,\n        message: {\n          content: 'Some kind of message',\n          substitutions: []\n        },\n        stack: [],\n        category: 'Some kind of message',\n        componentStack: []\n      }), new LogBoxLog({\n        level: 'warn',\n        isComponentError: false,\n        message: {\n          content: 'Some kind of message (latest)',\n          substitutions: []\n        },\n        stack: [],\n        category: 'Some kind of message (latest)',\n        componentStack: []\n      })],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }\n    }));\n    expect(output).toMatchSnapshot();\n  });\n  it('should render the latest error notification', function () {\n    var output = render.shallowRender(React.createElement(LogBoxNotificationContainer, {\n      selectedLogIndex: -1,\n      logs: [new LogBoxLog({\n        level: 'error',\n        isComponentError: false,\n        message: {\n          content: 'Some kind of message',\n          substitutions: []\n        },\n        stack: [],\n        category: 'Some kind of message',\n        componentStack: []\n      }), new LogBoxLog({\n        level: 'error',\n        isComponentError: false,\n        message: {\n          content: 'Some kind of message (latest)',\n          substitutions: []\n        },\n        stack: [],\n        category: 'Some kind of message (latest)',\n        componentStack: []\n      })],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 7\n      }\n    }));\n    expect(output).toMatchSnapshot();\n  });\n  it('should render both an error and warning notification', function () {\n    var output = render.shallowRender(React.createElement(LogBoxNotificationContainer, {\n      selectedLogIndex: -1,\n      logs: [new LogBoxLog({\n        level: 'warn',\n        isComponentError: false,\n        message: {\n          content: 'Some kind of message',\n          substitutions: []\n        },\n        stack: [],\n        category: 'Some kind of message',\n        componentStack: []\n      }), new LogBoxLog({\n        level: 'error',\n        isComponentError: false,\n        message: {\n          content: 'Some kind of message (latest)',\n          substitutions: []\n        },\n        stack: [],\n        category: 'Some kind of message (latest)',\n        componentStack: []\n      })],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 7\n      }\n    }));\n    expect(output).toMatchSnapshot();\n  });\n  it('should render selected fatal error even when disabled', function () {\n    var output = render.shallowRender(React.createElement(LogBoxNotificationContainer, {\n      isDisabled: true,\n      selectedLogIndex: 0,\n      logs: [new LogBoxLog({\n        level: 'fatal',\n        isComponentError: false,\n        message: {\n          content: 'Should be selected',\n          substitutions: []\n        },\n        stack: [],\n        category: 'Some kind of message',\n        componentStack: []\n      })],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 7\n      }\n    }));\n    expect(output).toMatchSnapshot();\n  });\n  it('should render selected syntax error even when disabled', function () {\n    var output = render.shallowRender(React.createElement(LogBoxNotificationContainer, {\n      isDisabled: true,\n      selectedLogIndex: 0,\n      logs: [new LogBoxLog({\n        level: 'syntax',\n        isComponentError: false,\n        message: {\n          content: 'Should be selected',\n          substitutions: []\n        },\n        stack: [],\n        category: 'Some kind of syntax error message',\n        componentStack: [],\n        codeFrame: {\n          fileName: '/path/to/RKJSModules/Apps/CrashReact/CrashReactApp.js',\n          location: {\n            row: 199,\n            column: 0\n          },\n          content: \"  197 | });\\n  198 |\\n> 199 | export default CrashReactApp;\\n      | ^\\n  200 |\"\n        }\n      })],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 7\n      }\n    }));\n    expect(output).toMatchSnapshot();\n  });\n});","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/Libraries/LogBox/__tests__/LogBoxInspectorContainer-test.js"],"names":["React","require","LogBoxNotificationContainer","_LogBoxNotificationContainer","LogBoxLog","default","render","describe","it","output","shallowRender","expect","toMatchSnapshot","level","isComponentError","message","content","substitutions","stack","category","componentStack","codeFrame","fileName","location","row","column"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @emails oncall+react_native\n * @flow\n */\n\n'use strict';\n\nconst React = require('react');\nconst {\n  _LogBoxNotificationContainer: LogBoxNotificationContainer,\n} = require('../LogBoxNotificationContainer');\nconst LogBoxLog = require('../Data/LogBoxLog').default;\nconst render = require('../../../jest/renderer');\n\ndescribe('LogBoxNotificationContainer', () => {\n  it('should render null with no logs', () => {\n    const output = render.shallowRender(\n      <LogBoxNotificationContainer selectedLogIndex={-1} logs={[]} />,\n    );\n\n    expect(output).toMatchSnapshot();\n  });\n\n  it('should render null with no selected log and disabled', () => {\n    const output = render.shallowRender(\n      <LogBoxNotificationContainer\n        isDisabled\n        selectedLogIndex={-1}\n        logs={[\n          new LogBoxLog({\n            level: 'warn',\n            isComponentError: false,\n            message: {\n              content: 'Some kind of message',\n              substitutions: [],\n            },\n            stack: [],\n            category: 'Some kind of message',\n            componentStack: [],\n          }),\n        ]}\n      />,\n    );\n\n    expect(output).toMatchSnapshot();\n  });\n\n  it('should render the latest warning notification', () => {\n    const output = render.shallowRender(\n      <LogBoxNotificationContainer\n        selectedLogIndex={-1}\n        logs={[\n          new LogBoxLog({\n            level: 'warn',\n            isComponentError: false,\n            message: {\n              content: 'Some kind of message',\n              substitutions: [],\n            },\n            stack: [],\n            category: 'Some kind of message',\n            componentStack: [],\n          }),\n          new LogBoxLog({\n            level: 'warn',\n            isComponentError: false,\n            message: {\n              content: 'Some kind of message (latest)',\n              substitutions: [],\n            },\n            stack: [],\n            category: 'Some kind of message (latest)',\n            componentStack: [],\n          }),\n        ]}\n      />,\n    );\n\n    expect(output).toMatchSnapshot();\n  });\n\n  it('should render the latest error notification', () => {\n    const output = render.shallowRender(\n      <LogBoxNotificationContainer\n        selectedLogIndex={-1}\n        logs={[\n          new LogBoxLog({\n            level: 'error',\n            isComponentError: false,\n            message: {\n              content: 'Some kind of message',\n              substitutions: [],\n            },\n            stack: [],\n            category: 'Some kind of message',\n            componentStack: [],\n          }),\n          new LogBoxLog({\n            level: 'error',\n            isComponentError: false,\n            message: {\n              content: 'Some kind of message (latest)',\n              substitutions: [],\n            },\n            stack: [],\n            category: 'Some kind of message (latest)',\n            componentStack: [],\n          }),\n        ]}\n      />,\n    );\n\n    expect(output).toMatchSnapshot();\n  });\n\n  it('should render both an error and warning notification', () => {\n    const output = render.shallowRender(\n      <LogBoxNotificationContainer\n        selectedLogIndex={-1}\n        logs={[\n          new LogBoxLog({\n            level: 'warn',\n            isComponentError: false,\n            message: {\n              content: 'Some kind of message',\n              substitutions: [],\n            },\n            stack: [],\n            category: 'Some kind of message',\n            componentStack: [],\n          }),\n          new LogBoxLog({\n            level: 'error',\n            isComponentError: false,\n            message: {\n              content: 'Some kind of message (latest)',\n              substitutions: [],\n            },\n            stack: [],\n            category: 'Some kind of message (latest)',\n            componentStack: [],\n          }),\n        ]}\n      />,\n    );\n\n    expect(output).toMatchSnapshot();\n  });\n\n  it('should render selected fatal error even when disabled', () => {\n    const output = render.shallowRender(\n      <LogBoxNotificationContainer\n        isDisabled\n        selectedLogIndex={0}\n        logs={[\n          new LogBoxLog({\n            level: 'fatal',\n            isComponentError: false,\n            message: {\n              content: 'Should be selected',\n              substitutions: [],\n            },\n            stack: [],\n            category: 'Some kind of message',\n            componentStack: [],\n          }),\n        ]}\n      />,\n    );\n\n    expect(output).toMatchSnapshot();\n  });\n\n  it('should render selected syntax error even when disabled', () => {\n    const output = render.shallowRender(\n      <LogBoxNotificationContainer\n        isDisabled\n        selectedLogIndex={0}\n        logs={[\n          new LogBoxLog({\n            level: 'syntax',\n            isComponentError: false,\n            message: {\n              content: 'Should be selected',\n              substitutions: [],\n            },\n            stack: [],\n            category: 'Some kind of syntax error message',\n            componentStack: [],\n            codeFrame: {\n              fileName: '/path/to/RKJSModules/Apps/CrashReact/CrashReactApp.js',\n              location: {row: 199, column: 0},\n              content: `  197 | });\n  198 |\n> 199 | export default CrashReactApp;\n      | ^\n  200 |`,\n            },\n          }),\n        ]}\n      />,\n    );\n\n    expect(output).toMatchSnapshot();\n  });\n});\n"]},"metadata":{},"sourceType":"script"}