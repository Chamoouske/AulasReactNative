{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _child_process() {\n  var data = require(\"child_process\");\n\n  _child_process = function _child_process() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction parseDevicesResult(result) {\n  if (!result) {\n    return [];\n  }\n\n  var devices = [];\n  var lines = result.trim().split(/\\r?\\n/);\n\n  for (var i = 0; i < lines.length; i++) {\n    var words = lines[i].split(/[ ,\\t]+/).filter(function (w) {\n      return w !== '';\n    });\n\n    if (words[1] === 'device') {\n      devices.push(words[0]);\n    }\n  }\n\n  return devices;\n}\n\nfunction getDevices(adbPath) {\n  try {\n    var devicesResult = (0, _child_process().execSync)(adbPath + \" devices\");\n    return parseDevicesResult(devicesResult.toString());\n  } catch (e) {\n    return [];\n  }\n}\n\nfunction getAvailableCPUs(adbPath, device) {\n  try {\n    var baseArgs = ['-s', device, 'shell', 'getprop'];\n    var cpus = (0, _child_process().execFileSync)(adbPath, baseArgs.concat(['ro.product.cpu.abilist'])).toString();\n\n    if (!cpus || cpus.trim().length === 0) {\n      cpus = (0, _child_process().execFileSync)(adbPath, baseArgs.concat(['ro.product.cpu.abi'])).toString();\n    }\n\n    return (cpus || '').trim().split(',');\n  } catch (e) {\n    return [];\n  }\n}\n\nvar _default = {\n  getDevices: getDevices,\n  getAvailableCPUs: getAvailableCPUs\n};\nexports.default = _default;","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/adb.js"],"names":["Object","defineProperty","exports","value","default","_child_process","data","require","parseDevicesResult","result","devices","lines","trim","split","i","length","words","filter","w","push","getDevices","adbPath","devicesResult","execSync","toString","e","getAvailableCPUs","device","baseArgs","cpus","execFileSync","concat","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,SAASC,cAAT,GAA0B;AACxB,MAAMC,IAAI,GAAGC,OAAO,CAAC,eAAD,CAApB;;AAEAF,EAAAA,cAAc,GAAG,0BAAY;AAC3B,WAAOC,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAaD,SAASE,kBAAT,CAA4BC,MAA5B,EAAoC;AAClC,MAAI,CAACA,MAAL,EAAa;AACX,WAAO,EAAP;AACD;;AAED,MAAMC,OAAO,GAAG,EAAhB;AACA,MAAMC,KAAK,GAAGF,MAAM,CAACG,IAAP,GAAcC,KAAd,CAAoB,OAApB,CAAd;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACI,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,QAAME,KAAK,GAAGL,KAAK,CAACG,CAAD,CAAL,CAASD,KAAT,CAAe,SAAf,EAA0BI,MAA1B,CAAiC,UAAAC,CAAC;AAAA,aAAIA,CAAC,KAAK,EAAV;AAAA,KAAlC,CAAd;;AAEA,QAAIF,KAAK,CAAC,CAAD,CAAL,KAAa,QAAjB,EAA2B;AACzBN,MAAAA,OAAO,CAACS,IAAR,CAAaH,KAAK,CAAC,CAAD,CAAlB;AACD;AACF;;AAED,SAAON,OAAP;AACD;;AAMD,SAASU,UAAT,CAAoBC,OAApB,EAA6B;AAC3B,MAAI;AACF,QAAMC,aAAa,GAAG,CAAC,GAAGjB,cAAc,GAAGkB,QAArB,EAAkCF,OAAlC,cAAtB;AACA,WAAOb,kBAAkB,CAACc,aAAa,CAACE,QAAd,EAAD,CAAzB;AACD,GAHD,CAGE,OAAOC,CAAP,EAAU;AACV,WAAO,EAAP;AACD;AACF;;AAMD,SAASC,gBAAT,CAA0BL,OAA1B,EAAmCM,MAAnC,EAA2C;AACzC,MAAI;AACF,QAAMC,QAAQ,GAAG,CAAC,IAAD,EAAOD,MAAP,EAAe,OAAf,EAAwB,SAAxB,CAAjB;AACA,QAAIE,IAAI,GAAG,CAAC,GAAGxB,cAAc,GAAGyB,YAArB,EAAmCT,OAAnC,EAA4CO,QAAQ,CAACG,MAAT,CAAgB,CAAC,wBAAD,CAAhB,CAA5C,EAAyFP,QAAzF,EAAX;;AAEA,QAAI,CAACK,IAAD,IAASA,IAAI,CAACjB,IAAL,GAAYG,MAAZ,KAAuB,CAApC,EAAuC;AACrCc,MAAAA,IAAI,GAAG,CAAC,GAAGxB,cAAc,GAAGyB,YAArB,EAAmCT,OAAnC,EAA4CO,QAAQ,CAACG,MAAT,CAAgB,CAAC,oBAAD,CAAhB,CAA5C,EAAqFP,QAArF,EAAP;AACD;;AAED,WAAO,CAACK,IAAI,IAAI,EAAT,EAAajB,IAAb,GAAoBC,KAApB,CAA0B,GAA1B,CAAP;AACD,GATD,CASE,OAAOY,CAAP,EAAU;AACV,WAAO,EAAP;AACD;AACF;;AAED,IAAIO,QAAQ,GAAG;AACbZ,EAAAA,UAAU,EAAVA,UADa;AAEbM,EAAAA,gBAAgB,EAAhBA;AAFa,CAAf;AAIAxB,OAAO,CAACE,OAAR,GAAkB4B,QAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _child_process() {\n  const data = require(\"child_process\");\n\n  _child_process = function () {\n    return data;\n  };\n\n  return data;\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * Parses the output of the 'adb devices' command\n */\nfunction parseDevicesResult(result) {\n  if (!result) {\n    return [];\n  }\n\n  const devices = [];\n  const lines = result.trim().split(/\\r?\\n/);\n\n  for (let i = 0; i < lines.length; i++) {\n    const words = lines[i].split(/[ ,\\t]+/).filter(w => w !== '');\n\n    if (words[1] === 'device') {\n      devices.push(words[0]);\n    }\n  }\n\n  return devices;\n}\n/**\n * Executes the commands needed to get a list of devices from ADB\n */\n\n\nfunction getDevices(adbPath) {\n  try {\n    const devicesResult = (0, _child_process().execSync)(`${adbPath} devices`);\n    return parseDevicesResult(devicesResult.toString());\n  } catch (e) {\n    return [];\n  }\n}\n/**\n * Gets available CPUs of devices from ADB\n */\n\n\nfunction getAvailableCPUs(adbPath, device) {\n  try {\n    const baseArgs = ['-s', device, 'shell', 'getprop'];\n    let cpus = (0, _child_process().execFileSync)(adbPath, baseArgs.concat(['ro.product.cpu.abilist'])).toString(); // pre-Lollipop\n\n    if (!cpus || cpus.trim().length === 0) {\n      cpus = (0, _child_process().execFileSync)(adbPath, baseArgs.concat(['ro.product.cpu.abi'])).toString();\n    }\n\n    return (cpus || '').trim().split(',');\n  } catch (e) {\n    return [];\n  }\n}\n\nvar _default = {\n  getDevices,\n  getAvailableCPUs\n};\nexports.default = _default;\n\n//# sourceMappingURL=adb.js.map"]},"metadata":{},"sourceType":"script"}