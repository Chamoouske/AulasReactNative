{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar core_plugins_1 = require(\"./core-plugins\");\n\nfunction createInfoPlistPlugin(action, name) {\n  var withUnknown = function withUnknown(config) {\n    return exports.withInfoPlist(config, function _callee(config) {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(action(config, config.modResults));\n\n            case 2:\n              config.modResults = _context.sent;\n              return _context.abrupt(\"return\", config);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n  };\n\n  if (name) {\n    Object.defineProperty(withUnknown, 'name', {\n      value: name\n    });\n  }\n\n  return withUnknown;\n}\n\nexports.createInfoPlistPlugin = createInfoPlistPlugin;\n\nfunction createEntitlementsPlugin(action, name) {\n  var withUnknown = function withUnknown(config) {\n    return exports.withEntitlementsPlist(config, function _callee2(config) {\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(action(config, config.modResults));\n\n            case 2:\n              config.modResults = _context2.sent;\n              return _context2.abrupt(\"return\", config);\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n  };\n\n  if (name) {\n    Object.defineProperty(withUnknown, 'name', {\n      value: name\n    });\n  }\n\n  return withUnknown;\n}\n\nexports.createEntitlementsPlugin = createEntitlementsPlugin;\n\nexports.withAppDelegate = function (config, action) {\n  return core_plugins_1.withExtendedMod(config, {\n    platform: 'ios',\n    mod: 'appDelegate',\n    action: action\n  });\n};\n\nexports.withInfoPlist = function (config, _action) {\n  return core_plugins_1.withExtendedMod(config, {\n    platform: 'ios',\n    mod: 'infoPlist',\n    action: function action(config) {\n      return _regeneratorRuntime.async(function action$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(_action(config));\n\n            case 2:\n              config = _context3.sent;\n\n              if (!config.ios) {\n                config.ios = {};\n              }\n\n              config.ios.infoPlist = config.modResults;\n              return _context3.abrupt(\"return\", config);\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  });\n};\n\nexports.withEntitlementsPlist = function (config, _action2) {\n  return core_plugins_1.withExtendedMod(config, {\n    platform: 'ios',\n    mod: 'entitlements',\n    action: function action(config) {\n      return _regeneratorRuntime.async(function action$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return _regeneratorRuntime.awrap(_action2(config));\n\n            case 2:\n              config = _context4.sent;\n\n              if (!config.ios) {\n                config.ios = {};\n              }\n\n              config.ios.entitlements = config.modResults;\n              return _context4.abrupt(\"return\", config);\n\n            case 6:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  });\n};\n\nexports.withExpoPlist = function (config, action) {\n  return core_plugins_1.withExtendedMod(config, {\n    platform: 'ios',\n    mod: 'expoPlist',\n    action: action\n  });\n};\n\nexports.withXcodeProject = function (config, action) {\n  return core_plugins_1.withExtendedMod(config, {\n    platform: 'ios',\n    mod: 'xcodeproj',\n    action: action\n  });\n};","map":{"version":3,"sources":["../../src/plugins/ios-plugins.ts"],"names":[],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport { JSONObject } from '@expo/json-file';\nimport { XcodeProject } from 'xcode';\n\nimport { ConfigPlugin, Mod } from '../Plugin.types';\nimport { ExpoPlist, InfoPlist } from '../ios/IosConfig.types';\nimport { AppDelegateProjectFile } from '../ios/Paths';\nimport { withExtendedMod } from './core-plugins';\n\ntype MutateInfoPlistAction = (expo: ExpoConfig, infoPlist: InfoPlist) => InfoPlist;\n\n/**\n * Helper method for creating mods from existing config functions.\n *\n * @param action\n */\nexport function createInfoPlistPlugin(action: MutateInfoPlistAction, name?: string): ConfigPlugin {\n  const withUnknown: ConfigPlugin = config =>\n    withInfoPlist(config, async config => {\n      config.modResults = await action(config, config.modResults);\n      return config;\n    });\n  if (name) {\n    Object.defineProperty(withUnknown, 'name', {\n      value: name,\n    });\n  }\n  return withUnknown;\n}\n\ntype MutateEntitlementsPlistAction = (expo: ExpoConfig, entitlements: JSONObject) => JSONObject;\n\n/**\n * Helper method for creating mods from existing config functions.\n *\n * @param action\n */\nexport function createEntitlementsPlugin(\n  action: MutateEntitlementsPlistAction,\n  name: string\n): ConfigPlugin {\n  const withUnknown: ConfigPlugin = config =>\n    withEntitlementsPlist(config, async config => {\n      config.modResults = await action(config, config.modResults);\n      return config;\n    });\n  if (name) {\n    Object.defineProperty(withUnknown, 'name', {\n      value: name,\n    });\n  }\n  return withUnknown;\n}\n\n/**\n * Provides the AppDelegate file for modification.\n *\n * @param config\n * @param action\n */\nexport const withAppDelegate: ConfigPlugin<Mod<AppDelegateProjectFile>> = (config, action) => {\n  return withExtendedMod(config, {\n    platform: 'ios',\n    mod: 'appDelegate',\n    action,\n  });\n};\n\n/**\n * Provides the Info.plist file for modification.\n * Keeps the config's expo.ios.infoPlist object in sync with the data.\n *\n * @param config\n * @param action\n */\nexport const withInfoPlist: ConfigPlugin<Mod<InfoPlist>> = (config, action) => {\n  return withExtendedMod<InfoPlist>(config, {\n    platform: 'ios',\n    mod: 'infoPlist',\n    async action(config) {\n      config = await action(config);\n      if (!config.ios) {\n        config.ios = {};\n      }\n      config.ios.infoPlist = config.modResults;\n      return config;\n    },\n  });\n};\n\n/**\n * Provides the main .entitlements file for modification.\n * Keeps the config's expo.ios.entitlements object in sync with the data.\n *\n * @param config\n * @param action\n */\nexport const withEntitlementsPlist: ConfigPlugin<Mod<JSONObject>> = (config, action) => {\n  return withExtendedMod<JSONObject>(config, {\n    platform: 'ios',\n    mod: 'entitlements',\n    async action(config) {\n      config = await action(config);\n      if (!config.ios) {\n        config.ios = {};\n      }\n      config.ios.entitlements = config.modResults;\n      return config;\n    },\n  });\n};\n\n/**\n * Provides the Expo.plist for modification.\n *\n * @param config\n * @param action\n */\nexport const withExpoPlist: ConfigPlugin<Mod<ExpoPlist>> = (config, action) => {\n  return withExtendedMod(config, {\n    platform: 'ios',\n    mod: 'expoPlist',\n    action,\n  });\n};\n\n/**\n * Provides the main .xcodeproj for modification.\n *\n * @param config\n * @param action\n */\nexport const withXcodeProject: ConfigPlugin<Mod<XcodeProject>> = (config, action) => {\n  return withExtendedMod(config, {\n    platform: 'ios',\n    mod: 'xcodeproj',\n    action,\n  });\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}