{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getApplicationNativeTarget = exports.getAllPBXProjectPaths = exports.getAllXcodeProjectPaths = void 0;\n\nvar assert_1 = __importDefault(require(\"assert\"));\n\nvar fs_extra_1 = require(\"fs-extra\");\n\nvar glob_1 = require(\"glob\");\n\nvar path = __importStar(require(\"path\"));\n\nvar ignoredPaths = ['**/@(Carthage|Pods|node_modules)/**'];\n\nfunction getAllXcodeProjectPaths(projectRoot) {\n  var iosFolder = 'ios';\n  var pbxprojPaths = glob_1.sync('**/*.xcodeproj', {\n    cwd: projectRoot,\n    ignore: ignoredPaths\n  }).filter(function (project) {\n    return !/test|example|sample/i.test(project) || path.dirname(project) === iosFolder;\n  }).sort(function (project) {\n    return path.dirname(project) === iosFolder ? -1 : 1;\n  }).sort();\n\n  if (!pbxprojPaths.length) {\n    throw new Error(\"Failed to locate the ios/*.xcodeproj files relative to path \\\"\" + projectRoot + \"\\\".\");\n  }\n\n  return pbxprojPaths.map(function (value) {\n    return path.join(projectRoot, value);\n  });\n}\n\nexports.getAllXcodeProjectPaths = getAllXcodeProjectPaths;\n\nfunction getAllPBXProjectPaths(projectRoot) {\n  var projectPaths = getAllXcodeProjectPaths(projectRoot);\n  var paths = projectPaths.map(function (value) {\n    return path.join(value, 'project.pbxproj');\n  }).filter(function (value) {\n    return fs_extra_1.pathExistsSync(value);\n  });\n\n  if (!paths.length) {\n    throw new Error(\"Failed to locate the ios/*.xcodeproj/project.pbxproj files relative to path \\\"\" + projectRoot + \"\\\".\");\n  }\n\n  return paths;\n}\n\nexports.getAllPBXProjectPaths = getAllPBXProjectPaths;\n\nfunction getApplicationNativeTarget(_ref) {\n  var project = _ref.project,\n      projectName = _ref.projectName;\n  var applicationNativeTarget = project.getTarget('com.apple.product-type.application');\n  assert_1.default(applicationNativeTarget, \"Couldn't locate application PBXNativeTarget in '.xcodeproj' file.\");\n  assert_1.default(String(applicationNativeTarget.target.name) === projectName, \"Application native target name mismatch. Expected \" + projectName + \", but found \" + applicationNativeTarget.target.name + \".\");\n  return applicationNativeTarget;\n}\n\nexports.getApplicationNativeTarget = getApplicationNativeTarget;","map":{"version":3,"sources":["../../src/ios/Paths.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,IAAA,QAAA,GAAA,eAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA;;AACA,IAAA,UAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,MAAA,CAAA;;AACA,IAAA,IAAA,GAAA,YAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;AAGA,IAAM,YAAY,GAAG,CAAC,qCAAD,CAArB;;AAEA,SAAgB,uBAAhB,CAAwC,WAAxC,EAA2D;AACzD,MAAM,SAAS,GAAG,KAAlB;AACA,MAAM,YAAY,GAAG,MAAA,CAAA,IAAA,CAAS,gBAAT,EAA2B;AAAE,IAAA,GAAG,EAAE,WAAP;AAAoB,IAAA,MAAM,EAAE;AAA5B,GAA3B,EAClB,MADkB,CACX,UAAA,OAAO;AAAA,WAAI,CAAC,uBAAuB,IAAvB,CAA4B,OAA5B,CAAD,IAAyC,IAAI,CAAC,OAAL,CAAa,OAAb,MAA0B,SAAvE;AAAA,GADI,EAElB,IAFkB,CAEb,UAAA,OAAO;AAAA,WAAK,IAAI,CAAC,OAAL,CAAa,OAAb,MAA0B,SAA1B,GAAsC,CAAC,CAAvC,GAA2C,CAAhD;AAAA,GAFM,EAIlB,IAJkB,EAArB;;AAMA,MAAI,CAAC,YAAY,CAAC,MAAlB,EAA0B;AACxB,UAAM,IAAI,KAAJ,oEAC4D,WAD5D,SAAN;AAGD;;AACD,SAAO,YAAY,CAAC,GAAb,CAAiB,UAAA,KAAK;AAAA,WAAI,IAAI,CAAC,IAAL,CAAU,WAAV,EAAuB,KAAvB,CAAJ;AAAA,GAAtB,CAAP;AACD;;AAdD,OAAA,CAAA,uBAAA,GAAA,uBAAA;;AAgBA,SAAgB,qBAAhB,CAAsC,WAAtC,EAAyD;AACvD,MAAM,YAAY,GAAG,uBAAuB,CAAC,WAAD,CAA5C;AACA,MAAM,KAAK,GAAG,YAAY,CACvB,GADW,CACP,UAAA,KAAK;AAAA,WAAI,IAAI,CAAC,IAAL,CAAU,KAAV,EAAiB,iBAAjB,CAAJ;AAAA,GADE,EAEX,MAFW,CAEJ,UAAA,KAAK;AAAA,WAAI,UAAA,CAAA,cAAA,CAAe,KAAf,CAAJ;AAAA,GAFD,CAAd;;AAIA,MAAI,CAAC,KAAK,CAAC,MAAX,EAAmB;AACjB,UAAM,IAAI,KAAJ,oFAC4E,WAD5E,SAAN;AAGD;;AACD,SAAO,KAAP;AACD;;AAZD,OAAA,CAAA,qBAAA,GAAA,qBAAA;;AAcA,SAAgB,0BAAhB,OAMC;AAAA,MALC,OAKD,QALC,OAKD;AAAA,MAJC,WAID,QAJC,WAID;AACC,MAAM,uBAAuB,GAAG,OAAO,CAAC,SAAR,CAAkB,oCAAlB,CAAhC;AACA,EAAA,QAAA,CAAA,OAAA,CACE,uBADF;AAIA,EAAA,QAAA,CAAA,OAAA,CACE,MAAM,CAAC,uBAAuB,CAAC,MAAxB,CAA+B,IAAhC,CAAN,KAAgD,WADlD,yDAEuD,WAFvD,oBAEiF,uBAAuB,CAAC,MAAxB,CAA+B,IAFhH;AAIA,SAAO,uBAAP;AACD;;AAjBD,OAAA,CAAA,0BAAA,GAAA,0BAAA","sourcesContent":["// Copied over from `@expo/config-plugins/src/ios/Paths`\nimport assert from 'assert';\nimport { pathExistsSync } from 'fs-extra';\nimport { sync as globSync } from 'glob';\nimport * as path from 'path';\nimport { XcodeProject } from 'xcode';\n\nconst ignoredPaths = ['**/@(Carthage|Pods|node_modules)/**'];\n\nexport function getAllXcodeProjectPaths(projectRoot: string): string[] {\n  const iosFolder = 'ios';\n  const pbxprojPaths = globSync('**/*.xcodeproj', { cwd: projectRoot, ignore: ignoredPaths })\n    .filter(project => !/test|example|sample/i.test(project) || path.dirname(project) === iosFolder)\n    .sort(project => (path.dirname(project) === iosFolder ? -1 : 1))\n    // sort alphabetically to ensure this works the same across different devices (Fail in CI (linux) without this)\n    .sort();\n\n  if (!pbxprojPaths.length) {\n    throw new Error(\n      `Failed to locate the ios/*.xcodeproj files relative to path \"${projectRoot}\".`\n    );\n  }\n  return pbxprojPaths.map(value => path.join(projectRoot, value));\n}\n\nexport function getAllPBXProjectPaths(projectRoot: string): string[] {\n  const projectPaths = getAllXcodeProjectPaths(projectRoot);\n  const paths = projectPaths\n    .map(value => path.join(value, 'project.pbxproj'))\n    .filter(value => pathExistsSync(value));\n\n  if (!paths.length) {\n    throw new Error(\n      `Failed to locate the ios/*.xcodeproj/project.pbxproj files relative to path \"${projectRoot}\".`\n    );\n  }\n  return paths;\n}\n\nexport function getApplicationNativeTarget({\n  project,\n  projectName,\n}: {\n  project: XcodeProject;\n  projectName: string;\n}) {\n  const applicationNativeTarget = project.getTarget('com.apple.product-type.application');\n  assert(\n    applicationNativeTarget,\n    `Couldn't locate application PBXNativeTarget in '.xcodeproj' file.`\n  );\n  assert(\n    String(applicationNativeTarget.target.name) === projectName,\n    `Application native target name mismatch. Expected ${projectName}, but found ${applicationNativeTarget.target.name}.`\n  );\n  return applicationNativeTarget;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}