{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nvar _jsxFileName = \"/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@unimodules/react-native-adapter/src/NativeViewManagerAdapter.native.tsx\";\nimport omit from 'lodash/omit';\nimport pick from 'lodash/pick';\nimport React from 'react';\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport UIManager from \"react-native-web/dist/exports/UIManager\";\nimport { ViewPropTypes } from \"react-native-web/dist/index\";\nimport { requireNativeComponent } from \"react-native-web/dist/index\";\nvar ViewPropTypesKeys = Object.keys(ViewPropTypes);\nexport function requireNativeViewManager(viewName) {\n  if (__DEV__) {\n    var NativeUnimoduleProxy = NativeModules.NativeUnimoduleProxy;\n\n    if (!NativeUnimoduleProxy.viewManagersNames.includes(viewName)) {\n      var exportedViewManagerNames = NativeUnimoduleProxy.viewManagersNames.join(', ');\n      console.warn(\"The native view manager required by name (\" + viewName + \") from NativeViewManagerAdapter isn't exported by @unimodules/react-native-adapter. Views of this type may not render correctly. Exported view managers: [\" + exportedViewManagerNames + \"].\");\n    }\n  }\n\n  var reactNativeViewName = \"ViewManagerAdapter_\" + viewName;\n  var ReactNativeComponent = requireNativeComponent(reactNativeViewName);\n  var reactNativeUIConfiguration = (UIManager.getViewManagerConfig ? UIManager.getViewManagerConfig(reactNativeViewName) : UIManager[reactNativeViewName]) || {\n    NativeProps: {},\n    directEventTypes: {}\n  };\n  var reactNativeComponentPropNames = ['children'].concat(_toConsumableArray(ViewPropTypesKeys), _toConsumableArray(Object.keys(reactNativeUIConfiguration.NativeProps)), _toConsumableArray(Object.keys(reactNativeUIConfiguration.directEventTypes)));\n\n  function NativeComponentAdapter(props, ref) {\n    var nativeProps = pick(props, reactNativeComponentPropNames);\n    var proxiedProps = omit(props, reactNativeComponentPropNames);\n    return React.createElement(ReactNativeComponent, _extends({}, nativeProps, {\n      proxiedProperties: proxiedProps,\n      ref: ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 12\n      }\n    }));\n  }\n\n  NativeComponentAdapter.displayName = \"Adapter<\" + viewName + \">\";\n  return React.forwardRef(NativeComponentAdapter);\n}","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/@unimodules/react-native-adapter/src/NativeViewManagerAdapter.native.tsx"],"names":["omit","pick","React","ViewPropTypes","requireNativeComponent","ViewPropTypesKeys","Object","keys","requireNativeViewManager","viewName","__DEV__","NativeUnimoduleProxy","NativeModules","viewManagersNames","includes","exportedViewManagerNames","join","console","warn","reactNativeViewName","ReactNativeComponent","reactNativeUIConfiguration","UIManager","getViewManagerConfig","NativeProps","directEventTypes","reactNativeComponentPropNames","NativeComponentAdapter","props","ref","nativeProps","proxiedProps","displayName","forwardRef"],"mappings":";;;AAAA,OAAOA,IAAP,MAAiB,aAAjB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;SACmCC,a;SAAeC,sB;AAclD,IAAMC,iBAAiB,GAAGC,MAAM,CAACC,IAAP,CAAYJ,aAAZ,CAA1B;AASA,OAAO,SAASK,wBAAT,CAA2CC,QAA3C,EAAqF;AAC1F,MAAIC,OAAJ,EAAa;AAAA,QACHC,oBADG,GACsBC,aADtB,CACHD,oBADG;;AAEX,QAAI,CAACA,oBAAoB,CAACE,iBAArB,CAAuCC,QAAvC,CAAgDL,QAAhD,CAAL,EAAgE;AAC9D,UAAMM,wBAAwB,GAAGJ,oBAAoB,CAACE,iBAArB,CAAuCG,IAAvC,CAA4C,IAA5C,CAAjC;AACAC,MAAAA,OAAO,CAACC,IAAR,gDAC+CT,QAD/C,kKACoNM,wBADpN;AAGD;AACF;;AAID,MAAMI,mBAAmB,2BAAyBV,QAAlD;AACA,MAAMW,oBAAoB,GAAGhB,sBAAsB,CACjDe,mBADiD,CAAnD;AAGA,MAAME,0BAA0B,GAAG,CAACC,SAAS,CAACC,oBAAV,GAChCD,SAAS,CAACC,oBAAV,CAA+BJ,mBAA/B,CADgC,GAEhCG,SAAS,CAACH,mBAAD,CAFsB,KAEI;AACrCK,IAAAA,WAAW,EAAE,EADwB;AAErCC,IAAAA,gBAAgB,EAAE;AAFmB,GAFvC;AAMA,MAAMC,6BAA6B,IACjC,UADiC,4BAE9BrB,iBAF8B,sBAG9BC,MAAM,CAACC,IAAP,CAAYc,0BAA0B,CAACG,WAAvC,CAH8B,sBAI9BlB,MAAM,CAACC,IAAP,CAAYc,0BAA0B,CAACI,gBAAvC,CAJ8B,EAAnC;;AAQA,WAASE,sBAAT,CAAgCC,KAAhC,EAAuCC,GAAvC,EAA4C;AAG1C,QAAMC,WAAW,GAAG7B,IAAI,CAAC2B,KAAD,EAAQF,6BAAR,CAAxB;AACA,QAAMK,YAAY,GAAG/B,IAAI,CAAC4B,KAAD,EAAQF,6BAAR,CAAzB;AACA,WAAO,oBAAC,oBAAD,eAA0BI,WAA1B;AAAuC,MAAA,iBAAiB,EAAEC,YAA1D;AAAwE,MAAA,GAAG,EAAEF,GAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD;;AACDF,EAAAA,sBAAsB,CAACK,WAAvB,gBAAgDvB,QAAhD;AACA,SAAOP,KAAK,CAAC+B,UAAN,CAAiBN,sBAAjB,CAAP;AACD","sourcesContent":["import omit from 'lodash/omit';\nimport pick from 'lodash/pick';\nimport React from 'react';\nimport { NativeModules, UIManager, ViewPropTypes, requireNativeComponent } from 'react-native';\n\n// To make the transition from React Native's `requireNativeComponent` to Expo's\n// `requireNativeViewManager` as easy as possible, `requireNativeViewManager` is a drop-in\n// replacement for `requireNativeComponent`.\n//\n// For each view manager, we create a wrapper component that accepts all of the props available to\n// the author of the universal module. This wrapper component splits the props into two sets: props\n// passed to React Native's View (ex: style, testID) and custom view props, which are passed to the\n// adapter view component in a prop called `proxiedProperties`.\n\n// NOTE: React Native is moving away from runtime PropTypes and may remove ViewPropTypes, in which\n// case we will need another way to separate standard React Native view props from other props,\n// which we proxy through the adapter\nconst ViewPropTypesKeys = Object.keys(ViewPropTypes);\n\ntype NativeExpoComponentProps = {\n  proxiedProperties: object;\n};\n\n/**\n * A drop-in replacement for `requireNativeComponent`.\n */\nexport function requireNativeViewManager<P = any>(viewName: string): React.ComponentType<P> {\n  if (__DEV__) {\n    const { NativeUnimoduleProxy } = NativeModules;\n    if (!NativeUnimoduleProxy.viewManagersNames.includes(viewName)) {\n      const exportedViewManagerNames = NativeUnimoduleProxy.viewManagersNames.join(', ');\n      console.warn(\n        `The native view manager required by name (${viewName}) from NativeViewManagerAdapter isn't exported by @unimodules/react-native-adapter. Views of this type may not render correctly. Exported view managers: [${exportedViewManagerNames}].`\n      );\n    }\n  }\n\n  // Set up the React Native native component, which is an adapter to the universal module's view\n  // manager\n  const reactNativeViewName = `ViewManagerAdapter_${viewName}`;\n  const ReactNativeComponent = requireNativeComponent<NativeExpoComponentProps>(\n    reactNativeViewName\n  );\n  const reactNativeUIConfiguration = (UIManager.getViewManagerConfig\n    ? UIManager.getViewManagerConfig(reactNativeViewName)\n    : UIManager[reactNativeViewName]) || {\n    NativeProps: {},\n    directEventTypes: {},\n  };\n  const reactNativeComponentPropNames = [\n    'children',\n    ...ViewPropTypesKeys,\n    ...Object.keys(reactNativeUIConfiguration.NativeProps),\n    ...Object.keys(reactNativeUIConfiguration.directEventTypes),\n  ];\n\n  // Define a component for universal-module authors to access their native view manager\n  function NativeComponentAdapter(props, ref) {\n    // TODO: `omit` may incur a meaningful performance cost across many native components rendered\n    // in the same update. Profile this and write out a partition function if this is a bottleneck.\n    const nativeProps = pick(props, reactNativeComponentPropNames);\n    const proxiedProps = omit(props, reactNativeComponentPropNames);\n    return <ReactNativeComponent {...nativeProps} proxiedProperties={proxiedProps} ref={ref} />;\n  }\n  NativeComponentAdapter.displayName = `Adapter<${viewName}>`;\n  return React.forwardRef(NativeComponentAdapter);\n}\n"]},"metadata":{},"sourceType":"module"}