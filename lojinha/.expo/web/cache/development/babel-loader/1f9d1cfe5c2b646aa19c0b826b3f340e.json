{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nvar _jsxFileName = \"/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/RNTester/js/examples/Clipboard/ClipboardExample.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar React = require('react');\n\nvar Clipboard = require(\"react-native-web/dist/exports/Clipboard\").default;\n\nvar View = require(\"react-native-web/dist/exports/View\").default;\n\nvar Text = require(\"react-native-web/dist/exports/Text\").default;\n\nvar StyleSheet = require(\"react-native-web/dist/exports/StyleSheet\").default;\n\nvar ClipboardExample = function (_React$Component) {\n  _inherits(ClipboardExample, _React$Component);\n\n  var _super = _createSuper(ClipboardExample);\n\n  function ClipboardExample() {\n    var _this;\n\n    _classCallCheck(this, ClipboardExample);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      content: 'Content will appear here'\n    };\n\n    _this._setClipboardContent = function _callee() {\n      var content;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              Clipboard.setString('Hello World');\n              _context.prev = 1;\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(Clipboard.getString());\n\n            case 4:\n              content = _context.sent;\n\n              _this.setState({\n                content: content\n              });\n\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](1);\n\n              _this.setState({\n                content: _context.t0.message\n              });\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[1, 8]], Promise);\n    };\n\n    return _this;\n  }\n\n  _createClass(ClipboardExample, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 7\n        }\n      }, React.createElement(Text, {\n        onPress: this._setClipboardContent,\n        style: styles.label,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 9\n        }\n      }, \"Tap to put \\\"Hello World\\\" in the clipboard\"), React.createElement(Text, {\n        style: styles.content,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 9\n        }\n      }, this.state.content));\n    }\n  }]);\n\n  return ClipboardExample;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  label: {\n    color: 'blue'\n  },\n  content: {\n    color: 'red',\n    marginTop: 20\n  }\n});\nexports.title = 'Clipboard';\nexports.description = 'Show Clipboard contents.';\nexports.examples = [{\n  title: 'Clipboard.setString() and getString()',\n  render: function render() {\n    return React.createElement(ClipboardExample, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 14\n      }\n    });\n  }\n}];","map":{"version":3,"sources":["/home/chamoouske/Aulas/ReactNative/RandomWord/node_modules/react-native/RNTester/js/examples/Clipboard/ClipboardExample.js"],"names":["React","require","ClipboardExample","state","content","_setClipboardContent","Clipboard","setString","getString","setState","message","styles","label","Component","StyleSheet","create","color","marginTop","exports","title","description","examples","render"],"mappings":"AAUA;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;;;;;;;;;IASMC,gB;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,OAAO,EAAE;AADH,K;;UAIRC,oB,GAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AACrBC,cAAAA,SAAS,CAACC,SAAV,CAAoB,aAApB;AADqB;AAAA;AAAA,+CAGGD,SAAS,CAACE,SAAV,EAHH;;AAAA;AAGbJ,cAAAA,OAHa;;AAInB,oBAAKK,QAAL,CAAc;AAACL,gBAAAA,OAAO,EAAPA;AAAD,eAAd;;AAJmB;AAAA;;AAAA;AAAA;AAAA;;AAMnB,oBAAKK,QAAL,CAAc;AAACL,gBAAAA,OAAO,EAAE,YAAEM;AAAZ,eAAd;;AANmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;;;;;;WAUvB,kBAAS;AACP,aACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,OAAO,EAAE,KAAKL,oBAApB;AAA0C,QAAA,KAAK,EAAEM,MAAM,CAACC,KAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uDADF,EAIE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAED,MAAM,CAACP,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA8B,KAAKD,KAAL,CAAWC,OAAzC,CAJF,CADF;AAQD;;;;EAxB4BJ,KAAK,CAACa,S;;AA2BrC,IAAMF,MAAM,GAAGG,UAAU,CAACC,MAAX,CAAkB;AAC/BH,EAAAA,KAAK,EAAE;AACLI,IAAAA,KAAK,EAAE;AADF,GADwB;AAI/BZ,EAAAA,OAAO,EAAE;AACPY,IAAAA,KAAK,EAAE,KADA;AAEPC,IAAAA,SAAS,EAAE;AAFJ;AAJsB,CAAlB,CAAf;AAUAC,OAAO,CAACC,KAAR,GAAgB,WAAhB;AACAD,OAAO,CAACE,WAAR,GAAsB,0BAAtB;AACAF,OAAO,CAACG,QAAR,GAAmB,CACjB;AACEF,EAAAA,KAAK,EAAE,uCADT;AAEEG,EAAAA,MAFF,oBAEuB;AACnB,WAAO,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;AAJH,CADiB,CAAnB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nconst React = require('react');\n\nconst {Clipboard, View, Text, StyleSheet} = require('react-native');\n\ntype Props = $ReadOnly<{||}>;\ntype State = {|\n  content: string,\n|};\n\nclass ClipboardExample extends React.Component<Props, State> {\n  state = {\n    content: 'Content will appear here',\n  };\n\n  _setClipboardContent = async () => {\n    Clipboard.setString('Hello World');\n    try {\n      const content = await Clipboard.getString();\n      this.setState({content});\n    } catch (e) {\n      this.setState({content: e.message});\n    }\n  };\n\n  render() {\n    return (\n      <View>\n        <Text onPress={this._setClipboardContent} style={styles.label}>\n          Tap to put \"Hello World\" in the clipboard\n        </Text>\n        <Text style={styles.content}>{this.state.content}</Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  label: {\n    color: 'blue',\n  },\n  content: {\n    color: 'red',\n    marginTop: 20,\n  },\n});\n\nexports.title = 'Clipboard';\nexports.description = 'Show Clipboard contents.';\nexports.examples = [\n  {\n    title: 'Clipboard.setString() and getString()',\n    render(): React.Node {\n      return <ClipboardExample />;\n    },\n  },\n];\n"]},"metadata":{},"sourceType":"script"}